This is flycheck.info, produced by makeinfo version 5.2 from
flycheck.texi.

     Flycheck 0.17-cvs, January 30, 2014

     Sebastian Wiesner

     Copyright © 2014, Sebastian Wiesner

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* flycheck: (flycheck.info). On the fly syntax checking (aka "flymake done right").
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.2.


File: flycheck.info,  Node: Top,  Next: Introduction,  Up: (dir)

Flycheck Documentation
**********************

     Flycheck 0.17-cvs, January 30, 2014

     Sebastian Wiesner

     Copyright © 2014, Sebastian Wiesner

This manual is for Flycheck, the on-the-fly syntax checker for GNU
Emacs.

     Permission is granted to copy, distribute and/or modify this manual
     under the terms of the GNU Free Documentation License, Version 1.3
     or any later version published by the Free Software Foundation;
     with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
     Texts.  A copy of the license is included in the section *note GNU
     Free Documentation License: 1.

     Alternatively, you may copy, distribute and/or modify this manual
     under the terms of the Creative Commons Attribution-ShareAlike 4.0
     International Public License.  A copy of the license can be
     obtained at
     ‘https://creativecommons.org/licenses/by-sa/4.0/legalcode’.

* Menu:

* Introduction:: 
* Usage:: 
* Extending Flycheck:: 
* Flycheck API:: 
* Contribution guidelines:: 
* Credits:: 
* Changes:: 
* GNU Free Documentation License:: 
* Supported languages:: 
* Glossary:: 
* Index:: 

 — The Detailed Node Listing —

Introduction

* Features:: 
* 3rd party extensions:: 
* Installation:: 

Usage

* Flycheck Mode:: 
* Syntax checking:: 
* Syntax checker selection:: 
* Syntax checker configuration:: 
* Error reporting:: 
* Error navigation:: 
* Mode line:: 

Syntax checker configuration

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

Extending Flycheck

* Defining new syntax checkers:: 
* Registering new syntax checkers:: 
* Error levels:: 
* Error parsers:: 
* Option filters:: 
* Extending syntax checkers:: 
* Examples:: 

Examples

* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 

Flycheck API

* Error API:: 
* Error parser API:: 

Contribution guidelines

* Reporting issues:: 
* Contributing code:: 

Contributing code

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

Changes

* master (unreleased): master unreleased. 
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18, 2013): 0 12 May 18 2013. 
* 0.11 (May 01, 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012. 

Supported languages

* AsciiDoc:: 
* Bash:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* Racket:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell (POSIX): Shell POSIX. 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 
* Zsh:: 



File: flycheck.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs
24.

* Menu:

* Features:: 
* 3rd party extensions:: 
* Installation:: 


File: flycheck.info,  Node: Features,  Next: 3rd party extensions,  Up: Introduction

1.1 Features
============

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs
24.

   - Support for 41 languages with 61 syntax checkers, see *note
     Supported languages: 7.

   - *note Fully automatic syntax checking in the background: 8.

   - *note Nice error indication and highlighting: 9.

   - Optional error list popup

   - *note Many customization options: a.

   - *note A comprehensive manual: 0.

   - *note A dead simple API to create new syntax checkers: b.

   - A “doesn’t get in your way” guarantee


File: flycheck.info,  Node: 3rd party extensions,  Next: Installation,  Prev: Features,  Up: Introduction

1.2 3rd party extensions
========================

The following extensions provide additional cool features for Flycheck:

   - flycheck-cask(1) makes Flycheck use Cask packages in Cask(2)
     projects.

   - flycheck-color-mode-line(3) colors the mode line according to the
     Flycheck status.

   - flycheck-d-unittest(4) adds a Flycheck checker to run unit tests
     for D programs on the fly.

   - flycheck-hdevtools(5) adds a Flycheck syntax checker for Haskell
     based on hdevtools(6).

   - flycheck-haskell(7) improves Haskell support in Flycheck, by
     configuring Flycheck according to the current Cabal project, and
     using Cabal sandbox packages.

   - flycheck-mercury(8) adds a Flycheck syntax checker for the Mercury
     Language(9).

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-cask

   (2) https://github.com/cask/cask

   (3) https://github.com/flycheck/flycheck-color-mode-line

   (4) https://github.com/flycheck/flycheck-d-unittest

   (5) https://github.com/flycheck/flycheck-hdevtools

   (6) https://github.com/bitc/hdevtools/

   (7) https://github.com/flycheck/flycheck-haskell

   (8) https://github.com/flycheck/flycheck-mercury

   (9) http://mercurylang.org/


File: flycheck.info,  Node: Installation,  Prev: 3rd party extensions,  Up: Introduction

1.3 Installation
================

Install the ELPA package from MELPA(1) or Marmalade(2) using ‘M-x
package-install RET flycheck’.  The former is the _recommended_
repository.

Neither of these repositories is included in GNU Emacs by default.  You
need to enable these repositories explicitly.  For instance, to add the
MELPA repository, add the following code to ‘init.el’:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (package-initialize)

If you use Cask(3), add the following to your ‘Cask’ file:

     (source gnu)
     (source melpa)

     (depends-on "flycheck")

Flycheck supports Emacs 24.  It is tested with Emacs 24.3, and Emacs
snapshot builds.  It should work with GNU Emacs 24.1 and 24.2 as well,
but it is not tested against these versions.  If it does not work with
these versions, please report an issue.

Flycheck does not support Windows, but tries to be compatible with it.
You may try to use Flycheck on Windows.  It should mostly work, but
expect problems and issues.  Pull requests which improve Windows
compatibility are welcome.

Flycheck also does not support GNU Emacs 23 and other flavors of Emacs
(e.g.  XEmacs, Aquamacs, etc.).  Don’t try, it will _not_ work.

Most checkers depend on external tools to perform the actual syntax
checking.  Use *note flycheck-describe-checker: 10. to get help about a
syntax checker and its dependencies.

   ---------- Footnotes ----------

   (1) http://melpa.milkbox.net

   (2) http://marmalade-repo.org/

   (3) https://github.com/cask/cask


File: flycheck.info,  Node: Usage,  Next: Extending Flycheck,  Prev: Introduction,  Up: Top

2 Usage
*******

* Menu:

* Flycheck Mode:: 
* Syntax checking:: 
* Syntax checker selection:: 
* Syntax checker configuration:: 
* Error reporting:: 
* Error navigation:: 
* Mode line:: 


File: flycheck.info,  Node: Flycheck Mode,  Next: Syntax checking,  Up: Usage

2.1 Flycheck Mode
=================

Syntax checking is done in the Flycheck minor mode:

 -- Command: M -x flycheck-mode

     Toggle Flycheck Mode for the current buffer.

 -- User Option: User Option flycheck-mode

     Whether Flycheck Mode is enabled in the current buffer.

 -- Command: M -x global-flycheck-mode

     Toggle Flycheck Mode for *all* live buffers, and for new buffers.

     With Global Flycheck Mode, Flycheck Mode is automatically enabled
     in all buffers, for which a *note suitable syntax checker: 19.
     exists and is enabled.

          Note: Flycheck Mode will *not* be enabled in buffers for
          remote or encrypted files.  The former is flaky and might be
          very slow, and the latter might leak confidential data to
          temporary directories.

          You can still explicitly enable Flycheck Mode in such buffers
          with *note flycheck-mode: 16.  This is *not* recommended
          though.

 -- User Option: User Option global-flycheck-mode

     Whether Flycheck Mode is enabled globally.

If you like Flycheck Mode, you may want to enable it permanently, either
by customizing *note global-flycheck-mode: 1a, or by adding the
following code to your ‘init.el’:

     (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Syntax checking,  Next: Syntax checker selection,  Prev: Flycheck Mode,  Up: Usage

2.2 Syntax checking
===================

By default, *note Flycheck Mode: 14. checks syntax automatically when

   - the mode is enabled,

   - the file is saved,

   - new lines are inserted,

   - or some short time after the last change to the buffer.

However, you can customize automatic syntax checking with *note
flycheck-check-syntax-automatically: 1c.

 -- User Option: User Option flycheck-check-syntax-automatically

     When Flycheck should check syntax automatically.

     This variable is list of events that may trigger syntax checks.
     The following events are known:

     ‘mode-enabled’

          Check syntax immediately when ‘flycheck-mode’ is enabled.

     ‘save’

          Check syntax immediately after the buffer was saved.

     ‘new-line’

          Check syntax immediately after a new line was inserted into
          the buffer.

     ‘idle-change’

          Check syntax a short time after the last change to the buffer.

     An syntax check is only conducted for events that are contained in
     this list.  For instance, the following setting will cause Flycheck
     to _only_ check if the mode is enabled or the buffer was saved, but
     _never_ after changes to the buffer contents:

          (setq flycheck-check-syntax-automatically '(mode-enabled save))

     If the list is empty syntax is never checked automatically.  In
     this case, use *note flycheck-buffer: 1d. to check syntax manually.

 -- User Option: User Option flycheck-idle-change-delay

     How many seconds to wait before starting a syntax check.

     After the buffer was changed, Flycheck waits as many seconds as the
     value of this variable before starting a syntax check.  If the
     buffer is changed during this time, Flycheck starts to wait again.

     This variable has no effect, if ‘idle-change’ is not contained in
     *note flycheck-check-syntax-automatically: 1c.

Regardless of automatic syntax checking you can also check the buffer
manually:

 -- Command: C -c ! c
 -- Command: M -x flycheck-buffer

     Start a syntax check in the current buffer.

Each syntax check conducts the following steps:

  1. Run hooks in *note flycheck-before-syntax-check-hook: 1f.

  2. Clear error information from previous syntax checks.

  3. Select a *note suitable syntax checker: 19.  See *note Syntax
     checker selection: 20, for more information on how syntax checkers
     are selected.

  4. Copy the contents of the buffer to be checked to a temporary file.

  5. Run the syntax checker.

  6. Parse the output of the tool, and report all errors and warnings.
     See *note Error reporting: 9, for more information.

  7. If the buffer can be checked with another syntax checker, continue
     from step 4, but with the next syntax checker.  This is called
     “chaining” of syntax checkers.

  8. Run hooks in *note flycheck-after-syntax-check-hook: 21.

 -- Hook: Hook flycheck-after-syntax-check-hook

     Functions to run after each syntax check.

     This hook is run after a syntax check was finished.

     At this point, *all* chained checkers were run, and all errors were
     parsed, highlighted and reported.  See *note Error reporting: 9,
     for more information about error reporting.  The variable *note
     flycheck-current-errors: 22. contains all errors from all syntax
     checkers run during the syntax check, so you can use the various
     error analysis functions.

     Note that this hook does *not* run after each individual syntax
     checker in the syntax checker chain, but only after the *last
     checker*.

     This variable is a normal hook.  See *note (elisp)Hooks::.

 -- Hook: Hook flycheck-before-syntax-check-hook

     Functions to run before each syntax check.

     This hook is run right before a syntax check starts.

     Error information from the previous syntax check is *not* cleared
     before this hook runs.

     Note that this hook does *not* run before each individual syntax
     checker in the syntax checker chain, but only before the *first
     checker*.

     This variable is a normal hook.  See *note (elisp)Hooks::.

There is also a hook run whenever a syntax check fails:

 -- Hook: Hook flycheck-syntax-check-failed-hook

     Functions to run if a syntax check failed.

     This hook is run whenever an error occurs during Flycheck’s
     internal processing.  No information about the error is given to
     this hook.

     You should use this hook to conduct additional cleanup actions when
     Flycheck failed.

     This variable is a normal hook.  See *note (elisp)Hooks::.


File: flycheck.info,  Node: Syntax checker selection,  Next: Syntax checker configuration,  Prev: Syntax checking,  Up: Usage

2.3 Syntax checker selection
============================

By default Flycheck selects a *note suitable syntax checker: 19.
automatically from *note flycheck-checkers: 25, with respect to *note
flycheck-disabled-checkers: 26.:

 -- User Option: User Option flycheck-checkers

     A list of *note syntax checker: 27.s available for automatic syntax
     checker selection.  An item in this list is a *note registered
     syntax checker: 28.

     You may modify this list, but you should normally not need to.
     Instead, it is intended for 3rd party extensions to tell Flycheck
     about new syntax checkers.

 -- User Option: User Option flycheck-disabled-checkers

     A list of *note syntax checker: 27.s explicitly excluded from
     automatic selection.

     Change this list to disable syntax checkers which you do not want
     to use.  You may also use this option as a file or directory local
     variable to disable specific checkers in individual files and
     directories respectively.

A syntax checker in *note flycheck-checkers: 25. and *not* in *note
flycheck-disabled-checkers: 26. is an *note enabled syntax checker: 29.

Flycheck uses the first enabled and suitable syntax checker for the
current buffer.  See ‘Languages and syntax checkers’ for a list of all
available syntax checkers.

If no *note suitable syntax checker: 19. is found, the syntax check is
_silently_ omitted.  _No_ error is signalled.  Only a special indicator
in the mode line informs about the omitted syntax check.  See ‘Mode
line’ for details.

You can manually select a specific syntax checker for the current
buffer, too:

 -- Command: C -c ! s
 -- Command: M -x flycheck-select-checker

     Select the syntax checker for the current buffer by setting *note
     flycheck-checker: 2b, and run a syntax check with the new syntax
     checker.

     Prompt for a syntax checker and set *note flycheck-checker: 2b.

     Any *note syntax checker: 27. can be selected with this command,
     regardless of whether it is enabled.

 -- Command: C -u C-c ! s

 -- Command: C -u M-x flycheck-select-checker

     Deselect the current syntax checker, and run a syntax check with an
     automatically selected syntax checker.

     Set *note flycheck-checker: 2b. to ‘nil’.

 -- Variable: Variable flycheck-checker

     The *note syntax checker: 27. to use for the current buffer.

     The variable is buffer local, and safe as file local variable for
     registered checkers.

     If set to ‘nil’, automatically select a suitable syntax checker.

     If set to a *note syntax checker: 27, only use this syntax checker.
     Automatic selection as described above is _disabled_.  If the
     syntax checker not suitable, signal an error.

     You may directly set this variable without *note
     flycheck-select-checker: 2a, e.g.  via file local variables.  For
     instance, you can use the following file local variable within a
     Python file to always use ‘pylint’ for the file:

          # Local Variables:
          # flycheck-checker: python-pylint
          # End:

     See *note (emacs)Specifying File Variables:: for more information
     about file variables.

You can change the completion system used by *note
flycheck-select-checker: 2a.:

 -- User Option: User Option flycheck-completion-system

     The completion system to use.

     ‘ido’

          Use IDO.

          IDO is a built-in alternative completion system, without good
          flex matching and a powerful UI. You may want to install
          flx-ido(1) to improve the flex matching in IDO.

     ‘grizzl’

          Use Grizzl(2).

          Grizzl is an alternative completion system with powerful flex
          matching, but a very limited UI.

     ‘nil’

          Use the standard unfancy ‘completing-read’.

          ‘completing-read’ has a very simple and primitive UI, and does
          not offer flex matching.  This is the default setting, though,
          to match Emacs’ defaults.  With this system, you may want
          enable ‘icomplete-mode’ to improve the display of completion
          candidates at least.

Each syntax checker provides documentation with information about the
executable the syntax checker uses, in which buffers it will be used for
syntax checks, and whether it can be configured.  See ‘Configuration’,
for more information about syntax checker configuration.

 -- Command: C -c ! ?
 -- Command: M -x flycheck-describe-checker

     Show the documentation of a syntax checker.

   ---------- Footnotes ----------

   (1) https://github.com/lewang/flx

   (2) https://github.com/d11wtq/grizzl


File: flycheck.info,  Node: Syntax checker configuration,  Next: Error reporting,  Prev: Syntax checker selection,  Up: Usage

2.4 Syntax checker configuration
================================

* Menu:

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 


File: flycheck.info,  Node: Syntax checker executables,  Next: Syntax checker options,  Up: Syntax checker configuration

2.4.1 Syntax checker executables
--------------------------------

For each syntax checker, there is a buffer-local, customizable variable
‘flycheck-_checker_-executable’, where ‘_checker_’ is the name of the
syntax checker.

The value of this variable is either nil, or a string.  In the former
case, Flycheck uses the default executable from the syntax checker
definition when executing the syntax checker.  In the latter case, it
uses the value of the variable as executable.

Use these variables to override the executable from the definition per
buffer.  For instance, you could use a different Emacs version with the
‘emacs-lisp’ or ‘emacs-lisp-checkdoc’.

You can either set these variables directly in your ‘init.el’, or change
them interactively:

 -- Command: C -c ! e
 -- Command: M -x flycheck-set-checker-executable

     Set the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and an executable file, and set the
     executable variable of the syntax checker.

 -- Command: C -u C-c ! e

 -- Command: C -u M-x flycheck-set-checker-executable

     Reset the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and reset its executable to the
     default.


File: flycheck.info,  Node: Syntax checker options,  Next: Syntax checker configuration files,  Prev: Syntax checker executables,  Up: Syntax checker configuration

2.4.2 Syntax checker options
----------------------------

Some syntax checkers can be configured via options.  The following
options are provided by Flycheck (in Emacs, use ‘C-h v’ or ‘M-x
describe-variable’ on the variable name for detailed help):

 -- User Option: User Option flycheck-clang-definitions

     Additional preprocessor definitions for *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-include-path

     Include search path for *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-includes

     Additional include files for *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-language-standard

     The language standard for *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-ms-extensions

     Whether to enable Microsoft extensions in *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-no-rtti

     Whether to disable RTTI in *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-standard-library

     The standard library to use for *note c/c++-clang: 34.

 -- User Option: User Option flycheck-clang-warnings

     Additional warnings to enable in *note c/c++-clang: 34.

 -- User Option: User Option flycheck-cppcheck-checks

     Additional checks to use in *note c/c++-cppcheck: 3d.

 -- User Option: User Option flycheck-emacs-lisp-initialize-packages

     Whether to initialize packages (see ‘package-initialize’) before
     invoking the byte compiler in the *note emacs-lisp: 3f. syntax
     checker.

     When ‘nil’, never initialize packages.  When ‘auto’, initialize
     packages only when checking files from the user’s Emacs
     configuration in ‘user-emacs-directory’.  For any other non-nil
     value, always initialize packages.

 -- User Option: User Option flycheck-emacs-lisp-load-path

     The ‘load-path’ to use while checking with *note emacs-lisp: 3f.

     The directory of the file being checked is always added to
     ‘load-path’, regardless of the value of this variable.

     Note that changing this variable can lead to wrong results of the
     syntax check, e.g.  if an unexpected version of a required library
     is used.

 -- User Option: User Option flycheck-emacs-lisp-package-user-dir

     The package directory for the *note emacs-lisp: 3f. syntax checker.

 -- User Option: User Option flycheck-eslint-rulesdir

     A directory with custom rules for the *note javascript-eslint: 43.
     syntax checker.

 -- User Option: User Option flycheck-flake8-maximum-complexity

     The maximum McCabe complexity the *note python-flake8: 45. syntax
     checker allows without reporting a warning.

 -- User Option: User Option flycheck-flake8-maximum-line-length

     The maximum length of a line in characters the *note python-flake8:
     45. syntax checker allows without reporting an error.

 -- User Option: User Option flycheck-ghc-no-user-package-database

     Whether to disable the user package database for *note haskell-ghc:
     48.

 -- User Option: User Option flycheck-ghc-package-databases

     A list of package database for *note haskell-ghc: 48.

 -- User Option: User Option flycheck-ghc-search-path

     A list of module directories for the search path of *note
     haskell-ghc: 48.

 -- User Option: User Option flycheck-phpcs-standard

     The coding standard *note php-phpcs: 4c. shall use.

 -- User Option: User Option flycheck-phpmd-rulesets

     The rule sets *note php-phpmd: 4e. shall use.

 -- User Option: User Option flycheck-rubocop-lint-only

     Whether to disable style checks for *note ruby-rubocop: 50.

 -- User Option: User Option flycheck-sass-compass

     Whether to enable the Compass CSS framework for *note sass: 52.

 -- User Option: User Option flycheck-scss-compass

     Whether to enable the Compass CSS framework for *note scss: 54.

 -- User Option: User Option flycheck-sphinx-warn-on-missing-references

     Whether to warn about missing references in *note rst-sphinx: 56.


File: flycheck.info,  Node: Syntax checker configuration files,  Prev: Syntax checker options,  Up: Syntax checker configuration

2.4.3 Syntax checker configuration files
----------------------------------------

Some syntax checkers also read configuration files, denoted by
associated _configuration file variables_:

 -- User Option: User Option flycheck-chktexrc

     The configuration file for the *note tex-chktex: 5a. syntax
     checker.

 -- User Option: User Option flycheck-coffeelintrc

     The configuration file for the *note coffee-coffeelint: 5c. syntax
     checker.

 -- User Option: User Option flycheck-eslintrc

     The configuration file for the *note javascript-eslint: 43. syntax
     checker.

 -- User Option: User Option flycheck-flake8rc

     The configuration file for the *note python-flake8: 45. syntax
     checker.

 -- User Option: User Option flycheck-gjslintrc

     The configuration file for the *note javascript-gjslint: 60. syntax
     checker.

 -- User Option: User Option flycheck-jshintrc

     The configuration file for the *note javascript-jshint: 62. syntax
     checker.

 -- User Option: User Option flycheck-pylintrc

     The configuration file for the *note python-pylint: 64. syntax
     checker.

 -- User Option: User Option flycheck-rubocoprc

     The configuration file for the *note ruby-rubocop: 50. syntax
     checker.

 -- User Option: User Option flycheck-tidyrc

     The configuration file for the *note html-tidy: 67. syntax checker.

The value of these variables is either a string or ‘nil’.  In the former
case, locate the configuration file using the functions in *note
flycheck-locate-config-file-functions: 68.:

 -- User Option: User Option flycheck-locate-config-file-functions

     Functions to locate syntax checker configuration files.

     Each function in this hook must accept two arguments: The value of
     the configuration file variable, and the syntax checker symbol.  It
     must return either a string with an absolute path to the
     configuration file, or nil, if it cannot locate the configuration
     file.

     The functions in this hook are called in order of appearance, until
     a function returns non-nil.  The configuration file returned by
     that function is then given to the syntax checker if it exists.

With the default value of this variable, configuration files are located
by the following algorithm:

  1. If the configuration file variable contains a path a directory
     separator, expand the path against the buffer’s default directory
     and use the resulting path as configuration file.

  2. If Projectile(1) is available and the current buffer is part of a
     project project, search the configuration file in the root
     directory of the project.

  3. If the buffer has a file name, search the buffer’s directory and
     any ancestors thereof for the configuration file.

  4. Eventually attempt to locate the configuration file in the user’s
     home directory.

If any of these steps succeeds, the subsequent steps are not executed.

If the configuration file is found, pass it to the syntax checker upon
invocation.

If the configuration file is not found, or if the value of the variable
is nil, invoke the syntax checker without a configuration file.

Customize these variables using ‘M-x customize-group RET
flycheck-config-files’.  Use ‘flycheck-describe-checker’ to find out
whether a syntax checker has a configuration file.

You may also use these variables as file-local variables.  For instance,
the following checks the Javascript file always with ‘.jshintrc’ from
the parent directory:

     // Local variables:
     // flycheck-jshintrc: "../.jshintrc"
     // End:

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/projectile


File: flycheck.info,  Node: Error reporting,  Next: Error navigation,  Prev: Syntax checker configuration,  Up: Usage

2.5 Error reporting
===================

Errors and warnings from a syntax checker are

   - reported in the mode line or in a popup buffer, depending on the
     length of the error messages,

   - indicated according to *note flycheck-indication-mode: 6a,

   - and highlighted in the buffer with the corresponding faces,
     according to *note flycheck-highlighting-mode: 6b.

 -- Face: Face flycheck-error
 -- Face: Face flycheck-warning
 -- Face: Face flycheck-info

     The faces to use to highlight errors, warnings and info messages
     respectively.

          Note: The default faces provided by GNU Emacs are ill-suited
          to highlight errors because these are relatively pale and do
          not specify a background color or underline.  Hence highlights
          are easily overlook and even *invisible* for white space.

     For best error highlighting customize these faces, or choose a
     color theme that has reasonable Flycheck faces.  For instance, the
     Solarized(1) and Zenburn(2) themes are known to have good Flycheck
     faces.

 -- User Option: User Option flycheck-highlighting-mode

     This variable determines how to highlight errors:

     ‘columns’

          Highlights the error column.  If the error does not have a
          column, highlight the whole line.

     ‘symbols’

          Highlights the symbol at the error column, if there is any,
          otherwise behave like @code{columns}.  This is the default.

     ‘sexps’

          Highlights the expression at the error column, if there is
          any, otherwise behave like ‘columns’.  Note that this mode can
          be *very* slow in some major modes.

     ‘lines’

          Highlights the whole line of the error.

     ‘nil’

          Do not highlight errors at all.  However, errors will still be
          reported in the mode line and in error message popups, and
          indicated according to *note flycheck-indication-mode: 6a.

 -- Face: Face flycheck-fringe-error
 -- Face: Face flycheck-fringe-warning
 -- Face: Face flycheck-fringe-info

     The faces of fringe indicators for errors, warnings and info
     messages respectively.

 -- User Option: User Option flycheck-indication-mode

     This variable determines how to indicate errors:

     If set to ‘left-fringe’ or ‘right-fringe’, indicate errors and
     warnings in the left and right fringe respectively.

     If set to ‘nil’, do not indicate errors.  Errors will still be
     reported in the mode line and in error message popups, and
     highlighted according to *note flycheck-highlighting-mode: 6b.

You can also completely customize error processing by hooking into
Flycheck:

 -- Hook: Hook flycheck-process-error-functions

     Functions to process errors.

     Each function in this hook must accept a single argument: The
     Flycheck error to process.  See *note Error API: 73, for more
     information about Flycheck error objects.

     The functions in this hook are called in order of appearance, until
     a function returns non-nil.  Thus, a function in this hook may
     return nil, to allow for further processing of the error, or t, to
     indicate that the error was fully processed and inhibit any further
     processing.

If you hover a highlighted error with the mouse, a tooltip with the
top-most error message will be shown.

Flycheck also displays errors under point after a short delay:

 -- User Option: User Option flycheck-display-errors-delay

     Delay in seconds before displaying errors at point.

     Use floating point numbers to express fractions of seconds.

The error is displayed via *note flycheck-display-errors-function: 75.:

 -- User Option: User Option flycheck-display-errors-function

     A function to display errors under point.

     If set to a function, call the function with a list of all errors
     to show.  If set to nil, to not display errors at all.

     The default function is *note flycheck-display-error-messages: 76.

 -- Function: Function flycheck-display-error-messages errors

     Show the messages of the given ‘errors’ in the echo area, separated
     by empty lines.  If the error messages are too long for the echo
     area, show the error messages in a popup buffer instead.

     The Emacs Lisp function ‘display-message-or-buffer’ is used to show
     the messages.  Refer to the docstring of this function for details
     on when popup buffers are used, and how to customize its behaviour.

You can also work with the error messages at point, and copy them into
the kill ring or search them on Google:

 -- Command: C -c ! C-w
 -- Command: M -x flycheck-copy-messages-as-kill

     Copy all Flycheck error messages at the current point into kill
     ring.

 -- Command: C -c ! /
 -- Command: M -x flycheck-google-messages

     Google for all Flycheck error messages at the current point.

     If there are more than *note flycheck-google-max-messages: 79.
     errors at point, signal an error, to avoid spamming your browser
     with Google tabs.

     Requires the Google This(3) library, which is available on
     MELPA(4).

 -- User Option: User Option flycheck-google-max-messages

     The maximum number of error messages to Google at once.

     If set to an integer, *note flycheck-google-messages: 78. will
     refuse to search, when there are more error messages than the value
     of this variable at point.

     If set to ‘nil’, *note flycheck-google-messages: 78. will always
     search for *all* messages at point.  This setting is *not*
     recommended.

You can also show a list with all errors in the current buffer:

 -- Command: C -c ! l
 -- Command: M -x flycheck-list-errors
 -- Command: M -x list-flycheck-errors

     List all errors in the current buffer in a separate buffer.

     The error list automatically refreshes after a syntax check, and
     follows the current buffer and window, that is, if you switch to
     another buffer or window, the error list is updated to show the
     errors of the new buffer or window.

When you move the point in the current buffer while the error list is
visible, all errors at point and at the current line are highlighted in
the error list with *note flycheck-error-list-highlight-at-point: 7c.
and *note flycheck-error-list-highlight: 7d. respectively.

 -- Face: Face flycheck-error-list-highlight-at-point

     The face for highlighting the errors at point in the error list.

 -- Face: Face flycheck-error-list-highlight

     The face for highlighting the errors at the current line in the
     error list.

Ultimately, you can clear all reported errors at once:

 -- Command: C -c ! C
 -- Command: M -x flycheck-clear

     Clear all Flycheck errors and warnings in the current buffer.

     You should not normally need this command, because Flycheck checks
     the buffer periodically anyway.

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/solarized-emacs

   (2) https://github.com/bbatsov/zenburn-emacs

   (3) https://github.com/Bruce-Connor/emacs-google-this

   (4) http://melpa.milkbox.net/


File: flycheck.info,  Node: Error navigation,  Next: Mode line,  Prev: Error reporting,  Up: Usage

2.6 Error navigation
====================

Flycheck integrates into standard error navigation commands of Emacs.
If *no* compilation buffer (including those from ‘M-x compile’, ‘M-x
grep’, ‘M-x occur’, etc.)  is visible, ‘M-g n’ (‘next-error’) and ‘M-g
p’ (‘previous-error’) will navigate between Flycheck warnings and errors
in the current buffer.  See *note (emacs)Compilation Mode:: for more
information about these commands.

You can disable this integration by setting *note
flycheck-standard-error-navigation: 81. to nil:

 -- User Option: User Option flycheck-standard-error-navigation

     If non-nil, enable navigation of Flycheck errors with the standard
     ‘next-error’ and friends.

     Otherwise, do not integrate in standard error navigation, and let
     these functions only navigate compilation mode errors.

     Changes to this variable only take effect after re-enabling *note
     Flycheck Mode: 14. with *note flycheck-mode: 16. again.

Visible compilation buffers take precedence over Flycheck navigation.
If such a buffer is visible, ‘M-g n’ and ‘M-g p’ will ignore Flycheck
errors and warnings, and navigate errors (or generally results) reported
by the compilation buffer instead.

To address this issue, Flycheck provides independent error navigation
commands, which are not affected by *note
flycheck-standard-error-navigation: 81.:

 -- Command: C -c ! n
 -- Command: M -x flycheck-next-error

     Jump to the next Flycheck error.

     With prefix argument, jump forwards by as many errors as specified
     by the prefix argument, e.g.  ‘M-3 C-c ! n’ will move to the 3rd
     error from the current point.

 -- Command: C -c ! p
 -- Command: M -x flycheck-previous-error

     Jump to the previous Flycheck error.

     With prefix argument, jump backwards by as many errors as specified
     by the prefix argument, e.g.  ‘M-3 C-c ! p’ will move to the 3rd
     previous error from the current point.

 -- Command: M -x flycheck-first-error

     Jump to the first Flycheck error.

     With prefix argument, jump forwards to by as many errors as
     specified by the prefix argument, e.g.  ‘M-3 M-x
     flycheck-first-error’ moves to the 3rd error from the beginning of
     the buffer.


File: flycheck.info,  Node: Mode line,  Prev: Error navigation,  Up: Usage

2.7 Mode line
=============

Flycheck indicates its state in the mode line:

‘FlyC’

     There are no errors in the current buffer.

‘FlyC*’

     A syntax check is being performed currently.

‘FlyC:3/4’

     There are three errors and four warnings in the current buffer.

‘FlyC-’

     Automatic syntax checker selection did not find a suitable syntax
     checker.  See *note Syntax checker selection: 20. for more
     information.

‘FlyC!’

     The syntax check failed.  Inspect the ‘*Messages*’ buffer for
     details.

‘FlyC?’

     The syntax check had a dubious result.  The definition of the
     syntax checker may be flawed.  Inspect the ‘*Messages*’ buffer for
     details.

     This indicator should *never* be displayed for built-in syntax
     checkers.  If it is, please report an issue to the Flycheck
     developers, as by *note Reporting issues: 87.


File: flycheck.info,  Node: Extending Flycheck,  Next: Flycheck API,  Prev: Usage,  Up: Top

3 Extending Flycheck
********************

This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, _please_ contribute it to Flycheck
to make it available to other users, too.  See *note Contributing syntax
checkers: 8a. for more information.

* Menu:

* Defining new syntax checkers:: 
* Registering new syntax checkers:: 
* Error levels:: 
* Error parsers:: 
* Option filters:: 
* Extending syntax checkers:: 
* Examples:: 


File: flycheck.info,  Node: Defining new syntax checkers,  Next: Registering new syntax checkers,  Up: Extending Flycheck

3.1 Defining new syntax checkers
================================

You define new syntax checkers with *note flycheck-define-checker: 8c.:

 -- Macro: Macro flycheck-define-checker symbol, docstring &rest,
          properties

     Define ‘symbol’ as new syntax checker with ‘docstring’ and
     ‘properties’.

     ‘docstring’ provides documentation for the syntax checker.  Use
     *note flycheck-describe-checker: 10. to view the documentation of a
     syntax checker.

     The following ‘properties’ constitute a syntax checker.  *note
     ;command: 8d. is mandatory.  A syntax checker must also have either
     *note ;modes: 8e. or *note ;predicate: 8f, and either *note
     ;error-patterns: 90. or *note ;error-parser: 91.  *note
     ;next-checkers: 92. is entirely optional.

     If a mandatory property is missing, or if any property has an
     invalid value, a _compile-time_ error is signalled.

     Any syntax checker defined with this macro is eligible for manual
     syntax checker selection with *note flycheck-select-checker: 2a.
     To make the new syntax checker available for automatic selection,
     you need to register it in *note flycheck-checkers: 25.  See *note
     Syntax checker selection: 20. for more information.

      -- Flycheck Syntax Checker Property: :command (_executable_ [_arg_
               ...])

               An unquoted list describing the syntax checker command to
               execute.

               ‘_executable_’ must be a string with the executable of
               this syntax checker.

               A customizable, buffer-local variable
               ‘flycheck-_symbol_-executable’ is implicitly defined to
               allow overriding of the executable.  See *note Syntax
               checker executables: 2e. for details about these
               variables.  If this variable is non-nil, Flycheck uses
               the value of the variable as executable, otherwise it
               falls back to ‘_executable_’.  In either case, the
               executable is checked with ‘executable-find’ before use.

               Each ‘_arg_’ is an argument to the executable, either as
               string, or as one of the following special symbols and
               forms.

                    Note: These special forms and symbols do *not* apply
                    recursively.  Within the body of a cell or the
                    result of the ‘eval’ form, special forms and symbols
                    are *not* replaced!

          ‘source’

               The file to check.

               This file is a temporary file with the contents of the
               buffer to check, created in the system’s temporary
               directory.

               If the buffer to check has a file name, the non-directory
               component of the name of the temporary file will be the
               same as in the buffer’s file name, to support languages
               which enforce specific rules on the file name (e.g.  the
               file must be named after the containing feature, class,
               etc.).

               If the buffer to check has no file name, the name of the
               temporary file is random.

               This symbol is the *preferred* way to pass the input file
               to your syntax checker.

          ‘source-inplace’

               The file to check.

               This file is a temporary file with the contents of the
               buffer to check, created *in the same directory* as the
               buffer’s file.  The name of the file is random.

               If the buffer has no file name, this symbol is equivalent
               to ‘source’.

               This symbol should be used if and only if the syntax
               check *needs other files* from the source directory (e.g.
               include files in C, or Python modules).

          ‘source-original’

               The file name of the current buffer, as by
               ‘buffer-file-name’, or an empty string, if the buffer has
               no file name.

               This symbol is provided to *additionally* pass the real
               name of the file to check to a syntax checker.

               It should *never* be used as primary input to the syntax
               checker, unless both ‘source’ and ‘source-original’ are
               absolutely not applicable.  In this case, be sure to add
               a predicate to your syntax checker that inhibits the
               syntax check, if the buffer has no file name, or was
               modified, for otherwise the syntax check will fail or
               return out-dated errors:

                    :predicate (lambda () (and (buffer-file-name)
                                               (not (buffer-modified-p)))

          ‘temporary-directory’

               The path to an existing temporary directory, which is
               unique on each execution of the syntax checker.

               Use this symbol if you need to move files created by a
               syntax checker out of the way.

               See the declaration of the *note elixir: 93. syntax
               checker for an application of this symbol.

          ‘temporary-file-name’

               The path to a temporary file, which is unique on each
               execution of the syntax checker.  The file is @emph{not}
               created automatically.

               Use this symbol if you need to move files created by a
               syntax checker out of the way.

               See the declaration of the @code{go-build} syntax checker
               for an application of this symbol.

          ‘(config-file _option_ _variable_)’

               A configuration file for this syntax checker.

               ‘_option_’ is a string containing the option that
               specifies a configuration file to the syntax checker
               tool.

               ‘_variable_’ is a symbol referring to a variable from
               which to obtain the name or path of the configuration
               file.  See *note Syntax checker configuration files: 58.
               for more information about syntax checker configuration.
               You need to define this variable _explicitly_ with *note
               flycheck-def-config-file-var: 94.

               If the configuration file is found, pass the ‘_option_’
               and the absolute path to the configuration file to the
               syntax checker.  Otherwise the cell is simply dropped
               from the arguments of the syntax checker.

               If ‘_option_’ ends with a ‘=’ character, ‘_option_’ and
               the absolute path to the configuration file are
               concatenated and given as a single argument to the syntax
               checker.  Otherwise, ‘_option_’ and the configuration
               file path are given as two separate arguments.

          ‘(option _option_ _variable_ [_filter_])’

               The value of a variable.

               ‘_option_’ is a string containing the option for with to
               specify the value.  ‘_filter_’ is an optional function to
               be applied to the value of ‘_variable_’ before use.  See
               *note Option filters: 95. for a list of built-in option
               filters.

               ‘_variable_’ is a symbol referring to a variable whose
               value to :use.  See ref:‘syntax-checker-configuration’
               for more information about :syntax checker configuration.
               You need to define this variable :_explicitly_ with *note
               flycheck-def-option-var: 96.

               If ‘_variable_’ is not ‘nil’ after applying ‘_filter_’,
               pass ‘_option_’ and the value of ‘_variable_’ after
               applying ‘_filter_’.  Otherwise the cell is simply
               dropped from the arguments of the syntax checker.

               An ‘_option_’ ending with a ‘=’ character is treated like
               in a ‘config-file’ cell.

          ‘(option-list _option_ _variable_ [_prepend-fn_ [_filter_]])’

               Like ‘_option_’, but for lists of options.

               ‘_option_’ is a string containing the option to specify.

               ‘_variable_’ is a variable whose value must be a list.

               ‘prepend-fn’ is a function called with ‘_option_’ as
               first and the item of the list as second argument.  It
               should return the result of prepending ‘{option}’ to the
               item, either as list or as string.  If omitted, it
               defaults to ‘list’, so by default, ‘_option_’ will be
               prepended as a separate argument.

               ‘_filter_’ is an optional function to be applied to each
               item in the list before use.  See *note Option filters:
               95. for a list of built-in option filters.

               For each item in the value of ‘_variable_’, which is not
               ‘nil’ after applying ‘_filter_’, pass ‘_option_’ the the
               item after applying ‘_filter_’, as returned by
               ‘_prepend-fn_’.

               Nil items are simply ignored.

          ‘(option-flag _option_ _variable_)’

               Like ‘option’, but for boolean flags.

               ‘_option_’ is a string containing the option to specify.
               ‘_variable_’ is a symbol referring to a variable.

               If ‘_variable_’ is non-nil, pass ‘_option_’ to the syntax
               checker.  Otherwise just ignore this argument.

          ‘(eval _form_)’

               The result of evaluating ‘form’.

               ‘form’ is an arbitrary Emacs Lisp form.  It is evaluated
               literally _each time_ the syntax checker is executed.
               Special forms and symbols in ‘form’ are _not_ replaced!

               ‘form’ must evaluate either to a string, a list of
               strings or nil.  For any other result, signal an error.

               If the result of ‘form’ is not nil, pass the result to
               the syntax checker _literally_.  Special symbols and
               forms in the result of ‘form’ are _not_ replaced.

      -- Flycheck Syntax Checker Property: :error -patterns ((_level_
               _sexp_) ...)

          An unquoted list of one or more error patterns to parse the
          output of the syntax checker *note ;command: 8d.

          ‘_level_’ is a Flycheck error level, and denotes the severity
          of errors matched by the pattern.  This mainly affects the
          visual representation of matched errors in buffers.

          Flycheck provides the built-in error levels ‘error’, ‘warning’
          and ‘info’.  You can define your own error levels with *note
          flycheck-define-error-level: 97.

          The ‘_level_’ is followed by one or more ‘rx’ ‘_sexp_’
          elements.  See the docstring of the function ‘rx’ for more
          information.  In addition to the standard forms of ‘rx’,
          Flycheck supports the following additional forms to make
          specific parts of the error output available to Flycheck:

          ‘line’

               Matches the line number the error refers to, as a
               sequence of one or more digits.

          ‘column’

               Matches a column number the error refers to, as a
               sequence of one or more digits.

          ‘(file-name _sexp_ ...)’

               Matches the file name the error refers to.  ‘_sexp_’
               matches the name of the file.  If no ‘_sexp_’ is given,
               use a default body of ‘(minimal-match (one-or-more
               not-newline))’, which is equivalent to ‘".+?"’.

          ‘(message _sexp_ ...)’

               Matches the error message to be shown to the user.
               ‘_sexp_’ matches the text of the message.  If no ‘_sexp_’
               is given, use a default body of ‘(one-or-more
               not-newline)’, which is equivalent to ‘".+"’.

          Each of these items is optional, however error messages
          without a ‘line’ will be ignored and are not shown in the
          buffer.

          The patterns are applied in the order of declaration to the
          whole output of the syntax checker.  Output already matched by
          a pattern will not be matched by subsequent patterns.  In
          other words, the first pattern wins.

      -- Flycheck Syntax Checker Property: :error -parser _function_

      -- Flycheck Syntax Checker Property: :error -parser (lambda
               (output checker buffer) _body_ ...)

          A function to parse the output of the syntax checker, either
          as _unquoted_ function symbol or ‘lambda’ form.

          The function must accept three arguments ‘output’, ‘checker’
          and ‘buffer’, where ‘output’ is the output of the syntax
          checker as string, ‘checker’ the syntax checker that was used,
          and ‘buffer’ a buffer object representing the checker buffer.

          The function must return a list of *note flycheck-error: 98.
          objects parsed from ‘output’.  See *note Error API: 73. for
          information about *note flycheck-error: 98.  See *note Error
          parsers: 99. for a list of built-in error parsers.

          If this property is given, it takes precedence over *note
          ;error-patterns: 90.  To use an error parser together with
          patterns, you must manually call *note
          flycheck-parse-with-patterns: 9a. in your error parser to
          apply the error patterns.  You can then manipulate the *note
          flycheck-error: 98. objects returned by this function.

      -- Flycheck Syntax Checker Property: :modes _mode_

      -- Flycheck Syntax Checker Property: :modes (_mode_ ...)

          An unquoted major mode symbol or an unquoted list thereof.

          If given, this syntax checker is only used, if the major mode
          of the buffer to check is equal (as in ‘eq’) to any given
          ‘_mode_’.

          If *note ;predicate: 8f. is given, it is additionally called
          in buffers of any given ‘_mode_’.

      -- Flycheck Syntax Checker Property: :predicate _function_

      -- Flycheck Syntax Checker Property: :predicate (lambda () _body_
               ...)

          A function to determines whether to use this syntax checker in
          the current buffer, either as unquoted function symbol or as
          ‘lambda’ form.  The syntax checker is only used if this
          function returns non-nil when called in the buffer to check.

          If *note ;modes: 8e. is given, the function is only called in
          matching major modes.  Thus, if *note ;modes: 8e. and *note
          ;predicate: 8f. are given, *both* must match for this syntax
          checker to be used.

      -- Flycheck Syntax Checker Property: :next -checkers (_item_ ...)

          An unquoted list defining the syntax checker to run after this
          checker.

          Flycheck tries all items in the order of declaration.  Each
          ‘_item_’ is either a syntax checker symbol or a cons cell
          ‘(_predicate_ . _checker_)’.

          In the former case, the ‘_item_’ is used, if the syntax
          checker is enabled and suitable for the current buffer.  In
          the latter case, the ‘_predicate_’ must match additionally.

          ‘_predicate_’ is either ‘no-errors’ or ‘warnings-only’:

          ‘no-errors’

               The syntax ‘_checker_’ is only considered if the current
               syntax checker reported no errors at all.

          ‘warnings-only’

               The syntax ‘_checker_’ is only considered if the current
               syntax checker only reported warnings, but no errors.

 -- Macro: Macro flycheck-def-config-file-var symbol, checker &optional,
          filename

     Define ‘symbol’ as configuration file variable for a syntax
     ‘checker’, with a default value of ‘filename’.

     ‘symbol’ is declared as customizable, buffer-local variable using
     ‘defcustom’, to provide a configuration file for the given syntax
     ‘checker’.  The variable has the customization type ‘string’, and
     gets a comprehensive docstring, including a reference to ‘checker’.

     ‘filename’ is used as initial value for the variable.  If omitted,
     the initial value is nil.

     Use this macro together with the ‘config-file’ form in the *note
     ;command: 8d. of a syntax checker.

 -- Macro: Macro flycheck-def-option-var symbol, initial-value, checker
          &optional, custom-args

     Define ‘symbol’ as option variable for a syntax ‘checker’, with the
     given ‘initial-value’.

     ‘symbol’ is declared as customizable variable, buffer-local
     variable using ‘defcustom’, to provide an option for the given
     syntax ‘checker’.  ‘symbol’ gets a comprehensive docstring,
     including a reference to ‘checker’.

     ‘custom-args’ are forwarded to ‘defcustom’.  Use them to declare
     the customization type, etc.

     Use this macro together with the ‘option’, ‘option-list’ and
     ‘option-flag’ forms in the *note ;command: 8d. of a syntax checker.


File: flycheck.info,  Node: Registering new syntax checkers,  Next: Error levels,  Prev: Defining new syntax checkers,  Up: Extending Flycheck

3.2 Registering new syntax checkers
===================================

After a syntax checker was defined, it should be registered for
automatic selection, by adding it to *note flycheck-checkers: 25, e.g.

     (add-to-list 'flycheck-checkers 'my-new-syntax-checker)

     Note: *note flycheck-checker: 2b. and *note
     flycheck-select-checker: 2a. are reserved for *user customization*.
     Do *not* use them in Flycheck extensions.

     Specifically, please do *not* provide a hook function which selects
     the syntax checker explicitly by assigning to *note
     flycheck-checker: 2b. or by calling *note flycheck-select-checker:
     2a, e.g.

          (defun enable-my-new-syntax-checker ()
            (setq flycheck-checker 'my-new-syntax-checker)
            (flycheck-buffer))

          (add-hook 'my-major-mode-hook #'enable-my-new-syntax-checker)

     This circumvents the entire automatic selection of Flycheck, and
     prevents the user from effectively customizing Flycheck.


File: flycheck.info,  Node: Error levels,  Next: Error parsers,  Prev: Registering new syntax checkers,  Up: Extending Flycheck

3.3 Error levels
================

Flycheck provides some built-in error levels:

‘error’

     Severe errors which cannot be ignored

‘warning’

     Potential errors which can be ignored

‘info’

     Informational annotations

You can define new error levels with *note flycheck-define-error-level:
97.:

 -- Function: Function flycheck-define-error-level level &rest,
          properties

     Define a new error ‘level’ with ‘properties’.

     The following ‘properties’ constitute an error level:

     ‘:overlay-category _category_’

          The overlay ‘_category_’ for ‘level’ as symbol.

          An overlay category is a symbol whose properties provide the
          default values for overlays of this category.  See *note
          (elisp)Overlay Properties:: for more information about overlay
          properties and categories.

          A category for an error level overlay should at least define
          the ‘face’ property, for error highlighting.  Other useful
          properties for error level categories are ‘priority’ to
          influence the stacking of multiple error level overlays, and
          ‘help-echo’ to define a default error messages for errors
          without messages.

     ‘:fringe-face _face_’

          A face to use for fringe indicators for ‘level’ as symbol.

     ‘:fringe-bitmap _bitmap_’

          A fringe bitmap to use for fringe indicators for ‘level’ as
          symbol.

          See *note (elisp)Fringe Bitmaps:: for a list of built-in
          fringe bitmaps, and instructions on how to define new bitmaps.


File: flycheck.info,  Node: Error parsers,  Next: Option filters,  Prev: Error levels,  Up: Extending Flycheck

3.4 Error parsers
=================

Syntax checkers may use more sophisticated error parsing by using the
*note ;error-parser: 91. property.  See *note Defining new syntax
checkers: b. for information about syntax checker definition.

Flycheck provides the following error parsers for use by syntax
checkers:

 -- Function: Function flycheck-parse-with-patterns output, checker,
          buffer

     Parse ‘output’ with the *note ;error-patterns: 90. of the syntax
     ‘checker’.

 -- Function: Function flycheck-parse-checkstyle output, checker, buffer

     Parse ‘output’ as Checkstyle(1) XML.

You may also define your own error parsers.  An error parser is any
function that takes the following three arguments and returns a list of
*note flycheck-error: 98. objects (see *note Error API: 73. for more
information):

‘output’

     The complete output of the syntax checker as string.

‘checker’

     A symbol denoting the executed syntax checker.

‘buffer’

     A buffer object referring to the buffer that was syntax-checked.

Flycheck provides some utility functions to implement your own error
parsers.  See *note Error parser API: a1.

   ---------- Footnotes ----------

   (1) http://checkstyle.sourceforge.net/


File: flycheck.info,  Node: Option filters,  Next: Extending syntax checkers,  Prev: Error parsers,  Up: Extending Flycheck

3.5 Option filters
==================

Flycheck provides the following built-in option filters for use with the
‘option’, ‘option-list’ and ‘option-flag’ forms in the *note ;command:
8d. of a syntax checker definition:

 -- Function: Function flycheck-option-int value

     Like the built-in ‘number-to-string’, but returns ‘nil’ when
     ‘value’ is ‘nil’.

 -- Function: Function flycheck-option-comma-separated-list value
          &optional, separator, filter

     Convert ‘value’ into a list separated by ‘separator’.  ‘filter’ is
     an optional function to apply to each item in ‘value’ first.


File: flycheck.info,  Node: Extending syntax checkers,  Next: Examples,  Prev: Option filters,  Up: Extending Flycheck

3.6 Extending syntax checkers
=============================

There are some means to extend defined syntax checkers:

 -- Function: Function flycheck-add-next-checker checker, next-checker
          &optional, append

     Add a ‘next-checker’ to run after ‘checker’.

     ‘checker’ is a syntax checker symbol.  ‘next-checker’ is either a
     syntax checker symbol or a cons cell in the format of a single
     entry to the *note ;next-checkers: 92. property.

     ‘next-checker’ is prepended before other checkers to run after
     ‘checker’, unless ‘append’ is non-nil.


File: flycheck.info,  Node: Examples,  Prev: Extending syntax checkers,  Up: Extending Flycheck

3.7 Examples
============

* Menu:

* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 


File: flycheck.info,  Node: Basic syntax checkers,  Next: Syntax checkers with predicates,  Up: Examples

3.7.1 Basic syntax checkers
---------------------------

As explained in the previous chapter *note Defining new syntax checkers:
b, a syntax checker is declared with *note flycheck-define-checker: 8c.

We will use this function to define a syntax checker using the PHP
CodeSniffer utility for the PHP programming language:

     (flycheck-define-checker php-phpcs
       "A PHP syntax checker using PHP_CodeSniffer.

     See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
       :command ("phpcs" "--report=checkstyle" source)
       :error-parser flycheck-parse-checkstyle
       :modes php-mode)

     (add-to-list 'flycheck-checkers 'php-phpcs)

First we specify the *note ;command: 8d. to execute.  The first element
of the command list is the name of the executable, ‘phpcs’ in our case.
This command is checked for existence with ‘executable-find’ before
using this syntax checker.  If the command does not exist, the syntax
checker is _not_ used.

The executable is following by the arguments, in this case some options
and the symbol ‘source’.  This symbol is replaced with the file to
check.  This file is a temporary file created in the system temporary
directory and containing the contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP
CodeSniffer provides an option to output errors in an XML format similar
to the Java tool Checkstyle, so we use the built-in _error parser_ *note
flycheck-parse-checkstyle: a0. to parse the output.

Then we enable the syntax checker in PHP editing modes.

Ultimately, we make the new syntax checker available for automatic
selection by adding it to *note flycheck-checkers: 25.

If the syntax checker does not provide any sort of structured output
format, we have to parse the error messages from the textual output.  To
do so, we can use _error patterns_, like in the Pylint syntax checker
for the Python programming language:

     (flycheck-define-checker python-pylint
       "A Python syntax and style checker using Pylint.

     See URL `http://pypi.python.org/pypi/pylint'."
       :command ("epylint" source-inplace)
       :error-patterns
       ((warning line-start (file-name) ":" line
                 ": Warning (W" (zero-or-more not-newline) "): "
                 (message) line-end)
        (error line-start (file-name) ":" line
               ": Error (E" (zero-or-more not-newline) "): "
               (message) line-end)
        (error line-start (file-name) ":" line ": [F] " (message) line-end))
       :modes python-mode)

Again, there is a *note ;command: 8d, however we use the
‘source-inplace’ symbol this time.  This symbol causes the temporary
file to be created in the same directory as the original file, making
information from the source code tree available to the syntax checker.
In case of Pylint, these are the Python packages from the source code
tree.

Next we give the list of *note ;error-patterns: 90. to parse errors.
These patterns extract the error location and the error message from the
output of ‘epylint’.  An error pattern is a list containing a regular
expression with match groups to extract the error information, and an
error level.

Eventually we enable the syntax checker in ‘python-mode’.


File: flycheck.info,  Node: Syntax checkers with predicates,  Next: Configuration files for syntax checkers,  Prev: Basic syntax checkers,  Up: Examples

3.7.2 Syntax checkers with predicates
-------------------------------------

In the previous examples the syntax checkers were specific to certain
major modes.  However, this is not always the case.  For instance, GNU
Emacs provides a single mode only for shell scripting in various Shell
languages.  A syntax checker for a specific shell must check whether the
edited shell script is written for the right shell:

     (flycheck-define-checker zsh
       "A Zsh syntax checker using the Zsh shell.

     See URL `http://www.zsh.org/'."
       :command ("zsh" "-n" "-d" "-f" source)
       :error-patterns
       ((error line-start (file-name) ":" line ": " (message) line-end))
       :modes sh-mode
       :predicate (lambda () (eq sh-shell 'zsh)))

This syntax checker for the Zsh shell is enabled in ‘sh-mode’ as
specified by *note ;modes: 8e, however it specifies an additional *note
;predicate: 8f. to determine whether the right shell is in use.  Hence
this syntax checker is only used if a Zsh shell scripting is being
edited in ‘sh-mode’, but not if a Bash or POSIX Shell script is being
edited.

A syntax checker may even go as far as not having *note ;modes: 8e. at
all.  For instance, there is no special JSON mode, but syntax checking
JSON is still desirable.  Hence a JSON syntax checker may use the *note
;predicate: 8f. to check the file extension:

     (flycheck-define-checker json-jsonlint
       "A JSON syntax and style checker using jsonlint.

     See URL `https://github.com/zaach/jsonlint'."
       :command ("jsonlint" "-c" "-q" source)
       :error-patterns
       ((error line-start
               (file-name)
               ": line " line
               ", col " column ", "
               (message) line-end))
       :predicate
       (lambda ()
         (or
          (eq major-mode 'json-mode)
          (and buffer-file-name
               (string= "json" (file-name-extension buffer-file-name))))))

This syntax checker is now used whenever a file ends with ‘.json’,
regardless of the major mode.


File: flycheck.info,  Node: Configuration files for syntax checkers,  Next: Chaining syntax checkers,  Prev: Syntax checkers with predicates,  Up: Examples

3.7.3 Configuration files for syntax checkers
---------------------------------------------

Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

     (flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

     (flycheck-define-checker javascript-jshint
       "A JavaScript syntax and style checker using jshint.

     See URL `http://www.jshint.com'."
       :command ("jshint" "--checkstyle-reporter"
                 (config-file "--config" flycheck-jshintrc) source)
       :error-parser flycheck-parse-checkstyle
       :modes (js-mode js2-mode js3-mode))

As you can see, we define a syntax checker for Javascript, using the
‘jshint’ utility.  This utility accepts a configuration file via the
‘--config’ option.

To use a configuration file with jshint, we first declare the variable
‘flycheck-jshintrc’ that provides the name of the file, as explained in
*note Syntax checker configuration files: 58.

In the *note ;command: 8d. we use a ‘config-file’ form to pass the
configuration file to the syntax checker.  If the configuration file is
found, its path will be passed to the syntax checker, using the option
specified after the ‘config-file’ symbol.  Otherwise the whole element
is simply omitted from the command line.

Some Syntax checkers can also be configured using options passed on the
command line.  Flycheck supports this case, too.  We will use this
facility to extend the PHP CodeSniffer syntax checker from the *note
Basic syntax checkers: aa. section with support for coding standards:

     (flycheck-def-option-var flycheck-phpcs-standard nil phpcs
       "The coding standard for PHP CodeSniffer."
       :type '(choice (const :tag "Default standard" nil)
                      (string :tag "Standard name" nil)))
     (put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

     (flycheck-declare-checker php-phpcs
       "A PHP syntax checker using PHP_CodeSniffer."
       :command '("phpcs" "--report=checkstyle"
                  (option "--standard=" flycheck-phpcs-standard)
                  source)
       :error-parser 'flycheck-parse-checkstyle
       :modes 'php-mode)

The syntax checker is pretty much the same as before, except that a new
element was added to *note ;command: 8d.  This element passes the value
of the new option variable *note flycheck-phpcs-standard: 4b. to the
syntax checker.  This variable is declared with the special macro *note
flycheck-def-option-var: 96. at the beginning.


File: flycheck.info,  Node: Chaining syntax checkers,  Prev: Configuration files for syntax checkers,  Up: Examples

3.7.4 Chaining syntax checkers
------------------------------

For many languages, more than a single syntax checker is applicable.
For instance, Emacs Lisp can be checked for syntactic corrections with
the byte code compiler, and for adherence to the Emacs Lisp
documentation style using Checkdoc.  PHP, too, can be syntax checked
with the PHP parser, and verified against coding styles using PHP
CodeSniffer.

To support such cases, syntax checkers can be _chained_ using the *note
;next-checkers: 92.  The standard PHP syntax checker uses this to run
PHP CodeSniffer if there are no syntax errors:

     (flycheck-define-checker php
       "A PHP syntax checker using the PHP command line interpreter.

     See URL `http://php.net/manual/en/features.commandline.php'."
       :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
                 "-d" "log_errors=0" source)
       :error-patterns
       ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
               (message) " in " (file-name) " on line " line line-end))
       :modes (php-mode php+-mode)
       :next-checkers ((warnings-only . php-phpcs)))

Now PHP CodeSniffer will check the coding style, whenever a PHP syntax
check did not result in any errors, if PHP CodeSniffer syntax checker is
usable _and_ registered.


File: flycheck.info,  Node: Flycheck API,  Next: Contribution guidelines,  Prev: Extending Flycheck,  Up: Top

4 Flycheck API
**************

This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g.  by implementing new error
parsers or more in-depth error analysis.  You will also find this API
helpful if you want to develop Flycheck itself.

The documentation provided in this chapter is intended as brief
overview.  For a definite reference on functions and variables, please
consult the excellent online help system of Emcas, via
‘describe-function’ and ‘describe-variable’ respectively.

* Menu:

* Error API:: 
* Error parser API:: 


File: flycheck.info,  Node: Error API,  Next: Error parser API,  Up: Flycheck API

4.1 Error API
=============

Flycheck errors are represented by the CL structure *note
flycheck-error: 98.  See *note (cl)Structures:: for more information
about CL structures.

 -- CL Struct: Cl Struct flycheck-error

     A Flycheck error with the following slots.  Each of these slots may
     be ‘nil’.

      -- Slot: Slot buffer

          The buffer object referring to the buffer this error belongs
          to.

               Note: You do not need to set this attribute when creating
               errors in an error parser.  Flycheck automatically keeps
               track of the buffer itself.

      -- Slot: Slot checker

          The syntax checker that reported this error.

      -- Slot: Slot filename

          A string containing the filename the error refers to.

      -- Slot: Slot line

          An integer providing the line the error refers to.

      -- Slot: Slot column

          An integer providing the column the error refers to.

          If this attribute is ‘nil’, Flycheck will assume that the
          error refers to the whole line.

      -- Slot: Slot message

          The human-readable error message as string.

      -- Slot: Slot level

          The error level of the message, as symbol denoting an error
          level defined with *note flycheck-define-error-level: 97.

     There are two constructors to create new *note flycheck-error: 98.
     objects:

      -- Function: Function flycheck-error-new-at line, column
               &optional, level, message &key, , , , , , , , , , , , , ,
               , checker, filename, buffer

          Create a new Flycheck error at the given ‘line’ and ‘column’.

          ‘line’ and ‘column’ refer to the *note line: b4. and *note
          column: b5. of the new error.  The optional ‘level’ and
          ‘message’ arguments fill the *note level: b7. and *note
          message: b6. slots respectively.

          ‘checker’, ‘filename’ and ‘buffer’ are keyword arguments, for
          *note checker: b2, *note filename: b3. and *note buffer: b1.
          respectively.  ‘buffer’ defaults to the current buffer, the
          other two default to ‘nil’.

               Warning: Due to a limitation of Common Lisp functions in
               Emacs Lisp, you must specify *all* optional arguments,
               that is, *both* ‘level’ *and* ‘message’, to pass any
               keyword arguments.

      -- Function: Function flycheck-error-new &restattributes

          Create a new *note flycheck-error: 98. with the given
          ‘attributes’.

          ‘attributes’ is a property list, where each property specifies
          the value for the corresponding slot of *note flycheck-error:
          98, for instance:

               (flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)

     The following functions and macros work on errors:

      -- Macro: Macro flycheck-error-with-buffer error &rest, forms

          Evaluate ‘forms’ with the *note buffer: b1. of the given
          ‘error’ as the current buffer.

          If the buffer is not live, ‘forms’ are *not* evaluated.

      -- Function: Function flycheck-error-line-region error

          Get the region marking the whole *note line: b4. of the given
          ‘error’, as a cons cell ‘(_beg_ . _end_)’.

      -- Function: Function flycheck-error-column-region error

          Get the region marking the *note column: b5. of the given
          ‘error’, as cons cell ‘(_beg_ . _end_)’.

          If the *note column: b5. of ‘error’ is ‘nil’, return ‘nil’
          instead.

      -- Function: Function flycheck-error-sexp-region error

          Get the region marking the expression around the *note column:
          b5. of the ‘error’, as cons cell ‘(_beg_ . _end_)’.

          If the *note column: b5. of ‘error’ is ‘nil’, or if there is
          no expression around this column, return ‘nil’ instead.

               Warning: Flycheck relies on the major mode to parse the
               expression around the column.  As such, the major mode
               must implement support for this feature.

               Some major modes, especially from 3rd party packages, do
               not support this feature at all, or only very poorly.
               Others (for instance ‘python-mode’) exhibit serious
               performance drops in some cases.

               Use this function with care, and at best only in major
               modes which are known to have good support for this
               feature.

      -- Function: Function flycheck-error-pos error

          Get the exact buffer position of ‘error’.

          Essentially this is the position of the *note column: b5. of
          ‘error’, if it is not ‘nil’, or the position of the first
          non-whitespace character on the *note line: b4. of ‘error’
          otherwise.  @end defun

      -- Function: Function flycheck-error-format error

          Format ‘error’ as a human-readable string.

The following functions and variables may be used to analyze the errors
of a syntax check.

 -- Variable: Variable flycheck-current-errors

     This buffer-local variable stores the errors of the last syntax
     check, sorted by line and column number.

 -- Function: Function flycheck-count-errors errors

     Count the number of errors and warnings in ‘errors’.

     Return an alist mapping error level symbols to error counts.  Each
     item is a cons cell ‘(_level_ . _count_)’, where ‘_level_’ is the
     level symbol and ‘_count_’ is the number of errors of of ‘_level_’.

 -- Function: Function flycheck-has-errors-p errors &optional, level

     Determine if there are any ‘errors’ with the given ‘level’.

     If ‘level’ is omitted, determine whether ‘errors’ is not nil.
     Otherwise determine whether there are any errors whose level is
     equal to the given ‘level’.


File: flycheck.info,  Node: Error parser API,  Prev: Error API,  Up: Flycheck API

4.2 Error parser API
====================

These functions can be used to implement custom error parsers:

 -- Function: Function flycheck-parse-xml-string s

     Parse a string ‘s’ containing XML and return the parsed document
     tree.


File: flycheck.info,  Node: Contribution guidelines,  Next: Credits,  Prev: Flycheck API,  Up: Top

5 Contribution guidelines
*************************

If you discovered bugs and issues, have ideas for improvements or new
features, or want to contribute a new syntax checker, please report to
the issue tracker(1) the repository and send a pull request, but respect
the following guidelines.

* Menu:

* Reporting issues:: 
* Contributing code:: 

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues


File: flycheck.info,  Node: Reporting issues,  Next: Contributing code,  Up: Contribution guidelines

5.1 Reporting issues
====================

   - Check that the issue has not already been reported.

   - Check that the issue has not already been fixed in the latest code.

   - Be clear and precise (do not prose, but name functions and commands
     exactly).

   - Include the version of Flycheck as shown by ‘M-x flycheck-version’.

   - Open an issue with a clear title and description in grammatically
     correct, complete sentences.


File: flycheck.info,  Node: Contributing code,  Prev: Reporting issues,  Up: Contribution guidelines

5.2 Contributing code
=====================

Contributions of code, either as pull requests or as patches, are _very_
welcome, but please respect the following guidelines.

* Menu:

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 


File: flycheck.info,  Node: General,  Next: Code style,  Up: Contributing code

5.2.1 General
-------------

   - Write good and _complete_ code.

   - Provide use cases and rationale for new features.


File: flycheck.info,  Node: Code style,  Next: Commit messages,  Prev: General,  Up: Contributing code

5.2.2 Code style
----------------

   - Generally, use the same coding style and spacing.

   - Do not use tabs for indentation.

   - Add docstrings for every declaration.

   - Make sure your code compiles without warnings with ‘make compile’,
     and has no checkdoc issues with ‘M-x checkdoc-buffer’ or ‘C-c ? d’.
     If you are using Flycheck, just make sure that your code has no
     Flycheck warnings.


File: flycheck.info,  Node: Commit messages,  Next: Contributing syntax checkers,  Prev: Code style,  Up: Contributing code

5.2.3 Commit messages
---------------------

Write commit messages according to Tim Pope’s guidelines(1).  In short:

   - Start with a capitalized, short (50 characters or less) summary,
     followed by a blank line.

   - If necessary, add one or more paragraphs with details, wrapped at
     72 characters.

   - Use present tense and write in the imperative: “Fix bug”, not
     “fixed bug” or “fixes bug”.

   - Separate paragraphs by blank lines.

   - Do _not_ use special markup (e.g.  Markdown).  Commit messages are
     plain text.  You may use ‘*emphasis*’ or ‘_underline_’ though,
     following conventions established on mailing lists.

This is a model commit message:

     Capitalized, short (50 chars or less) summary

     More detailed explanatory text, if necessary.  Wrap it to about 72
     characters or so.  In some contexts, the first line is treated as the
     subject of an email and the rest of the text as the body.  The blank
     line separating the summary from the body is critical (unless you omit
     the body entirely); tools like rebase can get confused if you run the
     two together.

     Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
     or "Fixes bug."  This convention matches up with commit messages generated
     by commands like git merge and git revert.

     Further paragraphs come after blank lines.

     - Bullet points are okay, too

     - Typically a hyphen or asterisk is used for the bullet, followed by a
       single space, with blank lines in between, but conventions vary here

     - Use a hanging indent

Git Commit Mode(2) and Magit(3) provide a major mode for Git commit
messages, which helps you to comply to these guidelines.

   ---------- Footnotes ----------

   (1) 
http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

   (2) https://github.com/magit/git-modes/

   (3) https://github.com/magit/magit/


File: flycheck.info,  Node: Contributing syntax checkers,  Next: Pull requests,  Prev: Commit messages,  Up: Contributing code

5.2.4 Contributing syntax checkers
----------------------------------

For syntax checkers, some special guidelines apply in addition to the
above:

   - Provide a link to the website of the syntax checker tool in the
     comments of your pull request.

   - Add a proper docstring to your syntax checker, including this URL.

Additionally, either

   - show example code that triggers errors for each of the error
     patterns of the syntax checker, or

   - add unit tests for your syntax checker.


File: flycheck.info,  Node: Pull requests,  Prev: Contributing syntax checkers,  Up: Contributing code

5.2.5 Pull requests
-------------------

   - Use a *topic branch* to easily amend a pull request later, if
     necessary.

   - Do *not* open new pull requests, when asked to improve your patch.
     Instead, amend your commits with ‘git rebase -i’, and then update
     the pull request with ‘git push --force’

   - Open a pull request(1) that relates to but one subject with a clear
     title and description in grammatically correct, complete sentences.

   ---------- Footnotes ----------

   (1) https://help.github.com/articles/using-pull-requests


File: flycheck.info,  Node: Credits,  Next: Changes,  Prev: Contribution guidelines,  Up: Top

6 Credits
*********

Flycheck is written and maintained by Sebastian Wiesner(1), with
contributions from the following people.  Their help and ideas, their
support and patches are greatly appreciated.

   - Bozhidar Batsov(2) provided valuable feedback and refinements,
     brought Flycheck to a larger user base by adding it to his
     Prelude(3) project, and added a Ruby syntax checker using
     ‘rubocop’.

   - Damon Haley(4) helped to shape and test the PHP CodeSniffer
     checker.

   - David Holm(5) added C/C++ syntax and style checkers using ‘clang’
     and ‘cppcheck’ respectively, and contributed a Verilog syntax
     checker using ‘verilator’.

   - Gereon Frey(6) fixed the ‘go-build’ syntax checker and improved its
     tests.

   - Jimmy Yuen Ho Wong(7) added the HTML syntax checker and the jshint
     Javascript checker, and did valuable testing and bug fixing.

   - Krzysztof Witkowski(8) implemented ‘eval’ support in Flycheck
     commands.

   - Magnar Sveen(9) developed the awesome ‘dash.el’ and s.el(10)
     libraries, that drive considerable parts of Flycheck’s internals.

   - Marian Schubert(11) added the Perl syntax checker.

   - Mark Hellewell(12) added the Puppet syntax and style checkers.

   - Martin Grenfell(13) created the awesome Vim library syntastic(14)
     which inspired this project and many of its checkers.

   - Matthias Dahl(15) improved the performance of Flycheck’s temp file
     handling.

   - Mitch Tishmack(16) added support for Microsoft extensions to the
     Clang syntax checker.

   - Peter Vasil(17) contributed syntax checkers for XML, Lua and Go
     (using ‘go build’ and ‘go test’), added unit tests and did valuable
     testing.

   - Robert Dallas Gray(18) made error display customizable with
     ‘flycheck-display-errors-function’.

   - Robert Zaremba(19) added Go syntax checker using ‘gofmt’.

   - Simon Carter(20) provided valuable feedback about automatic syntax
     checking, and took great effort to debug some very subtle issues in
     it.

   - steckerhalter(21) provided the PHP CodeSniffer checker.

   - Steve Purcell(22) implemented many checkers, contributed important
     ideas to the design of the checker API and engaged in worthwhile
     discussion to shape this project.

   - Sylvain Benner(23) added syntax checkers for Elixir and Erlang, and
     wrote the cool flycheck-color-mode-line(24) extension.

   - Sylvain Rousseau(25) added a syntax checker for POSIX shell script
     using ‘bash’, and improved error parsing in the Bash script syntax
     checker.

   - Ted Zlatanov(26) added a syntax checker for CFEngine.

   - tom tan(27) added a syntax checker for the D programming language
     using ‘dmd’, and wrote the cool flycheck-d-unittest(28) extension.

   - Yannick Roehlly(29) added support for PEP8 naming errors to the
     Flake8 syntax checker.

   - Yasuyuki Oka(30) contributed a lot of syntax checkers for various
     languages, including AsciiDoc, Chef recipes, ERuby, GNU Make,
     Handlebars, Javascript, PHP, Racket, Ruby, Slim and YAML.

   - Victor Deryagin(31) added the Rust syntax checker.

Of course we also need to thank GNU Flymake(32), the first, respectable,
though somewhat failed attempt at on-the-fly syntax checking.

   ---------- Footnotes ----------

   (1) https://github.com/lunaryorn

   (2) https://github.com/bbatsov

   (3) https://github.com/bbatsov/prelude

   (4) https://github.com/dhaley

   (5) https://github.com/dholm

   (6) https://github.com/gfrey

   (7) https://github.com/wyuenho

   (8) https://github.com/kwitek

   (9) https://github.com/magnars/dash.el

   (10) https://github.com/magnars/s.el

   (11) https://github.com/maio

   (12) https://github.com/markhellewell

   (13) https://github.com/scrooloose

   (14) https://github.com/scrooloose/syntastic

   (15) https://github.com/BinaryKhaos

   (16) https://github.com/mitchty

   (17) https://github.com/ptrv

   (18) https://github.com/rdallasgray

   (19) https://github.com/robert-zaremba

   (20) https://github.com/bbbscarter

   (21) https://github.com/steckerhalter

   (22) https://github.com/purcell

   (23) https://github.com/syl20bnr

   (24) https://github.com/flycheck/flycheck-color-mode-line

   (25) https://github.com/thisirs

   (26) https://github.com/tzz

   (27) https://github.com/tom-tan

   (28) https://github.com/flycheck/flycheck-d-unittest

   (29) https://github.com/yannick1974

   (30) https://github.com/yasuyk

   (31) https://github.com/vderyagin

   (32) http://www.gnu.org/software/emacs/manual/html_node/flymake/


File: flycheck.info,  Node: Changes,  Next: GNU Free Documentation License,  Prev: Credits,  Up: Top

7 Changes
*********

* Menu:

* master (unreleased): master unreleased. 
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18, 2013): 0 12 May 18 2013. 
* 0.11 (May 01, 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012. 


File: flycheck.info,  Node: master unreleased,  Next: 0 16 Jan 11 2014,  Up: Changes

7.1 master (unreleased)
=======================

   - #274(1): The manual was ported to Sphinx(2) and is now located at
     ‘http://flycheck.readthedocs.org’

   - *Breaking changes*:

        - The default ‘flycheck-completion-system’ was changes to nil,
          i.e.  the built-in ‘completing-read’, for compliance with
          Emacs’ defaults.  To restore the previous behaviour, add
          ‘(eval-after-load 'flycheck '(setq flycheck-completion-system
          'ido))’ to your ‘init.el’.

        - ‘flycheck-count-errors’ counts errors of all levels now, and
          returns an alist mapping error symbols to error counts.

   - New syntax checkers:

        - RST (ReStructuredText) using Sphinx

        - #321(3): GNU Make

   - New features:

        - #266(4): Extend syntax checkers with
          ‘flycheck-add-next-checkers’

   - Improvements:

        - #301(5): Immediately re-check the buffer when it was changed
          during a syntax check

        - #305(6): Do not defer syntax checker after idle change timeout

        - Do not use the generic ‘rst’ syntax checker in Sphinx projects
          anymore, to avoid false positives by Sphinx-only markup

        - #314(7): Check for more than just syntax errors in ‘rust’

   - Bug fixes

        - #298(8): Fix compatibility with tabbar-mode

        - #319(9): Do not visit the file to check in ‘emacs-lisp’ and
          ‘emacs-lisp-checkdoc’ to avoid unintended side effects

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/274

   (2) http://sphinx-doc.org

   (3) https://github.com/flycheck/flycheck/issues/321

   (4) https://github.com/flycheck/flycheck/issues/266

   (5) https://github.com/flycheck/flycheck/issues/301

   (6) https://github.com/flycheck/flycheck/issues/305

   (7) https://github.com/flycheck/flycheck/issues/314

   (8) https://github.com/flycheck/flycheck/issues/298

   (9) https://github.com/flycheck/flycheck/issues/319


File: flycheck.info,  Node: 0 16 Jan 11 2014,  Next: 0 15 Nov 15 2013,  Prev: master unreleased,  Up: Changes

7.2 0.16 (Jan 11, 2014)
=======================

   - *Breaking changes*:

        - Argument substitution is no longer performed on syntax checker
          executables.  The executable must be a string.

        - #275(1): Split out ‘haskell-hdevtools’ into a separate
          package.  See flycheck-hdevtools(2)

        - Drop support for coffeelint 0.x

        - #230(3): The error list is reimplemented on top of Tabulated
          List Mode.  This greatly changes the appearance and behaviour
          of the error list.

   - New syntax checkers:

        - #250(4): Ruby with ‘ruby-lint’

        - #270(5): Handlebars

        - #253(6): YAML with ‘yaml-jsyaml’

        - #255(7): Chef recipes with ‘foodcritic’

        - #276(8): AsciiDoc

        - #271(9): CFEngine

        - #277(10): Racket

        - Texinfo

        - #296(11): Verilog

        - #291(12): Javascript with ‘eslint’

        - #285(13): ERuby

   - New features:

        - #272(14): Define variables to override the executables of
          syntax checkers

        - #272(15): Interactively set the executable of a syntax checker
          with ‘flycheck-set-checker-executable’

        - #269(16): Disable syntax checkers easily with
          ‘flycheck-disabled-checkers’

        - #268(17): Add support for the Compass CSS framework in the
          ‘sass’ and ‘scss’ checkers, with ‘flycheck-sass-compass’ and
          ‘flycheck-scss-compass’ respectively

        - #287(18): Disable style checks in ‘ruby-rubocop’ with
          ‘flycheck-rubocop-lint-only’

        - #283(19): Add support for Microsoft extensions in
          ‘c/c++-clang’ via ‘flycheck-clang-ms-extensions’

        - #230(20): New faces ‘flycheck-error-list-info’,
          ‘flycheck-error-list-warning’, ‘flycheck-error-list-error’,
          ‘flycheck-error-list-line-number’ and
          ‘flycheck-error-list-column-number’

        - Add ‘flycheck-ghc-no-user-package-database’ to disable the
          user package database for ‘haskell-ghc’

        - Add ‘flycheck-ghc-package-databases’ to add additional package
          databases to ‘haskell-ghc’

        - Add ‘flycheck-ghc-search-path’ to add additional directories
          to the search path of ‘haskell-ghc’

   - Improvements:

        - Demote Rubocop convention messages to ‘info’ level

        - #282(21): Stop Flycheck before the buffer is reverted

        - Properly resolve local module imports in ‘haskell-ghc’

   - Bug fixes:

        - #280(22): Make relative imports work with ‘python-pylint’

        - Fix parsing of errors in ‘scss’ and ‘sass’

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/275

   (2) https://github.com/flycheck/flycheck-hdevtools

   (3) https://github.com/flycheck/flycheck/issues/230

   (4) https://github.com/flycheck/flycheck/issues/250

   (5) https://github.com/flycheck/flycheck/issues/270

   (6) https://github.com/flycheck/flycheck/issues/253

   (7) https://github.com/flycheck/flycheck/issues/255

   (8) https://github.com/flycheck/flycheck/issues/276

   (9) https://github.com/flycheck/flycheck/issues/271

   (10) https://github.com/flycheck/flycheck/issues/277

   (11) https://github.com/flycheck/flycheck/issues/296

   (12) https://github.com/flycheck/flycheck/issues/291

   (13) https://github.com/flycheck/flycheck/issues/285

   (14) https://github.com/flycheck/flycheck/issues/272

   (15) https://github.com/flycheck/flycheck/issues/272

   (16) https://github.com/flycheck/flycheck/issues/269

   (17) https://github.com/flycheck/flycheck/issues/268

   (18) https://github.com/flycheck/flycheck/issues/287

   (19) https://github.com/flycheck/flycheck/issues/283

   (20) https://github.com/flycheck/flycheck/issues/230

   (21) https://github.com/flycheck/flycheck/issues/282

   (22) https://github.com/flycheck/flycheck/issues/280


File: flycheck.info,  Node: 0 15 Nov 15 2013,  Next: 0 14 1 Aug 16 2013,  Prev: 0 16 Jan 11 2014,  Up: Changes

7.3 0.15 (Nov 15, 2013)
=======================

   - Flycheck has a new home at ‘https://github.com/flycheck/flycheck’,
     the online manual moved to ‘http://flycheck.github.io’.

   - *Breaking changes*:

        - Do not add the current directory to the ‘emacs-lisp’ syntax
          checker load path

        - #214(1): ‘flycheck-list-errors’ cannot list errors at point
          anymore.  It does not accept a prefix argument anymore, and
          takes zero arguments now

        - #214(2): ‘flycheck-display-errors-in-list’ is gone.  The error
          list automatically highlights the error at point now

        - Remove obsolete ‘flycheck-declare-checker’

   - New syntax checkers:

        - #236(3): YAML

        - #245(4): Javascript with ‘gjslint’

        - #246(5): Slim

        - #249(6): PHP using ‘phpmd’

   - New features:

        - Support IDO or Grizzl(7) as completion systems for
          ‘flycheck-select-checker’ at ‘C-c ! s’

        - #202(8): Disable standard error navigation with
          ‘flycheck-standard-error-navigation’

        - #207(9): Add ‘flycheck-clang-language-standard’ to choose the
          language standard for C/C++ syntax checking

        - #207(10): Add ‘flycheck-clang-definitions’ to set additional
          definitions for C/C++ syntax checking

        - #207(11): Add ‘flycheck-clang-no-rtti’ to disable RTTI for
          C/C++ syntax checking

        - Add new option cell ‘option-flag’ for boolean flags in syntax
          checker commands

        - #207(12): Add ‘flycheck-clang-includes’ to include additional
          files for C/C++ syntax checking

        - Add configuration file variable ‘flycheck-pylintrc’ for Pylint

        - #214(13): New faces ‘flycheck-error-list-highlight-at-point’
          and ‘flycheck-error-list-highlight’ to highlight the errors at
          point and at the current line respectively in the error list

        - #214(14): The error list now automatically updates to show the
          errors of the current buffer

        - #212(15): Define new error levels with
          ‘flycheck-define-error-level’

        - #234(16): Add ‘flycheck-clang-standard-library’ to choose the
          standard library for C/C++ syntax checking

        - #243(17): Customize the delay for displaying errors via
          ‘flycheck-display-errors-delay’

        - #215(18): Add ‘info’ level for informational annotations by
          syntax checkers

        - #259(19): Add a new symbol ‘temporary-file-name’ to pass
          temporary file names to syntax checkers

   - Improvements:

        - #214(20): The error list now refreshes automatically after
          each syntax check

        - #214(21): The errors at point are now automatically
          highlighted in the error list

        - ‘emacs-lisp-checkdoc’ does not longer check ‘.dir-locals.el’
          files

        - #222(22): Do not automatically check syntax in encrypted files

        - #215(23): Parse notes from ‘c/c++-clang’ into info level
          messages

        - #204(24): Parse convention warnings from ‘pylint’#215(25):
          info level

        - #215(26): Demote naming warnings from ‘python-flake8’ to info
          level

        - #256(27): Support ‘enh-ruby-mode’ in Ruby syntax checkers

        - Parse columns from ‘python-pylint’ errors

        - Do not compress temporary files for syntax checks if the
          original file was compressed

   - Bug fixes:

        - #225(28): Find local includes in the Clang syntax checker

        - Do not emit spurious flawed definition warning in the ‘rst’
          syntax checker

        - #251(29): Handle abbreviated file names in ‘luac’ output, by
          simply ignoring them

        - #259(30): Correctly redirect the output binary of the
          ‘go-build’ syntax checker

        - #263(31): Fix Cppcheck parsing with the built-in Emacs XML
          parser

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/214

   (2) https://github.com/flycheck/flycheck/issues/214

   (3) https://github.com/flycheck/flycheck/issues/236

   (4) https://github.com/flycheck/flycheck/issues/245

   (5) https://github.com/flycheck/flycheck/issues/246

   (6) https://github.com/flycheck/flycheck/issues/249

   (7) https://github.com/d11wtq/grizzl

   (8) https://github.com/flycheck/flycheck/issues/202

   (9) https://github.com/flycheck/flycheck/issues/207

   (10) https://github.com/flycheck/flycheck/issues/207

   (11) https://github.com/flycheck/flycheck/issues/207

   (12) https://github.com/flycheck/flycheck/issues/207

   (13) https://github.com/flycheck/flycheck/issues/214

   (14) https://github.com/flycheck/flycheck/issues/214

   (15) https://github.com/flycheck/flycheck/issues/212

   (16) https://github.com/flycheck/flycheck/issues/234

   (17) https://github.com/flycheck/flycheck/issues/243

   (18) https://github.com/flycheck/flycheck/issues/215

   (19) https://github.com/flycheck/flycheck/issues/259

   (20) https://github.com/flycheck/flycheck/issues/214

   (21) https://github.com/flycheck/flycheck/issues/214

   (22) https://github.com/flycheck/flycheck/issues/222

   (23) https://github.com/flycheck/flycheck/issues/215

   (24) https://github.com/flycheck/flycheck/issues/204

   (25) https://github.com/flycheck/flycheck/issues/215

   (26) https://github.com/flycheck/flycheck/issues/215

   (27) https://github.com/flycheck/flycheck/issues/256

   (28) https://github.com/flycheck/flycheck/issues/225

   (29) https://github.com/flycheck/flycheck/issues/251

   (30) https://github.com/flycheck/flycheck/issues/259

   (31) https://github.com/flycheck/flycheck/issues/263


File: flycheck.info,  Node: 0 14 1 Aug 16 2013,  Next: 0 14 Aug 15 2013,  Prev: 0 15 Nov 15 2013,  Up: Changes

7.4 0.14.1 (Aug 16, 2013)
=========================

   - Bug fixes:

        - #194(1): Add a missing dependency

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/194


File: flycheck.info,  Node: 0 14 Aug 15 2013,  Next: 0 13 Jun 28 2013,  Prev: 0 14 1 Aug 16 2013,  Up: Changes

7.5 0.14 (Aug 15, 2013)
=======================

   - *Breaking changes*:

        - #163(1): Introduce ‘flycheck-define-checker’ and obsolete
          ‘flycheck-declare-checker’

        - Remove the obsolete ‘flycheck-error-face’ and
          ‘flycheck-warning-face’

        - #176(2): Do not initialize packages by default in ‘emacs-lisp’
          syntax checker for non-configuration files

        - #179(3): Change the default ‘flycheck-highlighting-mode’ to
          ‘symbols’

        - #184(4): Drop support for Pylint 0.x in ‘python-pylint’

   - New features:

        - #166(5): List errors at point only with prefix arg to
          ‘flycheck-list-errors’

        - #166(6): Add new display function
          ‘flycheck-display-errors-in-list’ to display errors at point
          in the error list

        - New ‘option-list’ argument cell to pass option lists to a
          syntax checker

        - #174(7): New ‘flycheck-emacs-lisp-load-path’ option to
          customize the ‘load-path’ used by the ‘emacs-lisp’ syntax
          checker

        - #176(8): New ‘flycheck-emacs-lisp-initialize-packages’ option
          to initialize packages in the ‘emacs-lisp’ syntax checker

        - #176(9): New ‘flycheck-emacs-lisp-package-user-dir’ option to
          configure the package directory for the ‘emacs-lisp’ syntax
          checker

        - New option filter ‘flycheck-option-comma-separated-list’ for
          options with comma separated lists as values

        - #179(10): New highlighting mode ‘symbols’ to highlight the
          symbol pointed to by an error

   - New syntax checkers:

        - #160(11): LESS

        - #162(12): Haskell with ‘ghc’, ‘hdevtools’ and ‘hlint’

        - #170(13): C/C++ with ‘cppcheck’

        - #172(14): C/C++ with ‘clang’

        - CoffeeScript with ‘coffee’

        - #180(15): XML with ‘xmllint’

        - #167(16): D with ‘dmd’

   - Improvements:

        - #157(17): Support Web Mode in ‘html-tidy’ syntax checker

        - #159(18): Support Rubocop 0.9 and drop support for older
          Rubocop releases

        - Include the message ID in error messages from ‘python-pylint’

   - Bug fixes:

        - Fix warnings about flawed definitions in ‘emacs-lisp’ and
          ‘emacs-lisp-checkdoc’, caused by faulty formatting of sexps

        - #166(19): Refresh error lists when pressing ‘g’

        - #175(20): Do not obscure active minibuffer input when
          displaying errors in the echo area

        - Fix universal prefix argument for ‘flycheck-next-error’ at
          ‘C-c ! n’

        - #192(21): Correctly parse output of ‘coffeelint’ 0.5.7

        - #184(22): Correctly parse output of ‘pylint’ 1.0

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/163

   (2) https://github.com/flycheck/flycheck/issues/176

   (3) https://github.com/flycheck/flycheck/issues/179

   (4) https://github.com/flycheck/flycheck/issues/184

   (5) https://github.com/flycheck/flycheck/issues/166

   (6) https://github.com/flycheck/flycheck/issues/166

   (7) https://github.com/flycheck/flycheck/issues/174

   (8) https://github.com/flycheck/flycheck/issues/176

   (9) https://github.com/flycheck/flycheck/issues/176

   (10) https://github.com/flycheck/flycheck/issues/179

   (11) https://github.com/flycheck/flycheck/issues/160

   (12) https://github.com/flycheck/flycheck/issues/162

   (13) https://github.com/flycheck/flycheck/issues/170

   (14) https://github.com/flycheck/flycheck/issues/172

   (15) https://github.com/flycheck/flycheck/issues/180

   (16) https://github.com/flycheck/flycheck/issues/167

   (17) https://github.com/flycheck/flycheck/issues/157

   (18) https://github.com/flycheck/flycheck/issues/159

   (19) https://github.com/flycheck/flycheck/issues/166

   (20) https://github.com/flycheck/flycheck/issues/175

   (21) https://github.com/flycheck/flycheck/issues/192

   (22) https://github.com/flycheck/flycheck/issues/184


File: flycheck.info,  Node: 0 13 Jun 28 2013,  Next: 0 12 May 18 2013,  Prev: 0 14 Aug 15 2013,  Up: Changes

7.6 0.13 (Jun 28, 2013)
=======================

   - *Breaking changes*:

        - Obsolete ‘flycheck-warning-face’ and ‘flycheck-error-face’ in
          favor ‘flycheck-warning’ and ‘flycheck-error’ respectively

        - Obsolete ‘:predicate’ forms in favor of ‘:predicate’ functions

        - ‘flycheck-def-config-file-var’ does not automatically mark
          variables as safe anymore

   - New features:

        - Make fringe indicator faces customizable independently with
          ‘flycheck-fringe-error’ and ‘flycheck-fringe-warning’

        - Improve the default faces by using underlines instead of
          foreground colors, if possible

        - #141(1): Customizable error processing with
          ‘flycheck-process-error-functions’

        - #144(2): Make the delay before starting a syntax check
          customizable via ‘flycheck-idle-change-delay’

        - #156(3): Make display of errors under point customizable via
          ‘flycheck-display-errors-function’

   - Improvements

        - Always highlight errors on top of warnings now

        - #141(4): Do not trigger syntax checks in the middle of
          commands

        - Add the current directory to load path in the ‘emacs-lisp’
          syntax checker

        - Do not longer use the ‘emacs-lisp-checkdoc’ syntax checker in
          Scratch buffers

        - #149(5): Do not flush temporary files onto disk

        - Syntax checkers may have error patterns and error parser now

        - Predicate forms are now wrapped into functions and compiled
          into functions during byte compilation

        - Copy each message separately in
          ‘flycheck-copy-messages-as-kill’

        - Mark some customizable variables as safe for file variable
          usage, most notably ‘flycheck-indication-mode’,
          ‘flycheck-highlighting-mode’ and ‘flycheck-idle-change-delay’.

   - Bug fixes:

        - Fix error when searching for a configuration file outside a
          Projectile project

        - Do not start a syntax check before the ‘flycheck-mode-hook’
          was run

        - Do not start automatic syntax checks if Flycheck Mode is
          disabled

        - #143(6): Defer the initial syntax check until after the
          current interactive command

        - Correctly clean up information about running processes

        - #150(7): Fix compatibility with Emacs 24.2 and earlier

        - Fix version information on Emacs trunk builds

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/141

   (2) https://github.com/flycheck/flycheck/issues/144

   (3) https://github.com/flycheck/flycheck/issues/156

   (4) https://github.com/flycheck/flycheck/issues/141

   (5) https://github.com/flycheck/flycheck/issues/149

   (6) https://github.com/flycheck/flycheck/issues/143

   (7) https://github.com/flycheck/flycheck/issues/150


File: flycheck.info,  Node: 0 12 May 18 2013,  Next: 0 11 May 01 2013,  Prev: 0 13 Jun 28 2013,  Up: Changes

7.7 0.12 (May 18, 2013)
=======================

   - New syntax checkers:

        - #136(1): Ruby using ‘jruby’

        - #138(2): Puppet

   - New features:

        - Highlight error expressions by default, with the new ‘sexps’
          highlighting mode

        - #140(3): Automatically check syntax some time after the last
          change in the buffer

        - Add ‘flycheck-version’ to determine the installed Flycheck
          version

        - Add ‘flycheck-list-errors’, mapped to ‘C-c ! l’, to list all
          errors in a separate buffer

   - Improvements:

        - Defer syntax checks while a buffer is reverted, to avoid race
          conditions

   - Bug fixes:

        - #136(4): Correctly parse syntax errors from JRuby

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/136

   (2) https://github.com/flycheck/flycheck/issues/138

   (3) https://github.com/flycheck/flycheck/issues/140

   (4) https://github.com/flycheck/flycheck/issues/136


File: flycheck.info,  Node: 0 11 May 01 2013,  Next: 0 10 Apr 21 2013,  Prev: 0 12 May 18 2013,  Up: Changes

7.8 0.11 (May 01, 2013)
=======================

   - New syntax checkers:

        - #124(1): Scala

   - New features:

        - Customizable error indication with control of the fringe side,
          via ‘flycheck-indication-mode’

        - #128(2): Customizable automatic syntax checking, via
          ‘flycheck-check-syntax-automatically’

        - #133(3): Customizable configuration file search, via
          ‘flycheck-locate-config-file-functions’

        - Find configuration files in Projectile(4) projects

        - Add ‘flycheck-before-syntax-check-hook’ and
          ‘flycheck-syntax-check-failed-hook’

   - Improvements:

        - #123(5): The ‘ruby’ syntax checker now differentiates warnings
          from errors

        - Faces are now in a separate customization group

   - Bug fixes:

        - Add missing customization group for syntax checker options

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/124

   (2) https://github.com/flycheck/flycheck/issues/128

   (3) https://github.com/flycheck/flycheck/issues/133

   (4) https://github.com/bbatsov/projectile

   (5) https://github.com/flycheck/flycheck/issues/123


File: flycheck.info,  Node: 0 10 Apr 21 2013,  Next: 0 9 Apr 13 2013,  Prev: 0 11 May 01 2013,  Up: Changes

7.9 0.10 (Apr 21, 2013)
=======================

   - Flycheck uses ‘cl-lib’ now.  This library is built-in as of GNU
     Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
     compatibility library will be installed from GNU ELPA.

   - New syntax checkers:

        - #112(1): POSIX Shell script using ‘bash’

        - #113(2): Ruby using ‘rubocop’

        - #108(3): Elixir

        - #122(4): Erlang

   - Removed syntax checkers:

        - #115(5): Python using Pyflakes.  Use the superior Flake8
          syntax checker

   - New features:

        - Add ‘flycheck-copy-messages-as-kill’, mapped to ‘C-c ! C-w’,
          to copy all error messages under point into kill ring

        - Add ‘flycheck-google-messages’, mapped to ‘C-c ! /’, to google
          for error messages under point.  Needs the Google This(6)
          library

        - Syntax checkers can redirect output to a temporary directory
          now using the ‘temporary-directory’ argument symbol

   - Improvements:

        - Call option filters for ‘nil’ values, too

        - #112(7): Improve error parsing in Bash syntax checker

        - Error navigation does not cross restrictions in narrowed
          buffers anymore

        - #99(8): Try to preserve the non-directory part of the buffer’s
          file name when substituting the ‘source’ symbol

   - Bug fixes:

        - Fix error highlighting and navigation in narrowed buffers

        - #118(9): Use a hopefully more reliable way to parse output of
          PHP CodeSniffer

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/112

   (2) https://github.com/flycheck/flycheck/issues/113

   (3) https://github.com/flycheck/flycheck/issues/108

   (4) https://github.com/flycheck/flycheck/issues/122

   (5) https://github.com/flycheck/flycheck/issues/115

   (6) https://github.com/Bruce-Connor/emacs-google-this

   (7) https://github.com/flycheck/flycheck/issues/112

   (8) https://github.com/flycheck/flycheck/issues/99

   (9) https://github.com/flycheck/flycheck/issues/118


File: flycheck.info,  Node: 0 9 Apr 13 2013,  Next: 0 8 Apr 9 2013,  Prev: 0 10 Apr 21 2013,  Up: Changes

7.10 0.9 (Apr 13, 2013)
=======================

   - New syntax checkers:

        - #103(1): SCSS using ‘scss’

        - RST (ReStructuredText) using Docutils

        - #107(2): Go using ‘go build’ and ‘go test’

   - Improvements:

        - Quit the error message window when navigating away from error
          locations

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/103

   (2) https://github.com/flycheck/flycheck/issues/107


File: flycheck.info,  Node: 0 8 Apr 9 2013,  Next: 0 7 1 Feb 23 2013,  Prev: 0 9 Apr 13 2013,  Up: Changes

7.11 0.8 (Apr 9, 2013)
======================

   - New syntax checkers:

        - #91(1): Go using ‘gofmt’

        - #101(2): Rust using ‘rustc’

   - New features:

        - #29(3): Add a global Flycheck mode.  ‘(global-flycheck-mode)’
          is now the recommended way to enable Flycheck

        - #72(4): Add support for syntax checker options

        - Add option for the coding standard used by the ‘php-phpcs’
          syntax checker

        - Add options for the maximum McCabe complexity and the maximum
          line length to ‘python-flake8’

   - Improvements:

        - Support McCabe warnings in ‘python-flake8’

        - Support warnings from ‘flake8’ 2

        - #94(5): Show long error messages in a popup buffer

        - #96(6): Show all error messages at point

        - #98(7): Add support for naming warings from ‘flake8’ 2

        - Flycheck mode is not longer enabled for buffers whose names
          start with a space

        - #100(8): Improve highlighting to reduce screen flickering

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/91

   (2) https://github.com/flycheck/flycheck/issues/101

   (3) https://github.com/flycheck/flycheck/issues/29

   (4) https://github.com/flycheck/flycheck/issues/72

   (5) https://github.com/flycheck/flycheck/issues/94

   (6) https://github.com/flycheck/flycheck/issues/96

   (7) https://github.com/flycheck/flycheck/issues/98

   (8) https://github.com/flycheck/flycheck/issues/100


File: flycheck.info,  Node: 0 7 1 Feb 23 2013,  Next: 0 7 Feb 14 2013,  Prev: 0 8 Apr 9 2013,  Up: Changes

7.12 0.7.1 (Feb 23, 2013)
=========================

   - Bug fixes:

        - #87(1): Do not signal errors from ‘flycheck-mode’

        - Correctly fall back to ‘$HOME’ when searching configuration
          files

        - Correctly ascend to parent directory when searching
          configuration files

   - API changes:

        - Rename ‘config’ cell to ‘config-file’

        - Allow to pass the result of ‘config-file’ cells as single
          argument

        - #86(2): Add support for evaluating Lisp forms in syntax
          checker commands

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/87

   (2) https://github.com/flycheck/flycheck/issues/86


File: flycheck.info,  Node: 0 7 Feb 14 2013,  Next: 0 6 1 Jan 30 2013,  Prev: 0 7 1 Feb 23 2013,  Up: Changes

7.13 0.7 (Feb 14, 2013)
=======================

   - New features:

        - Navigate to source of syntax checker declarations from syntax
          checker help

        - #60(1): Add online Info manual

   - Improvements:

        - Use pipes instead of TTYs to read output from syntax checkers

        - #80(2): Defer syntax checks for invisible buffers

        - #62(3): Immediately display error messages after error
          navigation

   - Bug fixes:

        - Never select deleted buffers

        - Do not let the debugger interfere with necessary cleanup
          actions

        - #78(4): Do not attempt to parse empty XML trees

        - #81(5): Fix infinite recursion on Windows

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/60

   (2) https://github.com/flycheck/flycheck/issues/80

   (3) https://github.com/flycheck/flycheck/issues/62

   (4) https://github.com/flycheck/flycheck/issues/78

   (5) https://github.com/flycheck/flycheck/issues/81


File: flycheck.info,  Node: 0 6 1 Jan 30 2013,  Next: 0 6 Jan 29 2013,  Prev: 0 7 Feb 14 2013,  Up: Changes

7.14 0.6.1 (Jan 30, 2013)
=========================

   - Fix package dependencies


File: flycheck.info,  Node: 0 6 Jan 29 2013,  Next: 0 5 Dec 28 2012,  Prev: 0 6 1 Jan 30 2013,  Up: Changes

7.15 0.6 (Jan 29, 2013)
=======================

   - New syntax checkers:

        - #53(1): Emacs Lisp with ‘checkdoc-current-buffer’

        - #72(2): PHP with PHP CodeSniffer

   - Removed syntax checkers:

        - Javascript with ‘jsl’

   - New features:

        - #26(3): Error navigation with ‘next-error’ and
          ‘previous-error’

        - #33(4): Fringe icons instead of error indicators

        - #59(5): Menu entry for Flycheck

        - #35(6): Customizable error highlighting, taking the column
          number into account

        - Configuration files for syntax checkers

        - Add configuration file support to the syntax checkers
          ‘coffee-coffeelint’, ‘html-tidy’, ‘javascript-jshint’,
          ‘pyton-flake8’ and ‘tex-chktex’

        - #58(7): Allow to compile a buffer with a syntax checker for
          testing purposes

        - #31(8): Use multiple syntax checkers during a syntax check

        - #52(9): Add dedicated help for syntax checkers

   - Improvements:

        - #55(10): Match error patterns in order of declaration

   - Bug fixes:

        - #24(11): Inherit highlighting faces from built-in faces

        - #36(12): Correct error patterns of the HTML syntax checker

        - #42(13): Detect syntax errors in the ‘python-flake8’ syntax
          checker

        - Fix various regressions after introducing unit tests

        - #45(14): Inhibit syntax checking during package installation

        - #54(15): Disable syntax checking in Tramp buffers

        - #65(16): Preserve whitespace in error messages

   - API changes:

        - #41(17): Replace syntax checker variables with syntax checker
          declarations

        - #38(18): Support parsing errors with arbitrary functions
          instead of error patterns

        - #38(19): Add an error parser for Checkstyle-like XML output

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/53

   (2) https://github.com/flycheck/flycheck/issues/72

   (3) https://github.com/flycheck/flycheck/issues/26

   (4) https://github.com/flycheck/flycheck/issues/33

   (5) https://github.com/flycheck/flycheck/issues/59

   (6) https://github.com/flycheck/flycheck/issues/35

   (7) https://github.com/flycheck/flycheck/issues/58

   (8) https://github.com/flycheck/flycheck/issues/31

   (9) https://github.com/flycheck/flycheck/issues/52

   (10) https://github.com/flycheck/flycheck/issues/55

   (11) https://github.com/flycheck/flycheck/issues/24

   (12) https://github.com/flycheck/flycheck/issues/36

   (13) https://github.com/flycheck/flycheck/issues/42

   (14) https://github.com/flycheck/flycheck/issues/45

   (15) https://github.com/flycheck/flycheck/issues/54

   (16) https://github.com/flycheck/flycheck/issues/65

   (17) https://github.com/flycheck/flycheck/issues/41

   (18) https://github.com/flycheck/flycheck/issues/38

   (19) https://github.com/flycheck/flycheck/issues/38


File: flycheck.info,  Node: 0 5 Dec 28 2012,  Next: 0 4 Nov 21 2012,  Prev: 0 6 Jan 29 2013,  Up: Changes

7.16 0.5 (Dec 28, 2012)
=======================

   - New syntax checkers:

        - #15(1): SASS

        - #21(2): Perl

        - XML

        - #30(3): Lua

   - New features:

        - #25(4): Support manual buffer-local selection of syntax
          checker

        - #28(5): Add customizable error indicators

        - #27(6): Echo error messages at point without 3rd-party
          libraries like flymake-cursor

   - Improvements:

        - #24(7): Remember the last automatically selected syntax
          checker

   - Bug fixes:

        - #19(8): Fix syntax checking of buffers without backing files

   - API changes:

        - #15(9): Replace underlying Flymake API with a custom syntax
          checking implementation

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/15

   (2) https://github.com/flycheck/flycheck/issues/21

   (3) https://github.com/flycheck/flycheck/issues/30

   (4) https://github.com/flycheck/flycheck/issues/25

   (5) https://github.com/flycheck/flycheck/issues/28

   (6) https://github.com/flycheck/flycheck/issues/27

   (7) https://github.com/flycheck/flycheck/issues/24

   (8) https://github.com/flycheck/flycheck/issues/19

   (9) https://github.com/flycheck/flycheck/issues/15


File: flycheck.info,  Node: 0 4 Nov 21 2012,  Next: 0 3 Nov 21 2012,  Prev: 0 5 Dec 28 2012,  Up: Changes

7.17 0.4 (Nov 21, 2012)
=======================

   - #5(1): Rename the project to Flycheck

   - New syntax checkers

        - #9(2): HAML

        - #9(3): CSS

        - #9(4): Javascript with ‘jsl’

        - #16(5): Javascript with ‘jshint’

        - #12(6): JSON

        - LaTeX with ‘lacheck’

   - Bug fixes:

        - #10(7): Fix type error when checking compressed Emacs Lisp

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/5

   (2) https://github.com/flycheck/flycheck/issues/9

   (3) https://github.com/flycheck/flycheck/issues/9

   (4) https://github.com/flycheck/flycheck/issues/9

   (5) https://github.com/flycheck/flycheck/issues/16

   (6) https://github.com/flycheck/flycheck/issues/12

   (7) https://github.com/flycheck/flycheck/issues/10


File: flycheck.info,  Node: 0 3 Nov 21 2012,  Next: 0 2 Oct 25 2012,  Prev: 0 4 Nov 21 2012,  Up: Changes

7.18 0.3 (Nov 21, 2012)
=======================

   - #4(1): Replace ‘flymake-mode’ with a custom syntax checking minor
     mode

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/4


File: flycheck.info,  Node: 0 2 Oct 25 2012,  Next: 0 1 Oct 11 2012,  Prev: 0 3 Nov 21 2012,  Up: Changes

7.19 0.2 (Oct 25, 2012)
=======================

   - New syntax checkers:

        - PHP

   - API changes:

        - #2(1): Simplify syntax checker declarations

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/2


File: flycheck.info,  Node: 0 1 Oct 11 2012,  Prev: 0 2 Oct 25 2012,  Up: Changes

7.20 0.1 (Oct 11, 2012)
=======================

Initial release as flymake-checkers

   - New syntax checkers:

        - TeX/LaTeX

        - Shell scripts

        - Python

        - Ruby

        - Coffeescript

        - Emacs Lisp


File: flycheck.info,  Node: GNU Free Documentation License,  Next: Supported languages,  Prev: Changes,  Up: Top

8 GNU Free Documentation License
********************************


                     GNU Free Documentation License
                      Version 1.3, 3 November 2008


      Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
          <http://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

     0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or noncommercially.
     Secondarily, this License preserves for the author and publisher a way
     to get credit for their work, while not being considered responsible
     for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.  It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for free
     software, because free software needs free documentation: a free
     program should come with manuals providing the same freedoms that the
     software does.  But this License is not limited to software manuals;
     it can be used for any textual work, regardless of subject matter or
     whether it is published as a printed book.  We recommend this License
     principally for works whose purpose is instruction or reference.


     1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium, that
     contains a notice placed by the copyright holder saying it can be
     distributed under the terms of this License.  Such a notice grants a
     world-wide, royalty-free license, unlimited in duration, to use that
     work under the conditions stated herein.  The "Document", below,
     refers to any such manual or work.  Any member of the public is a
     licensee, and is addressed as "you".  You accept the license if you
     copy, modify or distribute the work in a way requiring permission
     under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section of
     the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could fall
     directly within that overall subject.  (Thus, if the Document is in
     part a textbook of mathematics, a Secondary Section may not explain
     any mathematics.)  The relationship could be a matter of historical
     connection with the subject or with related matters, or of legal,
     commercial, philosophical, ethical or political position regarding
     them.

     The "Invariant Sections" are certain Secondary Sections whose titles
     are designated, as being those of Invariant Sections, in the notice
     that says that the Document is released under this License.  If a
     section does not fit the above definition of Secondary then it is not
     allowed to be designated as Invariant.  The Document may contain zero
     Invariant Sections.  If the Document does not identify any Invariant
     Sections then there are none.

     The "Cover Texts" are certain short passages of text that are listed,
     as Front-Cover Texts or Back-Cover Texts, in the notice that says that
     the Document is released under this License.  A Front-Cover Text may
     be at most 5 words, and a Back-Cover Text may be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed of
     pixels) generic paint programs or (for drawings) some widely available
     drawing editor, and that is suitable for input to text formatters or
     for automatic translation to a variety of formats suitable for input
     to text formatters.  A copy made in an otherwise Transparent file
     format whose markup, or absence of markup, has been arranged to thwart
     or discourage subsequent modification by readers is not Transparent.
     An image format is not Transparent if used for any substantial amount
     of text.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format, SGML
     or XML using a publicly available DTD, and standard-conforming simple
     HTML, PostScript or PDF designed for human modification.  Examples of
     transparent image formats include PNG, XCF and JPG.  Opaque formats
     include proprietary formats that can be read and edited only by
     proprietary word processors, SGML or XML for which the DTD and/or
     processing tools are not generally available, and the
     machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the material
     this License requires to appear in the title page.  For works in
     formats which do not have any title page as such, "Title Page" means
     the text near the most prominent appearance of the work's title,
     preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies of
     the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document whose
     title either is precisely XYZ or contains XYZ in parentheses following
     text that translates XYZ in another language.  (Here XYZ stands for a
     specific section name mentioned below, such as "Acknowledgements",
     "Dedications", "Endorsements", or "History".)  To "Preserve the Title"
     of such a section when you modify the Document means that it remains a
     section "Entitled XYZ" according to this definition.

     The Document may include Warranty Disclaimers next to the notice which
     states that this License applies to the Document.  These Warranty
     Disclaimers are considered to be included by reference in this
     License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and has
     no effect on the meaning of this License.

     2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License applies
     to the Document are reproduced in all copies, and that you add no
     other conditions whatsoever to those of this License.  You may not use
     technical measures to obstruct or control the reading or further
     copying of the copies you make or distribute.  However, you may accept
     compensation in exchange for copies.  If you distribute a large enough
     number of copies you must also follow the conditions in section 3.

     You may also lend copies, under the same conditions stated above, and
     you may publicly display copies.


     3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly have
     printed covers) of the Document, numbering more than 100, and the
     Document's license notice requires Cover Texts, you must enclose the
     copies in covers that carry, clearly and legibly, all these Cover
     Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
     the back cover.  Both covers must also clearly and legibly identify
     you as the publisher of these copies.  The front cover must present
     the full title with all words of the title equally prominent and
     visible.  You may add other material on the covers in addition.
     Copying with changes limited to the covers, as long as they preserve
     the title of the Document and satisfy these conditions, can be treated
     as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto adjacent
     pages.

     If you publish or distribute Opaque copies of the Document numbering
     more than 100, you must either include a machine-readable Transparent
     copy along with each Opaque copy, or state in or with each Opaque copy
     a computer-network location from which the general network-using
     public has access to download using public-standard network protocols
     a complete Transparent copy of the Document, free of added material.
     If you use the latter option, you must take reasonably prudent steps,
     when you begin distribution of Opaque copies in quantity, to ensure
     that this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you distribute an
     Opaque copy (directly or through your agents or retailers) of that
     edition to the public.

     It is requested, but not required, that you contact the authors of the
     Document well before redistributing any large number of copies, to
     give them a chance to provide you with an updated version of the
     Document.


     4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document under
     the conditions of sections 2 and 3 above, provided that you release
     the Modified Version under precisely this License, with the Modified
     Version filling the role of the Document, thus licensing distribution
     and modification of the Modified Version to whoever possesses a copy
     of it.  In addition, you must do these things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title distinct
        from that of the Document, and from those of previous versions
        (which should, if there were any, be listed in the History section
        of the Document).  You may use the same title as a previous version
        if the original publisher of that version gives permission.
     B. List on the Title Page, as authors, one or more persons or entities
        responsible for authorship of the modifications in the Modified
        Version, together with at least five of the principal authors of the
        Document (all of its principal authors, if it has fewer than five),
        unless they release you from this requirement.
     C. State on the Title page the name of the publisher of the
        Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license notice
        giving the public permission to use the Modified Version under the
        terms of this License, in the form shown in the Addendum below.
     G. Preserve in that license notice the full lists of Invariant Sections
        and required Cover Texts given in the Document's license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section Entitled "History", Preserve its Title, and add
        to it an item stating at least the title, year, new authors, and
        publisher of the Modified Version as given on the Title Page.  If
        there is no section Entitled "History" in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.
     J. Preserve the network location, if any, given in the Document for
        public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions
        it was based on.  These may be placed in the "History" section.
        You may omit a network location for a work that was published at
        least four years before the Document itself, or if the original
        publisher of the version it refers to gives permission.
     K. For any section Entitled "Acknowledgements" or "Dedications",
        Preserve the Title of the section, and preserve in the section all
        the substance and tone of each of the contributor acknowledgements
        and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles.  Section numbers
        or the equivalent are not considered part of the section titles.
     M. Delete any section Entitled "Endorsements".  Such a section
        may not be included in the Modified Version.
     N. Do not retitle any existing section to be Entitled "Endorsements"
        or to conflict in title with any Invariant Section.
     O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no material
     copied from the Document, you may at your option designate some or all
     of these sections as invariant.  To do this, add their titles to the
     list of Invariant Sections in the Modified Version's license notice.
     These titles must be distinct from any other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of a
     standard.

     You may add a passage of up to five words as a Front-Cover Text, and a
     passage of up to 25 words as a Back-Cover Text, to the end of the list
     of Cover Texts in the Modified Version.  Only one passage of
     Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document already
     includes a cover text for the same cover, previously added by you or
     by arrangement made by the same entity you are acting on behalf of,
     you may not add another; but you may replace the old one, on explicit
     permission from the previous publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this License
     give permission to use their names for publicity for or to assert or
     imply endorsement of any Modified Version.


     5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under this
     License, under the terms defined in section 4 above for modified
     versions, provided that you include in the combination all of the
     Invariant Sections of all of the original documents, unmodified, and
     list them all as Invariant Sections of your combined work in its
     license notice, and that you preserve all their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name but
     different contents, make the title of each such section unique by
     adding at the end of it, in parentheses, the name of the original
     author or publisher of that section if known, or else a unique number.
     Make the same adjustment to the section titles in the list of
     Invariant Sections in the license notice of the combined work.

     In the combination, you must combine any sections Entitled "History"
     in the various original documents, forming one section Entitled
     "History"; likewise combine any sections Entitled "Acknowledgements",
     and any sections Entitled "Dedications".  You must delete all sections
     Entitled "Endorsements".


     6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the rules
     of this License for verbatim copying of each of the documents in all
     other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert a
     copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.


     7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other separate
     and independent documents or works, in or on a volume of a storage or
     distribution medium, is called an "aggregate" if the copyright
     resulting from the compilation is not used to limit the legal rights
     of the compilation's users beyond what the individual works permit.
     When the Document is included in an aggregate, this License does not
     apply to the other works in the aggregate which are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half of
     the entire aggregate, the Document's Cover Texts may be placed on
     covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic form.
     Otherwise they must appear on printed covers that bracket the whole
     aggregate.


     8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section 4.
     Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also include
     the original English version of this License and the original versions
     of those notices and disclaimers.  In case of a disagreement between
     the translation and the original version of this License or a notice
     or disclaimer, the original version will prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to Preserve
     its Title (section 1) will typically require changing the actual
     title.


     9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void, and
     will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your license
     from a particular copyright holder is reinstated (a) provisionally,
     unless and until the copyright holder explicitly and finally
     terminates your license, and (b) permanently, if the copyright holder
     fails to notify you of the violation by some reasonable means prior to
     60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

     Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, receipt of a copy of some or all of the same material does
     not give you any rights to use it.


     10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of the
     GNU Free Documentation License from time to time.  Such new versions
     will be similar in spirit to the present version, but may differ in
     detail to address new problems or concerns.  See
     http://www.gnu.org/copyleft/.

     Each version of the License is given a distinguishing version number.
     If the Document specifies that a particular numbered version of this
     License "or any later version" applies to it, you have the option of
     following the terms and conditions either of that specified version or
     of any later version that has been published (not as a draft) by the
     Free Software Foundation.  If the Document does not specify a version
     number of this License, you may choose any version ever published (not
     as a draft) by the Free Software Foundation.  If the Document
     specifies that a proxy can decide which future versions of this
     License can be used, that proxy's public statement of acceptance of a
     version permanently authorizes you to choose that version for the
     Document.

     11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.  A
     "Massive Multiauthor Collaboration" (or "MMC") contained in the site
     means any set of copyrightable works thus published on the MMC site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or in
     part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this License
     somewhere other than this MMC, and subsequently incorporated in whole or
     in part into the MMC, (1) had no cover texts or invariant sections, and
     (2) were thus incorporated prior to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the site
     under CC-BY-SA on the same site at any time before August 1, 2009,
     provided the MMC is eligible for relicensing.


     ADDENDUM: How to use this License for your documents

     To use this License in a document you have written, include a copy of
     the License in the document and put the following copyright and
     license notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.3
         or any later version published by the Free Software Foundation;
         with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

     If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
     replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

     If you have Invariant Sections without Cover Texts, or some other
     combination of the three, merge those two alternatives to suit the
     situation.

     If your document contains nontrivial examples of program code, we
     recommend releasing these examples in parallel under your choice of
     free software license, such as the GNU General Public License,
     to permit their use in free software.


File: flycheck.info,  Node: Supported languages,  Next: Glossary,  Prev: GNU Free Documentation License,  Up: Top

9 Supported languages
*********************

Flycheck supports the following 41 languages with 61 syntax checkers.

Each language has one or more syntax checkers, whose names follow a
‘_language_-_tool_’ convention, where ‘_language_’ is the programming
language supported by this syntax checker, and ‘_tool_’ the specific
syntax checker tool.

This document provides just a brief overview, use *note
flycheck-describe-checker: 10. to see comprehensive documenation about a
syntax checker.

* Menu:

* AsciiDoc:: 
* Bash:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* Racket:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell (POSIX): Shell POSIX. 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 
* Zsh:: 


File: flycheck.info,  Node: AsciiDoc,  Next: Bash,  Up: Supported languages

9.1 AsciiDoc
============

See also
........

‘http://www.methods.co.nz/asciidoc/’

 -- Flycheck Syntax Checker: Syntax Checker asciidoc


File: flycheck.info,  Node: Bash,  Next: C/C++,  Prev: AsciiDoc,  Up: Supported languages

9.2 Bash
========

See also
........

‘http://www.gnu.org/software/bash/’

 -- Flycheck Syntax Checker: Syntax Checker bash


File: flycheck.info,  Node: C/C++,  Next: CFEngine,  Prev: Bash,  Up: Supported languages

9.3 C/C++
=========

 -- Flycheck Syntax Checker: Syntax Checker c/c++-clang

     See also
.............

     ‘http://clang.llvm.org/’

 -- Flycheck Syntax Checker: Syntax Checker c/c++-cppcheck

     See also
.............

     ‘http://cppcheck.sourceforge.net/’


File: flycheck.info,  Node: CFEngine,  Next: Chef,  Prev: C/C++,  Up: Supported languages

9.4 CFEngine
============

See also
........

‘http://cfengine.com/’

 -- Flycheck Syntax Checker: Syntax Checker cfengine


File: flycheck.info,  Node: Chef,  Next: Coffeescript,  Prev: CFEngine,  Up: Supported languages

9.5 Chef
========

See also
........

‘http://www.getchef.com/chef/’

 -- Flycheck Syntax Checker: Syntax Checker chef-foodcritic

     See also
.............

     ‘http://acrmp.github.io/foodcritic/’


File: flycheck.info,  Node: Coffeescript,  Next: CSS,  Prev: Chef,  Up: Supported languages

9.6 Coffeescript
================

See also
........

‘http://coffeescript.org/’

 -- Flycheck Syntax Checker: Syntax Checker coffee

 -- Flycheck Syntax Checker: Syntax Checker coffee-coffeelint

     See also
.............

     ‘http://www.coffeelint.org/’


File: flycheck.info,  Node: CSS,  Next: D,  Prev: Coffeescript,  Up: Supported languages

9.7 CSS
=======

 -- Flycheck Syntax Checker: Syntax Checker css-csslint

     See also
.............

     ‘https://github.com/stubbornella/csslint’


File: flycheck.info,  Node: D,  Next: Elixir,  Prev: CSS,  Up: Supported languages

9.8 D
=====

See also
........

‘http://dlang.org/’

 -- Flycheck Syntax Checker: Syntax Checker d-dmd


File: flycheck.info,  Node: Elixir,  Next: Emacs Lisp,  Prev: D,  Up: Supported languages

9.9 Elixir
==========

See also
........

‘http://elixir-lang.org’

 -- Flycheck Syntax Checker: Syntax Checker elixir


File: flycheck.info,  Node: Emacs Lisp,  Next: Erlang,  Prev: Elixir,  Up: Supported languages

9.10 Emacs Lisp
===============

See also
........

Emacs

     ‘http://www.gnu.org/software/emacs/’

Emacs Lisp manual

     ‘http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html’

 -- Flycheck Syntax Checker: Syntax Checker emacs-lisp

 -- Flycheck Syntax Checker: Syntax Checker emacs-lisp-checkdoc

     See also
.............

     Tips for Documentation Strings

          ‘http://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html#Documentation-Tips’


File: flycheck.info,  Node: Erlang,  Next: ERuby,  Prev: Emacs Lisp,  Up: Supported languages

9.11 Erlang
===========

See also
........

‘http://www.erlang.org/’

 -- Flycheck Syntax Checker: Syntax Checker erlang


File: flycheck.info,  Node: ERuby,  Next: Go,  Prev: Erlang,  Up: Supported languages

9.12 ERuby
==========

 -- Flycheck Syntax Checker: Syntax Checker eruby-erubis

     See also
.............

     Erubis

          ‘http://www.kuwata-lab.com/erubis/’


File: flycheck.info,  Node: Go,  Next: Haml,  Prev: ERuby,  Up: Supported languages

9.13 Go
=======

See also
........

‘http://golang.org/’

 -- Flycheck Syntax Checker: Syntax Checker go-gofmt

 -- Flycheck Syntax Checker: Syntax Checker go-build

 -- Flycheck Syntax Checker: Syntax Checker go-test


File: flycheck.info,  Node: Haml,  Next: Handlebars,  Prev: Go,  Up: Supported languages

9.14 Haml
=========

See also
........

‘http://haml.info/’

 -- Flycheck Syntax Checker: Syntax Checker haml


File: flycheck.info,  Node: Handlebars,  Next: Haskell,  Prev: Haml,  Up: Supported languages

9.15 Handlebars
===============

See also
........

‘http://handlebarsjs.com/’

 -- Flycheck Syntax Checker: Syntax Checker handlebars


File: flycheck.info,  Node: Haskell,  Next: HTML,  Prev: Handlebars,  Up: Supported languages

9.16 Haskell
============

See also
........

‘http://www.haskell.org/’

 -- Flycheck Syntax Checker: Syntax Checker haskell-ghc

     See also
.............

     ‘http://www.haskell.org/ghc/’

 -- Flycheck Syntax Checker: Syntax Checker haskell-hlint

     See also
.............

     ‘https://github.com/ndmitchell/hlint’


File: flycheck.info,  Node: HTML,  Next: Javascript,  Prev: Haskell,  Up: Supported languages

9.17 HTML
=========

 -- Flycheck Syntax Checker: Syntax Checker html-tidy

     See also
.............

     HTML Tidy

          ‘http://tidy.sourceforge.net/’

     HTML Tidy for HTML 5

          ‘http://w3c.github.io/tidy-html5/’


File: flycheck.info,  Node: Javascript,  Next: JSON,  Prev: HTML,  Up: Supported languages

9.18 Javascript
===============

 -- Flycheck Syntax Checker: Syntax Checker javascript-jshint

     See also
.............

     ‘http://www.jshint.com/’

 -- Flycheck Syntax Checker: Syntax Checker javascript-eslint

     See also
.............

     ‘https://github.com/eslint/eslint’

 -- Flycheck Syntax Checker: Syntax Checker javascript-gjslint

     See also
.............

     Closure Linter

          ‘https://developers.google.com/closure/utilities/’


File: flycheck.info,  Node: JSON,  Next: LESS,  Prev: Javascript,  Up: Supported languages

9.19 JSON
=========

 -- Flycheck Syntax Checker: Syntax Checker json-jsonlint

     See also
.............

     ‘https://github.com/zaach/jsonlint’


File: flycheck.info,  Node: LESS,  Next: Lua,  Prev: JSON,  Up: Supported languages

9.20 LESS
=========

 -- Flycheck Syntax Checker: Syntax Checker less

     See also
.............

     ‘http://www.lesscss.org/’


File: flycheck.info,  Node: Lua,  Next: Make,  Prev: LESS,  Up: Supported languages

9.21 Lua
========

 -- Flycheck Syntax Checker: Syntax Checker lua

     See also
.............

     ‘http://www.lua.org/’


File: flycheck.info,  Node: Make,  Next: Perl,  Prev: Lua,  Up: Supported languages

9.22 Make
=========

 -- Flycheck Syntax Checker: Syntax Checker make-gmake

     See also
.............

     ‘http://www.gnu.org/software/make/’


File: flycheck.info,  Node: Perl,  Next: PHP,  Prev: Make,  Up: Supported languages

9.23 Perl
=========

See also
........

‘http://www.perl.org’

 -- Flycheck Syntax Checker: Syntax Checker perl


File: flycheck.info,  Node: PHP,  Next: Puppet,  Prev: Perl,  Up: Supported languages

9.24 PHP
========

 -- Flycheck Syntax Checker: Syntax Checker php

     See also
.............

     PHP Command Line

          ‘http://php.net/manual/en/features.commandline.php’

 -- Flycheck Syntax Checker: Syntax Checker php-phpmd

     See also
.............

     PHP Mess Detector

          ‘http://phpmd.org/’

 -- Flycheck Syntax Checker: Syntax Checker php-phpcs

     See also
.............

     PHP Code Sniffer

          ‘http://pear.php.net/package/PHP_CodeSniffer/’


File: flycheck.info,  Node: Puppet,  Next: Python,  Prev: PHP,  Up: Supported languages

9.25 Puppet
===========

See also
........

‘https://puppetlabs.com/’

 -- Flycheck Syntax Checker: Syntax Checker puppet-parser

 -- Flycheck Syntax Checker: Syntax Checker puppet-lint

     See also
.............

     ‘http://www.puppet-lint.com/’


File: flycheck.info,  Node: Python,  Next: Racket,  Prev: Puppet,  Up: Supported languages

9.26 Python
===========

 -- Flycheck Syntax Checker: Syntax Checker python-flake8

     See also
.............

     ‘http://flake8.readthedocs.org/’

 -- Flycheck Syntax Checker: Syntax Checker python-pylint

     See also
.............

     ‘http://www.pylint.org/’


File: flycheck.info,  Node: Racket,  Next: ReStructuredText,  Prev: Python,  Up: Supported languages

9.27 Racket
===========

See also
........

‘http://racket-lang.org/’

 -- Flycheck Syntax Checker: Syntax Checker racket


File: flycheck.info,  Node: ReStructuredText,  Next: Ruby,  Prev: Racket,  Up: Supported languages

9.28 ReStructuredText
=====================

See also
........

ReStructuredText

     ‘http://docutils.sourceforge.net/rst.html’

Docutils

     ‘http://docutils.sourceforge.net/’

 -- Flycheck Syntax Checker: Syntax Checker rst

 -- Flycheck Syntax Checker: Syntax Checker rst-sphinx

     See also
.............

     sphinx-doc.org


File: flycheck.info,  Node: Ruby,  Next: Rust,  Prev: ReStructuredText,  Up: Supported languages

9.29 Ruby
=========

See also
........

‘https://www.ruby-lang.org/’

 -- Flycheck Syntax Checker: Syntax Checker ruby-rubocop

     See also
.............

     ‘https://github.com/bbatsov/rubocop’

 -- Flycheck Syntax Checker: Syntax Checker ruby-rubylint

     See also
.............

     ‘https://github.com/YorickPeterse/ruby-lint’

 -- Flycheck Syntax Checker: Syntax Checker ruby

 -- Flycheck Syntax Checker: Syntax Checker ruby-jruby

     See also
.............

     ‘http://jruby.org/’


File: flycheck.info,  Node: Rust,  Next: Sass,  Prev: Ruby,  Up: Supported languages

9.30 Rust
=========

See also
........

‘http://www.rust-lang.org/’

 -- Flycheck Syntax Checker: Syntax Checker rust


File: flycheck.info,  Node: Sass,  Next: Scala,  Prev: Rust,  Up: Supported languages

9.31 Sass
=========

See also
........

‘http://sass-lang.com/’

 -- Flycheck Syntax Checker: Syntax Checker sass


File: flycheck.info,  Node: Scala,  Next: Scss,  Prev: Sass,  Up: Supported languages

9.32 Scala
==========

See also
........

‘http://www.scala-lang.org/’

 -- Flycheck Syntax Checker: Syntax Checker scala


File: flycheck.info,  Node: Scss,  Next: Shell POSIX,  Prev: Scala,  Up: Supported languages

9.33 Scss
=========

 -- Flycheck Syntax Checker: Syntax Checker scss

     See also
.............

     ‘http://sass-lang.com/’


File: flycheck.info,  Node: Shell POSIX,  Next: Slim,  Prev: Scss,  Up: Supported languages

9.34 Shell (POSIX)
==================

See also
........

POSIX Shell Command Language

     ‘http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html’

 -- Flycheck Syntax Checker: Syntax Checker sh-dash

     See also
.............

     DASH

          ‘http://gondor.apana.org.au/~herbert/dash/’

 -- Flycheck Syntax Checker: Syntax Checker sh-bash

     See also
.............

     ‘http://www.gnu.org/software/bash/’


File: flycheck.info,  Node: Slim,  Next: TeX/LaTeX,  Prev: Shell POSIX,  Up: Supported languages

9.35 Slim
=========

See also
........

‘http://slim-lang.com/’

 -- Flycheck Syntax Checker: Syntax Checker slim


File: flycheck.info,  Node: TeX/LaTeX,  Next: Texinfo,  Prev: Slim,  Up: Supported languages

9.36 TeX/LaTeX
==============

See also
........

LaTeX

     ‘http://www.latex-project.org/’

TeX Live

     ‘http://www.tug.org/texlive/’

 -- Flycheck Syntax Checker: Syntax Checker tex-chktex

     See also
.............

     ‘http://www.nongnu.org/chktex/’

 -- Flycheck Syntax Checker: Syntax Checker tex-lacheck

     See also
.............

     ‘http://www.ctan.org/pkg/lacheck’


File: flycheck.info,  Node: Texinfo,  Next: Verilog,  Prev: TeX/LaTeX,  Up: Supported languages

9.37 Texinfo
============

 -- Flycheck Syntax Checker: Syntax Checker texinfo

     See also
.............

     www.gnu.org/software/texinfo/


File: flycheck.info,  Node: Verilog,  Next: XML,  Prev: Texinfo,  Up: Supported languages

9.38 Verilog
============

 -- Flycheck Syntax Checker: Syntax Checker verilog-verilator

     See also
.............

     ‘http://www.veripool.org/wiki/verilator’


File: flycheck.info,  Node: XML,  Next: YAML,  Prev: Verilog,  Up: Supported languages

9.39 XML
========

 -- Flycheck Syntax Checker: Syntax Checker xml-xmlstarlet

     See also
.............

     ‘http://xmlstar.sourceforge.net/’

 -- Flycheck Syntax Checker: Syntax Checker xml-xmllint

     See also
.............

     Libxml2

          ‘http://www.xmlsoft.org/’


File: flycheck.info,  Node: YAML,  Next: Zsh,  Prev: XML,  Up: Supported languages

9.40 YAML
=========

 -- Flycheck Syntax Checker: Syntax Checker yaml-jsyaml

     See also
.............

     ‘https://github.com/nodeca/js-yaml’

 -- Flycheck Syntax Checker: Syntax Checker yaml-ruby

     See also
.............

     ‘https://www.ruby-lang.org’


File: flycheck.info,  Node: Zsh,  Prev: YAML,  Up: Supported languages

9.41 Zsh
========

See also
........

‘http://www.zsh.org/’

 -- Flycheck Syntax Checker: Syntax Checker zsh


File: flycheck.info,  Node: Glossary,  Next: Index,  Prev: Supported languages,  Up: Top

10 Glossary
***********

syntax checker

     A symbol which is defined as syntax checker with *note
     flycheck-define-checker: 8c.

registered syntax checker

     A *note syntax checker: 27. available for automatic selection, i.e.
     that is contained in *note flycheck-checkers: 25.

disabled syntax checker

     A *note syntax checker: 27. explicitly excluded from available
     selection, i.e.  that is contained in *note
     flycheck-disabled-checkers: 26.

enabled syntax checker

     A *note registered syntax checker: 28. which is not a *note
     disabled syntax checker: 145.

suitable syntax checker

     A *note syntax checker: 27. which can be used to check the current
     buffer.  Precisely, a syntax checker which

        - which can be used for the current major mode,

        - and whose predicate succeeds,

        - and whose syntax checker tool exists.


File: flycheck.info,  Node: Index,  Prev: Glossary,  Up: Top

Index
*****

 [index ]
* Menu:

* ;command; Flycheck syntax checker property: Defining new syntax checkers.
                                                              (line  33)
* ;error-parser; Flycheck syntax checker property: Defining new syntax checkers.
                                                              (line 293)
* ;error-patterns; Flycheck syntax checker property: Defining new syntax checkers.
                                                              (line 240)
* ;modes; Flycheck syntax checker property: Defining new syntax checkers.
                                                              (line 318)
* ;next-checkers; Flycheck syntax checker property: Defining new syntax checkers.
                                                              (line 346)
* ;predicate; Flycheck syntax checker property: Defining new syntax checkers.
                                                              (line 331)
* asciidoc; Flycheck syntax checker:     AsciiDoc.            (line  11)
* bash; Flycheck syntax checker:         Bash.                (line  11)
* c/c++-clang; Flycheck syntax checker:  C/C++.               (line   6)
* c/c++-cppcheck; Flycheck syntax checker: C/C++.             (line  13)
* cfengine; Flycheck syntax checker:     CFEngine.            (line  11)
* chef-foodcritic; Flycheck syntax checker: Chef.             (line  11)
* coffee-coffeelint; Flycheck syntax checker: Coffeescript.   (line  13)
* coffee; Flycheck syntax checker:       Coffeescript.        (line  11)
* css-csslint; Flycheck syntax checker:  CSS.                 (line   6)
* d-dmd; Flycheck syntax checker:        D.                   (line  11)
* disabled syntax checker:               Glossary.            (line  14)
* elixir; Flycheck syntax checker:       Elixir.              (line  11)
* emacs-lisp-checkdoc; Flycheck syntax checker: Emacs Lisp.   (line  19)
* emacs-lisp; Flycheck syntax checker:   Emacs Lisp.          (line  17)
* enabled syntax checker:                Glossary.            (line  20)
* erlang; Flycheck syntax checker:       Erlang.              (line  11)
* eruby-erubis; Flycheck syntax checker: ERuby.               (line   6)
* flycheck-add-next-checker; Emacs Lisp function: Extending syntax checkers.
                                                              (line   8)
* flycheck-after-syntax-check-hook; Emacs Lisp hook: Syntax checking.
                                                              (line  95)
* flycheck-before-syntax-check-hook; Emacs Lisp hook: Syntax checking.
                                                              (line 114)
* flycheck-buffer; Emacs Lisp command:   Syntax checking.     (line  67)
* flycheck-check-syntax-automatically; Emacs Lisp user option: Syntax checking.
                                                              (line  19)
* flycheck-checker; Emacs Lisp variable: Syntax checker selection.
                                                              (line  66)
* flycheck-checkers; Emacs Lisp user option: Syntax checker selection.
                                                              (line  10)
* flycheck-chktexrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line   9)
* flycheck-clang-definitions; Emacs Lisp user option: Syntax checker options.
                                                              (line  10)
* flycheck-clang-include-path; Emacs Lisp user option: Syntax checker options.
                                                              (line  14)
* flycheck-clang-includes; Emacs Lisp user option: Syntax checker options.
                                                              (line  18)
* flycheck-clang-language-standard; Emacs Lisp user option: Syntax checker options.
                                                              (line  22)
* flycheck-clang-ms-extensions; Emacs Lisp user option: Syntax checker options.
                                                              (line  26)
* flycheck-clang-no-rtti; Emacs Lisp user option: Syntax checker options.
                                                              (line  30)
* flycheck-clang-standard-library; Emacs Lisp user option: Syntax checker options.
                                                              (line  34)
* flycheck-clang-warnings; Emacs Lisp user option: Syntax checker options.
                                                              (line  38)
* flycheck-clear; Emacs Lisp command:    Error reporting.     (line 192)
* flycheck-coffeelintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  14)
* flycheck-completion-system; Emacs Lisp user option: Syntax checker selection.
                                                              (line  94)
* flycheck-copy-messages-as-kill; Emacs Lisp command: Error reporting.
                                                              (line 133)
* flycheck-count-errors; Emacs Lisp function: Error API.      (line 151)
* flycheck-cppcheck-checks; Emacs Lisp user option: Syntax checker options.
                                                              (line  42)
* flycheck-current-errors; Emacs Lisp variable: Error API.    (line 146)
* flycheck-def-config-file-var; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line 371)
* flycheck-def-option-var; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line 388)
* flycheck-define-checker; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line   8)
* flycheck-define-error-level; Emacs Lisp function: Error levels.
                                                              (line  23)
* flycheck-describe-checker; Emacs Lisp command: Syntax checker selection.
                                                              (line 128)
* flycheck-disabled-checkers; Emacs Lisp user option: Syntax checker selection.
                                                              (line  20)
* flycheck-display-error-messages; Emacs Lisp function: Error reporting.
                                                              (line 120)
* flycheck-display-errors-delay; Emacs Lisp user option: Error reporting.
                                                              (line 103)
* flycheck-display-errors-function; Emacs Lisp user option: Error reporting.
                                                              (line 111)
* flycheck-emacs-lisp-initialize-packages; Emacs Lisp user option: Syntax checker options.
                                                              (line  46)
* flycheck-emacs-lisp-load-path; Emacs Lisp user option: Syntax checker options.
                                                              (line  57)
* flycheck-emacs-lisp-package-user-dir; Emacs Lisp user option: Syntax checker options.
                                                              (line  68)
* flycheck-error-buffer; Emacs Lisp slot: Error API.          (line  15)
* flycheck-error-checker; Emacs Lisp slot: Error API.         (line  24)
* flycheck-error-column-region; Emacs Lisp function: Error API.
                                                              (line 101)
* flycheck-error-column; Emacs Lisp slot: Error API.          (line  36)
* flycheck-error-filename; Emacs Lisp slot: Error API.        (line  28)
* flycheck-error-format; Emacs Lisp function: Error API.      (line 139)
* flycheck-error-level; Emacs Lisp slot: Error API.           (line  47)
* flycheck-error-line-region; Emacs Lisp function: Error API. (line  96)
* flycheck-error-line; Emacs Lisp slot:  Error API.           (line  32)
* flycheck-error-list-highlight-at-point; Emacs Lisp face: Error reporting.
                                                              (line 181)
* flycheck-error-list-highlight; Emacs Lisp face: Error reporting.
                                                              (line 185)
* flycheck-error-message; Emacs Lisp slot: Error API.         (line  43)
* flycheck-error-new-at; Emacs Lisp function: Error API.      (line  55)
* flycheck-error-new; Emacs Lisp function: Error API.         (line  76)
* flycheck-error-pos; Emacs Lisp function: Error API.         (line 130)
* flycheck-error-sexp-region; Emacs Lisp function: Error API. (line 109)
* flycheck-error-with-buffer; Emacs Lisp macro: Error API.    (line  89)
* flycheck-error; Emacs Lisp CL struct:  Error API.           (line  10)
* flycheck-error; Emacs Lisp face:       Error reporting.     (line  16)
* flycheck-eslint-rulesdir; Emacs Lisp user option: Syntax checker options.
                                                              (line  72)
* flycheck-eslintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  19)
* flycheck-first-error; Emacs Lisp command: Error navigation. (line  54)
* flycheck-flake8-maximum-complexity; Emacs Lisp user option: Syntax checker options.
                                                              (line  77)
* flycheck-flake8-maximum-line-length; Emacs Lisp user option: Syntax checker options.
                                                              (line  82)
* flycheck-flake8rc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  24)
* flycheck-fringe-error; Emacs Lisp face: Error reporting.    (line  63)
* flycheck-fringe-info; Emacs Lisp face: Error reporting.     (line  63)
* flycheck-fringe-warning; Emacs Lisp face: Error reporting.  (line  63)
* flycheck-ghc-no-user-package-database; Emacs Lisp user option: Syntax checker options.
                                                              (line  87)
* flycheck-ghc-package-databases; Emacs Lisp user option: Syntax checker options.
                                                              (line  92)
* flycheck-ghc-search-path; Emacs Lisp user option: Syntax checker options.
                                                              (line  96)
* flycheck-gjslintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  29)
* flycheck-google-max-messages; Emacs Lisp user option: Error reporting.
                                                              (line 151)
* flycheck-google-messages; Emacs Lisp command: Error reporting.
                                                              (line 139)
* flycheck-has-errors-p; Emacs Lisp function: Error API.      (line 159)
* flycheck-highlighting-mode; Emacs Lisp user option: Error reporting.
                                                              (line  33)
* flycheck-idle-change-delay; Emacs Lisp user option: Syntax checking.
                                                              (line  53)
* flycheck-indication-mode; Emacs Lisp user option: Error reporting.
                                                              (line  70)
* flycheck-info; Emacs Lisp face:        Error reporting.     (line  16)
* flycheck-jshintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  34)
* flycheck-list-errors; Emacs Lisp command: Error reporting.  (line 165)
* flycheck-locate-config-file-functions; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  57)
* flycheck-mode; Emacs Lisp command:     Flycheck Mode.       (line   8)
* flycheck-mode; Emacs Lisp user option: Flycheck Mode.       (line  12)
* flycheck-next-error; Emacs Lisp command: Error navigation.  (line  36)
* flycheck-option-comma-separated-list; Emacs Lisp function: Option filters.
                                                              (line  15)
* flycheck-option-int; Emacs Lisp function: Option filters.   (line  10)
* flycheck-parse-checkstyle; Emacs Lisp function: Error parsers.
                                                              (line  19)
* flycheck-parse-with-patterns; Emacs Lisp function: Error parsers.
                                                              (line  13)
* flycheck-parse-xml-string; Emacs Lisp function: Error parser API.
                                                              (line   8)
* flycheck-phpcs-standard; Emacs Lisp user option: Syntax checker options.
                                                              (line 101)
* flycheck-phpmd-rulesets; Emacs Lisp user option: Syntax checker options.
                                                              (line 105)
* flycheck-previous-error; Emacs Lisp command: Error navigation.
                                                              (line  45)
* flycheck-process-error-functions; Emacs Lisp hook: Error reporting.
                                                              (line  84)
* flycheck-pylintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  39)
* flycheck-rubocop-lint-only; Emacs Lisp user option: Syntax checker options.
                                                              (line 109)
* flycheck-rubocoprc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  44)
* flycheck-sass-compass; Emacs Lisp user option: Syntax checker options.
                                                              (line 113)
* flycheck-scss-compass; Emacs Lisp user option: Syntax checker options.
                                                              (line 117)
* flycheck-select-checker; Emacs Lisp command: Syntax checker selection.
                                                              (line  45)
* flycheck-set-checker-executable; Emacs Lisp command: Syntax checker executables.
                                                              (line  22)
* flycheck-sphinx-warn-on-missing-references; Emacs Lisp user option: Syntax checker options.
                                                              (line 121)
* flycheck-standard-error-navigation; Emacs Lisp user option: Error navigation.
                                                              (line  16)
* flycheck-syntax-check-failed-hook; Emacs Lisp hook: Syntax checking.
                                                              (line 131)
* flycheck-tidyrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  49)
* flycheck-warning; Emacs Lisp face:     Error reporting.     (line  16)
* global-flycheck-mode; Emacs Lisp command: Flycheck Mode.    (line  16)
* global-flycheck-mode; Emacs Lisp user option: Flycheck Mode.
                                                              (line  33)
* go-build; Flycheck syntax checker:     Go.                  (line  13)
* go-gofmt; Flycheck syntax checker:     Go.                  (line  11)
* go-test; Flycheck syntax checker:      Go.                  (line  15)
* haml; Flycheck syntax checker:         Haml.                (line  11)
* handlebars; Flycheck syntax checker:   Handlebars.          (line  11)
* haskell-ghc; Flycheck syntax checker:  Haskell.             (line  11)
* haskell-hlint; Flycheck syntax checker: Haskell.            (line  18)
* html-tidy; Flycheck syntax checker:    HTML.                (line   6)
* javascript-eslint; Flycheck syntax checker: Javascript.     (line  13)
* javascript-gjslint; Flycheck syntax checker: Javascript.    (line  20)
* javascript-jshint; Flycheck syntax checker: Javascript.     (line   6)
* json-jsonlint; Flycheck syntax checker: JSON.               (line   6)
* less; Flycheck syntax checker:         LESS.                (line   6)
* list-flycheck-errors; Emacs Lisp command: Error reporting.  (line 165)
* lua; Flycheck syntax checker:          Lua.                 (line   6)
* make-gmake; Flycheck syntax checker:   Make.                (line   6)
* perl; Flycheck syntax checker:         Perl.                (line  11)
* php-phpcs; Flycheck syntax checker:    PHP.                 (line  24)
* php-phpmd; Flycheck syntax checker:    PHP.                 (line  15)
* php; Flycheck syntax checker:          PHP.                 (line   6)
* puppet-lint; Flycheck syntax checker:  Puppet.              (line  13)
* puppet-parser; Flycheck syntax checker: Puppet.             (line  11)
* python-flake8; Flycheck syntax checker: Python.             (line   6)
* python-pylint; Flycheck syntax checker: Python.             (line  13)
* racket; Flycheck syntax checker:       Racket.              (line  11)
* registered syntax checker:             Glossary.            (line   9)
* rst-sphinx; Flycheck syntax checker:   ReStructuredText.    (line  19)
* rst; Flycheck syntax checker:          ReStructuredText.    (line  17)
* ruby-jruby; Flycheck syntax checker:   Ruby.                (line  27)
* ruby-rubocop; Flycheck syntax checker: Ruby.                (line  11)
* ruby-rubylint; Flycheck syntax checker: Ruby.               (line  18)
* ruby; Flycheck syntax checker:         Ruby.                (line  25)
* rust; Flycheck syntax checker:         Rust.                (line  11)
* sass; Flycheck syntax checker:         Sass.                (line  11)
* scala; Flycheck syntax checker:        Scala.               (line  11)
* scss; Flycheck syntax checker:         Scss.                (line   6)
* sh-bash; Flycheck syntax checker:      Shell POSIX.         (line  22)
* sh-dash; Flycheck syntax checker:      Shell POSIX.         (line  13)
* slim; Flycheck syntax checker:         Slim.                (line  11)
* suitable syntax checker:               Glossary.            (line  25)
* syntax checker:                        Glossary.            (line   6)
* tex-chktex; Flycheck syntax checker:   TeX/LaTeX.           (line  17)
* tex-lacheck; Flycheck syntax checker:  TeX/LaTeX.           (line  24)
* texinfo; Flycheck syntax checker:      Texinfo.             (line   6)
* verilog-verilator; Flycheck syntax checker: Verilog.        (line   6)
* xml-xmllint; Flycheck syntax checker:  XML.                 (line  13)
* xml-xmlstarlet; Flycheck syntax checker: XML.               (line   6)
* yaml-jsyaml; Flycheck syntax checker:  YAML.                (line   6)
* yaml-ruby; Flycheck syntax checker:    YAML.                (line  13)
* zsh; Flycheck syntax checker:          Zsh.                 (line  11)



Tag Table:
Node: Top364
Ref: manual/index doc588
Ref: 0588
Node: Introduction3932
Ref: manual/introduction introduction4012
Ref: 24012
Ref: manual/introduction flycheck-manual4012
Ref: 34012
Ref: manual/introduction doc4012
Ref: 44012
Node: Features4188
Ref: manual/introduction features4276
Ref: 54276
Ref: manual/introduction id14276
Ref: 64276
Node: 3rd party extensions4824
Ref: manual/introduction rd-party-extensions4933
Ref: c4933
Ref: manual/introduction id24933
Ref: d4933
Ref: 3rd party extensions-Footnote-15734
Ref: 3rd party extensions-Footnote-25784
Ref: 3rd party extensions-Footnote-35821
Ref: 3rd party extensions-Footnote-45882
Ref: 3rd party extensions-Footnote-55938
Ref: 3rd party extensions-Footnote-65993
Ref: 3rd party extensions-Footnote-76036
Ref: 3rd party extensions-Footnote-86089
Ref: 3rd party extensions-Footnote-96142
Node: Installation6174
Ref: manual/introduction installation6266
Ref: e6266
Ref: manual/introduction id36266
Ref: f6266
Ref: Installation-Footnote-17779
Ref: Installation-Footnote-27812
Ref: Installation-Footnote-37847
Node: Usage7884
Ref: manual/usage usage7979
Ref: 117979
Ref: manual/usage marmalade7979
Ref: 127979
Ref: manual/usage doc7979
Ref: 137979
Node: Flycheck Mode8168
Ref: manual/usage flycheck-mode8249
Ref: 148249
Ref: manual/usage id18249
Ref: 158249
Ref: manual/usage el functions flycheck-mode8339
Ref: 168339
Ref: manual/usage el variables flycheck-mode8423
Ref: 178423
Ref: manual/usage el functions global-flycheck-mode8529
Ref: 188529
Ref: manual/usage el variables global-flycheck-mode9207
Ref: 1a9207
Node: Syntax checking9540
Ref: manual/usage id29654
Ref: 1b9654
Ref: manual/usage syntax-checking9654
Ref: 89654
Ref: manual/usage el variables flycheck-check-syntax-automatically10016
Ref: 1c10016
Ref: manual/usage el variables flycheck-idle-change-delay11123
Ref: 1e11123
Ref: manual/usage el functions flycheck-buffer11688
Ref: 1d11688
Ref: manual/usage el variables flycheck-after-syntax-check-hook12580
Ref: 2112580
Ref: manual/usage el variables flycheck-before-syntax-check-hook13336
Ref: 1f13336
Ref: manual/usage el variables flycheck-syntax-check-failed-hook13871
Ref: 2313871
Node: Syntax checker selection14285
Ref: manual/usage syntax-checker-selection14414
Ref: 2014414
Ref: manual/usage id314414
Ref: 2414414
Ref: manual/usage el variables flycheck-checkers14642
Ref: 2514642
Ref: manual/usage el variables flycheck-disabled-checkers15029
Ref: 2615029
Ref: manual/usage el functions flycheck-select-checker16071
Ref: 2a16071
Ref: manual/usage el variables flycheck-checker16697
Ref: 2b16697
Ref: manual/usage el variables flycheck-completion-system17696
Ref: 2c17696
Ref: manual/usage el functions flycheck-describe-checker18884
Ref: 1018884
Ref: Syntax checker selection-Footnote-119015
Ref: Syntax checker selection-Footnote-219053
Node: Syntax checker configuration19094
Ref: manual/usage syntax-checker-configuration19223
Ref: a19223
Ref: manual/usage id419223
Ref: 2d19223
Node: Syntax checker executables19400
Ref: manual/usage syntax-checker-executables19524
Ref: 2e19524
Ref: manual/usage id519524
Ref: 2f19524
Ref: manual/usage el functions flycheck-set-checker-executable20323
Ref: 3020323
Node: Syntax checker options20792
Ref: manual/usage id620959
Ref: 3120959
Ref: manual/usage syntax-checker-options20959
Ref: 3220959
Ref: manual/usage el variables flycheck-clang-definitions21218
Ref: 3321218
Ref: manual/usage el variables flycheck-clang-include-path21344
Ref: 3521344
Ref: manual/usage el variables flycheck-clang-includes21455
Ref: 3621455
Ref: manual/usage el variables flycheck-clang-language-standard21567
Ref: 3721567
Ref: manual/usage el variables flycheck-clang-ms-extensions21685
Ref: 3821685
Ref: manual/usage el variables flycheck-clang-no-rtti21815
Ref: 3921815
Ref: manual/usage el variables flycheck-clang-standard-library21924
Ref: 3a21924
Ref: manual/usage el variables flycheck-clang-warnings22047
Ref: 3b22047
Ref: manual/usage el variables flycheck-cppcheck-checks22163
Ref: 3c22163
Ref: manual/usage el variables flycheck-emacs-lisp-initialize-packages22278
Ref: 3e22278
Ref: manual/usage el variables flycheck-emacs-lisp-load-path22759
Ref: 4022759
Ref: manual/usage el variables flycheck-emacs-lisp-package-user-dir23181
Ref: 4123181
Ref: manual/usage el variables flycheck-eslint-rulesdir23322
Ref: 4223322
Ref: manual/usage el variables flycheck-flake8-maximum-complexity23471
Ref: 4423471
Ref: manual/usage el variables flycheck-flake8-maximum-line-length23657
Ref: 4623657
Ref: manual/usage el variables flycheck-ghc-no-user-package-database23856
Ref: 4723856
Ref: manual/usage el variables flycheck-ghc-package-databases24007
Ref: 4924007
Ref: manual/usage el variables flycheck-ghc-search-path24128
Ref: 4a24128
Ref: manual/usage el variables flycheck-phpcs-standard24269
Ref: 4b24269
Ref: manual/usage el variables flycheck-phpmd-rulesets24381
Ref: 4d24381
Ref: manual/usage el variables flycheck-rubocop-lint-only24487
Ref: 4f24487
Ref: manual/usage el variables flycheck-sass-compass24610
Ref: 5124610
Ref: manual/usage el variables flycheck-scss-compass24732
Ref: 5324732
Ref: manual/usage el variables flycheck-sphinx-warn-on-missing-references24854
Ref: 5524854
Node: Syntax checker configuration files24999
Ref: manual/usage id725131
Ref: 5725131
Ref: manual/usage syntax-checker-configuration-files25131
Ref: 5825131
Ref: manual/usage el variables flycheck-chktexrc25321
Ref: 5925321
Ref: manual/usage el variables flycheck-coffeelintrc25449
Ref: 5b25449
Ref: manual/usage el variables flycheck-eslintrc25588
Ref: 5d25588
Ref: manual/usage el variables flycheck-flake8rc25723
Ref: 5e25723
Ref: manual/usage el variables flycheck-gjslintrc25854
Ref: 5f25854
Ref: manual/usage el variables flycheck-jshintrc25991
Ref: 6125991
Ref: manual/usage el variables flycheck-pylintrc26126
Ref: 6326126
Ref: manual/usage el variables flycheck-rubocoprc26257
Ref: 6526257
Ref: manual/usage el variables flycheck-tidyrc26388
Ref: 6626388
Ref: manual/usage el variables flycheck-locate-config-file-functions26695
Ref: 6826695
Ref: Syntax checker configuration files-Footnote-128782
Node: Error reporting28828
Ref: manual/usage error-reporting28949
Ref: 928949
Ref: manual/usage id828949
Ref: 6928949
Ref: manual/usage el faces flycheck-error29330
Ref: 6c29330
Ref: manual/usage el faces flycheck-warning29360
Ref: 6d29360
Ref: manual/usage el faces flycheck-info29392
Ref: 6e29392
Ref: manual/usage el variables flycheck-highlighting-mode30021
Ref: 6b30021
Ref: manual/usage el faces flycheck-fringe-error30937
Ref: 6f30937
Ref: manual/usage el faces flycheck-fringe-warning30974
Ref: 7030974
Ref: manual/usage el faces flycheck-fringe-info31013
Ref: 7131013
Ref: manual/usage el variables flycheck-indication-mode31145
Ref: 6a31145
Ref: manual/usage el variables flycheck-process-error-functions31672
Ref: 7231672
Ref: manual/usage el variables flycheck-display-errors-delay32413
Ref: 7432413
Ref: manual/usage el variables flycheck-display-errors-function32670
Ref: 7532670
Ref: manual/usage el functions flycheck-display-error-messages32986
Ref: 7632986
Ref: manual/usage el functions flycheck-copy-messages-as-kill33618
Ref: 7733618
Ref: manual/usage el functions flycheck-google-messages33771
Ref: 7833771
Ref: manual/usage el variables flycheck-google-max-messages34124
Ref: 7934124
Ref: manual/usage el functions flycheck-list-errors34663
Ref: 7a34663
Ref: manual/usage el functions list-flycheck-errors34702
Ref: 7b34702
Ref: manual/usage el faces flycheck-error-list-highlight-at-point35331
Ref: 7c35331
Ref: manual/usage el faces flycheck-error-list-highlight35457
Ref: 7d35457
Ref: manual/usage el functions flycheck-clear35668
Ref: 7e35668
Ref: Error reporting-Footnote-135916
Ref: Error reporting-Footnote-235967
Ref: Error reporting-Footnote-336016
Ref: Error reporting-Footnote-436074
Node: Error navigation36108
Ref: manual/usage error-navigation36210
Ref: 7f36210
Ref: manual/usage id936210
Ref: 8036210
Ref: manual/usage el variables flycheck-standard-error-navigation36767
Ref: 8136767
Ref: manual/usage el functions flycheck-next-error37638
Ref: 8237638
Ref: manual/usage el functions flycheck-previous-error37920
Ref: 8337920
Ref: manual/usage el functions flycheck-first-error38198
Ref: 8438198
Node: Mode line38491
Ref: manual/usage id1038569
Ref: 8538569
Ref: manual/usage mode-line38569
Ref: 8638569
Node: Extending Flycheck39479
Ref: manual/extending doc39574
Ref: 8839574
Ref: manual/extending extending-flycheck39574
Ref: 8939574
Node: Defining new syntax checkers40092
Ref: manual/extending defining-new-syntax-checkers40217
Ref: b40217
Ref: manual/extending id140217
Ref: 8b40217
Ref: manual/extending el functions flycheck-define-checker40357
Ref: 8c40357
Ref: manual/extending flyc command41495
Ref: 8d41495
Ref: manual/extending flyc error-patterns50765
Ref: 9050765
Ref: manual/extending flyc error-parser53088
Ref: 9153088
Ref: manual/extending flyc modes54387
Ref: 8e54387
Ref: manual/extending flyc predicate54868
Ref: 8f54868
Ref: manual/extending flyc next-checkers55557
Ref: 9255557
Ref: manual/extending el functions flycheck-def-config-file-var56541
Ref: 9456541
Ref: manual/extending el functions flycheck-def-option-var57294
Ref: 9657294
Node: Registering new syntax checkers58039
Ref: manual/extending registering-new-syntax-checkers58185
Ref: 9b58185
Ref: manual/extending id258185
Ref: 9c58185
Node: Error levels59189
Ref: manual/extending id359320
Ref: 9d59320
Ref: manual/extending error-levels59320
Ref: 9e59320
Ref: manual/extending el functions flycheck-define-error-level59640
Ref: 9759640
Node: Error parsers60969
Ref: manual/extending error-parsers61083
Ref: 9961083
Ref: manual/extending id461083
Ref: 9f61083
Ref: manual/extending el functions flycheck-parse-with-patterns61394
Ref: 9a61394
Ref: manual/extending el functions flycheck-parse-checkstyle61576
Ref: a061576
Ref: Error parsers-Footnote-162295
Node: Option filters62338
Ref: manual/extending option-filters62465
Ref: 9562465
Ref: manual/extending id562465
Ref: a262465
Ref: manual/extending el functions flycheck-option-int62697
Ref: a362697
Ref: manual/extending el functions flycheck-option-comma-separated-list62853
Ref: a462853
Node: Extending syntax checkers63114
Ref: manual/extending id663236
Ref: a563236
Ref: manual/extending extending-syntax-checkers63236
Ref: a663236
Ref: manual/extending el functions flycheck-add-next-checker63354
Ref: a763354
Node: Examples63840
Ref: manual/extending examples63939
Ref: a863939
Node: Basic syntax checkers64115
Ref: manual/extending id764223
Ref: a964223
Ref: manual/extending basic-syntax-checkers64223
Ref: aa64223
Node: Syntax checkers with predicates67496
Ref: manual/extending syntax-checkers-with-predicates67652
Ref: ab67652
Node: Configuration files for syntax checkers69698
Ref: manual/extending configuration-files-for-syntax-checkers69857
Ref: ac69857
Node: Chaining syntax checkers72458
Ref: manual/extending chaining-syntax-checkers72577
Ref: ad72577
Node: Flycheck API73913
Ref: manual/api doc74026
Ref: ae74026
Ref: manual/api flycheck-api74026
Ref: af74026
Node: Error API74616
Ref: manual/api error-api74701
Ref: 7374701
Ref: manual/api id174701
Ref: b074701
Ref: manual/api el structs flycheck-error74879
Ref: 9874879
Ref: manual/api el functions flycheck-error-buffer75013
Ref: b175013
Ref: manual/api el functions flycheck-error-checker75316
Ref: b275316
Ref: manual/api el functions flycheck-error-filename75401
Ref: b375401
Ref: manual/api el functions flycheck-error-line75496
Ref: b475496
Ref: manual/api el functions flycheck-error-column75584
Ref: b575584
Ref: manual/api el functions flycheck-error-message75791
Ref: b675791
Ref: manual/api el functions flycheck-error-level75875
Ref: b775875
Ref: manual/api el functions flycheck-error-new-at76128
Ref: b876128
Ref: manual/api el functions flycheck-error-new77175
Ref: b977175
Ref: manual/api el functions flycheck-error-with-buffer77654
Ref: ba77654
Ref: manual/api el functions flycheck-error-line-region77911
Ref: bb77911
Ref: manual/api el functions flycheck-error-column-region78107
Ref: bc78107
Ref: manual/api el functions flycheck-error-sexp-region78400
Ref: bd78400
Ref: manual/api el functions flycheck-error-pos79377
Ref: be79377
Ref: manual/api el functions flycheck-error-format79742
Ref: bf79742
Ref: manual/api el variables flycheck-current-errors79949
Ref: 2279949
Ref: manual/api el functions flycheck-count-errors80113
Ref: c080113
Ref: manual/api el functions flycheck-has-errors-p80462
Ref: c180462
Node: Error parser API80788
Ref: manual/api error-parser-api80873
Ref: a180873
Ref: manual/api id280873
Ref: c280873
Ref: manual/api el functions flycheck-parse-xml-string80980
Ref: c380980
Node: Contribution guidelines81118
Ref: manual/contributing doc81220
Ref: c481220
Ref: manual/contributing contribution-guidelines81220
Ref: c581220
Ref: Contribution guidelines-Footnote-181605
Node: Reporting issues81657
Ref: manual/contributing id181761
Ref: c681761
Ref: manual/contributing reporting-issues81761
Ref: 8781761
Node: Contributing code82209
Ref: manual/contributing id282313
Ref: c782313
Ref: manual/contributing contributing-code82313
Ref: c882313
Node: General82599
Ref: manual/contributing general82681
Ref: c982681
Node: Code style82804
Ref: manual/contributing code-style82910
Ref: ca82910
Node: Commit messages83335
Ref: manual/contributing commit-messages83462
Ref: cb83462
Ref: Commit messages-Footnote-185252
Ref: Commit messages-Footnote-285330
Ref: Commit messages-Footnote-385374
Node: Contributing syntax checkers85414
Ref: manual/contributing contributing-syntax-checkers85544
Ref: 8a85544
Ref: manual/contributing id385544
Ref: cc85544
Node: Pull requests86047
Ref: manual/contributing id486153
Ref: cd86153
Ref: manual/contributing pull-requests86153
Ref: ce86153
Ref: Pull requests-Footnote-186659
Node: Credits86720
Ref: manual/credits credits86817
Ref: cf86817
Ref: manual/credits doc86817
Ref: d086817
Ref: manual/credits pull-request86817
Ref: d186817
Ref: Credits-Footnote-190180
Ref: Credits-Footnote-290217
Ref: Credits-Footnote-390252
Ref: Credits-Footnote-490295
Ref: Credits-Footnote-590329
Ref: Credits-Footnote-690362
Ref: Credits-Footnote-790395
Ref: Credits-Footnote-890430
Ref: Credits-Footnote-990464
Ref: Credits-Footnote-1090507
Ref: Credits-Footnote-1190548
Ref: Credits-Footnote-1290581
Ref: Credits-Footnote-1390623
Ref: Credits-Footnote-1490662
Ref: Credits-Footnote-1590711
Ref: Credits-Footnote-1690751
Ref: Credits-Footnote-1790787
Ref: Credits-Footnote-1890820
Ref: Credits-Footnote-1990860
Ref: Credits-Footnote-2090903
Ref: Credits-Footnote-2190942
Ref: Credits-Footnote-2290984
Ref: Credits-Footnote-2391020
Ref: Credits-Footnote-2491057
Ref: Credits-Footnote-2591119
Ref: Credits-Footnote-2691155
Ref: Credits-Footnote-2791187
Ref: Credits-Footnote-2891223
Ref: Credits-Footnote-2991280
Ref: Credits-Footnote-3091320
Ref: Credits-Footnote-3191355
Ref: Credits-Footnote-3291393
Node: Changes91462
Ref: manual/changes changes91566
Ref: d291566
Ref: manual/changes doc91566
Ref: d391566
Node: master unreleased92426
Ref: manual/changes master-unreleased92514
Ref: d492514
Ref: master unreleased-Footnote-194060
Ref: master unreleased-Footnote-294116
Ref: master unreleased-Footnote-394146
Ref: master unreleased-Footnote-494202
Ref: master unreleased-Footnote-594258
Ref: master unreleased-Footnote-694314
Ref: master unreleased-Footnote-794370
Ref: master unreleased-Footnote-894426
Ref: master unreleased-Footnote-994482
Node: 0 16 Jan 11 201494538
Ref: manual/changes sphinx94651
Ref: d594651
Ref: manual/changes jan-11-201494651
Ref: d694651
Ref: 0 16 Jan 11 2014-Footnote-197418
Ref: 0 16 Jan 11 2014-Footnote-297474
Ref: 0 16 Jan 11 2014-Footnote-397529
Ref: 0 16 Jan 11 2014-Footnote-497585
Ref: 0 16 Jan 11 2014-Footnote-597641
Ref: 0 16 Jan 11 2014-Footnote-697697
Ref: 0 16 Jan 11 2014-Footnote-797753
Ref: 0 16 Jan 11 2014-Footnote-897809
Ref: 0 16 Jan 11 2014-Footnote-997865
Ref: 0 16 Jan 11 2014-Footnote-1097921
Ref: 0 16 Jan 11 2014-Footnote-1197978
Ref: 0 16 Jan 11 2014-Footnote-1298035
Ref: 0 16 Jan 11 2014-Footnote-1398092
Ref: 0 16 Jan 11 2014-Footnote-1498149
Ref: 0 16 Jan 11 2014-Footnote-1598206
Ref: 0 16 Jan 11 2014-Footnote-1698263
Ref: 0 16 Jan 11 2014-Footnote-1798320
Ref: 0 16 Jan 11 2014-Footnote-1898377
Ref: 0 16 Jan 11 2014-Footnote-1998434
Ref: 0 16 Jan 11 2014-Footnote-2098491
Ref: 0 16 Jan 11 2014-Footnote-2198548
Ref: 0 16 Jan 11 2014-Footnote-2298605
Node: 0 15 Nov 15 201398662
Ref: manual/changes nov-15-201398776
Ref: d798776
Ref: manual/changes flycheck-hdevtools98776
Ref: d898776
Ref: 0 15 Nov 15 2013-Footnote-1102880
Ref: 0 15 Nov 15 2013-Footnote-2102936
Ref: 0 15 Nov 15 2013-Footnote-3102992
Ref: 0 15 Nov 15 2013-Footnote-4103048
Ref: 0 15 Nov 15 2013-Footnote-5103104
Ref: 0 15 Nov 15 2013-Footnote-6103160
Ref: 0 15 Nov 15 2013-Footnote-7103216
Ref: 0 15 Nov 15 2013-Footnote-8103257
Ref: 0 15 Nov 15 2013-Footnote-9103313
Ref: 0 15 Nov 15 2013-Footnote-10103369
Ref: 0 15 Nov 15 2013-Footnote-11103426
Ref: 0 15 Nov 15 2013-Footnote-12103483
Ref: 0 15 Nov 15 2013-Footnote-13103540
Ref: 0 15 Nov 15 2013-Footnote-14103597
Ref: 0 15 Nov 15 2013-Footnote-15103654
Ref: 0 15 Nov 15 2013-Footnote-16103711
Ref: 0 15 Nov 15 2013-Footnote-17103768
Ref: 0 15 Nov 15 2013-Footnote-18103825
Ref: 0 15 Nov 15 2013-Footnote-19103882
Ref: 0 15 Nov 15 2013-Footnote-20103939
Ref: 0 15 Nov 15 2013-Footnote-21103996
Ref: 0 15 Nov 15 2013-Footnote-22104053
Ref: 0 15 Nov 15 2013-Footnote-23104110
Ref: 0 15 Nov 15 2013-Footnote-24104167
Ref: 0 15 Nov 15 2013-Footnote-25104224
Ref: 0 15 Nov 15 2013-Footnote-26104281
Ref: 0 15 Nov 15 2013-Footnote-27104338
Ref: 0 15 Nov 15 2013-Footnote-28104395
Ref: 0 15 Nov 15 2013-Footnote-29104452
Ref: 0 15 Nov 15 2013-Footnote-30104509
Ref: 0 15 Nov 15 2013-Footnote-31104566
Node: 0 14 1 Aug 16 2013104623
Ref: manual/changes grizzl104737
Ref: d9104737
Ref: manual/changes aug-16-2013104737
Ref: da104737
Ref: 0 14 1 Aug 16 2013-Footnote-1104888
Node: 0 14 Aug 15 2013104944
Ref: manual/changes aug-15-2013105058
Ref: db105058
Ref: 0 14 Aug 15 2013-Footnote-1107956
Ref: 0 14 Aug 15 2013-Footnote-2108012
Ref: 0 14 Aug 15 2013-Footnote-3108068
Ref: 0 14 Aug 15 2013-Footnote-4108124
Ref: 0 14 Aug 15 2013-Footnote-5108180
Ref: 0 14 Aug 15 2013-Footnote-6108236
Ref: 0 14 Aug 15 2013-Footnote-7108292
Ref: 0 14 Aug 15 2013-Footnote-8108348
Ref: 0 14 Aug 15 2013-Footnote-9108404
Ref: 0 14 Aug 15 2013-Footnote-10108460
Ref: 0 14 Aug 15 2013-Footnote-11108517
Ref: 0 14 Aug 15 2013-Footnote-12108574
Ref: 0 14 Aug 15 2013-Footnote-13108631
Ref: 0 14 Aug 15 2013-Footnote-14108688
Ref: 0 14 Aug 15 2013-Footnote-15108745
Ref: 0 14 Aug 15 2013-Footnote-16108802
Ref: 0 14 Aug 15 2013-Footnote-17108859
Ref: 0 14 Aug 15 2013-Footnote-18108916
Ref: 0 14 Aug 15 2013-Footnote-19108973
Ref: 0 14 Aug 15 2013-Footnote-20109030
Ref: 0 14 Aug 15 2013-Footnote-21109087
Ref: 0 14 Aug 15 2013-Footnote-22109144
Node: 0 13 Jun 28 2013109201
Ref: manual/changes jun-28-2013109313
Ref: dc109313
Ref: 0 13 Jun 28 2013-Footnote-1111906
Ref: 0 13 Jun 28 2013-Footnote-2111962
Ref: 0 13 Jun 28 2013-Footnote-3112018
Ref: 0 13 Jun 28 2013-Footnote-4112074
Ref: 0 13 Jun 28 2013-Footnote-5112130
Ref: 0 13 Jun 28 2013-Footnote-6112186
Ref: 0 13 Jun 28 2013-Footnote-7112242
Node: 0 12 May 18 2013112298
Ref: manual/changes may-18-2013112410
Ref: dd112410
Ref: 0 12 May 18 2013-Footnote-1113221
Ref: 0 12 May 18 2013-Footnote-2113277
Ref: 0 12 May 18 2013-Footnote-3113333
Ref: 0 12 May 18 2013-Footnote-4113389
Node: 0 11 May 01 2013113445
Ref: manual/changes may-01-2013113557
Ref: de113557
Ref: 0 11 May 01 2013-Footnote-1114505
Ref: 0 11 May 01 2013-Footnote-2114561
Ref: 0 11 May 01 2013-Footnote-3114617
Ref: 0 11 May 01 2013-Footnote-4114673
Ref: 0 11 May 01 2013-Footnote-5114719
Node: 0 10 Apr 21 2013114775
Ref: manual/changes apr-21-2013114886
Ref: df114886
Ref: manual/changes projectile114886
Ref: e0114886
Ref: 0 10 Apr 21 2013-Footnote-1116509
Ref: 0 10 Apr 21 2013-Footnote-2116565
Ref: 0 10 Apr 21 2013-Footnote-3116621
Ref: 0 10 Apr 21 2013-Footnote-4116677
Ref: 0 10 Apr 21 2013-Footnote-5116733
Ref: 0 10 Apr 21 2013-Footnote-6116789
Ref: 0 10 Apr 21 2013-Footnote-7116847
Ref: 0 10 Apr 21 2013-Footnote-8116903
Ref: 0 10 Apr 21 2013-Footnote-9116958
Node: 0 9 Apr 13 2013117014
Ref: manual/changes apr-13-2013117123
Ref: e1117123
Ref: manual/changes google-this117123
Ref: e2117123
Ref: 0 9 Apr 13 2013-Footnote-1117501
Ref: 0 9 Apr 13 2013-Footnote-2117557
Node: 0 8 Apr 9 2013117613
Ref: manual/changes apr-9-2013117723
Ref: e3117723
Ref: 0 8 Apr 9 2013-Footnote-1118823
Ref: 0 8 Apr 9 2013-Footnote-2118878
Ref: 0 8 Apr 9 2013-Footnote-3118934
Ref: 0 8 Apr 9 2013-Footnote-4118989
Ref: 0 8 Apr 9 2013-Footnote-5119044
Ref: 0 8 Apr 9 2013-Footnote-6119099
Ref: 0 8 Apr 9 2013-Footnote-7119154
Ref: 0 8 Apr 9 2013-Footnote-8119209
Node: 0 7 1 Feb 23 2013119265
Ref: manual/changes feb-23-2013119375
Ref: e4119375
Ref: 0 7 1 Feb 23 2013-Footnote-1119992
Ref: 0 7 1 Feb 23 2013-Footnote-2120047
Node: 0 7 Feb 14 2013120102
Ref: manual/changes feb-14-2013120215
Ref: e5120215
Ref: 0 7 Feb 14 2013-Footnote-1120954
Ref: 0 7 Feb 14 2013-Footnote-2121009
Ref: 0 7 Feb 14 2013-Footnote-3121064
Ref: 0 7 Feb 14 2013-Footnote-4121119
Ref: 0 7 Feb 14 2013-Footnote-5121174
Node: 0 6 1 Jan 30 2013121229
Ref: manual/changes jan-30-2013121340
Ref: e6121340
Node: 0 6 Jan 29 2013121424
Ref: manual/changes jan-29-2013121535
Ref: e7121535
Ref: 0 6 Jan 29 2013-Footnote-1123486
Ref: 0 6 Jan 29 2013-Footnote-2123541
Ref: 0 6 Jan 29 2013-Footnote-3123596
Ref: 0 6 Jan 29 2013-Footnote-4123651
Ref: 0 6 Jan 29 2013-Footnote-5123706
Ref: 0 6 Jan 29 2013-Footnote-6123761
Ref: 0 6 Jan 29 2013-Footnote-7123816
Ref: 0 6 Jan 29 2013-Footnote-8123871
Ref: 0 6 Jan 29 2013-Footnote-9123926
Ref: 0 6 Jan 29 2013-Footnote-10123981
Ref: 0 6 Jan 29 2013-Footnote-11124037
Ref: 0 6 Jan 29 2013-Footnote-12124093
Ref: 0 6 Jan 29 2013-Footnote-13124149
Ref: 0 6 Jan 29 2013-Footnote-14124205
Ref: 0 6 Jan 29 2013-Footnote-15124261
Ref: 0 6 Jan 29 2013-Footnote-16124317
Ref: 0 6 Jan 29 2013-Footnote-17124373
Ref: 0 6 Jan 29 2013-Footnote-18124429
Ref: 0 6 Jan 29 2013-Footnote-19124485
Node: 0 5 Dec 28 2012124541
Ref: manual/changes dec-28-2012124650
Ref: e8124650
Ref: 0 5 Dec 28 2012-Footnote-1125430
Ref: 0 5 Dec 28 2012-Footnote-2125485
Ref: 0 5 Dec 28 2012-Footnote-3125540
Ref: 0 5 Dec 28 2012-Footnote-4125595
Ref: 0 5 Dec 28 2012-Footnote-5125650
Ref: 0 5 Dec 28 2012-Footnote-6125705
Ref: 0 5 Dec 28 2012-Footnote-7125760
Ref: 0 5 Dec 28 2012-Footnote-8125815
Ref: 0 5 Dec 28 2012-Footnote-9125870
Node: 0 4 Nov 21 2012125925
Ref: manual/changes nov-21-2012126034
Ref: e9126034
Ref: manual/changes flymake-cursor126034
Ref: ea126034
Ref: 0 4 Nov 21 2012-Footnote-1126473
Ref: 0 4 Nov 21 2012-Footnote-2126527
Ref: 0 4 Nov 21 2012-Footnote-3126581
Ref: 0 4 Nov 21 2012-Footnote-4126635
Ref: 0 4 Nov 21 2012-Footnote-5126689
Ref: 0 4 Nov 21 2012-Footnote-6126744
Ref: 0 4 Nov 21 2012-Footnote-7126799
Node: 0 3 Nov 21 2012126854
Ref: manual/changes id1126963
Ref: eb126963
Ref: 0 3 Nov 21 2012-Footnote-1127134
Node: 0 2 Oct 25 2012127188
Ref: manual/changes oct-25-2012127297
Ref: ec127297
Ref: 0 2 Oct 25 2012-Footnote-1127498
Node: 0 1 Oct 11 2012127552
Ref: manual/changes oct-11-2012127637
Ref: ed127637
Node: GNU Free Documentation License127876
Ref: manual/fdl doc127992
Ref: 1127992
Ref: manual/fdl gnu-free-documentation-license127992
Ref: ee127992
Node: Supported languages152878
Ref: manual/languages doc152995
Ref: 7152995
Ref: manual/languages supported-languages152995
Ref: ef152995
Node: AsciiDoc154002
Ref: manual/languages asciidoc154081
Ref: f0154081
Ref: manual/languages flyc asciidoc154169
Ref: f1154169
Node: Bash154223
Ref: manual/languages bash154316
Ref: f2154316
Ref: manual/languages flyc bash154395
Ref: f3154395
Node: C/C++154445
Ref: manual/languages c-c154538
Ref: f4154538
Ref: manual/languages flyc c/c++-clang154559
Ref: 34154559
Ref: manual/languages flyc c/c++-cppcheck154680
Ref: 3d154680
Node: CFEngine154814
Ref: manual/languages cfengine154907
Ref: f5154907
Ref: manual/languages flyc cfengine154981
Ref: f6154981
Node: Chef155035
Ref: manual/languages chef155135
Ref: f7155135
Ref: manual/languages flyc chef-foodcritic155209
Ref: f8155209
Node: Coffeescript155346
Ref: manual/languages coffeescript155441
Ref: f9155441
Ref: manual/languages flyc coffee155527
Ref: fa155527
Ref: manual/languages flyc coffee-coffeelint155579
Ref: 5c155579
Node: CSS155710
Ref: manual/languages css155802
Ref: fb155802
Ref: manual/languages flyc css-csslint155819
Ref: fc155819
Node: D155957
Ref: manual/languages d156043
Ref: fd156043
Ref: manual/languages flyc d-dmd156100
Ref: fe156100
Node: Elixir156151
Ref: manual/languages elixir156244
Ref: ff156244
Ref: manual/languages flyc elixir156316
Ref: 93156316
Node: Emacs Lisp156368
Ref: manual/languages emacs-lisp156466
Ref: 100156466
Ref: manual/languages flyc emacs-lisp156671
Ref: 3f156671
Ref: manual/languages flyc emacs-lisp-checkdoc156727
Ref: 101156727
Node: Erlang156975
Ref: manual/languages erlang157072
Ref: 102157072
Ref: manual/languages flyc erlang157146
Ref: 103157146
Node: ERuby157198
Ref: manual/languages eruby157287
Ref: 104157287
Ref: manual/languages flyc eruby-erubis157310
Ref: 105157310
Node: Go157461
Ref: manual/languages go157548
Ref: 106157548
Ref: manual/languages flyc go-gofmt157610
Ref: 107157610
Ref: manual/languages flyc go-build157664
Ref: 108157664
Ref: manual/languages flyc go-test157718
Ref: 109157718
Node: Haml157771
Ref: manual/languages haml157863
Ref: 10a157863
Ref: manual/languages flyc haml157928
Ref: 10b157928
Node: Handlebars157978
Ref: manual/languages handlebars158075
Ref: 10c158075
Ref: manual/languages flyc handlebars158159
Ref: 10d158159
Node: Haskell158215
Ref: manual/languages haskell158312
Ref: 10e158312
Ref: manual/languages flyc haskell-ghc158389
Ref: 48158389
Ref: manual/languages flyc haskell-hlint158515
Ref: 10f158515
Node: HTML158651
Ref: manual/languages html158748
Ref: 110158748
Ref: manual/languages flyc html-tidy158769
Ref: 67158769
Node: Javascript158992
Ref: manual/languages javascript159086
Ref: 111159086
Ref: manual/languages flyc javascript-jshint159119
Ref: 62159119
Ref: manual/languages flyc javascript-eslint159246
Ref: 43159246
Ref: manual/languages flyc javascript-gjslint159383
Ref: 60159383
Node: JSON159563
Ref: manual/languages json159657
Ref: 112159657
Ref: manual/languages flyc json-jsonlint159678
Ref: 113159678
Node: LESS159812
Ref: manual/languages less159899
Ref: 114159899
Ref: manual/languages flyc less159920
Ref: 115159920
Node: Lua160035
Ref: manual/languages lua160122
Ref: 116160122
Ref: manual/languages flyc lua160141
Ref: 117160141
Node: Make160251
Ref: manual/languages make160338
Ref: 118160338
Ref: manual/languages flyc make-gmake160359
Ref: 119160359
Node: Perl160490
Ref: manual/languages perl160577
Ref: 11a160577
Ref: manual/languages flyc perl160644
Ref: 11b160644
Node: PHP160694
Ref: manual/languages php160783
Ref: 11c160783
Ref: manual/languages flyc php160802
Ref: 11d160802
Ref: manual/languages flyc php-phpmd160970
Ref: 4e160970
Ref: manual/languages flyc php-phpcs161113
Ref: 4c161113
Node: Puppet161282
Ref: manual/languages puppet161373
Ref: 11e161373
Ref: manual/languages flyc puppet-parser161448
Ref: 11f161448
Ref: manual/languages flyc puppet-lint161507
Ref: 120161507
Node: Python161633
Ref: manual/languages python161727
Ref: 121161727
Ref: manual/languages flyc python-flake8161752
Ref: 45161752
Ref: manual/languages flyc python-pylint161883
Ref: 64161883
Node: Racket162006
Ref: manual/languages racket162110
Ref: 122162110
Ref: manual/languages flyc racket162185
Ref: 123162185
Node: ReStructuredText162237
Ref: manual/languages restructuredtext162339
Ref: 124162339
Ref: manual/languages flyc rst162529
Ref: 125162529
Ref: manual/languages flyc rst-sphinx162578
Ref: 56162578
Node: Ruby162684
Ref: manual/languages ruby162784
Ref: 126162784
Ref: manual/languages flyc ruby-rubocop162858
Ref: 50162858
Ref: manual/languages flyc ruby-rubylint162992
Ref: 127162992
Ref: manual/languages flyc ruby163135
Ref: 128163135
Ref: manual/languages flyc ruby-jruby163185
Ref: 129163185
Node: Rust163300
Ref: manual/languages rust163388
Ref: 12a163388
Ref: manual/languages flyc rust163461
Ref: 12b163461
Node: Sass163511
Ref: manual/languages sass163600
Ref: 12c163600
Ref: manual/languages flyc sass163669
Ref: 52163669
Node: Scala163719
Ref: manual/languages scala163808
Ref: 12d163808
Ref: manual/languages flyc scala163884
Ref: 12e163884
Node: Scss163935
Ref: manual/languages scss164031
Ref: 12f164031
Ref: manual/languages flyc scss164052
Ref: 54164052
Node: Shell POSIX164165
Ref: manual/languages shell-posix164260
Ref: 130164260
Ref: manual/languages flyc sh-dash164433
Ref: 131164433
Ref: manual/languages flyc sh-bash164585
Ref: 132164585
Node: Slim164713
Ref: manual/languages slim164813
Ref: 133164813
Ref: manual/languages flyc slim164882
Ref: 134164882
Node: TeX/LaTeX164932
Ref: manual/languages tex-latex165028
Ref: 135165028
Ref: manual/languages flyc tex-chktex165177
Ref: 5a165177
Ref: manual/languages flyc tex-lacheck165304
Ref: 136165304
Node: Texinfo165434
Ref: manual/languages texinfo165533
Ref: 137165533
Ref: manual/languages flyc texinfo165560
Ref: 138165560
Node: Verilog165678
Ref: manual/languages verilog165771
Ref: 139165771
Ref: manual/languages flyc verilog-verilator165798
Ref: 13a165798
Node: XML165941
Ref: manual/languages xml166031
Ref: 13b166031
Ref: manual/languages flyc xml-xmlstarlet166050
Ref: 13c166050
Ref: manual/languages flyc xml-xmllint166183
Ref: 13d166183
Node: YAML166324
Ref: manual/languages yaml166410
Ref: 13e166410
Ref: manual/languages flyc yaml-jsyaml166431
Ref: 13f166431
Ref: manual/languages flyc yaml-ruby166563
Ref: 140166563
Node: Zsh166685
Ref: manual/languages zsh166759
Ref: 141166759
Ref: manual/languages flyc zsh166824
Ref: 142166824
Node: Glossary166873
Ref: manual/glossary glossary166965
Ref: 143166965
Ref: manual/glossary doc166965
Ref: 144166965
Ref: manual/glossary term-syntax-checker166990
Ref: 27166990
Ref: manual/glossary term-registered-syntax-checker167099
Ref: 28167099
Ref: manual/glossary term-disabled-syntax-checker167255
Ref: 145167255
Ref: manual/glossary term-enabled-syntax-checker167435
Ref: 29167435
Ref: manual/glossary term-suitable-syntax-checker167560
Ref: 19167560
Node: Index167855

End Tag Table


Local Variables:
coding: utf-8
End:
