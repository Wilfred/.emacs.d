This is /tmp/flycheck28286UWu/flycheck-20140704.511/flycheck.info,
produced by makeinfo version 4.13 from
/home/melpa/melpa/working/flycheck/doc/flycheck.texi.

Generated by Sphinx 1.2.2.
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* flycheck: (flycheck.info). On the fly syntax checking for GNU Emacs
END-INFO-DIR-ENTRY

This manual is for Flycheck version 0.20-cvs.

Copyright (C) 2014, Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     documentation under the terms of the GNU Free Documentation
     License, Version 1.3 or any later version published by the Free
     Software Foundation; with no Invariant Sections, no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License.".

     Alternatively, you may copy, distribute and/or modify this
     documentation under the terms of the Creative Commons
     Attribution-ShareAlike 4.0 International Public License.  A copy
     of the license can be obtained at
     `https://creativecommons.org/licenses/by-sa/4.0/legalcode'.


File: flycheck.info,  Node: Top,  Next: Introduction,  Up: (dir)

Flycheck
********

This manual is for Flycheck version 0.20-cvs.

Copyright (C) 2014, Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     documentation under the terms of the GNU Free Documentation
     License, Version 1.3 or any later version published by the Free
     Software Foundation; with no Invariant Sections, no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License.".

     Alternatively, you may copy, distribute and/or modify this
     documentation under the terms of the Creative Commons
     Attribution-ShareAlike 4.0 International Public License.  A copy
     of the license can be obtained at
     `https://creativecommons.org/licenses/by-sa/4.0/legalcode'.

* Menu:

* Introduction::
* Flycheck versus Flymake::
* Installation::
* Quickstart::
* Usage::
* Supported languages::
* Glossary::
* Extending Flycheck::
* Flycheck API::
* Flycheck news::
* Changes::
* Contribution guidelines::
* Writing documentation::
* Maintenance tasks::
* Credits::
* GNU General Public License::
* GNU Free Documentation License::
* Index::

 --- The Detailed Node Listing ---

Introduction

* Features::
* 3rd party extensions::

Flycheck versus Flymake

* Overview::
* Detailed review::

Detailed review

* Relation to Emacs::
* Enabling syntax checking::
* Syntax checkers::
* Customization of syntax checkers::
* Syntax checker selection::
* Error levels::
* Error parsing::
* Error message display::
* Error list::
* Resource consumption::
* Unit tests::

Syntax checkers

* Built-in syntax checkers::
* Definition of new syntax checkers::

Customization of syntax checkers

* Executables of syntax checkers::

Syntax checker selection

* Custom predicates::
* Manual selection::
* Multiple syntax checkers per buffer::

Resource consumption

* Syntax checking::
* Checking for changes::

Installation

* Prerequisites::
* Package installation::
* Setup::

Prerequisites

* Emacs::
* Syntax checking tools::

Package installation

* Manual::
* Cask::

Quickstart

* Enable Flycheck::
* Install some syntax checker tools::
* Check syntax in a buffer::
* Navigate and list errors::
* Further reading::

Usage

* Flycheck Mode::
* Syntax checking: Syntax checking<2>.
* Syntax checker selection: Syntax checker selection<2>.
* Syntax checker configuration::
* Error reporting::
* Error navigation::
* Mode line::

Syntax checker configuration

* Syntax checker executables::
* Syntax checker options::
* Syntax checker configuration files::

Supported languages

* AsciiDoc::
* C/C++::
* CFEngine::
* Chef::
* Coffeescript::
* CSS::
* D::
* Elixir::
* Emacs Lisp::
* Erlang::
* ERuby::
* Go::
* Haml::
* Handlebars::
* Haskell::
* HTML::
* Javascript::
* JSON::
* LESS::
* Lua::
* Make::
* Perl::
* PHP::
* Puppet::
* Python::
* Racket::
* ReStructuredText::
* Ruby::
* Rust::
* Sass::
* Scala::
* Scss::
* Shell script languages::
* Slim::
* TeX/LaTeX::
* Texinfo::
* Verilog::
* XML::
* YAML::

Extending Flycheck

* Defining new syntax checkers::
* Registering new syntax checkers::
* Error levels: Error levels<2>.
* Error parsers::
* Extending syntax checkers::
* Examples::

Examples

* Basic syntax checkers::
* Syntax checkers with predicates::
* Configuration files for syntax checkers::
* Chaining syntax checkers::

Flycheck API

* Error API::
* Builtin error parsers::
* Error parser API::
* Error filters::
* Syntax checker API::
* Builtin option filters::
* Builtin syntax checker predicates::
* Utilities::

Flycheck news

* Jun 12, 2014 — Flycheck 0.19 released: Jun 12 2014 — Flycheck 0 19 released.
* Mar 24, 2014 — Flycheck 0.18 released: Mar 24 2014 — Flycheck 0 18 released.
* Feb 1, 2014 — Flycheck 0.17 released: Feb 1 2014 — Flycheck 0 17 released.
* Jan 12, 2014 — Flycheck 0.16 released: Jan 12 2014 — Flycheck 0 16 released.
* Nov 15, 2013 – Flycheck 0.15 released: Nov 15 2013 – Flycheck 0 15 released.

Jun 12, 2014 — Flycheck 0.19 released

* Breaking changes::
* Languages::
* New features::
* Bug fixes::
* Misc changes::
* Get it::

Languages

* C/C++: C/C++<2>.
* Emacs Lisp: Emacs Lisp<2>.
* Go: Go<2>.
* Haskell: Haskell<2>.
* Rust: Rust<2>.

Mar 24, 2014 — Flycheck 0.18 released

* Breaking changes: Breaking changes<2>.
* Syntax checkers: Syntax checkers<2>.
* Bug fixes: Bug fixes<2>.
* Get it: Get it<2>.

Feb 1, 2014 — Flycheck 0.17 released

* Breaking changes: Breaking changes<3>.
* New online manual::
* Syntax checkers: Syntax checkers<3>.
* Extending syntax checkers: Extending syntax checkers<2>.
* Other bug fixes and improvements::

Jan 12, 2014 — Flycheck 0.16 released

* Breaking changes: Breaking changes<4>.
* Syntax checkers: Syntax checkers<4>.
* New features: New features<2>.
* Improved error list::
* Get it: Get it<3>.

Syntax checkers

* New languages and checkers::
* Better Haskell support::
* Miscellaneous new options::

New features

* Syntax checker executables: Syntax checker executables<2>.
* Disable syntax checkers easily::

Nov 15, 2013 – Flycheck 0.15 released

* Breaking changes: Breaking changes<5>.
* New syntax checkers::
* New error list::
* C/C++ support::
* New info level messages::
* Custom error levels::
* Other improvements::
* Get it: Get it<4>.

Changes

* master (in development): master in development.
* 0.19 (Jun 12, 2014): 0 19 Jun 12 2014.
* 0.18 (Mar 24, 2014): 0 18 Mar 24 2014.
* 0.17 (Feb 1, 2014): 0 17 Feb 1 2014.
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014.
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013.
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013.
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013.
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013.
* 0.12 (May 18, 2013): 0 12 May 18 2013.
* 0.11 (May 01, 2013): 0 11 May 01 2013.
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013.
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013.
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013.
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013.
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013.
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013.
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013.
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012.
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012.
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012.
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012.
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012.

Contribution guidelines

* Reporting issues::
* Contributing code::

Contributing code

* General::
* Code style::
* Commit messages::
* Contributing syntax checkers::
* Pull requests::

Writing documentation

* Build environment setup::
* Building HTML and Texinfo::
* Verifying references::

Maintenance tasks

* Rebuilding the Texinfo::
* Rasterized logo files::


File: flycheck.info,  Node: Introduction,  Next: Flycheck versus Flymake,  Prev: Top,  Up: Top

1 Introduction
**************

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs
24, intended as replacement for the older Flymake extension which is
part of GNU Emacs.

It uses various syntax checking and linting tools to automatically
check the contents of buffers while you type, and reports warnings and
errors directly in the buffer, or in an optional error list.

* Menu:

* Features::
* 3rd party extensions::


File: flycheck.info,  Node: Features,  Next: 3rd party extensions,  Up: Introduction

1.1 Features
============

   - 39 languages with 67 syntax checkers, see *note Supported
     languages: 5.

   - *note Fully automatic, fail-safe, on-the-fly syntax checking in
     background: 6.

   - *note Nice error indication and highlighting: 7.

   - Optional error list popup

   - *note Many customization options: 8.

   - *note A comprehensive manual: 9.

   - *note A simple API to define new syntax checkers: a.

   - A “doesn't get in your way” guarantee


File: flycheck.info,  Node: 3rd party extensions,  Prev: Features,  Up: Introduction

1.2 3rd party extensions
========================

The following extensions provide additional cool features for Flycheck:

   - flycheck-cask(1) makes Flycheck use Cask packages in Cask(2)
     projects.

   - flycheck-color-mode-line(3) colors the mode line according to the
     Flycheck status.

   - flycheck-d-unittest(4) adds a Flycheck checker to run unit tests
     for D programs on the fly.

   - flycheck-google-cpplint(5) adds a syntax checker for Google's C++
     style checker.

   - flycheck-haskell(6) improves Haskell support in Flycheck, by
     configuring Flycheck according to the current Cabal project, and
     using Cabal sandbox packages.

   - flycheck-hdevtools(7) adds a Flycheck syntax checker for Haskell
     based on hdevtools(8).

   - flycheck-mercury(9) adds a Flycheck syntax checker for the Mercury
     Language(10).

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck-cask

(2) https://github.com/cask/cask

(3) https://github.com/flycheck/flycheck-color-mode-line

(4) https://github.com/flycheck/flycheck-d-unittest

(5) https://github.com/flycheck/flycheck-google-cpplint

(6) https://github.com/flycheck/flycheck-haskell

(7) https://github.com/flycheck/flycheck-hdevtools

(8) https://github.com/bitc/hdevtools/

(9) https://github.com/flycheck/flycheck-mercury

(10) http://mercurylang.org/


File: flycheck.info,  Node: Flycheck versus Flymake,  Next: Installation,  Prev: Introduction,  Up: Top

2 Flycheck versus Flymake
*************************

This article provides information about Flycheck compares to the
_built-in_ Flymake mode.  It does not consider the improved Flymake
fork(1) or third-party extensions such as flymake-easy(2) or
flymake-cursor(3), but references them at appropriate places.

We aim for this comparison to be neutral and complete, but do not
provide any guarantee for completeness or correctness of the following
information.  Moreover, we consider Flycheck superior to Flymake in all
aspects.  As such, you may find this page biased towards Flycheck.
Please excuse this as well as any factual mistake or lack of
information.  Please suggest improvements.

* Menu:

* Overview::
* Detailed review::

---------- Footnotes ----------

(1) https://github.com/illusori/emacs-flymake

(2) https://github.com/purcell/flymake-easy

(3) http://www.emacswiki.org/emacs/flymake-cursor.el


File: flycheck.info,  Node: Overview,  Next: Detailed review,  Up: Flycheck versus Flymake

2.1 Overview
============

This table intends to give an overview about the differences and
similarities between Flycheck and the default install of Flymake. It is
not a direct comparision to third-party extensions such as
flymake-easy, flymake-cursor, or forks of Flymake. For a more
comprehensive look compared to those extensions, please read the
details in the main article and the footnotes.

Please do _not_ only use this table to make your personal judgment, but
also read the detailed review in the following sections, at least with
regards to the features you are interested in.

                                       Flycheck                  Flymake
Supported Emacs versions               24+                       22+
Part of Emacs                          no (1)                    yes
Automatically enabled in supported     yes                       no
languages                                                        
Checks after                           save, newline, change     save, newline, change
Checks in background                   yes                       yes
Automatic syntax checker selection     By major mode and custom  By file name patterns (2)
                                       predicates                
Manual syntax checker selection        yes                       *no*
Multiple syntax checkers per buffer    yes                       *no* (3)
Supported languages                    > 30                      ~5 (4)
Checking remote files via Tramp        no                        partly?
Definition of new syntax checkers      Via a single declarative  By a function definition
                                       macro                     and various variables (5)
Customization of syntax checkers       yes                       no
Error levels                           Errors, warnings,         Errors and warnings (6)
                                       information, and custom   
                                       levels                    
Error parsing                          Regular expressions, or   Regular expressions
                                       custom error parsers      
                                       (e.g. XML, JSON, etc.)    
Multiline error messages               yes                       *no* (7)
Error highlighting in the buffer       yes                       yes
Fringe icons for errors                yes                       yes
Error messages display                 Via tooltip and echo      In tooltip (8)
                                       area, fully customizable  
List all errors in the buffer          yes                       *no*
Resource consumption                   low                       high (9)
Unit tests                             all syntax checkers, and  *none?*
                                       large parts of the        
                                       underlying processing     

---------- Footnotes ----------

(1) Flycheck is *unlikely to ever become part of Emacs*.

(2) The 3rd party library flymake-easy
(https://github.com/purcell/flymake-easy) allows to use syntax checkers
per major mode.

(3) Various 3rd party packages thus use custom shell scripts to call
multiple syntax checking tools at once.

(4) However, the Flymake page (http://www.emacswiki.org/emacs/FlyMake)
in the EmacsWiki provides recipes for many other languages, although of
varying quality.  Furthermore, the popular ELPA archive MELPA provides
many packages which add more languages to Flymake.  There is also a
Flymake fork (https://github.com/illusori/emacs-flymake), which
supports more languages out of the box, among other fixes and
improvements.

(5) flymake-easy (https://github.com/purcell/flymake-easy) provides a
function to define a new syntax checker, which sets all required
variables at once.

(6) The Flymake fork (https://github.com/illusori/emacs-flymake) adds
support for info messages.

(7) flymake-easy (https://github.com/purcell/flymake-easy) _overrides_
internal functions of Flymake to add support for multiline error
messages.

(8) The 3rd party library flymake-cursor
(http://www.emacswiki.org/emacs/flymake-cursor.el) shows Flymake error
messages at point in the echo area.

(9) A third-party Flymake fork
(https://github.com/illusori/emacs-flymake) mostly fixes the
performance and resource consumption issues in Flymake.


File: flycheck.info,  Node: Detailed review,  Prev: Overview,  Up: Flycheck versus Flymake

2.2 Detailed review
===================

* Menu:

* Relation to Emacs::
* Enabling syntax checking::
* Syntax checkers::
* Customization of syntax checkers::
* Syntax checker selection::
* Error levels::
* Error parsing::
* Error message display::
* Error list::
* Resource consumption::
* Unit tests::


File: flycheck.info,  Node: Relation to Emacs,  Next: Enabling syntax checking,  Up: Detailed review

2.2.1 Relation to Emacs
-----------------------

*Flymake* is part of GNU Emacs since GNU Emacs 22.  As such,
contributions to Flymake are subject to the FSF policies on GNU
projects.  Most notably, contributors are required to assign their
copyright to the FSF by signing a contributor agreement.

*Flycheck* is not part of GNU Emacs, and is *unlikely to ever be*.
However, it is free software as well, and publicly developed on the
well-known code hosting platform Github(1).  Contributing to Flycheck
does not require a copyright assignments.

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck


File: flycheck.info,  Node: Enabling syntax checking,  Next: Syntax checkers,  Prev: Relation to Emacs,  Up: Detailed review

2.2.2 Enabling syntax checking
------------------------------

*Flymake* is not enabled automatically for supported languages.  It
must be be enabled for each mode individually and *carefully*, because
it does not deal well with unavailable syntax checker tools.  In a GUI
frame, it signals errors in GUI dialogs.  In a TTY frame, it does not
signal any error at all, but instead silently hangs.  The same occurs,
when a syntax checker tool becomes unavailable after Flymake Mode is
enabled, for instance, because the underlying tool was uninstalled.

The third-party library flymake-easy(1) provides an alternate way to
enable Flymake Mode, which gracefully handles unavailable syntax
checkers.  It does not check whether the tool still exists before a
syntax check, though, and thus does still exposes above behavior, when
a tool becomes unavailable after the mode was enabled.

*Flycheck* provides a global mode (see *note global-flycheck-mode:
15.), which enables syntax checking in every supported language.  If a
syntax checking tool is not available, Flycheck fails gracefully, does
not enable syntax checking, and just indicates the failure in the mode
line.

---------- Footnotes ----------

(1) https://github.com/purcell/flymake-easy


File: flycheck.info,  Node: Syntax checkers,  Next: Customization of syntax checkers,  Prev: Enabling syntax checking,  Up: Detailed review

2.2.3 Syntax checkers
---------------------

* Menu:

* Built-in syntax checkers::
* Definition of new syntax checkers::


File: flycheck.info,  Node: Built-in syntax checkers,  Next: Definition of new syntax checkers,  Up: Syntax checkers

2.2.3.1 Built-in syntax checkers
................................

*Flymake* supports Java, Makefiles, Perl, PHP, TeX/LaTeX and XML.
Notably, it does _not_ support Emacs Lisp.  A third-party Flymake
fork(1) supports more languages, though.  Furthermore there are many
recipes for other languages on the Flymake page(2) in the EmacsWiki,
and many extension packages for other languages in the popular ELPA
archive MELPA(3).

*Flycheck* provides support for 39 languages (see *note Supported
languages: 5.) with 67 syntax checkers, most of them contributed by the
community.  Notably, Flycheck does _not_ support Java and Makefiles.

---------- Footnotes ----------

(1) https://github.com/illusori/emacs-flymake

(2) http://www.emacswiki.org/emacs/FlyMake

(3) http://melpa.milkbox.net/


File: flycheck.info,  Node: Definition of new syntax checkers,  Prev: Built-in syntax checkers,  Up: Syntax checkers

2.2.3.2 Definition of new syntax checkers
.........................................

*Flymake* does not provide a single function to define a new syntax
checker.  Instead, one has to define an “init” function, which returns
the command, and add this function to
`flymake-allowed-file-name-masks'.  Additionally, one has to add the
error patterns to `flymake-err-line-patterns'.  As such, defining a
syntax checker is difficult for users who are not familiar with Emacs
Lisp.  flymake-easy(1) provides an easier way to define new syntax
checkers, though.

*Flycheck* provides a single function *note flycheck-define-checker:
19. to define a new syntax checker.  This function uses a declarative
syntax, which is easy to understand even for users unfamiliar with
Emacs Lisp.  In fact, many syntax checkers in Flycheck were contributed
by the community(2).

For example, the Perl checker in Flymake is defined as follows.

    (defun flymake-perl-init ()
      (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                           'flymake-create-temp-inplace))
             (local-file  (file-relative-name
                           temp-file
                           (file-name-directory buffer-file-name))))
        (list "perl" (list "-wc " local-file))))

    (defcustom flymake-allowed-file-name-masks
      '(;; …
        ("\\.p[ml]\\'" flymake-perl-init)
        ;; …
        ))

    (defvar flymake-err-line-patterns ; regexp file-idx line-idx col-idx (optional) text-idx(optional), match-end to end of string is error text
      (append
       '(;; …
         ;; perl
         ("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)
         ;; …
         )
       ;; …
      ))

Whereas Flycheck's definition of the same checker looks like this:

    (flycheck-define-checker perl
      "A Perl syntax checker using the Perl interpreter.

    See URL `http://www.perl.org'."
      :command ("perl" "-w" "-c" source)
      :error-patterns
      ((error line-start (minimal-match (message))
              " at " (file-name) " line " line
              (or "." (and ", " (zero-or-more not-newline))) line-end))
      :modes (perl-mode cperl-mode))

---------- Footnotes ----------

(1) https://github.com/purcell/flymake-easy

(2)
https://github.com/flycheck/flycheck/issues?labels=checker&milestone=&page=1&state=closed


File: flycheck.info,  Node: Customization of syntax checkers,  Next: Syntax checker selection,  Prev: Syntax checkers,  Up: Detailed review

2.2.4 Customization of syntax checkers
--------------------------------------

*Flymake* does not provide built-in means to customize syntax checkers.
Instead, when defining a new syntax checker, the user needs to declare
customization variables explicitly and explicitly check their value in
the init function.

*Flycheck* provides built-in functions to add customization variables to
syntax checkers and splice the value of these variables into the
argument list of a syntax checking tool.  Many syntax checkers in
Flycheck provide customization variables.  For instance, you can
customize the enabled warnings for C with *note
flycheck-clang-warnings: 1b.  Flycheck also tries to automatically find
configuration files for syntax checkers.

* Menu:

* Executables of syntax checkers::


File: flycheck.info,  Node: Executables of syntax checkers,  Up: Customization of syntax checkers

2.2.4.1 Executables of syntax checkers
......................................

*Flymake* does not provide built-in means to change the executable of a
syntax checker.

*Flycheck* implicitly defines a variable to set the path of a syntax
checker tool for each defined syntax checker, and provides the
interactive command *note flycheck-set-checker-executable: 1d. to
change the executable used in a buffer.


File: flycheck.info,  Node: Syntax checker selection,  Next: Error levels,  Prev: Customization of syntax checkers,  Up: Detailed review

2.2.5 Syntax checker selection
------------------------------

*Flymake* selects syntax checkers based on file name patterns in
`flymake-allowed-file-name-masks'.  Effectively, this duplicates the
existing logic Emacs uses to choose the right major mode, but lacks its
flexibility and power.  For instance, Flymake cannot pick a syntax
checker based on the shebang of a file.

*Flycheck* uses the major mode to select a syntax checker.  This reuses
the existing sophisticated logic Emcas uses to choose and configure
major modes.  Flycheck can easily select a Python syntax checker for a
Python script without file extension, but with proper shebang, simply
because Emacs correctly chooses Python Mode for such a file.

* Menu:

* Custom predicates::
* Manual selection::
* Multiple syntax checkers per buffer::


File: flycheck.info,  Node: Custom predicates,  Next: Manual selection,  Up: Syntax checker selection

2.2.5.1 Custom predicates
.........................

*Flymake* does not allow for custom predicates to implement more
complex logic for syntax checker selection.  For instance, Flymake
cannot use different syntax checkers for buffer depending on the value
of a local variable.

However, flymake-easy(1) patches Flymake to allow for custom syntax
checkers per buffer.  This does not happen automatically though.  The
user still needs to explicitly register a syntax checker in a major
mode hook.

*Flycheck* supports custom predicate function.  It uses these to
implement the shell script syntax checkers, for instance.  Emacs uses a
single major mode for various shell script types (e.g. Bash, Zsh, POSIX
Shell, etc.), so Flycheck additionally uses a custom predicate to look
at the value of the variable `sh-shell' in Sh Mode buffers, to
determine which shell to use for syntax checking.

---------- Footnotes ----------

(1) https://github.com/purcell/flymake-easy


File: flycheck.info,  Node: Manual selection,  Next: Multiple syntax checkers per buffer,  Prev: Custom predicates,  Up: Syntax checker selection

2.2.5.2 Manual selection
........................

*Flymake* does not provide means to manually select a specific syntax
checker, either interactively, or via local variables.

*Flycheck* provides the local variable *note flycheck-checker: 21. to
explicitly use a specific syntax checker for a buffer, and the command
*note flycheck-select-checker: 22. to set this variable interactively.


File: flycheck.info,  Node: Multiple syntax checkers per buffer,  Prev: Manual selection,  Up: Syntax checker selection

2.2.5.3 Multiple syntax checkers per buffer
...........................................

*Flymake* can only use a single syntax checker per buffer.
Effectively, the user can only use a single tool to check a buffer, for
instance either PHP Mess Detector or PHP CheckStyle.  Third party
extensions to Flycheck work around this limitation by supplying custom
shell scripts to call multiple syntax checking tools at once.

*Flycheck* can easily apply multiple syntax checkers per buffer.  For
instance, Flycheck will check PHP files with PHP CLI first to find
syntax errors, then with PHP MessDetector to additionally find
idiomatic and semantic errors, and eventually with PHP CheckStyle to
find stylistic errors.  The user will see all errors reported by all of
these utilities in the buffer.


File: flycheck.info,  Node: Error levels,  Next: Error parsing,  Prev: Syntax checker selection,  Up: Detailed review

2.2.6 Error levels
------------------

*Flymake* supports error and warning messages.  The pattern of warning
messages is _hard-coded_ in Emacs 24.3, and only became customizable in
upcoming Emacs 24.4.  The patterns to parse messages are kept separate
from the actual syntax checker.

The third-party Flymake fork(1) also supports info messages, and makes
the pattern of warning messages customizable as well.

*Flycheck* supports error, warning and info messages.  The patterns to
parse messages of different levels are part of the syntax checker
definition, and thus specific to each syntax checker.  Flycheck allows
to define new error levels for use in custom syntax checkers with *note
flycheck-define-error-level: 25.

---------- Footnotes ----------

(1) https://github.com/illusori/emacs-flymake


File: flycheck.info,  Node: Error parsing,  Next: Error message display,  Prev: Error levels,  Up: Detailed review

2.2.7 Error parsing
-------------------

*Flymake* parses the output of syntax checker tools with regular
expressions only.  As it splits the output by lines regardless of the
regular expressions, it does not support error messages spanning
multiple lines (such as returned by the Emacs Lisp byte compiler or by
the Glasgow Haskell Compiler).

flymake-easy(1) overrides internal Flymake functions to support
multiline error messages.

*Flycheck* can use regular expressions as well as custom parsing
functions.  By means of such functions, it can parse JSON, XML or other
structured output formats.  Flycheck includes some ready-to-use parsing
functions for well-known output formats, such as Checkstyle XML.  By
parsing structured output format, Flycheck can handle arbitrarily
complex error messages.  Also, with regular expressions it uses the
error patterns to split the output into tokens, and thus handles
multiline messages just as well.

---------- Footnotes ----------

(1) https://github.com/purcell/flymake-easy


File: flycheck.info,  Node: Error message display,  Next: Error list,  Prev: Error parsing,  Up: Detailed review

2.2.8 Error message display
---------------------------

In GUI frames, *Flymake* shows error messages in a tool tip, if the user
hovers the mouse over an error location.  It does not provide means to
show error messages in a TTY frame, or with the keyboard only.

The third-party library flymake-cursor(1) shows Flymake error messages
at point in the echo area, by overriding internal Flymake functions.

*Flycheck* shows error message tool tips as well, but also displays
error messages in the echo area, if the point is at an error location.
This feature is fully customizable via *note
flycheck-display-errors-function: 28.

---------- Footnotes ----------

(1) http://www.emacswiki.org/emacs/flymake-cursor.el


File: flycheck.info,  Node: Error list,  Next: Resource consumption,  Prev: Error message display,  Up: Detailed review

2.2.9 Error list
----------------

*Flymake* does not provide means to list all errors in the current
buffer.

*Flycheck* can list all errors in the current buffer in a separate
window.  This error list is automatically updated after each syntax
check, and follows the focus.


File: flycheck.info,  Node: Resource consumption,  Next: Unit tests,  Prev: Error list,  Up: Detailed review

2.2.10 Resource consumption
---------------------------

* Menu:

* Syntax checking::
* Checking for changes::


File: flycheck.info,  Node: Syntax checking,  Next: Checking for changes,  Up: Resource consumption

2.2.10.1 Syntax checking
........................

*Flymake* starts a syntax check after every change, regardless of
whether the buffer is visible in a window or not.  It does not limit
the number of concurrent syntax checks.  As such, Flymake starts many
concurrent syntax checks, if many buffers are changed at the same time
(e.g. after a VCS revert), which is known to freeze Emacs temporarily.

The third-party Flymake fork(1) limits the number of concurrent syntax
checks.  It does not take care to check visible buffers first, though.

*Flycheck* does not conduct syntax checks in buffers which are not
visible in any window.  Instead it defers syntax checks in such buffers
until after the buffer is visible again.  Hence, Flycheck does only
start as many concurrent syntax checks as there are visible windows in
the current Emacs session.

---------- Footnotes ----------

(1) https://github.com/illusori/emacs-flymake


File: flycheck.info,  Node: Checking for changes,  Prev: Syntax checking,  Up: Resource consumption

2.2.10.2 Checking for changes
.............................

*Flymake* uses a _separate_ timer (in `flymake-timer') to periodically
check for changes in each buffer.  These timers run even if the
corresponding buffers do not change.  This is known to cause
considerable CPU load with many open buffers.

The third-party Flymake fork(1) uses a single global timer to check for
changes.  This greatly reduces the CPU load, but still consumes some
marginal CPU, even if Emacs is idle and not in use currently.

*Flycheck* does not use timers at all to check for changes.  Instead it
registers a handler for Emacs' built-in `after-change-functions' hook,
which is run after changes to the buffer.  This handler is only invoked
when the buffer actually changed, and starts a one-shot timer to delay
the syntax check until the editing stopped for a short time, to save
resources and avoid checking half-finished editing.

---------- Footnotes ----------

(1) https://github.com/illusori/emacs-flymake


File: flycheck.info,  Node: Unit tests,  Prev: Resource consumption,  Up: Detailed review

2.2.11 Unit tests
-----------------

*Flymake* does not have a test suite at all.

*Flycheck* has unit tests for all built-in syntax checkers, and for
large parts of the underlying machinery and API.  Contributed syntax
checkers are required to have test cases.  The tests are continuously
run on Travis CI(1).

---------- Footnotes ----------

(1) https://travis-ci.org/flycheck/flycheck


File: flycheck.info,  Node: Installation,  Next: Quickstart,  Prev: Flycheck versus Flymake,  Up: Top

3 Installation
**************

* Menu:

* Prerequisites::
* Package installation::
* Setup::


File: flycheck.info,  Node: Prerequisites,  Next: Package installation,  Up: Installation

3.1 Prerequisites
=================

* Menu:

* Emacs::
* Syntax checking tools::


File: flycheck.info,  Node: Emacs,  Next: Syntax checking tools,  Up: Prerequisites

3.1.1 Emacs
-----------

Flycheck supports Emacs 24 on Unix systems.  It is tested with Emacs
24.3, and Emacs snapshot builds.  It should work with GNU Emacs 24.1
and 24.2 as well, but it is not tested against these versions.  If it
does not work with these versions, please report an issue.

     Warning: Flycheck does not support Windows, but tries to be
     compatible with it.  You may try to use Flycheck on Windows.  It
     should mostly work, but expect problems and issues.  Pull requests
     which improve Windows compatibility are welcome.

     Flycheck also does not support GNU Emacs 23 and other flavors of
     Emacs (e.g. XEmacs, Aquamacs, etc.).  Don't try, it will _not_
     work.


File: flycheck.info,  Node: Syntax checking tools,  Prev: Emacs,  Up: Prerequisites

3.1.2 Syntax checking tools
---------------------------

For almost all supported languages, Flycheck also needs additional
*external* checker programs.  See *note Supported languages: 35. for a
list of supported languages and the corresponding checkers programs,
and use *note flycheck-describe-checker: 36. to get help about specific
checkers inside Emacs.

For instance, for Python you need either Flake8(1) or Pylint(2), which
can be installed with `pip install flake8' and `pip install pylint'
respectively.

Generally you can install the required external checker programs with
the standard package manager of the corresponding programming languages
(e.g. Rubygems for Ruby, NPM for Javascript).  Many checker programs
are also available in the package repositories of popular Linux
distributions, or as Formula for the OS X package manager Homebrew(3).

---------- Footnotes ----------

(1) https://flake8.readthedocs.org/

(2) http://www.pylint.org/

(3) http://brew.sh/


File: flycheck.info,  Node: Package installation,  Next: Setup,  Prev: Prerequisites,  Up: Installation

3.2 Package installation
========================

* Menu:

* Manual::
* Cask::


File: flycheck.info,  Node: Manual,  Next: Cask,  Up: Package installation

3.2.1 Manual
------------

Install the ELPA package from MELPA(1) or MELPA Stable(2) using `M-x
package-install RET flycheck'.

     Warning: Flycheck is available from Marmalade(3) as well, but this
     repository is *not recommended*.  Due to frequent outages the
     package is not guaranteed to be updated regularly.

Neither of these repositories is included in GNU Emacs by default.  You
need to enable these repositories explicitly.  For instance, to add the
MELPA repository, add the following code to `init.el':

    (require 'package)
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.milkbox.net/packages/") t)
    (package-initialize)

---------- Footnotes ----------

(1) http://melpa.milkbox.net

(2) http://melpa-stable.milkbox.net

(3) http://marmalade-repo.org/


File: flycheck.info,  Node: Cask,  Prev: Manual,  Up: Package installation

3.2.2 Cask
----------

If you use *note Cask: 3a, just add the following to your `Cask' file,
and run `cask install':

    (source gnu)
    (source melpa)

    (depends-on "flycheck")


File: flycheck.info,  Node: Setup,  Prev: Package installation,  Up: Installation

3.3 Setup
=========

Use `M-x flycheck-mode' to enable Flycheck in the current buffer, and
`M-x global-flycheck-mode' to enable Flycheck for the entire current
Emacs session.

To permanently enable Flycheck, add the following to your `init.el':

    (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Quickstart,  Next: Usage,  Prev: Installation,  Up: Top

4 Quickstart
************

* Menu:

* Enable Flycheck::
* Install some syntax checker tools::
* Check syntax in a buffer::
* Navigate and list errors::
* Further reading::


File: flycheck.info,  Node: Enable Flycheck,  Next: Install some syntax checker tools,  Up: Quickstart

4.1 Enable Flycheck
===================

Enable Flycheck globally by adding the following to your `init.el', and
restart Emacs:

    (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Install some syntax checker tools,  Next: Check syntax in a buffer,  Prev: Enable Flycheck,  Up: Quickstart

4.2 Install some syntax checker tools
=====================================

Install some syntax checking tools for the programming or markup
language you are using.  Take a look at the *note list of supported
languages: 5. to check what languages and tools are supported.

For Python:

    $ pip install --user pylint

Or for Ruby:

    $ gem install rubocop ruby-lint

Or for Haskell:

    $ brew install haskell-platform
    $ cabal install hlint

The *note language list: 5. also lists the available options for each
syntax checker.  Take a look at these to tune the syntax checkers to
your needs, and read *note how to use these options: 41.


File: flycheck.info,  Node: Check syntax in a buffer,  Next: Navigate and list errors,  Prev: Install some syntax checker tools,  Up: Quickstart

4.3 Check syntax in a buffer
============================

Flycheck will now check syntax using these tools, when you visit a
buffer in any of these languages.  Syntax checking happens
*automatically* when you save the buffer or make any changes.  Flycheck
highlights errors and warnings in the buffer, indicates them in the
fringe, and reports their numbers in the mode line.

You can also manually check a buffer with `C-c ! c' (*note
flycheck-buffer: 43.).


File: flycheck.info,  Node: Navigate and list errors,  Next: Further reading,  Prev: Check syntax in a buffer,  Up: Quickstart

4.4 Navigate and list errors
============================

Use `C-c ! n' (*note flycheck-next-error: 45.) and `C-c ! p' (*note
flycheck-previous-error: 46.) to navigate between error locations.  If
you keep the point at an error location, Flycheck will show the error
message in the echo area after a short delay.  You can also hover error
locations with the mouse and see the error message in a tooltip.

To get an overview of all errors and warnings in the current buffer,
type `C-c ! l' (*note flycheck-list-errors: 47.) to pop up a list of
all errors in your current buffer.  The error list updates
automatically when you fix errors or introduce new ones, or when you
switch to another buffer.


File: flycheck.info,  Node: Further reading,  Prev: Navigate and list errors,  Up: Quickstart

4.5 Further reading
===================

   - *note Usage: 49. describes commands and options in detail.

   - *note Supported languages: 35. has a list of all supported
     languages, and the corresponding syntax checker tools and their
     options.


File: flycheck.info,  Node: Usage,  Next: Supported languages,  Prev: Quickstart,  Up: Top

5 Usage
*******

* Menu:

* Flycheck Mode::
* Syntax checking: Syntax checking<2>.
* Syntax checker selection: Syntax checker selection<2>.
* Syntax checker configuration::
* Error reporting::
* Error navigation::
* Mode line::


File: flycheck.info,  Node: Flycheck Mode,  Next: Syntax checking<2>,  Up: Usage

5.1 Flycheck Mode
=================

Syntax checking is done in the Flycheck minor mode:

 -- Command: M-x flycheck-mode
     Toggle Flycheck Mode for the current buffer.

 -- User Option: flycheck-mode
     Whether Flycheck Mode is enabled in the current buffer.

 -- Command: M-x global-flycheck-mode
     Toggle Flycheck Mode for *all* live buffers, and for new buffers.

     With Global Flycheck Mode, Flycheck Mode is automatically enabled
     in all buffers, for which a *note suitable syntax checker: 4f.
     exists and is enabled.

          Note: Flycheck Mode will *not* be enabled in buffers for
          remote or encrypted files.  The former is flaky and might be
          very slow, and the latter might leak confidential data to
          temporary directories.

          You can still explicitly enable Flycheck Mode in such buffers
          with *note flycheck-mode: 4d.  This is *not* recommended
          though.

 -- User Option: global-flycheck-mode
     Whether Flycheck Mode is enabled globally.

If you like Flycheck Mode, you may want to enable it permanently,
either by customizing *note global-flycheck-mode: 50, or by adding the
following code to your `init.el':

    (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Syntax checking<2>,  Next: Syntax checker selection<2>,  Prev: Flycheck Mode,  Up: Usage

5.2 Syntax checking
===================

By default, *note Flycheck Mode: 4c. checks syntax automatically when

   - the mode is enabled,

   - the file is saved,

   - new lines are inserted,

   - or some short time after the last change to the buffer.

However, you can customize automatic syntax checking with *note
flycheck-check-syntax-automatically: 52.:

 -- User Option: flycheck-check-syntax-automatically
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `symbolp'.

     When Flycheck should check syntax automatically.

     This variable is a list of events that may trigger syntax checks.
     The following events are known:

     ``save''
          Check syntax immediately after the buffer was saved.

     ``idle-change''
          Check syntax a short time (see *note `flycheck-idle-change-delay': 53.)
          after the last change to the buffer.

     ``new-line''
          Check syntax immediately after a new line was inserted into
          the buffer.

     ``mode-enabled''
          Check syntax immediately when *note `flycheck-mode': 4d. is enabled.

     Flycheck performs a syntax checks only on evens, which are
     contained in this list.  For instance, if the value of this
     variable is `(mode-enabled save)', Flycheck will only check if
     the mode is enabled or the buffer was saved, but never after
     changes to the buffer contents.

     If nil, never check syntax automatically.  In this case, use
     *note `flycheck-buffer': 43. to start a syntax check manually.

     This user option was introduced, or its default value was changed,
     in version 0.12 of the flycheck package.


 -- User Option: flycheck-idle-change-delay
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `numberp'.

     How many seconds to wait before checking syntax automatically.

     After the buffer was changed, Flycheck will wait as many seconds
     as the value of this variable before starting a syntax check.  If
     the buffer is modified during this time, Flycheck will wait
     again.

     This variable has no effect, if ``idle-change'' is not contained in
     *note `flycheck-check-syntax-automatically': 52.

     This user option was introduced, or its default value was changed,
     in version 0.13 of the flycheck package.


Regardless of automatic syntax checking you can also check the buffer
manually:

 -- Command: C-c ! c
 -- Command: M-x flycheck-buffer
     Check syntax in the current buffer.

Each syntax check conducts the following steps:

  1. Run hooks in *note flycheck-before-syntax-check-hook: 54.

  2. Clear error information from previous syntax checks.

  3. Select a *note suitable syntax checker: 4f.  See *note Syntax
     checker selection: 55, for more information on how syntax checkers
     are selected.

  4. Copy the contents of the buffer to be checked to a temporary file.

  5. Run the syntax checker.

  6. Parse the output of the tool, and report all errors and warnings.
     See *note Error reporting: 7, for more information.

  7. If the buffer can be checked with another syntax checker, continue
     from step 4, but with the next syntax checker.  This is called
     *note chaining: 56. of syntax checkers.

  8. Run hooks in *note flycheck-after-syntax-check-hook: 57.

 -- Hook: flycheck-after-syntax-check-hook
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to run after each syntax check.

     This hook is run after a syntax check was finished.

     At this point, *all* chained checkers were run, and all errors
     were parsed, highlighted and reported.  The variable
     *note `flycheck-current-errors': 58. contains all errors from all syntax
     checkers run during the syntax check, so you can apply any error
     analysis functions.

     Note that this hook does *not* run after each individual syntax
     checker in the syntax checker chain, but only after the *last
     checker*.

     This variable is a normal hook.  See Info node *note Hooks: (elisp)Hooks.

     See *note Error reporting: 7, for more information about error
     reporting.

 -- Hook: flycheck-before-syntax-check-hook
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to run before each syntax check.

     This hook is run right before a syntax check starts.

     Error information from the previous syntax check is *not*
     cleared before this hook runs.

     Note that this hook does *not* run before each individual syntax
     checker in the syntax checker chain, but only before the *first
     checker*.

     This variable is a normal hook.  See Info node *note Hooks: (elisp)Hooks.

There is also a hook run whenever a syntax check fails:

 -- Hook: flycheck-syntax-check-failed-hook
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to run if a syntax check failed.

     This hook is run whenever an error occurs during Flycheck's
     internal processing.  No information about the error is given to
     this hook.

     You should use this hook to conduct additional cleanup actions
     when Flycheck failed.

     This variable is a normal hook.  See Info node *note Hooks: (elisp)Hooks.

During syntax checks, Flycheck generates some temporary files for
syntax checker input and output.   Use *note flycheck-temp-prefix: 5a.
to change the prefix of these temporary files:

 -- User Option: flycheck-temp-prefix
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Prefix for temporary files created by Flycheck.

     This user option was introduced, or its default value was changed,
     in version 0.19 of the flycheck package.



File: flycheck.info,  Node: Syntax checker selection<2>,  Next: Syntax checker configuration,  Prev: Syntax checking<2>,  Up: Usage

5.3 Syntax checker selection
============================

By default Flycheck selects a *note suitable syntax checker: 4f.
automatically from *note flycheck-checkers: 5c, with respect to *note
flycheck-disabled-checkers: 5d.:

 -- User Option: flycheck-checkers
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Syntax checkers available for automatic selection.

     A list of Flycheck syntax checkers to choose from when syntax
     checking a buffer.  Flycheck will automatically select a suitable
     syntax checker from this list, unless *note `flycheck-checker': 21. is set,
     either directly or with *note `flycheck-select-checker': 22.

     You should not need to change this variable normally.  In order
     to disable syntax checkers, please use
     *note `flycheck-disabled-checkers': 5d.  This variable is intended for 3rd
     party extensions to tell Flycheck about new syntax checkers.

     Syntax checkers in this list must be defined with
     *note `flycheck-define-checker': 19.

     An item in this list is a *note registered syntax checker: 5e.

 -- User Option: flycheck-disabled-checkers
          Variable properties: Automatically becomes buffer-local when
          set.  This variable is safe as a file local variable if its
          value satisfies the predicate *note flycheck-symbol-list-p:
          5f.

     Syntax checkers excluded from automatic selection.

     A list of Flycheck syntax checkers to exclude from automatic
     selection.  Flycheck will never automatically select a syntax
     checker in this list, regardless of the value of
     *note `flycheck-checkers': 5c.

     However, syntax checkers in this list are still available for
     manual selection with *note `flycheck-select-checker': 22.

     Use this variable to disable syntax checkers, instead of removing
     the syntax checkers from *note `flycheck-checkers': 5c.  You may also use
     this option as a file or directory local variable to disable
     specific checkers in individual files and directories
     respectively.

     This user option was introduced, or its default value was changed,
     in version 0.16 of the flycheck package.


A syntax checker in *note flycheck-checkers: 5c. and *not* in *note
flycheck-disabled-checkers: 5d. is an *note enabled syntax checker: 60.

Flycheck uses the first enabled and suitable syntax checker for the
current buffer.  See `Languages and syntax checkers' for a list of all
available syntax checkers.

If no *note suitable syntax checker: 4f. is found, the syntax check is
_silently_ omitted.  _No_ error is signalled.  Only a special indicator
in the mode line informs about the omitted syntax check.  See `Mode
line' for details.

You can manually select a specific syntax checker for the current
buffer, too:

 -- Command: C-c ! s
 -- Command: M-x flycheck-select-checker
     Select the syntax checker for the current buffer by setting *note
     flycheck-checker: 21, and run a syntax check with the new syntax
     checker.

     Prompt for a syntax checker and set *note flycheck-checker: 21.

     Any *note syntax checker: 61. can be selected with this command,
     regardless of whether it is enabled.

 -- Command: C-u C-c ! s
 -- Command: C-u M-x flycheck-select-checker
     Deselect the current syntax checker, and run a syntax check with an
     automatically selected syntax checker.

     Set *note flycheck-checker: 21. to `nil'.

 -- Function: flycheck-select-checker checker
     Select CHECKER for the current buffer.

     CHECKER is a syntax checker symbol (see *note `flycheck-checkers': 5c.) or
     nil.  In the former case, use CHECKER for the current buffer,
     otherwise deselect the current syntax checker (if any) and use
     automatic checker selection via *note `flycheck-checkers': 5c.

     If called interactively prompt for CHECKER.  With prefix arg
     deselect the current syntax checker and enable automatic
     selection again.

     Set *note `flycheck-checker': 21. to CHECKER and automatically start a new
     syntax check if the syntax checker changed.

     CHECKER will be used, even if it is not contained in
     *note `flycheck-checkers': 5c, or if it is disabled via
     *note `flycheck-disabled-checkers': 5d.

 -- Variable: flycheck-checker
          Variable properties: Automatically becomes buffer-local when
          set.  This variable is safe as a file local variable if its
          value satisfies the predicate *note
          flycheck-registered-checker-p: 62.

     Syntax checker to use for the current buffer.

     If unset or nil, automatically select a suitable syntax checker
     from *note `flycheck-checkers': 5c. on every syntax check.

     If set to a syntax checker only use this syntax checker and never
     select one from *note `flycheck-checkers': 5c. automatically.  The syntax
     checker is used regardless of whether it is contained in
     *note `flycheck-checkers': 5c. or *note `flycheck-disabled-checkers': 5d.  If the
     syntax checker is unusable in the current buffer an error is
     signaled.

     A syntax checker assigned to this variable must be defined with
     *note `flycheck-define-checker': 19.

     Use the command *note `flycheck-select-checker': 22. to select a syntax
     checker for the current buffer, or set this variable as file
     local variable to always use a specific syntax checker for a
     file.  See Info Node *note Specifying File Variables: (emacs)Specifying File Variables. for more
     information about file variables.

You can change the completion system used by *note
flycheck-select-checker: 22.:

 -- User Option: flycheck-completion-system
     The completion system to use.

     ``ido''
          Use IDO.

          IDO is a built-in alternative completion system, without
          good flex matching and a powerful UI.  You may want to
          install flx-ido (see URL `https://github.com/lewang/flx'(1)) to
          improve the flex matching in IDO.

     ``grizzl''
          Use Grizzl.

          Grizzl is an alternative completion system with powerful
          flex matching, but a very limited UI.  See URL
          `https://github.com/d11wtq/grizzl'(2).

     nil
          Use the standard unfancy ``completing-read''.

          ``completing-read'' has a very simple and primitive UI, and
          does not offer flex matching.  This is the default setting,
          though, to match Emacs' defaults.  With this system, you may
          want enable option ``icomplete-mode'' to improve the display
          of completion candidates at least.

     This user option was introduced, or its default value was changed,
     in version 0.17 of the flycheck package.


Each syntax checker provides documentation with information about the
executable the syntax checker uses, in which buffers it will be used
for syntax checks, and whether it can be configured.  See
`Configuration', for more information about syntax checker
configuration.

 -- Command: C-c ! ?
 -- Command: M-x flycheck-describe-checker
     Show the documentation of a syntax checker.

---------- Footnotes ----------

(1) https://github.com/lewang/flx

(2) https://github.com/d11wtq/grizzl


File: flycheck.info,  Node: Syntax checker configuration,  Next: Error reporting,  Prev: Syntax checker selection<2>,  Up: Usage

5.4 Syntax checker configuration
================================

* Menu:

* Syntax checker executables::
* Syntax checker options::
* Syntax checker configuration files::


File: flycheck.info,  Node: Syntax checker executables,  Next: Syntax checker options,  Up: Syntax checker configuration

5.4.1 Syntax checker executables
--------------------------------

For each syntax checker, there is a buffer-local, customizable variable
`flycheck-CHECKER-executable', where CHECKER is the name of the syntax
checker.

The value of this variable is either nil, or a string.  In the former
case, Flycheck uses the default executable from the syntax checker
definition when executing the syntax checker.  In the latter case, it
uses the value of the variable as executable.

Use these variables to override the executable from the definition per
buffer.  For instance, you could use a different Emacs version with the
`emacs-lisp' or `emacs-lisp-checkdoc'.

You can either set these variables directly in your `init.el', or change
them interactively:

 -- Command: C-c ! e
 -- Command: M-x flycheck-set-checker-executable
     Set the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and an executable file, and set the
     executable variable of the syntax checker.

 -- Command: C-u C-c ! e
 -- Command: C-u M-x flycheck-set-checker-executable
     Reset the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and reset its executable to the
     default.


File: flycheck.info,  Node: Syntax checker options,  Next: Syntax checker configuration files,  Prev: Syntax checker executables,  Up: Syntax checker configuration

5.4.2 Syntax checker options
----------------------------

Some syntax checkers can be configured via options.  See *note
Supported languages: 35. for a complete list of options for each syntax
checkers.

All options are customizable via `M-x customize-group RET
flycheck-options', and automatically buffer-local to easily set them in
hooks.

Options are mainly intended to be used by *note extensions: b, and via
File or Directory Local variables.  See *note File Variables:
(emacs)File Variables. and *note Directory Variables: (emacs)Directory
Variables.  respectively.


File: flycheck.info,  Node: Syntax checker configuration files,  Prev: Syntax checker options,  Up: Syntax checker configuration

5.4.3 Syntax checker configuration files
----------------------------------------

Some syntax checkers also read configuration files, denoted by
associated _configuration file variables_.  See *note Supported
languages: 35. of these variables.

All options are customizable via `M-x customize-group RET
flycheck-config-files', and automatically buffer-local to easily set
them in hooks.  You may also set them via File or Directory Local
variables.  See *note File Variables: (emacs)File Variables. and *note
Directory Variables: (emacs)Directory Variables.  respectively.

When set to a string, Flycheck tries to locate the configuration file
using the functions in *note flycheck-locate-config-file-functions: 6a.
and passes the name of the file to the syntax checker:

 -- User Option: flycheck-locate-config-file-functions
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to locate syntax checker configuration files.

     Each function in this hook must accept two arguments: The value
     of the configuration file variable, and the syntax checker
     symbol.  It must return either a string with an absolute path to
     the configuration file, or nil, if it cannot locate the
     configuration file.

     The functions in this hook are called in order of appearance, until a
     function returns non-nil.  The configuration file returned by that
     function is then given to the syntax checker if it exists.

     This variable is an abnormal hook.  See Info
     node *note Hooks: (elisp)Hooks.

With the default value of this variable, configuration files are
located by the following algorithm:

  1. If the configuration file variable contains a path a directory
     separator, expand the path against the buffer's default directory
     and use the resulting path as configuration file.

  2. If Projectile(1) is available and the current buffer is part of a
     project project, search the configuration file in the root
     directory of the project.

  3. If the buffer has a file name, search the buffer's directory and
     any ancestors thereof for the configuration file.

  4. Eventually attempt to locate the configuration file in the user's
     home directory.

If any of these steps succeeds, the subsequent steps are not executed.

---------- Footnotes ----------

(1) https://github.com/bbatsov/projectile


File: flycheck.info,  Node: Error reporting,  Next: Error navigation,  Prev: Syntax checker configuration,  Up: Usage

5.5 Error reporting
===================

Errors and warnings from a syntax checker are

   - reported in the mode line or in a popup buffer, depending on the
     length of the error messages,

   - indicated according to *note flycheck-indication-mode: 6c,

   - and highlighted in the buffer with the corresponding faces,
     according to *note flycheck-highlighting-mode: 6d.

 -- Face: flycheck-error
 -- Face: flycheck-warning
 -- Face: flycheck-info
     The faces to use to highlight errors, warnings and info messages
     respectively.

          Note: The default faces provided by GNU Emacs are ill-suited
          to highlight errors because these are relatively pale and do
          not specify a background color or underline.  Hence
          highlights are easily overlook and even *invisible* for white
          space.

     For best error highlighting customize these faces, or choose a
     color theme that has reasonable Flycheck faces.  For instance, the
     Solarized(1) and Zenburn(2) themes are known to have good Flycheck
     faces.

 -- User Option: flycheck-highlighting-mode
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `symbolp'.

     The highlighting mode for Flycheck errors and warnings.

     The highlighting mode controls how Flycheck highlights errors in
     buffers.  The following modes are known:

     ``columns''
          Highlight the error column.  If the error does not have a column,
          highlight the whole line.

     ``symbols''
          Highlight the symbol at the error column, if there is any,
          otherwise behave like ``columns''.  This is the default.

     ``sexps''
          Highlight the expression at the error column, if there is
          any, otherwise behave like ``columns''.  Note that this mode
          can be *very* slow in some major modes.

     ``lines''
          Highlight the whole line.

     nil
          Do not highlight errors at all.  However, errors will still
          be reported in the mode line and in error message popups,
          and indicated according to *note `flycheck-indication-mode': 6c.

     This user option was introduced, or its default value was changed,
     in version 0.14 of the flycheck package.


 -- Face: flycheck-fringe-error
 -- Face: flycheck-fringe-warning
 -- Face: flycheck-fringe-info
     The faces of fringe indicators for errors, warnings and info
     messages respectively.

 -- User Option: flycheck-indication-mode
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `symbolp'.

     The indication mode for Flycheck errors and warnings.

     This variable controls how Flycheck indicates errors in buffers.
     May either be ``left-fringe'', ``right-fringe'', or nil.

     If set to ``left-fringe'' or ``right-fringe'', indicate errors and
     warnings via icons in the left and right fringe respectively.

     If set to nil, do not indicate errors and warnings, but just
     highlight them according to *note `flycheck-highlighting-mode': 6d.

You can also completely customize error processing by hooking into
Flycheck:

 -- Hook: flycheck-process-error-functions
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to process errors.

     Each function in this hook must accept a single argument: A
     Flycheck error to process.

     All functions in this hook are called in order of appearance,
     until a function returns non-nil.  Thus, a function in this hook
     may return nil, to allow for further processing of the error, or
     any non-nil value, to indicate that the error was fully processed
     and inhibit any further processing.

     The functions are called for each newly parsed error immediately
     after the corresponding syntax checker finished.  At this stage,
     the overlays from the previous syntax checks are still present,
     and there may be further syntax checkers in the chain.

     This variable is an abnormal hook.  See Info
     node *note Hooks: (elisp)Hooks.

See also
........

     *note Error API: 75.

     This hook was introduced, or its default value was changed, in
version 0.13 of the flycheck package.


If you hover a highlighted error with the mouse, a tooltip with the
top-most error message will be shown.

Flycheck also displays errors under point after a short delay:

 -- User Option: flycheck-display-errors-delay
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `numberp'.

     Delay in seconds before displaying errors at point.

     Use floating point numbers to express fractions of seconds.

     This user option was introduced, or its default value was changed,
     in version 0.15 of the flycheck package.


The error is displayed via *note flycheck-display-errors-function: 28.:

 -- User Option: flycheck-display-errors-function
          Variable properties: This variable may be risky if used as a
          file-local variable.

     Function to display error messages.

     If set to a function, call the function with the list of errors
     to display as single argument.  Each error is an instance of the
     ``flycheck-error'' struct.

     If set to nil, do not display errors at all.

     This user option was introduced, or its default value was changed,
     in version 0.13 of the flycheck package.


The default function displays the error messages in the echo area:

 -- Function: flycheck-display-error-messages errors
     Display the messages of ERRORS.

     Concatenate all non-nil messages of ERRORS separated by empty
     lines, and display them with ``display-message-or-buffer'', which
     shows the messages either in the echo area or in a separate
     buffer, depending on the number of lines.  See Info
     node *note Displaying Messages: (elisp)Displaying Messages. for more information.

     In the latter case, show messages in
     ``flycheck-error-message-buffer''.

You can also work with the error messages at point, and copy them into
the kill ring or search them on Google:

 -- Command: C-c ! C-w
 -- Command: M-x flycheck-copy-messages-as-kill
     Copy all Flycheck error messages at the current point into kill
     ring.

 -- Command: C-c ! /
 -- Command: M-x flycheck-google-messages
     Google for all Flycheck error messages at the current point.

     If there are more than *note flycheck-google-max-messages: 7a.
     errors at point, signal an error, to avoid spamming your browser
     with Google tabs.

     Requires the Google This(3) library, which is available on
     MELPA(4).

 -- User Option: flycheck-google-max-messages
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `numberp'.

     How many messages to google at once.

     If set to an integer, *note `flycheck-google-messages': 79. will signal an
     error if there are more Flycheck messages at point than the value
     of this variable.

     If set to nil, *note `flycheck-google-messages': 79. will always google *all*
     messages at point.  This setting is *not* recommended.

     This user option was introduced, or its default value was changed,
     in version 0.10 of the flycheck package.


You can also show a list with all errors in the current buffer:

 -- Command: C-c ! l
 -- Command: M-x flycheck-list-errors
 -- Command: M-x list-flycheck-errors
     List all errors in the current buffer in a separate buffer.

     The error list automatically refreshes after a syntax check, and
     follows the current buffer and window, that is, if you switch to
     another buffer or window, the error list is updated to show the
     errors of the new buffer or window.

When you move the point in the current buffer while the error list is
visible, all errors at point and at the current line are highlighted in
the error list with *note flycheck-error-list-highlight-at-point: 7c.
and *note flycheck-error-list-highlight: 7d. respectively.

 -- Face: flycheck-error-list-highlight-at-point
     Flycheck face to highlight error at point in the error list.

     This face was introduced, or its default value was changed, in
     version 0.15 of the flycheck package.


 -- Face: flycheck-error-list-highlight
     Flycheck face to highlight errors in the error list.

     This face was introduced, or its default value was changed, in
     version 0.15 of the flycheck package.


Ultimately, you can clear all reported errors at once:

 -- Command: C-c ! C
 -- Command: M-x flycheck-clear
     Clear all Flycheck errors and warnings in the current buffer.

     You should not normally need this command, because Flycheck checks
     the buffer periodically anyway.

---------- Footnotes ----------

(1) https://github.com/bbatsov/solarized-emacs

(2) https://github.com/bbatsov/zenburn-emacs

(3) https://github.com/Bruce-Connor/emacs-google-this

(4) http://melpa.milkbox.net/


File: flycheck.info,  Node: Error navigation,  Next: Mode line,  Prev: Error reporting,  Up: Usage

5.6 Error navigation
====================

Flycheck integrates into standard error navigation commands of Emacs.
If *no* compilation buffer (including those from `M-x compile', `M-x
grep', `M-x occur', etc.) is visible, `M-g n' (`next-error') and `M-g p'
(`previous-error') will navigate between Flycheck warnings and errors
in the current buffer.  See *note Compilation Mode: (emacs)Compilation
Mode. for more information about these commands.

You can disable this integration by setting *note
flycheck-standard-error-navigation: 81. to nil:

 -- User Option: flycheck-standard-error-navigation
          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate `booleanp'.

     Whether to support error navigation with ``next-error''.

     If non-nil, enable navigation of Flycheck errors with
     ``next-error'', ``previous-error'' and ``first-error''.  Otherwise,
     these functions just navigate errors from compilation modes.

     Flycheck error navigation with *note `flycheck-next-error': 45,
     *note `flycheck-previous-error': 46. and *note `flycheck-first-error': 82. is always
     enabled, regardless of the value of this variable.

     Note that this setting only takes effect when *note `flycheck-mode': 4d. is
     enabled.  Changing it will not affect buffers which already have
     *note `flycheck-mode': 4d. enabled.

     This user option was introduced, or its default value was changed,
     in version 0.15 of the flycheck package.


Visible compilation buffers take precedence over Flycheck navigation.
If such a buffer is visible, `M-g n' and `M-g p' will ignore Flycheck
errors and warnings, and navigate errors (or generally results)
reported by the compilation buffer instead.

To address this issue, Flycheck provides independent error navigation
commands, which are not affected by *note
flycheck-standard-error-navigation: 81.:

 -- Command: C-c ! n
 -- Command: M-x flycheck-next-error
     Jump to the next Flycheck error.

     With prefix argument, jump forwards by as many errors as specified
     by the prefix argument, e.g. `M-3 C-c ! n' will move to the 3rd
     error from the current point.

 -- Command: C-c ! p
 -- Command: M-x flycheck-previous-error
     Jump to the previous Flycheck error.

     With prefix argument, jump backwards by as many errors as
     specified by the prefix argument, e.g. `M-3 C-c ! p' will move to
     the 3rd previous error from the current point.

 -- Command: M-x flycheck-first-error
     Jump to the first Flycheck error.

     With prefix argument, jump forwards to by as many errors as
     specified by the prefix argument, e.g. `M-3 M-x
     flycheck-first-error' moves to the 3rd error from the beginning of
     the buffer.


File: flycheck.info,  Node: Mode line,  Prev: Error navigation,  Up: Usage

5.7 Mode line
=============

Flycheck indicates its state in the mode line:

`FlyC'
     There are no errors in the current buffer.

`FlyC*'
     A syntax check is being performed currently.

`FlyC:3/4'
     There are three errors and four warnings in the current buffer.

`FlyC-'
     Automatic syntax checker selection did not find a suitable syntax
     checker.  See *note Syntax checker selection: 55. for more
     information.

`FlyC!'
     The syntax check failed.  Inspect the `*Messages*' buffer for
     details.

`FlyC?'
     The syntax check had a dubious result.  The definition of the
     syntax checker may be flawed.  Inspect the `*Messages*' buffer for
     details.

     This indicator should *never* be displayed for built-in syntax
     checkers.  If it is, please report an issue to the Flycheck
     developers, as by *note Reporting issues: 85.


File: flycheck.info,  Node: Supported languages,  Next: Glossary,  Prev: Usage,  Up: Top

6 Supported languages
*********************

Flycheck supports the following 39 languages with 67 syntax checkers.

Each language has one or more syntax checkers, whose names follow a
`LANGUAGE-TOOL' convention, where LANGUAGE is the programming language
supported by this syntax checker, and TOOL the specific syntax checker
tool.

This document provides just a brief overview, use *note
flycheck-describe-checker: 36. to see comprehensive documenation about
a syntax checker.

* Menu:

* AsciiDoc::
* C/C++::
* CFEngine::
* Chef::
* Coffeescript::
* CSS::
* D::
* Elixir::
* Emacs Lisp::
* Erlang::
* ERuby::
* Go::
* Haml::
* Handlebars::
* Haskell::
* HTML::
* Javascript::
* JSON::
* LESS::
* Lua::
* Make::
* Perl::
* PHP::
* Puppet::
* Python::
* Racket::
* ReStructuredText::
* Ruby::
* Rust::
* Sass::
* Scala::
* Scss::
* Shell script languages::
* Slim::
* TeX/LaTeX::
* Texinfo::
* Verilog::
* XML::
* YAML::


File: flycheck.info,  Node: AsciiDoc,  Next: C/C++,  Up: Supported languages

6.1 AsciiDoc
============

 -- Flycheck Syntax Checker: asciidoc
     A AsciiDoc syntax checker using the AsciiDoc compiler.

     See URL `http://www.methods.co.nz/asciidoc'(1).

---------- Footnotes ----------

(1) http://www.methods.co.nz/asciidoc


File: flycheck.info,  Node: C/C++,  Next: CFEngine,  Prev: AsciiDoc,  Up: Supported languages

6.2 C/C++
=========

 -- Flycheck Syntax Checker: c/c++-clang
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note c/c++-cppcheck: 8b, if there are only warnings

          The *first* suitable syntax checker is used.

     A C/C++ syntax checker using Clang.

     See URL `http://clang.llvm.org/'(1).

Options
.......

      -- User Option: flycheck-clang-blocks
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Enable blocks in Clang.

          When non-nil, enable blocks in Clang with ``-fblocks''.  See URL
          `http://clang.llvm.org/docs/BlockLanguageSpec.html'(2) for more
          information about blocks.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-clang-definitions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          Additional preprocessor definitions for Clang.

          The value of this variable is a list of strings, where each
          string is an additional definition to pass to Clang, via the ``-D''
          option.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.


      -- User Option: flycheck-clang-include-path
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of include directories for Clang.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of Clang.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.


      -- User Option: flycheck-clang-includes
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of additional include files for Clang.

          The value of this variable is a list of strings, where each
          string is a file to include before syntax checking.  Relative
          paths are relative to the file being checked.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.


      -- User Option: flycheck-clang-language-standard
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          The language standard to use in Clang.

          The value of this variable is either a string denoting a language
          standard, or nil, to use the default standard.  When non-nil,
          pass the language standard via the ``-std'' option.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.


      -- User Option: flycheck-clang-ms-extensions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to enable Microsoft extensions to C/C++ in Clang.

          When non-nil, enable Microsoft extensions to C/C++ via
          ``-fms-extensions''.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


      -- User Option: flycheck-clang-no-exceptions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to disable exceptions in Clang.

          When non-nil, disable exceptions for syntax checks, via
          ``-fno-exceptions''.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-clang-no-rtti
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to disable RTTI in Clang.

          When non-nil, disable RTTI for syntax checks, via ``-fno-rtti''.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.


      -- User Option: flycheck-clang-standard-library
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          The standard library to use for Clang.

          The value of this variable is the name of a standard library as
          string, or nil to use the default standard library.

          Refer to the Clang manual at URL
          `http://clang.llvm.org/docs/UsersManual.html'(3) for more
          information about the standard library.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.


      -- User Option: flycheck-clang-warnings
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of additional warnings to enable in Clang.

          The value of this variable is a list of strings, where each string
          is the name of a warning category to enable.  By default, all
          recommended warnings and some extra warnings are enabled (as by
          ``-Wall'' and ``-Wextra'' respectively).

          Refer to the Clang manual at URL
          `http://clang.llvm.org/docs/UsersManual.html'(4) for more
          information about warnings.

          This variable is an option for the syntax checker ``c/c++-clang''

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.


 -- Flycheck Syntax Checker: c/c++-gcc
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note c/c++-cppcheck: 8b, if there are only warnings

          The *first* suitable syntax checker is used.

     A C/C++ syntax checker using GCC.

     Requires GCC 4.8 or newer.  See URL `https://gcc.gnu.org/'(5).

Options
.......

      -- User Option: flycheck-gcc-definitions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          Additional preprocessor definitions for GCC.

          The value of this variable is a list of strings, where each
          string is an additional definition to pass to GCC, via the ``-D''
          option.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-gcc-include-path
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of include directories for GCC.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of gcc.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-gcc-includes
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of additional include files for GCC.

          The value of this variable is a list of strings, where each
          string is a file to include before syntax checking.  Relative
          paths are relative to the file being checked.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-gcc-language-standard
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          The language standard to use in GCC.

          The value of this variable is either a string denoting a language
          standard, or nil, to use the default standard.  When non-nil,
          pass the language standard via the ``-std'' option.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-gcc-no-exceptions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to disable exceptions in GCC.

          When non-nil, disable exceptions for syntax checks, via
          ``-fno-exceptions''.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-gcc-no-rtti
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to disable RTTI in GCC.

          When non-nil, disable RTTI for syntax checks, via ``-fno-rtti''.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-gcc-warnings
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of additional warnings to enable in GCC.

          The value of this variable is a list of strings, where each string
          is the name of a warning category to enable.  By default, all
          recommended warnings and some extra warnings are enabled (as by
          ``-Wall'' and ``-Wextra'' respectively).

          Refer to the gcc manual at URL
          `https://gcc.gnu.org/onlinedocs/gcc/'(6) for more information about
          warnings.

          This variable is an option for the syntax checker ``c/c++-gcc''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


 -- Flycheck Syntax Checker: c/c++-cppcheck
     A C/C++ checker using cppcheck.

     See URL `http://cppcheck.sourceforge.net/'(7).

Options
.......

      -- User Option: flycheck-cppcheck-checks
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          Enabled checks for Cppcheck.

          The value of this variable is a list of strings, where each
          string is the name of an additional check to enable.  By default,
          all coding style checks are enabled.

          See section "Enable message" in the Cppcheck manual at URL
          `http://cppcheck.sourceforge.net/manual.pdf'(8), and the
          documentation of the ``--enable'' option for more information,
          including a list of supported checks.

          This variable is an option for the syntax checker ``c/c++-cppcheck''

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.


      -- User Option: flycheck-cppcheck-inconclusive
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to enable Cppcheck inconclusive checks.

          When non-nil, enable Cppcheck inconclusive checks.  This allows Cppcheck to
          report warnings it's not certain of, but it may result in false positives.

          This will have no effect when using Cppcheck 1.53 and older.

          This variable is an option for the syntax checker ``c/c++-cppcheck''

          This user option was introduced, or its default value was
          changed, in version 0.19 of the flycheck package.


---------- Footnotes ----------

(1) http://clang.llvm.org/

(2) http://clang.llvm.org/docs/BlockLanguageSpec.html

(3) http://clang.llvm.org/docs/UsersManual.html

(4) http://clang.llvm.org/docs/UsersManual.html

(5) https://gcc.gnu.org/

(6) https://gcc.gnu.org/onlinedocs/gcc/

(7) http://cppcheck.sourceforge.net/

(8) http://cppcheck.sourceforge.net/manual.pdf


File: flycheck.info,  Node: CFEngine,  Next: Chef,  Prev: C/C++,  Up: Supported languages

6.3 CFEngine
============

 -- Flycheck Syntax Checker: cfengine
     A CFEngine syntax checker using cf-promises.

     See URL `http://cfengine.com/'(1).

---------- Footnotes ----------

(1) http://cfengine.com/


File: flycheck.info,  Node: Chef,  Next: Coffeescript,  Prev: CFEngine,  Up: Supported languages

6.4 Chef
========

See also
........

Chef(1)

 -- Flycheck Syntax Checker: chef-foodcritic
     A Chef cookbooks syntax checker using Foodcritic.

     See URL `http://acrmp.github.io/foodcritic/'(2).

---------- Footnotes ----------

(1) http://www.getchef.com/chef/

(2) http://acrmp.github.io/foodcritic/


File: flycheck.info,  Node: Coffeescript,  Next: CSS,  Prev: Chef,  Up: Supported languages

6.5 Coffeescript
================

 -- Flycheck Syntax Checker: coffee
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note coffee-coffeelint: a7, if there are only warnings

          The *first* suitable syntax checker is used.

     A CoffeeScript syntax checker using coffee.

     See URL `http://coffeescript.org/'(1).

 -- Flycheck Syntax Checker: coffee-coffeelint
     A CoffeeScript style checker using coffeelint.

     This syntax checker requires coffeelint 1.0 or newer.

     See URL `http://www.coffeelint.org/'(2).

Configuration file
..................

      -- User Option: flycheck-coffeelintrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``coffee-coffeelint''

---------- Footnotes ----------

(1) http://coffeescript.org/

(2) http://www.coffeelint.org/


File: flycheck.info,  Node: CSS,  Next: D,  Prev: Coffeescript,  Up: Supported languages

6.6 CSS
=======

 -- Flycheck Syntax Checker: css-csslint
     A CSS syntax and style checker using csslint.

     See URL `https://github.com/CSSLint/csslint'(1).

---------- Footnotes ----------

(1) https://github.com/CSSLint/csslint


File: flycheck.info,  Node: D,  Next: Elixir,  Prev: CSS,  Up: Supported languages

6.7 D
=====

 -- Flycheck Syntax Checker: d-dmd
     A D syntax checker using the DMD compiler.

     See URL `http://dlang.org/'(1).

Options
.......

      -- User Option: flycheck-dmd-include-path
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of include directories for dmd.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of dmd.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ``d-dmd''

          This user option was introduced, or its default value was
          changed, in version 0.18 of the flycheck package.


---------- Footnotes ----------

(1) http://dlang.org/


File: flycheck.info,  Node: Elixir,  Next: Emacs Lisp,  Prev: D,  Up: Supported languages

6.8 Elixir
==========

 -- Flycheck Syntax Checker: elixir
     An Elixir syntax checker using the Elixir interpreter.

     See URL `http://elixir-lang.org/'(1).

---------- Footnotes ----------

(1) http://elixir-lang.org/


File: flycheck.info,  Node: Emacs Lisp,  Next: Erlang,  Prev: Elixir,  Up: Supported languages

6.9 Emacs Lisp
==============

See also
........

Emacs(1), Emacs Lisp reference(2)

 -- Flycheck Syntax Checker: emacs-lisp
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note emacs-lisp-checkdoc: b2.

          The *first* suitable syntax checker is used.

     An Emacs Lisp syntax checker using the Emacs Lisp Byte compiler.

     See Info Node *note Byte Compilation: (elisp)Byte Compilation.

Options
.......

      -- User Option: flycheck-emacs-lisp-initialize-packages
               Variable properties: Automatically becomes buffer-local
               when set.  This variable may be risky if used as a
               file-local variable.

          Whether to initialize packages in the Emacs Lisp syntax checker.

          To initialize packages, call ``package-initialize'' before
          byte-compiling the file to check.

          When nil, never initialize packages.  When ``auto'', initialize
          packages only when checking files from ``user-emacs-directory''.
          For any other non-nil value, always initialize packages.

          This variable is an option for the syntax checker ``emacs-lisp''

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.


      -- User Option: flycheck-emacs-lisp-load-path
               Variable properties: Automatically becomes buffer-local
               when set.  This variable may be risky if used as a
               file-local variable.

          Load path to use in the Emacs Lisp syntax checker.

          When set to a list of strings, add each directory in this list to
          the ``load-path'' before invoking the byte compiler.  Relative
          paths in this list are expanded against the ``default-directory''
          of the buffer to check.  When nil, only use the built-in
          ``load-path'' of Emacs.

          The directory of the file being checked is always part of the
          ``load-path'' while checking, regardless of the value of this
          variable.

          Set this variable to ``load-path'' to use the ``load-path'' of your
          Emacs session for syntax checking.

          Note that changing this variable can lead to wrong results of the
          syntax check, e.g. if an unexpected version of a required library
          is used.

          This variable is an option for the syntax checker ``emacs-lisp''

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.


      -- User Option: flycheck-emacs-lisp-package-user-dir
               Variable properties: Automatically becomes buffer-local
               when set.  This variable may be risky if used as a
               file-local variable.

          Package directory for the Emacs Lisp syntax checker.

          When set to a string, set ``package-user-dir'' to the value of this
          variable before initializing packages.

          This variable has no effect, if
          *note `flycheck-emacs-lisp-initialize-packages': b3. is nil.

          This variable is an option for the syntax checker ``emacs-lisp''

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.


 -- Flycheck Syntax Checker: emacs-lisp-checkdoc
     An Emacs Lisp style checker using CheckDoc.

     The checker runs ``checkdoc-current-buffer''.

See also
........

     *note Documentation Tips: (elisp)Documentation Tips.


---------- Footnotes ----------

(1) http://www.gnu.org/software/emacs/

(2) http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html


File: flycheck.info,  Node: Erlang,  Next: ERuby,  Prev: Emacs Lisp,  Up: Supported languages

6.10 Erlang
===========

 -- Flycheck Syntax Checker: erlang
     An Erlang syntax checker using the Erlang interpreter.

     See URL `http://www.erlang.org/'(1).

---------- Footnotes ----------

(1) http://www.erlang.org/


File: flycheck.info,  Node: ERuby,  Next: Go,  Prev: Erlang,  Up: Supported languages

6.11 ERuby
==========

 -- Flycheck Syntax Checker: eruby-erubis
     A eRuby syntax checker using the ``erubis'' command.

     See URL `http://www.kuwata-lab.com/erubis/'(1).

---------- Footnotes ----------

(1) http://www.kuwata-lab.com/erubis/


File: flycheck.info,  Node: Go,  Next: Haml,  Prev: ERuby,  Up: Supported languages

6.12 Go
=======

 -- Flycheck Syntax Checker: go-gofmt
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note go-golint: bd, if there are no errors

            2. *note go-vet: be, if there are no errors

            3. *note go-build: bf, if there are no errors

            4. *note go-test: c0, if there are no errors

            5. *note go-errcheck: c1, if there are no errors

          The *first* suitable syntax checker is used.

     A Go syntax and style checker using the gofmt utility.

     See URL `http://golang.org/cmd/gofmt/'(1).

 -- Flycheck Syntax Checker: go-golint
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note go-vet: be.

            2. *note go-build: bf.

            3. *note go-test: c0.

            4. *note go-errcheck: c1.

          The *first* suitable syntax checker is used.

     A Go style checker using Golint.

     See URL `https://github.com/golang/lint'(2).

 -- Flycheck Syntax Checker: go-vet
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note go-build: bf.

            2. *note go-test: c0.

            3. *note go-errcheck: c1.

          The *first* suitable syntax checker is used.

     A Go syntax checker using the `go tool vet' command.

     See URL `http://golang.org/cmd/go/'(3) and URL
     `http://godoc.org/code.google.com/p/go.tools/cmd/vet'(4).

Options
.......

      -- User Option: flycheck-go-vet-print-functions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A comma-separated list of print-like functions for `go tool vet'.

          Go vet will check these functions for format string problems and
          issues, such as a mismatch between the number of formats used,
          and the number of arguments given.

          Each entry is in the form Name:N where N is the zero-based
          argument position of the first argument involved in the print:
          either the format or the first print argument for non-formatted
          prints.  For example, if you have Warn and Warnf functions that
          take an io.Writer as their first argument, like Fprintf,
          -printfuncs=Warn:1,Warnf:1

          This variable is an option for the syntax checker ``go-vet''

 -- Flycheck Syntax Checker: go-build
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note go-errcheck: c1, if there are no errors

          The *first* suitable syntax checker is used.

     A Go syntax and type checker using the `go build' command.

     See URL `http://golang.org/cmd/go'(5).

 -- Flycheck Syntax Checker: go-test
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note go-errcheck: c1, if there are no errors

          The *first* suitable syntax checker is used.

     A Go syntax and type checker using the `go test' command.

     See URL `http://golang.org/cmd/go'(6).

 -- Flycheck Syntax Checker: go-errcheck
     A Go checker for unchecked errors.

     See URL `https://github.com/kisielk/errcheck'(7).

---------- Footnotes ----------

(1) http://golang.org/cmd/gofmt/

(2) https://github.com/golang/lint

(3) http://golang.org/cmd/go/

(4) http://godoc.org/code.google.com/p/go.tools/cmd/vet

(5) http://golang.org/cmd/go

(6) http://golang.org/cmd/go

(7) https://github.com/kisielk/errcheck


File: flycheck.info,  Node: Haml,  Next: Handlebars,  Prev: Go,  Up: Supported languages

6.13 Haml
=========

 -- Flycheck Syntax Checker: haml
     A Haml syntax checker using the Haml compiler.

     See URL `http://haml.info'(1).

---------- Footnotes ----------

(1) http://haml.info


File: flycheck.info,  Node: Handlebars,  Next: Haskell,  Prev: Haml,  Up: Supported languages

6.14 Handlebars
===============

 -- Flycheck Syntax Checker: handlebars
     A Handlebars syntax checker using the Handlebars compiler.

     See URL `http://handlebarsjs.com/'(1).

---------- Footnotes ----------

(1) http://handlebarsjs.com/


File: flycheck.info,  Node: Haskell,  Next: HTML,  Prev: Handlebars,  Up: Supported languages

6.15 Haskell
============

 -- Flycheck Syntax Checker: haskell-ghc
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note haskell-hlint: c9, if there are only warnings

          The *first* suitable syntax checker is used.

     A Haskell syntax and type checker using ghc.

     See URL `http://www.haskell.org/ghc/'(1).

Options
.......

      -- User Option: flycheck-ghc-language-extensions
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          Language extensions for GHC.

          The value of this variable is a list of strings, where each
          string is a Haskell language extension, as in the LANGUAGE
          pragma.  Each extension is enabled via ``-X''.

          This variable is an option for the syntax checker ``haskell-ghc''

          This user option was introduced, or its default value was
          changed, in version 0.19 of the flycheck package.


      -- User Option: flycheck-ghc-no-user-package-database
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to disable the user package database in GHC.

          When non-nil, disable the user package database in GHC, via
          ``-no-user-package-db''.

          This variable is an option for the syntax checker ``haskell-ghc''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


      -- User Option: flycheck-ghc-package-databases
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          Additional module databases for GHC.

          The value of this variable is a list of strings, where each
          string is a directory of a package database.  Each package
          database is given to GHC via ``-package-db''.

          This variable is an option for the syntax checker ``haskell-ghc''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


      -- User Option: flycheck-ghc-search-path
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          Module search path for GHC.

          The value of this variable is a list of strings, where each
          string is a directory containing Haskell modules.  Each directory
          is added to the GHC search path via ``-i''.

          This variable is an option for the syntax checker ``haskell-ghc''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


 -- Flycheck Syntax Checker: haskell-hlint
     A Haskell style checker using hlint.

     See URL `https://github.com/ndmitchell/hlint'(2).

---------- Footnotes ----------

(1) http://www.haskell.org/ghc/

(2) https://github.com/ndmitchell/hlint


File: flycheck.info,  Node: HTML,  Next: Javascript,  Prev: Haskell,  Up: Supported languages

6.16 HTML
=========

 -- Flycheck Syntax Checker: html-tidy
     A HTML syntax and style checker using Tidy.

     See URL `https://github.com/w3c/tidy-html5'(1).

Configuration file
..................

      -- User Option: flycheck-tidyrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``html-tidy''

---------- Footnotes ----------

(1) https://github.com/w3c/tidy-html5


File: flycheck.info,  Node: Javascript,  Next: JSON,  Prev: HTML,  Up: Supported languages

6.17 Javascript
===============

 -- Flycheck Syntax Checker: javascript-jshint
     A JavaScript syntax and style checker using jshint.

     See URL `http://www.jshint.com'(1).

Configuration file
..................

      -- User Option: flycheck-jshintrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``javascript-jshint''

 -- Flycheck Syntax Checker: javascript-eslint
     A JavaScript syntax and style checker using eslint.

     See URL `https://github.com/eslint/eslint'(2).

Options
.......

      -- User Option: flycheck-eslint-rulesdir
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          The directory of custom rules for ESLint.

          The value of this variable is either a string containing the path
          to a directory with custom rules, or nil, to not give any custom
          rules to ESLint.

          Refer to the ESLint manual at URL
          `https://github.com/eslint/eslint/tree/master/docs/command-line-interface#-rulesdir'(3)
          for more information about the custom directory.

          This variable is an option for the syntax checker ``javascript-eslint''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


Configuration file
..................

      -- User Option: flycheck-eslintrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``javascript-eslint''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


 -- Flycheck Syntax Checker: javascript-gjslint
     A JavaScript syntax and style checker using Closure Linter.

     See URL `https://developers.google.com/closure/utilities'(4).

Configuration file
..................

      -- User Option: flycheck-gjslintrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``javascript-gjslint''

---------- Footnotes ----------

(1) http://www.jshint.com

(2) https://github.com/eslint/eslint

(3)
https://github.com/eslint/eslint/tree/master/docs/command-line-interface#-rulesdir

(4) https://developers.google.com/closure/utilities


File: flycheck.info,  Node: JSON,  Next: LESS,  Prev: Javascript,  Up: Supported languages

6.18 JSON
=========

 -- Flycheck Syntax Checker: json-jsonlint
     A JSON syntax and style checker using jsonlint.

     See URL `https://github.com/zaach/jsonlint'(1).

---------- Footnotes ----------

(1) https://github.com/zaach/jsonlint


File: flycheck.info,  Node: LESS,  Next: Lua,  Prev: JSON,  Up: Supported languages

6.19 LESS
=========

 -- Flycheck Syntax Checker: less
     A LESS syntax checker using lessc.

     At least version 1.4 of lessc is required.

     See URL `http://lesscss.org'(1).

---------- Footnotes ----------

(1) http://lesscss.org


File: flycheck.info,  Node: Lua,  Next: Make,  Prev: LESS,  Up: Supported languages

6.20 Lua
========

 -- Flycheck Syntax Checker: lua
     A Lua syntax checker using the Lua compiler.

     See URL `http://www.lua.org/'(1).

---------- Footnotes ----------

(1) http://www.lua.org/


File: flycheck.info,  Node: Make,  Next: Perl,  Prev: Lua,  Up: Supported languages

6.21 Make
=========

 -- Flycheck Syntax Checker: make
     A Makefile syntax checker using the POSIX compatible Make command.

     See URL `http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html'(1).

See also
........

     GNU Make(2), NetBSD Make(3), FreeBSD Make(4), OpenBSD Make(5)


---------- Footnotes ----------

(1) http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html

(2) http://www.gnu.org/software/make/

(3) http://netbsd.gw.com/cgi-bin/man-cgi?make++NetBSD-current

(4) http://www.freebsd.org/cgi/man.cgi?query=make&sektion=1

(5) http://www.openbsd.org/cgi-bin/man.cgi?query=make


File: flycheck.info,  Node: Perl,  Next: PHP,  Prev: Make,  Up: Supported languages

6.22 Perl
=========

 -- Flycheck Syntax Checker: perl
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note perl-perlcritic: e4.

          The *first* suitable syntax checker is used.

     A Perl syntax checker using the Perl interpreter.

     See URL `http://www.perl.org'(1).

 -- Flycheck Syntax Checker: perl-perlcritic
     A Perl syntax checker using Perl::Critic.

     See URL `https://metacpan.org/pod/Perl::Critic'(2).

Options
.......

      -- User Option: flycheck-perlcritic-verbosity
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `integerp'.

          The message severity for Perl Critic.

          The value of this variable is a severity level as integer, for
          the ``--severity'' option to Perl Critic.

          This variable is an option for the syntax checker ``perl-perlcritic''

          This user option was introduced, or its default value was
          changed, in version 0.18 of the flycheck package.


---------- Footnotes ----------

(1) http://www.perl.org

(2) https://metacpan.org/pod/Perl::Critic


File: flycheck.info,  Node: PHP,  Next: Puppet,  Prev: Perl,  Up: Supported languages

6.23 PHP
========

 -- Flycheck Syntax Checker: php
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note php-phpmd: e8, if there are only warnings

            2. *note php-phpcs: e9, if there are only warnings

          The *first* suitable syntax checker is used.

     A PHP syntax checker using the PHP command line interpreter.

     See URL `http://php.net/manual/en/features.commandline.php'(1).

 -- Flycheck Syntax Checker: php-phpmd
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note php-phpcs: e9.

          The *first* suitable syntax checker is used.

     A PHP style checker using PHP Mess Detector.

     See URL `http://phpmd.org/'(2).

Options
.......

      -- User Option: flycheck-phpmd-rulesets
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          The rule sets for PHP Mess Detector.

          Set default rule sets and custom rule set files.

          See section "Using multiple rule sets" in the PHP Mess Detector
          manual at URL `http://phpmd.org/documentation/index.html'(3).

          This variable is an option for the syntax checker ``php-phpmd''

 -- Flycheck Syntax Checker: php-phpcs
     A PHP style checker using PHP_CodeSniffer.

     See URL `http://pear.php.net/package/PHP_CodeSniffer/'(4).

Options
.......

      -- User Option: flycheck-phpcs-standard
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          The coding standard for PHP CodeSniffer.

          When nil, use the default standard from the global PHP
          CodeSniffer configuration.  When set to a string, pass the string
          to PHP CodeSniffer which will interpret it as name as a standard,
          or as path to a standard specification.

          This variable is an option for the syntax checker ``php-phpcs''

---------- Footnotes ----------

(1) http://php.net/manual/en/features.commandline.php

(2) http://phpmd.org/

(3) http://phpmd.org/documentation/index.html

(4) http://pear.php.net/package/PHP_CodeSniffer/


File: flycheck.info,  Node: Puppet,  Next: Python,  Prev: PHP,  Up: Supported languages

6.24 Puppet
===========

 -- Flycheck Syntax Checker: puppet-parser
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note puppet-lint: ee, if there are no errors

          The *first* suitable syntax checker is used.

     A Puppet DSL syntax checker using puppet's own parser.

     See URL `http://puppetlabs.com/'(1).

 -- Flycheck Syntax Checker: puppet-lint
     A Puppet DSL style checker using puppet-lint.

     See URL `http://puppet-lint.com/'(2).

---------- Footnotes ----------

(1) http://puppetlabs.com/

(2) http://puppet-lint.com/


File: flycheck.info,  Node: Python,  Next: Racket,  Prev: Puppet,  Up: Supported languages

6.25 Python
===========

 -- Flycheck Syntax Checker: python-flake8
     A Python syntax and style checker using Flake8.

     For best error reporting, use Flake8 2.0 or newer.

     See URL `https://pypi.python.org/pypi/flake8'(1).

Options
.......

      -- User Option: flycheck-flake8-maximum-complexity
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `integerp'.

          The maximum McCabe complexity of methods.

          If nil, do not check the complexity of methods.  If set to an
          integer, report any complexity greater than the value of this
          variable as warning.

          If set to an integer, this variable overrules any similar setting
          in the configuration file denoted by *note `flycheck-flake8rc': f2.

          This variable is an option for the syntax checker ``python-flake8''

      -- User Option: flycheck-flake8-maximum-line-length
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `integerp'.

          The maximum length of lines.

          If set to an integer, the value of this variable denotes the
          maximum length of lines, overruling any similar setting in the
          configuration file denoted by *note `flycheck-flake8rc': f2.  An error will
          be reported for any line longer than the value of this variable.

          If set to nil, use the maximum line length from the configuration
          file denoted by *note `flycheck-flake8rc': f2, or the PEP 8 recommendation
          of 79 characters if there is no configuration with this setting.

          This variable is an option for the syntax checker ``python-flake8''

Configuration file
..................

      -- User Option: flycheck-flake8rc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``python-flake8''

 -- Flycheck Syntax Checker: python-pylint
     A Python syntax and style checker using Pylint.

     This syntax checker requires Pylint 1.0 or newer.

     See URL `http://www.pylint.org/'(2).

Configuration file
..................

      -- User Option: flycheck-pylintrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``python-pylint''

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/flake8

(2) http://www.pylint.org/


File: flycheck.info,  Node: Racket,  Next: ReStructuredText,  Prev: Python,  Up: Supported languages

6.26 Racket
===========

 -- Flycheck Syntax Checker: racket
     A Racket syntax checker using the Racket compiler.

     See URL `http://racket-lang.org/'(1).

---------- Footnotes ----------

(1) http://racket-lang.org/


File: flycheck.info,  Node: ReStructuredText,  Next: Ruby,  Prev: Racket,  Up: Supported languages

6.27 ReStructuredText
=====================

 -- Flycheck Syntax Checker: rst
     A ReStructuredText (RST) syntax checker using Docutils.

     See URL `http://docutils.sourceforge.net/'(1).

 -- Flycheck Syntax Checker: rst-sphinx
     A ReStructuredText (RST) syntax checker using Sphinx.

     Requires Sphinx 1.2 or newer.  See URL `http://sphinx-doc.org'(2).

Options
.......

      -- User Option: flycheck-sphinx-warn-on-missing-references
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to warn about missing references in Sphinx.

          When non-nil (the default), warn about all missing references in
          Sphinx via ``-n''.

          This variable is an option for the syntax checker ``rst-sphinx''

          This user option was introduced, or its default value was
          changed, in version 0.17 of the flycheck package.


---------- Footnotes ----------

(1) http://docutils.sourceforge.net/

(2) http://sphinx-doc.org


File: flycheck.info,  Node: Ruby,  Next: Rust,  Prev: ReStructuredText,  Up: Supported languages

6.28 Ruby
=========

 -- Flycheck Syntax Checker: ruby-rubocop
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note ruby-rubylint: fe, if there are only warnings

          The *first* suitable syntax checker is used.

     A Ruby syntax and style checker using the RuboCop tool.

     See URL `http://batsov.com/rubocop/'(1).

Options
.......

      -- User Option: flycheck-rubocop-lint-only
               Variable properties: Automatically becomes buffer-local
               when set.

          Whether to only report code issues in Rubocop.

          When non-nil, only report code issues in Rubocop, via ``--lint''.
          Otherwise report style issues as well.

          This variable is an option for the syntax checker ``ruby-rubocop''

Configuration file
..................

      -- User Option: flycheck-rubocoprc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``ruby-rubocop''

 -- Flycheck Syntax Checker: ruby-rubylint
     A Ruby syntax and code analysis checker using ruby-lint.

     Requires ruby-lint 2.0 or newer.  See URL
     `https://github.com/YorickPeterse/ruby-lint'(2).

 -- Flycheck Syntax Checker: ruby
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note ruby-rubylint: fe, if there are only warnings

          The *first* suitable syntax checker is used.

     A Ruby syntax checker using the standard Ruby interpreter.

     Please note that the output of different Ruby versions and
     implementations varies wildly.  This syntax checker supports
     current versions of MRI and JRuby, but may break when used with
     other implementations or future versions of these
     implementations.

     Please consider using ``ruby-rubocop'' or ``ruby-rubylint'' instead.

     See URL `https://www.ruby-lang.org/'(3).

 -- Flycheck Syntax Checker: ruby-jruby
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note ruby-rubylint: fe, if there are only warnings

          The *first* suitable syntax checker is used.

     A Ruby syntax checker using the JRuby interpreter.

     This syntax checker is very primitive, and may break on future
     versions of JRuby.

     Please consider using ``ruby-rubocop'' or ``ruby-rubylint'' instead.

     See URL `http://jruby.org/'(4).

---------- Footnotes ----------

(1) http://batsov.com/rubocop/

(2) https://github.com/YorickPeterse/ruby-lint

(3) https://www.ruby-lang.org/

(4) http://jruby.org/


File: flycheck.info,  Node: Rust,  Next: Sass,  Prev: Ruby,  Up: Supported languages

6.29 Rust
=========

 -- Flycheck Syntax Checker: rust
     A Rust syntax checker using Rust compiler.

     This syntax checker needs Rust 0.10 or newer.

     See URL `http://www.rust-lang.org'(1).

Options
.......

      -- User Option: flycheck-rust-check-tests
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to check test code in Rust.

          When non-nil, ``rustc'' is passed the ``--test'' flag, which will
          check any code marked with the `#[cfg(test)]' attribute and any
          functions marked with `#[test]'. Otherwise, ``rustc'' is not passed
          ``--test'' and test code will not be checked.  Skipping ``--test'' is
          necessary when using `#![no_std]', because compiling the test
          runner requires ``std''.

          This variable is an option for the syntax checker ``rust''

      -- User Option: flycheck-rust-crate-root
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          A path to the crate root for the current buffer.

          The value of this variable is either a string with the path to
          the crate root for the current buffer, or nil if the current buffer
          is a crate.  A relative path is relative to the current buffer.

          If this variable is non nil the current buffer will only be checked
          if it is not modified, i.e. after it has been saved.

          This variable is an option for the syntax checker ``rust''

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.


      -- User Option: flycheck-rust-library-path
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate *note
               flycheck-string-list-p: 8e.

          A list of library directories for Rust.

          The value of this variable is a list of strings, where each
          string is a directory to add to the library path of Rust.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ``rust''

          This user option was introduced, or its default value was
          changed, in version 0.18 of the flycheck package.


---------- Footnotes ----------

(1) http://www.rust-lang.org


File: flycheck.info,  Node: Sass,  Next: Scala,  Prev: Rust,  Up: Supported languages

6.30 Sass
=========

 -- Flycheck Syntax Checker: sass
     A Sass syntax checker using the Sass compiler.

     See URL `http://sass-lang.com'(1).

Options
.......

      -- User Option: flycheck-sass-compass
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to enable the Compass CSS framework.

          When non-nil, enable the Compass CSS framework, via ``--compass''.

          This variable is an option for the syntax checker ``sass''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


---------- Footnotes ----------

(1) http://sass-lang.com


File: flycheck.info,  Node: Scala,  Next: Scss,  Prev: Sass,  Up: Supported languages

6.31 Scala
==========

 -- Flycheck Syntax Checker: scala
     A Scala syntax checker using the Scala compiler.

     See URL `http://www.scala-lang.org/'(1).

---------- Footnotes ----------

(1) http://www.scala-lang.org/


File: flycheck.info,  Node: Scss,  Next: Shell script languages,  Prev: Scala,  Up: Supported languages

6.32 Scss
=========

 -- Flycheck Syntax Checker: scss
     A SCSS syntax checker using the SCSS compiler.

     See URL `http://sass-lang.com'(1).

Options
.......

      -- User Option: flycheck-scss-compass
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `booleanp'.

          Whether to enable the Compass CSS framework.

          When non-nil, enable the Compass CSS framework, via ``--compass''.

          This variable is an option for the syntax checker ``scss''

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.


---------- Footnotes ----------

(1) http://sass-lang.com


File: flycheck.info,  Node: Shell script languages,  Next: Slim,  Prev: Scss,  Up: Supported languages

6.33 Shell script languages
===========================

 -- Flycheck Syntax Checker: sh-bash
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note sh-shellcheck: 112, if there are no errors

          The *first* suitable syntax checker is used.

     A Bash syntax checker using the Bash shell.

     See URL `http://www.gnu.org/software/bash/'(1).

 -- Flycheck Syntax Checker: sh-posix-dash
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note sh-shellcheck: 112, if there are no errors

          The *first* suitable syntax checker is used.

     A POSIX Shell syntax checker using the Dash shell.

     See URL `http://gondor.apana.org.au/~herbert/dash/'(2).

See also
........

     POSIX Shell Command Language(3)


 -- Flycheck Syntax Checker: sh-posix-bash
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note sh-shellcheck: 112, if there are no errors

          The *first* suitable syntax checker is used.

     A POSIX Shell syntax checker using the Bash shell.

     See URL `http://www.gnu.org/software/bash/'(4).

See also
........

     GNU Bash POSIX Mode(5), POSIX Shell Command Language(6)


 -- Flycheck Syntax Checker: sh-zsh
          Chained syntax checkers: The following syntax checkers are
          *note chained: 56. after this syntax checker:

            1. *note sh-shellcheck: 112, if there are no errors

          The *first* suitable syntax checker is used.

     A Zsh syntax checker using the Zsh shell.

     See URL `http://www.zsh.org/'(7).

 -- Flycheck Syntax Checker: sh-shellcheck
     A shell script syntax and style checker using Shellcheck.

     See URL `https://github.com/koalaman/shellcheck/'(8).

---------- Footnotes ----------

(1) http://www.gnu.org/software/bash/

(2) http://gondor.apana.org.au/~herbert/dash/

(3)
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html

(4) http://www.gnu.org/software/bash/

(5)
http://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html#Bash-POSIX-Mode

(6)
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html

(7) http://www.zsh.org/

(8) https://github.com/koalaman/shellcheck/


File: flycheck.info,  Node: Slim,  Next: TeX/LaTeX,  Prev: Shell script languages,  Up: Supported languages

6.34 Slim
=========

 -- Flycheck Syntax Checker: slim
     A Slim syntax checker using the Slim compiler.

     See URL `http://slim-lang.com'(1).

---------- Footnotes ----------

(1) http://slim-lang.com


File: flycheck.info,  Node: TeX/LaTeX,  Next: Texinfo,  Prev: Slim,  Up: Supported languages

6.35 TeX/LaTeX
==============

See also
........

LaTeX(1), TeX Live(2)

 -- Flycheck Syntax Checker: tex-chktex
     A TeX and LaTeX syntax and style checker using chktex.

     See URL `http://www.nongnu.org/chktex/'(3).

Configuration file
..................

      -- User Option: flycheck-chktexrc
               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local
               variable if its value satisfies the predicate `stringp'.

          Configuration file for ``tex-chktex''

 -- Flycheck Syntax Checker: tex-lacheck
     A LaTeX syntax and style checker using lacheck.

     See URL `http://www.ctan.org/pkg/lacheck'(4).

---------- Footnotes ----------

(1) http://www.latex-project.org/

(2) http://www.tug.org/texlive/

(3) http://www.nongnu.org/chktex/

(4) http://www.ctan.org/pkg/lacheck


File: flycheck.info,  Node: Texinfo,  Next: Verilog,  Prev: TeX/LaTeX,  Up: Supported languages

6.36 Texinfo
============

 -- Flycheck Syntax Checker: texinfo
     A Texinfo syntax checker using makeinfo.

     See URL `http://www.gnu.org/software/texinfo/'(1).

---------- Footnotes ----------

(1) http://www.gnu.org/software/texinfo/


File: flycheck.info,  Node: Verilog,  Next: XML,  Prev: Texinfo,  Up: Supported languages

6.37 Verilog
============

 -- Flycheck Syntax Checker: verilog-verilator
     A Verilog syntax checker using the Verilator Verilog HDL simulator.

     See URL `http://www.veripool.org/wiki/verilator'(1).

---------- Footnotes ----------

(1) http://www.veripool.org/wiki/verilator


File: flycheck.info,  Node: XML,  Next: YAML,  Prev: Verilog,  Up: Supported languages

6.38 XML
========

 -- Flycheck Syntax Checker: xml-xmlstarlet
     A XML syntax checker and validator using the xmlstarlet utility.

     See URL `http://xmlstar.sourceforge.net/'(1).

 -- Flycheck Syntax Checker: xml-xmllint
     A XML syntax checker and validator using the xmllint utility.

     The xmllint is part of libxml2, see URL
     `http://www.xmlsoft.org/'(2).

---------- Footnotes ----------

(1) http://xmlstar.sourceforge.net/

(2) http://www.xmlsoft.org/


File: flycheck.info,  Node: YAML,  Prev: XML,  Up: Supported languages

6.39 YAML
=========

 -- Flycheck Syntax Checker: yaml-jsyaml
     A YAML syntax checker using JS-YAML.

     See URL `https://github.com/nodeca/js-yaml'(1).

 -- Flycheck Syntax Checker: yaml-ruby
     A YAML syntax checker using Ruby's YAML parser.

     This syntax checker uses the YAML parser from Ruby's standard
     library.

     See URL `http://www.ruby-doc.org/stdlib-2.0.0/libdoc/yaml/rdoc/YAML.html'(2).

---------- Footnotes ----------

(1) https://github.com/nodeca/js-yaml

(2) http://www.ruby-doc.org/stdlib-2.0.0/libdoc/yaml/rdoc/YAML.html


File: flycheck.info,  Node: Glossary,  Next: Extending Flycheck,  Prev: Supported languages,  Up: Top

7 Glossary
**********

syntax checker
     A symbol which is defined as syntax checker with *note
     flycheck-define-checker: 19.  

registered syntax checker
     A *note syntax checker: 61. available for automatic selection,
     i.e. that is contained in *note flycheck-checkers: 5c.  

disabled syntax checker
     A *note syntax checker: 61. explicitly excluded from available
     selection, i.e. that is contained in *note
     flycheck-disabled-checkers: 5d.  

enabled syntax checker
     A *note registered syntax checker: 5e. which is not a *note
     disabled syntax checker: 12a.  

suitable syntax checker
     A *note syntax checker: 61. which can be used to check the current
     buffer.  Precisely, a syntax checker which

        - which can be used for the current major mode,

        - and whose predicate succeeds,

        - and whose syntax checker tool exists.
     
chaining
     In some languages, multiple *note syntax checkers: 61. can be
     applied to a buffer.  In such a case, each syntax checker specifies
     which checkers are to be used after it and when.  The result is a
     “syntax checker chain”, specifying all syntax checkers to be
     applied to the buffer.

     For instance, Haskell buffers are first checked with GHC for
     syntax and type errors, and then with `hlint' for idiomatic and
     semantic mistakes.  Hence, the syntax checker chain consists of
     *note haskell-ghc: c8.  and *note haskell-hlint: c9.


File: flycheck.info,  Node: Extending Flycheck,  Next: Flycheck API,  Prev: Glossary,  Up: Top

8 Extending Flycheck
********************

This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, _please_ contribute it to Flycheck
to make it available to other users, too.  See *note Contributing
syntax checkers: 12d. for more information.

* Menu:

* Defining new syntax checkers::
* Registering new syntax checkers::
* Error levels: Error levels<2>.
* Error parsers::
* Extending syntax checkers::
* Examples::


File: flycheck.info,  Node: Defining new syntax checkers,  Next: Registering new syntax checkers,  Up: Extending Flycheck

8.1 Defining new syntax checkers
================================

You define new syntax checkers with *note flycheck-define-checker: 19.:

 -- Macro: flycheck-define-checker symbol docstring &rest properties
     Define SYMBOL as syntax checker with DOCSTRING and PROPERTIES.

     DOCSTRING provides documentation for the new syntax checker.  Use
     *note `flycheck-describe-checker': 36. to view the documentation of a syntax
     checker.

     The following PROPERTIES constitute a syntax checker.  ``:command''
     is mandatory.  A syntax checker must also have either ``:modes'' or
     ``:predicate'', and either ``:error-patterns'' or ``:error-parser''.
     ``:next-checkers'' is entirely optional.

     Signal an error at macro-expansion time if a mandatory property
     is missing or if any property as an invalid value.

     Any syntax checker defined with this macro is eligible for manual
     syntax checker selection with *note `flycheck-select-checker': 22.  To make
     the new syntax checker available for automatic selection, it must
     be registered in *note `flycheck-checkers': 5c.

     `:command (EXECUTABLE ARG ...)'
          An unquoted list describing the syntax checker command to
          execute.

          EXECUTABLE must be a string with the executable of this
          syntax checker.

          A variable ``flycheck-CHECKER-executable'' is implicitly
          defined to allow overriding of the executable.  The variable
          is customizable and buffer-local.  If this variable is
          non-nil, Flycheck uses the value of the variable as
          executable, otherwise it falls back to EXECUTABLE.  In
          either case, the executable is checked with
          ``executable-find'' before use.

          Each ARG is an argument to the executable, either as string,
          or as special symbol or form for
          *note `flycheck-substitute-argument': 12f, which see.

     `:error-patterns ((LEVEL SEXP ...) ...)'
          An unquoted list of error patterns to parse the output of
          the syntax checker ``:command''.

          LEVEL is either ``error'' or ``warning'' and denotes the
          severity of errors matched by the pattern.  The LEVEL is
          followed by one or more RX ``SEXP''s which parse the error and
          extract line, column, file name and error message.

          See ``rx'' for general information about RX, and
          *note `flycheck-rx-to-string': 130. for special RX forms provided by
          Flycheck.

          All patterns are applied in the order of declaration to the
          whole output of the syntax checker.  Output already matched
          by a pattern will not be matched by subsequent patterns.  In
          other words, the first pattern wins.

     `:error-parser FUNCTION'
     `:error-parser (lambda (output checker buffer) BODY ...)'
          A function to parse errors with, either as unquoted symbol,
          or ``lambda'' form.

          The function must accept three arguments OUTPUT CHECKER
          BUFFER, where OUTPUT is the syntax checker output as string,
          CHECKER the syntax checker that was used, and BUFFER a
          buffer object representing the checked buffer.  The function
          must return a list of ``flycheck-error'' objects parsed from
          OUTPUT.

     `:error-filter FUNCTION'
     `:error-filter (lambda (errors) BODY ...)'
          A function to filter or modify errors parsed by
          ``:error-parser'' or ``:error-patterns''.

          The function takes the list of parsed ``flycheck-error''
          objects as sole argument and shall return a list of
          ``flycheck-error'' as the result of the syntax checker.  The
          function is free to add or remove errors, or modify
          individual errors.  It may modify the list of errors as well
          as individual errors in place.

          Syntax checkers will mostly use this feature to fix
          misplaced error locations, or improve error messages.

     `:modes MODE'
     `:modes (MODE ...)'
          An unquoted major mode symbol or a list thereof.  If
          present, the syntax checker is only used if the major mode
          of the buffer to check is equal (as in ``eq'') to any given
          MODE.

          If a ``:predicate'' is present, it is additionally used in
          each buffer of these MODEs.

     `:predicate FUNCTION'
     `:predicate (lambda () BODY ...)'
          A function to determine whether to use the syntax checker in
          the current buffer, either as unquoted function symbol or
          ``lambda'' form.  The syntax checker is only used if this
          function returns non-nil when called in the buffer to check.
          If ``:modes'' is given, the function is only called in
          matching modes.

     `:next-checkers (ITEM ...)'
          An unquoted list defining the syntax checker to run after
          this syntax checker.

          Flycheck tries all items in order of declaration.  Each ITEM
          is either a syntax checker symbol, or a cons
          cell `(PREDICATE . CHECKER)'.

          In the former case, the syntax checker is always considered.
          In the later case, CHECKER is only considered if the
          PREDICATE matches.

          PREDICATE is either ``no-errors'' or ``warnings-only''.  With
          ``no-errors'' CHECKER is only considered if this checker
          reported no errors or warnings at all.  With ``warnings-only''
          CHECKER is only considered if this checker reported only
          warnings, but no errors.

          The first registered and available syntax checker with
          matching predicate is executed after this checker.

 -- Macro: flycheck-def-config-file-var symbol checker &optional
          file-name &rest custom-args
     Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

     SYMBOL is declared as customizable, buffer-local variable using
     ``defcustom'', to provide a configuration file for the given syntax
     CHECKER.  CUSTOM-ARGS are forwarded to ``defcustom''.

     FILE-NAME is the initial value of the new variable.  If omitted,
     the default value is nil.

     Use this together with the ``config-file'' form in the ``:command''
     argument to *note `flycheck-define-checker': 19.

 -- Macro: flycheck-def-option-var symbol init-value checker docstring
          &rest custom-args
     Define SYMBOL as option variable with INIT-VALUE for CHECKER.

     SYMBOL is declared as customizable variable, buffer-local
     variable using ``defcustom'', to provide an option for the given
     syntax CHECKER.  INIT-VALUE is the initial value of the variable,
     and DOCSTRING is its docstring.  CUSTOM-ARGS are forwarded to
     ``defcustom''.

     Use this together with the ``option'', ``option-list'' and
     ``option-flag'' forms in the ``:command'' argument to
     *note `flycheck-define-checker': 19.


File: flycheck.info,  Node: Registering new syntax checkers,  Next: Error levels<2>,  Prev: Defining new syntax checkers,  Up: Extending Flycheck

8.2 Registering new syntax checkers
===================================

After a syntax checker was defined, it should be registered for
automatic selection, by adding it to *note flycheck-checkers: 5c, e.g.

    (add-to-list 'flycheck-checkers 'my-new-syntax-checker)

     Note: *note flycheck-checker: 21. and *note
     flycheck-select-checker: 22. are reserved for *user
     customization*.  Do *not* use them in Flycheck extensions.

     Specifically, please do *not* provide a hook function which
     selects the syntax checker explicitly by assigning to *note
     flycheck-checker: 21. or by calling *note flycheck-select-checker:
     22, e.g.

         (defun enable-my-new-syntax-checker ()
           (setq flycheck-checker 'my-new-syntax-checker)
           (flycheck-buffer))

         (add-hook 'my-major-mode-hook #'enable-my-new-syntax-checker)

     This circumvents the entire automatic selection of Flycheck, and
     prevents the user from effectively customizing Flycheck.


File: flycheck.info,  Node: Error levels<2>,  Next: Error parsers,  Prev: Registering new syntax checkers,  Up: Extending Flycheck

8.3 Error levels
================

Flycheck provides some built-in error levels:

`error'
     Severe errors which cannot be ignored

`warning'
     Potential errors which can be ignored

`info'
     Informational annotations

You can define new error levels with *note flycheck-define-error-level:
25.


File: flycheck.info,  Node: Error parsers,  Next: Extending syntax checkers,  Prev: Error levels<2>,  Up: Extending Flycheck

8.4 Error parsers
=================

Syntax checkers may use more sophisticated error parsing by given the
`:error-parser' argument to *note flycheck-define-checker: 19.  See
*note Builtin error parsers: 139. for a list of builtin parsers.

You may also define your own error parsers.  An error parser is any
function that takes the following three arguments and returns a list of
*note flycheck-error: 13a. objects (see *note Error API: 75. for more
information):

`output'
     The complete output of the syntax checker as string.

`checker'
     A symbol denoting the executed syntax checker.

`buffer'
     A buffer object referring to the buffer that was syntax-checked.

Flycheck provides some utility functions to implement your own error
parsers.  See *note Error parser API: 13b. for details.


File: flycheck.info,  Node: Extending syntax checkers,  Next: Examples,  Prev: Error parsers,  Up: Extending Flycheck

8.5 Extending syntax checkers
=============================

There are some means to extend defined syntax checkers:

 -- Function: flycheck-add-next-checker checker next-checker &optional
          append
     Add a NEXT-CHECKER after CHECKER.

     CHECKER is a syntax checker symbol, to which to add NEXT-CHECKER.

     NEXT-CHECKER describes the syntax checker to run after CHECKER.
     It is a either a syntax checker symbol, or a cons
     cell `(PREDICATE . CHECKER)'.  In the former case, always
     consider the syntax checker.  In the later case, only consider
     CHECKER if the PREDICATE matches.  PREDICATE is either ``no-errors''
     or ``warnings-only''.  In the former case, CHECKER is only
     considered if this checker reported no errors or warnings at all,
     in the latter case, CHECKER is only considered if this checker
     reported only warnings, but no errors.

     NEXT-CHECKER is prepended before other checkers to run after
     CHECKER, unless APPEND is non-nil.


File: flycheck.info,  Node: Examples,  Prev: Extending syntax checkers,  Up: Extending Flycheck

8.6 Examples
============

* Menu:

* Basic syntax checkers::
* Syntax checkers with predicates::
* Configuration files for syntax checkers::
* Chaining syntax checkers::


File: flycheck.info,  Node: Basic syntax checkers,  Next: Syntax checkers with predicates,  Up: Examples

8.6.1 Basic syntax checkers
---------------------------

As explained in the previous chapter *note Defining new syntax
checkers: a, a syntax checker is declared with *note
flycheck-define-checker: 19.

We will use this function to define a syntax checker using the PHP
CodeSniffer utility for the PHP programming language:

    (flycheck-define-checker php-phpcs
      "A PHP syntax checker using PHP_CodeSniffer.

    See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
      :command ("phpcs" "--report=checkstyle" source)
      :error-parser flycheck-parse-checkstyle
      :modes php-mode)

    (add-to-list 'flycheck-checkers 'php-phpcs)

First we specify the `:command' to execute.  The first element of the
command list is the name of the executable, `phpcs' in our case.  This
command is checked for existence with `executable-find' before using
this syntax checker.  If the command does not exist, the syntax checker
is _not_ used.

The executable is following by the arguments, in this case some options
and the symbol `source'.  This symbol is replaced with the file to
check.  This file is a temporary file created in the system temporary
directory and containing the contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP
CodeSniffer provides an option to output errors in an XML format
similar to the Java tool Checkstyle, so we use the built-in _error
parser_ *note flycheck-parse-checkstyle: 142. to parse the output.

Then we enable the syntax checker in PHP editing modes.

Ultimately, we make the new syntax checker available for automatic
selection by adding it to *note flycheck-checkers: 5c.

If the syntax checker does not provide any sort of structured output
format, we have to parse the error messages from the textual output.
To do so, we can use _error patterns_, like in the Pylint syntax
checker for the Python programming language:

    (flycheck-define-checker python-pylint
      "A Python syntax and style checker using Pylint.

    See URL `http://pypi.python.org/pypi/pylint'."
      :command ("epylint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line
                ": Warning (W" (zero-or-more not-newline) "): "
                (message) line-end)
       (error line-start (file-name) ":" line
              ": Error (E" (zero-or-more not-newline) "): "
              (message) line-end)
       (error line-start (file-name) ":" line ": [F] " (message) line-end))
      :modes python-mode)

Again, there is a `:command', however we use the `source-inplace'
symbol this time.  This symbol causes the temporary file to be created
in the same directory as the original file, making information from the
source code tree available to the syntax checker.  In case of Pylint,
these are the Python packages from the source code tree.

Next we give the list of `:error-patterns' to parse errors.  These
patterns extract the error location and the error message from the
output of `epylint'.  An error pattern is a list containing a regular
expression with match groups to extract the error information, and an
error level.

Eventually we enable the syntax checker in `python-mode'.


File: flycheck.info,  Node: Syntax checkers with predicates,  Next: Configuration files for syntax checkers,  Prev: Basic syntax checkers,  Up: Examples

8.6.2 Syntax checkers with predicates
-------------------------------------

In the previous examples the syntax checkers were specific to certain
major modes.  However, this is not always the case.  For instance, GNU
Emacs provides a single mode only for shell scripting in various Shell
languages.  A syntax checker for a specific shell must check whether
the edited shell script is written for the right shell:

    (flycheck-define-checker zsh
      "A Zsh syntax checker using the Zsh shell.

    See URL `http://www.zsh.org/'."
      :command ("zsh" "-n" "-d" "-f" source)
      :error-patterns
      ((error line-start (file-name) ":" line ": " (message) line-end))
      :modes sh-mode
      :predicate (lambda () (eq sh-shell 'zsh)))

This syntax checker for the Zsh shell is enabled in `sh-mode' as
specified by `:modes', however it specifies an additional `:predicate'
to determine whether the right shell is in use.  Hence this syntax
checker is only used if a Zsh shell scripting is being edited in
`sh-mode', but not if a Bash or POSIX Shell script is being edited.

A syntax checker may even go as far as not having `:modes' at all.  For
instance, there is no special JSON mode, but syntax checking JSON is
still desirable.  Hence a JSON syntax checker may use the `:predicate'
to check the file extension:

    (flycheck-define-checker json-jsonlint
      "A JSON syntax and style checker using jsonlint.

    See URL `https://github.com/zaach/jsonlint'."
      :command ("jsonlint" "-c" "-q" source)
      :error-patterns
      ((error line-start
              (file-name)
              ": line " line
              ", col " column ", "
              (message) line-end))
      :predicate
      (lambda ()
        (or
         (eq major-mode 'json-mode)
         (and buffer-file-name
              (string= "json" (file-name-extension buffer-file-name))))))

This syntax checker is now used whenever a file ends with `.json',
regardless of the major mode.


File: flycheck.info,  Node: Configuration files for syntax checkers,  Next: Chaining syntax checkers,  Prev: Syntax checkers with predicates,  Up: Examples

8.6.3 Configuration files for syntax checkers
---------------------------------------------

Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

    (flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

    (flycheck-define-checker javascript-jshint
      "A JavaScript syntax and style checker using jshint.

    See URL `http://www.jshint.com'."
      :command ("jshint" "--checkstyle-reporter"
                (config-file "--config" flycheck-jshintrc) source)
      :error-parser flycheck-parse-checkstyle
      :modes (js-mode js2-mode js3-mode))

As you can see, we define a syntax checker for Javascript, using the
`jshint' utility.  This utility accepts a configuration file via the
`--config' option.

To use a configuration file with jshint, we first declare the variable
`flycheck-jshintrc' that provides the name of the file, as explained in
*note Syntax checker configuration files: 68.

In the `:command' we use a `config-file' form to pass the configuration
file to the syntax checker.  If the configuration file is found, its
path will be passed to the syntax checker, using the option specified
after the `config-file' symbol.  Otherwise the whole element is simply
omitted from the command line.

Some Syntax checkers can also be configured using options passed on the
command line.  Flycheck supports this case, too.  We will use this
facility to extend the PHP CodeSniffer syntax checker from the *note
Basic syntax checkers: 141. section with support for coding standards:

    (flycheck-def-option-var flycheck-phpcs-standard nil phpcs
      "The coding standard for PHP CodeSniffer."
      :type '(choice (const :tag "Default standard" nil)
                     (string :tag "Standard name" nil)))
    (put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

    (flycheck-declare-checker php-phpcs
      "A PHP syntax checker using PHP_CodeSniffer."
      :command '("phpcs" "--report=checkstyle"
                 (option "--standard=" flycheck-phpcs-standard)
                 source)
      :error-parser 'flycheck-parse-checkstyle
      :modes 'php-mode)

The syntax checker is pretty much the same as before, except that a new
element was added to `:command'.  This element passes the value of the
new option variable *note flycheck-phpcs-standard: eb. to the syntax
checker.  This variable is declared with the special macro *note
flycheck-def-option-var: 132. at the beginning.


File: flycheck.info,  Node: Chaining syntax checkers,  Prev: Configuration files for syntax checkers,  Up: Examples

8.6.4 Chaining syntax checkers
------------------------------

For many languages, more than a single syntax checker is applicable.
For instance, Emacs Lisp can be checked for syntactic corrections with
the byte code compiler, and for adherence to the Emacs Lisp
documentation style using Checkdoc.  PHP, too, can be syntax checked
with the PHP parser, and verified against coding styles using PHP
CodeSniffer.

To support such cases, syntax checkers can be *note chained: 56. using
the `:next-checkers'.  The standard PHP syntax checker uses this to run
PHP CodeSniffer if there are no syntax errors:

    (flycheck-define-checker php
      "A PHP syntax checker using the PHP command line interpreter.

    See URL `http://php.net/manual/en/features.commandline.php'."
      :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
                "-d" "log_errors=0" source)
      :error-patterns
      ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
              (message) " in " (file-name) " on line " line line-end))
      :modes (php-mode php+-mode)
      :next-checkers ((warnings-only . php-phpcs)))

Now PHP CodeSniffer will check the coding style, whenever a PHP syntax
check did not result in any errors, if PHP CodeSniffer syntax checker
is usable _and_ registered.


File: flycheck.info,  Node: Flycheck API,  Next: Flycheck news,  Prev: Extending Flycheck,  Up: Top

9 Flycheck API
**************

This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g. by implementing new error
parsers or more in-depth error analysis.  You will also find this API
helpful if you want to develop Flycheck itself.

* Menu:

* Error API::
* Builtin error parsers::
* Error parser API::
* Error filters::
* Syntax checker API::
* Builtin option filters::
* Builtin syntax checker predicates::
* Utilities::


File: flycheck.info,  Node: Error API,  Next: Builtin error parsers,  Up: Flycheck API

9.1 Error API
=============

Flycheck errors are represented by the CL structure *note
flycheck-error: 13a.  See *note Structures: (cl)Structures. for more
information about CL structures.

 -- CL Struct: flycheck-error
     A Flycheck error with the following slots.  Each of these slots
     may be `nil'.

      -- Slot: buffer
          The buffer object referring to the buffer this error belongs
          to.

               Note: You do not need to set this attribute when
               creating errors in an error parser.  Flycheck
               automatically keeps track of the buffer itself.

      -- Slot: checker
          The syntax checker that reported this error.

      -- Slot: filename
          A string containing the filename the error refers to.

      -- Slot: line
          An integer providing the line the error refers to.

      -- Slot: column
          An integer providing the column the error refers to.

          If this attribute is `nil', Flycheck will assume that the
          error refers to the whole line.

      -- Slot: message
          The human-readable error message as string.

      -- Slot: level
          The error level of the message, as symbol denoting an error
          level defined with *note flycheck-define-error-level: 25.

     There are two constructors to create new *note flycheck-error:
     13a. objects:

      -- Function: flycheck-error-new-at line column &optional level
               message &key checker filename buffer
          Create a new Flycheck error at the given LINE and COLUMN.

          LINE and COLUMN refer to the *note line: 14c. and *note
          column: 14d. of the new error.  The optional LEVEL and
          MESSAGE arguments fill the *note level: 14f. and
          cl-slot:`message' slots respectively.

          CHECKER, FILENAME and BUFFER are keyword arguments, for *note
          checker: 14a, *note filename: 14b. and *note buffer: 149.
          respectively.  BUFFER defaults to the current buffer, the
          other two default to `nil'.

               Warning: Due to a limitation of Common Lisp functions in
               Emacs Lisp, you must specify *all* optional arguments,
               that is, *both* LEVEL *and* MESSAGE, to pass any keyword
               arguments.

      -- Function: flycheck-error-new &rest attributes
          Create a new *note flycheck-error: 13a. with the given
          ATTRIBUTES.

          ATTRIBUTES is a property list, where each property specifies
          the value for the corresponding slot of *note flycheck-error:
          13a, for instance:

              (flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)

     The following functions and macros work on errors:

      -- Macro: flycheck-error-with-buffer err &rest forms
          Switch to the buffer of ERR and evaluate FORMS.

          If the buffer of ERR is not live, FORMS are not evaluated.

      -- Function: flycheck-error-line-region err
          Get the line region of ERR.

          ERR is a Flycheck error whose region to get.

          Return a cons cell `(BEG . END)' where BEG is the first
          non-whitespace character on the line ERR refers to, and END the
          end of the line.

      -- Function: flycheck-error-column-region err
          Get the error column region of ERR.

          ERR is a Flycheck error whose region to get.

          Return a cons cell `(BEG . END)' where BEG is the character
          before the error column, and END the actual error column, or nil
          if ERR has no column.

      -- Function: flycheck-error-thing-region thing err
          Get the region of THING at the column of ERR.

          ERR is a Flycheck error whose region to get.  THING is a
          understood by ``thing-at-point''.

          Return a cons cell `(BEG . END)' where BEG is the beginning of
          the THING at the error column, and END the end of the symbol.  If
          ERR has no error column, or if there is no THING at this column,
          return nil.

      -- Function: flycheck-error-pos err
          Get the buffer position of ERR.

          ERR is a Flycheck error whose position to get.

          The error position is the error column, or the first
          non-whitespace character of the error line, if ERR has no error column.

      -- Function: flycheck-error-format err
          Format ERR as human-readable string.

          Return a string that represents the given ERR.  This string does
          _not_ include the file name.

The following functions and variables may be used to analyze the errors
of a syntax check.

 -- Variable: flycheck-current-errors
          Variable properties: Automatically becomes buffer-local when
          set.

     A list of all errors and warnings in the current buffer.

 -- Function: flycheck-count-errors errors
     Count the number of warnings and errors in ERRORS.

     Return a cons cell whose ``car'' is the number of errors and whose
     ``car'' is the number of warnings.

 -- Function: flycheck-has-errors-p errors &optional level
     Determine if there are any ERRORS with LEVEL.

     If LEVEL is omitted check if ERRORS is not nil.


File: flycheck.info,  Node: Builtin error parsers,  Next: Error parser API,  Prev: Error API,  Up: Flycheck API

9.2 Builtin error parsers
=========================

 -- Function: flycheck-parse-with-patterns output checker _buffer
     Parse OUTPUT from CHECKER with error patterns.

     Uses the error patterns of CHECKER to tokenize the output and
     tries to parse each error token with all patterns, in the order
     of declaration.  Hence an error is never matched twice by two
     different patterns.  The pattern declared first always wins.

     _BUFFER is ignored.

     Return a list of parsed errors and warnings (as ``flycheck-error''
     objects).

 -- Function: flycheck-parse-checkstyle output _checker _buffer
     Parse Checkstyle errors from OUTPUT.

     Parse Checkstyle-like XML output.  Use this error parser for
     checkers that have an option to output errors in this format.

     _CHECKER and _BUFFER are ignored.

     See URL `http://checkstyle.sourceforge.net/'(1) for information
     about Checkstyle.

---------- Footnotes ----------

(1) http://checkstyle.sourceforge.net/


File: flycheck.info,  Node: Error parser API,  Next: Error filters,  Prev: Builtin error parsers,  Up: Flycheck API

9.3 Error parser API
====================

These functions can be used to implement custom error parsers:

 -- Function: flycheck-parse-xml-string xml
     Parse an XML string.

     Return the document tree parsed from XML in the form `(ROOT ATTRS
     BODY...)'.  ROOT is a symbol identifying the name of the root
     element.  ATTRS is an alist of the attributes of the root node.
     BODY is zero or more body elements, either as strings (in case of
     text nodes) or as XML nodes, in the same for as the root node.


File: flycheck.info,  Node: Error filters,  Next: Syntax checker API,  Prev: Error parser API,  Up: Flycheck API

9.4 Error filters
=================

 -- Function: flycheck-sanitize-errors errors
     Sanitize ERRORS.

     Sanitize ERRORS by trimming leading and trailing whitespace in
     all error messages, and by replacing 0 columns and empty error
     messages with nil.

     Returns sanitized ERRORS.

 -- Function: flycheck-collapse-error-message-whitespace errors
     Collapse whitespace in all messages of ERRORS.

     Return ERRORS.

 -- Function: flycheck-fold-include-errors


File: flycheck.info,  Node: Syntax checker API,  Next: Builtin option filters,  Prev: Error filters,  Up: Flycheck API

9.5 Syntax checker API
======================

 -- Function: flycheck-registered-checker-p checker
     Determine whether CHECKER is registered.

     A checker is registered if it is contained in
     *note `flycheck-checkers': 5c.

 -- Function: flycheck-substitute-argument arg checker
     Substitute ARG for CHECKER.

     ARG may be one of the following forms:

     STRING
          Return ARG unchanged.

     ``source'', ``source-inplace''

          Create a temporary file to check and return its path.  With
          ``source-inplace'' create the temporary file in the same
          directory as the original file.  The value of
          *note `flycheck-temp-prefix': 5a. is used as prefix of the file name.

          With ``source'', try to retain the non-directory component of
          the buffer's file name in the temporary file.

          ``source'' is the preferred way to pass the input file to a
          syntax checker.  ``source-inplace'' should only be used if the
          syntax checker needs other files from the source directory,
          such as include files in C.

     ``source-original''
          Return the path of the actual file to check, or an empty
          string if the buffer has no file name.

          Note that the contents of the file may not be up to date
          with the contents of the buffer to check.  Do not use this
          as primary input to a checker, unless absolutely necessary.

          When using this symbol as primary input to the syntax
          checker, add *note `flycheck-buffer-saved-p': 165. to the ``:predicate''.

     ``temporary-directory''
          Create a unique temporary directory and return its path.

     ``temporary-file-name''
          Return a unique temporary filename.  The file is *not*
          created.

     `(config-file OPTION VARIABLE)'
          Search the configuration file bound to VARIABLE with
          *note `flycheck-locate-config-file': 166. and return a list of arguments
          that pass this configuration file to the syntax checker, or
          nil if the configuration file was not found.

          If OPTION ends with a = character, the returned list
          contains a single element only, being the concatenation of
          OPTION and the path of the configuration file.  Otherwise
          the list has two items, the first being OPTION, the second
          the path of the configuration file.

     `(option OPTION VARIABLE [FILTER])'
          Retrieve the value of VARIABLE and return a list of
          arguments that pass this value as value for OPTION to the
          syntax checker.

          FILTER is an optional function to be applied to the value of
          VARIABLE.  This function must return nil or a string.  In
          the former case, return nil.  In the latter case, return a
          list of arguments as described above.  If OPTION ends with a
          =, process it like in a ``config-file'' cell (see above).

     `(option-list OPTION VARIABLE [PREPEND-FN [FILTER]])'
          Retrieve the value of VARIABLE, which must be a list,
          and prepend OPTION before each item in this list, using
          PREPEND-FN.

          PREPEND-FN is called with the OPTION and each item of the
          list as second argument, and should return OPTION prepended
          before the item, either as string or as list.  If omitted,
          PREPEND-FN defaults to ``list''.

          FILTER is an optional function to be applied to each item in
          the list.  Items for which FILTER returns nil are dropped.

          If the list is non-nil after the application of FILTER,
          return a flattened list with OPTION prepended to each ITEM
          in the value of VARIABLE after the application of FILTER.

     `(option-flag OPTION VARIABLE)'
          Retrieve the value of VARIABLE and return OPTION, if the
          value is non-nil.  Otherwise return nil.

     `(eval FORM)'
          Return the result of evaluating FORM in the buffer to be
          checked.  FORM must either return a string or a list of
          strings, or nil to indicate that nothing should be
          substituted for CELL.  For all other return types, signal an
          error

          _No_ further substitutions are performed, neither in FORM
          before it is evaluated, nor in the result of evaluating
          FORM.

     In all other cases, signal an error.

     Note that substitution is *not* recursive.  No symbols or cells
     are substituted within the body of cells!

 -- Function: flycheck-locate-config-file filename checker
     Locate the configuration file FILENAME for CHECKER.

     Locate the configuration file using
     *note `flycheck-locate-config-file-functions': 6a.

     Return the absolute path of the configuration file, or nil if no
     configuration file was found.

 -- Function: flycheck-define-error-level level &rest properties
     Define a new error LEVEL with PROPERTIES.

     The following PROPERTIES constitute an error level:

     `:overlay-category CATEGORY'
          A symbol denoting the overlay category to use for error
          highlight overlays for this level.  See Info
          node *note Overlay Properties: (elisp)Overlay Properties. for more information about
          overlay categories.

          A category for an error level overlay should at least define
          the ``face'' property, for error highlighting.  Other useful
          properties for error level categories are ``priority'' to
          influence the stacking of multiple error level overlays, and
          ``help-echo'' to define a default error messages for errors
          without messages.

     `:fringe-bitmap BITMAP'
          A fringe bitmap symbol denoting the bitmap to use for fringe
          indicators for this level.  See Info node *note Fringe Bitmaps: (elisp)Fringe Bitmaps. for more information about fringe bitmaps,
          including a list of built-in fringe bitmaps.

     `:fringe-face FACE'
          A face symbol denoting the face to use for fringe indicators
          for this level.

     `:error-list-face FACE'
          A face symbol denoting the face to use for messages of this
          level in the error list.  See *note `flycheck-list-errors': 47.


File: flycheck.info,  Node: Builtin option filters,  Next: Builtin syntax checker predicates,  Prev: Syntax checker API,  Up: Flycheck API

9.6 Builtin option filters
==========================

 -- Function: flycheck-option-int value
     Convert an integral option VALUE to a string.

     If VALUE is nil, return nil.  Otherwise return VALUE converted to
     a string.

 -- Function: flycheck-option-comma-separated-list value &optional
          separator filter
     Convert VALUE into a list separated by SEPARATOR.

     SEPARATOR is a string to separate items in VALUE, defaulting to
     ",".  FILTER is an optional function, which takes a single
     argument and returns either a string or nil.

     If VALUE is a list, apply FILTER to each item in VALUE, remove
     all nil items, and return a single string of all remaining items
     separated by SEPARATOR.

     Otherwise, apply FILTER to VALUE and return the result.
     SEPARATOR is ignored in this case.


File: flycheck.info,  Node: Builtin syntax checker predicates,  Next: Utilities,  Prev: Builtin option filters,  Up: Flycheck API

9.7 Builtin syntax checker predicates
=====================================

 -- Function: flycheck-buffer-saved-p &optional buffer
     Determine whether BUFFER is saved to a file.

     BUFFER is the buffer to check.  If omitted or nil, use the
     current buffer as BUFFER.

     Return non-nil if the BUFFER is backed by a file, and not
     modified, or nil otherwise.


File: flycheck.info,  Node: Utilities,  Prev: Builtin syntax checker predicates,  Up: Flycheck API

9.8 Utilities
=============

 -- Function: flycheck-rx-to-string form &optional no-group
     Like ``rx-to-string'' for FORM, but with special keywords:

     ``line''
          matches the line number.

     ``column''
          matches the column number.

     `(file-name SEXP ...)'
          matches the file name.  SEXP constitutes the body of the message.  If no
          SEXP is given, use a default body  of `(minimal-match
          (one-or-more not-newline))'.

     `(message SEXP ...)'
          matches the message. SEXP constitutes the body of the message.  If no SEXP
          is given, use a default body of `(one-or-more not-newline)'.

     NO-GROUP is passed to ``rx-to-string''.

 -- Function: flycheck-string-list-p obj
     Determine if OBJ is a list of strings.

 -- Function: flycheck-symbol-list-p obj
     Determine if OBJ is a list of symbols.


File: flycheck.info,  Node: Flycheck news,  Next: Changes,  Prev: Flycheck API,  Up: Top

10 Flycheck news
****************

* Menu:

* Jun 12, 2014 — Flycheck 0.19 released: Jun 12 2014 — Flycheck 0 19 released.
* Mar 24, 2014 — Flycheck 0.18 released: Mar 24 2014 — Flycheck 0 18 released.
* Feb 1, 2014 — Flycheck 0.17 released: Feb 1 2014 — Flycheck 0 17 released.
* Jan 12, 2014 — Flycheck 0.16 released: Jan 12 2014 — Flycheck 0 16 released.
* Nov 15, 2013 – Flycheck 0.15 released: Nov 15 2013 – Flycheck 0 15 released.


File: flycheck.info,  Node: Jun 12 2014 — Flycheck 0 19 released,  Next: Mar 24 2014 — Flycheck 0 18 released,  Up: Flycheck news

10.1 Jun 12, 2014 — Flycheck 0.19 released
============================================

We are pleased to announce the release of Flycheck 0.19.

* Menu:

* Breaking changes::
* Languages::
* New features::
* Bug fixes::
* Misc changes::
* Get it::


File: flycheck.info,  Node: Breaking changes,  Next: Languages,  Up: Jun 12 2014 — Flycheck 0 19 released

10.1.1 Breaking changes
-----------------------

*note ruby-rubylint: fe. requires Ruby Lint 2.0 or newer, due to some
breaking changes in the command line interface of Ruby Lint.


File: flycheck.info,  Node: Languages,  Next: New features,  Prev: Breaking changes,  Up: Jun 12 2014 — Flycheck 0 19 released

10.1.2 Languages
----------------

* Menu:

* C/C++: C/C++<2>.
* Emacs Lisp: Emacs Lisp<2>.
* Go: Go<2>.
* Haskell: Haskell<2>.
* Rust: Rust<2>.


File: flycheck.info,  Node: C/C++<2>,  Next: Emacs Lisp<2>,  Up: Languages

10.1.2.1 C/C++
..............

The new *note flycheck-cppcheck-inconclusive: 9f. enables *note
c/c++-cppcheck: 8b. tests that might yield false positives.

When reporting errors in included files, *note c/c++-clang: 8a. now
includes the error messages in the faulty include file in the error
message on the affected `#include' statement.


File: flycheck.info,  Node: Emacs Lisp<2>,  Next: Go<2>,  Prev: C/C++<2>,  Up: Languages

10.1.2.2 Emacs Lisp
...................

Flycheck now removes redundant whitespace in the error messages
reported by the *note emacs-lisp: b1. syntax checker.


File: flycheck.info,  Node: Go<2>,  Next: Haskell<2>,  Prev: Emacs Lisp<2>,  Up: Languages

10.1.2.3 Go
...........

Go code is now checked for unhandled error return values with the new
*note go-errcheck: c1. syntax checker.

Flycheck does not longer signal errors in Go Mode, when the `go'
executable is not available.


File: flycheck.info,  Node: Haskell<2>,  Next: Rust<2>,  Prev: Go<2>,  Up: Languages

10.1.2.4 Haskell
................

Flycheck now dedents the error messages reported by *note haskell-ghc:
c8, and properly checks Haskell files without extensions.


File: flycheck.info,  Node: Rust<2>,  Prev: Haskell<2>,  Up: Languages

10.1.2.5 Rust
.............

*note rust: 104. has a new *note flycheck-rust-check-tests: 105.
option, to disable syntax checking of test code.


File: flycheck.info,  Node: New features,  Next: Bug fixes,  Prev: Languages,  Up: Jun 12 2014 — Flycheck 0 19 released

10.1.3 New features
-------------------

Syntax checkers may now use the `:error-filter' argument to *note
flycheck-define-checker: 19. to apply a function to all errors after
parsing.  The function is given the list of parsed errors, and shall
return the list of errors that Flycheck is to use as the result of the
syntax checker.  It may modify the list and all error objects therein
in-place.

The new option `flycheck-keymap-prefix' lets you change the prefix key
used by Flycheck.  The default is still `C-c !'.

     Warning: The Flycheck manual assumes that you are using the
     default prefix key.  You are encouraged to leave the prefix key
     unchanged, and instead add your own custom bindings to the
     Flycheck key map:

         (eval-after-load 'flycheck
           '(define-key flycheck-mode-map (kbd "<f8>") #'flycheck-list-errors))

Likewise, you now can configure the prefix of in-place temporary files
created by Flycheck with *note flycheck-temp-prefix: 5a.

     Warning: Changing the prefix may break syntax checkers.  In doubt,
     stick to the default prefix.


File: flycheck.info,  Node: Bug fixes,  Next: Misc changes,  Prev: New features,  Up: Jun 12 2014 — Flycheck 0 19 released

10.1.4 Bug fixes
----------------

Flycheck now correctly kills running process and removes the temporary
files when stopping a syntax check or killing the buffer.

Also, Flycheck does not long warn if a syntax checker only reports
errors for other files.


File: flycheck.info,  Node: Misc changes,  Next: Get it,  Prev: Bug fixes,  Up: Jun 12 2014 — Flycheck 0 19 released

10.1.5 Misc changes
-------------------

Flycheck now has an official logo, and its own mail address.  You can
see both on the Github profile(1) of the Flycheck project.

---------- Footnotes ----------

(1) https://github.com/flycheck/


File: flycheck.info,  Node: Get it,  Prev: Misc changes,  Up: Jun 12 2014 — Flycheck 0 19 released

10.1.6 Get it
-------------

See *note Installation: 30.


File: flycheck.info,  Node: Mar 24 2014 — Flycheck 0 18 released,  Next: Feb 1 2014 — Flycheck 0 17 released,  Prev: Jun 12 2014 — Flycheck 0 19 released,  Up: Flycheck news

10.2 Mar 24, 2014 — Flycheck 0.18 released
============================================

Today, we release Flycheck 0.18.

It's quite some time since the last release, but there are not many big
changes, as Flycheck becomes more and more mature, and slowly
approaches a 1.0 release.

* Menu:

* Breaking changes: Breaking changes<2>.
* Syntax checkers: Syntax checkers<2>.
* Bug fixes: Bug fixes<2>.
* Get it: Get it<2>.


File: flycheck.info,  Node: Breaking changes<2>,  Next: Syntax checkers<2>,  Up: Mar 24 2014 — Flycheck 0 18 released

10.2.1 Breaking changes
-----------------------

There are some small breaking changes.  Most notably, the naming
conventions of various shell script syntax checkers were changed.  All
of them now use the prefix `sh-', and the former `sh-' checkers now
have the prefix `sh-posix-'.  This affects their executable variables
as well.

Furthermore, the version requirements for some syntax checker tools
changed:

   - *note rust: 104.  needs upcoming Rust 0.10 now, because Flycheck
     followed backwards-incompatible upstream changes in the `rustc'
     options.

   - *note rst-sphinx: fa. needs Sphinx 1.2 now, because Flycheck uses a
     special writer now, which is not present in previous releases.


File: flycheck.info,  Node: Syntax checkers<2>,  Next: Bug fixes<2>,  Prev: Breaking changes<2>,  Up: Mar 24 2014 — Flycheck 0 18 released

10.2.2 Syntax checkers
----------------------

Flycheck can now check BSD Makefile with BSD Make as well.  The *note
make: e0. syntax checker does not use GNU Make specific options
anymore, and will work with any POSIX compatible variant of Make.

Go syntax checking got a major update with new syntax checkers based on
Golint(1) (*note go-golint: bd.) and `go tool vet' (*note go-vet: be.).
Go now has one of the most complete and powerful syntax checker chains
in Flycheck.

Support for Perl and for shell scripts was greatly improved by
introducing two new syntax checkers:

   - *note perl-perlcritic: e4. checks Perl with the powerful
     Perl-Critic(2) tool.

   - *note sh-shellcheck: 112. checks Shell scripts with the awesome
     Shellcheck(3) tool, which finds all sorts of idiomatic and
     semantics mistakes in shell scripts of various shell languages,
     and will greatly improve your shell scripting.

D users can now tell *note d-dmd: ac. about include directories with the
new option *note flycheck-dmd-include-path: ad.  Likewise, Rust users
can use *note flycheck-rust-library-path: 107. now.

---------- Footnotes ----------

(1) https://github.com/golang/lint

(2) https://metacpan.org/pod/Perl::Critic

(3) https://github.com/koalaman/shellcheck


File: flycheck.info,  Node: Bug fixes<2>,  Next: Get it<2>,  Prev: Syntax checkers<2>,  Up: Mar 24 2014 — Flycheck 0 18 released

10.2.3 Bug fixes
----------------

As always, a good deal of bugs and issues was fixed:

   - *note puppet-lint: ee. includes the name of the corresponding
     check in the error message now.

   - *note rst: f9. handles `.. include::' directives with relative file
     names now.

   - *note rst-sphinx: fa. will no longer choke if the document being
     checked contains custom nodes without `text'  writers.

   - *note rust: 104. will not longer emit pointless warnings about
     missing `main' functions in library creates.

   - Various error parsing problems were corrected in *note
     c/c++-clang: 8a, *note go-build: bf. and *note go-test: c0.


File: flycheck.info,  Node: Get it<2>,  Prev: Bug fixes<2>,  Up: Mar 24 2014 — Flycheck 0 18 released

10.2.4 Get it
-------------

See *note Installation: 30.


File: flycheck.info,  Node: Feb 1 2014 — Flycheck 0 17 released,  Next: Jan 12 2014 — Flycheck 0 16 released,  Prev: Mar 24 2014 — Flycheck 0 18 released,  Up: Flycheck news

10.3 Feb 1, 2014 — Flycheck 0.17 released
===========================================

Flycheck 0.17 was released today.  Though it's just about two weeks
since the last release, there are quite some changes.

* Menu:

* Breaking changes: Breaking changes<3>.
* New online manual::
* Syntax checkers: Syntax checkers<3>.
* Extending syntax checkers: Extending syntax checkers<2>.
* Other bug fixes and improvements::


File: flycheck.info,  Node: Breaking changes<3>,  Next: New online manual,  Up: Feb 1 2014 — Flycheck 0 17 released

10.3.1 Breaking changes
-----------------------

The default value of *note flycheck-completion-system: 63. was changed
to `nil', i.e. Flycheck now uses plain `completing-read' as default
completion system.  To restore the previous default (i.e. IDO),
customize it with `M-x customize-variable RET
flycheck-completion-system' or add the following to your `init.el':

    (eval-after-load 'flycheck '(setq flycheck-completion-system 'ido))

Also, *note flycheck-count-errors: 158. was changed to count errors of
all levels.  It returns an alist mapping error levels to the amount of
errors of that level.


File: flycheck.info,  Node: New online manual,  Next: Syntax checkers<3>,  Prev: Breaking changes<3>,  Up: Feb 1 2014 — Flycheck 0 17 released

10.3.2 New online manual
------------------------

The most notable change is the new online documentation at
<http://flycheck.readthedocs.org>, which replaces the old online manual
at <http://flycheck.github.io>.  The latter now redirects to the former.

The new manual is written with Sphinx(1) instead of Texinfo(2).  The
underlying markup is ReStructuredText(3), which is simpler, less
cluttered, and more powerful than the TeX dialect of Texinfo(4).  It is
also more popular, as nowadays Sphinx has become a standard tool among
Python developers, and is also increasingly used with other languages
as well.  For instance, the LLVM documentation(5) is written in Sphinx.

Besides providing a better HTML documentation, we hope that the new
manual lowers the barrier to external contributors and increases the
amount of contributions to the documentation.

The documentation is now automatically re-build after each push to the
Github repository, so that <http://flycheck.readthedocs.org/en/latest>
now always hosts the up to date documentation.  Besides, there are
separate sites for each versioned release of Flycheck.  For instance,
<http://flycheck.readthedocs.org/en/0.17> now hosts the documentation
of Flycheck 0.17 now.

Beyond the manual itself, the new documentation now also includes the
release notes, which were previously hosted at
<http://www.lunaryorn.com>, and the *note comparison with Flymake: d,
which was previously hosted at the Github Wiki of Flycheck.  The Github
Wiki is disabled now, to make all documentation available from a single
place.

Unfortunately, the Info manual included in the Flycheck ELPA packages is
somewhat inferior now, because there is some idiomatic gap between
Sphinx and Texinfo.  It's still usable, though, and we hope to overcome
the most striking shortcomings over the time.

---------- Footnotes ----------

(1) http://sphinx-doc.org

(2) http://www.gnu.org/software/texinfo/

(3) http://docutils.sourceforge.net/rst.html

(4) http://www.gnu.org/software/texinfo/

(5) http://llvm.org/docs/


File: flycheck.info,  Node: Syntax checkers<3>,  Next: Extending syntax checkers<2>,  Prev: New online manual,  Up: Feb 1 2014 — Flycheck 0 17 released

10.3.3 Syntax checkers
----------------------

Flycheck can now check GNU Makefiles (#321(1)) with the new `make-gmake'
syntax checker.

The *note rust: 104. syntax checker now uses `--no-trans' to check for
more than just syntax errors.  For instance, it will report unused
variables now.

As part of the transition to the new manual, Flycheck now provides a
syntax checker for Sphinx documents (*note rst-sphinx: fa.).  The *note
rst: f9. syntax checker does not check documents within a Sphinx
project anymore, do avoid false positives from Sphinx-specific markup.

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/321


File: flycheck.info,  Node: Extending syntax checkers<2>,  Next: Other bug fixes and improvements,  Prev: Syntax checkers<3>,  Up: Feb 1 2014 — Flycheck 0 17 released

10.3.4 Extending syntax checkers
--------------------------------


File: flycheck.info,  Node: Other bug fixes and improvements,  Prev: Extending syntax checkers<2>,  Up: Feb 1 2014 — Flycheck 0 17 released

10.3.5 Other bug fixes and improvements
---------------------------------------

   - Flycheck does not longer attach syntax checker processes to the
     buffer anymore, improving compatibility with Tabbar Mode (#298(1)).

   - The *note emacs-lisp: b1. and *note emacs-lisp-checkdoc: b2. syntax
     checkers do not visit the file being checked anymore, to avoid
     unintended side effects from unsafe local variables, etc. (#319(2))

   - When a buffer changes while being checked, Flycheck immediately
     re-checks the buffer after the check finished, to avoid outdated
     errors (#301(3)).

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/298

(2) https://github.com/flycheck/flycheck/issues/319

(3) https://github.com/flycheck/flycheck/issues/301


File: flycheck.info,  Node: Jan 12 2014 — Flycheck 0 16 released,  Next: Nov 15 2013 – Flycheck 0 15 released,  Prev: Feb 1 2014 — Flycheck 0 17 released,  Up: Flycheck news

10.4 Jan 12, 2014 — Flycheck 0.16 released
============================================

Time for a new release of Flycheck, the modern syntax-checking
extension for Emacs:

In two months since the last release, Flycheck got a bunch of new syntax
checkers, a brand-new error list, and the ability to override the
executables of syntax checkers.

Let's go through the list of important changes.  For a detailed list,
please read the *note changelog: 18e.

* Menu:

* Breaking changes: Breaking changes<4>.
* Syntax checkers: Syntax checkers<4>.
* New features: New features<2>.
* Improved error list::
* Get it: Get it<3>.


File: flycheck.info,  Node: Breaking changes<4>,  Next: Syntax checkers<4>,  Up: Jan 12 2014 — Flycheck 0 16 released

10.4.1 Breaking changes
-----------------------

   - The Hdevtools syntax checker was removed from Flycheck into a
     separate package flycheck-hdevtools(1) due to various issues
     (#275(2)).

   - Support for coffeelint 0.x is dropped.

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck-hdevtools

(2) https://github.com/flycheck/flycheck/issues/275


File: flycheck.info,  Node: Syntax checkers<4>,  Next: New features<2>,  Prev: Breaking changes<4>,  Up: Jan 12 2014 — Flycheck 0 16 released

10.4.2 Syntax checkers
----------------------

* Menu:

* New languages and checkers::
* Better Haskell support::
* Miscellaneous new options::


File: flycheck.info,  Node: New languages and checkers,  Next: Better Haskell support,  Up: Syntax checkers<4>

10.4.2.1 New languages and checkers
...................................

Flycheck supports _eight_ new languages: AsciiDoc(1), Cfengine(2),
Chef(3) recipes, ERuby(4), Handlebars(5), Racket(6), Texinfo(7), and
Verilog(8).  Additionally, there are a new syntax checker for
Javascript (eslint(9)), Ruby (ruby-lint(10)), and YAML (js-yaml(11)).

---------- Footnotes ----------

(1) http://asciidoc.org/

(2) http://cfengine.com/

(3) http://www.getchef.com/

(4) http://www.kuwata-lab.com/erubis/

(5) http://handlebarsjs.com/

(6) http://racket-lang.org/

(7) https://www.gnu.org/software/texinfo

(8) https://en.wikipedia.org/wiki/Verilog

(9) https://github.com/eslint/eslint

(10) https://github.com/YorickPeterse/ruby-lint

(11) https://github.com/visionmedia/js-yaml


File: flycheck.info,  Node: Better Haskell support,  Next: Miscellaneous new options,  Prev: New languages and checkers,  Up: Syntax checkers<4>

10.4.2.2 Better Haskell support
...............................

Despite the aforementioned removal of Hdevtools, Haskell support made a
leap forward.  The GHC syntax checker resolves local imports properly
now, and has new options to change the search path and the package
databases.

The brand-new flycheck-haskell(1) extension makes use of these
variables to configure the syntax checker properly in Cabal projects.
The extensions adds all source directories of a Cabal project to the
GHC search path, and enables the package database of the project's
Cabal sandbox.

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck-haskell


File: flycheck.info,  Node: Miscellaneous new options,  Prev: Better Haskell support,  Up: Syntax checkers<4>

10.4.2.3 Miscellaneous new options
..................................

   - The SASS and SCSS syntax checkers support the Compass framework
     now, via *note flycheck-sass-compass: 10a. and *note
     flycheck-scss-compass: 10f.  respectively.

   - Clang can enable Microsoft C/C++ extensions now, via *note
     flycheck-clang-ms-extensions: 92.

   - Rubocop can inhibit all style hints via the new *note
     flycheck-rubocop-lint-only: ff.


File: flycheck.info,  Node: New features<2>,  Next: Improved error list,  Prev: Syntax checkers<4>,  Up: Jan 12 2014 — Flycheck 0 16 released

10.4.3 New features
-------------------

* Menu:

* Syntax checker executables: Syntax checker executables<2>.
* Disable syntax checkers easily::


File: flycheck.info,  Node: Syntax checker executables<2>,  Next: Disable syntax checkers easily,  Up: New features<2>

10.4.3.1 Syntax checker executables
...................................

You can now override the executables of syntax checkers.  See *note
Syntax checker executables: 66. for details.


File: flycheck.info,  Node: Disable syntax checkers easily,  Prev: Syntax checker executables<2>,  Up: New features<2>

10.4.3.2 Disable syntax checkers easily
.......................................

Flycheck as a new customization options *note
flycheck-disabled-checkers: 5d, to easily disable syntax checkers.

Previously, you needed to remove syntax checkers from *note
flycheck-checkers: 5c. to disable them, either via the Customization
interface, or by custom Emacs Lisp:

    (setq flycheck-checkers (delq 'emacs-lisp-checkdoc flycheck-checkers))

With the new variable, there is no need for this convoluted code
anymore.  Instead, just set the variable:

    (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))

Even better, you can easily use this variable in file or directory
variables.  For instance, you can use `M-x add-file-local-variable RET
flycheck-disabled-checkers RET (emacs-lisp-checkdoc)' in your `init.el'
to disable Checkdoc warnings while editing your `init.el'.


File: flycheck.info,  Node: Improved error list,  Next: Get it<3>,  Prev: New features<2>,  Up: Jan 12 2014 — Flycheck 0 16 released

10.4.4 Improved error list
--------------------------

This release continues the improvements to the error list started in
the last release.  The error list is now based on Tabulated List Mode
(see #230(1)), to address a number of issues in the old Compile
Mode-based error list (e.g. misleading commands and menu items such as
“Recompile”).

The new error list, which you can see in the screenshot above, fixes
these issues, and has an improved visual appearance.  The columns are
aligned now, and the superfluous file name is omitted.

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/230


File: flycheck.info,  Node: Get it<3>,  Prev: Improved error list,  Up: Jan 12 2014 — Flycheck 0 16 released

10.4.5 Get it
-------------

See *note Installation: 30.


File: flycheck.info,  Node: Nov 15 2013 – Flycheck 0 15 released,  Prev: Jan 12 2014 — Flycheck 0 16 released,  Up: Flycheck news

10.5 Nov 15, 2013 – Flycheck 0.15 released
============================================

I have the honour and pleasure to announce a new release of Flycheck,
the modern syntax-checking extension for Emacs.

It is three months since the last release, so this release brings quite
a lot of changes.  For a complete list of all changes, please read the
complete list of *note changes: 18e.  This article will just cover the
most important changes.

* Menu:

* Breaking changes: Breaking changes<5>.
* New syntax checkers::
* New error list::
* C/C++ support::
* New info level messages::
* Custom error levels::
* Other improvements::
* Get it: Get it<4>.


File: flycheck.info,  Node: Breaking changes<5>,  Next: New syntax checkers,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.1 Breaking changes
-----------------------

This release introduces three breaking changes.  Two of these are
related to the *note new-error-list: 19f.:

     Warning: `flycheck-display-errors-in-list' is gone.  If you had
     previously set *note flycheck-display-errors-function: 28. to this
     function, *remove* this setting from your configuration.

Besides, `flycheck-list-errors' does not take a prefix argument
anymore.  It cannot list errors at point any longer.

The third breaking change is the removal of `flycheck-declare-checker',
which was obsolete already since the last release.  Unless you have
custom syntax checkers not yet ported to *note flycheck-define-checker:
19, this won't affect you in any way.  I am not aware of any 3rd party
extension which still uses `flycheck-declare-checker'.


File: flycheck.info,  Node: New syntax checkers,  Next: New error list,  Prev: Breaking changes<5>,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.2 New syntax checkers
--------------------------

Two new languages made it into this release:  YAML (using the YAML
parser from the Ruby standard library) and Slim(1).

Additionally there are new syntax checkers for Javascript and PHP.
Flycheck can check Javascript with Google's Closure Linter(2), in place
of Jshint.  For PHP, Flycheck now uses the PHP Mess Detector(3) to
check for semantic errors, in _addition_ to a syntax checks with PHP
CLI and a style checks with PHP CodeSniffer.

---------- Footnotes ----------

(1) http://slim-lang.com

(2) https://code.google.com/p/closure-linter/

(3) http://phpmd.org/


File: flycheck.info,  Node: New error list,  Next: C/C++ support,  Prev: New syntax checkers,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.3 New error list
---------------------

The error list at `C-c ! l' has been redesigned.

It is no longer a static list filled once by `C-c ! l'.  Instead, it
automatically updates after each syntax check, and follows the current
window, i.e. if you switch to another window, the error list is updated
to show the errors of the corresponding buffer.

Furthermore, the error list highlights the errors at point and at the
current line.  If you move the point to an error location, the error
list automatically scrolls to the corresponding error, and highlights
it with the new *note flycheck-error-list-highlight-at-point: 7c. face.
Additionally, it highlights all other errors at the current line with
the new *note flycheck-error-list-highlight: 7d. face.


File: flycheck.info,  Node: C/C++ support,  Next: New info level messages,  Prev: New error list,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.4 C/C++ support
--------------------

The *note c/c++-clang: 8a. syntax checker for C and C++ got a bunch of
new options:

   - Set additional preprocessor definitions for syntax checking with
     *note flycheck-clang-definitions: 8d, corresponding to the `-D'
     option for `clang'.

   - Include additional headers or files during syntax checking with
     *note flycheck-clang-includes: 90, corresponding to the `-include'
     option for `clang'.

   - Choose the language standard, e.g. C++98 or C++11, with *note
     flycheck-clang-language-standard: 91, corresponding to the `-std'
     option for `clang'.

   - Disable RTTI during syntax checking with *note
     flycheck-clang-no-rtti: 94, corresponding to the `-fno-rtti'
     option for `clang'.  In current Clang versions, however, this does
     not cause errors or warnings when using RTTI.

   - Choose the standard library for syntax checking with *note
     flycheck-clang-standard-library: 95, corresponding to the `-stdlib'
     option for `clang'.  Currently, Clang supports `libstdc++' for the
     good old GNU standard library, and `libc++' for the modern Libc++
     from the LLVM project.

Besides, the Clang syntax checker was changed to correctly handle local
include files, e.g. `#include "foo.h"'.


File: flycheck.info,  Node: New info level messages,  Next: Custom error levels,  Prev: C/C++ support,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.5 New `info' level messages
--------------------------------

In addition to the `warning' and `error' levels, Flycheck now has a new
`info' level, which is intended for informational messages which
provide additional information about a specific location in the source
code.  With this new level, the semantics of error levels is as follows:

`error'
     Definite errors which must be fixed for the source code to work
     correctly

`warning'
     Potential errors and issues, which can be ignored, but still
     deserve to be fixed

`info'
     Additional information about a specific source code location,
     which does not indicate an error or issue, but is still worth
     noting

Some syntax checkers were changed to use this new level for messages,
which do not really fit into the `warning' level:

   - *note c/c++-clang: 8a. for `note:' messages

   - *note python-flake8: f0. for PEP8 naming issues emitted by the
     `pep8-naming' plugin

   - *note python-pylint: f4. for convention level messages, e.g. naming
     issues, etc.

The new level is already supported by the popular Solarized(1) and
Zenburn(2) themes.

---------- Footnotes ----------

(1) https://github.com/bbatsov/solarized-emacs

(2) https://github.com/bbatsov/zenburn-emacs


File: flycheck.info,  Node: Custom error levels,  Next: Other improvements,  Prev: New info level messages,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.6 Custom error levels
--------------------------

The new `info' level is backed by a generic mechanism to define new
error levels, using the new function *note flycheck-define-error-level:
25.  For instance, the `warning' level is now defined as follows:

    (flycheck-define-error-level 'warning
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'question-mark
      :fringe-face 'flycheck-fringe-warning)

A error level consists of a category for overlays, which defines the
appearance and priority of overlays for this level, and bitmap and face
for fringe indicators.

After defining an error level, you can use it the error patterns of a
syntax checker as usual.


File: flycheck.info,  Node: Other improvements,  Next: Get it<4>,  Prev: Custom error levels,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.7 Other improvements
-------------------------

Beside these important changes, there are also a number of smaller
improvements:

   - Flycheck does not longer check encrypted files for obvious reasons.

   - The *note emacs-lisp-checkdoc: b2. syntax checker does not check
     `.dir-locals.el' anymore.

   - *note python-pylint: f4. now parses error columns from the output
     of `pylint'.

   - Spurious “flawed definition” warnings in *note lua: de, *note rst:
     f9. and *note go-build: bf. were fixed.

   - *note c/c++-cppcheck: 8b. output now parses correctly when using
     the pure Emacs Lisp XML parser in `xml.el'.

          Note: Nonetheless, you are advised to use Emacs with `libxml'
          support.  Most Linux distributions ship Emacs packages with
          `libxml' support, but if you are building your own, or use a
          source-based distribution such as Gentoo, take care to enable
          `libxml' for Emacs.


File: flycheck.info,  Node: Get it<4>,  Prev: Other improvements,  Up: Nov 15 2013 – Flycheck 0 15 released

10.5.8 Get it
-------------

See *note Installation: 30.


File: flycheck.info,  Node: Changes,  Next: Contribution guidelines,  Prev: Flycheck news,  Up: Top

11 Changes
**********

* Menu:

* master (in development): master in development.
* 0.19 (Jun 12, 2014): 0 19 Jun 12 2014.
* 0.18 (Mar 24, 2014): 0 18 Mar 24 2014.
* 0.17 (Feb 1, 2014): 0 17 Feb 1 2014.
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014.
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013.
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013.
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013.
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013.
* 0.12 (May 18, 2013): 0 12 May 18 2013.
* 0.11 (May 01, 2013): 0 11 May 01 2013.
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013.
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013.
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013.
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013.
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013.
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013.
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013.
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012.
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012.
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012.
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012.
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012.


File: flycheck.info,  Node: master in development,  Next: 0 19 Jun 12 2014,  Up: Changes

11.1 master (in development)
============================

   - *Breaking changes*:

        - The internal names of syntax checker properties changed.
          *All packages depending on Flycheck must be recompiled!*

   - New syntax checkers:

        - #408(1): C/C++ with GCC

   - New features:

        - #412(2): Add `flycheck-clang-no-exceptions' and
          `flycheck-gcc-no-exceptions' to flag exceptions as errors in
          C++

        - #417(3): Add `flycheck-rust-crate-root' to resolve
          inter-crate references in `rust'

        - #420(4): Add `flycheck-clang-blocks' to enable the block
          syntax in Clang

   - Improvements:

        - #421(5): Use proper temporary files in `python-flake8'

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/408

(2) https://github.com/flycheck/flycheck/issues/412

(3) https://github.com/flycheck/flycheck/issues/417

(4) https://github.com/flycheck/flycheck/issues/420

(5) https://github.com/flycheck/flycheck/issues/421


File: flycheck.info,  Node: 0 19 Jun 12 2014,  Next: 0 18 Mar 24 2014,  Prev: master in development,  Up: Changes

11.2 0.19 (Jun 12, 2014)
========================

   - #331(1): Flycheck now has an official logo

   - *Breaking changes*:

        - #405(2): The `ruby-rubylint' syntax checker now requires Ruby
          Lint 2.0 or newer.

   - New syntax checkers:

        - #393(3): Go with `errcheck'

   - New features:

        - #381(4): Add `flycheck-keymap-prefix' to change the prefix
          key for Flycheck keybindings

        - #387(5): Make the prefix of Flycheck's temporary files
          customizable with `flycheck-temp-prefix'

        - #397(6): Add `:error-filter' property for syntax checkers to
          apply a custom function to modify or filter errors after
          parsing

        - #406(7): Add `flycheck-rust-check-tests' to disable syntax
          checking of test code in Rust

        - #407(8): Add `flycheck-cppcheck-inconclusive' to enable
          cppcheck tests that might give false positives

   - Improvements:

        - #397(9): Collapse redundant whitespace in messages from
          `emacs-lisp'

        - #397(10): Dedent messages from `haskell-ghc'

        - #397(11): Fold errors in included files into the error
          messages of the corresponding include in `c/c++-clang'

        - #405(12): The `ruby-rubylint' syntax checker now supports
          ruby-lint 2.0 and newer.

   - Bug fixes:

        - #334(13): When stopping Flycheck, correctly kill running
          processes and cleanup their temporary files

        - Do not choke on files without extensions in `haskell-ghc'

        - #391(14): Fix spurious warning when a syntax checker reports
          errors, but not for the file being checked

        - Do not signal errors in Go Mode, when `go' is not available

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/331

(2) https://github.com/flycheck/flycheck/issues/405

(3) https://github.com/flycheck/flycheck/issues/393

(4) https://github.com/flycheck/flycheck/issues/381

(5) https://github.com/flycheck/flycheck/issues/387

(6) https://github.com/flycheck/flycheck/issues/397

(7) https://github.com/flycheck/flycheck/issues/406

(8) https://github.com/flycheck/flycheck/issues/407

(9) https://github.com/flycheck/flycheck/issues/397

(10) https://github.com/flycheck/flycheck/issues/397

(11) https://github.com/flycheck/flycheck/issues/397

(12) https://github.com/flycheck/flycheck/issues/405

(13) https://github.com/flycheck/flycheck/issues/334

(14) https://github.com/flycheck/flycheck/issues/391


File: flycheck.info,  Node: 0 18 Mar 24 2014,  Next: 0 17 Feb 1 2014,  Prev: 0 19 Jun 12 2014,  Up: Changes

11.3 0.18 (Mar 24, 2014)
========================

   - *Breaking changes*:

        - The POSIX script syntax checkers `sh-bash' and `sh-dash' were
          renamed to `sh-posix-bash' and `sh-posix-dash' respectively.
          The `bash' and `zsh' syntax checkers were renamed to
          `sh-bash' and `sh-zsh' respectively.  Thus, all shell script
          syntax checkers now live in the `sh-' prefix.

        - `rst-sphinx' requires Sphinx 1.2 or newer now.

        - #353(1): `rustc' requires Rust 0.10 (not yet released at the
          time of writing) or newer now

   - New syntax checkers:

        - #88(2): Perl with Perl Critic

        - #322(3): Replace GNU Make with POSIX Make

        - #267(4): Shellcheck

        - #328(5): Go with `golint'

        - #329(6): Go with `go tool vet'

   - New features:

        - Add `flycheck-rust-library-path' to specify library locations
          for `rust'

        - #344(7): Add `flycheck-dmd-include-path' to change the
          include path of `d-dmd'

   - Improvements:

        - `flycheck-parse-checkstyle' supports `info' level messages now

        - Correctly parse multiline error messages of `go-build' and
          `go-test'

        - `rst-sphinx' supports custom nodes without explicit writer
          support now, by using the `pseudoxml' builder.

        - Avoid warnings about missing main functions in `rust'

        - Properly resolve relative filenames in `.. include::'
          directives in `rst'

        - #348(8): Use `--unix_mode' option in `javascript-gjslint' to
          get the file name

        - Puppet Lint messages now include the name of the
          corresponding check

        - #353(9): `rustc' supports upcoming Rust 0.10 now

        - #367(10): Flycheck now handles Clang errors from included
          files

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/353

(2) https://github.com/flycheck/flycheck/issues/88

(3) https://github.com/flycheck/flycheck/issues/322

(4) https://github.com/flycheck/flycheck/issues/267

(5) https://github.com/flycheck/flycheck/issues/328

(6) https://github.com/flycheck/flycheck/issues/329

(7) https://github.com/flycheck/flycheck/issues/344

(8) https://github.com/flycheck/flycheck/issues/348

(9) https://github.com/flycheck/flycheck/issues/353

(10) https://github.com/flycheck/flycheck/issues/367


File: flycheck.info,  Node: 0 17 Feb 1 2014,  Next: 0 16 Jan 11 2014,  Prev: 0 18 Mar 24 2014,  Up: Changes

11.4 0.17 (Feb 1, 2014)
=======================

   - #274(1): The manual was ported to Sphinx(2) and is now located at
     <http://flycheck.readthedocs.org>

   - *Breaking changes*:

        - The default `flycheck-completion-system' was changed to nil,
          i.e. the built-in `completing-read', for compliance with
          Emacs' defaults.  To restore the previous behaviour, add
          `(eval-after-load 'flycheck '(setq flycheck-completion-system
          'ido))' to your `init.el'.

        - `flycheck-count-errors' counts errors of all levels now, and
          returns an alist mapping error symbols to error counts.

   - New syntax checkers:

        - RST (ReStructuredText) using Sphinx

        - #321(3): GNU Make

   - New features:

        - #266(4): Extend syntax checkers with
          `flycheck-add-next-checkers'

   - Improvements:

        - #301(5): Immediately re-check the buffer when it was changed
          during a syntax check

        - #305(6): Do not defer syntax checker after idle change timeout

        - Do not use the generic `rst' syntax checker in Sphinx
          projects anymore, to avoid false positives by Sphinx-only
          markup

        - #314(7): Check for more than just syntax errors in `rust'

        - `chef-foodcritic' supports `enh-ruby-mode' now

   - Bug fixes

        - #298(8): Do not attach syntax checker processes to the buffer
          anymore

        - #319(9): Do not visit the file to check in `emacs-lisp' and
          `emacs-lisp-checkdoc' to avoid unintended side effects

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/274

(2) http://sphinx-doc.org

(3) https://github.com/flycheck/flycheck/issues/321

(4) https://github.com/flycheck/flycheck/issues/266

(5) https://github.com/flycheck/flycheck/issues/301

(6) https://github.com/flycheck/flycheck/issues/305

(7) https://github.com/flycheck/flycheck/issues/314

(8) https://github.com/flycheck/flycheck/issues/298

(9) https://github.com/flycheck/flycheck/issues/319


File: flycheck.info,  Node: 0 16 Jan 11 2014,  Next: 0 15 Nov 15 2013,  Prev: 0 17 Feb 1 2014,  Up: Changes

11.5 0.16 (Jan 11, 2014)
========================

   - *Breaking changes*:

        - Argument substitution is no longer performed on syntax
          checker executables.  The executable must be a string.

        - #275(1): Split out `haskell-hdevtools' into a separate
          package.  See flycheck-hdevtools(2)

        - Drop support for coffeelint 0.x

        - #230(3): The error list is reimplemented on top of Tabulated
          List Mode.  This greatly changes the appearance and behaviour
          of the error list.

   - New syntax checkers:

        - #250(4): Ruby with `ruby-lint'

        - #270(5): Handlebars

        - #253(6): YAML with `yaml-jsyaml'

        - #255(7): Chef recipes with `foodcritic'

        - #276(8): AsciiDoc

        - #271(9): CFEngine

        - #277(10): Racket

        - Texinfo

        - #296(11): Verilog

        - #291(12): Javascript with `eslint'

        - #285(13): ERuby

   - New features:

        - #272(14): Define variables to override the executables of
          syntax checkers

        - #272(15): Interactively set the executable of a syntax
          checker with `flycheck-set-checker-executable'

        - #269(16): Disable syntax checkers easily with
          `flycheck-disabled-checkers'

        - #268(17): Add support for the Compass CSS framework in the
          `sass' and `scss' checkers, with `flycheck-sass-compass' and
          `flycheck-scss-compass' respectively

        - #287(18): Disable style checks in `ruby-rubocop' with
          `flycheck-rubocop-lint-only'

        - #283(19): Add support for Microsoft extensions in
          `c/c++-clang' via `flycheck-clang-ms-extensions'

        - #230(20): New faces `flycheck-error-list-info',
          `flycheck-error-list-warning', `flycheck-error-list-error',
          `flycheck-error-list-line-number' and
          `flycheck-error-list-column-number'

        - Add `flycheck-ghc-no-user-package-database' to disable the
          user package database for `haskell-ghc'

        - Add `flycheck-ghc-package-databases' to add additional
          package databases to `haskell-ghc'

        - Add `flycheck-ghc-search-path' to add additional directories
          to the search path of `haskell-ghc'

   - Improvements:

        - Demote Rubocop convention messages to `info' level

        - #282(21): Stop Flycheck before the buffer is reverted

        - Properly resolve local module imports in `haskell-ghc'

   - Bug fixes:

        - #280(22): Make relative imports work with `python-pylint'

        - Fix parsing of errors in `scss' and `sass'

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/275

(2) https://github.com/flycheck/flycheck-hdevtools

(3) https://github.com/flycheck/flycheck/issues/230

(4) https://github.com/flycheck/flycheck/issues/250

(5) https://github.com/flycheck/flycheck/issues/270

(6) https://github.com/flycheck/flycheck/issues/253

(7) https://github.com/flycheck/flycheck/issues/255

(8) https://github.com/flycheck/flycheck/issues/276

(9) https://github.com/flycheck/flycheck/issues/271

(10) https://github.com/flycheck/flycheck/issues/277

(11) https://github.com/flycheck/flycheck/issues/296

(12) https://github.com/flycheck/flycheck/issues/291

(13) https://github.com/flycheck/flycheck/issues/285

(14) https://github.com/flycheck/flycheck/issues/272

(15) https://github.com/flycheck/flycheck/issues/272

(16) https://github.com/flycheck/flycheck/issues/269

(17) https://github.com/flycheck/flycheck/issues/268

(18) https://github.com/flycheck/flycheck/issues/287

(19) https://github.com/flycheck/flycheck/issues/283

(20) https://github.com/flycheck/flycheck/issues/230

(21) https://github.com/flycheck/flycheck/issues/282

(22) https://github.com/flycheck/flycheck/issues/280


File: flycheck.info,  Node: 0 15 Nov 15 2013,  Next: 0 14 1 Aug 16 2013,  Prev: 0 16 Jan 11 2014,  Up: Changes

11.6 0.15 (Nov 15, 2013)
========================

   - Flycheck has a new home at <https://github.com/flycheck/flycheck>,
     the online manual moved to <http://flycheck.github.io>.

   - *Breaking changes*:

        - Do not add the current directory to the `emacs-lisp' syntax
          checker load path

        - #214(1): `flycheck-list-errors' cannot list errors at point
          anymore.  It does not accept a prefix argument anymore, and
          takes zero arguments now

        - #214(2): `flycheck-display-errors-in-list' is gone.  The
          error list automatically highlights the error at point now

        - Remove obsolete `flycheck-declare-checker'

   - New syntax checkers:

        - #236(3): YAML

        - #245(4): Javascript with `gjslint'

        - #246(5): Slim

        - #249(6): PHP using `phpmd'

   - New features:

        - Support IDO or Grizzl(7) as completion systems for
          `flycheck-select-checker' at `C-c ! s'

        - #202(8): Disable standard error navigation with
          `flycheck-standard-error-navigation'

        - #207(9): Add `flycheck-clang-language-standard' to choose the
          language standard for C/C++ syntax checking

        - #207(10): Add `flycheck-clang-definitions' to set additional
          definitions for C/C++ syntax checking

        - #207(11): Add `flycheck-clang-no-rtti' to disable RTTI for
          C/C++ syntax checking

        - Add new option cell `option-flag' for boolean flags in syntax
          checker commands

        - #207(12): Add `flycheck-clang-includes' to include additional
          files for C/C++ syntax checking

        - Add configuration file variable `flycheck-pylintrc' for Pylint

        - #214(13): New faces `flycheck-error-list-highlight-at-point'
          and `flycheck-error-list-highlight' to highlight the errors
          at point and at the current line respectively in the error
          list

        - #214(14): The error list now automatically updates to show
          the errors of the current buffer

        - #212(15): Define new error levels with
          `flycheck-define-error-level'

        - #234(16): Add `flycheck-clang-standard-library' to choose the
          standard library for C/C++ syntax checking

        - #243(17): Customize the delay for displaying errors via
          `flycheck-display-errors-delay'

        - #215(18): Add `info' level for informational annotations by
          syntax checkers

        - #259(19): Add a new symbol `temporary-file-name' to pass
          temporary file names to syntax checkers

   - Improvements:

        - #214(20): The error list now refreshes automatically after
          each syntax check

        - #214(21): The errors at point are now automatically
          highlighted in the error list

        - `emacs-lisp-checkdoc' does not longer check `.dir-locals.el'
          files

        - #222(22): Do not automatically check syntax in encrypted files

        - #215(23): Parse notes from `c/c++-clang' into info level
          messages

        - #204(24): Parse convention warnings from `pylint'#215(25):
          info level

        - #215(26): Demote naming warnings from `python-flake8' to info
          level

        - #256(27): Support `enh-ruby-mode' in Ruby syntax checkers

        - Parse columns from `python-pylint' errors

        - Do not compress temporary files for syntax checks if the
          original file was compressed

   - Bug fixes:

        - #225(28): Find local includes in the Clang syntax checker

        - Do not emit spurious flawed definition warning in the `rst'
          syntax checker

        - #251(29): Handle abbreviated file names in `luac' output, by
          simply ignoring them

        - #259(30): Correctly redirect the output binary of the
          `go-build' syntax checker

        - #263(31): Fix Cppcheck parsing with the built-in Emacs XML
          parser

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/214

(2) https://github.com/flycheck/flycheck/issues/214

(3) https://github.com/flycheck/flycheck/issues/236

(4) https://github.com/flycheck/flycheck/issues/245

(5) https://github.com/flycheck/flycheck/issues/246

(6) https://github.com/flycheck/flycheck/issues/249

(7) https://github.com/d11wtq/grizzl

(8) https://github.com/flycheck/flycheck/issues/202

(9) https://github.com/flycheck/flycheck/issues/207

(10) https://github.com/flycheck/flycheck/issues/207

(11) https://github.com/flycheck/flycheck/issues/207

(12) https://github.com/flycheck/flycheck/issues/207

(13) https://github.com/flycheck/flycheck/issues/214

(14) https://github.com/flycheck/flycheck/issues/214

(15) https://github.com/flycheck/flycheck/issues/212

(16) https://github.com/flycheck/flycheck/issues/234

(17) https://github.com/flycheck/flycheck/issues/243

(18) https://github.com/flycheck/flycheck/issues/215

(19) https://github.com/flycheck/flycheck/issues/259

(20) https://github.com/flycheck/flycheck/issues/214

(21) https://github.com/flycheck/flycheck/issues/214

(22) https://github.com/flycheck/flycheck/issues/222

(23) https://github.com/flycheck/flycheck/issues/215

(24) https://github.com/flycheck/flycheck/issues/204

(25) https://github.com/flycheck/flycheck/issues/215

(26) https://github.com/flycheck/flycheck/issues/215

(27) https://github.com/flycheck/flycheck/issues/256

(28) https://github.com/flycheck/flycheck/issues/225

(29) https://github.com/flycheck/flycheck/issues/251

(30) https://github.com/flycheck/flycheck/issues/259

(31) https://github.com/flycheck/flycheck/issues/263


File: flycheck.info,  Node: 0 14 1 Aug 16 2013,  Next: 0 14 Aug 15 2013,  Prev: 0 15 Nov 15 2013,  Up: Changes

11.7 0.14.1 (Aug 16, 2013)
==========================

   - Bug fixes:

        - #194(1): Add a missing dependency

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/194


File: flycheck.info,  Node: 0 14 Aug 15 2013,  Next: 0 13 Jun 28 2013,  Prev: 0 14 1 Aug 16 2013,  Up: Changes

11.8 0.14 (Aug 15, 2013)
========================

   - *Breaking changes*:

        - #163(1): Introduce `flycheck-define-checker' and obsolete
          `flycheck-declare-checker'

        - Remove the obsolete `flycheck-error-face' and
          `flycheck-warning-face'

        - #176(2): Do not initialize packages by default in
          `emacs-lisp' syntax checker for non-configuration files

        - #179(3): Change the default `flycheck-highlighting-mode' to
          `symbols'

        - #184(4): Drop support for Pylint 0.x in `python-pylint'

   - New features:

        - #166(5): List errors at point only with prefix arg to
          `flycheck-list-errors'

        - #166(6): Add new display function
          `flycheck-display-errors-in-list' to display errors at point
          in the error list

        - New `option-list' argument cell to pass option lists to a
          syntax checker

        - #174(7): New `flycheck-emacs-lisp-load-path' option to
          customize the `load-path' used by the `emacs-lisp' syntax
          checker

        - #176(8): New `flycheck-emacs-lisp-initialize-packages' option
          to initialize packages in the `emacs-lisp' syntax checker

        - #176(9): New `flycheck-emacs-lisp-package-user-dir' option to
          configure the package directory for the `emacs-lisp' syntax
          checker

        - New option filter `flycheck-option-comma-separated-list' for
          options with comma separated lists as values

        - #179(10): New highlighting mode `symbols' to highlight the
          symbol pointed to by an error

   - New syntax checkers:

        - #160(11): LESS

        - #162(12): Haskell with `ghc', `hdevtools' and `hlint'

        - #170(13): C/C++ with `cppcheck'

        - #172(14): C/C++ with `clang'

        - CoffeeScript with `coffee'

        - #180(15): XML with `xmllint'

        - #167(16): D with `dmd'

   - Improvements:

        - #157(17): Support Web Mode in `html-tidy' syntax checker

        - #159(18): Support Rubocop 0.9 and drop support for older
          Rubocop releases

        - Include the message ID in error messages from `python-pylint'

   - Bug fixes:

        - Fix warnings about flawed definitions in `emacs-lisp' and
          `emacs-lisp-checkdoc', caused by faulty formatting of sexps

        - #166(19): Refresh error lists when pressing `g'

        - #175(20): Do not obscure active minibuffer input when
          displaying errors in the echo area

        - Fix universal prefix argument for `flycheck-next-error' at
          `C-c ! n'

        - #192(21): Correctly parse output of `coffeelint' 0.5.7

        - #184(22): Correctly parse output of `pylint' 1.0

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/163

(2) https://github.com/flycheck/flycheck/issues/176

(3) https://github.com/flycheck/flycheck/issues/179

(4) https://github.com/flycheck/flycheck/issues/184

(5) https://github.com/flycheck/flycheck/issues/166

(6) https://github.com/flycheck/flycheck/issues/166

(7) https://github.com/flycheck/flycheck/issues/174

(8) https://github.com/flycheck/flycheck/issues/176

(9) https://github.com/flycheck/flycheck/issues/176

(10) https://github.com/flycheck/flycheck/issues/179

(11) https://github.com/flycheck/flycheck/issues/160

(12) https://github.com/flycheck/flycheck/issues/162

(13) https://github.com/flycheck/flycheck/issues/170

(14) https://github.com/flycheck/flycheck/issues/172

(15) https://github.com/flycheck/flycheck/issues/180

(16) https://github.com/flycheck/flycheck/issues/167

(17) https://github.com/flycheck/flycheck/issues/157

(18) https://github.com/flycheck/flycheck/issues/159

(19) https://github.com/flycheck/flycheck/issues/166

(20) https://github.com/flycheck/flycheck/issues/175

(21) https://github.com/flycheck/flycheck/issues/192

(22) https://github.com/flycheck/flycheck/issues/184


File: flycheck.info,  Node: 0 13 Jun 28 2013,  Next: 0 12 May 18 2013,  Prev: 0 14 Aug 15 2013,  Up: Changes

11.9 0.13 (Jun 28, 2013)
========================

   - *Breaking changes*:

        - Obsolete `flycheck-warning-face' and `flycheck-error-face' in
          favor `flycheck-warning' and `flycheck-error' respectively

        - Obsolete `:predicate' forms in favor of `:predicate' functions

        - `flycheck-def-config-file-var' does not automatically mark
          variables as safe anymore

   - New features:

        - Make fringe indicator faces customizable independently with
          `flycheck-fringe-error' and `flycheck-fringe-warning'

        - Improve the default faces by using underlines instead of
          foreground colors, if possible

        - #141(1): Customizable error processing with
          `flycheck-process-error-functions'

        - #144(2): Make the delay before starting a syntax check
          customizable via `flycheck-idle-change-delay'

        - #156(3): Make display of errors under point customizable via
          `flycheck-display-errors-function'

   - Improvements

        - Always highlight errors on top of warnings now

        - #141(4): Do not trigger syntax checks in the middle of
          commands

        - Add the current directory to load path in the `emacs-lisp'
          syntax checker

        - Do not longer use the `emacs-lisp-checkdoc' syntax checker in
          Scratch buffers

        - #149(5): Do not flush temporary files onto disk

        - Syntax checkers may have error patterns and error parser now

        - Predicate forms are now wrapped into functions and compiled
          into functions during byte compilation

        - Copy each message separately in
          `flycheck-copy-messages-as-kill'

        - Mark some customizable variables as safe for file variable
          usage, most notably `flycheck-indication-mode',
          `flycheck-highlighting-mode' and `flycheck-idle-change-delay'.

   - Bug fixes:

        - Fix error when searching for a configuration file outside a
          Projectile project

        - Do not start a syntax check before the `flycheck-mode-hook'
          was run

        - Do not start automatic syntax checks if Flycheck Mode is
          disabled

        - #143(6): Defer the initial syntax check until after the
          current interactive command

        - Correctly clean up information about running processes

        - #150(7): Fix compatibility with Emacs 24.2 and earlier

        - Fix version information on Emacs trunk builds

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/141

(2) https://github.com/flycheck/flycheck/issues/144

(3) https://github.com/flycheck/flycheck/issues/156

(4) https://github.com/flycheck/flycheck/issues/141

(5) https://github.com/flycheck/flycheck/issues/149

(6) https://github.com/flycheck/flycheck/issues/143

(7) https://github.com/flycheck/flycheck/issues/150


File: flycheck.info,  Node: 0 12 May 18 2013,  Next: 0 11 May 01 2013,  Prev: 0 13 Jun 28 2013,  Up: Changes

11.10 0.12 (May 18, 2013)
=========================

   - New syntax checkers:

        - #136(1): Ruby using `jruby'

        - #138(2): Puppet

   - New features:

        - Highlight error expressions by default, with the new `sexps'
          highlighting mode

        - #140(3): Automatically check syntax some time after the last
          change in the buffer

        - Add `flycheck-version' to determine the installed Flycheck
          version

        - Add `flycheck-list-errors', mapped to `C-c ! l', to list all
          errors in a separate buffer

   - Improvements:

        - Defer syntax checks while a buffer is reverted, to avoid race
          conditions

   - Bug fixes:

        - #136(4): Correctly parse syntax errors from JRuby

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/136

(2) https://github.com/flycheck/flycheck/issues/138

(3) https://github.com/flycheck/flycheck/issues/140

(4) https://github.com/flycheck/flycheck/issues/136


File: flycheck.info,  Node: 0 11 May 01 2013,  Next: 0 10 Apr 21 2013,  Prev: 0 12 May 18 2013,  Up: Changes

11.11 0.11 (May 01, 2013)
=========================

   - New syntax checkers:

        - #124(1): Scala

   - New features:

        - Customizable error indication with control of the fringe
          side, via `flycheck-indication-mode'

        - #128(2): Customizable automatic syntax checking, via
          `flycheck-check-syntax-automatically'

        - #133(3): Customizable configuration file search, via
          `flycheck-locate-config-file-functions'

        - Find configuration files in Projectile(4) projects

        - Add `flycheck-before-syntax-check-hook' and
          `flycheck-syntax-check-failed-hook'

   - Improvements:

        - #123(5): The `ruby' syntax checker now differentiates
          warnings from errors

        - Faces are now in a separate customization group

   - Bug fixes:

        - Add missing customization group for syntax checker options

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/124

(2) https://github.com/flycheck/flycheck/issues/128

(3) https://github.com/flycheck/flycheck/issues/133

(4) https://github.com/bbatsov/projectile

(5) https://github.com/flycheck/flycheck/issues/123


File: flycheck.info,  Node: 0 10 Apr 21 2013,  Next: 0 9 Apr 13 2013,  Prev: 0 11 May 01 2013,  Up: Changes

11.12 0.10 (Apr 21, 2013)
=========================

   - Flycheck uses `cl-lib' now.  This library is built-in as of GNU
     Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
     compatibility library will be installed from GNU ELPA.

   - New syntax checkers:

        - #112(1): POSIX Shell script using `bash'

        - #113(2): Ruby using `rubocop'

        - #108(3): Elixir

        - #122(4): Erlang

   - Removed syntax checkers:

        - #115(5): Python using Pyflakes.  Use the superior Flake8
          syntax checker

   - New features:

        - Add `flycheck-copy-messages-as-kill', mapped to `C-c ! C-w',
          to copy all error messages under point into kill ring

        - Add `flycheck-google-messages', mapped to `C-c ! /', to
          google for error messages under point.  Needs the Google
          This(6) library

        - Syntax checkers can redirect output to a temporary directory
          now using the `temporary-directory' argument symbol

   - Improvements:

        - Call option filters for `nil' values, too

        - #112(7): Improve error parsing in Bash syntax checker

        - Error navigation does not cross restrictions in narrowed
          buffers anymore

        - #99(8): Try to preserve the non-directory part of the
          buffer's file name when substituting the `source' symbol

   - Bug fixes:

        - Fix error highlighting and navigation in narrowed buffers

        - #118(9): Use a hopefully more reliable way to parse output of
          PHP CodeSniffer

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/112

(2) https://github.com/flycheck/flycheck/issues/113

(3) https://github.com/flycheck/flycheck/issues/108

(4) https://github.com/flycheck/flycheck/issues/122

(5) https://github.com/flycheck/flycheck/issues/115

(6) https://github.com/Bruce-Connor/emacs-google-this

(7) https://github.com/flycheck/flycheck/issues/112

(8) https://github.com/flycheck/flycheck/issues/99

(9) https://github.com/flycheck/flycheck/issues/118


File: flycheck.info,  Node: 0 9 Apr 13 2013,  Next: 0 8 Apr 9 2013,  Prev: 0 10 Apr 21 2013,  Up: Changes

11.13 0.9 (Apr 13, 2013)
========================

   - New syntax checkers:

        - #103(1): SCSS using `scss'

        - RST (ReStructuredText) using Docutils

        - #107(2): Go using `go build' and `go test'

   - Improvements:

        - Quit the error message window when navigating away from error
          locations

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/103

(2) https://github.com/flycheck/flycheck/issues/107


File: flycheck.info,  Node: 0 8 Apr 9 2013,  Next: 0 7 1 Feb 23 2013,  Prev: 0 9 Apr 13 2013,  Up: Changes

11.14 0.8 (Apr 9, 2013)
=======================

   - New syntax checkers:

        - #91(1): Go using `gofmt'

        - #101(2): Rust using `rustc'

   - New features:

        - #29(3): Add a global Flycheck mode.  `(global-flycheck-mode)'
          is now the recommended way to enable Flycheck

        - #72(4): Add support for syntax checker options

        - Add option for the coding standard used by the `php-phpcs'
          syntax checker

        - Add options for the maximum McCabe complexity and the maximum
          line length to `python-flake8'

   - Improvements:

        - Support McCabe warnings in `python-flake8'

        - Support warnings from `flake8' 2

        - #94(5): Show long error messages in a popup buffer

        - #96(6): Show all error messages at point

        - #98(7): Add support for naming warings from `flake8' 2

        - Flycheck mode is not longer enabled for buffers whose names
          start with a space

        - #100(8): Improve highlighting to reduce screen flickering

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/91

(2) https://github.com/flycheck/flycheck/issues/101

(3) https://github.com/flycheck/flycheck/issues/29

(4) https://github.com/flycheck/flycheck/issues/72

(5) https://github.com/flycheck/flycheck/issues/94

(6) https://github.com/flycheck/flycheck/issues/96

(7) https://github.com/flycheck/flycheck/issues/98

(8) https://github.com/flycheck/flycheck/issues/100


File: flycheck.info,  Node: 0 7 1 Feb 23 2013,  Next: 0 7 Feb 14 2013,  Prev: 0 8 Apr 9 2013,  Up: Changes

11.15 0.7.1 (Feb 23, 2013)
==========================

   - Bug fixes:

        - #87(1): Do not signal errors from `flycheck-mode'

        - Correctly fall back to `$HOME' when searching configuration
          files

        - Correctly ascend to parent directory when searching
          configuration files

   - API changes:

        - Rename `config' cell to `config-file'

        - Allow to pass the result of `config-file' cells as single
          argument

        - #86(2): Add support for evaluating Lisp forms in syntax
          checker commands

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/87

(2) https://github.com/flycheck/flycheck/issues/86


File: flycheck.info,  Node: 0 7 Feb 14 2013,  Next: 0 6 1 Jan 30 2013,  Prev: 0 7 1 Feb 23 2013,  Up: Changes

11.16 0.7 (Feb 14, 2013)
========================

   - New features:

        - Navigate to source of syntax checker declarations from syntax
          checker help

        - #60(1): Add online Info manual

   - Improvements:

        - Use pipes instead of TTYs to read output from syntax checkers

        - #80(2): Defer syntax checks for invisible buffers

        - #62(3): Immediately display error messages after error
          navigation

   - Bug fixes:

        - Never select deleted buffers

        - Do not let the debugger interfere with necessary cleanup
          actions

        - #78(4): Do not attempt to parse empty XML trees

        - #81(5): Fix infinite recursion on Windows

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/60

(2) https://github.com/flycheck/flycheck/issues/80

(3) https://github.com/flycheck/flycheck/issues/62

(4) https://github.com/flycheck/flycheck/issues/78

(5) https://github.com/flycheck/flycheck/issues/81


File: flycheck.info,  Node: 0 6 1 Jan 30 2013,  Next: 0 6 Jan 29 2013,  Prev: 0 7 Feb 14 2013,  Up: Changes

11.17 0.6.1 (Jan 30, 2013)
==========================

   - Fix package dependencies


File: flycheck.info,  Node: 0 6 Jan 29 2013,  Next: 0 5 Dec 28 2012,  Prev: 0 6 1 Jan 30 2013,  Up: Changes

11.18 0.6 (Jan 29, 2013)
========================

   - New syntax checkers:

        - #53(1): Emacs Lisp with `checkdoc-current-buffer'

        - #72(2): PHP with PHP CodeSniffer

   - Removed syntax checkers:

        - Javascript with `jsl'

   - New features:

        - #26(3): Error navigation with `next-error' and
          `previous-error'

        - #33(4): Fringe icons instead of error indicators

        - #59(5): Menu entry for Flycheck

        - #35(6): Customizable error highlighting, taking the column
          number into account

        - Configuration files for syntax checkers

        - Add configuration file support to the syntax checkers
          `coffee-coffeelint', `html-tidy', `javascript-jshint',
          `pyton-flake8' and `tex-chktex'

        - #58(7): Allow to compile a buffer with a syntax checker for
          testing purposes

        - #31(8): Use multiple syntax checkers during a syntax check

        - #52(9): Add dedicated help for syntax checkers

   - Improvements:

        - #55(10): Match error patterns in order of declaration

   - Bug fixes:

        - #24(11): Inherit highlighting faces from built-in faces

        - #36(12): Correct error patterns of the HTML syntax checker

        - #42(13): Detect syntax errors in the `python-flake8' syntax
          checker

        - Fix various regressions after introducing unit tests

        - #45(14): Inhibit syntax checking during package installation

        - #54(15): Disable syntax checking in Tramp buffers

        - #65(16): Preserve whitespace in error messages

   - API changes:

        - #41(17): Replace syntax checker variables with syntax checker
          declarations

        - #38(18): Support parsing errors with arbitrary functions
          instead of error patterns

        - #38(19): Add an error parser for Checkstyle-like XML output

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/53

(2) https://github.com/flycheck/flycheck/issues/72

(3) https://github.com/flycheck/flycheck/issues/26

(4) https://github.com/flycheck/flycheck/issues/33

(5) https://github.com/flycheck/flycheck/issues/59

(6) https://github.com/flycheck/flycheck/issues/35

(7) https://github.com/flycheck/flycheck/issues/58

(8) https://github.com/flycheck/flycheck/issues/31

(9) https://github.com/flycheck/flycheck/issues/52

(10) https://github.com/flycheck/flycheck/issues/55

(11) https://github.com/flycheck/flycheck/issues/24

(12) https://github.com/flycheck/flycheck/issues/36

(13) https://github.com/flycheck/flycheck/issues/42

(14) https://github.com/flycheck/flycheck/issues/45

(15) https://github.com/flycheck/flycheck/issues/54

(16) https://github.com/flycheck/flycheck/issues/65

(17) https://github.com/flycheck/flycheck/issues/41

(18) https://github.com/flycheck/flycheck/issues/38

(19) https://github.com/flycheck/flycheck/issues/38


File: flycheck.info,  Node: 0 5 Dec 28 2012,  Next: 0 4 Nov 21 2012,  Prev: 0 6 Jan 29 2013,  Up: Changes

11.19 0.5 (Dec 28, 2012)
========================

   - New syntax checkers:

        - #15(1): SASS

        - #21(2): Perl

        - XML

        - #30(3): Lua

   - New features:

        - #25(4): Support manual buffer-local selection of syntax
          checker

        - #28(5): Add customizable error indicators

        - #27(6): Echo error messages at point without 3rd-party
          libraries like flymake-cursor

   - Improvements:

        - #24(7): Remember the last automatically selected syntax
          checker

   - Bug fixes:

        - #19(8): Fix syntax checking of buffers without backing files

   - API changes:

        - #15(9): Replace underlying Flymake API with a custom syntax
          checking implementation

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/15

(2) https://github.com/flycheck/flycheck/issues/21

(3) https://github.com/flycheck/flycheck/issues/30

(4) https://github.com/flycheck/flycheck/issues/25

(5) https://github.com/flycheck/flycheck/issues/28

(6) https://github.com/flycheck/flycheck/issues/27

(7) https://github.com/flycheck/flycheck/issues/24

(8) https://github.com/flycheck/flycheck/issues/19

(9) https://github.com/flycheck/flycheck/issues/15


File: flycheck.info,  Node: 0 4 Nov 21 2012,  Next: 0 3 Nov 21 2012,  Prev: 0 5 Dec 28 2012,  Up: Changes

11.20 0.4 (Nov 21, 2012)
========================

   - #5(1): Rename the project to Flycheck

   - New syntax checkers

        - #9(2): HAML

        - #9(3): CSS

        - #9(4): Javascript with `jsl'

        - #16(5): Javascript with `jshint'

        - #12(6): JSON

        - LaTeX with `lacheck'

   - Bug fixes:

        - #10(7): Fix type error when checking compressed Emacs Lisp

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/5

(2) https://github.com/flycheck/flycheck/issues/9

(3) https://github.com/flycheck/flycheck/issues/9

(4) https://github.com/flycheck/flycheck/issues/9

(5) https://github.com/flycheck/flycheck/issues/16

(6) https://github.com/flycheck/flycheck/issues/12

(7) https://github.com/flycheck/flycheck/issues/10


File: flycheck.info,  Node: 0 3 Nov 21 2012,  Next: 0 2 Oct 25 2012,  Prev: 0 4 Nov 21 2012,  Up: Changes

11.21 0.3 (Nov 21, 2012)
========================

   - #4(1): Replace `flymake-mode' with a custom syntax checking minor
     mode

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/4


File: flycheck.info,  Node: 0 2 Oct 25 2012,  Next: 0 1 Oct 11 2012,  Prev: 0 3 Nov 21 2012,  Up: Changes

11.22 0.2 (Oct 25, 2012)
========================

   - New syntax checkers:

        - PHP

   - API changes:

        - #2(1): Simplify syntax checker declarations

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues/2


File: flycheck.info,  Node: 0 1 Oct 11 2012,  Prev: 0 2 Oct 25 2012,  Up: Changes

11.23 0.1 (Oct 11, 2012)
========================

Initial release as flymake-checkers

   - New syntax checkers:

        - TeX/LaTeX

        - Shell scripts

        - Python

        - Ruby

        - Coffeescript

        - Emacs Lisp


File: flycheck.info,  Node: Contribution guidelines,  Next: Writing documentation,  Prev: Changes,  Up: Top

12 Contribution guidelines
**************************

If you discovered bugs and issues, have ideas for improvements or new
features, or want to contribute a new syntax checker, please report to
the issue tracker(1) the repository and send a pull request, but
respect the following guidelines.

* Menu:

* Reporting issues::
* Contributing code::

---------- Footnotes ----------

(1) https://github.com/flycheck/flycheck/issues


File: flycheck.info,  Node: Reporting issues,  Next: Contributing code,  Up: Contribution guidelines

12.1 Reporting issues
=====================

   - Check that the issue has not already been reported.

   - Check that the issue has not already been fixed in the latest code.

   - Be clear and precise (do not prose, but name functions and
     commands exactly).

   - Include the version of Flycheck as shown by `M-x flycheck-version'.

   - Open an issue with a clear title and description in grammatically
     correct, complete sentences.


File: flycheck.info,  Node: Contributing code,  Prev: Reporting issues,  Up: Contribution guidelines

12.2 Contributing code
======================

Contributions of code, either as pull requests or as patches, are _very_
welcome, but please respect the following guidelines.

* Menu:

* General::
* Code style::
* Commit messages::
* Contributing syntax checkers::
* Pull requests::


File: flycheck.info,  Node: General,  Next: Code style,  Up: Contributing code

12.2.1 General
--------------

   - Write good and _complete_ code.

   - Provide use cases and rationale for new features.


File: flycheck.info,  Node: Code style,  Next: Commit messages,  Prev: General,  Up: Contributing code

12.2.2 Code style
-----------------

   - Generally, use the same coding style and spacing.

   - Do not use tabs for indentation.

   - Add docstrings for every declaration.

   - Make sure your code compiles without warnings with `make compile',
     and has no checkdoc issues with `M-x checkdoc-buffer' or `C-c ?
     d'.  If you are using Flycheck, just make sure that your code has
     no Flycheck warnings.


File: flycheck.info,  Node: Commit messages,  Next: Contributing syntax checkers,  Prev: Code style,  Up: Contributing code

12.2.3 Commit messages
----------------------

Write commit messages according to Tim Pope's guidelines(1). In short:

   - Start with a capitalized, short (50 characters or less) summary,
     followed by a blank line.

   - If necessary, add one or more paragraphs with details, wrapped at
     72 characters.

   - Use present tense and write in the imperative: “Fix bug”, not
     “fixed bug” or “fixes bug”.

   - Separate paragraphs by blank lines.

   - Do _not_ use special markup (e.g. Markdown).  Commit messages are
     plain text.  You may use `*emphasis*' or `_underline_' though,
     following conventions established on mailing lists.

This is a model commit message:

    Capitalized, short (50 chars or less) summary

    More detailed explanatory text, if necessary.  Wrap it to about 72
    characters or so.  In some contexts, the first line is treated as the
    subject of an email and the rest of the text as the body.  The blank
    line separating the summary from the body is critical (unless you omit
    the body entirely); tools like rebase can get confused if you run the
    two together.

    Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
    or "Fixes bug."  This convention matches up with commit messages generated
    by commands like git merge and git revert.

    Further paragraphs come after blank lines.

    - Bullet points are okay, too

    - Typically a hyphen or asterisk is used for the bullet, followed by a
      single space, with blank lines in between, but conventions vary here

    - Use a hanging indent

Git Commit Mode(2) and Magit(3) provide a major mode for Git commit
messages, which helps you to comply to these guidelines.

---------- Footnotes ----------

(1) http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

(2) https://github.com/magit/git-modes/

(3) https://github.com/magit/magit/


File: flycheck.info,  Node: Contributing syntax checkers,  Next: Pull requests,  Prev: Commit messages,  Up: Contributing code

12.2.4 Contributing syntax checkers
-----------------------------------

For syntax checkers, some special guidelines apply in addition to the
above:

   - Provide a link to the website of the syntax checker tool in the
     comments of your pull request.

   - Add a proper docstring to your syntax checker, including this URL.

   - Add unit tests for your syntax checker, or provide example code
     that triggers errors for each error pattern of the syntax checker.

   - Extend `install-travis.sh' to install the required tools in the CI
     environment, or explain how to install the tool on an Ubuntu 12.04
     system.

     Note: We will _not_ merge syntax checkers which cannot be tested
     on Travis CI.


File: flycheck.info,  Node: Pull requests,  Prev: Contributing syntax checkers,  Up: Contributing code

12.2.5 Pull requests
--------------------

   - Use a *topic branch* to easily amend a pull request later, if
     necessary.

   - Do *not* open new pull requests, when asked to improve your patch.
     Instead, amend your commits with `git rebase -i', and then update
     the pull request with `git push --force'

   - Open a pull request(1) that relates to but one subject with a
     clear title and description in grammatically correct, complete
     sentences.

---------- Footnotes ----------

(1) https://help.github.com/articles/using-pull-requests


File: flycheck.info,  Node: Writing documentation,  Next: Maintenance tasks,  Prev: Contribution guidelines,  Up: Top

13 Writing documentation
************************

This document explains how to edit and building the documentation of
Flycheck.

* Menu:

* Build environment setup::
* Building HTML and Texinfo::
* Verifying references::


File: flycheck.info,  Node: Build environment setup,  Next: Building HTML and Texinfo,  Up: Writing documentation

13.1 Build environment setup
============================

Flycheck's documentation is written using Sphinx(1) and
sphinxcontrib-emacs(2).  To build the documentation locally, you need
to install these tools first.  This section guides you through the
process of installing them.

First make sure, that you have Python 2.7 and virtualenv(3) available.
To install virtualenv, use:

    $ pip install --user virtualenv

     Note: You probably need to install pip(4) first. It is available
     in the package repositories of most Linux distributions, as
     `python-pip' or similar. If `pip' is not available for your Linux
     distribution, or if you are using OS X, please follow the
     instructions to install pip(5).

Then add `~/Library/Python/2.7/bin' (on OS X) or `~/.local/bin' (on
other Unix variants) to `$PATH'.

Now create a virtual environment and install the requirements of the
documentation:

    $ mkdir -p ~/.virtualenvs
    $ virtualenv -p python2.7 ~/.virtualenvs/cask
    $ pip install -r doc/requirements.txt

Now you are set up to build the documentation.

---------- Footnotes ----------

(1) http://sphinx-doc.org

(2) http://sphinxcontrib-emacs.readthedocs.org/en/latest/

(3) http://virtualenv.readthedocs.org/en/latest/

(4) https://pip.pypa.io/

(5) https://pip.pypa.io/en/latest/installing.html


File: flycheck.info,  Node: Building HTML and Texinfo,  Next: Verifying references,  Prev: Build environment setup,  Up: Writing documentation

13.2 Building HTML and Texinfo
==============================

First, switch to the virtual environment you created in the *note Build
environment setup: 1d5, and make sure that the requirements are up to
date:

    $ source ~/.virtualenvs/cask/bin/activate
    $ pip install -r doc/requirements.txt

Now build the documentation:

    $ make html
    $ make texinfo

The HTML documentation is build to `build/doc/html/', where you can
preview it.  The Texinfo build goes to `doc/flycheck.texi'.

     Warning: Unlike the HTML output, the Texinfo output is _committed_
     to the repository, since it is needed by MELPA(1) to build an Info
     manual for inclusion in the Flycheck packages.

---------- Footnotes ----------

(1) http://melpa.milkbox.net/


File: flycheck.info,  Node: Verifying references,  Prev: Building HTML and Texinfo,  Up: Writing documentation

13.3 Verifying references
=========================

Sphinx emits warnings for internal references and cross-references to
Emacs Lisp symbols that could not be resolved.  Your documentation
should build without any such warnings.

You can additionally verify all external references with:

    $ source ~/.virtualenvs/cask/bin/activate
    $ make linkcheck


File: flycheck.info,  Node: Maintenance tasks,  Next: Credits,  Prev: Writing documentation,  Up: Top

14 Maintenance tasks
********************

This document explains various maintenance tasks for Flycheck, that
contributors have to perform under specific circumstances.

* Menu:

* Rebuilding the Texinfo::
* Rasterized logo files::


File: flycheck.info,  Node: Rebuilding the Texinfo,  Next: Rasterized logo files,  Up: Maintenance tasks

14.1 Rebuilding the Texinfo
===========================

Flycheck contains a Texinfo version of the documentation at
`doc/flycheck.texi', to allow MELPA(1) to build the Info manual for
Flycheck.

     Warning: Do *not* edit this file.  It is generated automatically
     from Flycheck's documentation.

When making changes to the documentation, you need to rebuild the
Texinfo version with, by following the *note instructions to build the
documentation: 1d7.

---------- Footnotes ----------

(1) http://melpa.milkbox.net/


File: flycheck.info,  Node: Rasterized logo files,  Prev: Rebuilding the Texinfo,  Up: Maintenance tasks

14.2 Rasterized logo files
==========================

The source of the Flycheck logo is `flycheck.svg'.  The documentation
contains rasterized versions of this logo at

   - `doc/images/logo.png' (the logo shown in the documentation and the
     README)

   - `doc/images/favicon.ico' (the logo for use as favicon of the
     documentation)

     Warning: Do *not* change these files directly.  They are generated
     automatically from the SVG source.

When changing the Flycheck logo, you need to rebuild these files with:

    make images

You need *convert* from ImageMagick(1) and Inkscape(2).  Make sure that
`inkscape' is in `$PATH', because ImageMagick's own SVG renderer cannot
properly render the logo.

---------- Footnotes ----------

(1) http://www.imagemagick.org/

(2) http://www.inkscape.org/


File: flycheck.info,  Node: Credits,  Next: GNU General Public License,  Prev: Maintenance tasks,  Up: Top

15 Credits
**********

Flycheck is written and maintained by Sebastian Wiesner(1), with
contributions from the following people.  Their help and ideas, their
support and patches are greatly appreciated.

   - Atila Neves(2) added support for include paths of DMD.

   - Bozhidar Batsov(3) provided valuable feedback and refinements,
     brought Flycheck to a larger user base by adding it to his
     Prelude(4) project, and added a Ruby syntax checker using
     `rubocop'.

   - Damon Haley(5) helped to shape and test the PHP CodeSniffer
     checker.

   - David Holm(6) added C/C++ syntax and style checkers using `clang'
     and `cppcheck' respectively, and contributed a Verilog syntax
     checker using `verilator'.

   - Derek Harland(7) added `flycheck-rust-create-root' to the Rust
     syntax checker.

   - Doug MacEachern(8) added a Go syntax checker using `errcheck'.

   - Fanael Linithien(9) greatly improve C/C++ support in Flycheck, by
     adding GCC-based syntax checker, and extending the C/C++ syntax
     checkers with new features and options.

   - Gereon Frey(10) fixed the `go-build' syntax checker and improved
     its tests.

   - Jimmy Yuen Ho Wong(11) added the HTML syntax checker and the
     jshint Javascript checker, and did valuable testing and bug fixing.

   - Krzysztof Witkowski(12) implemented `eval' support in Flycheck
     commands.

   - Magnar Sveen(13) developed the awesome dash.el(14) and s.el(15)
     libraries, that drive considerable parts of Flycheck's internals.

   - Malyshev Artem(16) made Flycheck's keybindings customizable with
     `flycheck-keymap-prefix'.

   - Marian Schubert(17) added the Perl syntax checker.

   - Mark Hellewell(18) added the Puppet syntax and style checkers.

   - Martin Grenfell(19) created the awesome Vim library syntastic(20)
     which inspired this project and many of its checkers.

   - Matthias Dahl(21) improved the performance of Flycheck's temp file
     handling.

   - Matthias Güdemann(22) contributed an initial version of the
     Flycheck logo, and provided very valuable input, ideas and
     feedback during the design of official logo.

   - Mitch Tishmack(23) added support for Microsoft extensions to the
     Clang syntax checker.

   - Peter Vasil(24) contributed syntax checkers for XML, Lua and Go
     (using `go build' and `go test'), added unit tests and did
     valuable testing.

   - Robert Dallas Gray(25) made error display customizable with
     `flycheck-display-errors-function'.

   - Robert Zaremba(26) added Go syntax checker using `gofmt'.

   - Simon Carter(27) provided valuable feedback about automatic syntax
     checking, and took great effort to debug some very subtle issues
     in it.

   - steckerhalter(28) provided the PHP CodeSniffer checker.

   - Steve Purcell(29) implemented many checkers, contributed important
     ideas to the design of the checker API and engaged in worthwhile
     discussion to shape this project.

   - Sylvain Benner(30) added syntax checkers for Elixir and Erlang,
     and wrote the cool flycheck-color-mode-line(31) extension.

   - Sylvain Rousseau(32) added a syntax checker for POSIX shell script
     using `bash', and improved error parsing in the Bash script syntax
     checker.

   - Ted Zlatanov(33) added a syntax checker for CFEngine.

   - Tom Jakubowski(34) added `flycheck-rust-check-tests' to the Rust
     syntax checker.

   - tom tan(35) added a syntax checker for the D programming language
     using `dmd', and wrote the cool flycheck-d-unittest(36) extension.

   - Yannick Roehlly(37) added support for PEP8 naming errors to the
     Flake8 syntax checker.

   - Yasuyuki Oka(38) contributed a lot of syntax checkers for various
     languages, including AsciiDoc, Chef recipes, ERuby, GNU Make,
     Handlebars, Javascript, PHP, Racket, Ruby, Slim and YAML.

   - Victor Deryagin(39) added the Rust syntax checker.

Of course we also need to thank GNU Flymake(40), the first,
respectable, though somewhat failed attempt at on-the-fly syntax
checking.

---------- Footnotes ----------

(1) https://github.com/lunaryorn

(2) https://github.com/atilaneves

(3) https://github.com/bbatsov

(4) https://github.com/bbatsov/prelude

(5) https://github.com/dhaley

(6) https://github.com/dholm

(7) https://github.com/donkopotamus

(8) https://github.com/dougm

(9) https://github.com/Fanael

(10) https://github.com/gfrey

(11) https://github.com/wyuenho

(12) https://github.com/kwitek

(13) https://github.com/magnars

(14) https://github.com/magnars/dash.el

(15) https://github.com/magnars/s.el

(16) https://github.com/proofit404

(17) https://github.com/maio

(18) https://github.com/markhellewell

(19) https://github.com/scrooloose

(20) https://github.com/scrooloose/syntastic

(21) https://github.com/BinaryKhaos

(22) https://github.com/mgudemann

(23) https://github.com/mitchty

(24) https://github.com/ptrv

(25) https://github.com/rdallasgray

(26) https://github.com/robert-zaremba

(27) https://github.com/bbbscarter

(28) https://github.com/steckerhalter

(29) https://github.com/purcell

(30) https://github.com/syl20bnr

(31) https://github.com/flycheck/flycheck-color-mode-line

(32) https://github.com/thisirs

(33) https://github.com/tzz

(34) https://github.com/tomjakubowski

(35) https://github.com/tom-tan

(36) https://github.com/flycheck/flycheck-d-unittest

(37) https://github.com/yannick1974

(38) https://github.com/yasuyk

(39) https://github.com/vderyagin

(40) http://www.gnu.org/software/emacs/manual/html_node/flymake/


File: flycheck.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: Credits,  Up: Top

16 GNU General Public License
*****************************

                        GNU GENERAL PUBLIC LICENSE
                           Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

                                Preamble

      The GNU General Public License is a free, copyleft license for
    software and other kinds of works.

      The licenses for most software and other practical works are designed
    to take away your freedom to share and change the works.  By contrast,
    the GNU General Public License is intended to guarantee your freedom to
    share and change all versions of a program--to make sure it remains free
    software for all its users.  We, the Free Software Foundation, use the
    GNU General Public License for most of our software; it applies also to
    any other work released this way by its authors.  You can apply it to
    your programs, too.

      When we speak of free software, we are referring to freedom, not
    price.  Our General Public Licenses are designed to make sure that you
    have the freedom to distribute copies of free software (and charge for
    them if you wish), that you receive source code or can get it if you
    want it, that you can change the software or use pieces of it in new
    free programs, and that you know you can do these things.

      To protect your rights, we need to prevent others from denying you
    these rights or asking you to surrender the rights.  Therefore, you have
    certain responsibilities if you distribute copies of the software, or if
    you modify it: responsibilities to respect the freedom of others.

      For example, if you distribute copies of such a program, whether
    gratis or for a fee, you must pass on to the recipients the same
    freedoms that you received.  You must make sure that they, too, receive
    or can get the source code.  And you must show them these terms so they
    know their rights.

      Developers that use the GNU GPL protect your rights with two steps:
    (1) assert copyright on the software, and (2) offer you this License
    giving you legal permission to copy, distribute and/or modify it.

      For the developers' and authors' protection, the GPL clearly explains
    that there is no warranty for this free software.  For both users' and
    authors' sake, the GPL requires that modified versions be marked as
    changed, so that their problems will not be attributed erroneously to
    authors of previous versions.

      Some devices are designed to deny users access to install or run
    modified versions of the software inside them, although the manufacturer
    can do so.  This is fundamentally incompatible with the aim of
    protecting users' freedom to change the software.  The systematic
    pattern of such abuse occurs in the area of products for individuals to
    use, which is precisely where it is most unacceptable.  Therefore, we
    have designed this version of the GPL to prohibit the practice for those
    products.  If such problems arise substantially in other domains, we
    stand ready to extend this provision to those domains in future versions
    of the GPL, as needed to protect the freedom of users.

      Finally, every program is threatened constantly by software patents.
    States should not allow patents to restrict development and use of
    software on general-purpose computers, but in those that do, we wish to
    avoid the special danger that patents applied to a free program could
    make it effectively proprietary.  To prevent this, the GPL assures that
    patents cannot be used to render the program non-free.

      The precise terms and conditions for copying, distribution and
    modification follow.

                           TERMS AND CONDITIONS

      0. Definitions.

      "This License" refers to version 3 of the GNU General Public License.

      "Copyright" also means copyright-like laws that apply to other kinds of
    works, such as semiconductor masks.

      "The Program" refers to any copyrightable work licensed under this
    License.  Each licensee is addressed as "you".  "Licensees" and
    "recipients" may be individuals or organizations.

      To "modify" a work means to copy from or adapt all or part of the work
    in a fashion requiring copyright permission, other than the making of an
    exact copy.  The resulting work is called a "modified version" of the
    earlier work or a work "based on" the earlier work.

      A "covered work" means either the unmodified Program or a work based
    on the Program.

      To "propagate" a work means to do anything with it that, without
    permission, would make you directly or secondarily liable for
    infringement under applicable copyright law, except executing it on a
    computer or modifying a private copy.  Propagation includes copying,
    distribution (with or without modification), making available to the
    public, and in some countries other activities as well.

      To "convey" a work means any kind of propagation that enables other
    parties to make or receive copies.  Mere interaction with a user through
    a computer network, with no transfer of a copy, is not conveying.

      An interactive user interface displays "Appropriate Legal Notices"
    to the extent that it includes a convenient and prominently visible
    feature that (1) displays an appropriate copyright notice, and (2)
    tells the user that there is no warranty for the work (except to the
    extent that warranties are provided), that licensees may convey the
    work under this License, and how to view a copy of this License.  If
    the interface presents a list of user commands or options, such as a
    menu, a prominent item in the list meets this criterion.

      1. Source Code.

      The "source code" for a work means the preferred form of the work
    for making modifications to it.  "Object code" means any non-source
    form of a work.

      A "Standard Interface" means an interface that either is an official
    standard defined by a recognized standards body, or, in the case of
    interfaces specified for a particular programming language, one that
    is widely used among developers working in that language.

      The "System Libraries" of an executable work include anything, other
    than the work as a whole, that (a) is included in the normal form of
    packaging a Major Component, but which is not part of that Major
    Component, and (b) serves only to enable use of the work with that
    Major Component, or to implement a Standard Interface for which an
    implementation is available to the public in source code form.  A
    "Major Component", in this context, means a major essential component
    (kernel, window system, and so on) of the specific operating system
    (if any) on which the executable work runs, or a compiler used to
    produce the work, or an object code interpreter used to run it.

      The "Corresponding Source" for a work in object code form means all
    the source code needed to generate, install, and (for an executable
    work) run the object code and to modify the work, including scripts to
    control those activities.  However, it does not include the work's
    System Libraries, or general-purpose tools or generally available free
    programs which are used unmodified in performing those activities but
    which are not part of the work.  For example, Corresponding Source
    includes interface definition files associated with source files for
    the work, and the source code for shared libraries and dynamically
    linked subprograms that the work is specifically designed to require,
    such as by intimate data communication or control flow between those
    subprograms and other parts of the work.

      The Corresponding Source need not include anything that users
    can regenerate automatically from other parts of the Corresponding
    Source.

      The Corresponding Source for a work in source code form is that
    same work.

      2. Basic Permissions.

      All rights granted under this License are granted for the term of
    copyright on the Program, and are irrevocable provided the stated
    conditions are met.  This License explicitly affirms your unlimited
    permission to run the unmodified Program.  The output from running a
    covered work is covered by this License only if the output, given its
    content, constitutes a covered work.  This License acknowledges your
    rights of fair use or other equivalent, as provided by copyright law.

      You may make, run and propagate covered works that you do not
    convey, without conditions so long as your license otherwise remains
    in force.  You may convey covered works to others for the sole purpose
    of having them make modifications exclusively for you, or provide you
    with facilities for running those works, provided that you comply with
    the terms of this License in conveying all material for which you do
    not control copyright.  Those thus making or running the covered works
    for you must do so exclusively on your behalf, under your direction
    and control, on terms that prohibit them from making any copies of
    your copyrighted material outside their relationship with you.

      Conveying under any other circumstances is permitted solely under
    the conditions stated below.  Sublicensing is not allowed; section 10
    makes it unnecessary.

      3. Protecting Users' Legal Rights From Anti-Circumvention Law.

      No covered work shall be deemed part of an effective technological
    measure under any applicable law fulfilling obligations under article
    11 of the WIPO copyright treaty adopted on 20 December 1996, or
    similar laws prohibiting or restricting circumvention of such
    measures.

      When you convey a covered work, you waive any legal power to forbid
    circumvention of technological measures to the extent such circumvention
    is effected by exercising rights under this License with respect to
    the covered work, and you disclaim any intention to limit operation or
    modification of the work as a means of enforcing, against the work's
    users, your or third parties' legal rights to forbid circumvention of
    technological measures.

      4. Conveying Verbatim Copies.

      You may convey verbatim copies of the Program's source code as you
    receive it, in any medium, provided that you conspicuously and
    appropriately publish on each copy an appropriate copyright notice;
    keep intact all notices stating that this License and any
    non-permissive terms added in accord with section 7 apply to the code;
    keep intact all notices of the absence of any warranty; and give all
    recipients a copy of this License along with the Program.

      You may charge any price or no price for each copy that you convey,
    and you may offer support or warranty protection for a fee.

      5. Conveying Modified Source Versions.

      You may convey a work based on the Program, or the modifications to
    produce it from the Program, in the form of source code under the
    terms of section 4, provided that you also meet all of these conditions:

        a) The work must carry prominent notices stating that you modified
        it, and giving a relevant date.

        b) The work must carry prominent notices stating that it is
        released under this License and any conditions added under section
        7.  This requirement modifies the requirement in section 4 to
        "keep intact all notices".

        c) You must license the entire work, as a whole, under this
        License to anyone who comes into possession of a copy.  This
        License will therefore apply, along with any applicable section 7
        additional terms, to the whole of the work, and all its parts,
        regardless of how they are packaged.  This License gives no
        permission to license the work in any other way, but it does not
        invalidate such permission if you have separately received it.

        d) If the work has interactive user interfaces, each must display
        Appropriate Legal Notices; however, if the Program has interactive
        interfaces that do not display Appropriate Legal Notices, your
        work need not make them do so.

      A compilation of a covered work with other separate and independent
    works, which are not by their nature extensions of the covered work,
    and which are not combined with it such as to form a larger program,
    in or on a volume of a storage or distribution medium, is called an
    "aggregate" if the compilation and its resulting copyright are not
    used to limit the access or legal rights of the compilation's users
    beyond what the individual works permit.  Inclusion of a covered work
    in an aggregate does not cause this License to apply to the other
    parts of the aggregate.

      6. Conveying Non-Source Forms.

      You may convey a covered work in object code form under the terms
    of sections 4 and 5, provided that you also convey the
    machine-readable Corresponding Source under the terms of this License,
    in one of these ways:

        a) Convey the object code in, or embodied in, a physical product
        (including a physical distribution medium), accompanied by the
        Corresponding Source fixed on a durable physical medium
        customarily used for software interchange.

        b) Convey the object code in, or embodied in, a physical product
        (including a physical distribution medium), accompanied by a
        written offer, valid for at least three years and valid for as
        long as you offer spare parts or customer support for that product
        model, to give anyone who possesses the object code either (1) a
        copy of the Corresponding Source for all the software in the
        product that is covered by this License, on a durable physical
        medium customarily used for software interchange, for a price no
        more than your reasonable cost of physically performing this
        conveying of source, or (2) access to copy the
        Corresponding Source from a network server at no charge.

        c) Convey individual copies of the object code with a copy of the
        written offer to provide the Corresponding Source.  This
        alternative is allowed only occasionally and noncommercially, and
        only if you received the object code with such an offer, in accord
        with subsection 6b.

        d) Convey the object code by offering access from a designated
        place (gratis or for a charge), and offer equivalent access to the
        Corresponding Source in the same way through the same place at no
        further charge.  You need not require recipients to copy the
        Corresponding Source along with the object code.  If the place to
        copy the object code is a network server, the Corresponding Source
        may be on a different server (operated by you or a third party)
        that supports equivalent copying facilities, provided you maintain
        clear directions next to the object code saying where to find the
        Corresponding Source.  Regardless of what server hosts the
        Corresponding Source, you remain obligated to ensure that it is
        available for as long as needed to satisfy these requirements.

        e) Convey the object code using peer-to-peer transmission, provided
        you inform other peers where the object code and Corresponding
        Source of the work are being offered to the general public at no
        charge under subsection 6d.

      A separable portion of the object code, whose source code is excluded
    from the Corresponding Source as a System Library, need not be
    included in conveying the object code work.

      A "User Product" is either (1) a "consumer product", which means any
    tangible personal property which is normally used for personal, family,
    or household purposes, or (2) anything designed or sold for incorporation
    into a dwelling.  In determining whether a product is a consumer product,
    doubtful cases shall be resolved in favor of coverage.  For a particular
    product received by a particular user, "normally used" refers to a
    typical or common use of that class of product, regardless of the status
    of the particular user or of the way in which the particular user
    actually uses, or expects or is expected to use, the product.  A product
    is a consumer product regardless of whether the product has substantial
    commercial, industrial or non-consumer uses, unless such uses represent
    the only significant mode of use of the product.

      "Installation Information" for a User Product means any methods,
    procedures, authorization keys, or other information required to install
    and execute modified versions of a covered work in that User Product from
    a modified version of its Corresponding Source.  The information must
    suffice to ensure that the continued functioning of the modified object
    code is in no case prevented or interfered with solely because
    modification has been made.

      If you convey an object code work under this section in, or with, or
    specifically for use in, a User Product, and the conveying occurs as
    part of a transaction in which the right of possession and use of the
    User Product is transferred to the recipient in perpetuity or for a
    fixed term (regardless of how the transaction is characterized), the
    Corresponding Source conveyed under this section must be accompanied
    by the Installation Information.  But this requirement does not apply
    if neither you nor any third party retains the ability to install
    modified object code on the User Product (for example, the work has
    been installed in ROM).

      The requirement to provide Installation Information does not include a
    requirement to continue to provide support service, warranty, or updates
    for a work that has been modified or installed by the recipient, or for
    the User Product in which it has been modified or installed.  Access to a
    network may be denied when the modification itself materially and
    adversely affects the operation of the network or violates the rules and
    protocols for communication across the network.

      Corresponding Source conveyed, and Installation Information provided,
    in accord with this section must be in a format that is publicly
    documented (and with an implementation available to the public in
    source code form), and must require no special password or key for
    unpacking, reading or copying.

      7. Additional Terms.

      "Additional permissions" are terms that supplement the terms of this
    License by making exceptions from one or more of its conditions.
    Additional permissions that are applicable to the entire Program shall
    be treated as though they were included in this License, to the extent
    that they are valid under applicable law.  If additional permissions
    apply only to part of the Program, that part may be used separately
    under those permissions, but the entire Program remains governed by
    this License without regard to the additional permissions.

      When you convey a copy of a covered work, you may at your option
    remove any additional permissions from that copy, or from any part of
    it.  (Additional permissions may be written to require their own
    removal in certain cases when you modify the work.)  You may place
    additional permissions on material, added by you to a covered work,
    for which you have or can give appropriate copyright permission.

      Notwithstanding any other provision of this License, for material you
    add to a covered work, you may (if authorized by the copyright holders of
    that material) supplement the terms of this License with terms:

        a) Disclaiming warranty or limiting liability differently from the
        terms of sections 15 and 16 of this License; or

        b) Requiring preservation of specified reasonable legal notices or
        author attributions in that material or in the Appropriate Legal
        Notices displayed by works containing it; or

        c) Prohibiting misrepresentation of the origin of that material, or
        requiring that modified versions of such material be marked in
        reasonable ways as different from the original version; or

        d) Limiting the use for publicity purposes of names of licensors or
        authors of the material; or

        e) Declining to grant rights under trademark law for use of some
        trade names, trademarks, or service marks; or

        f) Requiring indemnification of licensors and authors of that
        material by anyone who conveys the material (or modified versions of
        it) with contractual assumptions of liability to the recipient, for
        any liability that these contractual assumptions directly impose on
        those licensors and authors.

      All other non-permissive additional terms are considered "further
    restrictions" within the meaning of section 10.  If the Program as you
    received it, or any part of it, contains a notice stating that it is
    governed by this License along with a term that is a further
    restriction, you may remove that term.  If a license document contains
    a further restriction but permits relicensing or conveying under this
    License, you may add to a covered work material governed by the terms
    of that license document, provided that the further restriction does
    not survive such relicensing or conveying.

      If you add terms to a covered work in accord with this section, you
    must place, in the relevant source files, a statement of the
    additional terms that apply to those files, or a notice indicating
    where to find the applicable terms.

      Additional terms, permissive or non-permissive, may be stated in the
    form of a separately written license, or stated as exceptions;
    the above requirements apply either way.

      8. Termination.

      You may not propagate or modify a covered work except as expressly
    provided under this License.  Any attempt otherwise to propagate or
    modify it is void, and will automatically terminate your rights under
    this License (including any patent licenses granted under the third
    paragraph of section 11).

      However, if you cease all violation of this License, then your
    license from a particular copyright holder is reinstated (a)
    provisionally, unless and until the copyright holder explicitly and
    finally terminates your license, and (b) permanently, if the copyright
    holder fails to notify you of the violation by some reasonable means
    prior to 60 days after the cessation.

      Moreover, your license from a particular copyright holder is
    reinstated permanently if the copyright holder notifies you of the
    violation by some reasonable means, this is the first time you have
    received notice of violation of this License (for any work) from that
    copyright holder, and you cure the violation prior to 30 days after
    your receipt of the notice.

      Termination of your rights under this section does not terminate the
    licenses of parties who have received copies or rights from you under
    this License.  If your rights have been terminated and not permanently
    reinstated, you do not qualify to receive new licenses for the same
    material under section 10.

      9. Acceptance Not Required for Having Copies.

      You are not required to accept this License in order to receive or
    run a copy of the Program.  Ancillary propagation of a covered work
    occurring solely as a consequence of using peer-to-peer transmission
    to receive a copy likewise does not require acceptance.  However,
    nothing other than this License grants you permission to propagate or
    modify any covered work.  These actions infringe copyright if you do
    not accept this License.  Therefore, by modifying or propagating a
    covered work, you indicate your acceptance of this License to do so.

      10. Automatic Licensing of Downstream Recipients.

      Each time you convey a covered work, the recipient automatically
    receives a license from the original licensors, to run, modify and
    propagate that work, subject to this License.  You are not responsible
    for enforcing compliance by third parties with this License.

      An "entity transaction" is a transaction transferring control of an
    organization, or substantially all assets of one, or subdividing an
    organization, or merging organizations.  If propagation of a covered
    work results from an entity transaction, each party to that
    transaction who receives a copy of the work also receives whatever
    licenses to the work the party's predecessor in interest had or could
    give under the previous paragraph, plus a right to possession of the
    Corresponding Source of the work from the predecessor in interest, if
    the predecessor has it or can get it with reasonable efforts.

      You may not impose any further restrictions on the exercise of the
    rights granted or affirmed under this License.  For example, you may
    not impose a license fee, royalty, or other charge for exercise of
    rights granted under this License, and you may not initiate litigation
    (including a cross-claim or counterclaim in a lawsuit) alleging that
    any patent claim is infringed by making, using, selling, offering for
    sale, or importing the Program or any portion of it.

      11. Patents.

      A "contributor" is a copyright holder who authorizes use under this
    License of the Program or a work on which the Program is based.  The
    work thus licensed is called the contributor's "contributor version".

      A contributor's "essential patent claims" are all patent claims
    owned or controlled by the contributor, whether already acquired or
    hereafter acquired, that would be infringed by some manner, permitted
    by this License, of making, using, or selling its contributor version,
    but do not include claims that would be infringed only as a
    consequence of further modification of the contributor version.  For
    purposes of this definition, "control" includes the right to grant
    patent sublicenses in a manner consistent with the requirements of
    this License.

      Each contributor grants you a non-exclusive, worldwide, royalty-free
    patent license under the contributor's essential patent claims, to
    make, use, sell, offer for sale, import and otherwise run, modify and
    propagate the contents of its contributor version.

      In the following three paragraphs, a "patent license" is any express
    agreement or commitment, however denominated, not to enforce a patent
    (such as an express permission to practice a patent or covenant not to
    sue for patent infringement).  To "grant" such a patent license to a
    party means to make such an agreement or commitment not to enforce a
    patent against the party.

      If you convey a covered work, knowingly relying on a patent license,
    and the Corresponding Source of the work is not available for anyone
    to copy, free of charge and under the terms of this License, through a
    publicly available network server or other readily accessible means,
    then you must either (1) cause the Corresponding Source to be so
    available, or (2) arrange to deprive yourself of the benefit of the
    patent license for this particular work, or (3) arrange, in a manner
    consistent with the requirements of this License, to extend the patent
    license to downstream recipients.  "Knowingly relying" means you have
    actual knowledge that, but for the patent license, your conveying the
    covered work in a country, or your recipient's use of the covered work
    in a country, would infringe one or more identifiable patents in that
    country that you have reason to believe are valid.

      If, pursuant to or in connection with a single transaction or
    arrangement, you convey, or propagate by procuring conveyance of, a
    covered work, and grant a patent license to some of the parties
    receiving the covered work authorizing them to use, propagate, modify
    or convey a specific copy of the covered work, then the patent license
    you grant is automatically extended to all recipients of the covered
    work and works based on it.

      A patent license is "discriminatory" if it does not include within
    the scope of its coverage, prohibits the exercise of, or is
    conditioned on the non-exercise of one or more of the rights that are
    specifically granted under this License.  You may not convey a covered
    work if you are a party to an arrangement with a third party that is
    in the business of distributing software, under which you make payment
    to the third party based on the extent of your activity of conveying
    the work, and under which the third party grants, to any of the
    parties who would receive the covered work from you, a discriminatory
    patent license (a) in connection with copies of the covered work
    conveyed by you (or copies made from those copies), or (b) primarily
    for and in connection with specific products or compilations that
    contain the covered work, unless you entered into that arrangement,
    or that patent license was granted, prior to 28 March 2007.

      Nothing in this License shall be construed as excluding or limiting
    any implied license or other defenses to infringement that may
    otherwise be available to you under applicable patent law.

      12. No Surrender of Others' Freedom.

      If conditions are imposed on you (whether by court order, agreement or
    otherwise) that contradict the conditions of this License, they do not
    excuse you from the conditions of this License.  If you cannot convey a
    covered work so as to satisfy simultaneously your obligations under this
    License and any other pertinent obligations, then as a consequence you may
    not convey it at all.  For example, if you agree to terms that obligate you
    to collect a royalty for further conveying from those to whom you convey
    the Program, the only way you could satisfy both those terms and this
    License would be to refrain entirely from conveying the Program.

      13. Use with the GNU Affero General Public License.

      Notwithstanding any other provision of this License, you have
    permission to link or combine any covered work with a work licensed
    under version 3 of the GNU Affero General Public License into a single
    combined work, and to convey the resulting work.  The terms of this
    License will continue to apply to the part which is the covered work,
    but the special requirements of the GNU Affero General Public License,
    section 13, concerning interaction through a network will apply to the
    combination as such.

      14. Revised Versions of this License.

      The Free Software Foundation may publish revised and/or new versions of
    the GNU General Public License from time to time.  Such new versions will
    be similar in spirit to the present version, but may differ in detail to
    address new problems or concerns.

      Each version is given a distinguishing version number.  If the
    Program specifies that a certain numbered version of the GNU General
    Public License "or any later version" applies to it, you have the
    option of following the terms and conditions either of that numbered
    version or of any later version published by the Free Software
    Foundation.  If the Program does not specify a version number of the
    GNU General Public License, you may choose any version ever published
    by the Free Software Foundation.

      If the Program specifies that a proxy can decide which future
    versions of the GNU General Public License can be used, that proxy's
    public statement of acceptance of a version permanently authorizes you
    to choose that version for the Program.

      Later license versions may give you additional or different
    permissions.  However, no additional obligations are imposed on any
    author or copyright holder as a result of your choosing to follow a
    later version.

      15. Disclaimer of Warranty.

      THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
    APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
    HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
    OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
    IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
    ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

      16. Limitation of Liability.

      IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
    THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
    GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
    USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
    DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
    PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
    EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGES.

      17. Interpretation of Sections 15 and 16.

      If the disclaimer of warranty and limitation of liability provided
    above cannot be given local legal effect according to their terms,
    reviewing courts shall apply local law that most closely approximates
    an absolute waiver of all civil liability in connection with the
    Program, unless a warranty or assumption of liability accompanies a
    copy of the Program in return for a fee.

                         END OF TERMS AND CONDITIONS

                How to Apply These Terms to Your New Programs

      If you develop a new program, and you want it to be of the greatest
    possible use to the public, the best way to achieve this is to make it
    free software which everyone can redistribute and change under these terms.

      To do so, attach the following notices to the program.  It is safest
    to attach them to the start of each source file to most effectively
    state the exclusion of warranty; and each file should have at least
    the "copyright" line and a pointer to where the full notice is found.

        <one line to give the program's name and a brief idea of what it does.>
        Copyright (C) <year>  <name of author>

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Also add information on how to contact you by electronic and paper mail.

      If the program does terminal interaction, make it output a short
    notice like this when it starts in an interactive mode:

        <program>  Copyright (C) <year>  <name of author>
        This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
        This is free software, and you are welcome to redistribute it
        under certain conditions; type `show c' for details.

    The hypothetical commands `show w' and `show c' should show the appropriate
    parts of the General Public License.  Of course, your program's commands
    might be different; for a GUI interface, you would use an "about box".

      You should also get your employer (if you work as a programmer) or school,
    if any, to sign a "copyright disclaimer" for the program, if necessary.
    For more information on this, and how to apply and follow the GNU GPL, see
    <http://www.gnu.org/licenses/>.

      The GNU General Public License does not permit incorporating your program
    into proprietary programs.  If your program is a subroutine library, you
    may consider it more useful to permit linking proprietary applications with
    the library.  If this is what you want to do, use the GNU Lesser General
    Public License instead of this License.  But first, please read
    <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: flycheck.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: GNU General Public License,  Up: Top

17 GNU Free Documentation License
*********************************


                    GNU Free Documentation License
                     Version 1.3, 3 November 2008


     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
         <http://fsf.org/>
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

    0. PREAMBLE

    The purpose of this License is to make a manual, textbook, or other
    functional and useful document "free" in the sense of freedom: to
    assure everyone the effective freedom to copy and redistribute it,
    with or without modifying it, either commercially or noncommercially.
    Secondarily, this License preserves for the author and publisher a way
    to get credit for their work, while not being considered responsible
    for modifications made by others.

    This License is a kind of "copyleft", which means that derivative
    works of the document must themselves be free in the same sense.  It
    complements the GNU General Public License, which is a copyleft
    license designed for free software.

    We have designed this License in order to use it for manuals for free
    software, because free software needs free documentation: a free
    program should come with manuals providing the same freedoms that the
    software does.  But this License is not limited to software manuals;
    it can be used for any textual work, regardless of subject matter or
    whether it is published as a printed book.  We recommend this License
    principally for works whose purpose is instruction or reference.


    1. APPLICABILITY AND DEFINITIONS

    This License applies to any manual or other work, in any medium, that
    contains a notice placed by the copyright holder saying it can be
    distributed under the terms of this License.  Such a notice grants a
    world-wide, royalty-free license, unlimited in duration, to use that
    work under the conditions stated herein.  The "Document", below,
    refers to any such manual or work.  Any member of the public is a
    licensee, and is addressed as "you".  You accept the license if you
    copy, modify or distribute the work in a way requiring permission
    under copyright law.

    A "Modified Version" of the Document means any work containing the
    Document or a portion of it, either copied verbatim, or with
    modifications and/or translated into another language.

    A "Secondary Section" is a named appendix or a front-matter section of
    the Document that deals exclusively with the relationship of the
    publishers or authors of the Document to the Document's overall
    subject (or to related matters) and contains nothing that could fall
    directly within that overall subject.  (Thus, if the Document is in
    part a textbook of mathematics, a Secondary Section may not explain
    any mathematics.)  The relationship could be a matter of historical
    connection with the subject or with related matters, or of legal,
    commercial, philosophical, ethical or political position regarding
    them.

    The "Invariant Sections" are certain Secondary Sections whose titles
    are designated, as being those of Invariant Sections, in the notice
    that says that the Document is released under this License.  If a
    section does not fit the above definition of Secondary then it is not
    allowed to be designated as Invariant.  The Document may contain zero
    Invariant Sections.  If the Document does not identify any Invariant
    Sections then there are none.

    The "Cover Texts" are certain short passages of text that are listed,
    as Front-Cover Texts or Back-Cover Texts, in the notice that says that
    the Document is released under this License.  A Front-Cover Text may
    be at most 5 words, and a Back-Cover Text may be at most 25 words.

    A "Transparent" copy of the Document means a machine-readable copy,
    represented in a format whose specification is available to the
    general public, that is suitable for revising the document
    straightforwardly with generic text editors or (for images composed of
    pixels) generic paint programs or (for drawings) some widely available
    drawing editor, and that is suitable for input to text formatters or
    for automatic translation to a variety of formats suitable for input
    to text formatters.  A copy made in an otherwise Transparent file
    format whose markup, or absence of markup, has been arranged to thwart
    or discourage subsequent modification by readers is not Transparent.
    An image format is not Transparent if used for any substantial amount
    of text.  A copy that is not "Transparent" is called "Opaque".

    Examples of suitable formats for Transparent copies include plain
    ASCII without markup, Texinfo input format, LaTeX input format, SGML
    or XML using a publicly available DTD, and standard-conforming simple
    HTML, PostScript or PDF designed for human modification.  Examples of
    transparent image formats include PNG, XCF and JPG.  Opaque formats
    include proprietary formats that can be read and edited only by
    proprietary word processors, SGML or XML for which the DTD and/or
    processing tools are not generally available, and the
    machine-generated HTML, PostScript or PDF produced by some word
    processors for output purposes only.

    The "Title Page" means, for a printed book, the title page itself,
    plus such following pages as are needed to hold, legibly, the material
    this License requires to appear in the title page.  For works in
    formats which do not have any title page as such, "Title Page" means
    the text near the most prominent appearance of the work's title,
    preceding the beginning of the body of the text.

    The "publisher" means any person or entity that distributes copies of
    the Document to the public.

    A section "Entitled XYZ" means a named subunit of the Document whose
    title either is precisely XYZ or contains XYZ in parentheses following
    text that translates XYZ in another language.  (Here XYZ stands for a
    specific section name mentioned below, such as "Acknowledgements",
    "Dedications", "Endorsements", or "History".)  To "Preserve the Title"
    of such a section when you modify the Document means that it remains a
    section "Entitled XYZ" according to this definition.

    The Document may include Warranty Disclaimers next to the notice which
    states that this License applies to the Document.  These Warranty
    Disclaimers are considered to be included by reference in this
    License, but only as regards disclaiming warranties: any other
    implication that these Warranty Disclaimers may have is void and has
    no effect on the meaning of this License.

    2. VERBATIM COPYING

    You may copy and distribute the Document in any medium, either
    commercially or noncommercially, provided that this License, the
    copyright notices, and the license notice saying this License applies
    to the Document are reproduced in all copies, and that you add no
    other conditions whatsoever to those of this License.  You may not use
    technical measures to obstruct or control the reading or further
    copying of the copies you make or distribute.  However, you may accept
    compensation in exchange for copies.  If you distribute a large enough
    number of copies you must also follow the conditions in section 3.

    You may also lend copies, under the same conditions stated above, and
    you may publicly display copies.


    3. COPYING IN QUANTITY

    If you publish printed copies (or copies in media that commonly have
    printed covers) of the Document, numbering more than 100, and the
    Document's license notice requires Cover Texts, you must enclose the
    copies in covers that carry, clearly and legibly, all these Cover
    Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
    the back cover.  Both covers must also clearly and legibly identify
    you as the publisher of these copies.  The front cover must present
    the full title with all words of the title equally prominent and
    visible.  You may add other material on the covers in addition.
    Copying with changes limited to the covers, as long as they preserve
    the title of the Document and satisfy these conditions, can be treated
    as verbatim copying in other respects.

    If the required texts for either cover are too voluminous to fit
    legibly, you should put the first ones listed (as many as fit
    reasonably) on the actual cover, and continue the rest onto adjacent
    pages.

    If you publish or distribute Opaque copies of the Document numbering
    more than 100, you must either include a machine-readable Transparent
    copy along with each Opaque copy, or state in or with each Opaque copy
    a computer-network location from which the general network-using
    public has access to download using public-standard network protocols
    a complete Transparent copy of the Document, free of added material.
    If you use the latter option, you must take reasonably prudent steps,
    when you begin distribution of Opaque copies in quantity, to ensure
    that this Transparent copy will remain thus accessible at the stated
    location until at least one year after the last time you distribute an
    Opaque copy (directly or through your agents or retailers) of that
    edition to the public.

    It is requested, but not required, that you contact the authors of the
    Document well before redistributing any large number of copies, to
    give them a chance to provide you with an updated version of the
    Document.


    4. MODIFICATIONS

    You may copy and distribute a Modified Version of the Document under
    the conditions of sections 2 and 3 above, provided that you release
    the Modified Version under precisely this License, with the Modified
    Version filling the role of the Document, thus licensing distribution
    and modification of the Modified Version to whoever possesses a copy
    of it.  In addition, you must do these things in the Modified Version:

    A. Use in the Title Page (and on the covers, if any) a title distinct
       from that of the Document, and from those of previous versions
       (which should, if there were any, be listed in the History section
       of the Document).  You may use the same title as a previous version
       if the original publisher of that version gives permission.
    B. List on the Title Page, as authors, one or more persons or entities
       responsible for authorship of the modifications in the Modified
       Version, together with at least five of the principal authors of the
       Document (all of its principal authors, if it has fewer than five),
       unless they release you from this requirement.
    C. State on the Title page the name of the publisher of the
       Modified Version, as the publisher.
    D. Preserve all the copyright notices of the Document.
    E. Add an appropriate copyright notice for your modifications
       adjacent to the other copyright notices.
    F. Include, immediately after the copyright notices, a license notice
       giving the public permission to use the Modified Version under the
       terms of this License, in the form shown in the Addendum below.
    G. Preserve in that license notice the full lists of Invariant Sections
       and required Cover Texts given in the Document's license notice.
    H. Include an unaltered copy of this License.
    I. Preserve the section Entitled "History", Preserve its Title, and add
       to it an item stating at least the title, year, new authors, and
       publisher of the Modified Version as given on the Title Page.  If
       there is no section Entitled "History" in the Document, create one
       stating the title, year, authors, and publisher of the Document as
       given on its Title Page, then add an item describing the Modified
       Version as stated in the previous sentence.
    J. Preserve the network location, if any, given in the Document for
       public access to a Transparent copy of the Document, and likewise
       the network locations given in the Document for previous versions
       it was based on.  These may be placed in the "History" section.
       You may omit a network location for a work that was published at
       least four years before the Document itself, or if the original
       publisher of the version it refers to gives permission.
    K. For any section Entitled "Acknowledgements" or "Dedications",
       Preserve the Title of the section, and preserve in the section all
       the substance and tone of each of the contributor acknowledgements
       and/or dedications given therein.
    L. Preserve all the Invariant Sections of the Document,
       unaltered in their text and in their titles.  Section numbers
       or the equivalent are not considered part of the section titles.
    M. Delete any section Entitled "Endorsements".  Such a section
       may not be included in the Modified Version.
    N. Do not retitle any existing section to be Entitled "Endorsements"
       or to conflict in title with any Invariant Section.
    O. Preserve any Warranty Disclaimers.

    If the Modified Version includes new front-matter sections or
    appendices that qualify as Secondary Sections and contain no material
    copied from the Document, you may at your option designate some or all
    of these sections as invariant.  To do this, add their titles to the
    list of Invariant Sections in the Modified Version's license notice.
    These titles must be distinct from any other section titles.

    You may add a section Entitled "Endorsements", provided it contains
    nothing but endorsements of your Modified Version by various
    parties--for example, statements of peer review or that the text has
    been approved by an organization as the authoritative definition of a
    standard.

    You may add a passage of up to five words as a Front-Cover Text, and a
    passage of up to 25 words as a Back-Cover Text, to the end of the list
    of Cover Texts in the Modified Version.  Only one passage of
    Front-Cover Text and one of Back-Cover Text may be added by (or
    through arrangements made by) any one entity.  If the Document already
    includes a cover text for the same cover, previously added by you or
    by arrangement made by the same entity you are acting on behalf of,
    you may not add another; but you may replace the old one, on explicit
    permission from the previous publisher that added the old one.

    The author(s) and publisher(s) of the Document do not by this License
    give permission to use their names for publicity for or to assert or
    imply endorsement of any Modified Version.


    5. COMBINING DOCUMENTS

    You may combine the Document with other documents released under this
    License, under the terms defined in section 4 above for modified
    versions, provided that you include in the combination all of the
    Invariant Sections of all of the original documents, unmodified, and
    list them all as Invariant Sections of your combined work in its
    license notice, and that you preserve all their Warranty Disclaimers.

    The combined work need only contain one copy of this License, and
    multiple identical Invariant Sections may be replaced with a single
    copy.  If there are multiple Invariant Sections with the same name but
    different contents, make the title of each such section unique by
    adding at the end of it, in parentheses, the name of the original
    author or publisher of that section if known, or else a unique number.
    Make the same adjustment to the section titles in the list of
    Invariant Sections in the license notice of the combined work.

    In the combination, you must combine any sections Entitled "History"
    in the various original documents, forming one section Entitled
    "History"; likewise combine any sections Entitled "Acknowledgements",
    and any sections Entitled "Dedications".  You must delete all sections
    Entitled "Endorsements".


    6. COLLECTIONS OF DOCUMENTS

    You may make a collection consisting of the Document and other
    documents released under this License, and replace the individual
    copies of this License in the various documents with a single copy
    that is included in the collection, provided that you follow the rules
    of this License for verbatim copying of each of the documents in all
    other respects.

    You may extract a single document from such a collection, and
    distribute it individually under this License, provided you insert a
    copy of this License into the extracted document, and follow this
    License in all other respects regarding verbatim copying of that
    document.


    7. AGGREGATION WITH INDEPENDENT WORKS

    A compilation of the Document or its derivatives with other separate
    and independent documents or works, in or on a volume of a storage or
    distribution medium, is called an "aggregate" if the copyright
    resulting from the compilation is not used to limit the legal rights
    of the compilation's users beyond what the individual works permit.
    When the Document is included in an aggregate, this License does not
    apply to the other works in the aggregate which are not themselves
    derivative works of the Document.

    If the Cover Text requirement of section 3 is applicable to these
    copies of the Document, then if the Document is less than one half of
    the entire aggregate, the Document's Cover Texts may be placed on
    covers that bracket the Document within the aggregate, or the
    electronic equivalent of covers if the Document is in electronic form.
    Otherwise they must appear on printed covers that bracket the whole
    aggregate.


    8. TRANSLATION

    Translation is considered a kind of modification, so you may
    distribute translations of the Document under the terms of section 4.
    Replacing Invariant Sections with translations requires special
    permission from their copyright holders, but you may include
    translations of some or all Invariant Sections in addition to the
    original versions of these Invariant Sections.  You may include a
    translation of this License, and all the license notices in the
    Document, and any Warranty Disclaimers, provided that you also include
    the original English version of this License and the original versions
    of those notices and disclaimers.  In case of a disagreement between
    the translation and the original version of this License or a notice
    or disclaimer, the original version will prevail.

    If a section in the Document is Entitled "Acknowledgements",
    "Dedications", or "History", the requirement (section 4) to Preserve
    its Title (section 1) will typically require changing the actual
    title.


    9. TERMINATION

    You may not copy, modify, sublicense, or distribute the Document
    except as expressly provided under this License.  Any attempt
    otherwise to copy, modify, sublicense, or distribute it is void, and
    will automatically terminate your rights under this License.

    However, if you cease all violation of this License, then your license
    from a particular copyright holder is reinstated (a) provisionally,
    unless and until the copyright holder explicitly and finally
    terminates your license, and (b) permanently, if the copyright holder
    fails to notify you of the violation by some reasonable means prior to
    60 days after the cessation.

    Moreover, your license from a particular copyright holder is
    reinstated permanently if the copyright holder notifies you of the
    violation by some reasonable means, this is the first time you have
    received notice of violation of this License (for any work) from that
    copyright holder, and you cure the violation prior to 30 days after
    your receipt of the notice.

    Termination of your rights under this section does not terminate the
    licenses of parties who have received copies or rights from you under
    this License.  If your rights have been terminated and not permanently
    reinstated, receipt of a copy of some or all of the same material does
    not give you any rights to use it.


    10. FUTURE REVISIONS OF THIS LICENSE

    The Free Software Foundation may publish new, revised versions of the
    GNU Free Documentation License from time to time.  Such new versions
    will be similar in spirit to the present version, but may differ in
    detail to address new problems or concerns.  See
    http://www.gnu.org/copyleft/.

    Each version of the License is given a distinguishing version number.
    If the Document specifies that a particular numbered version of this
    License "or any later version" applies to it, you have the option of
    following the terms and conditions either of that specified version or
    of any later version that has been published (not as a draft) by the
    Free Software Foundation.  If the Document does not specify a version
    number of this License, you may choose any version ever published (not
    as a draft) by the Free Software Foundation.  If the Document
    specifies that a proxy can decide which future versions of this
    License can be used, that proxy's public statement of acceptance of a
    version permanently authorizes you to choose that version for the
    Document.

    11. RELICENSING

    "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
    World Wide Web server that publishes copyrightable works and also
    provides prominent facilities for anybody to edit those works.  A
    public wiki that anybody can edit is an example of such a server.  A
    "Massive Multiauthor Collaboration" (or "MMC") contained in the site
    means any set of copyrightable works thus published on the MMC site.

    "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
    license published by Creative Commons Corporation, a not-for-profit
    corporation with a principal place of business in San Francisco,
    California, as well as future copyleft versions of that license
    published by that same organization.

    "Incorporate" means to publish or republish a Document, in whole or in
    part, as part of another Document.

    An MMC is "eligible for relicensing" if it is licensed under this
    License, and if all works that were first published under this License
    somewhere other than this MMC, and subsequently incorporated in whole or
    in part into the MMC, (1) had no cover texts or invariant sections, and
    (2) were thus incorporated prior to November 1, 2008.

    The operator of an MMC Site may republish an MMC contained in the site
    under CC-BY-SA on the same site at any time before August 1, 2009,
    provided the MMC is eligible for relicensing.


    ADDENDUM: How to use this License for your documents

    To use this License in a document you have written, include a copy of
    the License in the document and put the following copyright and
    license notices just after the title page:

        Copyright (c)  YEAR  YOUR NAME.
        Permission is granted to copy, distribute and/or modify this document
        under the terms of the GNU Free Documentation License, Version 1.3
        or any later version published by the Free Software Foundation;
        with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
        A copy of the license is included in the section entitled "GNU
        Free Documentation License".

    If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
    replace the "with...Texts." line with this:

        with the Invariant Sections being LIST THEIR TITLES, with the
        Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

    If you have Invariant Sections without Cover Texts, or some other
    combination of the three, merge those two alternatives to suit the
    situation.

    If your document contains nontrivial examples of program code, we
    recommend releasing these examples in parallel under your choice of
    free software license, such as the GNU General Public License,
    to permit their use in free software.



Local Variables:
coding: utf-8
End:
