This is flycheck.info, produced by makeinfo version 5.2 from
flycheck.texi.

This manual is for Flycheck version 0.22-cvs.

Copyright © 2014, Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     documentation under the terms of the GNU Free Documentation
     License, Version 1.3 or any later version published by the Free
     Software Foundation; with no Invariant Sections, no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled “GNU Free Documentation License.”.

     Alternatively, you may copy, distribute and/or modify this
     documentation under the terms of the Creative Commons
     Attribution-ShareAlike 4.0 International Public License.  A copy of
     the license can be obtained at
     <https://creativecommons.org/licenses/by-sa/4.0/legalcode>.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* flycheck: (flycheck.info). On the fly syntax checking for GNU Emacs
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.2.3.


File: flycheck.info,  Node: Builtin syntax checker predicates,  Next: Utilities,  Prev: Builtin option filters,  Up: Flycheck API

10.9 Builtin syntax checker predicates
======================================

 -- Function: flycheck -buffer-saved-p &optional buffer

     Determine whether BUFFER is saved to a file.

     BUFFER is the buffer to check.  If omitted or nil, use the
     current buffer as BUFFER.

     Return non-nil if the BUFFER is backed by a file, and not
     modified, or nil otherwise.


File: flycheck.info,  Node: Utilities,  Prev: Builtin syntax checker predicates,  Up: Flycheck API

10.10 Utilities
===============

 -- Function: flycheck -rx-to-string form &optional no-group

     Like ‘`rx-to-string'’ for FORM, but with special keywords:

     ‘`line'’
          matches the line number.

     ‘`column'’
          matches the column number.

     ‘(file-name SEXP ...)’
          matches the file name.  SEXP constitutes the body of the message.  If no
          SEXP is given, use a default body  of ‘(minimal-match
          (one-or-more not-newline))’.

     ‘(message SEXP ...)’
          matches the message. SEXP constitutes the body of the message.  If no SEXP
          is given, use a default body of ‘(one-or-more not-newline)’.

     NO-GROUP is passed to ‘`rx-to-string'’.

 -- Function: flycheck -string-list-p obj

     Determine if OBJ is a list of strings.

 -- Function: flycheck -symbol-list-p obj

     Determine if OBJ is a list of symbols.


File: flycheck.info,  Node: Flycheck ERT API,  Next: Contribution guidelines,  Prev: Flycheck API,  Up: Top

11 Flycheck ERT API
*******************

This chapter documents the Flycheck ERT API, which is used throughout
Flycheck’s own test suite, and available for use in test suites for your
own Flycheck extensions.

* Menu:

* Loading:: 
* Compatibility:: 
* Initialization:: 
* Utility macros for buffer handling:: 
* Utility macros for resource blocks:: 
* Test resources:: 
* Environment information:: 
* Test case definitions:: 
* Test case results:: 
* Syntax checking in test cases:: 
* Test assertions:: 


File: flycheck.info,  Node: Loading,  Next: Compatibility,  Up: Flycheck ERT API

11.1 Loading
============

The ERT API is provided by the ‘flycheck-ert’ library, which is part of
the Flycheck package.  If the Flycheck package is installed (see *note
Installation: 30.), you can load the ERT API with:

     (require 'flycheck-ert)

This will also load the ‘ert’ and ‘flycheck’ libraries.


File: flycheck.info,  Node: Compatibility,  Next: Initialization,  Prev: Loading,  Up: Flycheck ERT API

11.2 Compatibility
==================

‘flycheck-ert’ is compatible with all ERT versions included in Emacs
from 24.1 onwards.

     Note: Test skipping

     ERT in Emacs 24.3 and earlier does not support skipped tests.  For
     these versions, ‘flycheck-ert’ provides limited support for skipped
     tests by marking them as expected to fail.

     For this feature to work, you *must* call ‘flycheck-ert-initialize’
     after defining all test cases.


File: flycheck.info,  Node: Initialization,  Next: Utility macros for buffer handling,  Prev: Compatibility,  Up: Flycheck ERT API

11.3 Initialization
===================

Flycheck ERT adds support for test resources (see *note Test resources:
221.).  For this feature, you need to initialize Flycheck ERT with a
resource directory by calling *note flycheck-ert-initialize: 222.:

 -- Function: flycheck -ert-initialize resource-dir

     Initialize a test suite with RESOURCE-DIR.

     RESOURCE-DIR is the directory, *note ‘flycheck-ert-resource-filename’: 223.
     should use to lookup resource files.


File: flycheck.info,  Node: Utility macros for buffer handling,  Next: Utility macros for resource blocks,  Prev: Initialization,  Up: Flycheck ERT API

11.4 Utility macros for buffer handling
=======================================

 -- Macro: flycheck -ert-with-temp-buffer &rest body

     Eval BODY within a temporary buffer.

     Like ‘`with-temp-buffer'’, but resets the modification state of the
     temporary buffer to make sure that it is properly killed even if
     it has a backing file and is modified.

 -- Macro: flycheck -ert-with-file-buffer file-name &rest body

     Create a buffer from FILE-NAME and eval BODY.

     BODY is evaluated with ‘`current-buffer'’ being a buffer with the
     contents FILE-NAME.

 -- Macro: flycheck -ert-with-help-buffer &rest body

     Execute BODY and kill the help buffer afterwards.

     Use this macro to test functions that create a Help buffer.


File: flycheck.info,  Node: Utility macros for resource blocks,  Next: Test resources,  Prev: Utility macros for buffer handling,  Up: Flycheck ERT API

11.5 Utility macros for resource blocks
=======================================

 -- Macro: flycheck -ert-with-env env &rest body

     Add ENV to ‘`process-environment'’ in BODY.

     Execute BODY with a ‘`process-environment'’ with contains all
     variables from ENV added.

     ENV is an alist, where each cons cell ‘(VAR . VALUE)’ is a
     environment variable VAR to be added to ‘`process-environment'’
     with VALUE.

 -- Macro: flycheck -ert-with-global-mode &rest body

     Execute BODY with Global Flycheck Mode enabled.

     After BODY, restore the old state of Global Flycheck Mode.


File: flycheck.info,  Node: Test resources,  Next: Environment information,  Prev: Utility macros for resource blocks,  Up: Flycheck ERT API

11.6 Test resources
===================

The following functions and macros load resources from the directory
given to *note flycheck-ert-initialize: 222.

 -- Function: flycheck -ert-resource-filename resource-file

     Determine the absolute file name of a RESOURCE-FILE.

     Relative file names are expanded against
     ‘`flycheck-ert-resources-directory'’.

 -- Macro: flycheck -ert-with-resource-buffer resource-file &rest body

     Create a temp buffer from a RESOURCE-FILE and execute BODY.

     The absolute file name of RESOURCE-FILE is determined with
     *note ‘flycheck-ert-resource-filename’: 223.

 -- Function: flycheck -ert-locate-config-file filename _checker

     Find a configuration FILENAME within unit tests.

     _CHECKER is ignored.


File: flycheck.info,  Node: Environment information,  Next: Test case definitions,  Prev: Test resources,  Up: Flycheck ERT API

11.7 Environment information
============================

 -- Constant: flycheck -ert-user-error-type

     The ‘`user-error'’ type used by Flycheck.

 -- Function: flycheck -ert-travis-ci-p

     Determine whether we are running on Travis CI.

 -- Function: flycheck -ert-check-gpg

     Check whether GPG is available.

 -- Function: flycheck -ert-extract-version-command re executable &rest
          args

     Use RE to extract the version from EXECUTABLE with ARGS.

     Run EXECUTABLE with ARGS, catch the output, and apply RE to find
     the version number.  Return the text captured by the first group
     in RE, or nil, if EXECUTABLE is missing, or if RE failed to
     match.


File: flycheck.info,  Node: Test case definitions,  Next: Test case results,  Prev: Environment information,  Up: Flycheck ERT API

11.8 Test case definitions
==========================

 -- Macro: flycheck -ert-def-checker-test checker language name &rest
          keys-and-body

     Define a test case for a syntax CHECKER for LANGUAGE.

     CHECKER is a symbol or a list of symbols denoting syntax checkers
     being tested by the test.  The test case is skipped, if any of
     these checkers cannot be used.  LANGUAGE is a symbol or a list of
     symbols denoting the programming languages supported by the
     syntax checkers.  This is currently only used for tagging the
     test appropriately.

     NAME is a symbol denoting the local name of the test.  The test
     itself is ultimately named
     ‘`flycheck-define-checker/CHECKER/NAME'’.  If CHECKER is a list,
     the first checker in the list is used for naming the test.

     Optionally, the keyword arguments ‘`:tags'’ and ‘`:expected-result'’
     may be given.  They have the same meaning as in ‘`ert-deftest.'’,
     and are added to the tags and result expectations set up by this
     macro.

     The remaining forms denote the body of the test case, including
     assertions and setup code.


File: flycheck.info,  Node: Test case results,  Next: Syntax checking in test cases,  Prev: Test case definitions,  Up: Flycheck ERT API

11.9 Test case results
======================

 -- Function: flycheck -ert-syntax-check-timed-out-p result

     Whether RESULT denotes a timed-out test.

     RESULT is an ERT test result object.


File: flycheck.info,  Node: Syntax checking in test cases,  Next: Test assertions,  Prev: Test case results,  Up: Flycheck ERT API

11.10 Syntax checking in test cases
===================================

 -- Function: flycheck -ert-buffer-sync

     Like *note ‘flycheck-buffer’: 43, but synchronously.

 -- Function: flycheck -ert-ensure-clear

     Clear the current buffer.

     Raise an assertion error if the buffer is not clear afterwards.


File: flycheck.info,  Node: Test assertions,  Prev: Syntax checking in test cases,  Up: Flycheck ERT API

11.11 Test assertions
=====================

 -- Function: flycheck -ert-should-overlay error

     Test that ERROR has a proper overlay in the current buffer.

     ERROR is a Flycheck error object.

 -- Function: flycheck -ert-should-errors &rest errors

     Test that the current buffers has ERRORS.

     ERRORS is a list of errors expected to be present in the current
     buffer.  Each error is given as a list of arguments to
     *note ‘flycheck-error-new-at’: 1fc.

     If ERRORS are omitted, test that there are no errors at all in
     the current buffer.

     With ERRORS, test that each error in ERRORS is present in the
     current buffer, and that the number of errors in the current
     buffer is equal to the number of given ERRORS.  In other words,
     check that the buffer has all ERRORS, and no other errors.

 -- Function: flycheck -ert-should-syntax-check resource-file modes
          &rest errors

     Test a syntax check in RESOURCE-FILE with MODES.

     RESOURCE-FILE is the file to check.  MODES is a single major mode
     symbol or a list thereof, specifying the major modes to syntax
     check with.  If more than one major mode is specified, the test
     is run for each mode separately, so if you give three major
     modes, the entire test will run three times.  ERRORS is the list
     of expected errors, as in *note ‘flycheck-ert-should-errors’: 23c.  If
     omitted, the syntax check must not emit any errors.  The errors
     are cleared after each test.

     The syntax checker is selected via standard syntax checker
     selection.  To test a specific checker, you need to set
     *note ‘flycheck-checker’: 21. or *note ‘flycheck-disabled-checkers’: 60. accordingly
     before using this predicate, depending on whether you want to use
     manual or automatic checker selection.

     During the syntax check, configuration files of syntax checkers
     are also searched in the ‘`config-files'’ sub-directory of the
     resource directory.

 -- Function: flycheck -ert-at-nth-error n

     Determine whether point is at the N’th Flycheck error.

     Return non-nil if the point is at the N’th Flycheck error in the
     current buffer.  Otherwise return nil.


File: flycheck.info,  Node: Contribution guidelines,  Next: Testing Flycheck,  Prev: Flycheck ERT API,  Up: Top

12 Contribution guidelines
**************************

If you discovered bugs and issues, have ideas for improvements or new
features, or want to contribute a new syntax checker, please report to
the issue tracker(1) the repository and send a pull request, but respect
the following guidelines.

* Menu:

* Reporting issues:: 
* Contributing code:: 

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues


File: flycheck.info,  Node: Reporting issues,  Next: Contributing code,  Up: Contribution guidelines

12.1 Reporting issues
=====================

   - Check that the issue has not already been reported.

   - Check that the issue has not already been fixed in the latest code.

   - Be clear and precise (do not prose, but name functions and commands
     exactly).

   - Include the version of Flycheck as shown by ‘M-x flycheck-version’.

   - Open an issue with a clear title and description in grammatically
     correct, complete sentences.


File: flycheck.info,  Node: Contributing code,  Prev: Reporting issues,  Up: Contribution guidelines

12.2 Contributing code
======================

Contributions of code, either as pull requests or as patches, are _very_
welcome, but please respect the following guidelines.

* Menu:

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 


File: flycheck.info,  Node: General,  Next: Code style,  Up: Contributing code

12.2.1 General
--------------

   - Write good and _complete_ code.

   - Provide use cases and rationale for new features.


File: flycheck.info,  Node: Code style,  Next: Commit messages,  Prev: General,  Up: Contributing code

12.2.2 Code style
-----------------

   - Generally, use the same coding style and spacing.

   - Do not use tabs for indentation.

   - Add docstrings for every declaration.

   - Make sure your code compiles without warnings with ‘make compile’,
     and has no checkdoc issues with ‘M-x checkdoc-buffer’ or ‘C-c ? d’.
     If you are using Flycheck, just make sure that your code has no
     Flycheck warnings.


File: flycheck.info,  Node: Commit messages,  Next: Contributing syntax checkers,  Prev: Code style,  Up: Contributing code

12.2.3 Commit messages
----------------------

Write commit messages according to Tim Pope’s guidelines(1).  In short:

   - Start with a capitalized, short (50 characters or less) summary,
     followed by a blank line.

   - If necessary, add one or more paragraphs with details, wrapped at
     72 characters.

   - Use present tense and write in the imperative: “Fix bug”, not
     “fixed bug” or “fixes bug”.

   - Separate paragraphs by blank lines.

   - Do _not_ use special markup (e.g.  Markdown).  Commit messages are
     plain text.  You may use ‘*emphasis*’ or ‘_underline_’ though,
     following conventions established on mailing lists.

This is a model commit message:

     Capitalized, short (50 chars or less) summary

     More detailed explanatory text, if necessary.  Wrap it to about 72
     characters or so.  In some contexts, the first line is treated as the
     subject of an email and the rest of the text as the body.  The blank
     line separating the summary from the body is critical (unless you omit
     the body entirely); tools like rebase can get confused if you run the
     two together.

     Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
     or "Fixes bug."  This convention matches up with commit messages generated
     by commands like git merge and git revert.

     Further paragraphs come after blank lines.

     - Bullet points are okay, too

     - Typically a hyphen or asterisk is used for the bullet, followed by a
       single space, with blank lines in between, but conventions vary here

     - Use a hanging indent

Git Commit Mode(2) and Magit(3) provide a major mode for Git commit
messages, which helps you to comply to these guidelines.

   ---------- Footnotes ----------

   (1) 
http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

   (2) https://github.com/magit/git-modes/

   (3) https://github.com/magit/magit/


File: flycheck.info,  Node: Contributing syntax checkers,  Next: Pull requests,  Prev: Commit messages,  Up: Contributing code

12.2.4 Contributing syntax checkers
-----------------------------------

For syntax checkers, some special guidelines apply in addition to the
above:

   - Provide a link to the website of the syntax checker tool in the
     comments of your pull request.

   - Add a proper docstring to your syntax checker, including this URL.

   - Add unit tests for your syntax checker, or provide example code
     that triggers errors for each error pattern of the syntax checker.

   - Extend the Ansible playbooks in ‘playbooks/’ to install the
     required tools in the CI environment and the local testing VM, or
     explain how to install the tool on an Ubuntu 12.04 system.

     Note: Unit tests that can run on Travis CI are *mandatory* for all
     syntax checkers in Flycheck.


File: flycheck.info,  Node: Pull requests,  Prev: Contributing syntax checkers,  Up: Contributing code

12.2.5 Pull requests
--------------------

   - Use a *topic branch* to easily amend a pull request later, if
     necessary.

   - Do *not* open new pull requests, when asked to improve your patch.
     Instead, amend your commits with ‘git rebase -i’, and then update
     the pull request with ‘git push --force’

   - Open a pull request(1) that relates to but one subject with a clear
     title and description in grammatically correct, complete sentences.

     Note: Pull requests *must* pass all tests on Travis CI before being
     merged.

   ---------- Footnotes ----------

   (1) https://help.github.com/articles/using-pull-requests


File: flycheck.info,  Node: Testing Flycheck,  Next: Writing documentation,  Prev: Contribution guidelines,  Up: Top

13 Testing Flycheck
*******************

Flycheck comes with a large unit test suite, which tests all syntax
checkers and large parts of Flychecks internal API and interactive
commands.

This document explains how to use this test suite.

* Menu:

* Test suite layout:: 
* Test running:: 
* Virtual test environment:: 
* Travis CI:: 


File: flycheck.info,  Node: Test suite layout,  Next: Test running,  Up: Testing Flycheck

13.1 Test suite layout
======================

The library ‘flycheck-ert.el’ provides many extensions to ERT, generic
ones as well as specific utilities for testing Flycheck code and syntax
checkers.  You may use this library to write test cases for your own
Flycheck extensions: It is part of the Flycheck package.

All test code is contained in the ‘test/’ sub-directory, which has the
following contents:

   - ‘flycheck-test.el’: The actual unit test suite, that is, the test
     cases plus some local utility functions and macros.

   - ‘resources/’: Resource files used by the test suite, including
     example code in various programming languages to test syntax
     checkers.

   - ‘run.el’: A simple test runner for non-interactive use, which reads
     ERT selectors from the command line and runs all matching tests.


File: flycheck.info,  Node: Test running,  Next: Virtual test environment,  Prev: Test suite layout,  Up: Testing Flycheck

13.2 Test running
=================

First install Emacs Lisp dependencies using Cask(1):

     $ make deps

Then install the syntax checkers that you’d like to test:

     $ brew install go
     $ pip install --user pylint
     $ npm install --global coffee coffee-lint jshint
     $ cabal install hlint shellcheck

     Note: If you’d like to keep your environment clean, use the *note
     Virtual test environment: 250. instead.

Run the entire test suite:

     $ make test

     Note: Tests which can’t be run because of missing tools are
     gracefully skipped.

You may also run a specific subset of test cases by passing an ERT
selector expression.  The following example runs all tests for C and
C++, except those whose name matches ‘gcc’:

     $ make ERTSELECTOR='(and (or (tag language-c) (tag language-c++)) (not "gcc"))' test

See *note (ert)Test Selectors:: for the syntax of test selectors.

You can also use a different Emacs to run the tests with:

     $ make EMACS=emacs-snapshot test

     Note: Keep in mind that you must quote the expression for your
     shell _and_ for Emacs Lisp.

   ---------- Footnotes ----------

   (1) http://cask.readthedocs.org


File: flycheck.info,  Node: Virtual test environment,  Next: Travis CI,  Prev: Test running,  Up: Testing Flycheck

13.3 Virtual test environment
=============================

To run all tests successfully, you need a large amount of external
tools.  To keep your environment clean, and test against a reference
environment, Flycheck provides a virtual machine with a complete test
environment, based on VirtualBox and Vagrant.

The virtual machine contains

   - The latest stable Emacs release

   - A nightly build of Emacs trunk

   - ‘make’ and Cask(1)

   - All syntax checkers supported by Flycheck

To use this VM, first install the following tools on your system:

   - VirtualBox(2)

   - Vagrant(3)

   - Ansible(4)

On Linux, these packages are typically available from the package
manager of your distribution.  On OS X, use the binaries provided for
Vagrant and VirtualBox, and install Ansible from Homebrew(5) with ‘brew
install ansible’.

To start the VM run the following command in the root directory of
Flycheck:

     $ vagrant up

     Warning: On the first time, this command will setup and provision
     the VM, and *download and install over 1GB* of images and packages
     along the way.  Depending on your network connection and disk
     speed, this can take an hour or more.

After the VM is started, you can connect to it:

     $ vagrant ssh

This will give you a bash prompt within the VM, on which you can run the
tests as explained in *note Test running: 24e.

To switch between Emacs versions, pass ‘EMACS’ to ‘make test’:

     $ make EMACS=emacs24 test
     $ make EMACS=emacs-snapshot test

The latter is the default.

When finished, you can shutdown the VM with:

     $ vagrant halt

Occasionally you should provision the test environment again, to update
to the latest Emacs nightly build, and to follow updates of syntax
checker tools.  To do so, use the ‘--provision’ flag when starting the
VM:

     $ vagrant up --provision

You can also provision a running machine with:

     $ vagrant provision

The VM is provisioned from Ansible playbooks in the ‘playbooks/’
sub-directory of the top-level source directory.

   ---------- Footnotes ----------

   (1) http://cask.readthedocs.org

   (2) https://www.virtualbox.org/

   (3) https://www.vagrantup.com/

   (4) http://www.ansible.com/home

   (5) http://brew.sh/


File: flycheck.info,  Node: Travis CI,  Prev: Virtual test environment,  Up: Testing Flycheck

13.4 Travis CI
==============

The entire test suite continuously runs on *note Travis CI: 253. after
every push, with the latest Emacs release and a nightly Emacs snapshot.

Travis CI is configured from ‘.travis.yml’ in the top-level source
directory, and uses mostly the same playbooks for provisioning.

     Note: Travis CI is the *reference environment* for Flycheck’s test
     suite.  All tests *must pass* on Travis CI.

     In case Travis CI diverges from the *note VM: 250, Travis CI is
     authoritative.


File: flycheck.info,  Node: Writing documentation,  Next: Maintenance tasks,  Prev: Testing Flycheck,  Up: Top

14 Writing documentation
************************

This document explains how to edit and building the documentation of
Flycheck.

* Menu:

* Build environment setup:: 
* Building HTML and Texinfo:: 
* Verifying references:: 


File: flycheck.info,  Node: Build environment setup,  Next: Building HTML and Texinfo,  Up: Writing documentation

14.1 Build environment setup
============================

Flycheck’s documentation is written using Sphinx(1) and
sphinxcontrib-emacs(2).  To build the documentation locally, you need to
install these tools first.  This section guides you through the process
of installing them.

First make sure, that you have Python 2.7 and virtualenv(3) available.
To install virtualenv, use:

     $ pip install --user virtualenv

     Note: You probably need to install pip(4) first.  It is available
     in the package repositories of most Linux distributions, as
     ‘python-pip’ or similar.  If ‘pip’ is not available for your Linux
     distribution, or if you are using OS X, please follow the
     instructions to install pip(5).

Then add ‘~/Library/Python/2.7/bin’ (on OS X) or ‘~/.local/bin’ (on
other Unix variants) to ‘$PATH’.

Now create a virtual environment and install the requirements of the
documentation:

     $ mkdir -p ~/.virtualenvs
     $ virtualenv -p python2.7 ~/.virtualenvs/cask
     $ pip install -r doc/requirements.txt

Now you are set up to build the documentation.

   ---------- Footnotes ----------

   (1) http://sphinx-doc.org

   (2) http://sphinxcontrib-emacs.readthedocs.org/en/latest/

   (3) http://virtualenv.readthedocs.org/en/latest/

   (4) https://pip.pypa.io/

   (5) https://pip.pypa.io/en/latest/installing.html


File: flycheck.info,  Node: Building HTML and Texinfo,  Next: Verifying references,  Prev: Build environment setup,  Up: Writing documentation

14.2 Building HTML and Texinfo
==============================

First, switch to the virtual environment you created in the *note Build
environment setup: 256, and make sure that the requirements are up to
date:

     $ source ~/.virtualenvs/cask/bin/activate
     $ pip install -r doc/requirements.txt

Now build the documentation:

     $ make html
     $ make texinfo

The HTML documentation is build to ‘build/doc/html/’, where you can
preview it.  The Texinfo build goes to ‘doc/flycheck.texi’.

     Warning: Unlike the HTML output, the Texinfo output is _committed_
     to the repository, since it is needed by MELPA(1) to build an Info
     manual for inclusion in the Flycheck packages.

   ---------- Footnotes ----------

   (1) http://melpa.org/


File: flycheck.info,  Node: Verifying references,  Prev: Building HTML and Texinfo,  Up: Writing documentation

14.3 Verifying references
=========================

Sphinx emits warnings for internal references and cross-references to
Emacs Lisp symbols that could not be resolved.  Your documentation
should build without any such warnings.

You can additionally verify all external references with:

     $ source ~/.virtualenvs/cask/bin/activate
     $ make linkcheck


File: flycheck.info,  Node: Maintenance tasks,  Next: GNU General Public License,  Prev: Writing documentation,  Up: Top

15 Maintenance tasks
********************

This document explains various maintenance tasks for Flycheck, that
contributors have to perform under specific circumstances.

* Menu:

* Rebuilding the Texinfo:: 
* Rasterized logo files:: 


File: flycheck.info,  Node: Rebuilding the Texinfo,  Next: Rasterized logo files,  Up: Maintenance tasks

15.1 Rebuilding the Texinfo
===========================

Flycheck contains a Texinfo version of the documentation at
‘doc/flycheck.texi’, to allow MELPA(1) to build the Info manual for
Flycheck.

     Warning: Do *not* edit this file.  It is generated automatically
     from Flycheck’s documentation.

When making changes to the documentation, you need to rebuild the
Texinfo version with, by following the *note instructions to build the
documentation: 258.

   ---------- Footnotes ----------

   (1) http://melpa.org/


File: flycheck.info,  Node: Rasterized logo files,  Prev: Rebuilding the Texinfo,  Up: Maintenance tasks

15.2 Rasterized logo files
==========================

The source of the Flycheck logo is ‘flycheck.svg’.  The documentation
contains rasterized versions of this logo at

   - ‘doc/images/logo.png’ (the logo shown in the documentation and the
     README)

   - ‘doc/images/favicon.ico’ (the logo for use as favicon of the
     documentation)

     Warning: Do *not* change these files directly.  They are generated
     automatically from the SVG source.

When changing the Flycheck logo, you need to rebuild these files with:

     make images

You need *convert* from ImageMagick(1) and Inkscape(2).  Make sure that
‘inkscape’ is in ‘$PATH’, because ImageMagick’s own SVG renderer cannot
properly render the logo.

   ---------- Footnotes ----------

   (1) http://www.imagemagick.org/

   (2) https://www.inkscape.org/


File: flycheck.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: Maintenance tasks,  Up: Top

16 GNU General Public License
*****************************

                         GNU GENERAL PUBLIC LICENSE
                            Version 3, 29 June 2007

      Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

                                 Preamble

       The GNU General Public License is a free, copyleft license for
     software and other kinds of works.

       The licenses for most software and other practical works are designed
     to take away your freedom to share and change the works.  By contrast,
     the GNU General Public License is intended to guarantee your freedom to
     share and change all versions of a program--to make sure it remains free
     software for all its users.  We, the Free Software Foundation, use the
     GNU General Public License for most of our software; it applies also to
     any other work released this way by its authors.  You can apply it to
     your programs, too.

       When we speak of free software, we are referring to freedom, not
     price.  Our General Public Licenses are designed to make sure that you
     have the freedom to distribute copies of free software (and charge for
     them if you wish), that you receive source code or can get it if you
     want it, that you can change the software or use pieces of it in new
     free programs, and that you know you can do these things.

       To protect your rights, we need to prevent others from denying you
     these rights or asking you to surrender the rights.  Therefore, you have
     certain responsibilities if you distribute copies of the software, or if
     you modify it: responsibilities to respect the freedom of others.

       For example, if you distribute copies of such a program, whether
     gratis or for a fee, you must pass on to the recipients the same
     freedoms that you received.  You must make sure that they, too, receive
     or can get the source code.  And you must show them these terms so they
     know their rights.

       Developers that use the GNU GPL protect your rights with two steps:
     (1) assert copyright on the software, and (2) offer you this License
     giving you legal permission to copy, distribute and/or modify it.

       For the developers' and authors' protection, the GPL clearly explains
     that there is no warranty for this free software.  For both users' and
     authors' sake, the GPL requires that modified versions be marked as
     changed, so that their problems will not be attributed erroneously to
     authors of previous versions.

       Some devices are designed to deny users access to install or run
     modified versions of the software inside them, although the manufacturer
     can do so.  This is fundamentally incompatible with the aim of
     protecting users' freedom to change the software.  The systematic
     pattern of such abuse occurs in the area of products for individuals to
     use, which is precisely where it is most unacceptable.  Therefore, we
     have designed this version of the GPL to prohibit the practice for those
     products.  If such problems arise substantially in other domains, we
     stand ready to extend this provision to those domains in future versions
     of the GPL, as needed to protect the freedom of users.

       Finally, every program is threatened constantly by software patents.
     States should not allow patents to restrict development and use of
     software on general-purpose computers, but in those that do, we wish to
     avoid the special danger that patents applied to a free program could
     make it effectively proprietary.  To prevent this, the GPL assures that
     patents cannot be used to render the program non-free.

       The precise terms and conditions for copying, distribution and
     modification follow.

                            TERMS AND CONDITIONS

       0. Definitions.

       "This License" refers to version 3 of the GNU General Public License.

       "Copyright" also means copyright-like laws that apply to other kinds of
     works, such as semiconductor masks.

       "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

       To "modify" a work means to copy from or adapt all or part of the work
     in a fashion requiring copyright permission, other than the making of an
     exact copy.  The resulting work is called a "modified version" of the
     earlier work or a work "based on" the earlier work.

       A "covered work" means either the unmodified Program or a work based
     on the Program.

       To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on a
     computer or modifying a private copy.  Propagation includes copying,
     distribution (with or without modification), making available to the
     public, and in some countries other activities as well.

       To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user through
     a computer network, with no transfer of a copy, is not conveying.

       An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to the
     extent that warranties are provided), that licensees may convey the
     work under this License, and how to view a copy of this License.  If
     the interface presents a list of user commands or options, such as a
     menu, a prominent item in the list meets this criterion.

       1. Source Code.

       The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

       A "Standard Interface" means an interface that either is an official
     standard defined by a recognized standards body, or, in the case of
     interfaces specified for a particular programming language, one that
     is widely used among developers working in that language.

       The "System Libraries" of an executable work include anything, other
     than the work as a whole, that (a) is included in the normal form of
     packaging a Major Component, but which is not part of that Major
     Component, and (b) serves only to enable use of the work with that
     Major Component, or to implement a Standard Interface for which an
     implementation is available to the public in source code form.  A
     "Major Component", in this context, means a major essential component
     (kernel, window system, and so on) of the specific operating system
     (if any) on which the executable work runs, or a compiler used to
     produce the work, or an object code interpreter used to run it.

       The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts to
     control those activities.  However, it does not include the work's
     System Libraries, or general-purpose tools or generally available free
     programs which are used unmodified in performing those activities but
     which are not part of the work.  For example, Corresponding Source
     includes interface definition files associated with source files for
     the work, and the source code for shared libraries and dynamically
     linked subprograms that the work is specifically designed to require,
     such as by intimate data communication or control flow between those
     subprograms and other parts of the work.

       The Corresponding Source need not include anything that users
     can regenerate automatically from other parts of the Corresponding
     Source.

       The Corresponding Source for a work in source code form is that
     same work.

       2. Basic Permissions.

       All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running a
     covered work is covered by this License only if the output, given its
     content, constitutes a covered work.  This License acknowledges your
     rights of fair use or other equivalent, as provided by copyright law.

       You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise remains
     in force.  You may convey covered works to others for the sole purpose
     of having them make modifications exclusively for you, or provide you
     with facilities for running those works, provided that you comply with
     the terms of this License in conveying all material for which you do
     not control copyright.  Those thus making or running the covered works
     for you must do so exclusively on your behalf, under your direction
     and control, on terms that prohibit them from making any copies of
     your copyrighted material outside their relationship with you.

       Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section 10
     makes it unnecessary.

       3. Protecting Users' Legal Rights From Anti-Circumvention Law.

       No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under article
     11 of the WIPO copyright treaty adopted on 20 December 1996, or
     similar laws prohibiting or restricting circumvention of such
     measures.

       When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such circumvention
     is effected by exercising rights under this License with respect to
     the covered work, and you disclaim any intention to limit operation or
     modification of the work as a means of enforcing, against the work's
     users, your or third parties' legal rights to forbid circumvention of
     technological measures.

       4. Conveying Verbatim Copies.

       You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the code;
     keep intact all notices of the absence of any warranty; and give all
     recipients a copy of this License along with the Program.

       You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

       5. Conveying Modified Source Versions.

       You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these conditions:

         a) The work must carry prominent notices stating that you modified
         it, and giving a relevant date.

         b) The work must carry prominent notices stating that it is
         released under this License and any conditions added under section
         7.  This requirement modifies the requirement in section 4 to
         "keep intact all notices".

         c) You must license the entire work, as a whole, under this
         License to anyone who comes into possession of a copy.  This
         License will therefore apply, along with any applicable section 7
         additional terms, to the whole of the work, and all its parts,
         regardless of how they are packaged.  This License gives no
         permission to license the work in any other way, but it does not
         invalidate such permission if you have separately received it.

         d) If the work has interactive user interfaces, each must display
         Appropriate Legal Notices; however, if the Program has interactive
         interfaces that do not display Appropriate Legal Notices, your
         work need not make them do so.

       A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered work,
     and which are not combined with it such as to form a larger program,
     in or on a volume of a storage or distribution medium, is called an
     "aggregate" if the compilation and its resulting copyright are not
     used to limit the access or legal rights of the compilation's users
     beyond what the individual works permit.  Inclusion of a covered work
     in an aggregate does not cause this License to apply to the other
     parts of the aggregate.

       6. Conveying Non-Source Forms.

       You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this License,
     in one of these ways:

         a) Convey the object code in, or embodied in, a physical product
         (including a physical distribution medium), accompanied by the
         Corresponding Source fixed on a durable physical medium
         customarily used for software interchange.

         b) Convey the object code in, or embodied in, a physical product
         (including a physical distribution medium), accompanied by a
         written offer, valid for at least three years and valid for as
         long as you offer spare parts or customer support for that product
         model, to give anyone who possesses the object code either (1) a
         copy of the Corresponding Source for all the software in the
         product that is covered by this License, on a durable physical
         medium customarily used for software interchange, for a price no
         more than your reasonable cost of physically performing this
         conveying of source, or (2) access to copy the
         Corresponding Source from a network server at no charge.

         c) Convey individual copies of the object code with a copy of the
         written offer to provide the Corresponding Source.  This
         alternative is allowed only occasionally and noncommercially, and
         only if you received the object code with such an offer, in accord
         with subsection 6b.

         d) Convey the object code by offering access from a designated
         place (gratis or for a charge), and offer equivalent access to the
         Corresponding Source in the same way through the same place at no
         further charge.  You need not require recipients to copy the
         Corresponding Source along with the object code.  If the place to
         copy the object code is a network server, the Corresponding Source
         may be on a different server (operated by you or a third party)
         that supports equivalent copying facilities, provided you maintain
         clear directions next to the object code saying where to find the
         Corresponding Source.  Regardless of what server hosts the
         Corresponding Source, you remain obligated to ensure that it is
         available for as long as needed to satisfy these requirements.

         e) Convey the object code using peer-to-peer transmission, provided
         you inform other peers where the object code and Corresponding
         Source of the work are being offered to the general public at no
         charge under subsection 6d.

       A separable portion of the object code, whose source code is excluded
     from the Corresponding Source as a System Library, need not be
     included in conveying the object code work.

       A "User Product" is either (1) a "consumer product", which means any
     tangible personal property which is normally used for personal, family,
     or household purposes, or (2) anything designed or sold for incorporation
     into a dwelling.  In determining whether a product is a consumer product,
     doubtful cases shall be resolved in favor of coverage.  For a particular
     product received by a particular user, "normally used" refers to a
     typical or common use of that class of product, regardless of the status
     of the particular user or of the way in which the particular user
     actually uses, or expects or is expected to use, the product.  A product
     is a consumer product regardless of whether the product has substantial
     commercial, industrial or non-consumer uses, unless such uses represent
     the only significant mode of use of the product.

       "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to install
     and execute modified versions of a covered work in that User Product from
     a modified version of its Corresponding Source.  The information must
     suffice to ensure that the continued functioning of the modified object
     code is in no case prevented or interfered with solely because
     modification has been made.

       If you convey an object code work under this section in, or with, or
     specifically for use in, a User Product, and the conveying occurs as
     part of a transaction in which the right of possession and use of the
     User Product is transferred to the recipient in perpetuity or for a
     fixed term (regardless of how the transaction is characterized), the
     Corresponding Source conveyed under this section must be accompanied
     by the Installation Information.  But this requirement does not apply
     if neither you nor any third party retains the ability to install
     modified object code on the User Product (for example, the work has
     been installed in ROM).

       The requirement to provide Installation Information does not include a
     requirement to continue to provide support service, warranty, or updates
     for a work that has been modified or installed by the recipient, or for
     the User Product in which it has been modified or installed.  Access to a
     network may be denied when the modification itself materially and
     adversely affects the operation of the network or violates the rules and
     protocols for communication across the network.

       Corresponding Source conveyed, and Installation Information provided,
     in accord with this section must be in a format that is publicly
     documented (and with an implementation available to the public in
     source code form), and must require no special password or key for
     unpacking, reading or copying.

       7. Additional Terms.

       "Additional permissions" are terms that supplement the terms of this
     License by making exceptions from one or more of its conditions.
     Additional permissions that are applicable to the entire Program shall
     be treated as though they were included in this License, to the extent
     that they are valid under applicable law.  If additional permissions
     apply only to part of the Program, that part may be used separately
     under those permissions, but the entire Program remains governed by
     this License without regard to the additional permissions.

       When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part of
     it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

       Notwithstanding any other provision of this License, for material you
     add to a covered work, you may (if authorized by the copyright holders of
     that material) supplement the terms of this License with terms:

         a) Disclaiming warranty or limiting liability differently from the
         terms of sections 15 and 16 of this License; or

         b) Requiring preservation of specified reasonable legal notices or
         author attributions in that material or in the Appropriate Legal
         Notices displayed by works containing it; or

         c) Prohibiting misrepresentation of the origin of that material, or
         requiring that modified versions of such material be marked in
         reasonable ways as different from the original version; or

         d) Limiting the use for publicity purposes of names of licensors or
         authors of the material; or

         e) Declining to grant rights under trademark law for use of some
         trade names, trademarks, or service marks; or

         f) Requiring indemnification of licensors and authors of that
         material by anyone who conveys the material (or modified versions of
         it) with contractual assumptions of liability to the recipient, for
         any liability that these contractual assumptions directly impose on
         those licensors and authors.

       All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as you
     received it, or any part of it, contains a notice stating that it is
     governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document contains
     a further restriction but permits relicensing or conveying under this
     License, you may add to a covered work material governed by the terms
     of that license document, provided that the further restriction does
     not survive such relicensing or conveying.

       If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

       Additional terms, permissive or non-permissive, may be stated in the
     form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

       8. Termination.

       You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights under
     this License (including any patent licenses granted under the third
     paragraph of section 11).

       However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the copyright
     holder fails to notify you of the violation by some reasonable means
     prior to 60 days after the cessation.

       Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

       Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, you do not qualify to receive new licenses for the same
     material under section 10.

       9. Acceptance Not Required for Having Copies.

       You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer transmission
     to receive a copy likewise does not require acceptance.  However,
     nothing other than this License grants you permission to propagate or
     modify any covered work.  These actions infringe copyright if you do
     not accept this License.  Therefore, by modifying or propagating a
     covered work, you indicate your acceptance of this License to do so.

       10. Automatic Licensing of Downstream Recipients.

       Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not responsible
     for enforcing compliance by third parties with this License.

       An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a covered
     work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or could
     give under the previous paragraph, plus a right to possession of the
     Corresponding Source of the work from the predecessor in interest, if
     the predecessor has it or can get it with reasonable efforts.

       You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you may
     not impose a license fee, royalty, or other charge for exercise of
     rights granted under this License, and you may not initiate litigation
     (including a cross-claim or counterclaim in a lawsuit) alleging that
     any patent claim is infringed by making, using, selling, offering for
     sale, or importing the Program or any portion of it.

       11. Patents.

       A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.  The
     work thus licensed is called the contributor's "contributor version".

       A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner, permitted
     by this License, of making, using, or selling its contributor version,
     but do not include claims that would be infringed only as a
     consequence of further modification of the contributor version.  For
     purposes of this definition, "control" includes the right to grant
     patent sublicenses in a manner consistent with the requirements of
     this License.

       Each contributor grants you a non-exclusive, worldwide, royalty-free
     patent license under the contributor's essential patent claims, to
     make, use, sell, offer for sale, import and otherwise run, modify and
     propagate the contents of its contributor version.

       In the following three paragraphs, a "patent license" is any express
     agreement or commitment, however denominated, not to enforce a patent
     (such as an express permission to practice a patent or covenant not to
     sue for patent infringement).  To "grant" such a patent license to a
     party means to make such an agreement or commitment not to enforce a
     patent against the party.

       If you convey a covered work, knowingly relying on a patent license,
     and the Corresponding Source of the work is not available for anyone
     to copy, free of charge and under the terms of this License, through a
     publicly available network server or other readily accessible means,
     then you must either (1) cause the Corresponding Source to be so
     available, or (2) arrange to deprive yourself of the benefit of the
     patent license for this particular work, or (3) arrange, in a manner
     consistent with the requirements of this License, to extend the patent
     license to downstream recipients.  "Knowingly relying" means you have
     actual knowledge that, but for the patent license, your conveying the
     covered work in a country, or your recipient's use of the covered work
     in a country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

       If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate, modify
     or convey a specific copy of the covered work, then the patent license
     you grant is automatically extended to all recipients of the covered
     work and works based on it.

       A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that are
     specifically granted under this License.  You may not convey a covered
     work if you are a party to an arrangement with a third party that is
     in the business of distributing software, under which you make payment
     to the third party based on the extent of your activity of conveying
     the work, and under which the third party grants, to any of the
     parties who would receive the covered work from you, a discriminatory
     patent license (a) in connection with copies of the covered work
     conveyed by you (or copies made from those copies), or (b) primarily
     for and in connection with specific products or compilations that
     contain the covered work, unless you entered into that arrangement,
     or that patent license was granted, prior to 28 March 2007.

       Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

       12. No Surrender of Others' Freedom.

       If conditions are imposed on you (whether by court order, agreement or
     otherwise) that contradict the conditions of this License, they do not
     excuse you from the conditions of this License.  If you cannot convey a
     covered work so as to satisfy simultaneously your obligations under this
     License and any other pertinent obligations, then as a consequence you may
     not convey it at all.  For example, if you agree to terms that obligate you
     to collect a royalty for further conveying from those to whom you convey
     the Program, the only way you could satisfy both those terms and this
     License would be to refrain entirely from conveying the Program.

       13. Use with the GNU Affero General Public License.

       Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a single
     combined work, and to convey the resulting work.  The terms of this
     License will continue to apply to the part which is the covered work,
     but the special requirements of the GNU Affero General Public License,
     section 13, concerning interaction through a network will apply to the
     combination as such.

       14. Revised Versions of this License.

       The Free Software Foundation may publish revised and/or new versions of
     the GNU General Public License from time to time.  Such new versions will
     be similar in spirit to the present version, but may differ in detail to
     address new problems or concerns.

       Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU General
     Public License "or any later version" applies to it, you have the
     option of following the terms and conditions either of that numbered
     version or of any later version published by the Free Software
     Foundation.  If the Program does not specify a version number of the
     GNU General Public License, you may choose any version ever published
     by the Free Software Foundation.

       If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that proxy's
     public statement of acceptance of a version permanently authorizes you
     to choose that version for the Program.

       Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

       15. Disclaimer of Warranty.

       THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
     OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
     THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
     IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

       16. Limitation of Liability.

       IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
     WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
     THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
     GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
     USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
     EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
     SUCH DAMAGES.

       17. Interpretation of Sections 15 and 16.

       If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely approximates
     an absolute waiver of all civil liability in connection with the
     Program, unless a warranty or assumption of liability accompanies a
     copy of the Program in return for a fee.

                          END OF TERMS AND CONDITIONS

                 How to Apply These Terms to Your New Programs

       If you develop a new program, and you want it to be of the greatest
     possible use to the public, the best way to achieve this is to make it
     free software which everyone can redistribute and change under these terms.

       To do so, attach the following notices to the program.  It is safest
     to attach them to the start of each source file to most effectively
     state the exclusion of warranty; and each file should have at least
     the "copyright" line and a pointer to where the full notice is found.

         <one line to give the program's name and a brief idea of what it does.>
         Copyright (C) <year>  <name of author>

         This program is free software: you can redistribute it and/or modify
         it under the terms of the GNU General Public License as published by
         the Free Software Foundation, either version 3 of the License, or
         (at your option) any later version.

         This program is distributed in the hope that it will be useful,
         but WITHOUT ANY WARRANTY; without even the implied warranty of
         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
         GNU General Public License for more details.

         You should have received a copy of the GNU General Public License
         along with this program.  If not, see <http://www.gnu.org/licenses/>.

     Also add information on how to contact you by electronic and paper mail.

       If the program does terminal interaction, make it output a short
     notice like this when it starts in an interactive mode:

         <program>  Copyright (C) <year>  <name of author>
         This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
         This is free software, and you are welcome to redistribute it
         under certain conditions; type `show c' for details.

     The hypothetical commands `show w' and `show c' should show the appropriate
     parts of the General Public License.  Of course, your program's commands
     might be different; for a GUI interface, you would use an "about box".

       You should also get your employer (if you work as a programmer) or school,
     if any, to sign a "copyright disclaimer" for the program, if necessary.
     For more information on this, and how to apply and follow the GNU GPL, see
     <http://www.gnu.org/licenses/>.

       The GNU General Public License does not permit incorporating your program
     into proprietary programs.  If your program is a subroutine library, you
     may consider it more useful to permit linking proprietary applications with
     the library.  If this is what you want to do, use the GNU Lesser General
     Public License instead of this License.  But first, please read
     <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: flycheck.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: GNU General Public License,  Up: Top

17 GNU Free Documentation License
*********************************


                     GNU Free Documentation License
                      Version 1.3, 3 November 2008


      Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
          <http://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

     0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or noncommercially.
     Secondarily, this License preserves for the author and publisher a way
     to get credit for their work, while not being considered responsible
     for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.  It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for free
     software, because free software needs free documentation: a free
     program should come with manuals providing the same freedoms that the
     software does.  But this License is not limited to software manuals;
     it can be used for any textual work, regardless of subject matter or
     whether it is published as a printed book.  We recommend this License
     principally for works whose purpose is instruction or reference.


     1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium, that
     contains a notice placed by the copyright holder saying it can be
     distributed under the terms of this License.  Such a notice grants a
     world-wide, royalty-free license, unlimited in duration, to use that
     work under the conditions stated herein.  The "Document", below,
     refers to any such manual or work.  Any member of the public is a
     licensee, and is addressed as "you".  You accept the license if you
     copy, modify or distribute the work in a way requiring permission
     under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section of
     the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could fall
     directly within that overall subject.  (Thus, if the Document is in
     part a textbook of mathematics, a Secondary Section may not explain
     any mathematics.)  The relationship could be a matter of historical
     connection with the subject or with related matters, or of legal,
     commercial, philosophical, ethical or political position regarding
     them.

     The "Invariant Sections" are certain Secondary Sections whose titles
     are designated, as being those of Invariant Sections, in the notice
     that says that the Document is released under this License.  If a
     section does not fit the above definition of Secondary then it is not
     allowed to be designated as Invariant.  The Document may contain zero
     Invariant Sections.  If the Document does not identify any Invariant
     Sections then there are none.

     The "Cover Texts" are certain short passages of text that are listed,
     as Front-Cover Texts or Back-Cover Texts, in the notice that says that
     the Document is released under this License.  A Front-Cover Text may
     be at most 5 words, and a Back-Cover Text may be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed of
     pixels) generic paint programs or (for drawings) some widely available
     drawing editor, and that is suitable for input to text formatters or
     for automatic translation to a variety of formats suitable for input
     to text formatters.  A copy made in an otherwise Transparent file
     format whose markup, or absence of markup, has been arranged to thwart
     or discourage subsequent modification by readers is not Transparent.
     An image format is not Transparent if used for any substantial amount
     of text.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format, SGML
     or XML using a publicly available DTD, and standard-conforming simple
     HTML, PostScript or PDF designed for human modification.  Examples of
     transparent image formats include PNG, XCF and JPG.  Opaque formats
     include proprietary formats that can be read and edited only by
     proprietary word processors, SGML or XML for which the DTD and/or
     processing tools are not generally available, and the
     machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the material
     this License requires to appear in the title page.  For works in
     formats which do not have any title page as such, "Title Page" means
     the text near the most prominent appearance of the work's title,
     preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies of
     the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document whose
     title either is precisely XYZ or contains XYZ in parentheses following
     text that translates XYZ in another language.  (Here XYZ stands for a
     specific section name mentioned below, such as "Acknowledgements",
     "Dedications", "Endorsements", or "History".)  To "Preserve the Title"
     of such a section when you modify the Document means that it remains a
     section "Entitled XYZ" according to this definition.

     The Document may include Warranty Disclaimers next to the notice which
     states that this License applies to the Document.  These Warranty
     Disclaimers are considered to be included by reference in this
     License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and has
     no effect on the meaning of this License.

     2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License applies
     to the Document are reproduced in all copies, and that you add no
     other conditions whatsoever to those of this License.  You may not use
     technical measures to obstruct or control the reading or further
     copying of the copies you make or distribute.  However, you may accept
     compensation in exchange for copies.  If you distribute a large enough
     number of copies you must also follow the conditions in section 3.

     You may also lend copies, under the same conditions stated above, and
     you may publicly display copies.


     3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly have
     printed covers) of the Document, numbering more than 100, and the
     Document's license notice requires Cover Texts, you must enclose the
     copies in covers that carry, clearly and legibly, all these Cover
     Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
     the back cover.  Both covers must also clearly and legibly identify
     you as the publisher of these copies.  The front cover must present
     the full title with all words of the title equally prominent and
     visible.  You may add other material on the covers in addition.
     Copying with changes limited to the covers, as long as they preserve
     the title of the Document and satisfy these conditions, can be treated
     as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto adjacent
     pages.

     If you publish or distribute Opaque copies of the Document numbering
     more than 100, you must either include a machine-readable Transparent
     copy along with each Opaque copy, or state in or with each Opaque copy
     a computer-network location from which the general network-using
     public has access to download using public-standard network protocols
     a complete Transparent copy of the Document, free of added material.
     If you use the latter option, you must take reasonably prudent steps,
     when you begin distribution of Opaque copies in quantity, to ensure
     that this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you distribute an
     Opaque copy (directly or through your agents or retailers) of that
     edition to the public.

     It is requested, but not required, that you contact the authors of the
     Document well before redistributing any large number of copies, to
     give them a chance to provide you with an updated version of the
     Document.


     4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document under
     the conditions of sections 2 and 3 above, provided that you release
     the Modified Version under precisely this License, with the Modified
     Version filling the role of the Document, thus licensing distribution
     and modification of the Modified Version to whoever possesses a copy
     of it.  In addition, you must do these things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title distinct
        from that of the Document, and from those of previous versions
        (which should, if there were any, be listed in the History section
        of the Document).  You may use the same title as a previous version
        if the original publisher of that version gives permission.
     B. List on the Title Page, as authors, one or more persons or entities
        responsible for authorship of the modifications in the Modified
        Version, together with at least five of the principal authors of the
        Document (all of its principal authors, if it has fewer than five),
        unless they release you from this requirement.
     C. State on the Title page the name of the publisher of the
        Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license notice
        giving the public permission to use the Modified Version under the
        terms of this License, in the form shown in the Addendum below.
     G. Preserve in that license notice the full lists of Invariant Sections
        and required Cover Texts given in the Document's license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section Entitled "History", Preserve its Title, and add
        to it an item stating at least the title, year, new authors, and
        publisher of the Modified Version as given on the Title Page.  If
        there is no section Entitled "History" in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.
     J. Preserve the network location, if any, given in the Document for
        public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions
        it was based on.  These may be placed in the "History" section.
        You may omit a network location for a work that was published at
        least four years before the Document itself, or if the original
        publisher of the version it refers to gives permission.
     K. For any section Entitled "Acknowledgements" or "Dedications",
        Preserve the Title of the section, and preserve in the section all
        the substance and tone of each of the contributor acknowledgements
        and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles.  Section numbers
        or the equivalent are not considered part of the section titles.
     M. Delete any section Entitled "Endorsements".  Such a section
        may not be included in the Modified Version.
     N. Do not retitle any existing section to be Entitled "Endorsements"
        or to conflict in title with any Invariant Section.
     O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no material
     copied from the Document, you may at your option designate some or all
     of these sections as invariant.  To do this, add their titles to the
     list of Invariant Sections in the Modified Version's license notice.
     These titles must be distinct from any other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of a
     standard.

     You may add a passage of up to five words as a Front-Cover Text, and a
     passage of up to 25 words as a Back-Cover Text, to the end of the list
     of Cover Texts in the Modified Version.  Only one passage of
     Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document already
     includes a cover text for the same cover, previously added by you or
     by arrangement made by the same entity you are acting on behalf of,
     you may not add another; but you may replace the old one, on explicit
     permission from the previous publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this License
     give permission to use their names for publicity for or to assert or
     imply endorsement of any Modified Version.


     5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under this
     License, under the terms defined in section 4 above for modified
     versions, provided that you include in the combination all of the
     Invariant Sections of all of the original documents, unmodified, and
     list them all as Invariant Sections of your combined work in its
     license notice, and that you preserve all their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name but
     different contents, make the title of each such section unique by
     adding at the end of it, in parentheses, the name of the original
     author or publisher of that section if known, or else a unique number.
     Make the same adjustment to the section titles in the list of
     Invariant Sections in the license notice of the combined work.

     In the combination, you must combine any sections Entitled "History"
     in the various original documents, forming one section Entitled
     "History"; likewise combine any sections Entitled "Acknowledgements",
     and any sections Entitled "Dedications".  You must delete all sections
     Entitled "Endorsements".


     6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the rules
     of this License for verbatim copying of each of the documents in all
     other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert a
     copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.


     7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other separate
     and independent documents or works, in or on a volume of a storage or
     distribution medium, is called an "aggregate" if the copyright
     resulting from the compilation is not used to limit the legal rights
     of the compilation's users beyond what the individual works permit.
     When the Document is included in an aggregate, this License does not
     apply to the other works in the aggregate which are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half of
     the entire aggregate, the Document's Cover Texts may be placed on
     covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic form.
     Otherwise they must appear on printed covers that bracket the whole
     aggregate.


     8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section 4.
     Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also include
     the original English version of this License and the original versions
     of those notices and disclaimers.  In case of a disagreement between
     the translation and the original version of this License or a notice
     or disclaimer, the original version will prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to Preserve
     its Title (section 1) will typically require changing the actual
     title.


     9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void, and
     will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your license
     from a particular copyright holder is reinstated (a) provisionally,
     unless and until the copyright holder explicitly and finally
     terminates your license, and (b) permanently, if the copyright holder
     fails to notify you of the violation by some reasonable means prior to
     60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

     Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, receipt of a copy of some or all of the same material does
     not give you any rights to use it.


     10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of the
     GNU Free Documentation License from time to time.  Such new versions
     will be similar in spirit to the present version, but may differ in
     detail to address new problems or concerns.  See
     http://www.gnu.org/copyleft/.

     Each version of the License is given a distinguishing version number.
     If the Document specifies that a particular numbered version of this
     License "or any later version" applies to it, you have the option of
     following the terms and conditions either of that specified version or
     of any later version that has been published (not as a draft) by the
     Free Software Foundation.  If the Document does not specify a version
     number of this License, you may choose any version ever published (not
     as a draft) by the Free Software Foundation.  If the Document
     specifies that a proxy can decide which future versions of this
     License can be used, that proxy's public statement of acceptance of a
     version permanently authorizes you to choose that version for the
     Document.

     11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.  A
     "Massive Multiauthor Collaboration" (or "MMC") contained in the site
     means any set of copyrightable works thus published on the MMC site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or in
     part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this License
     somewhere other than this MMC, and subsequently incorporated in whole or
     in part into the MMC, (1) had no cover texts or invariant sections, and
     (2) were thus incorporated prior to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the site
     under CC-BY-SA on the same site at any time before August 1, 2009,
     provided the MMC is eligible for relicensing.


     ADDENDUM: How to use this License for your documents

     To use this License in a document you have written, include a copy of
     the License in the document and put the following copyright and
     license notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.3
         or any later version published by the Free Software Foundation;
         with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

     If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
     replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

     If you have Invariant Sections without Cover Texts, or some other
     combination of the three, merge those two alternatives to suit the
     situation.

     If your document contains nontrivial examples of program code, we
     recommend releasing these examples in parallel under your choice of
     free software license, such as the GNU General Public License,
     to permit their use in free software.


File: flycheck.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Index
*****

 [index ]
* Menu:

* ada-gnat; Emacs Lisp Flycheck syntax checker: Ada.          (line   6)
* asciidoc; Emacs Lisp Flycheck syntax checker: AsciiDoc.     (line   6)
* c/c++-clang; Emacs Lisp Flycheck syntax checker: C/C++.     (line   6)
* c/c++-cppcheck; Emacs Lisp Flycheck syntax checker: C/C++.  (line 359)
* c/c++-gcc; Emacs Lisp Flycheck syntax checker: C/C++.       (line 201)
* cfengine; Emacs Lisp Flycheck syntax checker: CFEngine.     (line   6)
* chaining:                              Glossary.            (line  37)
* chef-foodcritic; Emacs Lisp Flycheck syntax checker: Chef.  (line  11)
* coffee-coffeelint; Emacs Lisp Flycheck syntax checker: Coffeescript.
                                                              (line  20)
* coffee; Emacs Lisp Flycheck syntax checker: Coffeescript.   (line   6)
* coq; Emacs Lisp Flycheck syntax checker: Coq.               (line   6)
* css-csslint; Emacs Lisp Flycheck syntax checker: CSS.       (line   6)
* d-dmd; Emacs Lisp Flycheck syntax checker: D.               (line   6)
* disabled syntax checker:               Glossary.            (line  14)
* elixir; Emacs Lisp Flycheck syntax checker: Elixir.         (line   6)
* emacs-lisp-checkdoc; Emacs Lisp Flycheck syntax checker: Emacs Lisp.
                                                              (line 101)
* emacs-lisp; Emacs Lisp Flycheck syntax checker: Emacs Lisp. (line  11)
* enabled syntax checker:                Glossary.            (line  20)
* erlang; Emacs Lisp Flycheck syntax checker: Erlang.         (line   6)
* eruby-erubis; Emacs Lisp Flycheck syntax checker: ERuby.    (line   6)
* flycheck-add-mode; Emacs Lisp function: Extending syntax checkers<2>.
                                                              (line  27)
* flycheck-add-next-checker; Emacs Lisp function: Extending syntax checkers<2>.
                                                              (line   8)
* flycheck-after-syntax-check-hook; Emacs Lisp hook: Syntax checking<2>.
                                                              (line 126)
* flycheck-before-syntax-check-hook; Emacs Lisp hook: Syntax checking<2>.
                                                              (line 147)
* flycheck-buffer-saved-p; Emacs Lisp function: Builtin syntax checker predicates.
                                                              (line   6)
* flycheck-buffer; Emacs Lisp command:   Syntax checking<2>.  (line  76)
* flycheck-check-syntax-automatically; Emacs Lisp user option: Syntax checking<2>.
                                                              (line  19)
* flycheck-checker-error-threshold; Emacs Lisp user option: Error reporting.
                                                              (line 143)
* flycheck-checker; Emacs Lisp variable: Syntax checker selection<2>.
                                                              (line 114)
* flycheck-checkers; Emacs Lisp user option: Syntax checker selection<2>.
                                                              (line  10)
* flycheck-chktexrc; Emacs Lisp user option: TeX/LaTeX.       (line  20)
* flycheck-clang-blocks; Emacs Lisp user option: C/C++.       (line  23)
* flycheck-clang-definitions; Emacs Lisp user option: C/C++.  (line  40)
* flycheck-clang-include-path; Emacs Lisp user option: C/C++. (line  58)
* flycheck-clang-includes; Emacs Lisp user option: C/C++.     (line  76)
* flycheck-clang-language-standard; Emacs Lisp user option: C/C++.
                                                              (line  94)
* flycheck-clang-ms-extensions; Emacs Lisp user option: C/C++.
                                                              (line 111)
* flycheck-clang-no-exceptions; Emacs Lisp user option: C/C++.
                                                              (line 127)
* flycheck-clang-no-rtti; Emacs Lisp user option: C/C++.      (line 143)
* flycheck-clang-standard-library; Emacs Lisp user option: C/C++.
                                                              (line 158)
* flycheck-clang-warnings; Emacs Lisp user option: C/C++.     (line 178)
* flycheck-clear; Emacs Lisp command:    Error reporting.     (line 130)
* flycheck-coffeelintrc; Emacs Lisp user option: Coffeescript.
                                                              (line  31)
* flycheck-collapse-error-message-whitespace; Emacs Lisp function: Error filters.
                                                              (line  16)
* flycheck-completion-system; Emacs Lisp user option: Syntax checker selection<2>.
                                                              (line 145)
* flycheck-copy-messages-as-kill; Emacs Lisp command: Error messages.
                                                              (line  72)
* flycheck-count-errors; Emacs Lisp function: Error Analysis. (line  16)
* flycheck-cppcheck-checks; Emacs Lisp user option: C/C++.    (line 368)
* flycheck-cppcheck-inconclusive; Emacs Lisp user option: C/C++.
                                                              (line 391)
* flycheck-current-errors; Emacs Lisp variable: Error Analysis.
                                                              (line   9)
* flycheck-def-config-file-var; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line 129)
* flycheck-def-option-var; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line 144)
* flycheck-define-checker; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line   8)
* flycheck-define-error-level; Emacs Lisp function: Syntax checker API.
                                                              (line 141)
* flycheck-describe-checker; Emacs Lisp command: Syntax checker selection<2>.
                                                              (line 181)
* flycheck-disabled-checkers; Emacs Lisp user option: Syntax checker selection<2>.
                                                              (line  32)
* flycheck-display-error-messages-unless-error-list; Emacs Lisp function: Error messages.
                                                              (line  61)
* flycheck-display-error-messages; Emacs Lisp function: Error messages.
                                                              (line  46)
* flycheck-display-errors-delay; Emacs Lisp user option: Error messages.
                                                              (line   8)
* flycheck-display-errors-function; Emacs Lisp user option: Error messages.
                                                              (line  22)
* flycheck-dmd-include-path; Emacs Lisp user option: D.       (line  15)
* flycheck-emacs-lisp-initialize-packages; Emacs Lisp user option: Emacs Lisp.
                                                              (line  27)
* flycheck-emacs-lisp-load-path; Emacs Lisp user option: Emacs Lisp.
                                                              (line  47)
* flycheck-emacs-lisp-package-user-dir; Emacs Lisp user option: Emacs Lisp.
                                                              (line  76)
* flycheck-error-<; Emacs Lisp function: Error API.           (line 142)
* flycheck-error-buffer; Emacs Lisp slot: Error API.          (line  15)
* flycheck-error-checker; Emacs Lisp slot: Error API.         (line  24)
* flycheck-error-column-region; Emacs Lisp function: Error API.
                                                              (line 104)
* flycheck-error-column; Emacs Lisp slot: Error API.          (line  36)
* flycheck-error-filename; Emacs Lisp slot: Error API.        (line  28)
* flycheck-error-format; Emacs Lisp function: Error API.      (line 135)
* flycheck-error-level-<; Emacs Lisp function: Error API.     (line 148)
* flycheck-error-level; Emacs Lisp slot: Error API.           (line  47)
* flycheck-error-line-region; Emacs Lisp function: Error API. (line  94)
* flycheck-error-line; Emacs Lisp slot:  Error API.           (line  32)
* flycheck-error-list-after-refresh-hook; Emacs Lisp hook: Error list<2>.
                                                              (line  22)
* flycheck-error-list-checker-name; Emacs Lisp face: Error list<2>.
                                                              (line  58)
* flycheck-error-list-column-number; Emacs Lisp face: Error list<2>.
                                                              (line  54)
* flycheck-error-list-highlight; Emacs Lisp face: Error list<2>.
                                                              (line  40)
* flycheck-error-list-line-number; Emacs Lisp face: Error list<2>.
                                                              (line  50)
* flycheck-error-message; Emacs Lisp slot: Error API.         (line  43)
* flycheck-error-new-at; Emacs Lisp function: Error API.      (line  55)
* flycheck-error-new; Emacs Lisp function: Error API.         (line  75)
* flycheck-error-pos; Emacs Lisp function: Error API.         (line 126)
* flycheck-error-thing-region; Emacs Lisp function: Error API.
                                                              (line 114)
* flycheck-error-with-buffer; Emacs Lisp macro: Error API.    (line  88)
* flycheck-error; Emacs Lisp CL struct:  Error API.           (line  10)
* flycheck-error; Emacs Lisp face:       Error reporting.     (line  16)
* flycheck-ert-at-nth-error; Emacs Lisp function: Test assertions.
                                                              (line  52)
* flycheck-ert-buffer-sync; Emacs Lisp function: Syntax checking in test cases.
                                                              (line   6)
* flycheck-ert-check-gpg; Emacs Lisp function: Environment information.
                                                              (line  14)
* flycheck-ert-def-checker-test; Emacs Lisp macro: Test case definitions.
                                                              (line   6)
* flycheck-ert-ensure-clear; Emacs Lisp function: Syntax checking in test cases.
                                                              (line  10)
* flycheck-ert-extract-version-command; Emacs Lisp function: Environment information.
                                                              (line  18)
* flycheck-ert-initialize; Emacs Lisp function: Initialization.
                                                              (line  10)
* flycheck-ert-locate-config-file; Emacs Lisp function: Test resources.
                                                              (line  23)
* flycheck-ert-resource-filename; Emacs Lisp function: Test resources.
                                                              (line   9)
* flycheck-ert-should-errors; Emacs Lisp function: Test assertions.
                                                              (line  12)
* flycheck-ert-should-overlay; Emacs Lisp function: Test assertions.
                                                              (line   6)
* flycheck-ert-should-syntax-check; Emacs Lisp function: Test assertions.
                                                              (line  28)
* flycheck-ert-syntax-check-timed-out-p; Emacs Lisp function: Test case results.
                                                              (line   6)
* flycheck-ert-travis-ci-p; Emacs Lisp function: Environment information.
                                                              (line  10)
* flycheck-ert-user-error-type; Emacs Lisp constant: Environment information.
                                                              (line   6)
* flycheck-ert-with-env; Emacs Lisp macro: Utility macros for resource blocks.
                                                              (line   6)
* flycheck-ert-with-file-buffer; Emacs Lisp macro: Utility macros for buffer handling.
                                                              (line  14)
* flycheck-ert-with-global-mode; Emacs Lisp macro: Utility macros for resource blocks.
                                                              (line  17)
* flycheck-ert-with-help-buffer; Emacs Lisp macro: Utility macros for buffer handling.
                                                              (line  21)
* flycheck-ert-with-resource-buffer; Emacs Lisp macro: Test resources.
                                                              (line  16)
* flycheck-ert-with-temp-buffer; Emacs Lisp macro: Utility macros for buffer handling.
                                                              (line   6)
* flycheck-eslint-rulesdir; Emacs Lisp user option: Javascript.
                                                              (line  32)
* flycheck-eslintrc; Emacs Lisp user option: Javascript.      (line  56)
* flycheck-first-error; Emacs Lisp command: Error navigation. (line  65)
* flycheck-flake8-maximum-complexity; Emacs Lisp user option: Python.
                                                              (line  17)
* flycheck-flake8-maximum-line-length; Emacs Lisp user option: Python.
                                                              (line  34)
* flycheck-flake8rc; Emacs Lisp user option: Python.          (line  56)
* flycheck-fold-include-errors; Emacs Lisp function: Error filters.
                                                              (line  22)
* flycheck-fringe-error; Emacs Lisp face: Error reporting.    (line  67)
* flycheck-fringe-info; Emacs Lisp face: Error reporting.     (line  67)
* flycheck-fringe-warning; Emacs Lisp face: Error reporting.  (line  67)
* flycheck-gcc-definitions; Emacs Lisp user option: C/C++.    (line 218)
* flycheck-gcc-include-path; Emacs Lisp user option: C/C++.   (line 236)
* flycheck-gcc-includes; Emacs Lisp user option: C/C++.       (line 254)
* flycheck-gcc-language-standard; Emacs Lisp user option: C/C++.
                                                              (line 272)
* flycheck-gcc-no-exceptions; Emacs Lisp user option: C/C++.  (line 289)
* flycheck-gcc-no-rtti; Emacs Lisp user option: C/C++.        (line 305)
* flycheck-gcc-openmp; Emacs Lisp user option: C/C++.         (line 320)
* flycheck-gcc-warnings; Emacs Lisp user option: C/C++.       (line 336)
* flycheck-gfortran-include-path; Emacs Lisp user option: Fortran.
                                                              (line  16)
* flycheck-gfortran-language-standard; Emacs Lisp user option: Fortran.
                                                              (line  34)
* flycheck-gfortran-layout; Emacs Lisp user option: Fortran.  (line  51)
* flycheck-gfortran-warnings; Emacs Lisp user option: Fortran.
                                                              (line  74)
* flycheck-ghc-language-extensions; Emacs Lisp user option: Haskell.
                                                              (line  23)
* flycheck-ghc-no-user-package-database; Emacs Lisp user option: Haskell.
                                                              (line  41)
* flycheck-ghc-package-databases; Emacs Lisp user option: Haskell.
                                                              (line  57)
* flycheck-ghc-search-path; Emacs Lisp user option: Haskell.  (line  75)
* flycheck-gjslintrc; Emacs Lisp user option: Javascript.     (line  76)
* flycheck-gnat-include-path; Emacs Lisp user option: Ada.    (line  16)
* flycheck-gnat-language-standard; Emacs Lisp user option: Ada.
                                                              (line  34)
* flycheck-gnat-warnings; Emacs Lisp user option: Ada.        (line  51)
* flycheck-go-vet-print-functions; Emacs Lisp user option: Go.
                                                              (line  72)
* flycheck-google-max-messages; Emacs Lisp user option: Error messages.
                                                              (line  90)
* flycheck-google-messages; Emacs Lisp command: Error messages.
                                                              (line  78)
* flycheck-has-errors-p; Emacs Lisp function: Error Analysis. (line  24)
* flycheck-has-max-errors-p; Emacs Lisp function: Error Analysis.
                                                              (line  28)
* flycheck-highlighting-mode; Emacs Lisp user option: Error reporting.
                                                              (line  33)
* flycheck-idle-change-delay; Emacs Lisp user option: Syntax checking<2>.
                                                              (line  55)
* flycheck-indication-mode; Emacs Lisp user option: Error reporting.
                                                              (line  74)
* flycheck-info; Emacs Lisp face:        Error reporting.     (line  16)
* flycheck-jshintrc; Emacs Lisp user option: Javascript.      (line  15)
* flycheck-last-status-change; Emacs Lisp variable: Status API.
                                                              (line  46)
* flycheck-list-errors; Emacs Lisp command: Error list<2>.    (line   8)
* flycheck-locate-config-file-functions; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  20)
* flycheck-locate-config-file; Emacs Lisp function: Syntax checker API.
                                                              (line 131)
* flycheck-mode-line-status-text; Emacs Lisp function: Status API.
                                                              (line  53)
* flycheck-mode-line; Emacs Lisp user option: Mode line.      (line  44)
* flycheck-mode; Emacs Lisp command:     Flycheck Mode.       (line   8)
* flycheck-mode; Emacs Lisp user option: Flycheck Mode.       (line  12)
* flycheck-navigation-minimum-level; Emacs Lisp user option: Error navigation.
                                                              (line  77)
* flycheck-next-error; Emacs Lisp command: Error navigation.  (line  47)
* flycheck-option-comma-separated-list; Emacs Lisp function: Builtin option filters.
                                                              (line  13)
* flycheck-option-int; Emacs Lisp function: Builtin option filters.
                                                              (line   6)
* flycheck-parse-checkstyle; Emacs Lisp function: Builtin error parsers.
                                                              (line  20)
* flycheck-parse-with-patterns; Emacs Lisp function: Builtin error parsers.
                                                              (line   6)
* flycheck-parse-xml-string; Emacs Lisp function: Error parser API.
                                                              (line   8)
* flycheck-perlcritic-verbosity; Emacs Lisp user option: Perl.
                                                              (line  28)
* flycheck-phpcs-standard; Emacs Lisp user option: PHP.       (line  64)
* flycheck-phpmd-rulesets; Emacs Lisp user option: PHP.       (line  39)
* flycheck-previous-error; Emacs Lisp command: Error navigation.
                                                              (line  56)
* flycheck-process-error-functions; Emacs Lisp hook: Error reporting.
                                                              (line  93)
* flycheck-pylintrc; Emacs Lisp user option: Python.          (line  75)
* flycheck-registered-checker-p; Emacs Lisp function: Syntax checker API.
                                                              (line   6)
* flycheck-report-error; Emacs Lisp function: Status API.     (line  38)
* flycheck-report-status; Emacs Lisp function: Status API.    (line   6)
* flycheck-rubocop-lint-only; Emacs Lisp user option: Ruby.   (line  23)
* flycheck-rubocoprc; Emacs Lisp user option: Ruby.           (line  38)
* flycheck-rubylintrc; Emacs Lisp user option: Ruby.          (line  57)
* flycheck-rust-check-tests; Emacs Lisp user option: Rust.    (line  17)
* flycheck-rust-crate-root; Emacs Lisp user option: Rust.     (line  34)
* flycheck-rust-crate-type; Emacs Lisp user option: Rust.     (line  54)
* flycheck-rust-library-path; Emacs Lisp user option: Rust.   (line  67)
* flycheck-rx-to-string; Emacs Lisp function: Utilities.      (line   6)
* flycheck-sanitize-errors; Emacs Lisp function: Error filters.
                                                              (line   6)
* flycheck-sass-compass; Emacs Lisp user option: Sass.        (line  15)
* flycheck-scalastyle-jar; Emacs Lisp user option: Scala.     (line  33)
* flycheck-scalastylerc; Emacs Lisp user option: Scala.       (line  52)
* flycheck-scss-compass; Emacs Lisp user option: Scss.        (line  15)
* flycheck-select-checker; Emacs Lisp command: Syntax checker selection<2>.
                                                              (line  73)
* flycheck-set-checker-executable; Emacs Lisp command: Syntax checker executables.
                                                              (line  22)
* flycheck-shellcheck-excluded-warnings; Emacs Lisp user option: Shell script languages.
                                                              (line  81)
* flycheck-sphinx-warn-on-missing-references; Emacs Lisp user option: ReStructuredText.
                                                              (line  21)
* flycheck-standard-error-navigation; Emacs Lisp user option: Error navigation.
                                                              (line  16)
* flycheck-status-changed-functions; Emacs Lisp hook: Syntax checking<2>.
                                                              (line 107)
* flycheck-string-list-p; Emacs Lisp function: Utilities.     (line  27)
* flycheck-substitute-argument; Emacs Lisp function: Syntax checker API.
                                                              (line  13)
* flycheck-symbol-list-p; Emacs Lisp function: Utilities.     (line  31)
* flycheck-syntax-check-failed-hook; Emacs Lisp hook: Syntax checking<2>.
                                                              (line 167)
* flycheck-temp-prefix; Emacs Lisp user option: Syntax checking<2>.
                                                              (line 187)
* flycheck-tidyrc; Emacs Lisp user option: HTML.              (line  15)
* flycheck-warning; Emacs Lisp face:     Error reporting.     (line  16)
* fortran-gfortran; Emacs Lisp Flycheck syntax checker: Fortran.
                                                              (line   6)
* global-flycheck-mode; Emacs Lisp command: Flycheck Mode.    (line  16)
* global-flycheck-mode; Emacs Lisp user option: Flycheck Mode.
                                                              (line  33)
* go-build; Emacs Lisp Flycheck syntax checker: Go.           (line  94)
* go-errcheck; Emacs Lisp Flycheck syntax checker: Go.        (line 122)
* go-gofmt; Emacs Lisp Flycheck syntax checker: Go.           (line   6)
* go-golint; Emacs Lisp Flycheck syntax checker: Go.          (line  32)
* go-test; Emacs Lisp Flycheck syntax checker: Go.            (line 108)
* go-vet; Emacs Lisp Flycheck syntax checker: Go.             (line  51)
* haml; Emacs Lisp Flycheck syntax checker: Haml.             (line   6)
* handlebars; Emacs Lisp Flycheck syntax checker: Handlebars. (line   6)
* haskell-ghc; Emacs Lisp Flycheck syntax checker: Haskell.   (line   6)
* haskell-hlint; Emacs Lisp Flycheck syntax checker: Haskell. (line 100)
* html-tidy; Emacs Lisp Flycheck syntax checker: HTML.        (line   6)
* javascript-eslint; Emacs Lisp Flycheck syntax checker: Javascript.
                                                              (line  23)
* javascript-gjslint; Emacs Lisp Flycheck syntax checker: Javascript.
                                                              (line  67)
* javascript-jshint; Emacs Lisp Flycheck syntax checker: Javascript.
                                                              (line   6)
* json-jsonlint; Emacs Lisp Flycheck syntax checker: JSON.    (line   6)
* less; Emacs Lisp Flycheck syntax checker: LESS.             (line   6)
* list-flycheck-errors; Emacs Lisp command: Error list<2>.    (line   8)
* lua; Emacs Lisp Flycheck syntax checker: Lua.               (line   6)
* make; Emacs Lisp Flycheck syntax checker: Make.             (line   6)
* perl-perlcritic; Emacs Lisp Flycheck syntax checker: Perl.  (line  19)
* perl; Emacs Lisp Flycheck syntax checker: Perl.             (line   6)
* php-phpcs; Emacs Lisp Flycheck syntax checker: PHP.         (line  55)
* php-phpmd; Emacs Lisp Flycheck syntax checker: PHP.         (line  23)
* php; Emacs Lisp Flycheck syntax checker: PHP.               (line   6)
* puppet-lint; Emacs Lisp Flycheck syntax checker: Puppet.    (line  20)
* puppet-parser; Emacs Lisp Flycheck syntax checker: Puppet.  (line   6)
* python-flake8; Emacs Lisp Flycheck syntax checker: Python.  (line   6)
* python-pylint; Emacs Lisp Flycheck syntax checker: Python.  (line  64)
* racket; Emacs Lisp Flycheck syntax checker: Racket.         (line   6)
* registered syntax checker:             Glossary.            (line   9)
* rpm-rpmlint; Emacs Lisp Flycheck syntax checker: RPM SPEC.  (line   6)
* rst-sphinx; Emacs Lisp Flycheck syntax checker: ReStructuredText.
                                                              (line  12)
* rst; Emacs Lisp Flycheck syntax checker: ReStructuredText.  (line   6)
* ruby-jruby; Emacs Lisp Flycheck syntax checker: Ruby.       (line  90)
* ruby-rubocop; Emacs Lisp Flycheck syntax checker: Ruby.     (line   6)
* ruby-rubylint; Emacs Lisp Flycheck syntax checker: Ruby.    (line  46)
* ruby; Emacs Lisp Flycheck syntax checker: Ruby.             (line  68)
* rust; Emacs Lisp Flycheck syntax checker: Rust.             (line   6)
* sass; Emacs Lisp Flycheck syntax checker: Sass.             (line   6)
* scala-scalastyle; Emacs Lisp Flycheck syntax checker: Scala.
                                                              (line  20)
* scala; Emacs Lisp Flycheck syntax checker: Scala.           (line   6)
* scss; Emacs Lisp Flycheck syntax checker: Scss.             (line   6)
* sh-bash; Emacs Lisp Flycheck syntax checker: Shell script languages.
                                                              (line   6)
* sh-posix-bash; Emacs Lisp Flycheck syntax checker: Shell script languages.
                                                              (line  39)
* sh-posix-dash; Emacs Lisp Flycheck syntax checker: Shell script languages.
                                                              (line  20)
* sh-shellcheck; Emacs Lisp Flycheck syntax checker: Shell script languages.
                                                              (line  72)
* sh-zsh; Emacs Lisp Flycheck syntax checker: Shell script languages.
                                                              (line  58)
* slim; Emacs Lisp Flycheck syntax checker: Slim.             (line   6)
* suitable syntax checker:               Glossary.            (line  25)
* syntax checker:                        Glossary.            (line   6)
* tex-chktex; Emacs Lisp Flycheck syntax checker: TeX/LaTeX.  (line  11)
* tex-lacheck; Emacs Lisp Flycheck syntax checker: TeX/LaTeX. (line  28)
* texinfo; Emacs Lisp Flycheck syntax checker: Texinfo.       (line   6)
* verilog-verilator; Emacs Lisp Flycheck syntax checker: Verilog.
                                                              (line   6)
* xml-xmllint; Emacs Lisp Flycheck syntax checker: XML.       (line  12)
* xml-xmlstarlet; Emacs Lisp Flycheck syntax checker: XML.    (line   6)
* yaml-jsyaml; Emacs Lisp Flycheck syntax checker: YAML.      (line   6)
* yaml-ruby; Emacs Lisp Flycheck syntax checker: YAML.        (line  12)

