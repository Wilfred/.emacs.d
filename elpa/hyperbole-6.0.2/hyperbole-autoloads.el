;;; hyperbole-autoloads.el --- automatically extracted autoloads
;;
;;; Code:
(add-to-list 'load-path (or (file-name-directory #$) (car load-path)))

;;;### (autoloads nil "hgnus" "hgnus.el" (22455 51075 276735 166000))
;;; Generated autoloads from hgnus.el

(autoload 'Gnus-init "hgnus" "\
Initializes Hyperbole support for Gnus Usenet news reading.

\(fn)" t nil)

;;;***

;;;### (autoloads nil "hinit" "hinit.el" (22455 51074 533284 613000))
;;; Generated autoloads from hinit.el

(autoload 'hyperb:init-menubar "hinit" "\
Add a pulldown menu for Hyperbole after Emacs is initialized.

\(fn)" t nil)

(autoload 'hui-menu-remove "hinit" "\
Remove MENU-SYM menu from any menubars generated by optional KEYMAP or the global-map.

\(fn MENU-SYM &optional KEYMAP)" nil t)

;;;***

;;;### (autoloads nil "hload-path" "hload-path.el" (22455 51074 866670
;;;;;;  464000))
;;; Generated autoloads from hload-path.el

(defconst hyperb:emacs-p (and (not (featurep 'xemacs)) (string-lessp "19" emacs-version) emacs-version) "\
Version string under GNU Emacs 19 or higher, or nil")

(defconst hyperb:kotl-p (if (featurep 'xemacs) (or (string-match "^19\\.9 \\|^19\\.[1-9][0-9]" emacs-version) (string-lessp "20" emacs-version)) hyperb:emacs-p) "\
Non-nil iff this Emacs version supports the Hyperbole Koutliner.")

;;;***

;;;### (autoloads nil "hmail" "hmail.el" (22455 51073 546462 679000))
;;; Generated autoloads from hmail.el

(autoload 'hmail:compose "hmail" "\
Compose mail with ADDRESS and evaluation of EXPR.
Optional SUBJECT and HELP message may also be given.

\(fn ADDRESS EXPR &optional SUBJECT HELP)" t nil)

(autoload 'hmail:msg-narrow "hmail" "\
Narrows buffer to displayable part of current message.
Its displayable part begins at optional MSG-START and ends at or before
MSG-END.

\(fn &optional MSG-START MSG-END)" nil nil)

;;;***

;;;### (autoloads nil "hmh" "hmh.el" (22455 51074 189897 187000))
;;; Generated autoloads from hmh.el

(autoload 'Mh-init "hmh" "\
Initializes Hyperbole support for Mh mail reading.

\(fn)" t nil)

;;;***

;;;### (autoloads nil "hmouse-drv" "hmouse-drv.el" (22455 51073 756495
;;;;;;  681000))
;;; Generated autoloads from hmouse-drv.el

(autoload 'hkey-help-hide "hmouse-drv" "\
Optionally KILLs current buffer (default is bury) and quits WINDOW.
Restores frame to configuration prior to help buffer display.
Point must be in a help buffer.  See `hkey-quit-window' for additional
details.

\(fn &optional KILL WINDOW)" t nil)

(autoload 'hkey-help-show "hmouse-drv" "\
Saves prior window configuration if BUFFER displays help.  Displays BUFFER.

Optional second arg CURRENT-WINDOW non-nil forces display of buffer within
the current window.  By default, it is displayed according to the setting of
`hpath:display-where'.

\(fn &optional BUFFER CURRENT-WINDOW)" nil nil)

;;;***

;;;### (autoloads nil "hmouse-info" "hmouse-info.el" (22455 51074
;;;;;;  326585 386000))
;;; Generated autoloads from hmouse-info.el

(autoload 'Info-read-index-item-name "hmouse-info" "\
Read an Info index item name with completion, prompting with PROMPT.
An index item name can have the form \"itemname\", referring to an index
item in the current Info file, or \"(filename)itemname\", referring to
an item in filename.  \"(filename)\" is a short format to go to
the Top node in filename.  Signal an error if a filename without an
index is given.

\(fn PROMPT)" nil nil)

(autoload 'smart-info "hmouse-info" "\
Walks through Info documentation networks using one key or mouse key.

If key is pressed within:
 (1) the first line of an Info Menu Entry or Cross Reference, the desired node
       is found;
 (2) the Up, Next, or Previous entries of a Node Header (first line),
       the desired node is found;
 (3) the File entry of a Node Header (first line),       
       the `Top' node within that file is found;
 (4) at the end of the current node, the Next node is found (this will
       descend subtrees if the function `Info-global-next' is bound);
 (5) anywhere else (e.g. at the end of a line), the current node entry is
       scrolled up one windowful.

Returns t if key is pressed within an Info Node Header, Cross Reference,
or a Menu; otherwise returns nil.

\(fn)" t nil)

(autoload 'smart-info-assist "hmouse-info" "\
Walks through Info documentation networks using one assist-key or mouse assist-key.

If assist-key is pressed within:
 (1) the first line of an Info Menu Entry or Cross Reference, the desired node
       is found;
 (2) the Up, Next, or Previous entries of a Node Header (first line),
       the last node in the history list is found;
 (3) the File entry of a Node Header (first line),       
       the `DIR' root-level node is found;
 (4) at the end of the current node, the Previous node is found (this will
       return from subtrees if the function 'Info-global-prev is bound);
 (5) anywhere else (e.g. at the end of a line), the current node entry is
       scrolled down one windowful.

Returns t if assist-key is pressed within an Info Node Header, Cross Reference,
or a Menu; otherwise returns nil.

\(fn)" t nil)

(autoload 'Info-handle-in-note "hmouse-info" "\
Follows an Info cross-reference.
If point is within the first line of an Info note (cross-reference), follows
cross-reference and returns t; otherwise returns nil.

\(fn)" nil nil)

(autoload 'Info-current-filename-sans-extension "hmouse-info" "\
Return the filename for the current Info node, if any, without directory or file extension.
This works regardless of the current buffer.

\(fn)" nil nil)

(autoload 'Info-menu-item-at-p "hmouse-info" "\
Return the name of the Info menu item at point, or nil if none.

\(fn)" nil nil)

(autoload 'Info-note-at-p "hmouse-info" "\
Return the name of the Info cross-reference note at point, or nil if none.

\(fn)" nil nil)

;;;***

;;;### (autoloads nil "hmouse-mod" "hmouse-mod.el" (22455 51075 243396
;;;;;;  568000))
;;; Generated autoloads from hmouse-mod.el

(defvar hmouse-mod-mode nil "\
Non-nil if Hmouse-Mod mode is enabled.
See the command `hmouse-mod-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `hmouse-mod-mode'.")

(custom-autoload 'hmouse-mod-mode "hmouse-mod" nil)

(autoload 'hmouse-mod-mode "hmouse-mod" "\
Toggle use of the Smart Keys as Control- and Meta- modifiers (Hmouse Modifier mode).
With a prefix argument ARG, enable Hmouse Mod mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
the mode if ARG is omitted or nil.

If the Action Key is held down while alpha characters are typed,
they are translated into Control keys instead.  The Assist Key
translates them into Meta keys.  When both Smart Keys are depressed,
Control-Meta keys are produced.  The commands bound to the
characters produced are then run.

Hmouse Modifier mode is a global minor mode.  It does not affect
unmodified keys.  Normal Smart Key operations work with this
mode, if no other key is pressed while a Smart Key is depressed.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads nil "hmouse-tag" "hmouse-tag.el" (22455 51072 336272
;;;;;;  793000))
;;; Generated autoloads from hmouse-tag.el

(autoload 'smart-asm-at-tag-p "hmouse-tag" "\
Return assembly tag name that point is within, else nil.

\(fn &optional NO-FLASH)" nil nil)

(autoload 'smart-c++ "hmouse-tag" "\
Jumps to the definition of optional C++ IDENTIFIER or the one at point.
Optional second arg NEXT means jump to next matching C++ tag.

It assumes that its caller has already checked that the key was pressed in an
appropriate buffer and has moved the cursor to the selected buffer.

See the documentation for `c++-to-definition' for the behavior of this
function when the OO-Browser has been loaded.
Otherwise:
 (1) on a `#include' statement, the include file is displayed;
     Look for include file in directory lists `smart-c-cpp-include-path'
     and `smart-c-include-path';
 (2) on a C++ identifier, the identifier definition is displayed,
     assuming the identifier is found within an `etags' generated tag file
     in the current directory or any of its ancestor directories;
 (3) if `smart-c-use-lib-man' is non-nil, the C++ identifier is
     recognized as a library symbol, and a man page is found for the
     identifier, then the man page is displayed.

\(fn &optional IDENTIFIER NEXT)" t nil)

(autoload 'smart-c++-tag "hmouse-tag" "\


\(fn &optional IDENTIFIER NEXT)" nil nil)

(autoload 'smart-c-at-tag-p "hmouse-tag" "\
Return C tag name that point is within, else nil.

\(fn &optional NO-FLASH)" nil nil)

(autoload 'smart-cc-mode-initialize "hmouse-tag" "\
Load and initialize cc-mode if possible and always return nil.

\(fn)" nil nil)

(autoload 'smart-fortran-at-tag-p "hmouse-tag" "\
Return Fortran tag name that point is within, else nil.

\(fn &optional NO-FLASH)" nil nil)

(autoload 'smart-java "hmouse-tag" "\
Jumps to the definition of optional Java IDENTIFIER or the one at point.
Optional second arg NEXT means jump to next matching Java tag.

It assumes that its caller has already checked that the key was pressed in an
appropriate buffer and has moved the cursor to the selected buffer.

See the documentation for `smart-java-oo-browser' for the behavior of this
function when the OO-Browser has been loaded.
Otherwise:
 (1) within a commented @see cross-reference, the referent is displayed;
 (2) on a `package' or `import' statement, the referent is displayed;
     Look for referent files in the directory list `smart-java-package-path';
 (3) on a Java identifier, the identifier definition is displayed,
     assuming the identifier is found within an `etags' generated tag file
     in the current directory or any of its ancestor directories.

\(fn &optional IDENTIFIER NEXT)" t nil)

(autoload 'smart-java-tag "hmouse-tag" "\


\(fn &optional IDENTIFIER NEXT)" nil nil)

(autoload 'smart-java-at-tag-p "hmouse-tag" "\
Return Java tag name that point is within, else nil.

\(fn &optional NO-FLASH)" nil nil)

(autoload 'smart-javascript "hmouse-tag" "\
Jumps to the definition of optional JavaScript IDENTIFIER or the one at point.
Optional second arg NEXT means jump to next matching JavaScript tag.

It assumes that its caller has already checked that the key was pressed in an
appropriate buffer and has moved the cursor to the selected buffer.

If on a JavaScript identifier, the identifier definition is displayed,
assuming the identifier is found within an `etags' generated tag file
in the current directory or any of its ancestor directories.

\(fn &optional IDENTIFIER NEXT)" t nil)

(autoload 'smart-javascript-at-tag-p "hmouse-tag" "\
Return JavaScript tag name that point is within, else nil.

\(fn &optional NO-FLASH)" nil nil)

(autoload 'smart-lisp-mode-p "hmouse-tag" "\
Return t if in a mode which uses Lisp symbols.

\(fn)" nil nil)

(autoload 'smart-objc "hmouse-tag" "\
Jumps to the definition of optional Objective-C IDENTIFIER or the one at point.
Optional second arg NEXT means jump to next matching Objective-C tag.

It assumes that its caller has already checked that the key was pressed in an
appropriate buffer and has moved the cursor to the selected buffer.

See the documentation for `smart-objc-oo-browser' for the behavior of this
function when the OO-Browser has been loaded.
Otherwise:
 (1) on a `#include' statement, the include file is displayed;
     Look for include file in directory lists `objc-cpp-include-path' and
     `objc-include-path';
 (2) on an Objective-C identifier, the identifier definition is displayed,
     assuming the identifier is found within an `etags' generated tag file
     in the current directory or any of its ancestor directories;
 (3) if `smart-c-use-lib-man' is non-nil, the Objective-C identifier is
     recognized as a library symbol, and a man page is found for the
     identifier, then the man page is displayed.

\(fn &optional IDENTIFIER NEXT)" t nil)

(autoload 'smart-objc-tag "hmouse-tag" "\


\(fn &optional IDENTIFIER NEXT)" nil nil)

(autoload 'smart-python "hmouse-tag" "\
Jumps to the definition of optional Python IDENTIFIER or the one at point.
Optional second arg NEXT means jump to next matching Python tag.

It assumes that its caller has already checked that the key was pressed in an
appropriate buffer and has moved the cursor to the selected buffer.

See the documentation for `smart-python-oo-browser' for the behavior of this
function when the OO-Browser has been loaded.

Otherwise, on a Python identifier, the identifier definition is displayed,
assuming the identifier is found within an `etags' generated tag file
in the current directory or any of its ancestor directories.

\(fn &optional IDENTIFIER NEXT)" t nil)

(autoload 'smart-python-tag "hmouse-tag" "\


\(fn &optional IDENTIFIER NEXT)" nil nil)

(autoload 'smart-python-at-tag-p "hmouse-tag" "\
Return Python tag name that point is within, else nil.

\(fn &optional NO-FLASH)" nil nil)

(autoload 'smart-tags-file-path "hmouse-tag" "\
Expand relative FILE name by looking it up within appropriate tags files.
Return FILE unchanged if it exists relative to the current directory or
cannot be expanded via a tags file.

\(fn FILE)" nil nil)

(autoload 'smart-tags-file-list "hmouse-tag" "\
Return appropriate tag files list for optional CURR-DIR-OR-FILENAME or for `default-directory'.
Optional NAME-OF-TAGS-FILE is the literal filename (no directory) for which
to look.  If no tags file is found, an error is signaled.

\(fn &optional CURR-DIR-OR-FILENAME NAME-OF-TAGS-FILE)" nil nil)

;;;***

;;;### (autoloads nil "hpath" "hpath.el" (22455 51074 256574 357000))
;;; Generated autoloads from hpath.el

(autoload 'hpath:display-buffer "hpath" "\
Displays and selects BUFFER at optional DISPLAY-WHERE location or at `hpath:display-where'.
BUFFER must be a buffer or a buffer name.

See the documentation of `hpath:display-buffer-alist' for valid
values of DISPLAY-WHERE.  Returns the window in which the buffer
is displayed or nil if not displayed because BUFFER is invalid.

\(fn BUFFER &optional DISPLAY-WHERE)" t nil)

(autoload 'hpath:find-file-urls-mode "hpath" "\
Toggle enabling/disabling the use of ftp and www Urls as arguments to `find-file' commands.
With optional prefix ARG, enable this feature if ARG is positive or turn it
off otherwise.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads nil "hrmail" "hrmail.el" (22455 51073 403106 820000))
;;; Generated autoloads from hrmail.el

(autoload 'Rmail-init "hrmail" "\
Initializes Hyperbole support for Rmail mail reading.

\(fn)" t nil)

;;;***

;;;### (autoloads nil "hsys-www" "hsys-www.el" (22455 51075 990181
;;;;;;  165000))
;;; Generated autoloads from hsys-www.el

(autoload 'www-url-expand-file-name "hsys-www" "\
Expand PATH in DIR.  Return http urls unchanged.

\(fn PATH &optional DIR)" nil nil)

(autoload 'www-url-find-file-noselect "hsys-www" "\
Find PATH without selecting its buffer.  Handle http urls.

\(fn PATH &rest ARGS)" nil nil)

;;;***

;;;### (autoloads nil "hui-jmenu" "hui-jmenu.el" (22455 51075 310073
;;;;;;  764000))
;;; Generated autoloads from hui-jmenu.el

(autoload 'hui-menu-of-buffers "hui-jmenu" "\


\(fn)" nil nil)

(autoload 'hui-menu-screen-commands "hui-jmenu" "\
Popup a menu of buffers, frames, and windows, allowing user to jump to one.

\(fn)" t nil)

(autoload 'hui-menu-jump-to-buffer "hui-jmenu" "\
Popup a menu of existing buffers categorized by mode name.  Jump to chosen buffer.

\(fn)" t nil)

(autoload 'hui-menu-jump-to-frame "hui-jmenu" "\
Popup a menu of existing frames.  Jump to chosen frame.

\(fn)" t nil)

(autoload 'hui-menu-jump-to-window "hui-jmenu" "\
Popup a menu of existing frames.  Jump to chosen frame.

\(fn)" t nil)

;;;***

;;;### (autoloads nil "hui-mini" "hui-mini.el" (22455 51072 56228
;;;;;;  903000))
;;; Generated autoloads from hui-mini.el

(autoload 'hyperbole "hui-mini" "\
Invokes the Hyperbole minibuffer menu when not already active.
\\[hyperbole] runs this.  Non-interactively, returns t if a menu is
displayed by this call, else nil (e.g. when already in a Hyperbole
mini-menu).

Two optional arguments may be given to invoke alternative menus.
MENU (a symbol) specifies the menu to invoke from MENU-LIST, (a
Hyperbole menu list structure).  MENU defaults to 'hyperbole and MENU-LIST
to `hui:menus'.  See `hui:menus' definition for the format of the menu list
structure.

Two additional optional arguments may be given when documentation for
a menu item should be shown rather than display of a menu.  DOC-FLAG
non-nil means show documentation for any item that is selected by the
user.  HELP-STRING-FLAG non-nil means show only the first line of the
documentation, not the full text.

\(fn &optional MENU MENU-LIST DOC-FLAG HELP-STRING-FLAG)" t nil)

;;;***

;;;### (autoloads nil "hui-select" "hui-select.el" (22455 51074 933347
;;;;;;  634000))
;;; Generated autoloads from hui-select.el

(autoload 'hui-select-at-p "hui-select" "\
Return non-nil if the character after optional POS (or point) matches a syntax entry in `hui-select-syntax-alist'.
The non-nil value returned is the function to call to select that syntactic unit.

\(fn &optional POS)" t nil)

(autoload 'hui-select-goto-matching-delimiter "hui-select" "\
Jump back and forth between the start and end delimiters of a thing.

\(fn)" t nil)

(autoload 'hui-select-initialize "hui-select" "\
Initialize the hui-select mode on a double click of the left mouse key.
Also, add language-specific syntax setups to aid in thing selection.

\(fn)" t nil)

(autoload 'hui-select-thing "hui-select" "\
Select a region based on the syntax of the thing at point.
If invoked repeatedly, this selects bigger and bigger things.
If `hui-select-display-type' is non-nil and this is called
interactively, the type of selection is displayed in the minibuffer.

\(fn)" t nil)

(autoload 'hui-select-thing-with-mouse "hui-select" "\
Select a region based on the syntax of the character from a mouse click EVENT.
If the click occurs at the same point as the last click, select
the next larger syntactic structure.  If `hui-select-display-type' is
non-nil and this is called interactively, the type of selection is
displayed in the minibuffer.

\(fn EVENT)" t nil)

(autoload 'hui-select-goto-matching-tag "hui-select" "\
If in a major mode listed in `hui-select-markup-modes,' moves point to the start of the tag paired with the closest tag that point is within or precedes.
Returns t if point is moved, else nil.
Signals an error if no tag is found following point or if the closing tag
does not have a `>' terminator character.

\(fn)" t nil)

(autoload 'hui-select-and-copy-thing "hui-select" "\
Copy the region surrounding the syntactical unit at point.

\(fn)" t nil)

(autoload 'hui-select-and-kill-thing "hui-select" "\
Kill the region surrounding the syntactical unit at point.

\(fn)" t nil)

(autoload 'hui-select-double-click-hook "hui-select" "\
Select a region based on the syntax of the character wherever the mouse is double-clicked.
If the double-click occurs at the same point as the last double-click, select
the next larger syntactic structure.  If `hui-select-display-type' is non-nil,
the type of selection is displayed in the minibuffer.

\(fn EVENT CLICK-COUNT)" nil nil)

;;;***

;;;### (autoloads nil "hvar" "hvar.el" (22455 51075 133379 194000))
;;; Generated autoloads from hvar.el

(autoload 'var:add-and-run-hook "hvar" "\
Adds to HOOK (a symbol ending with -hook) HOOK-FUNCTION and then calls HOOK-FUNCTION in every buffer with the matching major mode based on HOOK's name.

\(fn HOOK HOOK-FUNCTION)" nil nil)

(autoload 'var:append "hvar" "\
Appends to value held by VAR-SYMBOL, LIST-TO-ADD.  Returns new value.
If VAR-SYMBOL is unbound, it is set to LIST-TO-ADD.
Used to append to hook variables.  Stores all values for later removal.
Does nothing when `inhibit-hyperbole-messaging' is non-nil.

\(fn VAR-SYMBOL LIST-TO-ADD)" nil nil)

;;;***

;;;### (autoloads nil "hversion" "hversion.el" (22455 51074 393262
;;;;;;  556000))
;;; Generated autoloads from hversion.el

(defvar hyperb:microcruft-os-p (memq system-type '(ms-windows windows-nt ms-dos win32)) "\
T iff Hyperbole is running under a Microcruft OS.")

(defvar hyperb:mouse-buttons (if (or (and hyperb:microcruft-os-p (not (memq window-system '(w32 w64 x)))) (and hyperb:emacs-p (memq window-system '(ns dps)))) 2 3) "\
Number of live buttons available on the mouse.
Override this if the system-computed default is incorrect for your specific mouse.")

;;;***

;;;### (autoloads nil "hycontrol" "hycontrol.el" (22455 51074 799993
;;;;;;  293000))
;;; Generated autoloads from hycontrol.el

(autoload 'hycontrol-frames "hycontrol" "\
Interactively delete, jump to, move, replicate, and resize frames.
With optional numeric prefix ARG, move and resize by ARG (an integer) units.
If ARG = -1 or optional DEBUG is non-nil, debugging is enabled and
unhandled events are logged to the *Messages* buffer.  If ARG is < 1, it is
set to 1.  If it is > `hycontrol-maximum-units', it is set to
`hycontrol-maximum-units'.

\(fn &optional ARG DEBUG)" t nil)

(autoload 'hycontrol-windows "hycontrol" "\
Interactively delete, jump to, rebalance, resize, and split windows.
With optional numeric prefix ARG, move and resize by ARG (an integer) units.
If ARG = -1 or optional DEBUG is non-nil, debugging is enabled and
unhandled events are logged to the *Messages* buffer.  If ARG is < 1, it is
set to 1.  If it is > `hycontrol-maximum-units', it is set to
`hycontrol-maximum-units'.

\(fn &optional ARG DEBUG)" t nil)

;;;***

;;;### (autoloads nil "hypb" "hypb.el" (22455 51073 723157 109000))
;;; Generated autoloads from hypb.el

(autoload 'hypb:configuration "hypb" "\
Insert Emacs configuration information at the end of optional OUT-BUF or the current buffer.

\(fn &optional OUT-BUF)" nil nil)

(autoload 'hypb:functionp "hypb" "\
Returns t if OBJ is a function, nil otherwise.

\(fn OBJ)" nil nil)

(autoload 'hypb:locate "hypb" "\
Find file name matches anywhere, calling the value of `locate-command', and putting results in the `*Locate*' buffer.
Pass it SEARCH-STRING as argument.  Interactively, prompt for SEARCH-STRING.
With prefix arg ARG, prompt for the exact shell command to run instead.

This program searches for those file names in a database that match
SEARCH-STRING and normally outputs all matching absolute file names,
one per line.  The database normally consists of all files on your
system, or of all files that you have access to.  Consult the
documentation of the program for the details about how it determines
which file names match SEARCH-STRING.  (Those details vary highly with
the version.)

You can specify another program for this command to run by customizing
the variables `locate-command' or `locate-make-command-line'.

The main use of FILTER is to implement `locate-with-filter'.  See
the docstring of that function for its meaning.

After preparing the results buffer, this runs `dired-mode-hook' and
then `locate-post-command-hook'.

\(fn SEARCH-STRING &optional FILTER ARG)" t nil)

(autoload 'hypb:rgrep "hypb" "\
Recursively grep with symbol at point or PATTERN over all non-backup and non-autosave files in the current directory tree.
If in an Emacs Lisp mode buffer and no PREFIX-ARG is given, limit search to only .el and .el.gz files.

\(fn PATTERN &optional PREFIX-ARG)" t nil)

(autoload 'hypb:display-file-with-logo "hypb" "\
Display an optional text FILE with the Hyperbole banner prepended.
Without file, the banner is prepended to the current buffer.

\(fn &optional FILE)" nil nil)

;;;***

;;;### (autoloads nil "hyperbole" "hyperbole.el" (22455 51072 369611
;;;;;;  351000))
;;; Generated autoloads from hyperbole.el

(autoload 'hyperbole-toggle-messaging "hyperbole" "\
Toggle Hyperbole support for explicit buttons in mail and news buffers.
Toggles the boolean variable `inhibit-hyperbole-messaging’ and either
adds hooks (nil value) or removes them (t value).

With optional prefix ARG > 0, enables support.  If ARG <= 0,
disables/inhibits support.

\(fn &optional ARG)" t nil)
 (load "kotl/kotl-loaddefs" nil 'nowarn)

;;;***

;;;### (autoloads nil "hyrolo" "hyrolo.el" (22455 51074 759986 991000))
;;; Generated autoloads from hyrolo.el

(autoload 'hyrolo-add "hyrolo" "\
Adds a new entry in personal rolo for NAME.
Last name first is best, e.g. \"Smith, John\".
With prefix argument, prompts for optional FILE to add entry within.
NAME may be of the form: parent/child to insert child below a parent
entry which begins with the parent string.

\(fn NAME &optional FILE)" t nil)

(autoload 'hyrolo-display-matches "hyrolo" "\
Display optional DISPLAY-BUF buffer of previously found rolo matches.
If DISPLAY-BUF is nil, use the value in `hyrolo-display-buffer'.
Second arg RETURN-TO-BUFFER is the buffer to leave point within after the display.

\(fn &optional DISPLAY-BUF RETURN-TO-BUFFER)" t nil)

(autoload 'hyrolo-edit "hyrolo" "\
Edits a rolo entry given by optional NAME within `hyrolo-file-list'.
With prefix argument, prompts for optional FILE to locate entry within.
With no NAME arg, simply displays FILE or first entry in `hyrolo-file-list' in an
editable mode.  NAME may be of the form: parent/child to edit child below a
parent entry which begins with the parent string.

\(fn &optional NAME FILE)" t nil)

(autoload 'hyrolo-fgrep "hyrolo" "\
Display rolo entries matching STRING (or a logical match expression).
To a maximum of optional prefix arg MAX-MATCHES, in file(s) from optional
HYROLO-FILE or `hyrolo-file-list'.  Default is to find all matching entries.
Each entry is displayed with all of its sub-entries.  Optional COUNT-ONLY
non-nil means don't retrieve and don't display matching entries.  Optional
NO-DISPLAY non-nil means retrieve entries but don't display.

Nil value of MAX-MATCHES means find all matches, t value means find all
matches but omit file headers, negative values mean find up to the inverse of
that number of entries and omit file headers.

Returns number of entries matched.  See also documentation for the variable
`hyrolo-file-list' and the function `hyrolo-fgrep-logical' for documentation on
the logical expression matching.

\(fn STRING &optional MAX-MATCHES HYROLO-FILE COUNT-ONLY NO-DISPLAY)" t nil)

(autoload 'hyrolo-grep "hyrolo" "\
Display rolo entries matching REGEXP.
To a maximum of prefix arg MAX-MATCHES, in buffer(s) from optional HYROLO-FILE-OR-BUFS or
hyrolo-file-list.  Default is to find all matching entries.  Each entry is
displayed with all of its sub-entries.  Optional COUNT-ONLY non-nil means don't
retrieve and don't display matching entries.  Optional NO-DISPLAY non-nil
means retrieve entries but don't display.

Nil value of MAX-MATCHES means find all matches, t value means find all matches
but omit file headers, negative values mean find up to the inverse of that
number of entries and omit file headers.

Returns number of entries matched.  See also documentation for the variable
hyrolo-file-list.

\(fn REGEXP &optional MAX-MATCHES HYROLO-FILE-OR-BUFS COUNT-ONLY NO-DISPLAY)" t nil)

(autoload 'hyrolo-kill "hyrolo" "\
Kills a rolo entry given by NAME within `hyrolo-file-list'.
With prefix argument, prompts for optional FILE to locate entry within.
NAME may be of the form: parent/child to kill child below a parent entry
which begins with the parent string.
Returns t if entry is killed, nil otherwise.

\(fn NAME &optional FILE)" t nil)

(autoload 'hyrolo-sort "hyrolo" "\
Sorts up to 14 levels of entries in HYROLO-FILE (default is personal rolo).
Assumes entries are delimited by one or more `*'characters.
Returns list of number of groupings at each entry level.

\(fn &optional HYROLO-FILE)" t nil)

(autoload 'hyrolo-toggle-datestamps "hyrolo" "\
Toggle whether datestamps are updated when rolo entries are modified.
With optional ARG, turn them on iff ARG is positive.

\(fn &optional ARG)" t nil)

(autoload 'hyrolo-word "hyrolo" "\
Display rolo entries with whole word matches for STRING.
To a maximum of optional prefix arg MAX-MATCHES, in file(s) from optional
HYROLO-FILE or hyrolo-file-list.  Default is to find all matching entries.  Each
entry is displayed with all of its sub-entries.  Optional COUNT-ONLY non-nil
means don't retrieve and don't display matching entries.  Optional NO-DISPLAY
non-nil means retrieve entries but don't display.

Nil value of MAX-MATCHES means find all matches, t value means find all matches
but omit file headers, negative values mean find up to the inverse of that
number of entries and omit file headers.

Returns number of entries matched.  See also documentation for the variable
hyrolo-file-list.

\(fn STRING &optional MAX-MATCHES HYROLO-FILE COUNT-ONLY NO-DISPLAY)" t nil)

(autoload 'hyrolo-yank "hyrolo" "\
Inserts at point the first rolo entry matching NAME.
With optional prefix arg, REGEXP-P, treats NAME as a regular expression instead
of a string.

\(fn NAME &optional REGEXP-P)" t nil)

(autoload 'hyrolo-bbdb-fgrep "hyrolo" "\
Fgrep over a BBDB database and format the results as rolo entries.
With optional prefix ARG, do a grep regexp match instead of a string match.

\(fn &optional ARG)" t nil)

(autoload 'hyrolo-bbdb-grep "hyrolo" "\
Grep over a BBDB database and format the results as rolo entries.
With optional prefix ARG, do an fgrep string match instead of a regexp match.

Output looks like so:
======================================================================
@loc> \".bbdb\"
======================================================================
* Jones     Tom                <tj@groovycat.org>
* Sera      Kate               <uptown@singular.net>
* Yako      Maso               <ym@destination.ny>

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads nil "hyrolo-logic" "hyrolo-logic.el" (22455 51072
;;;;;;  89567 462000))
;;; Generated autoloads from hyrolo-logic.el

(autoload 'hyrolo-fgrep-logical "hyrolo-logic" "\
Read and execute a rolo string search with prefix logical operators.
A complex example might be:
  (and (or (not time card) (xor (french balloons) spanish)) teacher pet)
which means:
  Match neither `time' nor `card'
    or
  Matches exactly one of `french balloons' or `spanish'
    and
  Matches `teacher' and `pet'.

Either double quotes or parentheses may be used to group multiple words as a
single argument.

\(fn EXPR)" t nil)

;;;***

;;;### (autoloads nil "hywconfig" "hywconfig.el" (22455 51073 579801
;;;;;;  250000))
;;; Generated autoloads from hywconfig.el

(autoload 'hywconfig-add-by-name "hywconfig" "\
Saves the current window configuration under the string NAME.
When called interactively and a window configuration already exists under
NAME, confirms whether or not to replace it.

\(fn NAME)" t nil)

(autoload 'hywconfig-delete-by-name "hywconfig" "\
Deletes frame-specific window configuration saved under NAME.

\(fn NAME)" t nil)

(autoload 'hywconfig-restore-by-name "hywconfig" "\
Restores frame-specific window configuration saved under NAME.

\(fn NAME)" t nil)

(autoload 'hywconfig-delete-pop "hywconfig" "\
Replaces the current frame's window configuration with the one most recently saved to the ring.
Then deletes this new configuration from the ring.

\(fn)" t nil)

(autoload 'hywconfig-ring-empty-p "hywconfig" "\
Returns t if the wconfig ring for the current frame is empty; nil otherwise.

\(fn)" nil nil)

(autoload 'hywconfig-ring-save "hywconfig" "\
Saves the current frame's window configuration onto the save ring.
Use {\\[hywconfig-yank-pop]} to restore it at a later time.

\(fn)" t nil)

(autoload 'hywconfig-yank-pop "hywconfig" "\
Replaces the current frame's window configuration with the prefix arg Nth prior one in save ring.
Interactively, default value of N = 1, means the last saved window
configuration is displayed.

The sequence of window configurations wraps around, so that after the
oldest one comes the newest one.

\(fn N)" t nil)

;;;***

;;;### (autoloads nil nil ("hact.el" "hactypes.el" "hargs.el" "hbdata.el"
;;;;;;  "hbmap.el" "hbut.el" "hhist.el" "hib-debbugs.el" "hib-doc-id.el"
;;;;;;  "hib-kbd.el" "hib-social.el" "hibtypes.el" "hlvar.el" "hmoccur.el"
;;;;;;  "hmouse-key.el" "hmouse-sh.el" "hsettings.el" "hsmail.el"
;;;;;;  "hsys-org.el" "htz.el" "hui-em-but.el" "hui-menu.el" "hui-mouse.el"
;;;;;;  "hui-window.el" "hui-xe-but.el" "hui.el" "hvm.el" "hyperbole-pkg.el"
;;;;;;  "hyrolo-menu.el" "set.el") (22455 51076 91202 661000))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; End:
;;; hyperbole-autoloads.el ends here
