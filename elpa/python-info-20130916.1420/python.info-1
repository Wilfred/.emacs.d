This is
/home/melpa/melpa/working/python-info-20130916.1420/python.info,
produced by makeinfo version 4.13 from
/home/melpa/melpa/working/python-info/python.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.5, September 16, 2013

     Georg Brandl

     Copyright (C) 1990-2013, Python Software Foundation


File: python.info,  Node: Top,  Next: What's New in Python,  Up: (dir)

Python Documentation
********************

     Python 2.7.5, September 16, 2013

     Georg Brandl

     Copyright (C) 1990-2013, Python Software Foundation

* Menu:

* What's New in Python::
* The Python Tutorial::
* Python Setup and Usage::
* The Python Language Reference::
* The Python Standard Library::
* Extending and Embedding the Python Interpreter::
* Python/C API Reference Manual::
* Distributing Python Modules::
* Installing Python Modules::
* Python HOWTOs::
* Python Frequently Asked Questions::
* Glossary::
* About these documents::
* Reporting Bugs::
* Copyright::
* History and License::
* Python Module Index::
* Index::

 --- The Detailed Node Listing ---

What's New in Python

* What's New in Python 2.7: What's New in Python 2 7.
* What's New in Python 2.6: What's New in Python 2 6.
* What's New in Python 2.5: What's New in Python 2 5.
* What's New in Python 2.4: What's New in Python 2 4.
* What's New in Python 2.3: What's New in Python 2 3.
* What's New in Python 2.2: What's New in Python 2 2.
* What's New in Python 2.1: What's New in Python 2 1.
* What's New in Python 2.0: What's New in Python 2 0.

What's New in Python 2.7

* The Future for Python 2.x: The Future for Python 2 x.
* Python 3.1 Features: Python 3 1 Features.
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator.
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines.
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging.
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views.
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object.
* Other Language Changes::
* New and Improved Modules::
* Build and C API Changes::
* Other Changes and Fixes::
* Porting to Python 2.7: Porting to Python 2 7.
* Acknowledgements::

Other Language Changes

* Interpreter Changes::
* Optimizations::

New and Improved Modules

* New module; importlib: New module importlib.
* New module; sysconfig: New module sysconfig.
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk.
* Updated module; unittest: Updated module unittest.
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3.

Build and C API Changes

* Capsules::
* Port-Specific Changes; Windows: Port-Specific Changes Windows.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X.
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD.

What's New in Python 2.6

* Python 3.0: Python 3 0.
* Changes to the Development Process::
* PEP 343; The 'with' statement: PEP 343 The 'with' statement.
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module.
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory.
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package.
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting.
* PEP 3105; print As a Function: PEP 3105 print As a Function.
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes.
* PEP 3112; Byte Literals: PEP 3112 Byte Literals.
* PEP 3116; New I/O Library: PEP 3116 New I/O Library.
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol.
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes.
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax.
* PEP 3129; Class Decorators: PEP 3129 Class Decorators.
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers.
* Other Language Changes: Other Language Changes<2>.
* New and Improved Modules: New and Improved Modules<2>.
* Deprecations and Removals::
* Build and C API Changes: Build and C API Changes<2>.
* Porting to Python 2.6: Porting to Python 2 6.
* Acknowledgements: Acknowledgements<2>.

Changes to the Development Process

* New Issue Tracker; Roundup: New Issue Tracker Roundup.
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx.

PEP 343: The 'with' statement

* Writing Context Managers::
* The contextlib module::

PEP 3141: A Type Hierarchy for Numbers

* The fractions Module::

Other Language Changes

* Optimizations: Optimizations<2>.
* Interpreter Changes: Interpreter Changes<2>.

New and Improved Modules

* The ast module::
* The future_builtins module::
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation.
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser.
* ctypes Enhancements::
* Improved SSL Support::

Build and C API Changes

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>.
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX.

What's New in Python 2.5

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions.
* PEP 309; Partial Function Application: PEP 309 Partial Function Application.
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1.
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports.
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts.
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally.
* PEP 342; New Generator Features: PEP 342 New Generator Features.
* PEP 343; The 'with' statement: PEP 343 The 'with' statement<2>.
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes.
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type.
* PEP 357; The '__index__' method: PEP 357 The '__index__' method.
* Other Language Changes: Other Language Changes<3>.
* New, Improved, and Removed Modules: New Improved and Removed Modules.
* Build and C API Changes: Build and C API Changes<3>.
* Porting to Python 2.5: Porting to Python 2 5.
* Acknowledgements: Acknowledgements<3>.

PEP 343: The 'with' statement

* Writing Context Managers: Writing Context Managers<2>.
* The contextlib module: The contextlib module<2>.

Other Language Changes

* Interactive Interpreter Changes::
* Optimizations: Optimizations<3>.

New, Improved, and Removed Modules

* The ctypes package::
* The ElementTree package::
* The hashlib package::
* The sqlite3 package::
* The wsgiref package::

Build and C API Changes

* Port-Specific Changes::

What's New in Python 2.4

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers.
* PEP 289; Generator Expressions: PEP 289 Generator Expressions.
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions.
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods.
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration.
* PEP 324; New subprocess Module: PEP 324 New subprocess Module.
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type.
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports.
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions.
* Other Language Changes: Other Language Changes<4>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules.
* Build and C API Changes: Build and C API Changes<4>.
* Porting to Python 2.4: Porting to Python 2 4.
* Acknowledgements: Acknowledgements<4>.

PEP 327: Decimal Data Type

* Why is Decimal needed?::
* The Decimal type::
* The Context type::

Other Language Changes

* Optimizations: Optimizations<4>.

New, Improved, and Deprecated Modules

* cookielib::
* doctest::

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<2>.

What's New in Python 2.3

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype.
* PEP 255; Simple Generators: PEP 255 Simple Generators.
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings.
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives.
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT.
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support.
* PEP 279; enumerate(): PEP 279 enumerate.
* PEP 282; The logging Package: PEP 282 The logging Package.
* PEP 285; A Boolean Type: PEP 285 A Boolean Type.
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks.
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils.
* PEP 302; New Import Hooks: PEP 302 New Import Hooks.
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files.
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements.
* Extended Slices::
* Other Language Changes: Other Language Changes<5>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>.
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator.
* Build and C API Changes: Build and C API Changes<5>.
* Other Changes and Fixes: Other Changes and Fixes<2>.
* Porting to Python 2.3: Porting to Python 2 3.
* Acknowledgements: Acknowledgements<5>.

Other Language Changes

* String Changes::
* Optimizations: Optimizations<5>.

New, Improved, and Deprecated Modules

* Date/Time Type::
* The optparse Module::

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<3>.

What's New in Python 2.2

* Introduction::
* PEPs 252 and 253; Type and Class Changes: PEPs 252 and 253 Type and Class Changes.
* PEP 234; Iterators: PEP 234 Iterators.
* PEP 255; Simple Generators: PEP 255 Simple Generators<2>.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers<2>.
* PEP 238; Changing the Division Operator: PEP 238 Changing the Division Operator.
* Unicode Changes::
* PEP 227; Nested Scopes: PEP 227 Nested Scopes.
* New and Improved Modules: New and Improved Modules<3>.
* Interpreter Changes and Fixes::
* Other Changes and Fixes: Other Changes and Fixes<3>.
* Acknowledgements: Acknowledgements<6>.

PEPs 252 and 253: Type and Class Changes

* Old and New Classes::
* Descriptors::
* Multiple Inheritance; The Diamond Rule: Multiple Inheritance The Diamond Rule.
* Attribute Access::
* Related Links::

What's New in Python 2.1

* Introduction: Introduction<2>.
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>.
* PEP 236; __future__ Directives: PEP 236 __future__ Directives.
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons.
* PEP 230; Warning Framework: PEP 230 Warning Framework.
* PEP 229; New Build System: PEP 229 New Build System.
* PEP 205; Weak References: PEP 205 Weak References.
* PEP 232; Function Attributes: PEP 232 Function Attributes.
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms.
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook.
* PEP 208; New Coercion Model: PEP 208 New Coercion Model.
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages.
* New and Improved Modules: New and Improved Modules<4>.
* Other Changes and Fixes: Other Changes and Fixes<4>.
* Acknowledgements: Acknowledgements<7>.

What's New in Python 2.0

* Introduction: Introduction<3>.
* What About Python 1.6?: What About Python 1 6?.
* New Development Process::
* Unicode::
* List Comprehensions::
* Augmented Assignment::
* String Methods::
* Garbage Collection of Cycles::
* Other Core Changes::
* Porting to 2.0: Porting to 2 0.
* Extending/Embedding Changes::
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install.
* XML Modules::
* Module changes::
* New modules::
* IDLE Improvements::
* Deleted and Deprecated Modules::
* Acknowledgements: Acknowledgements<8>.

Other Core Changes

* Minor Language Changes::
* Changes to Built-in Functions::

XML Modules

* SAX2 Support::
* DOM Support::
* Relationship to PyXML::

The Python Tutorial

* Whetting Your Appetite::
* Using the Python Interpreter::
* An Informal Introduction to Python::
* More Control Flow Tools::
* Data Structures::
* Modules::
* Input and Output::
* Errors and Exceptions::
* Classes::
* Brief Tour of the Standard Library::
* Brief Tour of the Standard Library: Brief Tour of the Standard Library -- Part II. Part II
* What Now?::
* Interactive Input Editing and History Substitution::
* Floating Point Arithmetic; Issues and Limitations: Floating Point Arithmetic Issues and Limitations.

Using the Python Interpreter

* Invoking the Interpreter::
* The Interpreter and Its Environment::

Invoking the Interpreter

* Argument Passing::
* Interactive Mode::

The Interpreter and Its Environment

* Error Handling::
* Executable Python Scripts::
* Source Code Encoding::
* The Interactive Startup File::
* The Customization Modules::

An Informal Introduction to Python

* Using Python as a Calculator::
* First Steps Towards Programming::

Using Python as a Calculator

* Numbers::
* Strings::
* Unicode Strings::
* Lists::

More Control Flow Tools

* if Statements::
* for Statements::
* The range() Function: The range Function.
* break and continue Statements, and else Clauses on Loops: break and continue Statements and else Clauses on Loops.
* pass Statements::
* Defining Functions::
* More on Defining Functions::
* Intermezzo; Coding Style: Intermezzo Coding Style.

More on Defining Functions

* Default Argument Values::
* Keyword Arguments::
* Arbitrary Argument Lists::
* Unpacking Argument Lists::
* Lambda Forms::
* Documentation Strings::

Data Structures

* More on Lists::
* The del statement::
* Tuples and Sequences::
* Sets::
* Dictionaries::
* Looping Techniques::
* More on Conditions::
* Comparing Sequences and Other Types::

More on Lists

* Using Lists as Stacks::
* Using Lists as Queues::
* Functional Programming Tools::
* List Comprehensions: List Comprehensions<2>.

List Comprehensions

* Nested List Comprehensions::

Modules

* More on Modules::
* Standard Modules::
* The dir() Function: The dir Function.
* Packages::

More on Modules

* Executing modules as scripts::
* The Module Search Path::
* "Compiled" Python files::

Packages

* Importing * From a Package::
* Intra-package References::
* Packages in Multiple Directories::

Input and Output

* Fancier Output Formatting::
* Reading and Writing Files::

Fancier Output Formatting

* Old string formatting::

Reading and Writing Files

* Methods of File Objects::
* The pickle Module::

Errors and Exceptions

* Syntax Errors::
* Exceptions::
* Handling Exceptions::
* Raising Exceptions::
* User-defined Exceptions::
* Defining Clean-up Actions::
* Predefined Clean-up Actions::

Classes

* A Word About Names and Objects::
* Python Scopes and Namespaces::
* A First Look at Classes::
* Random Remarks::
* Inheritance::
* Private Variables and Class-local References::
* Odds and Ends::
* Exceptions Are Classes Too::
* Iterators::
* Generators::
* Generator Expressions::

A First Look at Classes

* Class Definition Syntax::
* Class Objects::
* Instance Objects::
* Method Objects::

Inheritance

* Multiple Inheritance::

Brief Tour of the Standard Library

* Operating System Interface::
* File Wildcards::
* Command Line Arguments::
* Error Output Redirection and Program Termination::
* String Pattern Matching::
* Mathematics::
* Internet Access::
* Dates and Times::
* Data Compression::
* Performance Measurement::
* Quality Control::
* Batteries Included::

Brief Tour of the Standard Library -- Part II

* Output Formatting::
* Templating::
* Working with Binary Data Record Layouts::
* Multi-threading::
* Logging::
* Weak References::
* Tools for Working with Lists::
* Decimal Floating Point Arithmetic::

Interactive Input Editing and History Substitution

* Line Editing::
* History Substitution::
* Key Bindings::
* Alternatives to the Interactive Interpreter::

Floating Point Arithmetic:  Issues and Limitations

* Representation Error::

Python Setup and Usage

* Command line and environment::
* Using Python on Unix platforms::
* Using Python on Windows::
* Using Python on a Macintosh::

Command line and environment

* Command line::
* Environment variables::

Command line

* Interface options::
* Generic options::
* Miscellaneous options::
* Options you shouldn't use::

Environment variables

* Debug-mode variables::

Using Python on Unix platforms

* Getting and installing the latest version of Python::
* Building Python::
* Python-related paths and files::
* Miscellaneous::
* Editors::

Getting and installing the latest version of Python

* On Linux::
* On FreeBSD and OpenBSD::
* On OpenSolaris::

Using Python on Windows

* Installing Python::
* Alternative bundles::
* Configuring Python::
* Additional modules::
* Compiling Python on Windows::
* Other resources::

Configuring Python

* Excursus; Setting environment variables: Excursus Setting environment variables.
* Finding the Python executable::
* Finding modules::
* Executing scripts::

Additional modules

* PyWin32::
* Py2exe::
* WConio::

Using Python on a Macintosh

* Getting and Installing MacPython::
* The IDE::
* Installing Additional Python Packages::
* GUI Programming on the Mac::
* Distributing Python Applications on the Mac::
* Other Resources::

Getting and Installing MacPython

* How to run a Python script::
* Running scripts with a GUI::
* Configuration::

The Python Language Reference

* Introduction: Introduction<4>.
* Lexical analysis::
* Data model::
* Execution model::
* Expressions::
* Simple statements::
* Compound statements::
* Top-level components::
* Full Grammar specification::

Introduction

* Alternate Implementations::
* Notation::

Lexical analysis

* Line structure::
* Other tokens::
* Identifiers and keywords::
* Literals::
* Operators::
* Delimiters::

Line structure

* Logical lines::
* Physical lines::
* Comments::
* Encoding declarations::
* Explicit line joining::
* Implicit line joining::
* Blank lines::
* Indentation::
* Whitespace between tokens::

Identifiers and keywords

* Keywords::
* Reserved classes of identifiers::

Literals

* String literals::
* String literal concatenation::
* Numeric literals::
* Integer and long integer literals::
* Floating point literals::
* Imaginary literals::

Data model

* Objects, values and types: Objects values and types.
* The standard type hierarchy::
* New-style and classic classes::
* Special method names::

Special method names

* Basic customization::
* Customizing attribute access::
* Customizing class creation::
* Customizing instance and subclass checks::
* Emulating callable objects::
* Emulating container types::
* Additional methods for emulation of sequence types::
* Emulating numeric types::
* Coercion rules::
* With Statement Context Managers::
* Special method lookup for old-style classes::
* Special method lookup for new-style classes::

Customizing attribute access

* More attribute access for new-style classes::
* Implementing Descriptors::
* Invoking Descriptors::
* __slots__::

Execution model

* Naming and binding::
* Exceptions: Exceptions<2>.

Naming and binding

* Interaction with dynamic features::

Expressions

* Arithmetic conversions::
* Atoms::
* Primaries::
* The power operator::
* Unary arithmetic and bitwise operations::
* Binary arithmetic operations::
* Shifting operations::
* Binary bitwise operations::
* Comparisons::
* Boolean operations::
* Conditional Expressions::
* Lambdas::
* Expression lists::
* Evaluation order::
* Operator precedence::

Atoms

* Identifiers (Names): Identifiers Names.
* Literals: Literals<2>.
* Parenthesized forms::
* List displays::
* Displays for sets and dictionaries::
* Generator expressions::
* Dictionary displays::
* Set displays::
* String conversions::
* Yield expressions::

Yield expressions

* Generator-iterator methods::

Primaries

* Attribute references::
* Subscriptions::
* Slicings::
* Calls::

Simple statements

* Expression statements::
* Assignment statements::
* The assert statement::
* The pass statement::
* The del statement: The del statement<2>.
* The print statement::
* The return statement::
* The yield statement::
* The raise statement::
* The break statement::
* The continue statement::
* The import statement::
* The global statement::
* The exec statement::

Assignment statements

* Augmented assignment statements::

The import statement

* Future statements::

Compound statements

* The if statement::
* The while statement::
* The for statement::
* The try statement::
* The with statement::
* Function definitions::
* Class definitions::

Top-level components

* Complete Python programs::
* File input::
* Interactive input::
* Expression input::

The Python Standard Library

* Introduction: Introduction<5>.
* Built-in Functions::
* Non-essential Built-in Functions::
* Built-in Constants::
* Built-in Types::
* Built-in Exceptions::
* String Services::
* Data Types::
* Numeric and Mathematical Modules::
* File and Directory Access::
* Data Persistence::
* Data Compression and Archiving::
* File Formats::
* Cryptographic Services::
* Generic Operating System Services::
* Optional Operating System Services::
* Interprocess Communication and Networking::
* Internet Data Handling::
* Structured Markup Processing Tools::
* Internet Protocols and Support::
* Multimedia Services::
* Internationalization::
* Program Frameworks::
* Graphical User Interfaces with Tk::
* Development Tools::
* Debugging and Profiling::
* Python Runtime Services::
* Custom Python Interpreters::
* Restricted Execution::
* Importing Modules::
* Python Language Services::
* Python compiler package::
* Miscellaneous Services::
* MS Windows Specific Services::
* Unix Specific Services::
* Mac OS X specific services::
* MacPython OSA Modules::
* SGI IRIX Specific Services::
* SunOS Specific Services::
* Undocumented Modules::

Built-in Constants

* Constants added by the site module::

Built-in Types

* Truth Value Testing::
* Boolean Operations: Boolean Operations --- and or not. and, or, not
* Comparisons: Comparisons<2>.
* Numeric Types: Numeric Types --- int float long complex. int, float, long, complex
* Iterator Types::
* Sequence Types: Sequence Types --- str unicode list tuple bytearray buffer xrange. str, unicode, list, tuple, bytearray, buffer, xrange
* Set Types: Set Types --- set frozenset. set, frozenset
* Mapping Types: Mapping Types --- dict. dict
* File Objects::
* memoryview type::
* Context Manager Types::
* Other Built-in Types::
* Special Attributes::

Numeric Types --- int, float, long, complex

* Bitwise Operations on Integer Types::
* Additional Methods on Integer Types::
* Additional Methods on Float::

Iterator Types

* Generator Types::

Sequence Types --- str, unicode, list, tuple, bytearray, buffer, xrange

* String Methods: String Methods<2>.
* String Formatting Operations::
* XRange Type::
* Mutable Sequence Types::

Mapping Types --- dict

* Dictionary view objects::

Other Built-in Types

* Modules: Modules<2>.
* Classes and Class Instances::
* Functions::
* Methods::
* Code Objects::
* Type Objects::
* The Null Object::
* The Ellipsis Object::
* The NotImplemented Object::
* Boolean Values::
* Internal Objects::

Built-in Exceptions

* Exception hierarchy::

String Services

* string: string --- Common string operations. Common string operations
* re: re --- Regular expression operations. Regular expression operations
* struct: struct --- Interpret strings as packed binary data. Interpret strings as packed binary data
* difflib: difflib --- Helpers for computing deltas. Helpers for computing deltas
* StringIO: StringIO --- Read and write strings as files. Read and write strings as files
* cStringIO: cStringIO --- Faster version of StringIO. Faster version of StringIO
* textwrap: textwrap --- Text wrapping and filling. Text wrapping and filling
* codecs: codecs --- Codec registry and base classes. Codec registry and base classes
* unicodedata: unicodedata --- Unicode Database. Unicode Database
* stringprep: stringprep --- Internet String Preparation. Internet String Preparation
* fpformat: fpformat --- Floating point conversions. Floating point conversions

string --- Common string operations

* String constants::
* String Formatting::
* Format String Syntax::
* Template strings::
* String functions::
* Deprecated string functions::

Format String Syntax

* Format Specification Mini-Language::
* Format examples::

re --- Regular expression operations

* Regular Expression Syntax::
* Module Contents::
* Regular Expression Objects::
* Match Objects::
* Examples::

Examples

* Checking For a Pair::
* Simulating scanf(): Simulating scanf.
* search() vs. match(): search vs match.
* Making a Phonebook::
* Text Munging::
* Finding all Adverbs::
* Finding all Adverbs and their Positions::
* Raw String Notation::

struct --- Interpret strings as packed binary data

* Functions and Exceptions::
* Format Strings::
* Classes: Classes<2>.

Format Strings

* Byte Order, Size, and Alignment: Byte Order Size and Alignment.
* Format Characters::
* Examples: Examples<2>.

difflib --- Helpers for computing deltas

* SequenceMatcher Objects::
* SequenceMatcher Examples::
* Differ Objects::
* Differ Example::
* A command-line interface to difflib::

codecs --- Codec registry and base classes

* Codec Base Classes::
* Encodings and Unicode::
* Standard Encodings::
* encodings.idna: encodings idna --- Internationalized Domain Names in Applications. Internationalized Domain Names in Applications
* encodings.utf_8_sig: encodings utf_8_sig --- UTF-8 codec with BOM signature. UTF-8 codec with BOM signature

Codec Base Classes

* Codec Objects::
* IncrementalEncoder Objects::
* IncrementalDecoder Objects::
* StreamWriter Objects::
* StreamReader Objects::
* StreamReaderWriter Objects::
* StreamRecoder Objects::

Data Types

* datetime: datetime --- Basic date and time types. Basic date and time types
* calendar: calendar --- General calendar-related functions. General calendar-related functions
* collections: collections --- High-performance container datatypes. High-performance container datatypes
* heapq: heapq --- Heap queue algorithm. Heap queue algorithm
* bisect: bisect --- Array bisection algorithm. Array bisection algorithm
* array: array --- Efficient arrays of numeric values. Efficient arrays of numeric values
* sets: sets --- Unordered collections of unique elements. Unordered collections of unique elements
* sched: sched --- Event scheduler. Event scheduler
* mutex: mutex --- Mutual exclusion support. Mutual exclusion support
* Queue: Queue --- A synchronized queue class. A synchronized queue class
* weakref: weakref --- Weak references. Weak references
* UserDict: UserDict --- Class wrapper for dictionary objects. Class wrapper for dictionary objects
* UserList: UserList --- Class wrapper for list objects. Class wrapper for list objects
* UserString: UserString --- Class wrapper for string objects. Class wrapper for string objects
* types: types --- Names for built-in types. Names for built-in types
* new: new --- Creation of runtime internal objects. Creation of runtime internal objects
* copy: copy --- Shallow and deep copy operations. Shallow and deep copy operations
* pprint: pprint --- Data pretty printer. Data pretty printer
* repr: repr --- Alternate repr implementation. Alternate repr() implementation

datetime --- Basic date and time types

* Available Types::
* timedelta Objects::
* date Objects::
* datetime Objects::
* time Objects::
* tzinfo Objects::
* strftime() and strptime() Behavior: strftime and strptime Behavior.

collections --- High-performance container datatypes

* Counter objects::
* deque objects::
* defaultdict objects::
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields.
* OrderedDict objects::
* Collections Abstract Base Classes::

deque objects

* deque Recipes::

defaultdict objects

* defaultdict Examples::

OrderedDict objects

* OrderedDict Examples and Recipes::

heapq --- Heap queue algorithm

* Basic Examples::
* Priority Queue Implementation Notes::
* Theory::

bisect --- Array bisection algorithm

* Searching Sorted Lists::
* Other Examples::

sets --- Unordered collections of unique elements

* Set Objects::
* Example::
* Protocol for automatic conversion to immutable::
* Comparison to the built-in set types::

sched --- Event scheduler

* Scheduler Objects::

mutex --- Mutual exclusion support

* Mutex Objects::

Queue --- A synchronized queue class

* Queue Objects::

weakref --- Weak references

* Weak Reference Objects::
* Example: Example<2>.

pprint --- Data pretty printer

* PrettyPrinter Objects::
* pprint Example::

repr --- Alternate repr() implementation

* Repr Objects::
* Subclassing Repr Objects::

Numeric and Mathematical Modules

* numbers: numbers --- Numeric abstract base classes. Numeric abstract base classes
* math: math --- Mathematical functions. Mathematical functions
* cmath: cmath --- Mathematical functions for complex numbers. Mathematical functions for complex numbers
* decimal: decimal --- Decimal fixed point and floating point arithmetic. Decimal fixed point and floating point arithmetic
* fractions: fractions --- Rational numbers. Rational numbers
* random: random --- Generate pseudo-random numbers. Generate pseudo-random numbers
* itertools: itertools --- Functions creating iterators for efficient looping. Functions creating iterators for efficient looping
* functools: functools --- Higher-order functions and operations on callable objects. Higher-order functions and operations on callable
                        objects
* operator: operator --- Standard operators as functions. Standard operators as functions

numbers --- Numeric abstract base classes

* The numeric tower::
* Notes for type implementors::

Notes for type implementors

* Adding More Numeric ABCs::
* Implementing the arithmetic operations::

math --- Mathematical functions

* Number-theoretic and representation functions::
* Power and logarithmic functions::
* Trigonometric functions::
* Angular conversion::
* Hyperbolic functions::
* Special functions::
* Constants::

cmath --- Mathematical functions for complex numbers

* Conversions to and from polar coordinates::
* Power and logarithmic functions: Power and logarithmic functions<2>.
* Trigonometric functions: Trigonometric functions<2>.
* Hyperbolic functions: Hyperbolic functions<2>.
* Classification functions::
* Constants: Constants<2>.

decimal --- Decimal fixed point and floating point arithmetic

* Quick-start Tutorial::
* Decimal objects::
* Context objects::
* Signals::
* Floating Point Notes::
* Working with threads::
* Recipes::
* Decimal FAQ::

Decimal objects

* Logical operands::

Floating Point Notes

* Mitigating round-off error with increased precision::
* Special values::

itertools --- Functions creating iterators for efficient looping

* Itertool functions::
* Recipes: Recipes<2>.

functools --- Higher-order functions and operations on callable objects

* partial Objects::

operator --- Standard operators as functions

* Mapping Operators to Functions::

File and Directory Access

* os.path: os path --- Common pathname manipulations. Common pathname manipulations
* fileinput: fileinput --- Iterate over lines from multiple input streams. Iterate over lines from multiple input streams
* stat: stat --- Interpreting stat results. Interpreting stat() results
* statvfs: statvfs --- Constants used with os statvfs. Constants used with os.statvfs()
* filecmp: filecmp --- File and Directory Comparisons. File and Directory Comparisons
* tempfile: tempfile --- Generate temporary files and directories. Generate temporary files and directories
* glob: glob --- Unix style pathname pattern expansion. Unix style pathname pattern expansion
* fnmatch: fnmatch --- Unix filename pattern matching. Unix filename pattern matching
* linecache: linecache --- Random access to text lines. Random access to text lines
* shutil: shutil --- High-level file operations. High-level file operations
* dircache: dircache --- Cached directory listings. Cached directory listings
* macpath: macpath --- Mac OS 9 path manipulation functions. Mac OS 9 path manipulation functions

filecmp --- File and Directory Comparisons

* The dircmp class::

shutil --- High-level file operations

* Directory and files operations::
* Archiving operations::

Directory and files operations

* copytree example::

Archiving operations

* Archiving example::

Data Persistence

* pickle: pickle --- Python object serialization. Python object serialization
* cPickle: cPickle --- A faster pickle. A faster pickle
* copy_reg: copy_reg --- Register pickle support functions. Register pickle support functions
* shelve: shelve --- Python object persistence. Python object persistence
* marshal: marshal --- Internal Python object serialization. Internal Python object serialization
* anydbm: anydbm --- Generic access to DBM-style databases. Generic access to DBM-style databases
* whichdb: whichdb --- Guess which DBM module created a database. Guess which DBM module created a database
* dbm: dbm --- Simple "database" interface. Simple "database" interface
* gdbm: gdbm --- GNU's reinterpretation of dbm. GNU's reinterpretation of dbm
* dbhash: dbhash --- DBM-style interface to the BSD database library. DBM-style interface to the BSD database library
* bsddb: bsddb --- Interface to Berkeley DB library. Interface to Berkeley DB library
* dumbdbm: dumbdbm --- Portable DBM implementation. Portable DBM implementation
* sqlite3: sqlite3 --- DB-API 2 0 interface for SQLite databases. DB-API 2.0 interface for SQLite databases

pickle --- Python object serialization

* Relationship to other Python modules::
* Data stream format::
* Usage::
* What can be pickled and unpickled?::
* The pickle protocol::
* Subclassing Unpicklers::
* Example: Example<3>.

The pickle protocol

* Pickling and unpickling normal class instances::
* Pickling and unpickling extension types::
* Pickling and unpickling external objects::

copy_reg --- Register pickle support functions

* Example: Example<4>.

shelve --- Python object persistence

* Restrictions::
* Example: Example<5>.

dbhash --- DBM-style interface to the BSD database library

* Database Objects::

bsddb --- Interface to Berkeley DB library

* Hash, BTree and Record Objects: Hash BTree and Record Objects.

dumbdbm --- Portable DBM implementation

* Dumbdbm Objects::

sqlite3 --- DB-API 2.0 interface for SQLite databases

* Module functions and constants::
* Connection Objects::
* Cursor Objects::
* Row Objects::
* SQLite and Python types::
* Controlling Transactions::
* Using sqlite3 efficiently::
* Common issues::

SQLite and Python types

* Introduction: Introduction<6>.
* Using adapters to store additional Python types in SQLite databases::
* Converting SQLite values to custom Python types::
* Default adapters and converters::

Using adapters to store additional Python types in SQLite databases

* Letting your object adapt itself::
* Registering an adapter callable::

Using sqlite3 efficiently

* Using shortcut methods::
* Accessing columns by name instead of by index::
* Using the connection as a context manager::

Common issues

* Multithreading::

Data Compression and Archiving

* zlib: zlib --- Compression compatible with gzip. Compression compatible with gzip
* gzip: gzip --- Support for gzip files. Support for gzip files
* bz2: bz2 --- Compression compatible with bzip2. Compression compatible with bzip2
* zipfile: zipfile --- Work with ZIP archives. Work with ZIP archives
* tarfile: tarfile --- Read and write tar archive files. Read and write tar archive files

gzip --- Support for gzip files

* Examples of usage::

bz2 --- Compression compatible with bzip2

* (De)compression of files: De compression of files.
* Sequential (de)compression: Sequential de compression.
* One-shot (de)compression: One-shot de compression.

zipfile --- Work with ZIP archives

* ZipFile Objects::
* PyZipFile Objects::
* ZipInfo Objects::

tarfile --- Read and write tar archive files

* TarFile Objects::
* TarInfo Objects::
* Examples: Examples<3>.
* Supported tar formats::
* Unicode issues::

File Formats

* csv: csv --- CSV File Reading and Writing. CSV File Reading and Writing
* ConfigParser: ConfigParser --- Configuration file parser. Configuration file parser
* robotparser: robotparser --- Parser for robots txt. Parser for robots.txt
* netrc: netrc --- netrc file processing. netrc file processing
* xdrlib: xdrlib --- Encode and decode XDR data. Encode and decode XDR data
* plistlib: plistlib --- Generate and parse Mac OS X plist files. Generate and parse Mac OS X .plist files

csv --- CSV File Reading and Writing

* Module Contents: Module Contents<2>.
* Dialects and Formatting Parameters::
* Reader Objects::
* Writer Objects::
* Examples: Examples<4>.

ConfigParser --- Configuration file parser

* RawConfigParser Objects::
* ConfigParser Objects::
* SafeConfigParser Objects::
* Examples: Examples<5>.

netrc --- netrc file processing

* netrc Objects::

xdrlib --- Encode and decode XDR data

* Packer Objects::
* Unpacker Objects::
* Exceptions: Exceptions<3>.

plistlib --- Generate and parse Mac OS X .plist files

* Examples: Examples<6>.

Cryptographic Services

* hashlib: hashlib --- Secure hashes and message digests. Secure hashes and message digests
* hmac: hmac --- Keyed-Hashing for Message Authentication. Keyed-Hashing for Message Authentication
* md5: md5 --- MD5 message digest algorithm. MD5 message digest algorithm
* sha: sha --- SHA-1 message digest algorithm. SHA-1 message digest algorithm

Generic Operating System Services

* os: os --- Miscellaneous operating system interfaces. Miscellaneous operating system interfaces
* io: io --- Core tools for working with streams. Core tools for working with streams
* time: time --- Time access and conversions. Time access and conversions
* argparse: argparse --- Parser for command-line options arguments and sub-commands. Parser for command-line options, arguments and sub-
                        commands
* optparse: optparse --- Parser for command line options. Parser for command line options
* getopt: getopt --- C-style parser for command line options. C-style parser for command line options
* logging: logging --- Logging facility for Python. Logging facility for Python
* logging.config: logging config --- Logging configuration. Logging configuration
* logging.handlers: logging handlers --- Logging handlers. Logging handlers
* getpass: getpass --- Portable password input. Portable password input
* curses: curses --- Terminal handling for character-cell displays. Terminal handling for character-cell displays
* curses.textpad: curses textpad --- Text input widget for curses programs. Text input widget for curses programs
* curses.ascii: curses ascii --- Utilities for ASCII characters. Utilities for ASCII characters
* curses.panel: curses panel --- A panel stack extension for curses. A panel stack extension for curses
* platform: platform --- Access to underlying platform's identifying data. Access to underlying platform's identifying data
* errno: errno --- Standard errno system symbols. Standard errno system symbols
* ctypes: ctypes --- A foreign function library for Python. A foreign function library for Python

os --- Miscellaneous operating system interfaces

* Process Parameters::
* File Object Creation::
* File Descriptor Operations::
* Files and Directories::
* Process Management::
* Miscellaneous System Information::
* Miscellaneous Functions::

File Descriptor Operations

* open() flag constants: open flag constants.

io --- Core tools for working with streams

* Module Interface::
* I/O Base Classes::
* Raw File I/O::
* Buffered Streams::
* Text I/O::
* Advanced topics::

Advanced topics

* Performance::
* Multi-threading: Multi-threading<2>.
* Reentrancy::

Performance

* Binary I/O::
* Text I/O: Text I/O<2>.

argparse --- Parser for command-line options, arguments and sub-commands

* Example: Example<6>.
* ArgumentParser objects::
* The add_argument() method: The add_argument method.
* The parse_args() method: The parse_args method.
* Other utilities::
* Upgrading optparse code::

Example

* Creating a parser::
* Adding arguments::
* Parsing arguments::

ArgumentParser objects

* prog::
* usage::
* description::
* epilog::
* parents::
* formatter_class::
* prefix_chars::
* fromfile_prefix_chars::
* argument_default::
* conflict_handler::
* add_help::

The add_argument() method

* name or flags::
* action::
* nargs::
* const::
* default::
* type::
* choices::
* required::
* help::
* metavar::
* dest::

The parse_args() method

* Option value syntax::
* Invalid arguments::
* Arguments containing -::
* Argument abbreviations::
* Beyond sys.argv: Beyond sys argv.
* The Namespace object::

Other utilities

* Sub-commands::
* FileType objects::
* Argument groups::
* Mutual exclusion::
* Parser defaults::
* Printing help::
* Partial parsing::
* Customizing file parsing::
* Exiting methods::

optparse --- Parser for command line options

* Background::
* Tutorial::
* Reference Guide::
* Option Callbacks::
* Extending optparse::

Background

* Terminology::
* What are options for?::
* What are positional arguments for?::

Tutorial

* Understanding option actions::
* The store action::
* Handling boolean (flag) options: Handling boolean flag options.
* Other actions::
* Default values::
* Generating help::
* Printing a version string::
* How optparse handles errors::
* Putting it all together::

Generating help

* Grouping Options::

Reference Guide

* Creating the parser::
* Populating the parser::
* Defining options::
* Option attributes::
* Standard option actions::
* Standard option types::
* Parsing arguments: Parsing arguments<2>.
* Querying and manipulating your option parser::
* Conflicts between options::
* Cleanup::
* Other methods::

Option Callbacks

* Defining a callback option::
* How callbacks are called::
* Raising errors in a callback::
* Callback example 1; trivial callback: Callback example 1 trivial callback.
* Callback example 2; check option order: Callback example 2 check option order.
* Callback example 3; check option order (generalized): Callback example 3 check option order generalized.
* Callback example 4; check arbitrary condition: Callback example 4 check arbitrary condition.
* Callback example 5; fixed arguments: Callback example 5 fixed arguments.
* Callback example 6; variable arguments: Callback example 6 variable arguments.

Extending optparse

* Adding new types::
* Adding new actions::

logging --- Logging facility for Python

* Logger Objects::
* Handler Objects::
* Formatter Objects::
* Filter Objects::
* LogRecord Objects::
* LogRecord attributes::
* LoggerAdapter Objects::
* Thread Safety::
* Module-Level Functions::
* Integration with the warnings module::

logging.config --- Logging configuration

* Configuration functions::
* Configuration dictionary schema::
* Configuration file format::

Configuration dictionary schema

* Dictionary Schema Details::
* Incremental Configuration::
* Object connections::
* User-defined objects::
* Access to external objects::
* Access to internal objects::
* Import resolution and custom importers::

logging.handlers --- Logging handlers

* StreamHandler::
* FileHandler::
* NullHandler::
* WatchedFileHandler::
* RotatingFileHandler::
* TimedRotatingFileHandler::
* SocketHandler::
* DatagramHandler::
* SysLogHandler::
* NTEventLogHandler::
* SMTPHandler::
* MemoryHandler::
* HTTPHandler::

curses --- Terminal handling for character-cell displays

* Functions: Functions<2>.
* Window Objects::
* Constants: Constants<3>.

curses.textpad --- Text input widget for curses programs

* Textbox objects::

curses.panel --- A panel stack extension for curses

* Functions: Functions<3>.
* Panel Objects::

platform ---  Access to underlying platform's identifying data

* Cross Platform::
* Java Platform::
* Windows Platform::
* Mac OS Platform::
* Unix Platforms::

Windows Platform

* Win95/98 specific::

ctypes --- A foreign function library for Python

* ctypes tutorial::
* ctypes reference::

ctypes tutorial

* Loading dynamic link libraries::
* Accessing functions from loaded dlls::
* Calling functions::
* Fundamental data types::
* Calling functions, continued: Calling functions continued.
* Calling functions with your own custom data types::
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes.
* Return types::
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference.
* Structures and unions::
* Structure/union alignment and byte order::
* Bit fields in structures and unions::
* Arrays::
* Pointers::
* Type conversions::
* Incomplete Types::
* Callback functions::
* Accessing values exported from dlls::
* Surprises::
* Variable-sized data types::

ctypes reference

* Finding shared libraries::
* Loading shared libraries::
* Foreign functions::
* Function prototypes::
* Utility functions::
* Data types::
* Fundamental data types: Fundamental data types<2>.
* Structured data types::
* Arrays and pointers::

Optional Operating System Services

* select: select --- Waiting for I/O completion. Waiting for I/O completion
* threading: threading --- Higher-level threading interface. Higher-level threading interface
* thread: thread --- Multiple threads of control. Multiple threads of control
* dummy_threading: dummy_threading --- Drop-in replacement for the threading module. Drop-in replacement for the threading module
* dummy_thread: dummy_thread --- Drop-in replacement for the thread module. Drop-in replacement for the thread module
* multiprocessing: multiprocessing --- Process-based "threading" interface. Process-based "threading" interface
* mmap: mmap --- Memory-mapped file support. Memory-mapped file support
* readline: readline --- GNU readline interface. GNU readline interface
* rlcompleter: rlcompleter --- Completion function for GNU readline. Completion function for GNU readline

select --- Waiting for I/O completion

* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects.
* Polling Objects::
* Kqueue Objects::
* Kevent Objects::

threading --- Higher-level threading interface

* Thread Objects::
* Lock Objects::
* RLock Objects::
* Condition Objects::
* Semaphore Objects::
* Event Objects::
* Timer Objects::
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement.
* Importing in threaded code::

Semaphore Objects

* Semaphore Example::

multiprocessing --- Process-based "threading" interface

* Introduction: Introduction<7>.
* Reference::
* Programming guidelines::
* Examples: Examples<7>.

Introduction

* The Process class::
* Exchanging objects between processes::
* Synchronization between processes::
* Sharing state between processes::
* Using a pool of workers::

Reference

* Process and exceptions::
* Pipes and Queues::
* Miscellaneous: Miscellaneous<2>.
* Connection Objects: Connection Objects<2>.
* Synchronization primitives::
* Shared ctypes Objects::
* Managers::
* Proxy Objects::
* Process Pools::
* Listeners and Clients::
* Authentication keys::
* Logging: Logging<2>.
* The multiprocessing.dummy module: The multiprocessing dummy module.

Shared ctypes Objects

* The multiprocessing.sharedctypes module: The multiprocessing sharedctypes module.

Managers

* Namespace objects::
* Customized managers::
* Using a remote manager::

Proxy Objects

* Cleanup: Cleanup<2>.

Listeners and Clients

* Address Formats::

Programming guidelines

* All platforms::
* Windows::

readline --- GNU readline interface

* Example: Example<7>.

rlcompleter --- Completion function for GNU readline

* Completer Objects::

Interprocess Communication and Networking

* subprocess: subprocess --- Subprocess management. Subprocess management
* socket: socket --- Low-level networking interface. Low-level networking interface
* ssl: ssl --- TLS/SSL wrapper for socket objects. TLS/SSL wrapper for socket objects
* signal: signal --- Set handlers for asynchronous events. Set handlers for asynchronous events
* popen2: popen2 --- Subprocesses with accessible I/O streams. Subprocesses with accessible I/O streams
* asyncore: asyncore --- Asynchronous socket handler. Asynchronous socket handler
* asynchat: asynchat --- Asynchronous socket command/response handler. Asynchronous socket command/response handler

subprocess --- Subprocess management

* Using the subprocess Module::
* Popen Objects::
* Windows Popen Helpers::
* Replacing Older Functions with the subprocess Module::
* Notes::

Using the subprocess Module

* Frequently Used Arguments::
* Popen Constructor::
* Exceptions: Exceptions<4>.
* Security::

Windows Popen Helpers

* Constants: Constants<4>.

Replacing Older Functions with the subprocess Module

* Replacing /bin/sh shell backquote::
* Replacing shell pipeline::
* Replacing os.system(): Replacing os system.
* Replacing the os.spawn family: Replacing the os spawn family.
* Replacing os.popen(), os.popen2(), os.popen3(): Replacing os popen os popen2 os popen3.
* Replacing functions from the popen2 module::

Notes

* Converting an argument sequence to a string on Windows::

socket --- Low-level networking interface

* Socket Objects::
* Example: Example<8>.

ssl --- TLS/SSL wrapper for socket objects

* Functions, Constants, and Exceptions: Functions Constants and Exceptions.
* SSLSocket Objects::
* Certificates::
* Examples: Examples<8>.

Examples

* Testing for SSL support::
* Client-side operation::
* Server-side operation::

signal --- Set handlers for asynchronous events

* Example: Example<9>.

popen2 --- Subprocesses with accessible I/O streams

* Popen3 and Popen4 Objects::
* Flow Control Issues::

asyncore --- Asynchronous socket handler

* asyncore Example basic HTTP client::
* asyncore Example basic echo server::

asynchat --- Asynchronous socket command/response handler

* asynchat - Auxiliary Classes::
* asynchat Example::

Internet Data Handling

* email: email --- An email and MIME handling package. An email and MIME handling package
* json: json --- JSON encoder and decoder. JSON encoder and decoder
* mailcap: mailcap --- Mailcap file handling. Mailcap file handling
* mailbox: mailbox --- Manipulate mailboxes in various formats. Manipulate mailboxes in various formats
* mhlib: mhlib --- Access to MH mailboxes. Access to MH mailboxes
* mimetools: mimetools --- Tools for parsing MIME messages. Tools for parsing MIME messages
* mimetypes: mimetypes --- Map filenames to MIME types. Map filenames to MIME types
* MimeWriter: MimeWriter --- Generic MIME file writer. Generic MIME file writer
* mimify: mimify --- MIME processing of mail messages. MIME processing of mail messages
* multifile: multifile --- Support for files containing distinct parts. Support for files containing distinct parts
* rfc822: rfc822 --- Parse RFC 2822 mail headers. Parse RFC 2822 mail headers
* base64: base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings. RFC 3548: Base16, Base32, Base64 Data Encodings
* binhex: binhex --- Encode and decode binhex4 files. Encode and decode binhex4 files
* binascii: binascii --- Convert between binary and ASCII. Convert between binary and ASCII
* quopri: quopri --- Encode and decode MIME quoted-printable data. Encode and decode MIME quoted-printable data
* uu: uu --- Encode and decode uuencode files. Encode and decode uuencode files

email --- An email and MIME handling package

* email.message; Representing an email message: email message Representing an email message.
* email.parser; Parsing email messages: email parser Parsing email messages.
* email.generator; Generating MIME documents: email generator Generating MIME documents.
* email.mime; Creating email and MIME objects from scratch: email mime Creating email and MIME objects from scratch.
* email.header; Internationalized headers: email header Internationalized headers.
* email.charset; Representing character sets: email charset Representing character sets.
* email.encoders; Encoders: email encoders Encoders.
* email.errors; Exception and Defect classes: email errors Exception and Defect classes.
* email.utils; Miscellaneous utilities: email utils Miscellaneous utilities.
* email.iterators; Iterators: email iterators Iterators.
* email; Examples: email Examples.
* Package History::
* Differences from mimelib::

email.parser: Parsing email messages

* FeedParser API::
* Parser class API::
* Additional notes::

json --- JSON encoder and decoder

* Basic Usage::
* Encoders and Decoders::
* Standard Compliance::

Standard Compliance

* Character Encodings::
* Top-level Non-Object, Non-Array Values: Top-level Non-Object Non-Array Values.
* Infinite and NaN Number Values::
* Repeated Names Within an Object::

mailbox --- Manipulate mailboxes in various formats

* Mailbox objects::
* Message objects::
* Exceptions: Exceptions<5>.
* Deprecated classes and methods::
* Examples: Examples<9>.

Mailbox objects

* Maildir::
* mbox::
* MH::
* Babyl::
* MMDF::

Message objects

* MaildirMessage::
* mboxMessage::
* MHMessage::
* BabylMessage::
* MMDFMessage::

mhlib --- Access to MH mailboxes

* MH Objects::
* Folder Objects::
* Message Objects::

mimetools --- Tools for parsing MIME messages

* Additional Methods of Message Objects::

mimetypes --- Map filenames to MIME types

* MimeTypes Objects::

MimeWriter --- Generic MIME file writer

* MimeWriter Objects::

multifile --- Support for files containing distinct parts

* MultiFile Objects::
* MultiFile Example::

rfc822 --- Parse RFC 2822 mail headers

* Message Objects: Message Objects<2>.
* AddressList Objects::

binhex --- Encode and decode binhex4 files

* Notes: Notes<2>.

Structured Markup Processing Tools

* HTMLParser: HTMLParser --- Simple HTML and XHTML parser. Simple HTML and XHTML parser
* sgmllib: sgmllib --- Simple SGML parser. Simple SGML parser
* htmllib: htmllib --- A parser for HTML documents. A parser for HTML documents
* htmlentitydefs: htmlentitydefs --- Definitions of HTML general entities. Definitions of HTML general entities
* XML Processing Modules::
* XML vulnerabilities::
* xml.etree.ElementTree: xml etree ElementTree --- The ElementTree XML API. The ElementTree XML API
* xml.dom: xml dom --- The Document Object Model API. The Document Object Model API
* xml.dom.minidom: xml dom minidom --- Minimal DOM implementation. Minimal DOM implementation
* xml.dom.pulldom: xml dom pulldom --- Support for building partial DOM trees. Support for building partial DOM trees
* xml.sax: xml sax --- Support for SAX2 parsers. Support for SAX2 parsers
* xml.sax.handler: xml sax handler --- Base classes for SAX handlers. Base classes for SAX handlers
* xml.sax.saxutils: xml sax saxutils --- SAX Utilities. SAX Utilities
* xml.sax.xmlreader: xml sax xmlreader --- Interface for XML parsers. Interface for XML parsers
* xml.parsers.expat: xml parsers expat --- Fast XML parsing using Expat. Fast XML parsing using Expat

HTMLParser --- Simple HTML and XHTML parser

* Example HTML Parser Application::
* HTMLParser Methods::
* Examples: Examples<10>.

htmllib --- A parser for HTML documents

* HTMLParser Objects::

XML vulnerabilities

* defused packages::

xml.etree.ElementTree --- The ElementTree XML API

* Tutorial: Tutorial<2>.
* XPath support::
* Reference: Reference<2>.

Tutorial

* XML tree and elements::
* Parsing XML::
* Finding interesting elements::
* Modifying an XML File::
* Building XML documents::
* Additional resources::

XPath support

* Example: Example<10>.
* Supported XPath syntax::

Reference

* Functions: Functions<4>.
* Element Objects::
* ElementTree Objects::
* QName Objects::
* TreeBuilder Objects::
* XMLParser Objects::

xml.dom --- The Document Object Model API

* Module Contents: Module Contents<3>.
* Objects in the DOM::
* Conformance::

Objects in the DOM

* DOMImplementation Objects::
* Node Objects::
* NodeList Objects::
* DocumentType Objects::
* Document Objects::
* Element Objects: Element Objects<2>.
* Attr Objects::
* NamedNodeMap Objects::
* Comment Objects::
* Text and CDATASection Objects::
* ProcessingInstruction Objects::
* Exceptions: Exceptions<6>.

Conformance

* Type Mapping::
* Accessor Methods::

xml.dom.minidom --- Minimal DOM implementation

* DOM Objects::
* DOM Example::
* minidom and the DOM standard::

xml.dom.pulldom --- Support for building partial DOM trees

* DOMEventStream Objects::

xml.sax --- Support for SAX2 parsers

* SAXException Objects::

xml.sax.handler --- Base classes for SAX handlers

* ContentHandler Objects::
* DTDHandler Objects::
* EntityResolver Objects::
* ErrorHandler Objects::

xml.sax.xmlreader --- Interface for XML parsers

* XMLReader Objects::
* IncrementalParser Objects::
* Locator Objects::
* InputSource Objects::
* The Attributes Interface::
* The AttributesNS Interface::

xml.parsers.expat --- Fast XML parsing using Expat

* XMLParser Objects: XMLParser Objects<2>.
* ExpatError Exceptions::
* Example: Example<11>.
* Content Model Descriptions::
* Expat error constants::

Internet Protocols and Support

* webbrowser: webbrowser --- Convenient Web-browser controller. Convenient Web-browser controller
* cgi: cgi --- Common Gateway Interface support. Common Gateway Interface support
* cgitb: cgitb --- Traceback manager for CGI scripts. Traceback manager for CGI scripts
* wsgiref: wsgiref --- WSGI Utilities and Reference Implementation. WSGI Utilities and Reference Implementation
* urllib: urllib --- Open arbitrary resources by URL. Open arbitrary resources by URL
* urllib2: urllib2 --- extensible library for opening URLs. extensible library for opening URLs
* httplib: httplib --- HTTP protocol client. HTTP protocol client
* ftplib: ftplib --- FTP protocol client. FTP protocol client
* poplib: poplib --- POP3 protocol client. POP3 protocol client
* imaplib: imaplib --- IMAP4 protocol client. IMAP4 protocol client
* nntplib: nntplib --- NNTP protocol client. NNTP protocol client
* smtplib: smtplib --- SMTP protocol client. SMTP protocol client
* smtpd: smtpd --- SMTP Server. SMTP Server
* telnetlib: telnetlib --- Telnet client. Telnet client
* uuid: uuid --- UUID objects according to RFC 4122. UUID objects according to RFC 4122
* urlparse: urlparse --- Parse URLs into components. Parse URLs into components
* SocketServer: SocketServer --- A framework for network servers. A framework for network servers
* BaseHTTPServer: BaseHTTPServer --- Basic HTTP server. Basic HTTP server
* SimpleHTTPServer: SimpleHTTPServer --- Simple HTTP request handler. Simple HTTP request handler
* CGIHTTPServer: CGIHTTPServer --- CGI-capable HTTP request handler. CGI-capable HTTP request handler
* cookielib: cookielib --- Cookie handling for HTTP clients. Cookie handling for HTTP clients
* Cookie: Cookie --- HTTP state management. HTTP state management
* xmlrpclib: xmlrpclib --- XML-RPC client access. XML-RPC client access
* SimpleXMLRPCServer: SimpleXMLRPCServer --- Basic XML-RPC server. Basic XML-RPC server
* DocXMLRPCServer: DocXMLRPCServer --- Self-documenting XML-RPC server. Self-documenting XML-RPC server

webbrowser --- Convenient Web-browser controller

* Browser Controller Objects::

cgi --- Common Gateway Interface support

* Introduction: Introduction<8>.
* Using the cgi module::
* Higher Level Interface::
* Old classes::
* Functions: Functions<5>.
* Caring about security::
* Installing your CGI script on a Unix system::
* Testing your CGI script::
* Debugging CGI scripts::
* Common problems and solutions::

wsgiref --- WSGI Utilities and Reference Implementation

* wsgiref.util: wsgiref util -- WSGI environment utilities. WSGI environment utilities
* wsgiref.headers: wsgiref headers -- WSGI response header tools. WSGI response header tools
* wsgiref.simple_server: wsgiref simple_server -- a simple WSGI HTTP server. a simple WSGI HTTP server
* wsgiref.validate: wsgiref validate --- WSGI conformance checker. WSGI conformance checker
* wsgiref.handlers: wsgiref handlers -- server/gateway base classes. server/gateway base classes
* Examples: Examples<11>.

urllib --- Open arbitrary resources by URL

* High-level interface::
* Utility functions: Utility functions<2>.
* URL Opener objects::
* urllib Restrictions::
* Examples: Examples<12>.

urllib2 --- extensible library for opening URLs

* Request Objects::
* OpenerDirector Objects::
* BaseHandler Objects::
* HTTPRedirectHandler Objects::
* HTTPCookieProcessor Objects::
* ProxyHandler Objects::
* HTTPPasswordMgr Objects::
* AbstractBasicAuthHandler Objects::
* HTTPBasicAuthHandler Objects::
* ProxyBasicAuthHandler Objects::
* AbstractDigestAuthHandler Objects::
* HTTPDigestAuthHandler Objects::
* ProxyDigestAuthHandler Objects::
* HTTPHandler Objects::
* HTTPSHandler Objects::
* FileHandler Objects::
* FTPHandler Objects::
* CacheFTPHandler Objects::
* UnknownHandler Objects::
* HTTPErrorProcessor Objects::
* Examples: Examples<13>.

httplib --- HTTP protocol client

* HTTPConnection Objects::
* HTTPResponse Objects::
* Examples: Examples<14>.

ftplib --- FTP protocol client

* FTP Objects::
* FTP_TLS Objects::

poplib --- POP3 protocol client

* POP3 Objects::
* POP3 Example::

imaplib --- IMAP4 protocol client

* IMAP4 Objects::
* IMAP4 Example::

nntplib --- NNTP protocol client

* NNTP Objects::

smtplib --- SMTP protocol client

* SMTP Objects::
* SMTP Example::

smtpd --- SMTP Server

* SMTPServer Objects::
* DebuggingServer Objects::
* PureProxy Objects::
* MailmanProxy Objects::

telnetlib --- Telnet client

* Telnet Objects::
* Telnet Example::

uuid --- UUID objects according to RFC 4122

* Example: Example<12>.

urlparse --- Parse URLs into components

* Results of urlparse() and urlsplit(): Results of urlparse and urlsplit.

SocketServer --- A framework for network servers

* Server Creation Notes::
* Server Objects::
* RequestHandler Objects::
* Examples: Examples<15>.

Examples

* SocketServer.TCPServer Example: SocketServer TCPServer Example.
* SocketServer.UDPServer Example: SocketServer UDPServer Example.
* Asynchronous Mixins::

BaseHTTPServer --- Basic HTTP server

* More examples::

cookielib --- Cookie handling for HTTP clients

* CookieJar and FileCookieJar Objects::
* FileCookieJar subclasses and co-operation with web browsers::
* CookiePolicy Objects::
* DefaultCookiePolicy Objects::
* Cookie Objects::
* Examples: Examples<16>.

Cookie --- HTTP state management

* Cookie Objects: Cookie Objects<2>.
* Morsel Objects::
* Example: Example<13>.

xmlrpclib --- XML-RPC client access

* ServerProxy Objects::
* Boolean Objects::
* DateTime Objects::
* Binary Objects::
* Fault Objects::
* ProtocolError Objects::
* MultiCall Objects::
* Convenience Functions::
* Example of Client Usage::
* Example of Client and Server Usage::

SimpleXMLRPCServer --- Basic XML-RPC server

* SimpleXMLRPCServer Objects::
* CGIXMLRPCRequestHandler::

SimpleXMLRPCServer Objects

* SimpleXMLRPCServer Example::

DocXMLRPCServer --- Self-documenting XML-RPC server

* DocXMLRPCServer Objects::
* DocCGIXMLRPCRequestHandler::

Multimedia Services

* audioop: audioop --- Manipulate raw audio data. Manipulate raw audio data
* imageop: imageop --- Manipulate raw image data. Manipulate raw image data
* aifc: aifc --- Read and write AIFF and AIFC files. Read and write AIFF and AIFC files
* sunau: sunau --- Read and write Sun AU files. Read and write Sun AU files
* wave: wave --- Read and write WAV files. Read and write WAV files
* chunk: chunk --- Read IFF chunked data. Read IFF chunked data
* colorsys: colorsys --- Conversions between color systems. Conversions between color systems
* imghdr: imghdr --- Determine the type of an image. Determine the type of an image
* sndhdr: sndhdr --- Determine type of sound file. Determine type of sound file
* ossaudiodev: ossaudiodev --- Access to OSS-compatible audio devices. Access to OSS-compatible audio devices

sunau --- Read and write Sun AU files

* AU_read Objects::
* AU_write Objects::

wave --- Read and write WAV files

* Wave_read Objects::
* Wave_write Objects::

ossaudiodev --- Access to OSS-compatible audio devices

* Audio Device Objects::
* Mixer Device Objects::

Internationalization

* gettext: gettext --- Multilingual internationalization services. Multilingual internationalization services
* locale: locale --- Internationalization services. Internationalization services

gettext --- Multilingual internationalization services

* GNU gettext API::
* Class-based API::
* Internationalizing your programs and modules::
* Acknowledgements: Acknowledgements<9>.

Class-based API

* The NullTranslations class::
* The GNUTranslations class::
* Solaris message catalog support::
* The Catalog constructor::

Internationalizing your programs and modules

* Localizing your module::
* Localizing your application::
* Changing languages on the fly::
* Deferred translations::
* gettext() vs. lgettext(): gettext vs lgettext.

locale --- Internationalization services

* Background, details, hints, tips and caveats: Background details hints tips and caveats.
* For extension writers and programs that embed Python::
* Access to message catalogs::

Program Frameworks

* cmd: cmd --- Support for line-oriented command interpreters. Support for line-oriented command interpreters
* shlex: shlex --- Simple lexical analysis. Simple lexical analysis

cmd --- Support for line-oriented command interpreters

* Cmd Objects::

shlex --- Simple lexical analysis

* shlex Objects::
* Parsing Rules::

Graphical User Interfaces with Tk

* Tkinter: Tkinter --- Python interface to Tcl/Tk. Python interface to Tcl/Tk
* ttk: ttk --- Tk themed widgets. Tk themed widgets
* Tix: Tix --- Extension widgets for Tk. Extension widgets for Tk
* ScrolledText: ScrolledText --- Scrolled Text Widget. Scrolled Text Widget
* turtle: turtle --- Turtle graphics for Tk. Turtle graphics for Tk
* IDLE::
* Other Graphical User Interface Packages::

Tkinter --- Python interface to Tcl/Tk

* Tkinter Modules::
* Tkinter Life Preserver::
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk.
* Mapping Basic Tk into Tkinter::
* How Tk and Tkinter are Related::
* Handy Reference::

Tkinter Life Preserver

* How To Use This Section::
* A Simple Hello World Program::

Handy Reference

* Setting Options::
* The Packer::
* Packer Options::
* Coupling Widget Variables::
* The Window Manager::
* Tk Option Data Types::
* Bindings and Events::
* The index Parameter::
* Images::

ttk --- Tk themed widgets

* Using Ttk::
* Ttk Widgets::
* Widget::
* Combobox::
* Notebook::
* Progressbar::
* Separator::
* Sizegrip::
* Treeview::
* Ttk Styling::

Widget

* Standard Options::
* Scrollable Widget Options::
* Label Options::
* Compatibility Options::
* Widget States::
* ttk.Widget: ttk Widget.

Combobox

* Options::
* Virtual events::
* ttk.Combobox: ttk Combobox.

Notebook

* Options: Options<2>.
* Tab Options::
* Tab Identifiers::
* Virtual Events::
* ttk.Notebook: ttk Notebook.

Progressbar

* Options: Options<3>.
* ttk.Progressbar: ttk Progressbar.

Separator

* Options: Options<4>.

Sizegrip

* Platform-specific notes::
* Bugs::

Treeview

* Options: Options<5>.
* Item Options::
* Tag Options::
* Column Identifiers::
* Virtual Events: Virtual Events<2>.
* ttk.Treeview: ttk Treeview.

Ttk Styling

* Layouts::

Tix --- Extension widgets for Tk

* Using Tix::
* Tix Widgets::
* Tix Commands::

Tix Widgets

* Basic Widgets::
* File Selectors::
* Hierarchical ListBox::
* Tabular ListBox::
* Manager Widgets::
* Image Types::
* Miscellaneous Widgets::
* Form Geometry Manager::

turtle --- Turtle graphics for Tk

* Introduction: Introduction<9>.
* Overview over available Turtle and Screen methods::
* Methods of RawTurtle/Turtle and corresponding functions::
* Methods of TurtleScreen/Screen and corresponding functions::
* The public classes of the module turtle::
* Help and configuration::
* Demo scripts::

Overview over available Turtle and Screen methods

* Turtle methods::
* Methods of TurtleScreen/Screen::

Methods of RawTurtle/Turtle and corresponding functions

* Turtle motion::
* Tell Turtle's state::
* Settings for measurement::
* Pen control::
* Turtle state::
* Using events::
* Special Turtle methods::
* Excursus about the use of compound shapes::

Pen control

* Drawing state::
* Color control::
* Filling::
* More drawing control::

Turtle state

* Visibility::
* Appearance::

Methods of TurtleScreen/Screen and corresponding functions

* Window control::
* Animation control::
* Using screen events::
* Settings and special methods::
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen.

Help and configuration

* How to use help::
* Translation of docstrings into different languages::
* How to configure Screen and Turtles::

IDLE

* Menus::
* Basic editing and navigation::
* Syntax colors::
* Startup::

Menus

* File menu::
* Edit menu::
* Windows menu::
* Debug menu::
* Edit context menu::
* Shell context menu::

Basic editing and navigation

* Automatic indentation::
* Python Shell window::

Startup

* Command line usage::

Development Tools

* pydoc: pydoc --- Documentation generator and online help system. Documentation generator and online help system
* doctest: doctest --- Test interactive Python examples. Test interactive Python examples
* unittest: unittest --- Unit testing framework. Unit testing framework
* 2to3 - Automated Python 2 to 3 code translation::
* test: test --- Regression tests package for Python. Regression tests package for Python
* test.test_support: test test_support --- Utility functions for tests. Utility functions for tests

doctest --- Test interactive Python examples

* Simple Usage; Checking Examples in Docstrings: Simple Usage Checking Examples in Docstrings.
* Simple Usage; Checking Examples in a Text File: Simple Usage Checking Examples in a Text File.
* How It Works::
* Basic API::
* Unittest API::
* Advanced API::
* Debugging::
* Soapbox::

How It Works

* Which Docstrings Are Examined?::
* How are Docstring Examples Recognized?::
* What's the Execution Context?::
* What About Exceptions?::
* Option Flags::
* Directives::
* Warnings::

Advanced API

* DocTest Objects::
* Example Objects::
* DocTestFinder objects::
* DocTestParser objects::
* DocTestRunner objects::
* OutputChecker objects::

unittest --- Unit testing framework

* Basic example::
* Command-Line Interface::
* Test Discovery::
* Organizing test code::
* Re-using old test code::
* Skipping tests and expected failures::
* Classes and functions::
* Class and Module Fixtures::
* Signal Handling::

Command-Line Interface

* Command-line options::

Classes and functions

* Test cases::
* Grouping tests::
* Loading and running tests::

Test cases

* Deprecated aliases::

Loading and running tests

* load_tests Protocol::

Class and Module Fixtures

* setUpClass and tearDownClass::
* setUpModule and tearDownModule::

2to3 - Automated Python 2 to 3 code translation

* Using 2to3::
* Fixers::
* lib2to3 - 2to3's library::

test --- Regression tests package for Python

* Writing Unit Tests for the test package::
* Running tests using the command-line interface::

Debugging and Profiling

* bdb: bdb --- Debugger framework. Debugger framework
* pdb: pdb --- The Python Debugger. The Python Debugger
* Debugger Commands::
* The Python Profilers::
* hotshot: hotshot --- High performance logging profiler. High performance logging profiler
* timeit: timeit --- Measure execution time of small code snippets. Measure execution time of small code snippets
* trace: trace --- Trace or track Python statement execution. Trace or track Python statement execution

The Python Profilers

* Introduction to the profilers::
* Instant User's Manual::
* profile and cProfile Module Reference::
* The Stats Class::
* What Is Deterministic Profiling?::
* Limitations::
* Calibration::
* Using a customer timer::

hotshot --- High performance logging profiler

* Profile Objects::
* Using hotshot data::
* Example Usage::

timeit --- Measure execution time of small code snippets

* Basic Examples: Basic Examples<2>.
* Python Interface::
* Command-Line Interface: Command-Line Interface<2>.
* Examples: Examples<17>.

trace --- Trace or track Python statement execution

* Command-Line Usage::
* Programmatic Interface::

Command-Line Usage

* Main options::
* Modifiers::
* Filters::

Python Runtime Services

* sys: sys --- System-specific parameters and functions. System-specific parameters and functions
* sysconfig: sysconfig --- Provide access to Python's configuration information. Provide access to Python's configuration information
* __builtin__: __builtin__ --- Built-in objects. Built-in objects
* future_builtins: future_builtins --- Python 3 builtins. Python 3 builtins
* __main__: __main__ --- Top-level script environment. Top-level script environment
* warnings: warnings --- Warning control. Warning control
* contextlib: contextlib --- Utilities for with-statement contexts. Utilities for with-statement contexts
* abc: abc --- Abstract Base Classes. Abstract Base Classes
* atexit: atexit --- Exit handlers. Exit handlers
* traceback: traceback --- Print or retrieve a stack traceback. Print or retrieve a stack traceback
* __future__: __future__ --- Future statement definitions. Future statement definitions
* gc: gc --- Garbage Collector interface. Garbage Collector interface
* inspect: inspect --- Inspect live objects. Inspect live objects
* site: site --- Site-specific configuration hook. Site-specific configuration hook
* user: user --- User-specific configuration hook. User-specific configuration hook
* fpectl: fpectl --- Floating point exception control. Floating point exception control
* distutils: distutils --- Building and installing Python modules. Building and installing Python modules

sysconfig --- Provide access to Python's configuration information

* Configuration variables::
* Installation paths::
* Other functions::

warnings --- Warning control

* Warning Categories::
* The Warnings Filter::
* Temporarily Suppressing Warnings::
* Testing Warnings::
* Updating Code For New Versions of Python::
* Available Functions::
* Available Context Managers::

The Warnings Filter

* Default Warning Filters::

atexit --- Exit handlers

* atexit Example::

traceback --- Print or retrieve a stack traceback

* Traceback Examples::

inspect --- Inspect live objects

* Types and members::
* Retrieving source code::
* Classes and functions: Classes and functions<2>.
* The interpreter stack::

fpectl --- Floating point exception control

* Example: Example<14>.
* Limitations and other considerations::

Custom Python Interpreters

* code: code --- Interpreter base classes. Interpreter base classes
* codeop: codeop --- Compile Python code. Compile Python code

code --- Interpreter base classes

* Interactive Interpreter Objects::
* Interactive Console Objects::

Restricted Execution

* rexec: rexec --- Restricted execution framework. Restricted execution framework
* Bastion: Bastion --- Restricting access to objects. Restricting access to objects

rexec --- Restricted execution framework

* RExec Objects::
* Defining restricted environments::
* An example::

Importing Modules

* imp: imp --- Access the import internals. Access the import internals
* importlib: importlib -- Convenience wrappers for __import__. Convenience wrappers for __import__()
* imputil: imputil --- Import utilities. Import utilities
* zipimport: zipimport --- Import modules from Zip archives. Import modules from Zip archives
* pkgutil: pkgutil --- Package extension utility. Package extension utility
* modulefinder: modulefinder --- Find modules used by a script. Find modules used by a script
* runpy: runpy --- Locating and executing Python modules. Locating and executing Python modules

imp --- Access the import internals

* Examples: Examples<18>.

imputil --- Import utilities

* Examples: Examples<19>.

zipimport --- Import modules from Zip archives

* zipimporter Objects::
* Examples: Examples<20>.

modulefinder --- Find modules used by a script

* Example usage of ModuleFinder::

Python Language Services

* parser: parser --- Access Python parse trees. Access Python parse trees
* ast: ast --- Abstract Syntax Trees. Abstract Syntax Trees
* symtable: symtable --- Access to the compiler's symbol tables. Access to the compiler's symbol tables
* symbol: symbol --- Constants used with Python parse trees. Constants used with Python parse trees
* token: token --- Constants used with Python parse trees. Constants used with Python parse trees
* keyword: keyword --- Testing for Python keywords. Testing for Python keywords
* tokenize: tokenize --- Tokenizer for Python source. Tokenizer for Python source
* tabnanny: tabnanny --- Detection of ambiguous indentation. Detection of ambiguous indentation
* pyclbr: pyclbr --- Python class browser support. Python class browser support
* py_compile: py_compile --- Compile Python source files. Compile Python source files
* compileall: compileall --- Byte-compile Python libraries. Byte-compile Python libraries
* dis: dis --- Disassembler for Python bytecode. Disassembler for Python bytecode
* pickletools: pickletools --- Tools for pickle developers. Tools for pickle developers

parser --- Access Python parse trees

* Creating ST Objects::
* Converting ST Objects::
* Queries on ST Objects::
* Exceptions and Error Handling::
* ST Objects::
* Example; Emulation of compile(): Example Emulation of compile.

ast --- Abstract Syntax Trees

* Node classes::
* Abstract Grammar::
* ast Helpers::

symtable --- Access to the compiler's symbol tables

* Generating Symbol Tables::
* Examining Symbol Tables::

pyclbr --- Python class browser support

* Class Objects: Class Objects<2>.
* Function Objects::

compileall --- Byte-compile Python libraries

* Command-line use::
* Public functions::

dis --- Disassembler for Python bytecode

* Python Bytecode Instructions::

Python compiler package

* The basic interface::
* Limitations: Limitations<2>.
* Python Abstract Syntax::
* Using Visitors to Walk ASTs::
* Bytecode Generation::

Python Abstract Syntax

* AST Nodes::
* Assignment nodes::
* Examples: Examples<21>.

Miscellaneous Services

* formatter: formatter --- Generic output formatting. Generic output formatting

formatter --- Generic output formatting

* The Formatter Interface::
* Formatter Implementations::
* The Writer Interface::
* Writer Implementations::

MS Windows Specific Services

* msilib: msilib --- Read and write Microsoft Installer files. Read and write Microsoft Installer files
* msvcrt: msvcrt -- Useful routines from the MS VC++ runtime. Useful routines from the MS VC++ runtime
* _winreg: _winreg -- Windows registry access. Windows registry access
* winsound: winsound --- Sound-playing interface for Windows. Sound-playing interface for Windows

msilib --- Read and write Microsoft Installer files

* Database Objects: Database Objects<2>.
* View Objects::
* Summary Information Objects::
* Record Objects::
* Errors::
* CAB Objects::
* Directory Objects::
* Features::
* GUI classes::
* Precomputed tables::

msvcrt -- Useful routines from the MS VC++ runtime

* File Operations::
* Console I/O::
* Other Functions::

_winreg -- Windows registry access

* Constants: Constants<5>.
* Registry Handle Objects::

Constants

* HKEY_* Constants::
* Access Rights::
* Value Types::

Access Rights

* 64-bit Specific::

Unix Specific Services

* posix: posix --- The most common POSIX system calls. The most common POSIX system calls
* pwd: pwd --- The password database. The password database
* spwd: spwd --- The shadow password database. The shadow password database
* grp: grp --- The group database. The group database
* crypt: crypt --- Function to check Unix passwords. Function to check Unix passwords
* dl: dl --- Call C functions in shared objects. Call C functions in shared objects
* termios: termios --- POSIX style tty control. POSIX style tty control
* tty: tty --- Terminal control functions. Terminal control functions
* pty: pty --- Pseudo-terminal utilities. Pseudo-terminal utilities
* fcntl: fcntl --- The fcntl and ioctl system calls. The fcntl() and ioctl() system calls
* pipes: pipes --- Interface to shell pipelines. Interface to shell pipelines
* posixfile: posixfile --- File-like objects with locking support. File-like objects with locking support
* resource: resource --- Resource usage information. Resource usage information
* nis: nis --- Interface to Sun's NIS Yellow Pages. Interface to Sun's NIS (Yellow Pages)
* syslog: syslog --- Unix syslog library routines. Unix syslog library routines
* commands: commands --- Utilities for running commands. Utilities for running commands

posix --- The most common POSIX system calls

* Large File Support::
* Notable Module Contents::

dl --- Call C functions in shared objects

* Dl Objects::

termios --- POSIX style tty control

* Example: Example<15>.

pipes --- Interface to shell pipelines

* Template Objects::

resource --- Resource usage information

* Resource Limits::
* Resource Usage::

syslog --- Unix syslog library routines

* Examples: Examples<22>.

Examples

* Simple example::

Mac OS X specific services

* ic: ic --- Access to the Mac OS X Internet Config. Access to the Mac OS X Internet Config
* MacOS: MacOS --- Access to Mac OS interpreter features. Access to Mac OS interpreter features
* macostools: macostools --- Convenience routines for file manipulation. Convenience routines for file manipulation
* findertools: findertools --- The finder's Apple Events interface. The finder's Apple Events interface
* EasyDialogs: EasyDialogs --- Basic Macintosh dialogs. Basic Macintosh dialogs
* FrameWork: FrameWork --- Interactive application framework. Interactive application framework
* autoGIL: autoGIL --- Global Interpreter Lock handling in event loops. Global Interpreter Lock handling in event loops
* Mac OS Toolbox Modules::
* ColorPicker: ColorPicker --- Color selection dialog. Color selection dialog

ic --- Access to the Mac OS X Internet Config

* IC Objects::

EasyDialogs --- Basic Macintosh dialogs

* ProgressBar Objects::

FrameWork --- Interactive application framework

* Application Objects::
* Window Objects: Window Objects<2>.
* ControlsWindow Object::
* ScrolledWindow Object::
* DialogWindow Objects::

Mac OS Toolbox Modules

* Carbon.AE: Carbon AE --- Apple Events. Apple Events
* Carbon.AH: Carbon AH --- Apple Help. Apple Help
* Carbon.App: Carbon App --- Appearance Manager. Appearance Manager
* Carbon.Appearance: Carbon Appearance --- Appearance Manager constants. Appearance Manager constants
* Carbon.CF: Carbon CF --- Core Foundation. Core Foundation
* Carbon.CG: Carbon CG --- Core Graphics. Core Graphics
* Carbon.CarbonEvt: Carbon CarbonEvt --- Carbon Event Manager. Carbon Event Manager
* Carbon.CarbonEvents: Carbon CarbonEvents --- Carbon Event Manager constants. Carbon Event Manager constants
* Carbon.Cm: Carbon Cm --- Component Manager. Component Manager
* Carbon.Components: Carbon Components --- Component Manager constants. Component Manager constants
* Carbon.ControlAccessor: Carbon ControlAccessor --- Control Manager accssors. Control Manager accssors
* Carbon.Controls: Carbon Controls --- Control Manager constants. Control Manager constants
* Carbon.CoreFounation: Carbon CoreFounation --- CoreFounation constants. CoreFounation constants
* Carbon.CoreGraphics: Carbon CoreGraphics --- CoreGraphics constants. CoreGraphics constants
* Carbon.Ctl: Carbon Ctl --- Control Manager. Control Manager
* Carbon.Dialogs: Carbon Dialogs --- Dialog Manager constants. Dialog Manager constants
* Carbon.Dlg: Carbon Dlg --- Dialog Manager. Dialog Manager
* Carbon.Drag: Carbon Drag --- Drag and Drop Manager. Drag and Drop Manager
* Carbon.Dragconst: Carbon Dragconst --- Drag and Drop Manager constants. Drag and Drop Manager constants
* Carbon.Events: Carbon Events --- Event Manager constants. Event Manager constants
* Carbon.Evt: Carbon Evt --- Event Manager. Event Manager
* Carbon.File: Carbon File --- File Manager. File Manager
* Carbon.Files: Carbon Files --- File Manager constants. File Manager constants
* Carbon.Fm: Carbon Fm --- Font Manager. Font Manager
* Carbon.Folder: Carbon Folder --- Folder Manager. Folder Manager
* Carbon.Folders: Carbon Folders --- Folder Manager constants. Folder Manager constants
* Carbon.Fonts: Carbon Fonts --- Font Manager constants. Font Manager constants
* Carbon.Help: Carbon Help --- Help Manager. Help Manager
* Carbon.IBCarbon: Carbon IBCarbon --- Carbon InterfaceBuilder. Carbon InterfaceBuilder
* Carbon.IBCarbonRuntime: Carbon IBCarbonRuntime --- Carbon InterfaceBuilder constants. Carbon InterfaceBuilder constants
* Carbon.Icn: Carbon Icn --- Carbon Icon Manager. Carbon Icon Manager
* Carbon.Icons: Carbon Icons --- Carbon Icon Manager constants. Carbon Icon Manager constants
* Carbon.Launch: Carbon Launch --- Carbon Launch Services. Carbon Launch Services
* Carbon.LaunchServices: Carbon LaunchServices --- Carbon Launch Services constants. Carbon Launch Services constants
* Carbon.List: Carbon List --- List Manager. List Manager
* Carbon.Lists: Carbon Lists --- List Manager constants. List Manager constants
* Carbon.MacHelp: Carbon MacHelp --- Help Manager constants. Help Manager constants
* Carbon.MediaDescr: Carbon MediaDescr --- Parsers and generators for Quicktime Media descriptors. Parsers and generators for Quicktime Media descriptors
* Carbon.Menu: Carbon Menu --- Menu Manager. Menu Manager
* Carbon.Menus: Carbon Menus --- Menu Manager constants. Menu Manager constants
* Carbon.Mlte: Carbon Mlte --- MultiLingual Text Editor. MultiLingual Text Editor
* Carbon.OSA: Carbon OSA --- Carbon OSA Interface. Carbon OSA Interface
* Carbon.OSAconst: Carbon OSAconst --- Carbon OSA Interface constants. Carbon OSA Interface constants
* Carbon.QDOffscreen: Carbon QDOffscreen --- QuickDraw Offscreen constants. QuickDraw Offscreen constants
* Carbon.Qd: Carbon Qd --- QuickDraw. QuickDraw
* Carbon.Qdoffs: Carbon Qdoffs --- QuickDraw Offscreen. QuickDraw Offscreen
* Carbon.Qt: Carbon Qt --- QuickTime. QuickTime
* Carbon.QuickDraw: Carbon QuickDraw --- QuickDraw constants. QuickDraw constants
* Carbon.QuickTime: Carbon QuickTime --- QuickTime constants. QuickTime constants
* Carbon.Res: Carbon Res --- Resource Manager and Handles. Resource Manager and Handles
* Carbon.Resources: Carbon Resources --- Resource Manager and Handles constants. Resource Manager and Handles constants
* Carbon.Scrap: Carbon Scrap --- Scrap Manager. Scrap Manager
* Carbon.Snd: Carbon Snd --- Sound Manager. Sound Manager
* Carbon.Sound: Carbon Sound --- Sound Manager constants. Sound Manager constants
* Carbon.TE: Carbon TE --- TextEdit. TextEdit
* Carbon.TextEdit: Carbon TextEdit --- TextEdit constants. TextEdit constants
* Carbon.Win: Carbon Win --- Window Manager. Window Manager
* Carbon.Windows: Carbon Windows --- Window Manager constants. Window Manager constants

MacPython OSA Modules

* gensuitemodule: gensuitemodule --- Generate OSA stub packages. Generate OSA stub packages
* aetools: aetools --- OSA client support. OSA client support
* aepack: aepack --- Conversion between Python variables and AppleEvent data containers. Conversion between Python variables and AppleEvent
                        data containers
* aetypes: aetypes --- AppleEvent objects. AppleEvent objects
* MiniAEFrame: MiniAEFrame --- Open Scripting Architecture server support. Open Scripting Architecture server support

MiniAEFrame --- Open Scripting Architecture server support

* AEServer Objects::

SGI IRIX Specific Services

* al: al --- Audio functions on the SGI. Audio functions on the SGI
* AL: AL --- Constants used with the al module. Constants used with the al module
* cd: cd --- CD-ROM access on SGI systems. CD-ROM access on SGI systems
* fl: fl --- FORMS library for graphical user interfaces. FORMS library for graphical user interfaces
* FL: FL --- Constants used with the fl module. Constants used with the fl module
* flp: flp --- Functions for loading stored FORMS designs. Functions for loading stored FORMS designs
* fm: fm --- Font Manager interface. Font Manager interface
* gl: gl --- Graphics Library interface. Graphics Library interface
* DEVICE: DEVICE --- Constants used with the gl module. Constants used with the gl module
* GL: GL --- Constants used with the gl module. Constants used with the gl module
* imgfile: imgfile --- Support for SGI imglib files. Support for SGI imglib files
* jpeg: jpeg --- Read and write JPEG files. Read and write JPEG files

al --- Audio functions on the SGI

* Configuration Objects::
* Port Objects::

cd --- CD-ROM access on SGI systems

* Player Objects::
* Parser Objects::

fl --- FORMS library for graphical user interfaces

* Functions Defined in Module fl::
* Form Objects::
* FORMS Objects::

SunOS Specific Services

* sunaudiodev: sunaudiodev --- Access to Sun audio hardware. Access to Sun audio hardware
* SUNAUDIODEV: SUNAUDIODEV --- Constants used with sunaudiodev. Constants used with sunaudiodev

sunaudiodev --- Access to Sun audio hardware

* Audio Device Objects: Audio Device Objects<2>.

Undocumented Modules

* Miscellaneous useful utilities::
* Platform specific modules::
* Multimedia::
* Undocumented Mac OS modules::
* Obsolete::
* SGI-specific Extension modules::

Undocumented Mac OS modules

* applesingle: applesingle --- AppleSingle decoder. AppleSingle decoder
* buildtools: buildtools --- Helper module for BuildApplet and Friends. Helper module for BuildApplet and Friends
* cfmfile: cfmfile --- Code Fragment Resource module. Code Fragment Resource module
* icopen: icopen --- Internet Config replacement for open. Internet Config replacement for open()
* macerrors: macerrors --- Mac OS Errors. Mac OS Errors
* macresource: macresource --- Locate script resources. Locate script resources
* Nav: Nav --- NavServices calls. NavServices calls
* PixMapWrapper: PixMapWrapper --- Wrapper for PixMap objects. Wrapper for PixMap objects
* videoreader: videoreader --- Read QuickTime movies. Read QuickTime movies
* W: W --- Widgets built on FrameWork. Widgets built on FrameWork

Extending and Embedding the Python Interpreter

* Extending Python with C or C++::
* Defining New Types::
* Building C and C++ Extensions with distutils::
* Building C and C++ Extensions on Windows::
* Embedding Python in Another Application::

Extending Python with C or C++

* A Simple Example::
* Intermezzo; Errors and Exceptions: Intermezzo Errors and Exceptions.
* Back to the Example::
* The Module's Method Table and Initialization Function::
* Compilation and Linkage::
* Calling Python Functions from C::
* Extracting Parameters in Extension Functions::
* Keyword Parameters for Extension Functions::
* Building Arbitrary Values::
* Reference Counts::
* Writing Extensions in C++::
* Providing a C API for an Extension Module::

Reference Counts

* Reference Counting in Python::
* Ownership Rules::
* Thin Ice::
* NULL Pointers::

Defining New Types

* The Basics::
* Type Methods::

The Basics

* Adding data and methods to the Basic example::
* Providing finer control over data attributes::
* Supporting cyclic garbage collection::
* Subclassing other types::

Type Methods

* Finalization and De-allocation::
* Object Presentation::
* Attribute Management::
* Object Comparison::
* Abstract Protocol Support::
* Weak Reference Support::
* More Suggestions::

Attribute Management

* Generic Attribute Management::
* Type-specific Attribute Management::

Building C and C++ Extensions with distutils

* Distributing your extension modules::

Building C and C++ Extensions on Windows

* A Cookbook Approach::
* Differences Between Unix and Windows::
* Using DLLs in Practice::

Embedding Python in Another Application

* Very High Level Embedding::
* Beyond Very High Level Embedding; An overview: Beyond Very High Level Embedding An overview.
* Pure Embedding::
* Extending Embedded Python::
* Embedding Python in C++::
* Linking Requirements::

Python/C API Reference Manual

* Introduction: Introduction<10>.
* The Very High Level Layer::
* Reference Counting::
* Exception Handling::
* Utilities::
* Abstract Objects Layer::
* Concrete Objects Layer::
* Initialization, Finalization, and Threads: Initialization Finalization and Threads.
* Memory Management::
* Object Implementation Support::

Introduction

* Include Files::
* Objects, Types and Reference Counts: Objects Types and Reference Counts.
* Exceptions: Exceptions<7>.
* Embedding Python::
* Debugging Builds::

Objects, Types and Reference Counts

* Reference Counts: Reference Counts<2>.
* Types::

Reference Counts

* Reference Count Details::

Exception Handling

* Unicode Exception Objects::
* Recursion Control::
* Standard Exceptions::
* String Exceptions::

Utilities

* Operating System Utilities::
* System Functions::
* Process Control::
* Importing Modules: Importing Modules<2>.
* Data marshalling support::
* Parsing arguments and building values::
* String conversion and formatting::
* Reflection::
* Codec registry and support functions::

Codec registry and support functions

* Codec lookup API::
* Registry API for Unicode encoding error handlers::

Abstract Objects Layer

* Object Protocol::
* Number Protocol::
* Sequence Protocol::
* Mapping Protocol::
* Iterator Protocol::
* Old Buffer Protocol::

Concrete Objects Layer

* Fundamental Objects::
* Numeric Objects::
* Sequence Objects::
* Mapping Objects::
* Other Objects::

Fundamental Objects

* Type Objects: Type Objects<2>.
* The None Object::

Numeric Objects

* Plain Integer Objects::
* Boolean Objects: Boolean Objects<2>.
* Long Integer Objects::
* Floating Point Objects::
* Complex Number Objects::

Complex Number Objects

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::

Sequence Objects

* Byte Array Objects::
* String/Bytes Objects::
* Unicode Objects and Codecs::
* Buffers and Memoryview Objects::
* Tuple Objects::
* List Objects::

Byte Array Objects

* Type check macros::
* Direct API functions::
* Macros::

Unicode Objects and Codecs

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::

Buffers and Memoryview Objects

* The new-style Py_buffer struct::
* Buffer related functions::
* MemoryView objects::
* Old-style buffer objects::

Mapping Objects

* Dictionary Objects::

Other Objects

* Class and Instance Objects::
* Function Objects: Function Objects<2>.
* Method Objects: Method Objects<2>.
* File Objects: File Objects<2>.
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* Weak Reference Objects: Weak Reference Objects<2>.
* Capsules: Capsules<2>.
* CObjects::
* Cell Objects::
* Generator Objects::
* DateTime Objects: DateTime Objects<2>.
* Set Objects: Set Objects<2>.
* Code Objects: Code Objects<2>.

Initialization, Finalization, and Threads

* Initializing and finalizing the interpreter::
* Process-wide parameters::
* Thread State and the Global Interpreter Lock::
* Sub-interpreter support::
* Asynchronous Notifications::
* Profiling and Tracing::
* Advanced Debugger Support::

Thread State and the Global Interpreter Lock

* Releasing the GIL from extension code::
* Non-Python created threads::
* High-level API::
* Low-level API::

Sub-interpreter support

* Bugs and caveats::

Memory Management

* Overview::
* Memory Interface::
* Examples: Examples<23>.

Object Implementation Support

* Allocating Objects on the Heap::
* Common Object Structures::
* Type Objects: Type Objects<3>.
* Number Object Structures::
* Mapping Object Structures::
* Sequence Object Structures::
* Buffer Object Structures::
* Supporting Cyclic Garbage Collection::

Distributing Python Modules

* An Introduction to Distutils::
* Writing the Setup Script::
* Writing the Setup Configuration File::
* Creating a Source Distribution::
* Creating Built Distributions::
* The Python Package Index (PyPI): The Python Package Index PyPI.
* Examples: Examples<24>.
* Extending Distutils::
* Command Reference::
* API Reference::

An Introduction to Distutils

* Concepts & Terminology::
* A Simple Example: A Simple Example<2>.
* General Python terminology::
* Distutils-specific terminology::

Writing the Setup Script

* Listing whole packages::
* Listing individual modules::
* Describing extension modules::
* Relationships between Distributions and Packages::
* Installing Scripts::
* Installing Package Data::
* Installing Additional Files::
* Additional meta-data::
* Debugging the setup script::

Describing extension modules

* Extension names and packages::
* Extension source files::
* Preprocessor options::
* Library options::
* Other options::

Creating a Source Distribution

* Specifying the files to distribute::
* Manifest-related options::
* The MANIFEST.in template: The MANIFEST in template.

The MANIFEST.in template

* Principle::
* Commands::

Creating Built Distributions

* Creating dumb built distributions::
* Creating RPM packages::
* Creating Windows Installers::
* Cross-compiling on Windows::
* Vista User Access Control (UAC): Vista User Access Control UAC.

Cross-compiling on Windows

* The Postinstallation script::

The Python Package Index (PyPI)

* Registering Packages::
* Uploading Packages::
* The .pypirc file: The pypirc file.
* PyPI package display::

Examples

* Pure Python distribution (by module): Pure Python distribution by module.
* Pure Python distribution (by package): Pure Python distribution by package.
* Single extension module::

Extending Distutils

* Integrating new commands::
* Adding new distribution types::

Command Reference

* Installing modules; the install command family: Installing modules the install command family.

Installing modules: the install command family

* install_data::
* install_scripts::

API Reference

* distutils.core: distutils core --- Core Distutils functionality. Core Distutils functionality
* distutils.ccompiler: distutils ccompiler --- CCompiler base class. CCompiler base class
* distutils.unixccompiler: distutils unixccompiler --- Unix C Compiler. Unix C Compiler
* distutils.msvccompiler: distutils msvccompiler --- Microsoft Compiler. Microsoft Compiler
* distutils.bcppcompiler: distutils bcppcompiler --- Borland Compiler. Borland Compiler
* distutils.cygwincompiler: distutils cygwincompiler --- Cygwin Compiler. Cygwin Compiler
* distutils.emxccompiler: distutils emxccompiler --- OS/2 EMX Compiler. OS/2 EMX Compiler
* distutils.archive_util: distutils archive_util --- Archiving utilities. Archiving utilities
* distutils.dep_util: distutils dep_util --- Dependency checking. Dependency checking
* distutils.dir_util: distutils dir_util --- Directory tree operations. Directory tree operations
* distutils.file_util: distutils file_util --- Single file operations. Single file operations
* distutils.util: distutils util --- Miscellaneous other utility functions. Miscellaneous other utility functions
* distutils.dist: distutils dist --- The Distribution class. The Distribution class
* distutils.extension: distutils extension --- The Extension class. The Extension class
* distutils.debug: distutils debug --- Distutils debug mode. Distutils debug mode
* distutils.errors: distutils errors --- Distutils exceptions. Distutils exceptions
* distutils.fancy_getopt: distutils fancy_getopt --- Wrapper around the standard getopt module. Wrapper around the standard getopt module
* distutils.filelist: distutils filelist --- The FileList class. The FileList class
* distutils.log: distutils log --- Simple PEP 282-style logging. Simple PEP 282-style logging
* distutils.spawn: distutils spawn --- Spawn a sub-process. Spawn a sub-process
* distutils.sysconfig: distutils sysconfig --- System configuration information. System configuration information
* distutils.text_file: distutils text_file --- The TextFile class. The TextFile class
* distutils.version: distutils version --- Version number classes. Version number classes
* distutils.cmd: distutils cmd --- Abstract base class for Distutils commands. Abstract base class for Distutils commands
* Creating a new Distutils command::
* distutils.command: distutils command --- Individual Distutils commands. Individual Distutils commands
* distutils.command.bdist: distutils command bdist --- Build a binary installer. Build a binary installer
* distutils.command.bdist_packager: distutils command bdist_packager --- Abstract base class for packagers. Abstract base class for packagers
* distutils.command.bdist_dumb: distutils command bdist_dumb --- Build a "dumb" installer. Build a "dumb" installer
* distutils.command.bdist_msi: distutils command bdist_msi --- Build a Microsoft Installer binary package. Build a Microsoft Installer binary package
* distutils.command.bdist_rpm: distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: distutils command bdist_wininst --- Build a Windows installer. Build a Windows installer
* distutils.command.sdist: distutils command sdist --- Build a source distribution. Build a source distribution
* distutils.command.build: distutils command build --- Build all files of a package. Build all files of a package
* distutils.command.build_clib: distutils command build_clib --- Build any C libraries in a package. Build any C libraries in a package
* distutils.command.build_ext: distutils command build_ext --- Build any extensions in a package. Build any extensions in a package
* distutils.command.build_py: distutils command build_py --- Build the py/ pyc files of a package. Build the .py/.pyc files of a package
* distutils.command.build_scripts: distutils command build_scripts --- Build the scripts of a package. Build the scripts of a package
* distutils.command.clean: distutils command clean --- Clean a package build area. Clean a package build area
* distutils.command.config: distutils command config --- Perform package configuration. Perform package configuration
* distutils.command.install: distutils command install --- Install a package. Install a package
* distutils.command.install_data: distutils command install_data --- Install data files from a package. Install data files from a package
* distutils.command.install_headers: distutils command install_headers --- Install C/C++ header files from a package. Install C/C++ header files from a package
* distutils.command.install_lib: distutils command install_lib --- Install library files from a package. Install library files from a package
* distutils.command.install_scripts: distutils command install_scripts --- Install script files from a package. Install script files from a package
* distutils.command.register: distutils command register --- Register a module with the Python Package Index. Register a module with the Python Package Index
* distutils.command.check: distutils command check --- Check the meta-data of a package. Check the meta-data of a package

Installing Python Modules

* Introduction: Introduction<11>.
* Standard Build and Install::
* Alternate Installation::
* Custom Installation::
* Distutils Configuration Files::
* Building Extensions; Tips and Tricks: Building Extensions Tips and Tricks.

Introduction

* Best case; trivial installation: Best case trivial installation.
* The new standard; Distutils: The new standard Distutils.

Standard Build and Install

* Platform variations::
* Splitting the job up::
* How building works::
* How installation works::

Alternate Installation

* Alternate installation; the user scheme: Alternate installation the user scheme.
* Alternate installation; the home scheme: Alternate installation the home scheme.
* Alternate installation; Unix (the prefix scheme): Alternate installation Unix the prefix scheme.
* Alternate installation; Windows (the prefix scheme): Alternate installation Windows the prefix scheme.

Custom Installation

* Modifying Python's Search Path::

Distutils Configuration Files

* Location and names of config files::
* Syntax of config files::

Building Extensions: Tips and Tricks

* Tweaking compiler/linker flags::
* Using non-Microsoft compilers on Windows::

Using non-Microsoft compilers on Windows

* Borland/CodeGear C++::
* GNU C / Cygwin / MinGW::

GNU C / Cygwin / MinGW

* Older Versions of Python and MinGW::

Python HOWTOs

* Porting Python 2 Code to Python 3::
* Porting Extension Modules to Python 3::
* Curses Programming with Python::
* Descriptor HowTo Guide::
* Idioms and Anti-Idioms in Python::
* Functional Programming HOWTO::
* Logging HOWTO::
* Logging Cookbook::
* Regular Expression HOWTO::
* Socket Programming HOWTO::
* Sorting HOW TO::
* Unicode HOWTO::
* HOWTO Fetch Internet Resources Using urllib2::
* HOWTO Use Python in the web::
* Argparse Tutorial::

Porting Python 2 Code to Python 3

* Choosing a Strategy::
* Python 3 and 3to2::
* Python 2 and 2to3::
* Python 2/3 Compatible Source::
* Other Resources: Other Resources<2>.

Choosing a Strategy

* Universal Bits of Advice::

Python 2 and 2to3

* Support Python 2.7: Support Python 2 7.
* Try to Support Python 2.6 and Newer Only: Try to Support Python 2 6 and Newer Only.
* Supporting Python 2.5 and Newer Only: Supporting Python 2 5 and Newer Only.
* Handle Common "Gotchas"::
* Eliminate -3 Warnings::
* Run 2to3::
* Verify & Test::

Try to Support Python 2.6 and Newer Only

* from __future__ import print_function::
* from __future__ import unicode_literals::
* Bytes literals::

Supporting Python 2.5 and Newer Only

* from __future__ import absolute_import::

Handle Common "Gotchas"

* from __future__ import division::
* Specify when opening a file as binary::
* Text files::
* Subclass object::
* Deal With the Bytes/String Dichotomy::
* Indexing bytes objects::
* __str__()/__unicode__(): __str__ /__unicode__.
* Don't Index on Exceptions::
* Don't use __getslice__ & Friends::
* Updating doctests::

Deal With the Bytes/String Dichotomy

* Mark Up Python 2 String Literals::
* Decide what APIs Will Accept::
* Bytes / Unicode Comparison::

Run 2to3

* Manually::
* During Installation::

Python 2/3 Compatible Source

* Follow The Steps for Using 2to3::
* Use six::
* Capturing the Currently Raised Exception::

Porting Extension Modules to Python 3

* Conditional compilation::
* Changes to Object APIs::
* Module initialization and state::
* CObject replaced with Capsule::
* Other options: Other options<2>.

Changes to Object APIs

* str/unicode Unification::
* long/int Unification::

Curses Programming with Python

* What is curses?::
* Starting and ending a curses application::
* Windows and Pads::
* Displaying Text::
* User Input::
* For More Information::

What is curses?

* The Python curses module::

Displaying Text

* Attributes and Color::

Descriptor HowTo Guide

* Abstract::
* Definition and Introduction::
* Descriptor Protocol::
* Invoking Descriptors: Invoking Descriptors<2>.
* Descriptor Example::
* Properties::
* Functions and Methods::
* Static Methods and Class Methods::

Idioms and Anti-Idioms in Python

* Language Constructs You Should Not Use::
* Exceptions: Exceptions<8>.
* Using the Batteries::
* Using Backslash to Continue Statements::

Language Constructs You Should Not Use

* from module import *::
* Unadorned exec, execfile() and friends: Unadorned exec execfile and friends.
* from module import name1, name2: from module import name1 name2.
* except;: except.

from module import *

* Inside Function Definitions::
* At Module Level::
* When It Is Just Fine::

Functional Programming HOWTO

* Introduction: Introduction<12>.
* Iterators: Iterators<2>.
* Generator expressions and list comprehensions::
* Generators: Generators<2>.
* Built-in functions::
* Small functions and the lambda expression::
* The itertools module::
* The functools module::
* Revision History and Acknowledgements::
* References::

Introduction

* Formal provability::
* Modularity::
* Ease of debugging and testing::
* Composability::

Iterators

* Data Types That Support Iterators::

Generators

* Passing values into a generator::

The itertools module

* Creating new iterators::
* Calling functions on elements::
* Selecting elements::
* Grouping elements::

The functools module

* The operator module::

References

* General::
* Python-specific::
* Python documentation::

Logging HOWTO

* Basic Logging Tutorial::
* Advanced Logging Tutorial::
* Logging Levels::
* Useful Handlers::
* Exceptions raised during logging::
* Using arbitrary objects as messages::
* Optimization::

Basic Logging Tutorial

* When to use logging::
* A simple example::
* Logging to a file::
* Logging from multiple modules::
* Logging variable data::
* Changing the format of displayed messages::
* Displaying the date/time in messages::
* Next Steps::

Advanced Logging Tutorial

* Logging Flow::
* Loggers::
* Handlers::
* Formatters::
* Configuring Logging::
* What happens if no configuration is provided::
* Configuring Logging for a Library::

Logging Levels

* Custom Levels::

Logging Cookbook

* Using logging in multiple modules::
* Multiple handlers and formatters::
* Logging to multiple destinations::
* Configuration server example::
* Sending and receiving logging events across a network::
* Adding contextual information to your logging output::
* Logging to a single file from multiple processes::
* Using file rotation::
* An example dictionary-based configuration::
* Inserting a BOM into messages sent to a SysLogHandler::
* Implementing structured logging::

Adding contextual information to your logging output

* Using LoggerAdapters to impart contextual information::
* Using Filters to impart contextual information::

Regular Expression HOWTO

* Introduction: Introduction<13>.
* Simple Patterns::
* Using Regular Expressions::
* More Pattern Power::
* Modifying Strings::
* Common Problems::
* Feedback::

Simple Patterns

* Matching Characters::
* Repeating Things::

Using Regular Expressions

* Compiling Regular Expressions::
* The Backslash Plague::
* Performing Matches::
* Module-Level Functions: Module-Level Functions<2>.
* Compilation Flags::

More Pattern Power

* More Metacharacters::
* Grouping::
* Non-capturing and Named Groups::
* Lookahead Assertions::

Modifying Strings

* Splitting Strings::
* Search and Replace::

Common Problems

* Use String Methods::
* match() versus search(): match versus search.
* Greedy versus Non-Greedy::
* Using re.VERBOSE: Using re VERBOSE.

Socket Programming HOWTO

* Sockets::
* Creating a Socket::
* Using a Socket::
* Disconnecting::
* Non-blocking Sockets::

Sockets

* History::

Creating a Socket

* IPC::

Using a Socket

* Binary Data::

Disconnecting

* When Sockets Die::

Non-blocking Sockets

* Performance: Performance<2>.

Sorting HOW TO

* Sorting Basics::
* Key Functions::
* Operator Module Functions::
* Ascending and Descending::
* Sort Stability and Complex Sorts::
* The Old Way Using Decorate-Sort-Undecorate::
* The Old Way Using the cmp Parameter::
* Odd and Ends::

Unicode HOWTO

* Introduction to Unicode::
* Python 2.x's Unicode Support: Python 2 x's Unicode Support.
* Reading and Writing Unicode Data::
* Revision History and Acknowledgements: Revision History and Acknowledgements<2>.

Introduction to Unicode

* History of Character Codes::
* Definitions::
* Encodings::
* References: References<2>.

Python 2.x's Unicode Support

* The Unicode Type::
* Unicode Literals in Python Source Code::
* Unicode Properties::
* References: References<3>.

Reading and Writing Unicode Data

* Unicode filenames::
* Tips for Writing Unicode-aware Programs::
* References: References<4>.

HOWTO Fetch Internet Resources Using urllib2

* Introduction: Introduction<14>.
* Fetching URLs::
* Handling Exceptions: Handling Exceptions<2>.
* info and geturl::
* Openers and Handlers::
* Basic Authentication::
* Proxies::
* Sockets and Layers::
* Footnotes::

Fetching URLs

* Data::
* Headers::

Handling Exceptions

* URLError::
* HTTPError::
* Wrapping it Up::

HTTPError

* Error Codes::

Wrapping it Up

* Number 1::
* Number 2::

HOWTO Use Python in the web

* The Low-Level View::
* Step back; WSGI: Step back WSGI.
* Model-View-Controller::
* Ingredients for Websites::
* Frameworks::

The Low-Level View

* Common Gateway Interface::
* mod_python::
* FastCGI and SCGI::
* mod_wsgi::

Common Gateway Interface

* Simple script for testing CGI::
* Setting up CGI on your own server::
* Common problems with CGI scripts::

FastCGI and SCGI

* Setting up FastCGI::

Step back: WSGI

* WSGI Servers::
* Case study; MoinMoin: Case study MoinMoin.

Ingredients for Websites

* Templates::
* Data persistence::

Frameworks

* Some notable frameworks::

Some notable frameworks

* Django::
* TurboGears::
* Zope::
* Other notable frameworks::

Argparse Tutorial

* Concepts::
* The basics::
* Introducing Positional arguments::
* Introducing Optional arguments::
* Combining Positional and Optional arguments::
* Getting a little more advanced::
* Conclusion::

Introducing Optional arguments

* Short options::

Getting a little more advanced

* Conflicting options::

Python Frequently Asked Questions

* General Python FAQ::
* Programming FAQ::
* Design and History FAQ::
* Library and Extension FAQ::
* Extending/Embedding FAQ::
* Python on Windows FAQ::
* Graphic User Interface FAQ::
* "Why is Python Installed on my Computer?" FAQ::

General Python FAQ

* General Information::
* Python in the real world::
* Upgrading Python::

General Information

* What is Python?::
* What is the Python Software Foundation?::
* Are there copyright restrictions on the use of Python?::
* Why was Python created in the first place?::
* What is Python good for?::
* How does the Python version numbering scheme work?::
* How do I obtain a copy of the Python source?::
* How do I get documentation on Python?::
* I've never programmed before. Is there a Python tutorial?: I've never programmed before Is there a Python tutorial?.
* Is there a newsgroup or mailing list devoted to Python?::
* How do I get a beta test version of Python?::
* How do I submit bug reports and patches for Python?::
* Are there any published articles about Python that I can reference?::
* Are there any books on Python?::
* Where in the world is www.python.org located?: Where in the world is www python org located?.
* Why is it called Python?::
* Do I have to like "Monty Python's Flying Circus"?::

Python in the real world

* How stable is Python?::
* How many people are using Python?::
* Have any significant projects been done in Python?::
* What new developments are expected for Python in the future?::
* Is it reasonable to propose incompatible changes to Python?::
* Is Python Y2K (Year 2000) Compliant?: Is Python Y2K Year 2000 Compliant?.
* Is Python a good language for beginning programmers?::

Upgrading Python

* What is this bsddb185 module my application keeps complaining about?::

Programming FAQ

* General Questions::
* Core Language::
* Numbers and strings::
* Sequences (Tuples/Lists): Sequences Tuples/Lists.
* Dictionaries: Dictionaries<2>.
* Objects::
* Modules: Modules<3>.

General Questions

* Is there a source code level debugger with breakpoints, single-stepping, etc.?: Is there a source code level debugger with breakpoints single-stepping etc ?.
* Is there a tool to help find bugs or perform static analysis?::
* How can I create a stand-alone binary from a Python script?::
* Are there coding standards or a style guide for Python programs?::
* My program is too slow. How do I speed it up?: My program is too slow How do I speed it up?.

Core Language

* Why am I getting an UnboundLocalError when the variable has a value?::
* What are the rules for local and global variables in Python?::
* Why do lambdas defined in a loop with different values all return the same result?::
* How do I share global variables across modules?::
* What are the "best practices" for using import in a module?::
* How can I pass optional or keyword parameters from one function to another?::
* What is the difference between arguments and parameters?::
* How do I write a function with output parameters (call by reference)?: How do I write a function with output parameters call by reference ?.
* How do you make a higher order function in Python?::
* How do I copy an object in Python?::
* How can I find the methods or attributes of an object?::
* How can my code discover the name of an object?::
* What's up with the comma operator's precedence?::
* Is there an equivalent of C's "?;" ternary operator?: Is there an equivalent of C's "? " ternary operator?.
* Is it possible to write obfuscated one-liners in Python?::

Numbers and strings

* How do I specify hexadecimal and octal integers?::
* Why does -22 // 10 return -3?::
* How do I convert a string to a number?::
* How do I convert a number to a string?::
* How do I modify a string in place?::
* How do I use strings to call functions/methods?::
* Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?: Is there an equivalent to Perl's chomp for removing trailing newlines from strings?.
* Is there a scanf() or sscanf() equivalent?: Is there a scanf or sscanf equivalent?.
* What does 'UnicodeError; ASCII [decoding,encoding] error; ordinal not in range(128)' mean?: What does 'UnicodeError ASCII [decoding encoding] error ordinal not in range 128 ' mean?.

Sequences (Tuples/Lists)

* How do I convert between tuples and lists?::
* What's a negative index?::
* How do I iterate over a sequence in reverse order?::
* How do you remove duplicates from a list?::
* How do you make an array in Python?::
* How do I create a multidimensional list?::
* How do I apply a method to a sequence of objects?::

Dictionaries

* How can I get a dictionary to display its keys in a consistent order?::
* I want to do a complicated sort; can you do a Schwartzian Transform in Python?: I want to do a complicated sort can you do a Schwartzian Transform in Python?.
* How can I sort one list by values from another list?::

Objects

* What is a class?::
* What is a method?::
* What is self?::
* How do I check if an object is an instance of a given class or of a subclass of it?::
* What is delegation?::
* How do I call a method defined in a base class from a derived class that overrides it?::
* How can I organize my code to make it easier to change the base class?::
* How do I create static class data and static class methods?::
* How can I overload constructors (or methods) in Python?: How can I overload constructors or methods in Python?.
* I try to use __spam and I get an error about _SomeClassName__spam.: I try to use __spam and I get an error about _SomeClassName__spam.
* My class defines __del__ but it is not called when I delete the object.: My class defines __del__ but it is not called when I delete the object.
* How do I get a list of all instances of a given class?::

Modules

* How do I create a .pyc file?: How do I create a pyc file?.
* How do I find the current module name?::
* How can I have modules that mutually import each other?::
* __import__('x.y.z') returns <module 'x'>; how do I get z?: __import__ 'x y z' returns <module 'x'>; how do I get z?.
* When I edit an imported module and reimport it, the changes don't show up. Why does this happen?: When I edit an imported module and reimport it the changes don't show up Why does this happen?.

Design and History FAQ

* Why does Python use indentation for grouping of statements?::
* Why am I getting strange results with simple arithmetic operations?::
* Why are floating point calculations so inaccurate?::
* Why are Python strings immutable?::
* Why must 'self' be used explicitly in method definitions and calls?::
* Why can't I use an assignment in an expression?::
* Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?: Why does Python use methods for some functionality e g list index but functions for other e g len list ?.
* Why is join() a string method instead of a list or tuple method?: Why is join a string method instead of a list or tuple method?.
* How fast are exceptions?::
* Why isn't there a switch or case statement in Python?::
* Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?::
* Why can't lambda forms contain statements?::
* Can Python be compiled to machine code, C or some other language?: Can Python be compiled to machine code C or some other language?.
* How does Python manage memory?::
* Why isn't all memory freed when Python exits?::
* Why are there separate tuple and list data types?::
* How are lists implemented?::
* How are dictionaries implemented?::
* Why must dictionary keys be immutable?::
* Why doesn't list.sort() return the sorted list?: Why doesn't list sort return the sorted list?.
* How do you specify and enforce an interface spec in Python?::
* Why are default values shared between objects?::
* Why is there no goto?::
* Why can't raw strings (r-strings) end with a backslash?: Why can't raw strings r-strings end with a backslash?.
* Why doesn't Python have a "with" statement for attribute assignments?::
* Why are colons required for the if/while/def/class statements?::
* Why does Python allow commas at the end of lists and tuples?::

Library and Extension FAQ

* General Library Questions::
* Common tasks::
* Threads::
* Input and Output: Input and Output<2>.
* Network/Internet Programming::
* Databases::
* Mathematics and Numerics::

General Library Questions

* How do I find a module or application to perform task X?::
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?.
* How do I make a Python script executable on Unix?::
* Is there a curses/termcap package for Python?::
* Is there an equivalent to C's onexit() in Python?: Is there an equivalent to C's onexit in Python?.
* Why don't my signal handlers work?::

Common tasks

* How do I test a Python program or component?::
* How do I create documentation from doc strings?::
* How do I get a single keypress at a time?::

Threads

* How do I program using threads?::
* None of my threads seem to run; why?: None of my threads seem to run why?.
* How do I parcel out work among a bunch of worker threads?::
* What kinds of global value mutation are thread-safe?::
* Can't we get rid of the Global Interpreter Lock?::

Input and Output

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions.
* How do I copy a file?::
* How do I read (or write) binary data?: How do I read or write binary data?.
* I can't seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?.
* How do I run a subprocess with pipes connected to both input and output?::
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?.
* Why doesn't closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?.

Network/Internet Programming

* What WWW tools are there for Python?::
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?.
* What module should I use to help with generating HTML?::
* How do I send mail from a Python script?::
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?.

Databases

* Are there any interfaces to database packages in Python?::
* How do you implement persistent objects in Python?::
* Why is cPickle so slow?::
* If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?.
* I tried to open Berkeley DB file, but bsddb produces bsddb.error; (22, 'Invalid argument'). Help! How can I restore my data?: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?.

Mathematics and Numerics

* How do I generate random numbers in Python?::

Extending/Embedding FAQ

* Can I create my own functions in C?::
* Can I create my own functions in C++?::
* Writing C is hard; are there any alternatives?::
* How can I execute arbitrary Python statements from C?::
* How can I evaluate an arbitrary Python expression from C?::
* How do I extract C values from a Python object?::
* How do I use Py_BuildValue() to create a tuple of arbitrary length?: How do I use Py_BuildValue to create a tuple of arbitrary length?.
* How do I call an object's method from C?::
* How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?.
* How do I access a module written in Python from C?::
* How do I interface to C++ objects from Python?::
* I added a module using the Setup file and the make fails; why?::
* How do I debug an extension?::
* I want to compile a Python module on my Linux system, but some files are missing. Why?: I want to compile a Python module on my Linux system but some files are missing Why?.
* What does "SystemError; _PyImport_FixupExtension; module yourmodule not loaded" mean?: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?.
* How do I tell "incomplete input" from "invalid input"?::
* How do I find undefined g++ symbols __builtin_new or __pure_virtual?::
* Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?.
* When importing module X, why do I get "undefined symbol; PyUnicodeUCS2*"?: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?.

Python on Windows FAQ

* How do I run a Python program under Windows?::
* How do I make Python scripts executable?::
* Why does Python sometimes take so long to start?::
* How do I make an executable from a Python script?::
* Is a *.pyd file the same as a DLL?: Is a * pyd file the same as a DLL?.
* How can I embed Python into a Windows application?::
* How do I keep editors from inserting tabs into my Python source?::
* How do I check for a keypress without blocking?::
* How do I emulate os.kill() in Windows?: How do I emulate os kill in Windows?.
* How do I extract the downloaded documentation on Windows?::

Graphic User Interface FAQ

* What platform-independent GUI toolkits exist for Python?::
* What platform-specific GUI toolkits exist for Python?::
* Tkinter questions::

What platform-independent GUI toolkits exist for Python?

* Tkinter::
* wxWidgets::
* Qt::
* Gtk+::
* FLTK::
* FOX::
* OpenGL::

Tkinter questions

* How do I freeze Tkinter applications?::
* Can I have Tk events handled while waiting for I/O?::
* I can't get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?.

"Why is Python Installed on my Computer?" FAQ

* What is Python?: What is Python?<2>.
* Why is Python installed on my machine?::
* Can I delete Python?::

About these documents

* Contributors to the Python Documentation::

Reporting Bugs

* Documentation bugs::
* Using the Python issue tracker::

History and License

* History of the software::
* Terms and conditions for accessing or otherwise using Python::
* Licenses and Acknowledgements for Incorporated Software::

Licenses and Acknowledgements for Incorporated Software

* Mersenne Twister::
* Sockets: Sockets<2>.
* Floating point exception control::
* MD5 message digest algorithm::
* Asynchronous socket services::
* Cookie management::
* Execution tracing::
* UUencode and UUdecode functions::
* XML Remote Procedure Calls::
* test_epoll::
* Select kqueue::
* strtod and dtoa::
* OpenSSL::
* expat::
* libffi::
* zlib::


File: python.info,  Node: What's New in Python,  Next: The Python Tutorial,  Prev: Top,  Up: Top

1 What's New in Python
**********************

The "What's New in Python" series of essays takes tours through the most
important changes between major Python versions.  They are a "must
read" for anyone wishing to stay up-to-date after a new release.

* Menu:

* What's New in Python 2.7: What's New in Python 2 7.
* What's New in Python 2.6: What's New in Python 2 6.
* What's New in Python 2.5: What's New in Python 2 5.
* What's New in Python 2.4: What's New in Python 2 4.
* What's New in Python 2.3: What's New in Python 2 3.
* What's New in Python 2.2: What's New in Python 2 2.
* What's New in Python 2.1: What's New in Python 2 1.
* What's New in Python 2.0: What's New in Python 2 0.

What's New in Python 2.7

* The Future for Python 2.x: The Future for Python 2 x.
* Python 3.1 Features: Python 3 1 Features.
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator.
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines.
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging.
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views.
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object.
* Other Language Changes::
* New and Improved Modules::
* Build and C API Changes::
* Other Changes and Fixes::
* Porting to Python 2.7: Porting to Python 2 7.
* Acknowledgements::

Other Language Changes

* Interpreter Changes::
* Optimizations::

New and Improved Modules

* New module; importlib: New module importlib.
* New module; sysconfig: New module sysconfig.
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk.
* Updated module; unittest: Updated module unittest.
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3.

Build and C API Changes

* Capsules::
* Port-Specific Changes; Windows: Port-Specific Changes Windows.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X.
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD.

What's New in Python 2.6

* Python 3.0: Python 3 0.
* Changes to the Development Process::
* PEP 343; The 'with' statement: PEP 343 The 'with' statement.
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module.
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory.
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package.
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting.
* PEP 3105; print As a Function: PEP 3105 print As a Function.
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes.
* PEP 3112; Byte Literals: PEP 3112 Byte Literals.
* PEP 3116; New I/O Library: PEP 3116 New I/O Library.
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol.
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes.
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax.
* PEP 3129; Class Decorators: PEP 3129 Class Decorators.
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers.
* Other Language Changes: Other Language Changes<2>.
* New and Improved Modules: New and Improved Modules<2>.
* Deprecations and Removals::
* Build and C API Changes: Build and C API Changes<2>.
* Porting to Python 2.6: Porting to Python 2 6.
* Acknowledgements: Acknowledgements<2>.

Changes to the Development Process

* New Issue Tracker; Roundup: New Issue Tracker Roundup.
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx.

PEP 343: The 'with' statement

* Writing Context Managers::
* The contextlib module::

PEP 3141: A Type Hierarchy for Numbers

* The fractions Module::

Other Language Changes

* Optimizations: Optimizations<2>.
* Interpreter Changes: Interpreter Changes<2>.

New and Improved Modules

* The ast module::
* The future_builtins module::
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation.
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser.
* ctypes Enhancements::
* Improved SSL Support::

Build and C API Changes

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>.
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX.

What's New in Python 2.5

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions.
* PEP 309; Partial Function Application: PEP 309 Partial Function Application.
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1.
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports.
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts.
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally.
* PEP 342; New Generator Features: PEP 342 New Generator Features.
* PEP 343; The 'with' statement: PEP 343 The 'with' statement<2>.
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes.
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type.
* PEP 357; The '__index__' method: PEP 357 The '__index__' method.
* Other Language Changes: Other Language Changes<3>.
* New, Improved, and Removed Modules: New Improved and Removed Modules.
* Build and C API Changes: Build and C API Changes<3>.
* Porting to Python 2.5: Porting to Python 2 5.
* Acknowledgements: Acknowledgements<3>.

PEP 343: The 'with' statement

* Writing Context Managers: Writing Context Managers<2>.
* The contextlib module: The contextlib module<2>.

Other Language Changes

* Interactive Interpreter Changes::
* Optimizations: Optimizations<3>.

New, Improved, and Removed Modules

* The ctypes package::
* The ElementTree package::
* The hashlib package::
* The sqlite3 package::
* The wsgiref package::

Build and C API Changes

* Port-Specific Changes::

What's New in Python 2.4

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers.
* PEP 289; Generator Expressions: PEP 289 Generator Expressions.
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions.
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods.
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration.
* PEP 324; New subprocess Module: PEP 324 New subprocess Module.
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type.
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports.
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions.
* Other Language Changes: Other Language Changes<4>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules.
* Build and C API Changes: Build and C API Changes<4>.
* Porting to Python 2.4: Porting to Python 2 4.
* Acknowledgements: Acknowledgements<4>.

PEP 327: Decimal Data Type

* Why is Decimal needed?::
* The Decimal type::
* The Context type::

Other Language Changes

* Optimizations: Optimizations<4>.

New, Improved, and Deprecated Modules

* cookielib::
* doctest::

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<2>.

What's New in Python 2.3

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype.
* PEP 255; Simple Generators: PEP 255 Simple Generators.
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings.
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives.
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT.
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support.
* PEP 279; enumerate(): PEP 279 enumerate.
* PEP 282; The logging Package: PEP 282 The logging Package.
* PEP 285; A Boolean Type: PEP 285 A Boolean Type.
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks.
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils.
* PEP 302; New Import Hooks: PEP 302 New Import Hooks.
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files.
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements.
* Extended Slices::
* Other Language Changes: Other Language Changes<5>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>.
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator.
* Build and C API Changes: Build and C API Changes<5>.
* Other Changes and Fixes: Other Changes and Fixes<2>.
* Porting to Python 2.3: Porting to Python 2 3.
* Acknowledgements: Acknowledgements<5>.

Other Language Changes

* String Changes::
* Optimizations: Optimizations<5>.

New, Improved, and Deprecated Modules

* Date/Time Type::
* The optparse Module::

Build and C API Changes

* Port-Specific Changes: Port-Specific Changes<3>.

What's New in Python 2.2

* Introduction::
* PEPs 252 and 253; Type and Class Changes: PEPs 252 and 253 Type and Class Changes.
* PEP 234; Iterators: PEP 234 Iterators.
* PEP 255; Simple Generators: PEP 255 Simple Generators<2>.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers<2>.
* PEP 238; Changing the Division Operator: PEP 238 Changing the Division Operator.
* Unicode Changes::
* PEP 227; Nested Scopes: PEP 227 Nested Scopes.
* New and Improved Modules: New and Improved Modules<3>.
* Interpreter Changes and Fixes::
* Other Changes and Fixes: Other Changes and Fixes<3>.
* Acknowledgements: Acknowledgements<6>.

PEPs 252 and 253: Type and Class Changes

* Old and New Classes::
* Descriptors::
* Multiple Inheritance; The Diamond Rule: Multiple Inheritance The Diamond Rule.
* Attribute Access::
* Related Links::

What's New in Python 2.1

* Introduction: Introduction<2>.
* PEP 227; Nested Scopes: PEP 227 Nested Scopes<2>.
* PEP 236; __future__ Directives: PEP 236 __future__ Directives.
* PEP 207; Rich Comparisons: PEP 207 Rich Comparisons.
* PEP 230; Warning Framework: PEP 230 Warning Framework.
* PEP 229; New Build System: PEP 229 New Build System.
* PEP 205; Weak References: PEP 205 Weak References.
* PEP 232; Function Attributes: PEP 232 Function Attributes.
* PEP 235; Importing Modules on Case-Insensitive Platforms: PEP 235 Importing Modules on Case-Insensitive Platforms.
* PEP 217; Interactive Display Hook: PEP 217 Interactive Display Hook.
* PEP 208; New Coercion Model: PEP 208 New Coercion Model.
* PEP 241; Metadata in Python Packages: PEP 241 Metadata in Python Packages.
* New and Improved Modules: New and Improved Modules<4>.
* Other Changes and Fixes: Other Changes and Fixes<4>.
* Acknowledgements: Acknowledgements<7>.

What's New in Python 2.0

* Introduction: Introduction<3>.
* What About Python 1.6?: What About Python 1 6?.
* New Development Process::
* Unicode::
* List Comprehensions::
* Augmented Assignment::
* String Methods::
* Garbage Collection of Cycles::
* Other Core Changes::
* Porting to 2.0: Porting to 2 0.
* Extending/Embedding Changes::
* Distutils; Making Modules Easy to Install: Distutils Making Modules Easy to Install.
* XML Modules::
* Module changes::
* New modules::
* IDLE Improvements::
* Deleted and Deprecated Modules::
* Acknowledgements: Acknowledgements<8>.

Other Core Changes

* Minor Language Changes::
* Changes to Built-in Functions::

XML Modules

* SAX2 Support::
* DOM Support::
* Relationship to PyXML::


File: python.info,  Node: What's New in Python 2 7,  Next: What's New in Python 2 6,  Up: What's New in Python

1.1 What's New in Python 2.7
============================

     Author: A.M. Kuchling (amk at amk.ca)

  This article explains the new features in Python 2.7.  Python 2.7 was
released on July 3, 2010.

  Numeric handling has been improved in many ways, for both
floating-point numbers and for the *note Decimal: 1b4. class.  There
are some useful additions to the standard library, such as a greatly
enhanced *note unittest: 187. module, the *note argparse: d. module for
parsing command-line options, convenient *note OrderedDict: 1b5.  and
*note Counter: 1b6. classes in the *note collections: 65. module, and
many other improvements.

  Python 2.7 is planned to be the last of the 2.x releases, so we worked
on making it a good release for the long term.  To help with porting to
Python 3, several new features from the Python 3.x series have been
included in 2.7.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.7 at
<http://docs.python.org>. If you want to understand the rationale for
the design and implementation, refer to the PEP for a particular new
feature or the issue on <http://bugs.python.org> in which a change was
discussed.  Whenever possible, "What's New in Python" links to the
bug/patch item for each change.

* Menu:

* The Future for Python 2.x: The Future for Python 2 x.
* Python 3.1 Features: Python 3 1 Features.
* PEP 372; Adding an Ordered Dictionary to collections: PEP 372 Adding an Ordered Dictionary to collections.
* PEP 378; Format Specifier for Thousands Separator: PEP 378 Format Specifier for Thousands Separator.
* PEP 389; The argparse Module for Parsing Command Lines: PEP 389 The argparse Module for Parsing Command Lines.
* PEP 391; Dictionary-Based Configuration For Logging: PEP 391 Dictionary-Based Configuration For Logging.
* PEP 3106; Dictionary Views: PEP 3106 Dictionary Views.
* PEP 3137; The memoryview Object: PEP 3137 The memoryview Object.
* Other Language Changes::
* New and Improved Modules::
* Build and C API Changes::
* Other Changes and Fixes::
* Porting to Python 2.7: Porting to Python 2 7.
* Acknowledgements::


File: python.info,  Node: The Future for Python 2 x,  Next: Python 3 1 Features,  Up: What's New in Python 2 7

1.1.1 The Future for Python 2.x
-------------------------------

Python 2.7 is intended to be the last major release in the 2.x series.
The Python maintainers are planning to focus their future efforts on
the Python 3.x series.

  This means that 2.7 will remain in place for a long time, running
production systems that have not been ported to Python 3.x.  Two
consequences of the long-term significance of 2.7 are:

   * It's very likely the 2.7 release will have a longer period of
     maintenance compared to earlier 2.x versions.  Python 2.7 will
     continue to be maintained while the transition to 3.x continues,
     and the developers are planning to support Python 2.7 with bug-fix
     releases beyond the typical two years.

   * A policy decision was made to silence warnings only of interest to
     developers.  *note DeprecationWarning: 1b9. and its descendants
     are now ignored unless otherwise requested, preventing users from
     seeing warnings triggered by an application.  This change was also
     made in the branch that will become Python 3.2. (Discussed on
     stdlib-sig and carried out in issue 7319(1).)

     In previous releases, *note DeprecationWarning: 1b9. messages were
     enabled by default, providing Python developers with a clear
     indication of where their code may break in a future major version
     of Python.

     However, there are increasingly many users of Python-based
     applications who are not directly involved in the development of
     those applications.  *note DeprecationWarning: 1b9. messages are
     irrelevant to such users, making them worry about an application
     that's actually working correctly and burdening application
     developers with responding to these concerns.

     You can re-enable display of *note DeprecationWarning: 1b9.
     messages by running Python with the *note -Wdefault: 1ba. (short
     form: *note -Wd: 1ba.) switch, or by setting the *note
     PYTHONWARNINGS: 1bb.  environment variable to `"default"' (or
     `"d"') before running Python.  Python code can also re-enable them
     by calling `warnings.simplefilter('default')'.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7319


File: python.info,  Node: Python 3 1 Features,  Next: PEP 372 Adding an Ordered Dictionary to collections,  Prev: The Future for Python 2 x,  Up: What's New in Python 2 7

1.1.2 Python 3.1 Features
-------------------------

Much as Python 2.6 incorporated features from Python 3.0, version 2.7
incorporates some of the new features in Python 3.1.  The 2.x series
continues to provide tools for migrating to the 3.x series.

  A partial list of 3.1 features that were backported to 2.7:

   * The syntax for set literals (`{1,2,3}' is a mutable set).

   * Dictionary and set comprehensions (`{i: i*2 for i in range(3)}').

   * Multiple context managers in a single *note with: 1bd. statement.

   * A new version of the *note io: f9. library, rewritten in C for
     performance.

   * The ordered-dictionary type described in *note PEP 372; Adding an
     Ordered Dictionary to collections: 1be.

   * The new `","' format specifier described in *note PEP 378; Format
     Specifier for Thousands Separator: 1bf.

   * The *note memoryview: 1c0. object.

   * A small subset of the *note importlib: f6. module, *note described
     below: 1c1.

   * The *note repr(): 145. of a float `x' is shorter in many cases:
     it's now based on the shortest decimal string that's guaranteed to
     round back to `x'.  As in previous versions of Python, it's
     guaranteed that `float(repr(x))' recovers `x'.

   * Float-to-string and string-to-float conversions are correctly
     rounded.  The *note round(): 1c2. function is also now correctly
     rounded.

   * The *note PyCapsule: 1c3. type, used to provide a C API for
     extension modules.

   * The *note PyLong_AsLongAndOverflow(): 1c4. C API function.

  Other new Python3-mode warnings include:

   * *note operator.isCallable(): 1c5. and *note
     operator.sequenceIncludes(): 1c6, which are not supported in 3.x,
     now trigger warnings.

   * The *note -3: 1c7. switch now automatically enables the *note
     -Qwarn: 1c8. switch that causes warnings about using classic
     division with integers and long integers.


File: python.info,  Node: PEP 372 Adding an Ordered Dictionary to collections,  Next: PEP 378 Format Specifier for Thousands Separator,  Prev: Python 3 1 Features,  Up: What's New in Python 2 7

1.1.3 PEP 372: Adding an Ordered Dictionary to collections
----------------------------------------------------------

Regular Python dictionaries iterate over key/value pairs in arbitrary
order.  Over the years, a number of authors have written alternative
implementations that remember the order that the keys were originally
inserted.  Based on the experiences from those implementations, 2.7
introduces a new *note OrderedDict: 1b5. class in the *note
collections: 65. module.

  The *note OrderedDict: 1b5. API provides the same interface as regular
dictionaries but iterates over keys and values in a guaranteed order
depending on when a key was first inserted:

    >>> from collections import OrderedDict
    >>> d = OrderedDict([('first', 1),
    ...                  ('second', 2),
    ...                  ('third', 3)])
    >>> d.items()
    [('first', 1), ('second', 2), ('third', 3)]

If a new entry overwrites an existing entry, the original insertion
position is left unchanged:

    >>> d['second'] = 4
    >>> d.items()
    [('first', 1), ('second', 4), ('third', 3)]

Deleting an entry and reinserting it will move it to the end:

    >>> del d['second']
    >>> d['second'] = 5
    >>> d.items()
    [('first', 1), ('third', 3), ('second', 5)]

The *note popitem(): 1ca. method has an optional _last_ argument that
defaults to True.  If _last_ is True, the most recently added key is
returned and removed; if it's False, the oldest key is selected:

    >>> od = OrderedDict([(x,0) for x in range(20)])
    >>> od.popitem()
    (19, 0)
    >>> od.popitem()
    (18, 0)
    >>> od.popitem(last=False)
    (0, 0)
    >>> od.popitem(last=False)
    (1, 0)

Comparing two ordered dictionaries checks both the keys and values, and
requires that the insertion order was the same:

    >>> od1 = OrderedDict([('first', 1),
    ...                    ('second', 2),
    ...                    ('third', 3)])
    >>> od2 = OrderedDict([('third', 3),
    ...                    ('first', 1),
    ...                    ('second', 2)])
    >>> od1 == od2
    False
    >>> # Move 'third' key to the end
    >>> del od2['third']; od2['third'] = 3
    >>> od1 == od2
    True

Comparing an *note OrderedDict: 1b5. with a regular dictionary ignores
the insertion order and just compares the keys and values.

  How does the *note OrderedDict: 1b5. work?  It maintains a
doubly-linked list of keys, appending new keys to the list as they're
inserted.  A secondary dictionary maps keys to their corresponding list
node, so deletion doesn't have to traverse the entire linked list and
therefore remains O(1).

  The standard library now supports use of ordered dictionaries in
several modules.

   * The *note ConfigParser: 6d. module uses them by default, meaning
     that configuration files can now be read, modified, and then
     written back in their original order.

   * The *note _asdict(): 1cb. method for *note
     collections.namedtuple(): 1cc. now returns an ordered dictionary
     with the values appearing in the same order as the underlying
     tuple indices.

   * The *note json: fc. module's *note JSONDecoder: 1cd. class
     constructor was extended with an _object_pairs_hook_ parameter to
     allow `OrderedDict' instances to be built by the decoder.  Support
     was also added for third-party tools like PyYAML(1).

See also
........

PEP 372(2) - Adding an ordered dictionary to collections
     PEP written by Armin Ronacher and Raymond Hettinger; implemented
     by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://pyyaml.org/

  (2) http://www.python.org/dev/peps/pep-0372


File: python.info,  Node: PEP 378 Format Specifier for Thousands Separator,  Next: PEP 389 The argparse Module for Parsing Command Lines,  Prev: PEP 372 Adding an Ordered Dictionary to collections,  Up: What's New in Python 2 7

1.1.4 PEP 378: Format Specifier for Thousands Separator
-------------------------------------------------------

To make program output more readable, it can be useful to add
separators to large numbers, rendering them as
18,446,744,073,709,551,616 instead of 18446744073709551616.

  The fully general solution for doing this is the *note locale: 100.
module, which can use different separators ("," in North America, "." in
Europe) and different grouping sizes, but *note locale: 100. is
complicated to use and unsuitable for multi-threaded applications where
different threads are producing output for different locales.

  Therefore, a simple comma-grouping mechanism has been added to the
mini-language used by the *note str.format(): 1cf. method.  When
formatting a floating-point number, simply include a comma between the
width and the precision:

    >>> '{:20,.2f}'.format(18446744073709551616.0)
    '18,446,744,073,709,551,616.00'

When formatting an integer, include the comma after the width:

    >>> '{:20,d}'.format(18446744073709551616)
    '18,446,744,073,709,551,616'

This mechanism is not adaptable at all; commas are always used as the
separator and the grouping is always into three-digit groups.  The
comma-formatting mechanism isn't as general as the *note locale: 100.
module, but it's easier to use.

See also
........

PEP 378(1) - Format Specifier for Thousands Separator
     PEP written by Raymond Hettinger; implemented by Eric Smith.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0378


File: python.info,  Node: PEP 389 The argparse Module for Parsing Command Lines,  Next: PEP 391 Dictionary-Based Configuration For Logging,  Prev: PEP 378 Format Specifier for Thousands Separator,  Up: What's New in Python 2 7

1.1.5 PEP 389: The argparse Module for Parsing Command Lines
------------------------------------------------------------

The *note argparse: d. module for parsing command-line arguments was
added as a more powerful replacement for the *note optparse: 127.
module.

  This means Python now supports three different modules for parsing
command-line arguments: *note getopt: de, *note optparse: 127, and
*note argparse: d.  The *note getopt: de. module closely resembles the C
library's `getopt()' function, so it remains useful if you're writing a
Python prototype that will eventually be rewritten in C.  *note
optparse: 127. becomes redundant, but there are no plans to remove it
because there are many scripts still using it, and there's no automated
way to update these scripts.  (Making the *note argparse: d.  API
consistent with *note optparse: 127.'s interface was discussed but
rejected as too messy and difficult.)

  In short, if you're writing a new script and don't need to worry
about compatibility with earlier versions of Python, use *note
argparse: d. instead of *note optparse: 127.

  Here's an example:

    import argparse

    parser = argparse.ArgumentParser(description='Command-line example.')

    # Add optional switches
    parser.add_argument('-v', action='store_true', dest='is_verbose',
                        help='produce verbose output')
    parser.add_argument('-o', action='store', dest='output',
                        metavar='FILE',
                        help='direct output to FILE instead of stdout')
    parser.add_argument('-C', action='store', type=int, dest='context',
                        metavar='NUM', default=0,
                        help='display NUM lines of added context')

    # Allow any number of additional arguments.
    parser.add_argument(nargs='*', action='store', dest='inputs',
                        help='input filenames (default is stdin)')

    args = parser.parse_args()
    print args.__dict__

Unless you override it, *note -h: 1d1. and *note -help: 1d2. switches
are automatically added, and produce neatly formatted output:

    -> ./python.exe argparse-example.py --help
    usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]

    Command-line example.

    positional arguments:
      inputs      input filenames (default is stdin)

    optional arguments:
      -h, --help  show this help message and exit
      -v          produce verbose output
      -o FILE     direct output to FILE instead of stdout
      -C NUM      display NUM lines of added context

As with *note optparse: 127, the command-line switches and arguments
are returned as an object with attributes named by the _dest_
parameters:

    -> ./python.exe argparse-example.py -v
    {'output': None,
     'is_verbose': True,
     'context': 0,
     'inputs': []}

    -> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2
    {'output': '/tmp/output',
     'is_verbose': True,
     'context': 4,
     'inputs': ['file1', 'file2']}

*note argparse: d. has much fancier validation than *note optparse:
127.; you can specify an exact number of arguments as an integer, 0 or
more arguments by passing `'*'', 1 or more by passing `'+'', or an
optional argument with `'?''.  A top-level parser can contain
sub-parsers to define subcommands that have different sets of switches,
as in `svn commit', `svn checkout', etc.  You can specify an argument's
type as *note FileType: 1d3, which will automatically open files for
you and understands that `'-'' means standard input or output.

See also
........

*note argparse: d. documentation
     The documentation page of the argparse module.

*note Upgrading optparse code: 1d4.
     Part of the Python documentation, describing how to convert code
     that uses *note optparse: 127.

PEP 389(1) - argparse - New Command Line Parsing Module
     PEP written and implemented by Steven Bethard.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0389


File: python.info,  Node: PEP 391 Dictionary-Based Configuration For Logging,  Next: PEP 3106 Dictionary Views,  Prev: PEP 389 The argparse Module for Parsing Command Lines,  Up: What's New in Python 2 7

1.1.6 PEP 391: Dictionary-Based Configuration For Logging
---------------------------------------------------------

The *note logging: 101. module is very flexible; applications can define
a tree of logging subsystems, and each logger in this tree can filter
out certain messages, format them differently, and direct messages to a
varying number of handlers.

  All this flexibility can require a lot of configuration.  You can
write Python statements to create objects and set their properties, but
a complex set-up requires verbose but boring code.  *note logging: 101.
also supports a `fileConfig()' function that parses a file, but the
file format doesn't support configuring filters, and it's messier to
generate programmatically.

  Python 2.7 adds a `dictConfig()' function that uses a dictionary to
configure logging.  There are many ways to produce a dictionary from
different sources: construct one with code; parse a file containing
JSON; or use a YAML parsing library if one is installed.  For more
information see *note Configuration functions: 1d6.

  The following example configures two loggers, the root logger and a
logger named "network".  Messages sent to the root logger will be sent
to the system log using the syslog protocol, and messages to the
"network" logger will be written to a `network.log' file that will be
rotated once the log reaches 1MB.

    import logging
    import logging.config

    configdict = {
     'version': 1,    # Configuration schema in use; must be 1 for now
     'formatters': {
         'standard': {
             'format': ('%(asctime)s %(name)-15s '
                        '%(levelname)-8s %(message)s')}},

     'handlers': {'netlog': {'backupCount': 10,
                         'class': 'logging.handlers.RotatingFileHandler',
                         'filename': '/logs/network.log',
                         'formatter': 'standard',
                         'level': 'INFO',
                         'maxBytes': 1000000},
                  'syslog': {'class': 'logging.handlers.SysLogHandler',
                             'formatter': 'standard',
                             'level': 'ERROR'}},

     # Specify all the subordinate loggers
     'loggers': {
                 'network': {
                             'handlers': ['netlog']
                 }
     },
     # Specify properties of the root logger
     'root': {
              'handlers': ['syslog']
     },
    }

    # Set up configuration
    logging.config.dictConfig(configdict)

    # As an example, log two error messages
    logger = logging.getLogger('/')
    logger.error('Database not found')

    netlogger = logging.getLogger('network')
    netlogger.error('Connection failed')

Three smaller enhancements to the *note logging: 101. module, all
implemented by Vinay Sajip, are:

   * The *note SysLogHandler: 1d7. class now supports syslogging over
     TCP.  The constructor has a _socktype_ parameter giving the type
     of socket to use, either *note socket.SOCK_DGRAM: 1d8.  for UDP or
     *note socket.SOCK_STREAM: 1d9. for TCP.  The default protocol
     remains UDP.

   * *note Logger: 1da. instances gained a *note getChild(): 1db.
     method that retrieves a descendant logger using a relative path.
     For example, once you retrieve a logger by doing `log =
     getLogger('app')', calling `log.getChild('network.listen')' is
     equivalent to `getLogger('app.network.listen')'.

   * The *note LoggerAdapter: 1dc. class gained a `isEnabledFor()'
     method that takes a _level_ and returns whether the underlying
     logger would process a message of that level of importance.

See also
........

PEP 391(1) - Dictionary-Based Configuration For Logging
     PEP written and implemented by Vinay Sajip.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0391


File: python.info,  Node: PEP 3106 Dictionary Views,  Next: PEP 3137 The memoryview Object,  Prev: PEP 391 Dictionary-Based Configuration For Logging,  Up: What's New in Python 2 7

1.1.7 PEP 3106: Dictionary Views
--------------------------------

The dictionary methods *note keys(): 1de, *note values(): 1df, and
*note items(): 1e0. are different in Python 3.x.  They return an object
called a _view_ instead of a fully materialized list.

  It's not possible to change the return values of *note keys(): 1de,
*note values(): 1df, and *note items(): 1e0. in Python 2.7 because too
much code would break.  Instead the 3.x versions were added under the
new names *note viewkeys(): 1e1, *note viewvalues(): 1e2, and *note
viewitems(): 1e3.

    >>> d = dict((i*10, chr(65+i)) for i in range(26))
    >>> d
    {0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}
    >>> d.viewkeys()
    dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])

Views can be iterated over, but the key and item views also behave like
sets.  The `&' operator performs intersection, and `|' performs a union:

    >>> d1 = dict((i*10, chr(65+i)) for i in range(26))
    >>> d2 = dict((i**.5, i) for i in range(1000))
    >>> d1.viewkeys() & d2.viewkeys()
    set([0.0, 10.0, 20.0, 30.0])
    >>> d1.viewkeys() | range(0, 30)
    set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])

The view keeps track of the dictionary and its contents change as the
dictionary is modified:

    >>> vk = d.viewkeys()
    >>> vk
    dict_keys([0, 130, 10, ..., 250])
    >>> d[260] = '&'
    >>> vk
    dict_keys([0, 130, 260, 10, ..., 250])

However, note that you can't add or remove keys while you're iterating
over the view:

    >>> for k in vk:
    ...     d[k*2] = k
    ...
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    RuntimeError: dictionary changed size during iteration

You can use the view methods in Python 2.x code, and the 2to3 converter
will change them to the standard *note keys(): 1de, *note values():
1df, and *note items(): 1e0. methods.

See also
........

PEP 3106(1) - Revamping dict.keys(), .values() and .items()
     PEP written by Guido van Rossum.  Backported to 2.7 by Alexandre
     Vassalotti; issue 1967(2).

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3106

  (2) http://bugs.python.org/issue1967


File: python.info,  Node: PEP 3137 The memoryview Object,  Next: Other Language Changes,  Prev: PEP 3106 Dictionary Views,  Up: What's New in Python 2 7

1.1.8 PEP 3137: The memoryview Object
-------------------------------------

The *note memoryview: 1c0. object provides a view of another object's
memory content that matches the `bytes' type's interface.

    >>> import string
    >>> m = memoryview(string.letters)
    >>> m
    <memory at 0x37f850>
    >>> len(m)           # Returns length of underlying object
    52
    >>> m[0], m[25], m[26]   # Indexing returns one byte
    ('a', 'z', 'A')
    >>> m2 = m[0:26]         # Slicing returns another memoryview
    >>> m2
    <memory at 0x37f080>

The content of the view can be converted to a string of bytes or a list
of integers:

    >>> m2.tobytes()
    'abcdefghijklmnopqrstuvwxyz'
    >>> m2.tolist()
    [97, 98, 99, 100, 101, 102, 103, ... 121, 122]
    >>>

*note memoryview: 1c0. objects allow modifying the underlying object if
it's a mutable object.

    >>> m2[0] = 75
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: cannot modify read-only memory
    >>> b = bytearray(string.letters)  # Creating a mutable object
    >>> b
    bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    >>> mb = memoryview(b)
    >>> mb[0] = '*'         # Assign to view, changing the bytearray.
    >>> b[0:5]              # The bytearray has been changed.
    bytearray(b'*bcde')
    >>>


See also
........

PEP 3137(1) - Immutable Bytes and Mutable Buffer
     PEP written by Guido van Rossum.  Implemented by Travis Oliphant,
     Antoine Pitrou and others.  Backported to 2.7 by Antoine Pitrou;
     issue 2396(2).

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3137

  (2) http://bugs.python.org/issue2396


File: python.info,  Node: Other Language Changes,  Next: New and Improved Modules,  Prev: PEP 3137 The memoryview Object,  Up: What's New in Python 2 7

1.1.9 Other Language Changes
----------------------------

Some smaller changes made to the core Python language are:

   * The syntax for set literals has been backported from Python 3.x.
     Curly brackets are used to surround the contents of the resulting
     mutable set; set literals are distinguished from dictionaries by
     not containing colons and values.  `{}' continues to represent an
     empty dictionary; use `set()' for an empty set.

         >>> {1, 2, 3, 4, 5}
         set([1, 2, 3, 4, 5])
         >>> set() # empty set
         set([])
         >>> {}    # empty dict
         {}

     Backported by Alexandre Vassalotti; issue 2335(1).

   * Dictionary and set comprehensions are another feature backported
     from 3.x, generalizing list/generator comprehensions to use the
     literal syntax for sets and dictionaries.

         >>> {x: x*x for x in range(6)}
         {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
         >>> {('a'*x) for x in range(6)}
         set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])

     Backported by Alexandre Vassalotti; issue 2333(2).

   * The *note with: 1bd. statement can now use multiple context
     managers in one statement.  Context managers are processed from
     left to right and each one is treated as beginning a new *note
     with: 1bd. statement.  This means that:

         with A() as a, B() as b:
             ... suite of statements ...

     is equivalent to:

         with A() as a:
             with B() as b:
                 ... suite of statements ...

     The *note contextlib.nested(): 1e6. function provides a very
     similar function, so it's no longer necessary and has been
     deprecated.

     (Proposed in <http://codereview.appspot.com/53094>; implemented by
     Georg Brandl.)

   * Conversions between floating-point numbers and strings are now
     correctly rounded on most platforms.  These conversions occur in
     many different places: *note str(): 1e7. on floats and complex
     numbers; the *note float: 1e8. and *note complex: 1e9.
     constructors; numeric formatting; serializing and deserializing
     floats and complex numbers using the *note marshal: 10b, *note
     pickle: 12d.  and *note json: fc. modules; parsing of float and
     imaginary literals in Python code; and *note Decimal:
     1b4.-to-float conversion.

     Related to this, the *note repr(): 145. of a floating-point number
     _x_ now returns a result based on the shortest decimal string
     that's guaranteed to round back to _x_ under correct rounding (with
     round-half-to-even rounding mode).  Previously it gave a string
     based on rounding x to 17 decimal digits.

     The rounding library responsible for this improvement works on
     Windows and on Unix platforms using the gcc, icc, or suncc
     compilers.  There may be a small number of platforms where correct
     operation of this code cannot be guaranteed, so the code is not
     used on such systems.  You can find out which code is being used
     by checking *note sys.float_repr_style: 1ea,  which will be `short'
     if the new code is in use and `legacy' if it isn't.

     Implemented by Eric Smith and Mark Dickinson, using David Gay's
     `dtoa.c' library; issue 7117(3).

   * Conversions from long integers and regular integers to floating
     point now round differently, returning the floating-point number
     closest to the number.  This doesn't matter for small integers that
     can be converted exactly, but for large numbers that will
     unavoidably lose precision, Python 2.7 now approximates more
     closely.  For example, Python 2.6 computed the following:

         >>> n = 295147905179352891391
         >>> float(n)
         2.9514790517935283e+20
         >>> n - long(float(n))
         65535L

     Python 2.7's floating-point result is larger, but much closer to
     the true value:

         >>> n = 295147905179352891391
         >>> float(n)
         2.9514790517935289e+20
         >>> n - long(float(n))
         -1L

     (Implemented by Mark Dickinson; issue 3166(4).)

     Integer division is also more accurate in its rounding behaviours.
     (Also implemented by Mark Dickinson; issue 1811(5).)

   * Implicit coercion for complex numbers has been removed; the
     interpreter will no longer ever attempt to call a *note
     __coerce__(): 1eb. method on complex objects.  (Removed by Meador
     Inge and Mark Dickinson; issue 5211(6).)

   * The *note str.format(): 1cf. method now supports automatic
     numbering of the replacement fields.  This makes using *note
     str.format(): 1cf. more closely resemble using `%s' formatting:

         >>> '{}:{}:{}'.format(2009, 04, 'Sunday')
         '2009:4:Sunday'
         >>> '{}:{}:{day}'.format(2009, 4, day='Sunday')
         '2009:4:Sunday'

     The auto-numbering takes the fields from left to right, so the
     first `{...}' specifier will use the first argument to *note
     str.format(): 1cf, the next specifier will use the next argument,
     and so on.  You can't mix auto-numbering and explicit numbering -
     either number all of your specifier fields or none of them - but
     you can mix auto-numbering and named fields, as in the second
     example above.  (Contributed by Eric Smith; issue 5237(7).)

     Complex numbers now correctly support usage with *note format():
     1ec, and default to being right-aligned.  Specifying a precision
     or comma-separation applies to both the real and imaginary parts
     of the number, but a specified field width and alignment is
     applied to the whole of the resulting `1.5+3j' output.
     (Contributed by Eric Smith; issue 1588(8) and issue 7988(9).)

     The 'F' format code now always formats its output using uppercase
     characters, so it will now produce 'INF' and 'NAN'.  (Contributed
     by Eric Smith; issue 3382(10).)

     A low-level change: the `object.__format__()' method now triggers
     a *note PendingDeprecationWarning: 1ed. if it's passed a format
     string, because the `__format__()' method for *note object: 1ee.
     converts the object to a string representation and formats that.
     Previously the method silently applied the format string to the
     string representation, but that could hide mistakes in Python
     code.  If you're supplying formatting information such as an
     alignment or precision, presumably you're expecting the formatting
     to be applied in some object-specific way.  (Fixed by Eric Smith;
     issue 7994(11).)

   * The *note int(): 1ef. and *note long(): 1f0. types gained a
     `bit_length' method that returns the number of bits necessary to
     represent its argument in binary:

         >>> n = 37
         >>> bin(n)
         '0b100101'
         >>> n.bit_length()
         6
         >>> n = 2**123-1
         >>> n.bit_length()
         123
         >>> (n+1).bit_length()
         124

     (Contributed by Fredrik Johansson and Victor Stinner; issue
     3439(12).)

   * The *note import: 1f1. statement will no longer try an absolute
     import if a relative import (e.g. `from .os import sep') fails.
     This fixes a bug, but could possibly break certain *note import:
     1f1.  statements that were only working by accident.  (Fixed by
     Meador Inge; issue 7902(13).)

   * It's now possible for a subclass of the built-in *note unicode:
     1f2. type to override the *note __unicode__(): 1f3. method.
     (Implemented by Victor Stinner; issue 1583863(14).)

   * The *note bytearray: 1f4. type's `translate()' method now accepts
     `None' as its first argument.  (Fixed by Georg Brandl; issue
     4759(15).)

   * When using `@classmethod' and `@staticmethod' to wrap methods as
     class or static methods, the wrapper object now exposes the
     wrapped function as their `__func__' attribute.  (Contributed by
     Amaury Forgeot d'Arc, after a suggestion by George Sakkis; issue
     5982(16).)

   * When a restricted set of attributes were set using `__slots__',
     deleting an unset attribute would not raise *note AttributeError:
     1f5.  as you would expect.  Fixed by Benjamin Peterson; issue
     7604(17).)

   * Two new encodings are now supported: "cp720", used primarily for
     Arabic text; and "cp858", a variant of CP 850 that adds the euro
     symbol.  (CP720 contributed by Alexander Belchenko and Amaury
     Forgeot d'Arc in issue 1616979(18); CP858 contributed by Tim Hatch
     in issue 8016(19).)

   * The *note file: 1f6. object will now set the `filename' attribute
     on the *note IOError: 1f7. exception when trying to open a
     directory on POSIX platforms (noted by Jan Kaliszewski; issue
     4764(20)), and now explicitly checks for and forbids writing to
     read-only file objects instead of trusting the C library to catch
     and report the error (fixed by Stefan Krah; issue 5677(21)).

   * The Python tokenizer now translates line endings itself, so the
     *note compile(): 1f8. built-in function now accepts code using any
     line-ending convention.  Additionally, it no longer requires that
     the code end in a newline.

   * Extra parentheses in function definitions are illegal in Python
     3.x, meaning that you get a syntax error from `def f((x)): pass'.
     In Python3-warning mode, Python 2.7 will now warn about this odd
     usage.  (Noted by James Lingard; issue 7362(22).)

   * It's now possible to create weak references to old-style class
     objects.  New-style classes were always weak-referenceable.  (Fixed
     by Antoine Pitrou; issue 8268(23).)

   * When a module object is garbage-collected, the module's dictionary
     is now only cleared if no one else is holding a reference to the
     dictionary (issue 7140(24)).

* Menu:

* Interpreter Changes::
* Optimizations::

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2335

  (2) http://bugs.python.org/issue2333

  (3) http://bugs.python.org/issue7117

  (4) http://bugs.python.org/issue3166

  (5) http://bugs.python.org/issue1811

  (6) http://bugs.python.org/issue5211

  (7) http://bugs.python.org/issue5237

  (8) http://bugs.python.org/issue1588

  (9) http://bugs.python.org/issue7988

  (10) http://bugs.python.org/issue3382

  (11) http://bugs.python.org/issue7994

  (12) http://bugs.python.org/issue3439

  (13) http://bugs.python.org/issue7902

  (14) http://bugs.python.org/issue1583863

  (15) http://bugs.python.org/issue4759

  (16) http://bugs.python.org/issue5982

  (17) http://bugs.python.org/issue7604

  (18) http://bugs.python.org/issue1616979

  (19) http://bugs.python.org/issue8016

  (20) http://bugs.python.org/issue4764

  (21) http://bugs.python.org/issue5677

  (22) http://bugs.python.org/issue7362

  (23) http://bugs.python.org/issue8268

  (24) http://bugs.python.org/issue7140


File: python.info,  Node: Interpreter Changes,  Next: Optimizations,  Up: Other Language Changes

1.1.9.1 Interpreter Changes
...........................

A new environment variable, *note PYTHONWARNINGS: 1bb, allows
controlling warnings.  It should be set to a string containing warning
settings, equivalent to those used with the *note -W: 1ba. switch,
separated by commas.  (Contributed by Brian Curtin; issue 7301(1).)

  For example, the following setting will print warnings every time
they occur, but turn warnings from the *note Cookie: 6f. module into an
error.  (The exact syntax for setting an environment variable varies
across operating systems and shells.)

    export PYTHONWARNINGS=all,error:::Cookie:0


  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue7301


File: python.info,  Node: Optimizations,  Prev: Interpreter Changes,  Up: Other Language Changes

1.1.9.2 Optimizations
.....................

Several performance enhancements have been added:

   * A new opcode was added to perform the initial setup for *note
     with: 1bd. statements, looking up the *note __enter__(): 1fc. and
     *note __exit__(): 1fd. methods.  (Contributed by Benjamin
     Peterson.)

   * The garbage collector now performs better for one common usage
     pattern: when many objects are being allocated without deallocating
     any of them.  This would previously take quadratic time for
     garbage collection, but now the number of full garbage collections
     is reduced as the number of objects on the heap grows.  The new
     logic only performs a full garbage collection pass when the middle
     generation has been collected 10 times and when the number of
     survivor objects from the middle generation exceeds 10% of the
     number of objects in the oldest generation.  (Suggested by Martin
     von Löwis and implemented by Antoine Pitrou; issue 4074(1).)

   * The garbage collector tries to avoid tracking simple containers
     which can't be part of a cycle. In Python 2.7, this is now true for
     tuples and dicts containing atomic types (such as ints, strings,
     etc.). Transitively, a dict containing tuples of atomic types won't
     be tracked either. This helps reduce the cost of each garbage
     collection by decreasing the number of objects to be considered
     and traversed by the collector.  (Contributed by Antoine Pitrou;
     issue 4688(2).)

   * Long integers are now stored internally either in base 2**15 or in
     base 2**30, the base being determined at build time.  Previously,
     they were always stored in base 2**15.  Using base 2**30 gives
     significant performance improvements on 64-bit machines, but
     benchmark results on 32-bit machines have been mixed.  Therefore,
     the default is to use base 2**30 on 64-bit machines and base 2**15
     on 32-bit machines; on Unix, there's a new configure option
     `--enable-big-digits' that can be used to override this default.

     Apart from the performance improvements this change should be
     invisible to end users, with one exception: for testing and
     debugging purposes there's a new structseq *note sys.long_info:
     1fe. that provides information about the internal format, giving
     the number of bits per digit and the size in bytes of the C type
     used to store each digit:

         >>> import sys
         >>> sys.long_info
         sys.long_info(bits_per_digit=30, sizeof_digit=4)

     (Contributed by Mark Dickinson; issue 4258(3).)

     Another set of changes made long objects a few bytes smaller: 2
     bytes smaller on 32-bit systems and 6 bytes on 64-bit.
     (Contributed by Mark Dickinson; issue 5260(4).)

   * The division algorithm for long integers has been made faster by
     tightening the inner loop, doing shifts instead of multiplications,
     and fixing an unnecessary extra iteration.  Various benchmarks
     show speedups of between 50% and 150% for long integer divisions
     and modulo operations.  (Contributed by Mark Dickinson; issue
     5512(5).)  Bitwise operations are also significantly faster
     (initial patch by Gregory Smith; issue 1087418(6)).

   * The implementation of `%' checks for the left-side operand being a
     Python string and special-cases it; this results in a 1-3%
     performance increase for applications that frequently use `%' with
     strings, such as templating libraries.  (Implemented by Collin
     Winter; issue 5176(7).)

   * List comprehensions with an `if' condition are compiled into
     faster bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by
     Jeffrey Yasskin; issue 4715(8).)

   * Converting an integer or long integer to a decimal string was made
     faster by special-casing base 10 instead of using a generalized
     conversion function that supports arbitrary bases.  (Patch by
     Gawain Bolton; issue 6713(9).)

   * The `split()', `replace()', `rindex()', `rpartition()', and
     `rsplit()' methods of string-like types (strings, Unicode strings,
     and *note bytearray: 1f4. objects) now use a fast reverse-search
     algorithm instead of a character-by-character scan.  This is
     sometimes faster by a factor of 10.  (Added by Florent Xicluna;
     issue 7462(10) and issue 7622(11).)

   * The *note pickle: 12d. and *note cPickle: 73. modules now
     automatically intern the strings used for attribute names,
     reducing memory usage of the objects resulting from unpickling.
     (Contributed by Jake McGuire; issue 5084(12).)

   * The *note cPickle: 73. module now special-cases dictionaries,
     nearly halving the time required to pickle them.  (Contributed by
     Collin Winter; issue 5670(13).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4074

  (2) http://bugs.python.org/issue4688

  (3) http://bugs.python.org/issue4258

  (4) http://bugs.python.org/issue5260

  (5) http://bugs.python.org/issue5512

  (6) http://bugs.python.org/issue1087418

  (7) http://bugs.python.org/issue5176

  (8) http://bugs.python.org/issue4715

  (9) http://bugs.python.org/issue6713

  (10) http://bugs.python.org/issue7462

  (11) http://bugs.python.org/issue7622

  (12) http://bugs.python.org/issue5084

  (13) http://bugs.python.org/issue5670


File: python.info,  Node: New and Improved Modules,  Next: Build and C API Changes,  Prev: Other Language Changes,  Up: What's New in Python 2 7

1.1.10 New and Improved Modules
-------------------------------

As in every release, Python's standard library received a number of
enhancements and bug fixes.  Here's a partial list of the most notable
changes, sorted alphabetically by module name. Consult the `Misc/NEWS'
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The *note bdb: 18. module's base debugging class *note Bdb: 200.
     gained a feature for skipping modules.  The constructor now takes
     an iterable containing glob-style patterns such as `django.*'; the
     debugger will not step into stack frames from a module that
     matches one of these patterns.  (Contributed by Maru Newby after a
     suggestion by Senthil Kumaran; issue 5142(1).)

   * The *note binascii: 19. module now supports the buffer API, so it
     can be used with *note memoryview: 1c0. instances and other
     similar buffer objects.  (Backported from 3.x by Florent Xicluna;
     issue 7703(2).)

   * Updated module: the *note bsddb: 1c. module has been updated from
     4.7.2devel9 to version 4.8.4 of the pybsddb package(3).  The new
     version features better Python 3.x compatibility, various bug
     fixes, and adds several new BerkeleyDB flags and methods.
     (Updated by Jesús Cea Avión; issue 8156(4).  The pybsddb changelog
     can be read at <http://hg.jcea.es/pybsddb/file/tip/ChangeLog>.)

   * The *note bz2: 1e. module's *note BZ2File: 201. now supports the
     context management protocol, so you can write `with
     bz2.BZ2File(...) as f:'.  (Contributed by Hagen Fürstenau; issue
     3860(5).)

   * New class: the *note Counter: 1b6. class in the *note collections:
     65.  module is useful for tallying data.  *note Counter: 1b6.
     instances behave mostly like dictionaries but return zero for
     missing keys instead of raising a *note KeyError: 202.:

         >>> from collections import Counter
         >>> c = Counter()
         >>> for letter in 'here is a sample of english text':
         ...   c[letter] += 1
         ...
         >>> c
         Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,
         'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,
         'p': 1, 'r': 1, 'x': 1})
         >>> c['e']
         5
         >>> c['z']
         0

     There are three additional *note Counter: 1b6. methods.  *note
     most_common(): 203. returns the N most common elements and their
     counts.  *note elements(): 204.  returns an iterator over the
     contained elements, repeating each element as many times as its
     count.  *note subtract(): 205. takes an iterable and subtracts one
     for each element instead of adding; if the argument is a
     dictionary or another `Counter', the counts are subtracted.

         >>> c.most_common(5)
         [(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]
         >>> c.elements() ->
            'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',
            'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',
            'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',
            's', 's', 'r', 't', 't', 'x'
         >>> c['e']
         5
         >>> c.subtract('very heavy on the letter e')
         >>> c['e']    # Count is now lower
         -1

     Contributed by Raymond Hettinger; issue 1696199(6).

     New class: *note OrderedDict: 1b5. is described in the earlier
     section *note PEP 372; Adding an Ordered Dictionary to
     collections: 1be.

     New method: The *note deque: 206. data type now has a *note
     count(): 207. method that returns the number of contained elements
     equal to the supplied argument _x_, and a *note reverse(): 208.
     method that reverses the elements of the deque in-place.  *note
     deque: 206. also exposes its maximum length as the read-only *note
     maxlen: 209. attribute.  (Both features added by Raymond
     Hettinger.)

     The *note namedtuple: 1cc. class now has an optional _rename_
     parameter.  If _rename_ is true, field names that are invalid
     because they've been repeated or aren't legal Python identifiers
     will be renamed to legal names that are derived from the field's
     position within the list of fields:

         >>> from collections import namedtuple
         >>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True)
         >>> T._fields
         ('field1', '_1', '_2', 'field2')

     (Added by Raymond Hettinger; issue 1818(7).)

     Finally, the *note Mapping: 20a. abstract base class now returns
     *note NotImplemented: 20b. if a mapping is compared to another
     type that isn't a `Mapping'.  (Fixed by Daniel Stutzbach; issue
     8729(8).)

   * Constructors for the parsing classes in the *note ConfigParser:
     6d. module now take a _allow_no_value_ parameter, defaulting to
     false; if true, options without values will be allowed.  For
     example:

         >>> import ConfigParser, StringIO
         >>> sample_config = """
         ... [mysqld]
         ... user = mysql
         ... pid-file = /var/run/mysqld/mysqld.pid
         ... skip-bdb
         ... """
         >>> config = ConfigParser.RawConfigParser(allow_no_value=True)
         >>> config.readfp(StringIO.StringIO(sample_config))
         >>> config.get('mysqld', 'user')
         'mysql'
         >>> print config.get('mysqld', 'skip-bdb')
         None
         >>> print config.get('mysqld', 'unknown')
         Traceback (most recent call last):
           ...
         NoOptionError: No option 'unknown' in section: 'mysqld'

     (Contributed by Mats Kindahl; issue 7005(9).)

   * Deprecated function: *note contextlib.nested(): 1e6, which allows
     handling more than one context manager with a single *note with:
     1bd.  statement, has been deprecated, because the *note with: 1bd.
     statement now supports multiple context managers.

   * The *note cookielib: 70. module now ignores cookies that have an
     invalid version field, one that doesn't contain an integer value.
     (Fixed by John J. Lee; issue 3924(10).)

   * The *note copy: 71. module's *note deepcopy(): 20c. function will
     now correctly copy bound instance methods.  (Implemented by Robert
     Collins; issue 1515(11).)

   * The *note ctypes: 78. module now always converts `None' to a C NULL
     pointer for arguments declared as pointers.  (Changed by Thomas
     Heller; issue 4606(12).)  The underlying libffi library(13) has
     been updated to version 3.0.9, containing various fixes for
     different platforms.  (Updated by Matthias Klose; issue 8142(14).)

   * New method: the *note datetime: 7d. module's *note timedelta: 20d.
     class gained a *note total_seconds(): 20e. method that returns the
     number of seconds in the duration.  (Contributed by Brian Quinlan;
     issue 5788(15).)

   * New method: the *note Decimal: 1b4. class gained a *note
     from_float(): 20f. class method that performs an exact conversion
     of a floating-point number to a *note Decimal: 1b4.  This exact
     conversion strives for the closest decimal approximation to the
     floating-point representation's value; the resulting decimal value
     will therefore still include the inaccuracy, if any.  For example,
     `Decimal.from_float(0.1)' returns
     `Decimal('0.1000000000000000055511151231257827021181583404541015625')'.
     (Implemented by Raymond Hettinger; issue 4796(16).)

     Comparing instances of *note Decimal: 1b4. with floating-point
     numbers now produces sensible results based on the numeric values
     of the operands.  Previously such comparisons would fall back to
     Python's default rules for comparing objects, which produced
     arbitrary results based on their type.  Note that you still cannot
     combine `Decimal' and floating-point in other operations such as
     addition, since you should be explicitly choosing how to convert
     between float and *note Decimal: 1b4.  (Fixed by Mark Dickinson;
     issue 2531(17).)

     The constructor for *note Decimal: 1b4. now accepts floating-point
     numbers (added by Raymond Hettinger; issue 8257(18)) and
     non-European Unicode characters such as Arabic-Indic digits
     (contributed by Mark Dickinson; issue 6595(19)).

     Most of the methods of the *note Context: 210. class now accept
     integers as well as *note Decimal: 1b4. instances; the only
     exceptions are the *note canonical(): 211. and *note
     is_canonical(): 212.  methods.  (Patch by Juan José Conti; issue
     7633(20).)

     When using *note Decimal: 1b4. instances with a string's *note
     format(): 1cf. method, the default alignment was previously
     left-alignment.  This has been changed to right-alignment, which is
     more sensible for numeric types.  (Changed by Mark Dickinson;
     issue 6857(21).)

     Comparisons involving a signaling NaN value (or `sNAN') now signal
     `InvalidOperation' instead of silently returning a true or false
     value depending on the comparison operator.  Quiet NaN values (or
     `NaN') are now hashable.  (Fixed by Mark Dickinson; issue
     7279(22).)

   * The *note difflib: 82. module now produces output that is more
     compatible with modern *diff*/*patch* tools through one small
     change, using a tab character instead of spaces as a separator in
     the header giving the filename.  (Fixed by Anatoly Techtonik;
     issue 7585(23).)

   * The Distutils `sdist' command now always regenerates the
     `MANIFEST' file, since even if the `MANIFEST.in' or `setup.py'
     files haven't been modified, the user might have created some new
     files that should be included.  (Fixed by Tarek Ziadé; issue
     8688(24).)

   * The *note doctest: b5. module's `IGNORE_EXCEPTION_DETAIL' flag
     will now ignore the name of the module containing the exception
     being tested.  (Patch by Lennart Regebro; issue 7490(25).)

   * The *note email: bb. module's *note Message: 213. class will now
     accept a Unicode-valued payload, automatically converting the
     payload to the encoding specified by `output_charset'.  (Added by
     R. David Murray; issue 1368247(26).)

   * The *note Fraction: 214. class now accepts a single float or *note
     Decimal: 1b4. instance, or two rational numbers, as arguments to
     its constructor.  (Implemented by Mark Dickinson; rationals added
     in issue 5812(27), and float/decimal in issue 8294(28).)

     Ordering comparisons (`<', `<=', `>', `>=') between fractions and
     complex numbers now raise a *note TypeError: 215.  This fixes an
     oversight, making the *note Fraction: 214.  match the other
     numeric types.

   * New class: *note FTP_TLS: 216. in the *note ftplib: d8. module
     provides secure FTP connections using TLS encapsulation of
     authentication as well as subsequent control and data transfers.
     (Contributed by Giampaolo Rodola; issue 2054(29).)

     The *note storbinary(): 217. method for binary uploads can now
     restart uploads thanks to an added _rest_ parameter (patch by
     Pablo Mouzo; issue 6845(30).)

   * New class decorator: *note total_ordering(): 218. in the *note
     functools: d9.  module takes a class that defines an *note
     __eq__(): 219. method and one of *note __lt__(): 21a, *note
     __le__(): 21b, *note __gt__(): 21c, or *note __ge__(): 21d, and
     generates the missing comparison methods.  Since the *note
     __cmp__(): 21e. method is being deprecated in Python 3.x, this
     decorator makes it easier to define ordered classes.  (Added by
     Raymond Hettinger; issue 5479(31).)

     New function: *note cmp_to_key(): 21f. will take an old-style
     comparison function that expects two arguments and return a new
     callable that can be used as the _key_ parameter to functions such
     as *note sorted(): 220, *note min(): 221. and *note max(): 222,
     etc.  The primary intended use is to help with making code
     compatible with Python 3.x.  (Added by Raymond Hettinger.)

   * New function: the *note gc: db. module's *note is_tracked(): 223.
     returns true if a given instance is tracked by the garbage
     collector, false otherwise. (Contributed by Antoine Pitrou; issue
     4688(32).)

   * The *note gzip: e5. module's *note GzipFile: 224. now supports the
     context management protocol, so you can write `with
     gzip.GzipFile(...) as f:' (contributed by Hagen Fürstenau; issue
     3860(33)), and it now implements the *note io.BufferedIOBase: 225.
     ABC, so you can wrap it with *note io.BufferedReader: 226. for
     faster processing (contributed by Nir Aides; issue 7471(34)).
     It's also now possible to override the modification time recorded
     in a gzipped file by providing an optional timestamp to the
     constructor.  (Contributed by Jacques Frechet; issue 4272(35).)

     Files in gzip format can be padded with trailing zero bytes; the
     *note gzip: e5. module will now consume these trailing bytes.
     (Fixed by Tadek Pietraszek and Brian Curtin; issue 2846(36).)

   * New attribute: the *note hashlib: e6. module now has an *note
     algorithms: 227.  attribute containing a tuple naming the
     supported algorithms.  In Python 2.7, `hashlib.algorithms' contains
     `('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')'.
     (Contributed by Carl Chenet; issue 7418(37).)

   * The default *note HTTPResponse: 228. class used by the *note
     httplib: ee. module now supports buffering, resulting in much
     faster reading of HTTP responses.  (Contributed by Kristján Valur
     Jónsson; issue 4879(38).)

     The *note HTTPConnection: 229. and *note HTTPSConnection: 22a.
     classes now support a _source_address_ parameter, a `(host, port)'
     2-tuple giving the source address that will be used for the
     connection.  (Contributed by Eldon Ziegler; issue 3972(39).)

   * The `ihooks' module now supports relative imports.  Note that
     `ihooks' is an older module for customizing imports, superseded by
     the *note imputil: f7. module added in Python 2.0.  (Relative
     import support added by Neil Schemenauer.)

   * The *note imaplib: f2. module now supports IPv6 addresses.
     (Contributed by Derek Morr; issue 1655(40).)

   * New function: the *note inspect: f8. module's *note getcallargs():
     22b.  takes a callable and its positional and keyword arguments,
     and figures out which of the callable's parameters will receive
     each argument, returning a dictionary mapping argument names to
     their values.  For example:

         >>> from inspect import getcallargs
         >>> def f(a, b=1, *pos, **named):
         ...     pass
         >>> getcallargs(f, 1, 2, 3)
         {'a': 1, 'b': 2, 'pos': (3,), 'named': {}}
         >>> getcallargs(f, a=2, x=4)
         {'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}
         >>> getcallargs(f)
         Traceback (most recent call last):
         ...
         TypeError: f() takes at least 1 argument (0 given)

     Contributed by George Sakkis; issue 3135(41).

   * Updated module: The *note io: f9. library has been upgraded to the
     version shipped with Python 3.1.  For 3.1, the I/O library was
     entirely rewritten in C and is 2 to 20 times faster depending on
     the task being performed.  The original Python version was renamed
     to the `_pyio' module.

     One minor resulting change: the *note io.TextIOBase: 22c. class now
     has an `errors' attribute giving the error setting used for
     encoding and decoding errors (one of `'strict'', `'replace'',
     `'ignore'').

     The *note io.FileIO: 22d. class now raises an *note OSError: 22e.
     when passed an invalid file descriptor.  (Implemented by Benjamin
     Peterson; issue 4991(42).)  The *note truncate(): 22f. method now
     preserves the file position; previously it would change the file
     position to the end of the new file.  (Fixed by Pascal Chambon;
     issue 6939(43).)

   * New function: `itertools.compress(data, selectors)' takes two
     iterators.  Elements of _data_ are returned if the corresponding
     value in _selectors_ is true:

         itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>
           A, C, E, F


     New function: `itertools.combinations_with_replacement(iter, r)'
     returns all the possible _r_-length combinations of elements from
     the iterable _iter_.  Unlike *note combinations(): 230, individual
     elements can be repeated in the generated combinations:

         itertools.combinations_with_replacement('abc', 2) =>
           ('a', 'a'), ('a', 'b'), ('a', 'c'),
           ('b', 'b'), ('b', 'c'), ('c', 'c')

     Note that elements are treated as unique depending on their
     position in the input, not their actual values.

     The *note itertools.count(): 231. function now has a _step_
     argument that allows incrementing by values other than 1.  *note
     count(): 231. also now allows keyword arguments, and using
     non-integer values such as floats or *note Decimal: 1b4.
     instances.  (Implemented by Raymond Hettinger; issue 5032(44).)

     *note itertools.combinations(): 230. and *note
     itertools.product(): 232.  previously raised *note ValueError:
     233. for values of _r_ larger than the input iterable.  This was
     deemed a specification error, so they now return an empty
     iterator.  (Fixed by Raymond Hettinger; issue 4816(45).)

   * Updated module: The *note json: fc. module was upgraded to version
     2.0.9 of the simplejson package, which includes a C extension that
     makes encoding and decoding faster.  (Contributed by Bob Ippolito;
     issue 4136(46).)

     To support the new *note collections.OrderedDict: 1b5. type, *note
     json.load(): 234.  now has an optional _object_pairs_hook_
     parameter that will be called with any object literal that decodes
     to a list of pairs.  (Contributed by Raymond Hettinger; issue
     5381(47).)

   * The *note mailbox: 109. module's *note Maildir: 235. class now
     records the timestamp on the directories it reads, and only
     re-reads them if the modification time has subsequently changed.
     This improves performance by avoiding unneeded directory scans.
     (Fixed by A.M. Kuchling and Antoine Pitrou; issue 1607951(48),
     issue 6896(49).)

   * New functions: the *note math: 10c. module gained *note erf():
     236. and *note erfc(): 237. for the error function and the
     complementary error function, *note expm1(): 238. which computes
     `e**x - 1' with more precision than using *note exp(): 239. and
     subtracting 1, *note gamma(): 23a. for the Gamma function, and
     *note lgamma(): 23b. for the natural log of the Gamma function.
     (Contributed by Mark Dickinson and nirinA raseliarison; issue
     3366(50).)

   * The *note multiprocessing: 119. module's `Manager*' classes can
     now be passed a callable that will be called whenever a subprocess
     is started, along with a set of arguments that will be passed to
     the callable.  (Contributed by lekma; issue 5585(51).)

     The `Pool' class, which controls a pool of worker processes, now
     has an optional _maxtasksperchild_ parameter.  Worker processes
     will perform the specified number of tasks and then exit, causing
     the `Pool' to start a new worker.  This is useful if tasks may leak
     memory or other resources, or if some tasks will cause the worker
     to become very large.  (Contributed by Charles Cazabon; issue
     6963(52).)

   * The *note nntplib: 124. module now supports IPv6 addresses.
     (Contributed by Derek Morr; issue 1664(53).)

   * New functions: the *note os: 128. module wraps the following POSIX
     system calls: *note getresgid(): 23c. and *note getresuid(): 23d,
     which return the real, effective, and saved GIDs and UIDs; *note
     setresgid(): 23e. and *note setresuid(): 23f, which set real,
     effective, and saved GIDs and UIDs to new values; *note
     initgroups(): 240, which initialize the group access list for the
     current process.  (GID/UID functions contributed by Travis H.;
     issue 6508(54).  Support for initgroups added by Jean-Paul
     Calderone; issue 7333(55).)

     The *note os.fork(): 241. function now re-initializes the import
     lock in the child process; this fixes problems on Solaris when
     *note fork(): 241.  is called from a thread.  (Fixed by Zsolt
     Cserna; issue 7242(56).)

   * In the *note os.path: 129. module, the *note normpath(): 242. and
     *note abspath(): 243. functions now preserve Unicode; if their
     input path is a Unicode string, the return value is also a Unicode
     string.  (*note normpath(): 242. fixed by Matt Giuca in issue
     5827(57); *note abspath(): 243. fixed by Ezio Melotti in issue
     3426(58).)

   * The *note pydoc: 13f. module now has help for the various symbols
     that Python uses.  You can now do `help('<<')' or `help('@')', for
     example.  (Contributed by David Laban; issue 4739(59).)

   * The *note re: 143. module's *note split(): 244, *note sub(): 245,
     and *note subn(): 246.  now accept an optional _flags_ argument,
     for consistency with the other functions in the module.  (Added by
     Gregory P. Smith.)

   * New function: *note run_path(): 247. in the *note runpy: 14b.
     module will execute the code at a provided _path_ argument.
     _path_ can be the path of a Python source file (`example.py'), a
     compiled bytecode file (`example.pyc'), a directory
     (`./package/'), or a zip archive (`example.zip').  If a directory
     or zip path is provided, it will be added to the front of
     `sys.path' and the module *note __main__: 2. will be imported.
     It's expected that the directory or zip contains a `__main__.py';
     if it doesn't, some other `__main__.py' might be imported from a
     location later in `sys.path'.  This makes more of the machinery of
     *note runpy: 14b. available to scripts that want to mimic the way
     Python's command line processes an explicit path name.  (Added by
     Nick Coghlan; issue 6816(60).)

   * New function: in the *note shutil: 154. module, *note
     make_archive(): 248.  takes a filename, archive type (zip or
     tar-format), and a directory path, and creates an archive
     containing the directory's contents.  (Added by Tarek Ziadé.)

     *note shutil: 154.'s *note copyfile(): 249. and *note copytree():
     24a.  functions now raise a `SpecialFileError' exception when
     asked to copy a named pipe.  Previously the code would treat named
     pipes like a regular file by opening them for reading, and this
     would block indefinitely.  (Fixed by Antoine Pitrou; issue
     3002(61).)

   * The *note signal: 155. module no longer re-installs the signal
     handler unless this is truly necessary, which fixes a bug that
     could make it impossible to catch the EINTR signal robustly.
     (Fixed by Charles-Francois Natali; issue 8354(62).)

   * New functions: in the *note site: 158. module, three new functions
     return various site- and user-specific paths.  *note
     getsitepackages(): 24b. returns a list containing all global
     site-packages directories, *note getusersitepackages(): 24c.
     returns the path of the user's site-packages directory, and *note
     getuserbase(): 24d. returns the value of the `USER_BASE'
     environment variable, giving the path to a directory that can be
     used to store data.  (Contributed by Tarek Ziadé; issue 6693(63).)

     The *note site: 158. module now reports exceptions occurring when
     the `sitecustomize' module is imported, and will no longer catch
     and swallow the *note KeyboardInterrupt: 24e. exception.  (Fixed by
     Victor Stinner; issue 3137(64).)

   * The *note create_connection(): 24f. function gained a
     _source_address_ parameter, a `(host, port)' 2-tuple giving the
     source address that will be used for the connection.  (Contributed
     by Eldon Ziegler; issue 3972(65).)

     The *note recv_into(): 250. and *note recvfrom_into(): 251.
     methods will now write into objects that support the buffer API,
     most usefully the *note bytearray: 1f4. and *note memoryview: 1c0.
     objects.  (Implemented by Antoine Pitrou; issue 8104(66).)

   * The *note SocketServer: 15d. module's `TCPServer' class now
     supports socket timeouts and disabling the Nagle algorithm.  The
     `disable_nagle_algorithm' class attribute defaults to False; if
     overridden to be True, new request connections will have the
     TCP_NODELAY option set to prevent buffering many small sends into
     a single TCP packet.  The *note timeout: 252. class attribute can
     hold a timeout in seconds that will be applied to the request
     socket; if no request is received within that time, *note
     handle_timeout(): 253.  will be called and *note handle_request():
     254. will return.  (Contributed by Kristján Valur Jónsson; issue
     6192(67) and issue 6267(68).)

   * Updated module: the *note sqlite3: 15f. module has been updated to
     version 2.6.0 of the pysqlite package(69). Version 2.6.0 includes
     a number of bugfixes, and adds the ability to load SQLite
     extensions from shared libraries.  Call the
     `enable_load_extension(True)' method to enable extensions, and
     then call *note load_extension(): 255. to load a particular shared
     library.  (Updated by Gerhard Häring.)

   * The *note ssl: 160. module's `SSLSocket' objects now support the
     buffer API, which fixed a test suite failure (fix by Antoine
     Pitrou; issue 7133(70)) and automatically set OpenSSL's
     `SSL_MODE_AUTO_RETRY', which will prevent an error code being
     returned from `recv()' operations that trigger an SSL
     renegotiation (fix by Antoine Pitrou; issue 8222(71)).

     The *note ssl.wrap_socket(): 256. constructor function now takes a
     _ciphers_ argument that's a string listing the encryption
     algorithms to be allowed; the format of the string is described in
     the OpenSSL documentation(72).  (Added by Antoine Pitrou; issue
     8322(73).)

     Another change makes the extension load all of OpenSSL's ciphers
     and digest algorithms so that they're all available.  Some SSL
     certificates couldn't be verified, reporting an "unknown algorithm"
     error.  (Reported by Beda Kosata, and fixed by Antoine Pitrou;
     issue 8484(74).)

     The version of OpenSSL being used is now available as the module
     attributes *note ssl.OPENSSL_VERSION: 257. (a string), *note
     ssl.OPENSSL_VERSION_INFO: 258. (a 5-tuple), and *note
     ssl.OPENSSL_VERSION_NUMBER: 259. (an integer).  (Added by Antoine
     Pitrou; issue 8321(75).)

   * The *note struct: 166. module will no longer silently ignore
     overflow errors when a value is too large for a particular integer
     format code (one of `bBhHiIlLqQ'); it now always raises a *note
     struct.error: 25a. exception.  (Changed by Mark Dickinson; issue
     1523(76).)  The *note pack(): 25b. function will also attempt to
     use *note __index__(): 25c. to convert and pack non-integers
     before trying the *note __int__(): 25d. method or reporting an
     error.  (Changed by Mark Dickinson; issue 8300(77).)

   * New function: the *note subprocess: 167. module's *note
     check_output(): 25e. runs a command with a specified set of
     arguments and returns the command's output as a string when the
     command runs without error, or raises a *note CalledProcessError:
     25f. exception otherwise.

         >>> subprocess.check_output(['df', '-h', '.'])
         'Filesystem     Size   Used  Avail Capacity  Mounted on\n
         /dev/disk0s2    52G    49G   3.0G    94%    /\n'

         >>> subprocess.check_output(['df', '-h', '/bogus'])
           ...
         subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1

     (Contributed by Gregory P. Smith.)

     The *note subprocess: 167. module will now retry its internal
     system calls on receiving an `EINTR' signal.  (Reported by several
     people; final patch by Gregory P. Smith in issue 1068268(78).)

   * New function: *note is_declared_global(): 260. in the *note
     symtable: 16c. module returns true for variables that are
     explicitly declared to be global, false for ones that are
     implicitly global.  (Contributed by Jeremy Hylton.)

   * The *note syslog: 16f. module will now use the value of
     `sys.argv[0]' as the identifier instead of the previous default
     value of `'python''.  (Changed by Sean Reifschneider; issue
     8451(79).)

   * The `sys.version_info' value is now a named tuple, with attributes
     named `major', `minor', `micro', `releaselevel', and `serial'.
     (Contributed by Ross Light; issue 4285(80).)

     *note sys.getwindowsversion(): 261. also returns a named tuple,
     with attributes named `major', `minor', `build', *note platform:
     132, `service_pack', `service_pack_major', `service_pack_minor',
     `suite_mask', and `product_type'.  (Contributed by Brian Curtin;
     issue 7766(81).)

   * The *note tarfile: 171. module's default error handling has
     changed, to no longer suppress fatal errors.  The default error
     level was previously 0, which meant that errors would only result
     in a message being written to the debug log, but because the debug
     log is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there's
     an error.  (Changed by Lars Gustäbel; issue 7357(82).)

     *note tarfile: 171. now supports filtering the *note TarInfo: 262.
     objects being added to a tar file.  When you call *note add(): 263,
     you may supply an optional _filter_ argument that's a callable.
     The _filter_ callable will be passed the *note TarInfo: 262. for
     every file being added, and can modify and return it.  If the
     callable returns `None', the file will be excluded from the
     resulting archive.  This is more powerful than the existing
     _exclude_ argument, which has therefore been deprecated.  (Added
     by Lars Gustäbel; issue 6856(83).)  The *note TarFile: 264. class
     also now supports the context manager protocol.  (Added by Lars
     Gustäbel; issue 7232(84).)

   * The *note wait(): 265. method of the *note threading.Event: 266.
     class now returns the internal flag on exit.  This means the
     method will usually return true because *note wait(): 265. is
     supposed to block until the internal flag becomes true.  The
     return value will only be false if a timeout was provided and the
     operation timed out.  (Contributed by Tim Lesher; issue
     1674032(85).)

   * The Unicode database provided by the *note unicodedata: 186.
     module is now used internally to determine which characters are
     numeric, whitespace, or represent line breaks.  The database also
     includes information from the `Unihan.txt' data file (patch by
     Anders Chrigström and Amaury Forgeot d'Arc; issue 1571184(86)) and
     has been updated to version 5.2.0 (updated by Florent Xicluna;
     issue 8024(87)).

   * The *note urlparse: 18a. module's *note urlsplit(): 267. now
     handles unknown URL schemes in a fashion compliant with RFC
     3986(88): if the URL is of the form `"<something>://..."', the
     text before the `://' is treated as the scheme, even if it's a
     made-up scheme that the module doesn't know about.  This change
     may break code that worked around the old behaviour.  For example,
     Python 2.6.4 or 2.5 will return the following:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

     The *note urlparse: 18a. module also supports IPv6 literal
     addresses as defined by RFC 2732(89) (contributed by Senthil
     Kumaran; issue 2987(90)).

         >>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo')
         ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',
                     path='/foo', params='', query='', fragment='')


   * New class: the *note WeakSet: 268. class in the *note weakref: 195.
     module is a set that only holds weak references to its elements;
     elements will be removed once there are no references pointing to
     them.  (Originally implemented in Python 3.x by Raymond Hettinger,
     and backported to 2.7 by Michael Foord.)

   * The ElementTree library, `xml.etree', no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like `<?xml-stylesheet href="#style1"?>') or comment
     (which looks like `<!-- comment -->').  (Patch by Neil Muller;
     issue 2746(91).)

   * The XML-RPC client and server, provided by the *note xmlrpclib:
     1aa. and *note SimpleXMLRPCServer: 157. modules, have improved
     performance by supporting HTTP/1.1 keep-alive and by optionally
     using gzip encoding to compress the XML being exchanged.  The gzip
     compression is controlled by the `encode_threshold' attribute of
     `SimpleXMLRPCRequestHandler', which contains a size in bytes;
     responses larger than this will be compressed.  (Contributed by
     Kristján Valur Jónsson; issue 6267(92).)

   * The *note zipfile: 1ab. module's *note ZipFile: 269. now supports
     the context management protocol, so you can write `with
     zipfile.ZipFile(...) as f:'.  (Contributed by Brian Curtin; issue
     5511(93).)

     *note zipfile: 1ab. now also supports archiving empty directories
     and extracts them correctly.  (Fixed by Kuba Wieczorek; issue
     4710(94).)  Reading files out of an archive is faster, and
     interleaving *note read(): 26a. and `readline()' now works
     correctly.  (Contributed by Nir Aides; issue 7610(95).)

     The *note is_zipfile(): 26b. function now accepts a file object,
     in addition to the path names accepted in earlier versions.
     (Contributed by Gabriel Genellina; issue 4756(96).)

     The *note writestr(): 26c. method now has an optional
     _compress_type_ parameter that lets you override the default
     compression method specified in the *note ZipFile: 269.
     constructor.  (Contributed by Ronald Oussoren; issue 6003(97).)

* Menu:

* New module; importlib: New module importlib.
* New module; sysconfig: New module sysconfig.
* ttk; Themed Widgets for Tk: ttk Themed Widgets for Tk.
* Updated module; unittest: Updated module unittest.
* Updated module; ElementTree 1.3: Updated module ElementTree 1 3.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5142

  (2) http://bugs.python.org/issue7703

  (3) http://www.jcea.es/programacion/pybsddb.htm

  (4) http://bugs.python.org/issue8156

  (5) http://bugs.python.org/issue3860

  (6) http://bugs.python.org/issue1696199

  (7) http://bugs.python.org/issue1818

  (8) http://bugs.python.org/issue8729

  (9) http://bugs.python.org/issue7005

  (10) http://bugs.python.org/issue3924

  (11) http://bugs.python.org/issue1515

  (12) http://bugs.python.org/issue4606

  (13) http://sourceware.org/libffi/

  (14) http://bugs.python.org/issue8142

  (15) http://bugs.python.org/issue5788

  (16) http://bugs.python.org/issue4796

  (17) http://bugs.python.org/issue2531

  (18) http://bugs.python.org/issue8257

  (19) http://bugs.python.org/issue6595

  (20) http://bugs.python.org/issue7633

  (21) http://bugs.python.org/issue6857

  (22) http://bugs.python.org/issue7279

  (23) http://bugs.python.org/issue7585

  (24) http://bugs.python.org/issue8688

  (25) http://bugs.python.org/issue7490

  (26) http://bugs.python.org/issue1368247

  (27) http://bugs.python.org/issue5812

  (28) http://bugs.python.org/issue8294

  (29) http://bugs.python.org/issue2054

  (30) http://bugs.python.org/issue6845

  (31) http://bugs.python.org/issue5479

  (32) http://bugs.python.org/issue4688

  (33) http://bugs.python.org/issue3860

  (34) http://bugs.python.org/issue7471

  (35) http://bugs.python.org/issue4272

  (36) http://bugs.python.org/issue2846

  (37) http://bugs.python.org/issue7418

  (38) http://bugs.python.org/issue4879

  (39) http://bugs.python.org/issue3972

  (40) http://bugs.python.org/issue1655

  (41) http://bugs.python.org/issue3135

  (42) http://bugs.python.org/issue4991

  (43) http://bugs.python.org/issue6939

  (44) http://bugs.python.org/issue5032

  (45) http://bugs.python.org/issue4816

  (46) http://bugs.python.org/issue4136

  (47) http://bugs.python.org/issue5381

  (48) http://bugs.python.org/issue1607951

  (49) http://bugs.python.org/issue6896

  (50) http://bugs.python.org/issue3366

  (51) http://bugs.python.org/issue5585

  (52) http://bugs.python.org/issue6963

  (53) http://bugs.python.org/issue1664

  (54) http://bugs.python.org/issue6508

  (55) http://bugs.python.org/issue7333

  (56) http://bugs.python.org/issue7242

  (57) http://bugs.python.org/issue5827

  (58) http://bugs.python.org/issue3426

  (59) http://bugs.python.org/issue4739

  (60) http://bugs.python.org/issue6816

  (61) http://bugs.python.org/issue3002

  (62) http://bugs.python.org/issue8354

  (63) http://bugs.python.org/issue6693

  (64) http://bugs.python.org/issue3137

  (65) http://bugs.python.org/issue3972

  (66) http://bugs.python.org/issue8104

  (67) http://bugs.python.org/issue6192

  (68) http://bugs.python.org/issue6267

  (69) http://code.google.com/p/pysqlite/

  (70) http://bugs.python.org/issue7133

  (71) http://bugs.python.org/issue8222

  (72) http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT

  (73) http://bugs.python.org/issue8322

  (74) http://bugs.python.org/issue8484

  (75) http://bugs.python.org/issue8321

  (76) http://bugs.python.org/issue1523

  (77) http://bugs.python.org/issue8300

  (78) http://bugs.python.org/issue1068268

  (79) http://bugs.python.org/issue8451

  (80) http://bugs.python.org/issue4285

  (81) http://bugs.python.org/issue7766

  (82) http://bugs.python.org/issue7357

  (83) http://bugs.python.org/issue6856

  (84) http://bugs.python.org/issue7232

  (85) http://bugs.python.org/issue1674032

  (86) http://bugs.python.org/issue1571184

  (87) http://bugs.python.org/issue8024

  (88) http://tools.ietf.org/html/rfc3986.html

  (89) http://tools.ietf.org/html/rfc2732.html

  (90) http://bugs.python.org/issue2987

  (91) http://bugs.python.org/issue2746

  (92) http://bugs.python.org/issue6267

  (93) http://bugs.python.org/issue5511

  (94) http://bugs.python.org/issue4710

  (95) http://bugs.python.org/issue7610

  (96) http://bugs.python.org/issue4756

  (97) http://bugs.python.org/issue6003


File: python.info,  Node: New module importlib,  Next: New module sysconfig,  Up: New and Improved Modules

1.1.10.1 New module: importlib
..............................

Python 3.1 includes the *note importlib: f6. package, a
re-implementation of the logic underlying Python's *note import: 1f1.
statement.  *note importlib: f6. is useful for implementors of Python
interpreters and to users who wish to write new importers that can
participate in the import process.  Python 2.7 doesn't contain the
complete *note importlib: f6. package, but instead has a tiny subset
that contains a single function, *note import_module(): 26e.

  `import_module(name, package=None)' imports a module.  _name_ is a
string containing the module or package's name.  It's possible to do
relative imports by providing a string that begins with a `.'
character, such as `..utils.errors'.  For relative imports, the
_package_ argument must be provided and is the name of the package that
will be used as the anchor for the relative import.  *note
import_module(): 26e. both inserts the imported module into
`sys.modules' and returns the module object.

  Here are some examples:

    >>> from importlib import import_module
    >>> anydbm = import_module('anydbm')  # Standard absolute import
    >>> anydbm
    <module 'anydbm' from '/p/python/Lib/anydbm.py'>
    >>> # Relative import
    >>> file_util = import_module('..file_util', 'distutils.command')
    >>> file_util
    <module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>

*note importlib: f6. was implemented by Brett Cannon and introduced in
Python 3.1.


File: python.info,  Node: New module sysconfig,  Next: ttk Themed Widgets for Tk,  Prev: New module importlib,  Up: New and Improved Modules

1.1.10.2 New module: sysconfig
..............................

The *note sysconfig: 16e. module has been pulled out of the Distutils
package, becoming a new top-level module in its own right.  *note
sysconfig: 16e. provides functions for getting information about
Python's build process: compiler switches, installation paths, the
platform name, and whether Python is running from its source directory.

  Some of the functions in the module are:

   * *note get_config_var(): 270. returns variables from Python's
     Makefile and the `pyconfig.h' file.

   * *note get_config_vars(): 271. returns a dictionary containing all
     of the configuration variables.

   * *note get_path(): 272. returns the configured path for a
     particular type of module: the standard library, site-specific
     modules, platform-specific modules, etc.

   * *note is_python_build(): 273. returns true if you're running a
     binary from a Python source tree, and false otherwise.

  Consult the *note sysconfig: 16e. documentation for more details and
for a complete list of functions.

  The Distutils package and *note sysconfig: 16e. are now maintained by
Tarek Ziadé, who has also started a Distutils2 package (source
repository at <http://hg.python.org/distutils2/>) for developing a
next-generation version of Distutils.


File: python.info,  Node: ttk Themed Widgets for Tk,  Next: Updated module unittest,  Prev: New module sysconfig,  Up: New and Improved Modules

1.1.10.3 ttk: Themed Widgets for Tk
...................................

Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk
widgets but have a more customizable appearance and can therefore more
closely resemble the native platform's widgets.  This widget set was
originally called Tile, but was renamed to Ttk (for "themed Tk") on
being added to Tcl/Tck release 8.5.

  To learn more, read the *note ttk: 182. module documentation.  You
may also wish to read the Tcl/Tk manual page describing the Ttk theme
engine, available at
<http://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm>. Some screenshots of
the Python/Ttk code in use are at
<http://code.google.com/p/python-ttk/wiki/Screenshots>.

  The *note ttk: 182. module was written by Guilherme Polo and added in
issue 2983(1).  An alternate version called `Tile.py', written by
Martin Franklin and maintained by Kevin Walzer, was proposed for
inclusion in issue 2618(2), but the authors argued that Guilherme
Polo's work was more comprehensive.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2983

  (2) http://bugs.python.org/issue2618


File: python.info,  Node: Updated module unittest,  Next: Updated module ElementTree 1 3,  Prev: ttk Themed Widgets for Tk,  Up: New and Improved Modules

1.1.10.4 Updated module: unittest
.................................

The *note unittest: 187. module was greatly enhanced; many new features
were added.  Most of these features were implemented by Michael Foord,
unless otherwise noted.  The enhanced version of the module is
downloadable separately for use with Python versions 2.4 to 2.6,
packaged as the `unittest2' package, from
<http://pypi.python.org/pypi/unittest2>.

  When used from the command line, the module can automatically discover
tests.  It's not as fancy as py.test(1) or nose(2), but provides a
simple way to run tests kept within a set of package directories.  For
example, the following command will search the `test/' subdirectory for
any importable test files named `test*.py':

    python -m unittest discover -s test

Consult the *note unittest: 187. module documentation for more details.
(Developed in issue 6001(3).)

  The *note main(): 277. function supports some other new options:

   * `-b' or `--buffer' will buffer the standard output and standard
     error streams during each test.  If the test passes, any resulting
     output will be discarded; on failure, the buffered output will be
     displayed.

   * *note -c: 278. or `--catch' will cause the control-C interrupt to
     be handled more gracefully.  Instead of interrupting the test
     process immediately, the currently running test will be completed
     and then the partial results up to the interruption will be
     reported.  If you're impatient, a second press of control-C will
     cause an immediate interruption.

     This control-C handler tries to avoid causing problems when the
     code being tested or the tests being run have defined a signal
     handler of their own, by noticing that a signal handler was
     already set and calling it.  If this doesn't work for you, there's
     a *note removeHandler(): 279. decorator that can be used to mark
     tests that should have the control-C handling disabled.

   * `-f' or `--failfast' makes test execution stop immediately when a
     test fails instead of continuing to execute further tests.
     (Suggested by Cliff Dyer and implemented by Michael Foord; issue
     8074(4).)

  The progress messages now show 'x' for expected failures and 'u' for
unexpected successes when run in verbose mode.  (Contributed by
Benjamin Peterson.)

  Test cases can raise the *note SkipTest: 27a. exception to skip a
test (issue 1034053(5)).

  The error messages for *note assertEqual(): 27b, *note assertTrue():
27c, and *note assertFalse(): 27d.  failures now provide more
information.  If you set the *note longMessage: 27e. attribute of your
*note TestCase: 27f. classes to True, both the standard error message
and any additional message you provide will be printed for failures.
(Added by Michael Foord; issue 5663(6).)

  The *note assertRaises(): 280. method now returns a context handler
when called without providing a callable object to run.  For example,
you can write this:

    with self.assertRaises(KeyError):
        {}['foo']

(Implemented by Antoine Pitrou; issue 4444(7).)

  Module- and class-level setup and teardown fixtures are now supported.
Modules can contain `setUpModule()' and `tearDownModule()' functions.
Classes can have *note setUpClass(): 281. and *note tearDownClass():
282. methods that must be defined as class methods (using
`@classmethod' or equivalent).  These functions and methods are invoked
when the test runner switches to a test case in a different module or
class.

  The methods *note addCleanup(): 283. and *note doCleanups(): 284.
were added.  *note addCleanup(): 283. lets you add cleanup functions
that will be called unconditionally (after *note setUp(): 285. if *note
setUp(): 285. fails, otherwise after *note tearDown(): 286.). This
allows for much simpler resource allocation and deallocation during
tests (issue 5679(8)).

  A number of new methods were added that provide more specialized
tests.  Many of these methods were written by Google engineers for use
in their test suites; Gregory P. Smith, Michael Foord, and GvR worked
on merging them into Python's version of *note unittest: 187.

   * *note assertIsNone(): 287. and *note assertIsNotNone(): 288. take
     one expression and verify that the result is or is not `None'.

   * *note assertIs(): 289. and *note assertIsNot(): 28a.  take two
     values and check whether the two values evaluate to the same
     object or not.  (Added by Michael Foord; issue 2578(9).)

   * *note assertIsInstance(): 28b. and *note assertNotIsInstance():
     28c. check whether the resulting object is an instance of a
     particular class, or of one of a tuple of classes.  (Added by
     Georg Brandl; issue 7031(10).)

   * *note assertGreater(): 28d, *note assertGreaterEqual(): 28e, *note
     assertLess(): 28f, and *note assertLessEqual(): 290. compare two
     quantities.

   * *note assertMultiLineEqual(): 291. compares two strings, and if
     they're not equal, displays a helpful comparison that highlights
     the differences in the two strings.  This comparison is now used by
     default when Unicode strings are compared with *note
     assertEqual(): 27b.

   * *note assertRegexpMatches(): 292. and *note
     assertNotRegexpMatches(): 293. checks whether the first argument
     is a string matching or not matching the regular expression
     provided as the second argument (issue 8038(11)).

   * *note assertRaisesRegexp(): 294. checks whether a particular
     exception is raised, and then also checks that the string
     representation of the exception matches the provided regular
     expression.

   * *note assertIn(): 295. and *note assertNotIn(): 296.  tests
     whether _first_ is or is not in  _second_.

   * *note assertItemsEqual(): 297. tests whether two provided sequences
     contain the same elements.

   * *note assertSetEqual(): 298. compares whether two sets are equal,
     and only reports the differences between the sets in case of error.

   * Similarly, *note assertListEqual(): 299. and *note
     assertTupleEqual(): 29a.  compare the specified types and explain
     any differences without necessarily printing their full values;
     these methods are now used by default when comparing lists and
     tuples using *note assertEqual(): 27b.  More generally, *note
     assertSequenceEqual(): 29b. compares two sequences and can
     optionally check whether both sequences are of a particular type.

   * *note assertDictEqual(): 29c. compares two dictionaries and
     reports the differences; it's now used by default when you compare
     two dictionaries using *note assertEqual(): 27b.  *note
     assertDictContainsSubset(): 29d. checks whether all of the
     key/value pairs in _first_ are found in _second_.

   * *note assertAlmostEqual(): 29e. and *note assertNotAlmostEqual():
     29f. test whether _first_ and _second_ are approximately equal.
     This method can either round their difference to an
     optionally-specified number of _places_ (the default is 7) and
     compare it to zero, or require the difference to be smaller than a
     supplied _delta_ value.

   * *note loadTestsFromName(): 2a0. properly honors the *note
     suiteClass: 2a1. attribute of the *note TestLoader: 2a2. (Fixed by
     Mark Roddy; issue 6866(12).)

   * A new hook lets you extend the *note assertEqual(): 27b. method to
     handle new data types.  The *note addTypeEqualityFunc(): 2a3.
     method takes a type object and a function. The function will be
     used when both of the objects being compared are of the specified
     type.  This function should compare the two objects and raise an
     exception if they don't match; it's a good idea for the function
     to provide additional information about why the two objects aren't
     matching, much as the new sequence comparison methods do.

  *note unittest.main(): 277. now takes an optional `exit' argument.  If
False, *note main(): 277. doesn't call *note sys.exit(): 2a4, allowing
*note main(): 277. to be used from the interactive interpreter.
(Contributed by J. Pablo Fernández; issue 3379(13).)

  *note TestResult: 2a5. has new *note startTestRun(): 2a6. and *note
stopTestRun(): 2a7. methods that are called immediately before and
after a test run.  (Contributed by Robert Collins; issue 5728(14).)

  With all these changes, the `unittest.py' was becoming awkwardly
large, so the module was turned into a package and the code split into
several files (by Benjamin Peterson).  This doesn't affect how the
module is imported or used.

See also
........

<http://www.voidspace.org.uk/python/articles/unittest2.shtml>
     Describes the new features, how to use them, and the rationale for
     various design decisions.  (By Michael Foord.)

  ---------- Footnotes ----------

  (1) http://pytest.org

  (2) http://code.google.com/p/python-nose/

  (3) http://bugs.python.org/issue6001

  (4) http://bugs.python.org/issue8074

  (5) http://bugs.python.org/issue1034053

  (6) http://bugs.python.org/issue5663

  (7) http://bugs.python.org/issue4444

  (8) http://bugs.python.org/issue5679

  (9) http://bugs.python.org/issue2578

  (10) http://bugs.python.org/issue7031

  (11) http://bugs.python.org/issue8038

  (12) http://bugs.python.org/issue6866

  (13) http://bugs.python.org/issue3379

  (14) http://bugs.python.org/issue5728


File: python.info,  Node: Updated module ElementTree 1 3,  Prev: Updated module unittest,  Up: New and Improved Modules

1.1.10.5 Updated module: ElementTree 1.3
........................................

The version of the ElementTree library included with Python was updated
to version 1.3.  Some of the new features are:

   * The various parsing functions now take a _parser_ keyword argument
     giving an *note XMLParser: 2aa. instance that will be used.  This
     makes it possible to override the file's internal encoding:

         p = ET.XMLParser(encoding='utf-8')
         t = ET.XML("""<root/>""", parser=p)

     Errors in parsing XML now raise a `ParseError' exception, whose
     instances have a `position' attribute containing a (_line_,
     _column_) tuple giving the location of the problem.

   * ElementTree's code for converting trees to a string has been
     significantly reworked, making it roughly twice as fast in many
     cases.  The *note ElementTree.write(): 2ab.  and `Element.write()'
     methods now have a _method_ parameter that can be "xml" (the
     default), "html", or "text".  HTML mode will output empty elements
     as `<empty></empty>' instead of `<empty/>', and text mode will
     skip over elements and only output the text chunks.  If you set
     the `tag' attribute of an element to `None' but leave its children
     in place, the element will be omitted when the tree is written
     out, so you don't need to do more extensive rearrangement to
     remove a single element.

     Namespace handling has also been improved.  All `xmlns:<whatever>'
     declarations are now output on the root element, not scattered
     throughout the resulting XML.  You can set the default namespace
     for a tree by setting the `default_namespace' attribute and can
     register new prefixes with *note register_namespace(): 2ac.  In
     XML mode, you can use the true/false _xml_declaration_ parameter
     to suppress the XML declaration.

   * New *note Element: 2ad. method: *note extend(): 2ae. appends the
     items from a sequence to the element's children.  Elements
     themselves behave like sequences, so it's easy to move children
     from one element to another:

         from xml.etree import ElementTree as ET

         t = ET.XML("""<list>
           <item>1</item> <item>2</item>  <item>3</item>
         </list>""")
         new = ET.XML('<root/>')
         new.extend(t)

         # Outputs <root><item>1</item>...</root>
         print ET.tostring(new)


   * New `Element' method: *note iter(): 2af. yields the children of the
     element as a generator.  It's also possible to write `for child in
     elem:' to loop over an element's children.  The existing method
     `getiterator()' is now deprecated, as is `getchildren()' which
     constructs and returns a list of children.

   * New `Element' method: *note itertext(): 2b0. yields all chunks of
     text that are descendants of the element.  For example:

         t = ET.XML("""<list>
           <item>1</item> <item>2</item>  <item>3</item>
         </list>""")

         # Outputs ['\n  ', '1', ' ', '2', '  ', '3', '\n']
         print list(t.itertext())


   * Deprecated: using an element as a Boolean (i.e., `if elem:') would
     return true if the element had any children, or false if there were
     no children.  This behaviour is confusing - `None' is false, but
     so is a childless element? - so it will now trigger a *note
     FutureWarning: 2b1.  In your code, you should be explicit: write
     `len(elem) != 0' if you're interested in the number of children,
     or `elem is not None'.

  Fredrik Lundh develops ElementTree and produced the 1.3 version; you
can read his article describing 1.3 at
<http://effbot.org/zone/elementtree-13-intro.htm>.  Florent Xicluna
updated the version included with Python, after discussions on
python-dev and in issue 6472(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue6472


File: python.info,  Node: Build and C API Changes,  Next: Other Changes and Fixes,  Prev: New and Improved Modules,  Up: What's New in Python 2 7

1.1.11 Build and C API Changes
------------------------------

Changes to Python's build process and to the C API include:

   * The latest release of the GNU Debugger, GDB 7, can be scripted
     using Python(1).  When you begin debugging an executable program
     P, GDB will look for a file named `P-gdb.py' and automatically
     read it.  Dave Malcolm contributed a `python-gdb.py' that adds a
     number of commands useful when debugging Python itself.  For
     example, `py-up' and `py-down' go up or down one Python stack
     frame, which usually corresponds to several C stack frames.
     `py-print' prints the value of a Python variable, and `py-bt'
     prints the Python stack trace.  (Added as a result of issue
     8032(2).)

   * If you use the `.gdbinit' file provided with Python, the "pyo"
     macro in the 2.7 version now works correctly when the thread being
     debugged doesn't hold the GIL; the macro now acquires it before
     printing.  (Contributed by Victor Stinner; issue 3632(3).)

   * *note Py_AddPendingCall(): 2b3. is now thread-safe, letting any
     worker thread submit notifications to the main Python thread.  This
     is particularly useful for asynchronous IO operations.
     (Contributed by Kristján Valur Jónsson; issue 4293(4).)

   * New function: *note PyCode_NewEmpty(): 2b4. creates an empty code
     object; only the filename, function name, and first line number
     are required.  This is useful for extension modules that are
     attempting to construct a more useful traceback stack.  Previously
     such extensions needed to call *note PyCode_New(): 2b5, which had
     many more arguments.  (Added by Jeffrey Yasskin.)

   * New function: *note PyErr_NewExceptionWithDoc(): 2b6. creates a new
     exception class, just as the existing *note PyErr_NewException():
     2b7. does, but takes an extra `char *' argument containing the
     docstring for the new exception class.  (Added by 'lekma' on the
     Python bug tracker; issue 7033(5).)

   * New function: *note PyFrame_GetLineNumber(): 2b8. takes a frame
     object and returns the line number that the frame is currently
     executing.  Previously code would need to get the index of the
     bytecode instruction currently executing, and then look up the
     line number corresponding to that address.  (Added by Jeffrey
     Yasskin.)

   * New functions: *note PyLong_AsLongAndOverflow(): 1c4. and *note
     PyLong_AsLongLongAndOverflow(): 2b9.  approximates a Python long
     integer as a C `long' or `long long'.  If the number is too large
     to fit into the output type, an _overflow_ flag is set and
     returned to the caller.  (Contributed by Case Van Horsen; issue
     7528(6) and issue 7767(7).)

   * New function: stemming from the rewrite of string-to-float
     conversion, a new *note PyOS_string_to_double(): 2ba. function was
     added.  The old *note PyOS_ascii_strtod(): 2bb. and *note
     PyOS_ascii_atof(): 2bc. functions are now deprecated.

   * New function: *note PySys_SetArgvEx(): 2bd. sets the value of
     `sys.argv' and can optionally update `sys.path' to include the
     directory containing the script named by `sys.argv[0]' depending
     on the value of an _updatepath_ parameter.

     This function was added to close a security hole for applications
     that embed Python.  The old function, *note PySys_SetArgv(): 2be,
     would always update `sys.path', and sometimes it would add the
     current directory.  This meant that, if you ran an application
     embedding Python in a directory controlled by someone else,
     attackers could put a Trojan-horse module in the directory (say, a
     file named `os.py') that your application would then import and
     run.

     If you maintain a C/C++ application that embeds Python, check
     whether you're calling *note PySys_SetArgv(): 2be. and carefully
     consider whether the application should be using *note
     PySys_SetArgvEx(): 2bd.  with _updatepath_ set to false.

     Security issue reported as CVE-2008-5983(8); discussed in issue
     5753(9), and fixed by Antoine Pitrou.

   * New macros: the Python header files now define the following
     macros: `Py_ISALNUM', `Py_ISALPHA', `Py_ISDIGIT', `Py_ISLOWER',
     `Py_ISSPACE', `Py_ISUPPER', `Py_ISXDIGIT', `Py_TOLOWER', and
     `Py_TOUPPER'.  All of these functions are analogous to the C
     standard macros for classifying characters, but ignore the current
     locale setting, because in several places Python needs to analyze
     characters in a locale-independent way.  (Added by Eric Smith;
     issue 5793(10).)

   * Removed function: `PyEval_CallObject' is now only available as a
     macro.  A function version was being kept around to preserve ABI
     linking compatibility, but that was in 1997; it can certainly be
     deleted by now.  (Removed by Antoine Pitrou; issue 8276(11).)

   * New format codes: the `PyFormat_FromString()',
     `PyFormat_FromStringV()', and *note PyErr_Format(): 2bf. functions
     now accept `%lld' and `%llu' format codes for displaying C's `long
     long' types.  (Contributed by Mark Dickinson; issue 7228(12).)

   * The complicated interaction between threads and process forking has
     been changed.  Previously, the child process created by *note
     os.fork(): 241. might fail because the child is created with only a
     single thread running, the thread performing the *note os.fork():
     241.  If other threads were holding a lock, such as Python's
     import lock, when the fork was performed, the lock would still be
     marked as "held" in the new process.  But in the child process
     nothing would ever release the lock, since the other threads
     weren't replicated, and the child process would no longer be able
     to perform imports.

     Python 2.7 acquires the import lock before performing an *note
     os.fork(): 241, and will also clean up any locks created using the
     *note threading: 179. module.  C extension modules that have
     internal locks, or that call `fork()' themselves, will not benefit
     from this clean-up.

     (Fixed by Thomas Wouters; issue 1590864(13).)

   * The *note Py_Finalize(): 2c0. function now calls the internal
     `threading._shutdown()' function; this prevents some exceptions
     from being raised when an interpreter shuts down.  (Patch by Adam
     Olsen; issue 1722344(14).)

   * When using the *note PyMemberDef: 2c1. structure to define
     attributes of a type, Python will no longer let you try to delete
     or set a `T_STRING_INPLACE' attribute.

   * Global symbols defined by the *note ctypes: 78. module are now
     prefixed with `Py', or with `_ctypes'.  (Implemented by Thomas
     Heller; issue 3102(15).)

   * New configure option: the `--with-system-expat' switch allows
     building the `pyexpat' module to use the system Expat library.
     (Contributed by Arfrever Frehtes Taifersar Arahesis; issue
     7609(16).)

   * New configure option: the `--with-valgrind' option will now
     disable the pymalloc allocator, which is difficult for the
     Valgrind memory-error detector to analyze correctly.  Valgrind
     will therefore be better at detecting memory leaks and overruns.
     (Contributed by James Henstridge; issue 2422(17).)

   * New configure option: you can now supply an empty string to
     `--with-dbmliborder=' in order to disable all of the various DBM
     modules.  (Added by Arfrever Frehtes Taifersar Arahesis; issue
     6491(18).)

   * The *configure* script now checks for floating-point rounding bugs
     on certain 32-bit Intel chips and defines a `X87_DOUBLE_ROUNDING'
     preprocessor definition.  No code currently uses this definition,
     but it's available if anyone wishes to use it.  (Added by Mark
     Dickinson; issue 2937(19).)

     *configure* also now sets a `LDCXXSHARED' Makefile variable for
     supporting C++ linking.  (Contributed by Arfrever Frehtes
     Taifersar Arahesis; issue 1222585(20).)

   * The build process now creates the necessary files for pkg-config
     support.  (Contributed by Clinton Roy; issue 3585(21).)

   * The build process now supports Subversion 1.7.  (Contributed by
     Arfrever Frehtes Taifersar Arahesis; issue 6094(22).)

* Menu:

* Capsules::
* Port-Specific Changes; Windows: Port-Specific Changes Windows.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X.
* Port-Specific Changes; FreeBSD: Port-Specific Changes FreeBSD.

  ---------- Footnotes ----------

  (1) http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html

  (2) http://bugs.python.org/issue8032

  (3) http://bugs.python.org/issue3632

  (4) http://bugs.python.org/issue4293

  (5) http://bugs.python.org/issue7033

  (6) http://bugs.python.org/issue7528

  (7) http://bugs.python.org/issue7767

  (8) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983

  (9) http://bugs.python.org/issue5753

  (10) http://bugs.python.org/issue5793

  (11) http://bugs.python.org/issue8276

  (12) http://bugs.python.org/issue7228

  (13) http://bugs.python.org/issue1590864

  (14) http://bugs.python.org/issue1722344

  (15) http://bugs.python.org/issue3102

  (16) http://bugs.python.org/issue7609

  (17) http://bugs.python.org/issue2422

  (18) http://bugs.python.org/issue6491

  (19) http://bugs.python.org/issue2937

  (20) http://bugs.python.org/issue1222585

  (21) http://bugs.python.org/issue3585

  (22) http://bugs.python.org/issue6094


File: python.info,  Node: Capsules,  Next: Port-Specific Changes Windows,  Up: Build and C API Changes

1.1.11.1 Capsules
.................

Python 3.1 adds a new C datatype, *note PyCapsule: 1c3, for providing a
C API to an extension module.  A capsule is essentially the holder of a
C `void *' pointer, and is made available as a module attribute; for
example, the *note socket: 15c. module's API is exposed as
`socket.CAPI', and *note unicodedata: 186. exposes `ucnhash_CAPI'.
Other extensions can import the module, access its dictionary to get
the capsule object, and then get the `void *' pointer, which will
usually point to an array of pointers to the module's various API
functions.

  There is an existing data type already used for this, *note
PyCObject: 2c4, but it doesn't provide type safety.  Evil code written
in pure Python could cause a segmentation fault by taking a *note
PyCObject: 2c4. from module A and somehow substituting it for the *note
PyCObject: 2c4. in module B.   Capsules know their own name, and
getting the pointer requires providing the name:

    void *vtable;

    if (!PyCapsule_IsValid(capsule, "mymodule.CAPI") {
            PyErr_SetString(PyExc_ValueError, "argument type invalid");
            return NULL;
    }

    vtable = PyCapsule_GetPointer(capsule, "mymodule.CAPI");

You are assured that `vtable' points to whatever you're expecting.  If
a different capsule was passed in, *note PyCapsule_IsValid(): 2c5. would
detect the mismatched name and return false.  Refer to *note Providing
a C API for an Extension Module: 2c6. for more information on using
these objects.

  Python 2.7 now uses capsules internally to provide various
extension-module APIs, but the *note PyCObject_AsVoidPtr(): 2c7. was
modified to handle capsules, preserving compile-time compatibility with
the `CObject' interface.  Use of *note PyCObject_AsVoidPtr(): 2c7. will
signal a *note PendingDeprecationWarning: 1ed, which is silent by
default.

  Implemented in Python 3.1 and backported to 2.7 by Larry Hastings;
discussed in issue 5630(1).

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5630


File: python.info,  Node: Port-Specific Changes Windows,  Next: Port-Specific Changes Mac OS X,  Prev: Capsules,  Up: Build and C API Changes

1.1.11.2 Port-Specific Changes: Windows
.......................................

   * The *note msvcrt: 117. module now contains some constants from the
     `crtassem.h' header file: `CRT_ASSEMBLY_VERSION',
     `VC_ASSEMBLY_PUBLICKEYTOKEN', and `LIBRARIES_ASSEMBLY_NAME_PREFIX'.
     (Contributed by David Cournapeau; issue 4365(1).)

   * The *note _winreg: 3. module for accessing the registry now
     implements the *note CreateKeyEx(): 2c9. and *note DeleteKeyEx():
     2ca.  functions, extended versions of previously-supported
     functions that take several extra arguments.  The *note
     DisableReflectionKey(): 2cb, *note EnableReflectionKey(): 2cc, and
     *note QueryReflectionKey(): 2cd.  were also tested and documented.
     (Implemented by Brian Curtin: issue 7347(2).)

   * The new `_beginthreadex()' API is used to start threads, and the
     native thread-local storage functions are now used.  (Contributed
     by Kristján Valur Jónsson; issue 3582(3).)

   * The *note os.kill(): 2ce. function now works on Windows.  The
     signal value can be the constants `CTRL_C_EVENT',
     `CTRL_BREAK_EVENT', or any integer.  The first two constants will
     send Control-C and Control-Break keystroke events to subprocesses;
     any other value will use the `TerminateProcess()' API.
     (Contributed by Miki Tebeka; issue 1220212(4).)

   * The *note os.listdir(): 2cf. function now correctly fails for an
     empty path.  (Fixed by Hirokazu Yamamoto; issue 5913(5).)

   * The `mimelib' module will now read the MIME database from the
     Windows registry when initializing.  (Patch by Gabriel Genellina;
     issue 4969(6).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4365

  (2) http://bugs.python.org/issue7347

  (3) http://bugs.python.org/issue3582

  (4) http://bugs.python.org/issue1220212

  (5) http://bugs.python.org/issue5913

  (6) http://bugs.python.org/issue4969


File: python.info,  Node: Port-Specific Changes Mac OS X,  Next: Port-Specific Changes FreeBSD,  Prev: Port-Specific Changes Windows,  Up: Build and C API Changes

1.1.11.3 Port-Specific Changes: Mac OS X
........................................

   * The path `/Library/Python/2.7/site-packages' is now appended to
     `sys.path', in order to share added packages between the system
     installation and a user-installed copy of the same version.
     (Changed by Ronald Oussoren; issue 4865(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue4865


File: python.info,  Node: Port-Specific Changes FreeBSD,  Prev: Port-Specific Changes Mac OS X,  Up: Build and C API Changes

1.1.11.4 Port-Specific Changes: FreeBSD
.......................................

   * FreeBSD 7.1's `SO_SETFIB' constant, used with
     `getsockopt()'/`setsockopt()' to select an alternate routing
     table, is now available in the *note socket: 15c.  module.  (Added
     by Kyle VanderBeek; issue 8235(1).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue8235


File: python.info,  Node: Other Changes and Fixes,  Next: Porting to Python 2 7,  Prev: Build and C API Changes,  Up: What's New in Python 2 7

1.1.12 Other Changes and Fixes
------------------------------

   * Two benchmark scripts, `iobench' and `ccbench', were added to the
     `Tools' directory.  `iobench' measures the speed of the built-in
     file I/O objects returned by *note open(): 2d3.  while performing
     various operations, and `ccbench' is a concurrency benchmark that
     tries to measure computing throughput, thread switching latency,
     and IO processing bandwidth when performing several tasks using a
     varying number of threads.

   * The `Tools/i18n/msgfmt.py' script now understands plural forms in
     `.po' files.  (Fixed by Martin von Löwis; issue 5464(1).)

   * When importing a module from a `.pyc' or `.pyo' file with an
     existing `.py' counterpart, the `co_filename' attributes of the
     resulting code objects are overwritten when the original filename
     is obsolete.  This can happen if the file has been renamed, moved,
     or is accessed through different paths.  (Patch by Ziga Seilnacht
     and Jean-Paul Calderone; issue 1180193(2).)

   * The `regrtest.py' script now takes a `--randseed=' switch that
     takes an integer that will be used as the random seed for the `-r'
     option that executes tests in random order.  The `-r' option also
     reports the seed that was used (Added by Collin Winter.)

   * Another `regrtest.py' switch is `-j', which takes an integer
     specifying how many tests run in parallel. This allows reducing
     the total runtime on multi-core machines.  This option is
     compatible with several other options, including the *note -R:
     2d4. switch which is known to produce long runtimes.  (Added by
     Antoine Pitrou, issue 6152(3).)  This can also be used with a new
     `-F' switch that runs selected tests in a loop until they fail.
     (Added by Antoine Pitrou; issue 7312(4).)

   * When executed as a script, the `py_compile.py' module now accepts
     `'-'' as an argument, which will read standard input for the list
     of filenames to be compiled.  (Contributed by Piotr Ożarowski;
     issue 8233(5).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue5464

  (2) http://bugs.python.org/issue1180193

  (3) http://bugs.python.org/issue6152

  (4) http://bugs.python.org/issue7312

  (5) http://bugs.python.org/issue8233


File: python.info,  Node: Porting to Python 2 7,  Next: Acknowledgements,  Prev: Other Changes and Fixes,  Up: What's New in Python 2 7

1.1.13 Porting to Python 2.7
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * The *note range(): 2d6. function processes its arguments more
     consistently; it will now call *note __int__(): 25d. on non-float,
     non-integer arguments that are supplied to it.  (Fixed by Alexander
     Belopolsky; issue 1533(1).)

   * The string *note format(): 1ec. method changed the default
     precision used for floating-point and complex numbers from 6
     decimal places to 12, which matches the precision used by *note
     str(): 1e7.  (Changed by Eric Smith; issue 5920(2).)

   * Because of an optimization for the *note with: 1bd. statement, the
     special methods *note __enter__(): 1fc. and *note __exit__(): 1fd.
     must belong to the object's type, and cannot be directly attached
     to the object's instance.  This affects new-style classes (derived
     from *note object: 1ee.) and C extension types.  (issue 6101(3).)

   * Due to a bug in Python 2.6, the _exc_value_ parameter to *note
     __exit__(): 1fd. methods was often the string representation of the
     exception, not an instance.  This was fixed in 2.7, so _exc_value_
     will be an instance as expected.  (Fixed by Florent Xicluna; issue
     7853(4).)

   * When a restricted set of attributes were set using `__slots__',
     deleting an unset attribute would not raise *note AttributeError:
     1f5.  as you would expect.  Fixed by Benjamin Peterson; issue
     7604(5).)

  In the standard library:

   * Operations with *note datetime: 2d7. instances that resulted in a
     year falling outside the supported range didn't always raise *note
     OverflowError: 2d8.  Such errors are now checked more carefully
     and will now raise the exception. (Reported by Mark Leander, patch
     by Anand B. Pillai and Alexander Belopolsky; issue 7150(6).)

   * When using *note Decimal: 1b4. instances with a string's *note
     format(): 1ec. method, the default alignment was previously
     left-alignment.  This has been changed to right-alignment, which
     might change the output of your programs.  (Changed by Mark
     Dickinson; issue 6857(7).)

     Comparisons involving a signaling NaN value (or `sNAN') now signal
     *note InvalidOperation: 2d9. instead of silently returning a true
     or false value depending on the comparison operator.  Quiet NaN
     values (or `NaN') are now hashable.  (Fixed by Mark Dickinson;
     issue 7279(8).)

   * The ElementTree library, `xml.etree', no longer escapes ampersands
     and angle brackets when outputting an XML processing instruction
     (which looks like `<?xml-stylesheet href="#style1"?>') or comment
     (which looks like `<!- comment ->').  (Patch by Neil Muller; issue
     2746(9).)

   * The `readline()' method of *note StringIO: 2da. objects now does
     nothing when a negative length is requested, as other file-like
     objects do.  (issue 7348(10)).

   * The *note syslog: 16f. module will now use the value of
     `sys.argv[0]' as the identifier instead of the previous default
     value of `'python''.  (Changed by Sean Reifschneider; issue
     8451(11).)

   * The *note tarfile: 171. module's default error handling has
     changed, to no longer suppress fatal errors.  The default error
     level was previously 0, which meant that errors would only result
     in a message being written to the debug log, but because the debug
     log is not activated by default, these errors go unnoticed.  The
     default error level is now 1, which raises an exception if there's
     an error.  (Changed by Lars Gustäbel; issue 7357(12).)

   * The *note urlparse: 18a. module's *note urlsplit(): 267. now
     handles unknown URL schemes in a fashion compliant with RFC
     3986(13): if the URL is of the form `"<something>://..."', the
     text before the `://' is treated as the scheme, even if it's a
     made-up scheme that the module doesn't know about.  This change
     may break code that worked around the old behaviour.  For example,
     Python 2.6.4 or 2.5 will return the following:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', '', '//host/filename?query', '', '')

     Python 2.7 (and Python 2.6.5) will return:

         >>> import urlparse
         >>> urlparse.urlsplit('invented://host/filename?query')
         ('invented', 'host', '/filename?query', '', '')

     (Python 2.7 actually produces slightly different output, since it
     returns a named tuple instead of a standard tuple.)

  For C extensions:

   * C extensions that use integer format codes with the `PyArg_Parse*'
     family of functions will now raise a *note TypeError: 215.
     exception instead of triggering a *note DeprecationWarning: 1b9.
     (issue 5080(14)).

   * Use the new *note PyOS_string_to_double(): 2ba. function instead
     of the old *note PyOS_ascii_strtod(): 2bb. and *note
     PyOS_ascii_atof(): 2bc. functions, which are now deprecated.

  For applications that embed Python:

   * The *note PySys_SetArgvEx(): 2bd. function was added, letting
     applications close a security hole when the existing *note
     PySys_SetArgv(): 2be. function was used.  Check whether you're
     calling *note PySys_SetArgv(): 2be. and carefully consider whether
     the application should be using *note PySys_SetArgvEx(): 2bd. with
     _updatepath_ set to false.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1533

  (2) http://bugs.python.org/issue5920

  (3) http://bugs.python.org/issue6101

  (4) http://bugs.python.org/issue7853

  (5) http://bugs.python.org/issue7604

  (6) http://bugs.python.org/issue7150

  (7) http://bugs.python.org/issue6857

  (8) http://bugs.python.org/issue7279

  (9) http://bugs.python.org/issue2746

  (10) http://bugs.python.org/issue7348

  (11) http://bugs.python.org/issue8451

  (12) http://bugs.python.org/issue7357

  (13) http://tools.ietf.org/html/rfc3986.html

  (14) http://bugs.python.org/issue5080


File: python.info,  Node: Acknowledgements,  Prev: Porting to Python 2 7,  Up: What's New in Python 2 7

1.1.14 Acknowledgements
-----------------------

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray,
Hugh Secker-Walker.


File: python.info,  Node: What's New in Python 2 6,  Next: What's New in Python 2 5,  Prev: What's New in Python 2 7,  Up: What's New in Python

1.2 What's New in Python 2.6
============================

     Author: A.M. Kuchling (amk at amk.ca)

  This article explains the new features in Python 2.6, released on
October 1 2008.  The release schedule is described in PEP 361(1).

  The major theme of Python 2.6 is preparing the migration path to
Python 3.0, a major redesign of the language.  Whenever possible,
Python 2.6 incorporates new features and syntax from 3.0 while
remaining compatible with existing code by not removing older features
or syntax.  When it's not possible to do that, Python 2.6 tries to do
what it can, adding compatibility functions in a *note future_builtins:
da. module and a *note -3: 1c7. switch to warn about usages that will
become unsupported in 3.0.

  Some significant new packages have been added to the standard library,
such as the *note multiprocessing: 119. and *note json: fc. modules, but
there aren't many new features that aren't related to Python 3.0 in
some way.

  Python 2.6 also sees a number of improvements and bugfixes throughout
the source.  A search through the change logs finds there were 259
patches applied and 612 bugs fixed between Python 2.5 and 2.6.  Both
figures are likely to be underestimates.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.6. If you
want to understand the rationale for the design and implementation,
refer to the PEP for a particular new feature.  Whenever possible,
"What's New in Python" links to the bug/patch item for each change.

* Menu:

* Python 3.0: Python 3 0.
* Changes to the Development Process::
* PEP 343; The 'with' statement: PEP 343 The 'with' statement.
* PEP 366; Explicit Relative Imports From a Main Module: PEP 366 Explicit Relative Imports From a Main Module.
* PEP 370; Per-user site-packages Directory: PEP 370 Per-user site-packages Directory.
* PEP 371; The multiprocessing Package: PEP 371 The multiprocessing Package.
* PEP 3101; Advanced String Formatting: PEP 3101 Advanced String Formatting.
* PEP 3105; print As a Function: PEP 3105 print As a Function.
* PEP 3110; Exception-Handling Changes: PEP 3110 Exception-Handling Changes.
* PEP 3112; Byte Literals: PEP 3112 Byte Literals.
* PEP 3116; New I/O Library: PEP 3116 New I/O Library.
* PEP 3118; Revised Buffer Protocol: PEP 3118 Revised Buffer Protocol.
* PEP 3119; Abstract Base Classes: PEP 3119 Abstract Base Classes.
* PEP 3127; Integer Literal Support and Syntax: PEP 3127 Integer Literal Support and Syntax.
* PEP 3129; Class Decorators: PEP 3129 Class Decorators.
* PEP 3141; A Type Hierarchy for Numbers: PEP 3141 A Type Hierarchy for Numbers.
* Other Language Changes: Other Language Changes<2>.
* New and Improved Modules: New and Improved Modules<2>.
* Deprecations and Removals::
* Build and C API Changes: Build and C API Changes<2>.
* Porting to Python 2.6: Porting to Python 2 6.
* Acknowledgements: Acknowledgements<2>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0361


File: python.info,  Node: Python 3 0,  Next: Changes to the Development Process,  Up: What's New in Python 2 6

1.2.1 Python 3.0
----------------

The development cycle for Python versions 2.6 and 3.0 was synchronized,
with the alpha and beta releases for both versions being made on the
same days.  The development of 3.0 has influenced many features in 2.6.

  Python 3.0 is a far-ranging redesign of Python that breaks
compatibility with the 2.x series.  This means that existing Python
code will need some conversion in order to run on Python 3.0.  However,
not all the changes in 3.0 necessarily break compatibility.  In cases
where new features won't cause existing code to break, they've been
backported to 2.6 and are described in this document in the appropriate
place.  Some of the 3.0-derived features are:

   * A *note __complex__(): 2e0. method for converting objects to a
     complex number.

   * Alternate syntax for catching exceptions: `except TypeError as
     exc'.

   * The addition of *note functools.reduce(): 2e1. as a synonym for
     the built-in *note reduce(): 2e2. function.

  Python 3.0 adds several new built-in functions and changes the
semantics of some existing builtins.  Functions that are new in 3.0
such as *note bin(): 2e3. have simply been added to Python 2.6, but
existing builtins haven't been changed; instead, the *note
future_builtins: da.  module has versions with the new 3.0 semantics.
Code written to be compatible with 3.0 can do `from future_builtins
import hex, map' as necessary.

  A new command-line switch, *note -3: 1c7, enables warnings about
features that will be removed in Python 3.0.  You can run code with
this switch to see how much work will be necessary to port code to 3.0.
The value of this switch is available to Python code as the boolean
variable *note sys.py3kwarning: 2e4, and to C extension code as
`Py_Py3kWarningFlag'.

See also
........

The 3xxx series of PEPs, which contains proposals for Python 3.0.  PEP
3000(1) describes the development process for Python 3.0.  Start with PEP
3100(2) that describes the general goals for Python 3.0, and then
explore the higher-numbered PEPS that propose specific features.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3000

  (2) http://www.python.org/dev/peps/pep-3100


File: python.info,  Node: Changes to the Development Process,  Next: PEP 343 The 'with' statement,  Prev: Python 3 0,  Up: What's New in Python 2 6

1.2.2 Changes to the Development Process
----------------------------------------

While 2.6 was being developed, the Python development process underwent
two significant changes: we switched from SourceForge's issue tracker
to a customized Roundup installation, and the documentation was
converted from LaTeX to reStructuredText.

* Menu:

* New Issue Tracker; Roundup: New Issue Tracker Roundup.
* New Documentation Format; reStructuredText Using Sphinx: New Documentation Format reStructuredText Using Sphinx.


File: python.info,  Node: New Issue Tracker Roundup,  Next: New Documentation Format reStructuredText Using Sphinx,  Up: Changes to the Development Process

1.2.2.1 New Issue Tracker: Roundup
..................................

For a long time, the Python developers had been growing increasingly
annoyed by SourceForge's bug tracker.  SourceForge's hosted solution
doesn't permit much customization; for example, it wasn't possible to
customize the life cycle of issues.

  The infrastructure committee of the Python Software Foundation
therefore posted a call for issue trackers, asking volunteers to set up
different products and import some of the bugs and patches from
SourceForge.  Four different trackers were examined: Jira(1),
Launchpad(2), Roundup(3), and Trac(4).  The committee eventually
settled on Jira and Roundup as the two candidates.  Jira is a
commercial product that offers no-cost hosted instances to
free-software projects; Roundup is an open-source project that requires
volunteers to administer it and a server to host it.

  After posting a call for volunteers, a new Roundup installation was
set up at <http://bugs.python.org>.  One installation of Roundup can
host multiple trackers, and this server now also hosts issue trackers
for Jython and for the Python web site.  It will surely find other uses
in the future.  Where possible, this edition of "What's New in Python"
links to the bug/patch item for each change.

  Hosting of the Python bug tracker is kindly provided by Upfront
Systems(5) of Stellenbosch, South Africa.  Martin von Loewis put a lot
of effort into importing existing bugs and patches from SourceForge;
his scripts for this import operation are at
<http://svn.python.org/view/tracker/importer/> and may be useful to
other projects wishing to move from SourceForge to Roundup.

See also
........

<http://bugs.python.org>
     The Python bug tracker.

<http://bugs.jython.org>:
     The Jython bug tracker.

<http://roundup.sourceforge.net/>
     Roundup downloads and documentation.

<http://svn.python.org/view/tracker/importer/>
     Martin von Loewis's conversion scripts.

  ---------- Footnotes ----------

  (1) http://www.atlassian.com/software/jira/

  (2) http://www.launchpad.net

  (3) http://roundup.sourceforge.net/

  (4) http://trac.edgewall.org/

  (5) http://www.upfrontsystems.co.za/


File: python.info,  Node: New Documentation Format reStructuredText Using Sphinx,  Prev: New Issue Tracker Roundup,  Up: Changes to the Development Process

1.2.2.2 New Documentation Format: reStructuredText Using Sphinx
...............................................................

The Python documentation was written using LaTeX since the project
started around 1989.  In the 1980s and early 1990s, most documentation
was printed out for later study, not viewed online. LaTeX was widely
used because it provided attractive printed output while remaining
straightforward to write once the basic rules of the markup were
learned.

  Today LaTeX is still used for writing publications destined for
printing, but the landscape for programming tools has shifted.  We no
longer print out reams of documentation; instead, we browse through it
online and HTML has become the most important format to support.
Unfortunately, converting LaTeX to HTML is fairly complicated and Fred
L. Drake Jr., the long-time Python documentation editor, spent a lot of
time maintaining the conversion process.  Occasionally people would
suggest converting the documentation into SGML and later XML, but
performing a good conversion is a major task and no one ever committed
the time required to finish the job.

  During the 2.6 development cycle, Georg Brandl put a lot of effort
into building a new toolchain for processing the documentation.  The
resulting package is called Sphinx, and is available from
<http://sphinx.pocoo.org/>.

  Sphinx concentrates on HTML output, producing attractively styled and
modern HTML; printed output is still supported through conversion to
LaTeX.  The input format is reStructuredText, a markup syntax
supporting custom extensions and directives that is commonly used in
the Python community.

  Sphinx is a standalone package that can be used for writing, and
almost two dozen other projects (listed on the Sphinx web site(1)) have
adopted Sphinx as their documentation tool.

See also
........

Documenting Python(2)
     Describes how to write for Python's documentation.

Sphinx(3)
     Documentation and code for the Sphinx toolchain.

Docutils(4)
     The underlying reStructuredText parser and toolset.

  ---------- Footnotes ----------

  (1) http://sphinx.pocoo.org/examples.html

  (2) http://docs.python.org/devguide/documenting.html

  (3) http://sphinx.pocoo.org/

  (4) http://docutils.sf.net


File: python.info,  Node: PEP 343 The 'with' statement,  Next: PEP 366 Explicit Relative Imports From a Main Module,  Prev: Changes to the Development Process,  Up: What's New in Python 2 6

1.2.3 PEP 343: The 'with' statement
-----------------------------------

The previous version, Python 2.5, added the '*note with: 1bd.'
statement as an optional feature, to be enabled by a `from __future__
import with_statement' directive.  In 2.6 the statement no longer needs
to be specially enabled; this means that *note with: 1bd. is now always
a keyword.  The rest of this section is a copy of the corresponding
section from the "What's New in Python 2.5" document; if you're
familiar with the '*note with: 1bd.' statement from Python 2.5, you can
skip this section.

  The '*note with: 1bd.' statement clarifies code that previously would
use `try...finally' blocks to ensure that clean-up code is executed.
In this section, I'll discuss the statement as it will commonly be
used.  In the next section, I'll examine the implementation details and
show how to write objects for use with this statement.

  The '*note with: 1bd.' statement is a control-flow structure whose
basic structure is:

    with expression [as variable]:
        with-block

The expression is evaluated, and it should result in an object that
supports the context management protocol (that is, has *note
__enter__(): 1fc. and *note __exit__(): 1fd.  methods).

  The object's *note __enter__(): 1fc. is called before _with-block_ is
executed and therefore can run set-up code. It also may return a value
that is bound to the name _variable_, if given.  (Note carefully that
_variable_ is _not_ assigned the result of _expression_.)

  After execution of the _with-block_ is finished, the object's *note
__exit__(): 1fd.  method is called, even if the block raised an
exception, and can therefore run clean-up code.

  Some standard Python objects now support the context management
protocol and can be used with the '*note with: 1bd.' statement. File
objects are one example:

    with open('/etc/passwd', 'r') as f:
        for line in f:
            print line
            ... more processing code ...

After this statement has executed, the file object in _f_ will have been
automatically closed, even if the *note for: 2e9. loop raised an
exception part- way through the block.

     Note: In this case, _f_ is the same object created by *note
     open(): 2d3, because `file.__enter__()' returns _self_.

  The *note threading: 179. module's locks and condition variables
also support the '*note with: 1bd.' statement:

    lock = threading.Lock()
    with lock:
        # Critical section of code
        ...

The lock is acquired before the block is executed and always released
once  the block is complete.

  The `localcontext()' function in the *note decimal: 80. module makes
it easy to save and restore the current decimal context, which
encapsulates the desired precision and rounding characteristics for
computations:

    from decimal import Decimal, Context, localcontext

    # Displays with default precision of 28 digits
    v = Decimal('578')
    print v.sqrt()

    with localcontext(Context(prec=16)):
        # All code in this block uses a precision of 16 digits.
        # The original context is restored on exiting the block.
        print v.sqrt()


* Menu:

* Writing Context Managers::
* The contextlib module::


File: python.info,  Node: Writing Context Managers,  Next: The contextlib module,  Up: PEP 343 The 'with' statement

1.2.3.1 Writing Context Managers
................................

Under the hood, the '*note with: 1bd.' statement is fairly complicated.
Most people will only use '*note with: 1bd.' in company with existing
objects and don't need to know these details, so you can skip the rest
of this section if you like.  Authors of new objects will need to
understand the details of the underlying implementation and should keep
reading.

  A high-level explanation of the context management protocol is:

   * The expression is evaluated and should result in an object called
     a "context manager".  The context manager must have *note
     __enter__(): 1fc. and *note __exit__(): 1fd.  methods.

   * The context manager's *note __enter__(): 1fc. method is called.
     The value returned is assigned to _VAR_.  If no `as VAR' clause is
     present, the value is simply discarded.

   * The code in _BLOCK_ is executed.

   * If _BLOCK_ raises an exception, the context manager's *note
     __exit__(): 1fd. method is called with three arguments, the
     exception details (`type, value, traceback', the same values
     returned by *note sys.exc_info(): 2ec, which can also be `None' if
     no exception occurred).  The method's return value controls
     whether an exception is re-raised: any false value re-raises the
     exception, and `True' will result in suppressing it.  You'll only
     rarely want to suppress the exception, because if you do the
     author of the code containing the '*note with: 1bd.' statement will
     never realize anything went wrong.

   * If _BLOCK_ didn't raise an exception,  the *note __exit__(): 1fd.
     method is still called, but _type_, _value_, and _traceback_ are
     all `None'.

  Let's think through an example.  I won't present detailed code but
will only sketch the methods necessary for a database that supports
transactions.

  (For people unfamiliar with database terminology: a set of changes to
the database are grouped into a transaction.  Transactions can be
either committed, meaning that all the changes are written into the
database, or rolled back, meaning that the changes are all discarded
and the database is unchanged.  See any database textbook for more
information.)

  Let's assume there's an object representing a database connection.
Our goal will be to let the user write code like this:

    db_connection = DatabaseConnection()
    with db_connection as cursor:
        cursor.execute('insert into ...')
        cursor.execute('delete from ...')
        # ... more operations ...

The transaction should be committed if the code in the block runs
flawlessly or rolled back if there's an exception. Here's the basic
interface for `DatabaseConnection' that I'll assume:

    class DatabaseConnection:
        # Database interface
        def cursor(self):
            "Returns a cursor object and starts a new transaction"
        def commit(self):
            "Commits current transaction"
        def rollback(self):
            "Rolls back current transaction"

The *note __enter__(): 1fc. method is pretty easy, having only to start
a new transaction.  For this application the resulting cursor object
would be a useful result, so the method will return it.  The user can
then add `as cursor' to their '*note with: 1bd.' statement to bind the
cursor to a variable name.

    class DatabaseConnection:
        ...
        def __enter__(self):
            # Code to start a new transaction
            cursor = self.cursor()
            return cursor

The *note __exit__(): 1fd. method is the most complicated because it's
where most of the work has to be done.  The method has to check if an
exception occurred.  If there was no exception, the transaction is
committed.  The transaction is rolled back if there was an exception.

  In the code below, execution will just fall off the end of the
function, returning the default value of `None'.  `None' is false, so
the exception will be re-raised automatically.  If you wished, you
could be more explicit and add a *note return: 2ed. statement at the
marked location.

    class DatabaseConnection:
        ...
        def __exit__(self, type, value, tb):
            if tb is None:
                # No exception, so commit
                self.commit()
            else:
                # Exception occurred, so rollback.
                self.rollback()
                # return False



File: python.info,  Node: The contextlib module,  Prev: Writing Context Managers,  Up: PEP 343 The 'with' statement

1.2.3.2 The contextlib module
.............................

The *note contextlib: 6e. module provides some functions and a
decorator that are useful when writing objects for use with the '*note
with: 1bd.' statement.

  The decorator is called `contextmanager()', and lets you write a
single generator function instead of defining a new class.  The
generator should yield exactly one value.  The code up to the *note
yield: 2f0. will be executed as the *note __enter__(): 1fc. method, and
the value yielded will be the method's return value that will get bound
to the variable in the '*note with: 1bd.' statement's *note as: 2f1.
clause, if any.  The code after the *note yield: 2f0. will be executed
in the *note __exit__(): 1fd. method.  Any exception raised in the
block will be raised by the *note yield: 2f0. statement.

  Using this decorator, our database example from the previous section
could be written as:

    from contextlib import contextmanager

    @contextmanager
    def db_transaction(connection):
        cursor = connection.cursor()
        try:
            yield cursor
        except:
            connection.rollback()
            raise
        else:
            connection.commit()

    db = DatabaseConnection()
    with db_transaction(db) as cursor:
        ...

The *note contextlib: 6e. module also has a `nested(mgr1, mgr2, ...)'
function that combines a number of context managers so you don't need
to write nested '*note with: 1bd.' statements.  In this example, the
single '*note with: 1bd.'  statement both starts a database transaction
and acquires a thread lock:

    lock = threading.Lock()
    with nested (db_transaction(db), lock) as (cursor, locked):
        ...

Finally, the `closing()' function returns its argument so that it can be
bound to a variable, and calls the argument's `.close()' method at the
end of the block.

    import urllib, sys
    from contextlib import closing

    with closing(urllib.urlopen('http://www.yahoo.com')) as f:
        for line in f:
            sys.stdout.write(line)


See also
........

PEP 343(1) - The "with" statement
     PEP written by Guido van Rossum and Nick Coghlan; implemented by
     Mike Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the
     code generated for a '*note with: 1bd.' statement, which can be
     helpful in learning how the statement works.

  The documentation  for the *note contextlib: 6e. module.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0343


File: python.info,  Node: PEP 366 Explicit Relative Imports From a Main Module,  Next: PEP 370 Per-user site-packages Directory,  Prev: PEP 343 The 'with' statement,  Up: What's New in Python 2 6

1.2.4 PEP 366: Explicit Relative Imports From a Main Module
-----------------------------------------------------------

Python's *note -m: 2f4. switch allows running a module as a script.
When you ran a module that was located inside a package, relative
imports didn't work correctly.

  The fix for Python 2.6 adds a `__package__' attribute to modules.
When this attribute is present, relative imports will be relative to
the value of this attribute instead of the `__name__' attribute.

  PEP 302-style importers can then set `__package__' as necessary.  The
*note runpy: 14b. module that implements the *note -m: 2f4. switch now
does this, so relative imports will now work correctly in scripts
running from inside a package.


File: python.info,  Node: PEP 370 Per-user site-packages Directory,  Next: PEP 371 The multiprocessing Package,  Prev: PEP 366 Explicit Relative Imports From a Main Module,  Up: What's New in Python 2 6

1.2.5 PEP 370: Per-user `site-packages' Directory
-------------------------------------------------

When you run Python, the module search path `sys.path' usually includes
a directory whose path ends in `"site-packages"'.  This directory is
intended to hold locally-installed packages available to all users
using a machine or a particular site installation.

  Python 2.6 introduces a convention for user-specific site directories.
The directory varies depending on the platform:

   * Unix and Mac OS X: `~/.local/'

   * Windows: `%APPDATA%/Python'

  Within this directory, there will be version-specific subdirectories,
such as `lib/python2.6/site-packages' on Unix/Mac OS and
`Python26/site-packages' on Windows.

  If you don't like the default directory, it can be overridden by an
environment variable.  *note PYTHONUSERBASE: 2f7. sets the root
directory used for all Python versions supporting this feature.  On
Windows, the directory for application-specific data can be changed by
setting the `APPDATA' environment variable.  You can also modify the
`site.py' file for your Python installation.

  The feature can be disabled entirely by running Python with the *note
-s: 2f8. option or setting the *note PYTHONNOUSERSITE: 2f9.
environment variable.

See also
........

PEP 370(1) - Per-user `site-packages' Directory
     PEP written and implemented by Christian Heimes.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0370


File: python.info,  Node: PEP 371 The multiprocessing Package,  Next: PEP 3101 Advanced String Formatting,  Prev: PEP 370 Per-user site-packages Directory,  Up: What's New in Python 2 6

1.2.6 PEP 371: The `multiprocessing' Package
--------------------------------------------

The new *note multiprocessing: 119. package lets Python programs create
new processes that will perform a computation and return a result to the
parent.  The parent and child processes can communicate using queues
and pipes, synchronize their operations using locks and semaphores, and
can share simple arrays of data.

  The *note multiprocessing: 119. module started out as an exact
emulation of the *note threading: 179. module using processes instead
of threads.  That goal was discarded along the path to Python 2.6, but
the general approach of the module is still similar.  The fundamental
class is the `Process', which is passed a callable object and a
collection of arguments.  The `start()' method sets the callable
running in a subprocess, after which you can call the `is_alive()'
method to check whether the subprocess is still running and the
`join()' method to wait for the process to exit.

  Here's a simple example where the subprocess will calculate a
factorial.  The function doing the calculation is written strangely so
that it takes significantly longer when the input argument is a
multiple of 4.

    import time
    from multiprocessing import Process, Queue


    def factorial(queue, N):
        "Compute a factorial."
        # If N is a multiple of 4, this function will take much longer.
        if (N % 4) == 0:
            time.sleep(.05 * N/4)

        # Calculate the result
        fact = 1L
        for i in range(1, N+1):
            fact = fact * i

        # Put the result on the queue
        queue.put(fact)

    if __name__ == '__main__':
        queue = Queue()

        N = 5

        p = Process(target=factorial, args=(queue, N))
        p.start()
        p.join()

        result = queue.get()
        print 'Factorial', N, '=', result

A *note Queue: 140. is used to communicate the result of the factorial.
The *note Queue: 140. object is stored in a global variable.  The child
process will use the value of the variable when the child was created;
because it's a *note Queue: 140, parent and child can use the object to
communicate.  (If the parent were to change the value of the global
variable, the child's value would be unaffected, and vice versa.)

  Two other classes, `Pool' and `Manager', provide higher-level
interfaces.  `Pool' will create a fixed number of worker processes, and
requests can then be distributed to the workers by calling *note
apply(): 2fc. or `apply_async()' to add a single request, and *note
map(): 2fd. or `map_async()' to add a number of requests.  The
following code uses a `Pool' to spread requests across 5 worker
processes and retrieve a list of results:

    from multiprocessing import Pool

    def factorial(N, dictionary):
        "Compute a factorial."
        ...
    p = Pool(5)
    result = p.map(factorial, range(1, 1000, 10))
    for v in result:
        print v

This produces the following output:

    1
    39916800
    51090942171709440000
    8222838654177922817725562880000000
    33452526613163807108170062053440751665152000000000
    ...

The other high-level interface, the `Manager' class, creates a separate
server process that can hold master copies of Python data structures.
Other processes can then access and modify these data structures using
proxy objects.  The following example creates a shared dictionary by
calling the *note dict(): 2fe. method; the worker processes then insert
values into the dictionary.  (Locking is not done for you
automatically, which doesn't matter in this example.  `Manager''s
methods also include `Lock()', `RLock()', and `Semaphore()' to create
shared locks.)

    import time
    from multiprocessing import Pool, Manager

    def factorial(N, dictionary):
        "Compute a factorial."
        # Calculate the result
        fact = 1L
        for i in range(1, N+1):
            fact = fact * i

        # Store result in dictionary
        dictionary[N] = fact

    if __name__ == '__main__':
        p = Pool(5)
        mgr = Manager()
        d = mgr.dict()         # Create shared dictionary

        # Run tasks using the pool
        for N in range(1, 1000, 10):
            p.apply_async(factorial, (N, d))

        # Mark pool as closed -- no more tasks can be added.
        p.close()

        # Wait for tasks to exit
        p.join()

        # Output results
        for k, v in sorted(d.items()):
            print k, v

This will produce the output:

    1 1
    11 39916800
    21 51090942171709440000
    31 8222838654177922817725562880000000
    41 33452526613163807108170062053440751665152000000000
    51 15511187532873822802242430164693032110632597200169861120000...


See also
........

The documentation for the *note multiprocessing: 119. module.

PEP 371(1) - Addition of the multiprocessing package
     PEP written by Jesse Noller and Richard Oudkerk; implemented by
     Richard Oudkerk and Jesse Noller.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0371


File: python.info,  Node: PEP 3101 Advanced String Formatting,  Next: PEP 3105 print As a Function,  Prev: PEP 371 The multiprocessing Package,  Up: What's New in Python 2 6

1.2.7 PEP 3101: Advanced String Formatting
------------------------------------------

In Python 3.0, the `%' operator is supplemented by a more powerful
string formatting method, *note format(): 1ec.  Support for the *note
str.format(): 1cf. method has been backported to Python 2.6.

  In 2.6, both 8-bit and Unicode strings have a `.format()' method that
treats the string as a template and takes the arguments to be formatted.
The formatting template uses curly brackets (`{', `}') as special
characters:

    >>> # Substitute positional argument 0 into the string.
    >>> "User ID: {0}".format("root")
    'User ID: root'
    >>> # Use the named keyword arguments
    >>> "User ID: {uid}   Last seen: {last_login}".format(
    ...    uid="root",
    ...    last_login = "5 Mar 2008 07:20")
    'User ID: root   Last seen: 5 Mar 2008 07:20'

Curly brackets can be escaped by doubling them:

    >>> "Empty dict: {{}}".format()
    "Empty dict: {}"

Field names can be integers indicating positional arguments, such as
`{0}', `{1}', etc. or names of keyword arguments.  You can also supply
compound field names that read attributes or access dictionary keys:

    >>> import sys
    >>> print 'Platform: {0.platform}\nPython version: {0.version}'.format(sys)
    Platform: darwin
    Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41)
    [GCC 4.0.1 (Apple Computer, Inc. build 5367)]'

    >>> import mimetypes
    >>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map)
    'Content-type: video/mp4'

Note that when using dictionary-style notation such as `[.mp4]', you
don't need to put any quotation marks around the string; it will look
up the value using `.mp4' as the key.  Strings beginning with a number
will be converted to an integer.  You can't write more complicated
expressions inside a format string.

  So far we've shown how to specify which field to substitute into the
resulting string.  The precise formatting used is also controllable by
adding a colon followed by a format specifier.  For example:

    >>> # Field 0: left justify, pad to 15 characters
    >>> # Field 1: right justify, pad to 6 characters
    >>> fmt = '{0:15} ${1:>6}'
    >>> fmt.format('Registration', 35)
    'Registration    $    35'
    >>> fmt.format('Tutorial', 50)
    'Tutorial        $    50'
    >>> fmt.format('Banquet', 125)
    'Banquet         $   125'

Format specifiers can reference other fields through nesting:

    >>> fmt = '{0:{1}}'
    >>> width = 15
    >>> fmt.format('Invoice #1234', width)
    'Invoice #1234  '
    >>> width = 35
    >>> fmt.format('Invoice #1234', width)
    'Invoice #1234                      '

The alignment of a field within the desired width can be specified:

Character            Effect
---------------------------------------------------------------------- 
< (default)          Left-align
>                    Right-align
^                    Center
=                    (For numeric types only) Pad after the sign.

  Format specifiers can also include a presentation type, which
controls how the value is formatted.  For example, floating-point
numbers can be formatted as a general number or in exponential notation:

    >>> '{0:g}'.format(3.75)
    '3.75'
    >>> '{0:e}'.format(3.75)
    '3.750000e+00'

A variety of presentation types are available.  Consult the 2.6
documentation for a *note complete list: 301.; here's a sample:

`b'       Binary. Outputs the number in base 2.
`c'       Character. Converts the integer to the corresponding Unicode character
          before printing.
`d'       Decimal Integer. Outputs the number in base 10.
`o'       Octal format. Outputs the number in base 8.
`x'       Hex format. Outputs the number in base 16, using lower-case letters for the
          digits above 9.
`e'       Exponent notation. Prints the number in scientific notation using the
          letter 'e' to indicate the exponent.
`g'       General format. This prints the number as a fixed-point number, unless the
          number is too large, in which case it switches to 'e' exponent notation.
`n'       Number. This is the same as 'g' (for floats) or 'd' (for integers), except
          that it uses the current locale setting to insert the appropriate number
          separator characters.
`%'       Percentage. Multiplies the number by 100 and displays in fixed ('f')
          format, followed by a percent sign.

  Classes and types can define a `__format__()' method to control how
they're formatted.  It receives a single argument, the format specifier:

    def __format__(self, format_spec):
        if isinstance(format_spec, unicode):
            return unicode(str(self))
        else:
            return str(self)

There's also a *note format(): 1ec. builtin that will format a single
value.  It calls the type's `__format__()' method with the provided
specifier:

    >>> format(75.6564, '.2f')
    '75.66'


See also
........

*note Format String Syntax: 301.
     The reference documentation for format fields.

PEP 3101(1) - Advanced String Formatting
     PEP written by Talin. Implemented by Eric Smith.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3101


File: python.info,  Node: PEP 3105 print As a Function,  Next: PEP 3110 Exception-Handling Changes,  Prev: PEP 3101 Advanced String Formatting,  Up: What's New in Python 2 6

1.2.8 PEP 3105: `print' As a Function
-------------------------------------

The `print' statement becomes the *note print(): 304. function in
Python 3.0.  Making *note print(): 304. a function makes it possible to
replace the function by doing `def print(...)' or importing a new
function from somewhere else.

  Python 2.6 has a `__future__' import that removes `print' as language
syntax, letting you use the functional form instead.  For example:

    >>> from __future__ import print_function
    >>> print('# of entries', len(dictionary), file=sys.stderr)

The signature of the new function is:

    def print(*args, sep=' ', end='\n', file=None)

The parameters are:

        * _args_: positional arguments whose values will be printed out.

        * _sep_: the separator, which will be printed between arguments.

        * _end_: the ending text, which will be printed after all of the
          arguments have been output.

        * _file_: the file object to which the output will be sent.

See also
........

PEP 3105(1) - Make print a function
     PEP written by Georg Brandl.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3105



Local Variables:
coding: utf-8
End:
