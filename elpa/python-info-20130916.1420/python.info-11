This is
/home/melpa/melpa/working/python-info-20130916.1420/python.info,
produced by makeinfo version 4.13 from
/home/melpa/melpa/working/python-info/python.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.5, September 16, 2013

     Georg Brandl

     Copyright (C) 1990-2013, Python Software Foundation


File: python.info,  Node: Integration with the warnings module,  Prev: Module-Level Functions,  Up: logging --- Logging facility for Python

5.15.7.10 Integration with the warnings module
..............................................

The *note captureWarnings(): 12ed. function can be used to integrate
*note logging: 101.  with the *note warnings: 193. module.

 -- Function: logging.captureWarnings (capture)
     This function is used to turn the capture of warnings by logging
     on and off.

     If _capture_ is `True', warnings issued by the *note warnings:
     193. module will be redirected to the logging system.
     Specifically, a warning will be formatted using *note
     warnings.formatwarning(): 12ee. and the resulting string logged to
     a logger named `'py.warnings'' with a severity of `WARNING'.

     If _capture_ is `False', the redirection of warnings to the
     logging system will stop, and warnings will be redirected to their
     original destinations (i.e. those in effect before
     `captureWarnings(True)' was called).

See also
........

Module *note logging.config: 102.
     Configuration API for the logging module.

Module *note logging.handlers: 103.
     Useful handlers included with the logging module.

PEP 282(1) - A Logging System
     The proposal which described this feature for inclusion in the
     Python standard library.

Original Python logging package(2)
     This is the original source for the *note logging: 101. package.
     The version of the package available from this site is suitable
     for use with Python 1.5.2, 2.1.x and 2.2.x, which do not include
     the *note logging: 101. package in the standard library.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0282

  (2) http://www.red-dove.com/python_logging.html


File: python.info,  Node: logging config --- Logging configuration,  Next: logging handlers --- Logging handlers,  Prev: logging --- Logging facility for Python,  Up: Generic Operating System Services

5.15.8 `logging.config' -- Logging configuration
------------------------------------------------

Important
.........

This page contains only reference information. For tutorials, please see

   * *note Basic Tutorial: 1298.

   * *note Advanced Tutorial: 1299.

   * *note Logging Cookbook: 129a.

  This section describes the API for configuring the logging module.

* Menu:

* Configuration functions::
* Configuration dictionary schema::
* Configuration file format::


File: python.info,  Node: Configuration functions,  Next: Configuration dictionary schema,  Up: logging config --- Logging configuration

5.15.8.1 Configuration functions
................................

The following functions configure the logging module. They are located
in the *note logging.config: 102. module.  Their use is optional -- you
can configure the logging module using these functions or by making
calls to the main API (defined in *note logging: 101. itself) and
defining handlers which are declared either in *note logging: 101. or
*note logging.handlers: 103.

 -- Function: logging.config.dictConfig (config)
          Takes the logging configuration from a dictionary.  The
          contents of this dictionary are described in *note
          Configuration dictionary schema: 12f3.  below.

          If an error is encountered during configuration, this
          function will raise a *note ValueError: 233, *note TypeError:
          215, *note AttributeError: 1f5.  or *note ImportError: 369.
          with a suitably descriptive message.  The following is a
          (possibly incomplete) list of conditions which will raise an
          error:

             * A `level' which is not a string or which is a string not
               corresponding to an actual logging level.

             * A `propagate' value which is not a boolean.

             * An id which does not have a corresponding destination.

             * A non-existent handler id found during an incremental
               call.

             * An invalid logger name.

             * Inability to resolve to an internal or external object.

          Parsing is performed by the `DictConfigurator' class, whose
          constructor is passed the dictionary used for configuration,
          and has a `configure()' method.  The *note logging.config:
          102. module has a callable attribute `dictConfigClass' which
          is initially set to `DictConfigurator'.  You can replace the
          value of `dictConfigClass' with a suitable implementation of
          your own.

          *note dictConfig(): 12f2. calls `dictConfigClass' passing the
          specified dictionary, and then calls the `configure()' method
          on the returned object to put the configuration into effect:

              def dictConfig(config):
                  dictConfigClass(config).configure()

          For example, a subclass of `DictConfigurator' could call
          `DictConfigurator.__init__()' in its own *note __init__():
          375, then set up custom prefixes which would be usable in the
          subsequent `configure()' call. `dictConfigClass' would be
          bound to this new subclass, and then *note dictConfig():
          12f2. could be called exactly as in the default, uncustomized
          state.

     New in version 2.7.

 -- Function: logging.config.fileConfig (fname, defaults=None,
          disable_existing_loggers=True)
     Reads the logging configuration from a `configparser'-format file
     named _fname_. This function can be called several times from an
     application, allowing an end user to select from various pre-canned
     configurations (if the developer provides a mechanism to present
     the choices and load the chosen configuration).

          Parameters:

             * *defaults* - Defaults to be passed to the ConfigParser
               can be specified in this argument.

             * *disable_existing_loggers* - If specified as `False',
               loggers which exist when this call is made are left
               alone. The default is `True' because this enables old
               behaviour in a backward- compatible way. This behaviour
               is to disable any existing loggers unless they or their
               ancestors are explicitly named in the logging
               configuration.

     Changed in version 2.6: The `disable_existing_loggers' keyword
     argument was added. Previously, existing loggers were _always_
     disabled.

 -- Function: logging.config.listen (port=DEFAULT_LOGGING_CONFIG_PORT)
     Starts up a socket server on the specified port, and listens for
     new configurations. If no port is specified, the module's default
     `DEFAULT_LOGGING_CONFIG_PORT' is used. Logging configurations will
     be sent as a file suitable for processing by *note fileConfig():
     12f4. Returns a `Thread' instance on which you can call `start()'
     to start the server, and which you can `join()' when appropriate.
     To stop the server, call *note stopListening(): 12f6.

     To send a configuration to the socket, read in the configuration
     file and send it to the socket as a string of bytes preceded by a
     four-byte length string packed in binary using `struct.pack('>L',
     n)'.

          Note: Because portions of the configuration are passed through
          *note eval(): 359, use of this function may open its users to
          a security risk.  While the function only binds to a socket
          on `localhost', and so does not accept connections from
          remote machines, there are scenarios where untrusted code
          could be run under the account of the process which calls
          *note listen(): 12f5. Specifically, if the process calling
          *note listen(): 12f5. runs on a multi-user machine where
          users cannot trust each other, then a malicious user could
          arrange to run essentially arbitrary code in a victim user's
          process, simply by connecting to the victim's *note listen():
          12f5. socket and sending a configuration which runs whatever
          code the attacker wants to have executed in the victim's
          process. This is especially easy to do if the default port is
          used, but not hard even if a different port is used).

 -- Function: logging.config.stopListening ()
     Stops the listening server which was created with a call to *note
     listen(): 12f5.  This is typically called before calling `join()'
     on the return value from *note listen(): 12f5.


File: python.info,  Node: Configuration dictionary schema,  Next: Configuration file format,  Prev: Configuration functions,  Up: logging config --- Logging configuration

5.15.8.2 Configuration dictionary schema
........................................

Describing a logging configuration requires listing the various objects
to create and the connections between them; for example, you may create
a handler named 'console' and then say that the logger named 'startup'
will send its messages to the 'console' handler.  These objects aren't
limited to those provided by the *note logging: 101.  module because
you might write your own formatter or handler class.  The parameters to
these classes may also need to include external objects such as
`sys.stderr'.  The syntax for describing these objects and connections
is defined in *note Object connections: 12f8.  below.

* Menu:

* Dictionary Schema Details::
* Incremental Configuration::
* Object connections::
* User-defined objects::
* Access to external objects::
* Access to internal objects::
* Import resolution and custom importers::


File: python.info,  Node: Dictionary Schema Details,  Next: Incremental Configuration,  Up: Configuration dictionary schema

5.15.8.3 Dictionary Schema Details
..................................

The dictionary passed to *note dictConfig(): 12f2. must contain the
following keys:

   * _version_ - to be set to an integer value representing the schema
     version.  The only valid value at present is 1, but having this key
     allows the schema to evolve while still preserving backwards
     compatibility.

  All other keys are optional, but if present they will be interpreted
as described below.  In all cases below where a 'configuring dict' is
mentioned, it will be checked for the special `'()'' key to see if a
custom instantiation is required.  If so, the mechanism described in
*note User-defined objects: 12fa. below is used to create an instance;
otherwise, the context is used to determine what to instantiate.

   * _formatters_ - the corresponding value will be a dict in which each
     key is a formatter id and each value is a dict describing how to
     configure the corresponding Formatter instance.

     The configuring dict is searched for keys `format' and `datefmt'
     (with defaults of `None') and these are used to construct a *note
     logging.Formatter: 12a3. instance.

   * _filters_ - the corresponding value will be a dict in which each
     key is a filter id and each value is a dict describing how to
     configure the corresponding Filter instance.

     The configuring dict is searched for the key `name' (defaulting to
     the empty string) and this is used to construct a *note
     logging.Filter: 12cf.  instance.

   * _handlers_ - the corresponding value will be a dict in which each
     key is a handler id and each value is a dict describing how to
     configure the corresponding Handler instance.

     The configuring dict is searched for the following keys:

        * `class' (mandatory).  This is the fully qualified name of the
          handler class.

        * `level' (optional).  The level of the handler.

        * `formatter' (optional).  The id of the formatter for this
          handler.

        * `filters' (optional).  A list of ids of the filters for this
          handler.

     All _other_ keys are passed through as keyword arguments to the
     handler's constructor.  For example, given the snippet:

         handlers:
           console:
             class : logging.StreamHandler
             formatter: brief
             level   : INFO
             filters: [allow_foo]
             stream  : ext://sys.stdout
           file:
             class : logging.handlers.RotatingFileHandler
             formatter: precise
             filename: logconfig.log
             maxBytes: 1024
             backupCount: 3

     the handler with id `console' is instantiated as a *note
     logging.StreamHandler: 12eb, using `sys.stdout' as the underlying
     stream.  The handler with id `file' is instantiated as a *note
     logging.handlers.RotatingFileHandler: 12fb. with the keyword
     arguments `filename='logconfig.log', maxBytes=1024, backupCount=3'.

   * _loggers_ - the corresponding value will be a dict in which each
     key is a logger name and each value is a dict describing how to
     configure the corresponding Logger instance.

     The configuring dict is searched for the following keys:

        * `level' (optional).  The level of the logger.

        * `propagate' (optional).  The propagation setting of the
          logger.

        * `filters' (optional).  A list of ids of the filters for this
          logger.

        * `handlers' (optional).  A list of ids of the handlers for this
          logger.

     The specified loggers will be configured according to the level,
     propagation, filters and handlers specified.

   * _root_ - this will be the configuration for the root logger.
     Processing of the configuration will be as for any logger, except
     that the `propagate' setting will not be applicable.

   * _incremental_ - whether the configuration is to be interpreted as
     incremental to the existing configuration.  This value defaults to
     `False', which means that the specified configuration replaces the
     existing configuration with the same semantics as used by the
     existing *note fileConfig(): 12f4. API.

     If the specified value is `True', the configuration is processed
     as described in the section on *note Incremental Configuration:
     12fc.

   * _disable_existing_loggers_ - whether any existing loggers are to be
     disabled. This setting mirrors the parameter of the same name in
     *note fileConfig(): 12f4. If absent, this parameter defaults to
     `True'.  This value is ignored if _incremental_ is `True'.


File: python.info,  Node: Incremental Configuration,  Next: Object connections,  Prev: Dictionary Schema Details,  Up: Configuration dictionary schema

5.15.8.4 Incremental Configuration
..................................

It is difficult to provide complete flexibility for incremental
configuration.  For example, because objects such as filters and
formatters are anonymous, once a configuration is set up, it is not
possible to refer to such anonymous objects when augmenting a
configuration.

  Furthermore, there is not a compelling case for arbitrarily altering
the object graph of loggers, handlers, filters, formatters at run-time,
once a configuration is set up; the verbosity of loggers and handlers
can be controlled just by setting levels (and, in the case of loggers,
propagation flags).  Changing the object graph arbitrarily in a safe
way is problematic in a multi-threaded environment; while not
impossible, the benefits are not worth the complexity it adds to the
implementation.

  Thus, when the `incremental' key of a configuration dict is present
and is `True', the system will completely ignore any `formatters' and
`filters' entries, and process only the `level' settings in the
`handlers' entries, and the `level' and `propagate' settings in the
`loggers' and `root' entries.

  Using a value in the configuration dict lets configurations to be sent
over the wire as pickled dicts to a socket listener. Thus, the logging
verbosity of a long-running application can be altered over time with
no need to stop and restart the application.


File: python.info,  Node: Object connections,  Next: User-defined objects,  Prev: Incremental Configuration,  Up: Configuration dictionary schema

5.15.8.5 Object connections
...........................

The schema describes a set of logging objects - loggers, handlers,
formatters, filters - which are connected to each other in an object
graph.  Thus, the schema needs to represent connections between the
objects.  For example, say that, once configured, a particular logger
has attached to it a particular handler.  For the purposes of this
discussion, we can say that the logger represents the source, and the
handler the destination, of a connection between the two.  Of course in
the configured objects this is represented by the logger holding a
reference to the handler.  In the configuration dict, this is done by
giving each destination object an id which identifies it unambiguously,
and then using the id in the source object's configuration to indicate
that a connection exists between the source and the destination object
with that id.

  So, for example, consider the following YAML snippet:

    formatters:
      brief:
        # configuration for formatter with id 'brief' goes here
      precise:
        # configuration for formatter with id 'precise' goes here
    handlers:
      h1: #This is an id
       # configuration of handler with id 'h1' goes here
       formatter: brief
      h2: #This is another id
       # configuration of handler with id 'h2' goes here
       formatter: precise
    loggers:
      foo.bar.baz:
        # other configuration for logger 'foo.bar.baz'
        handlers: [h1, h2]

(Note: YAML used here because it's a little more readable than the
equivalent Python source form for the dictionary.)

  The ids for loggers are the logger names which would be used
programmatically to obtain a reference to those loggers, e.g.
`foo.bar.baz'.  The ids for Formatters and Filters can be any string
value (such as `brief', `precise' above) and they are transient, in
that they are only meaningful for processing the configuration
dictionary and used to determine connections between objects, and are
not persisted anywhere when the configuration call is complete.

  The above snippet indicates that logger named `foo.bar.baz' should
have two handlers attached to it, which are described by the handler
ids `h1' and `h2'. The formatter for `h1' is that described by id
`brief', and the formatter for `h2' is that described by id `precise'.


File: python.info,  Node: User-defined objects,  Next: Access to external objects,  Prev: Object connections,  Up: Configuration dictionary schema

5.15.8.6 User-defined objects
.............................

The schema supports user-defined objects for handlers, filters and
formatters.  (Loggers do not need to have different types for different
instances, so there is no support in this configuration schema for
user-defined logger classes.)

  Objects to be configured are described by dictionaries which detail
their configuration.  In some places, the logging system will be able
to infer from the context how an object is to be instantiated, but when
a user-defined object is to be instantiated, the system will not know
how to do this.  In order to provide complete flexibility for
user-defined object instantiation, the user needs to provide a
'factory' - a callable which is called with a configuration dictionary
and which returns the instantiated object.  This is signalled by an
absolute import path to the factory being made available under the
special key `'()''.  Here's a concrete example:

    formatters:
      brief:
        format: '%(message)s'
      default:
        format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'
        datefmt: '%Y-%m-%d %H:%M:%S'
      custom:
          (): my.package.customFormatterFactory
          bar: baz
          spam: 99.9
          answer: 42

The above YAML snippet defines three formatters.  The first, with id
`brief', is a standard *note logging.Formatter: 12a3. instance with the
specified format string.  The second, with id `default', has a longer
format and also defines the time format explicitly, and will result in
a *note logging.Formatter: 12a3. initialized with those two format
strings.  Shown in Python source form, the `brief' and `default'
formatters have configuration sub-dictionaries:

    {
      'format' : '%(message)s'
    }

and:

    {
      'format' : '%(asctime)s %(levelname)-8s %(name)-15s %(message)s',
      'datefmt' : '%Y-%m-%d %H:%M:%S'
    }

respectively, and as these dictionaries do not contain the special key
`'()'', the instantiation is inferred from the context: as a result,
standard *note logging.Formatter: 12a3. instances are created.  The
configuration sub-dictionary for the third formatter, with id `custom',
is:

    {
      '()' : 'my.package.customFormatterFactory',
      'bar' : 'baz',
      'spam' : 99.9,
      'answer' : 42
    }

and this contains the special key `'()'', which means that user-defined
instantiation is wanted.  In this case, the specified factory callable
will be used. If it is an actual callable it will be used directly -
otherwise, if you specify a string (as in the example) the actual
callable will be located using normal import mechanisms.  The callable
will be called with the *remaining* items in the configuration
sub-dictionary as keyword arguments.  In the above example, the
formatter with id `custom' will be assumed to be returned by the call:

    my.package.customFormatterFactory(bar='baz', spam=99.9, answer=42)

The key `'()'' has been used as the special key because it is not a
valid keyword parameter name, and so will not clash with the names of
the keyword arguments used in the call.  The `'()'' also serves as a
mnemonic that the corresponding value is a callable.


File: python.info,  Node: Access to external objects,  Next: Access to internal objects,  Prev: User-defined objects,  Up: Configuration dictionary schema

5.15.8.7 Access to external objects
...................................

There are times where a configuration needs to refer to objects
external to the configuration, for example `sys.stderr'.  If the
configuration dict is constructed using Python code, this is
straightforward, but a problem arises when the configuration is
provided via a text file (e.g. JSON, YAML).  In a text file, there is
no standard way to distinguish `sys.stderr' from the literal string
`'sys.stderr''.  To facilitate this distinction, the configuration
system looks for certain special prefixes in string values and treat
them specially.  For example, if the literal string
`'ext://sys.stderr'' is provided as a value in the configuration, then
the `ext://' will be stripped off and the remainder of the value
processed using normal import mechanisms.

  The handling of such prefixes is done in a way analogous to protocol
handling: there is a generic mechanism to look for prefixes which match
the regular expression `^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' whereby,
if the `prefix' is recognised, the `suffix' is processed in a
prefix-dependent manner and the result of the processing replaces the
string value.  If the prefix is not recognised, then the string value
will be left as-is.


File: python.info,  Node: Access to internal objects,  Next: Import resolution and custom importers,  Prev: Access to external objects,  Up: Configuration dictionary schema

5.15.8.8 Access to internal objects
...................................

As well as external objects, there is sometimes also a need to refer to
objects in the configuration.  This will be done implicitly by the
configuration system for things that it knows about.  For example, the
string value `'DEBUG'' for a `level' in a logger or handler will
automatically be converted to the value `logging.DEBUG', and the
`handlers', `filters' and `formatter' entries will take an object id
and resolve to the appropriate destination object.

  However, a more generic mechanism is needed for user-defined objects
which are not known to the *note logging: 101. module.  For example,
consider *note logging.handlers.MemoryHandler: 1304, which takes a
`target' argument which is another handler to delegate to. Since the
system already knows about this class, then in the configuration, the
given `target' just needs to be the object id of the relevant target
handler, and the system will resolve to the handler from the id.  If,
however, a user defines a `my.package.MyHandler' which has an
`alternate' handler, the configuration system would not know that the
`alternate' referred to a handler.  To cater for this, a generic
resolution system allows the user to specify:

    handlers:
      file:
        # configuration of file handler goes here

      custom:
        (): my.package.MyHandler
        alternate: cfg://handlers.file

The literal string `'cfg://handlers.file'' will be resolved in an
analogous way to strings with the `ext://' prefix, but looking in the
configuration itself rather than the import namespace.  The mechanism
allows access by dot or by index, in a similar way to that provided by
`str.format'.  Thus, given the following snippet:

    handlers:
      email:
        class: logging.handlers.SMTPHandler
        mailhost: localhost
        fromaddr: my_app@domain.tld
        toaddrs:
          - support_team@domain.tld
          - dev_team@domain.tld
        subject: Houston, we have a problem.

in the configuration, the string `'cfg://handlers'' would resolve to
the dict with key `handlers', the string `'cfg://handlers.email' would
resolve to the dict with key `email' in the `handlers' dict, and so on.
The string `'cfg://handlers.email.toaddrs[1]' would resolve to
`'dev_team.domain.tld'' and the string
`'cfg://handlers.email.toaddrs[0]'' would resolve to the value
`'support_team@domain.tld''. The `subject' value could be accessed
using either `'cfg://handlers.email.subject'' or, equivalently,
`'cfg://handlers.email[subject]''.  The latter form only needs to be
used if the key contains spaces or non-alphanumeric characters.  If an
index value consists only of decimal digits, access will be attempted
using the corresponding integer value, falling back to the string value
if needed.

  Given a string `cfg://handlers.myhandler.mykey.123', this will
resolve to `config_dict['handlers']['myhandler']['mykey']['123']'.  If
the string is specified as `cfg://handlers.myhandler.mykey[123]', the
system will attempt to retrieve the value from
`config_dict['handlers']['myhandler']['mykey'][123]', and fall back to
`config_dict['handlers']['myhandler']['mykey']['123']' if that fails.


File: python.info,  Node: Import resolution and custom importers,  Prev: Access to internal objects,  Up: Configuration dictionary schema

5.15.8.9 Import resolution and custom importers
...............................................

Import resolution, by default, uses the builtin *note __import__():
377. function to do its importing. You may want to replace this with
your own importing mechanism: if so, you can replace the `importer'
attribute of the `DictConfigurator' or its superclass, the
`BaseConfigurator' class. However, you need to be careful because of
the way functions are accessed from classes via descriptors. If you are
using a Python callable to do your imports, and you want to define it
at class level rather than instance level, you need to wrap it with
*note staticmethod(): 3ee. For example:

    from importlib import import_module
    from logging.config import BaseConfigurator

    BaseConfigurator.importer = staticmethod(import_module)

You don't need to wrap with *note staticmethod(): 3ee. if you're
setting the import callable on a configurator _instance_.


File: python.info,  Node: Configuration file format,  Prev: Configuration dictionary schema,  Up: logging config --- Logging configuration

5.15.8.10 Configuration file format
...................................

The configuration file format understood by *note fileConfig(): 12f4.
is based on `configparser' functionality. The file must contain
sections called `[loggers]', `[handlers]' and `[formatters]' which
identify by name the entities of each type which are defined in the
file. For each such entity, there is a separate section which
identifies how that entity is configured.  Thus, for a logger named
`log01' in the `[loggers]' section, the relevant configuration details
are held in a section `[logger_log01]'. Similarly, a handler called
`hand01' in the `[handlers]' section will have its configuration held
in a section called `[handler_hand01]', while a formatter called
`form01' in the `[formatters]' section will have its configuration
specified in a section called `[formatter_form01]'. The root logger
configuration must be specified in a section called `[logger_root]'.

  Examples of these sections in the file are given below.

    [loggers]
    keys=root,log02,log03,log04,log05,log06,log07

    [handlers]
    keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09

    [formatters]
    keys=form01,form02,form03,form04,form05,form06,form07,form08,form09

The root logger must specify a level and a list of handlers. An example
of a root logger section is given below.

    [logger_root]
    level=NOTSET
    handlers=hand01

The `level' entry can be one of `DEBUG, INFO, WARNING, ERROR, CRITICAL'
or `NOTSET'. For the root logger only, `NOTSET' means that all messages
will be logged. Level values are *note eval(): 359.uated in the context
of the `logging' package's namespace.

  The `handlers' entry is a comma-separated list of handler names,
which must appear in the `[handlers]' section. These names must appear
in the `[handlers]' section and have corresponding sections in the
configuration file.

  For loggers other than the root logger, some additional information
is required.  This is illustrated by the following example.

    [logger_parser]
    level=DEBUG
    handlers=hand01
    propagate=1
    qualname=compiler.parser

The `level' and `handlers' entries are interpreted as for the root
logger, except that if a non-root logger's level is specified as
`NOTSET', the system consults loggers higher up the hierarchy to
determine the effective level of the logger. The `propagate' entry is
set to 1 to indicate that messages must propagate to handlers higher up
the logger hierarchy from this logger, or 0 to indicate that messages
are *not* propagated to handlers up the hierarchy. The `qualname' entry
is the hierarchical channel name of the logger, that is to say the name
used by the application to get the logger.

  Sections which specify handler configuration are exemplified by the
following.

    [handler_hand01]
    class=StreamHandler
    level=NOTSET
    formatter=form01
    args=(sys.stdout,)

The `class' entry indicates the handler's class (as determined by *note
eval(): 359.  in the `logging' package's namespace). The `level' is
interpreted as for loggers, and `NOTSET' is taken to mean 'log
everything'.

  Changed in version 2.6: Added support for resolving the handler’s
class as a dotted module and class name.

  The `formatter' entry indicates the key name of the formatter for this
handler. If blank, a default formatter (`logging._defaultFormatter') is
used.  If a name is specified, it must appear in the `[formatters]'
section and have a corresponding section in the configuration file.

  The `args' entry, when *note eval(): 359.uated in the context of the
`logging' package's namespace, is the list of arguments to the
constructor for the handler class. Refer to the constructors for the
relevant handlers, or to the examples below, to see how typical entries
are constructed.

    [handler_hand02]
    class=FileHandler
    level=DEBUG
    formatter=form02
    args=('python.log', 'w')

    [handler_hand03]
    class=handlers.SocketHandler
    level=INFO
    formatter=form03
    args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)

    [handler_hand04]
    class=handlers.DatagramHandler
    level=WARN
    formatter=form04
    args=('localhost', handlers.DEFAULT_UDP_LOGGING_PORT)

    [handler_hand05]
    class=handlers.SysLogHandler
    level=ERROR
    formatter=form05
    args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)

    [handler_hand06]
    class=handlers.NTEventLogHandler
    level=CRITICAL
    formatter=form06
    args=('Python Application', '', 'Application')

    [handler_hand07]
    class=handlers.SMTPHandler
    level=WARN
    formatter=form07
    args=('localhost', 'from@abc', ['user1@abc', 'user2@xyz'], 'Logger Subject')

    [handler_hand08]
    class=handlers.MemoryHandler
    level=NOTSET
    formatter=form08
    target=
    args=(10, ERROR)

    [handler_hand09]
    class=handlers.HTTPHandler
    level=NOTSET
    formatter=form09
    args=('localhost:9022', '/log', 'GET')

Sections which specify formatter configuration are typified by the
following.

    [formatter_form01]
    format=F1 %(asctime)s %(levelname)s %(message)s
    datefmt=
    class=logging.Formatter

The `format' entry is the overall format string, and the `datefmt'
entry is the `strftime()'-compatible date/time format string.  If
empty, the package substitutes ISO8601 format date/times, which is
almost equivalent to specifying the date format string `'%Y-%m-%d
%H:%M:%S''.  The ISO8601 format also specifies milliseconds, which are
appended to the result of using the above format string, with a comma
separator.  An example time in ISO8601 format is `2003-01-23
00:29:50,411'.

  The `class' entry is optional.  It indicates the name of the
formatter's class (as a dotted module and class name.)  This option is
useful for instantiating a `Formatter' subclass.  Subclasses of
`Formatter' can present exception tracebacks in an expanded or
condensed format.

     Note: Due to the use of *note eval(): 359. as described above,
     there are potential security risks which result from using the
     *note listen(): 12f5. to send and receive configurations via
     sockets. The risks are limited to where multiple users with no
     mutual trust run code on the same machine; see the *note listen():
     12f5. documentation for more information.

See also
........

Module *note logging: 101.
     API reference for the logging module.

Module *note logging.handlers: 103.
     Useful handlers included with the logging module.


File: python.info,  Node: logging handlers --- Logging handlers,  Next: getpass --- Portable password input,  Prev: logging config --- Logging configuration,  Up: Generic Operating System Services

5.15.9 `logging.handlers' -- Logging handlers
---------------------------------------------

Important
.........

This page contains only reference information. For tutorials, please see

   * *note Basic Tutorial: 1298.

   * *note Advanced Tutorial: 1299.

   * *note Logging Cookbook: 129a.

  The following useful handlers are provided in the package. Note that
three of the handlers (*note StreamHandler: 12eb, *note FileHandler:
130b. and *note NullHandler: 130c.) are actually defined in the *note
logging: 101. module itself, but have been documented here along with
the other handlers.

* Menu:

* StreamHandler::
* FileHandler::
* NullHandler::
* WatchedFileHandler::
* RotatingFileHandler::
* TimedRotatingFileHandler::
* SocketHandler::
* DatagramHandler::
* SysLogHandler::
* NTEventLogHandler::
* SMTPHandler::
* MemoryHandler::
* HTTPHandler::


File: python.info,  Node: StreamHandler,  Next: FileHandler,  Up: logging handlers --- Logging handlers

5.15.9.1 StreamHandler
......................

The *note StreamHandler: 12eb. class, located in the core *note
logging: 101. package, sends logging output to streams such as
_sys.stdout_, _sys.stderr_ or any file-like object (or, more precisely,
any object which supports `write()' and `flush()' methods).

 -- Class: logging.StreamHandler (stream=None)
     Returns a new instance of the *note StreamHandler: 12eb. class. If
     _stream_ is specified, the instance will use it for logging
     output; otherwise, _sys.stderr_ will be used.

      -- Method: emit (record)
          If a formatter is specified, it is used to format the record.
          The record is then written to the stream with a newline
          terminator. If exception information is present, it is
          formatted using *note traceback.print_exception(): 12cc. and
          appended to the stream.

      -- Method: flush ()
          Flushes the stream by calling its *note flush(): 1310.
          method. Note that the `close()' method is inherited from
          `Handler' and so does no output, so an explicit *note
          flush(): 1310. call may be needed at times.


File: python.info,  Node: FileHandler,  Next: NullHandler,  Prev: StreamHandler,  Up: logging handlers --- Logging handlers

5.15.9.2 FileHandler
....................

The *note FileHandler: 130b. class, located in the core *note logging:
101. package, sends logging output to a disk file.  It inherits the
output functionality from *note StreamHandler: 12eb.

 -- Class: logging.FileHandler (filename, mode='a', encoding=None,
          delay=False)
     Returns a new instance of the *note FileHandler: 130b. class. The
     specified file is opened and used as the stream for logging. If
     _mode_ is not specified, `'a'' is used.  If _encoding_ is not
     _None_, it is used to open the file with that encoding.  If
     _delay_ is true, then file opening is deferred until the first
     call to *note emit(): 1313. By default, the file grows
     indefinitely.

     Changed in version 2.6: _delay_ was added.

      -- Method: close ()
          Closes the file.

      -- Method: emit (record)
          Outputs the record to the file.


File: python.info,  Node: NullHandler,  Next: WatchedFileHandler,  Prev: FileHandler,  Up: logging handlers --- Logging handlers

5.15.9.3 NullHandler
....................

New in version 2.7.

  The *note NullHandler: 130c. class, located in the core *note
logging: 101. package, does not do any formatting or output. It is
essentially a 'no-op' handler for use by library developers.

 -- Class: logging.NullHandler
     Returns a new instance of the *note NullHandler: 130c. class.

      -- Method: emit (record)
          This method does nothing.

      -- Method: handle (record)
          This method does nothing.

      -- Method: createLock ()
          This method returns `None' for the lock, since there is no
          underlying I/O to which access needs to be serialized.

  See *note Configuring Logging for a Library: 131a. for more
information on how to use *note NullHandler: 130c.


File: python.info,  Node: WatchedFileHandler,  Next: RotatingFileHandler,  Prev: NullHandler,  Up: logging handlers --- Logging handlers

5.15.9.4 WatchedFileHandler
...........................

New in version 2.6.

  The *note WatchedFileHandler: 131d. class, located in the *note
logging.handlers: 103.  module, is a `FileHandler' which watches the
file it is logging to. If the file changes, it is closed and reopened
using the file name.

  A file change can happen because of usage of programs such as
_newsyslog_ and _logrotate_ which perform log file rotation. This
handler, intended for use under Unix/Linux, watches the file to see if
it has changed since the last emit.  (A file is deemed to have changed
if its device or inode have changed.) If the file has changed, the old
file stream is closed, and the file opened to get a new stream.

  This handler is not appropriate for use under Windows, because under
Windows open log files cannot be moved or renamed - logging opens the
files with exclusive locks - and so there is no need for such a
handler. Furthermore, _ST_INO_ is not supported under Windows; *note
stat(): 161. always returns zero for this value.

 -- Class: logging.handlers.WatchedFileHandler (filename[, mode[,
          encoding[, delay]]])
     Returns a new instance of the *note WatchedFileHandler: 131d.
     class. The specified file is opened and used as the stream for
     logging. If _mode_ is not specified, `'a'' is used.  If _encoding_
     is not _None_, it is used to open the file with that encoding.  If
     _delay_ is true, then file opening is deferred until the first
     call to *note emit(): 131e.  By default, the file grows
     indefinitely.

      -- Method: emit (record)
          Outputs the record to the file, but first checks to see if
          the file has changed.  If it has, the existing stream is
          flushed and closed and the file opened again, before
          outputting the record to the file.


File: python.info,  Node: RotatingFileHandler,  Next: TimedRotatingFileHandler,  Prev: WatchedFileHandler,  Up: logging handlers --- Logging handlers

5.15.9.5 RotatingFileHandler
............................

The *note RotatingFileHandler: 12fb. class, located in the *note
logging.handlers: 103.  module, supports rotation of disk log files.

 -- Class: logging.handlers.RotatingFileHandler (filename, mode='a',
          maxBytes=0, backupCount=0, encoding=None, delay=0)
     Returns a new instance of the *note RotatingFileHandler: 12fb.
     class. The specified file is opened and used as the stream for
     logging. If _mode_ is not specified, `'a'' is used.  If _encoding_
     is not _None_, it is used to open the file with that encoding.  If
     _delay_ is true, then file opening is deferred until the first
     call to *note emit(): 1321.  By default, the file grows
     indefinitely.

     You can use the _maxBytes_ and _backupCount_ values to allow the
     file to _rollover_ at a predetermined size. When the size is about
     to be exceeded, the file is closed and a new file is silently
     opened for output. Rollover occurs whenever the current log file
     is nearly _maxBytes_ in length; if _maxBytes_ is zero, rollover
     never occurs.  If _backupCount_ is non-zero, the system will save
     old log files by appending the extensions '.1', '.2' etc., to the
     filename. For example, with a _backupCount_ of 5 and a base file
     name of `app.log', you would get `app.log', `app.log.1',
     `app.log.2', up to `app.log.5'. The file being written to is
     always `app.log'.  When this file is filled, it is closed and
     renamed to `app.log.1', and if files `app.log.1', `app.log.2',
     etc.  exist, then they are renamed to `app.log.2', `app.log.3'
     etc.  respectively.

     Changed in version 2.6: _delay_ was added.

      -- Method: doRollover ()
          Does a rollover, as described above.

      -- Method: emit (record)
          Outputs the record to the file, catering for rollover as
          described previously.


File: python.info,  Node: TimedRotatingFileHandler,  Next: SocketHandler,  Prev: RotatingFileHandler,  Up: logging handlers --- Logging handlers

5.15.9.6 TimedRotatingFileHandler
.................................

The *note TimedRotatingFileHandler: 1325. class, located in the *note
logging.handlers: 103. module, supports rotation of disk log files at
certain timed intervals.

 -- Class: logging.handlers.TimedRotatingFileHandler (filename,
          when='h', interval=1, backupCount=0, encoding=None,
          delay=False, utc=False)
     Returns a new instance of the *note TimedRotatingFileHandler:
     1325. class. The specified file is opened and used as the stream
     for logging. On rotating it also sets the filename suffix.
     Rotating happens based on the product of _when_ and _interval_.

     You can use the _when_ to specify the type of _interval_. The list
     of possible values is below.  Note that they are not case
     sensitive.

     Value                Type of interval
     ------------------------------------------------- 
     `'S''                Seconds
     `'M''                Minutes
     `'H''                Hours
     `'D''                Days
     `'W0'-'W6''          Weekday (0=Monday)
     `'midnight''         Roll over at midnight

     When using weekday-based rotation, specify 'W0' for Monday, 'W1'
     for Tuesday, and so on up to 'W6' for Sunday. In this case, the
     value passed for _interval_ isn't used.

     The system will save old log files by appending extensions to the
     filename.  The extensions are date-and-time based, using the
     strftime format `%Y-%m-%d_%H-%M-%S' or a leading portion thereof,
     depending on the rollover interval.

     When computing the next rollover time for the first time (when the
     handler is created), the last modification time of an existing log
     file, or else the current time, is used to compute when the next
     rotation will occur.

     If the _utc_ argument is true, times in UTC will be used; otherwise
     local time is used.

     If _backupCount_ is nonzero, at most _backupCount_ files will be
     kept, and if more would be created when rollover occurs, the oldest
     one is deleted. The deletion logic uses the interval to determine
     which files to delete, so changing the interval may leave old
     files lying around.

     If _delay_ is true, then file opening is deferred until the first
     call to *note emit(): 1326.

     Changed in version 2.6: _delay_ and _utc_ were added.

      -- Method: doRollover ()
          Does a rollover, as described above.

      -- Method: emit (record)
          Outputs the record to the file, catering for rollover as
          described above.


File: python.info,  Node: SocketHandler,  Next: DatagramHandler,  Prev: TimedRotatingFileHandler,  Up: logging handlers --- Logging handlers

5.15.9.7 SocketHandler
......................

The *note SocketHandler: 132a. class, located in the *note
logging.handlers: 103. module, sends logging output to a network
socket. The base class uses a TCP socket.

 -- Class: logging.handlers.SocketHandler (host, port)
     Returns a new instance of the *note SocketHandler: 132a. class
     intended to communicate with a remote machine whose address is
     given by _host_ and _port_.

      -- Method: close ()
          Closes the socket.

      -- Method: emit ()
          Pickles the record's attribute dictionary and writes it to
          the socket in binary format. If there is an error with the
          socket, silently drops the packet. If the connection was
          previously lost, re-establishes the connection. To unpickle
          the record at the receiving end into a `LogRecord', use the
          `makeLogRecord()' function.

      -- Method: handleError ()
          Handles an error which has occurred during *note emit():
          132c. The most likely cause is a lost connection. Closes the
          socket so that we can retry on the next event.

      -- Method: makeSocket ()
          This is a factory method which allows subclasses to define
          the precise type of socket they want. The default
          implementation creates a TCP socket (*note
          socket.SOCK_STREAM: 1d9.).

      -- Method: makePickle (record)
          Pickles the record's attribute dictionary in binary format
          with a length prefix, and returns it ready for transmission
          across the socket.

          Note that pickles aren't completely secure. If you are
          concerned about security, you may want to override this
          method to implement a more secure mechanism. For example, you
          can sign pickles using HMAC and then verify them on the
          receiving end, or alternatively you can disable unpickling of
          global objects on the receiving end.

      -- Method: send (packet)
          Send a pickled string _packet_ to the socket. This function
          allows for partial sends which can happen when the network is
          busy.

      -- Method: createSocket ()
          Tries to create a socket; on failure, uses an exponential
          back-off algorithm.  On intial failure, the handler will drop
          the message it was trying to send.  When subsequent messages
          are handled by the same instance, it will not try connecting
          until some time has passed.  The default parameters are such
          that the initial delay is one second, and if after that delay
          the connection still can't be made, the handler will double
          the delay each time up to a maximum of 30 seconds.

          This behaviour is controlled by the following handler
          attributes:

             * `retryStart' (initial delay, defaulting to 1.0 seconds).

             * `retryFactor' (multiplier, defaulting to 2.0).

             * `retryMax' (maximum delay, defaulting to 30.0 seconds).

          This means that if the remote listener starts up _after_ the
          handler has been used, you could lose messages (since the
          handler won't even attempt a connection until the delay has
          elapsed, but just silently drop messages during the delay
          period).


File: python.info,  Node: DatagramHandler,  Next: SysLogHandler,  Prev: SocketHandler,  Up: logging handlers --- Logging handlers

5.15.9.8 DatagramHandler
........................

The *note DatagramHandler: 1334. class, located in the *note
logging.handlers: 103.  module, inherits from *note SocketHandler:
132a. to support sending logging messages over UDP sockets.

 -- Class: logging.handlers.DatagramHandler (host, port)
     Returns a new instance of the *note DatagramHandler: 1334. class
     intended to communicate with a remote machine whose address is
     given by _host_ and _port_.

      -- Method: emit ()
          Pickles the record's attribute dictionary and writes it to
          the socket in binary format. If there is an error with the
          socket, silently drops the packet. To unpickle the record at
          the receiving end into a `LogRecord', use the
          `makeLogRecord()' function.

      -- Method: makeSocket ()
          The factory method of *note SocketHandler: 132a. is here
          overridden to create a UDP socket (*note socket.SOCK_DGRAM:
          1d8.).

      -- Method: send (s)
          Send a pickled string to a socket.


File: python.info,  Node: SysLogHandler,  Next: NTEventLogHandler,  Prev: DatagramHandler,  Up: logging handlers --- Logging handlers

5.15.9.9 SysLogHandler
......................

The *note SysLogHandler: 1d7. class, located in the *note
logging.handlers: 103. module, supports sending logging messages to a
remote or local Unix syslog.

 -- Class: logging.handlers.SysLogHandler (address=('localhost',
          SYSLOG_UDP_PORT), facility=LOG_USER,
          socktype=socket.SOCK_DGRAM)
     Returns a new instance of the *note SysLogHandler: 1d7. class
     intended to communicate with a remote Unix machine whose address
     is given by _address_ in the form of a `(host, port)' tuple.  If
     _address_ is not specified, `('localhost', 514)' is used.  The
     address is used to open a socket.  An alternative to providing a
     `(host, port)' tuple is providing an address as a string, for
     example '/dev/log'. In this case, a Unix domain socket is used to
     send the message to the syslog. If _facility_ is not specified,
     `LOG_USER' is used. The type of socket opened depends on the
     _socktype_ argument, which defaults to *note socket.SOCK_DGRAM:
     1d8. and thus opens a UDP socket. To open a TCP socket (for use
     with the newer syslog daemons such as rsyslog), specify a value of
     *note socket.SOCK_STREAM: 1d9.

     Note that if your server is not listening on UDP port 514, *note
     SysLogHandler: 1d7. may appear not to work. In that case, check
     what address you should be using for a domain socket - it's system
     dependent.  For example, on Linux it's usually '/dev/log' but on
     OS/X it's '/var/run/syslog'. You'll need to check your platform
     and use the appropriate address (you may need to do this check at
     runtime if your application needs to run on several platforms). On
     Windows, you pretty much have to use the UDP option.

     Changed in version 2.7: _socktype_ was added.

      -- Method: close ()
          Closes the socket to the remote host.

      -- Method: emit (record)
          The record is formatted, and then sent to the syslog server.
          If exception information is present, it is _not_ sent to the
          server.

      -- Method: encodePriority (facility, priority)
          Encodes the facility and priority into an integer. You can
          pass in strings or integers - if strings are passed, internal
          mapping dictionaries are used to convert them to integers.

          The symbolic `LOG_' values are defined in *note
          SysLogHandler: 1d7. and mirror the values defined in the
          `sys/syslog.h' header file.

          *Priorities*

          Name (string)                  Symbolic value
          --------------------------------------------------- 
          `alert'                        LOG_ALERT
          `crit' or `critical'           LOG_CRIT
          `debug'                        LOG_DEBUG
          `emerg' or `panic'             LOG_EMERG
          `err' or `error'               LOG_ERR
          `info'                         LOG_INFO
          `notice'                       LOG_NOTICE
          `warn' or `warning'            LOG_WARNING

          *Facilities*

          Name (string)       Symbolic value
          ---------------------------------------- 
          `auth'              LOG_AUTH
          `authpriv'          LOG_AUTHPRIV
          `cron'              LOG_CRON
          `daemon'            LOG_DAEMON
          `ftp'               LOG_FTP
          `kern'              LOG_KERN
          `lpr'               LOG_LPR
          `mail'              LOG_MAIL
          `news'              LOG_NEWS
          `syslog'            LOG_SYSLOG
          `user'              LOG_USER
          `uucp'              LOG_UUCP
          `local0'            LOG_LOCAL0
          `local1'            LOG_LOCAL1
          `local2'            LOG_LOCAL2
          `local3'            LOG_LOCAL3
          `local4'            LOG_LOCAL4
          `local5'            LOG_LOCAL5
          `local6'            LOG_LOCAL6
          `local7'            LOG_LOCAL7


      -- Method: mapPriority (levelname)
          Maps a logging level name to a syslog priority name.  You may
          need to override this if you are using custom levels, or if
          the default algorithm is not suitable for your needs. The
          default algorithm maps `DEBUG', `INFO', `WARNING', `ERROR' and
          `CRITICAL' to the equivalent syslog names, and all other level
          names to 'warning'.


File: python.info,  Node: NTEventLogHandler,  Next: SMTPHandler,  Prev: SysLogHandler,  Up: logging handlers --- Logging handlers

5.15.9.10 NTEventLogHandler
...........................

The *note NTEventLogHandler: 1340. class, located in the *note
logging.handlers: 103.  module, supports sending logging messages to a
local Windows NT, Windows 2000 or Windows XP event log. Before you can
use it, you need Mark Hammond's Win32 extensions for Python installed.

 -- Class: logging.handlers.NTEventLogHandler (appname, dllname=None,
          logtype='Application')
     Returns a new instance of the *note NTEventLogHandler: 1340.
     class. The _appname_ is used to define the application name as it
     appears in the event log. An appropriate registry entry is created
     using this name. The _dllname_ should give the fully qualified
     pathname of a .dll or .exe which contains message definitions to
     hold in the log (if not specified, `'win32service.pyd'' is used -
     this is installed with the Win32 extensions and contains some basic
     placeholder message definitions. Note that use of these
     placeholders will make your event logs big, as the entire message
     source is held in the log. If you want slimmer logs, you have to
     pass in the name of your own .dll or .exe which contains the
     message definitions you want to use in the event log). The
     _logtype_ is one of `'Application'', `'System'' or `'Security'',
     and defaults to `'Application''.

      -- Method: close ()
          At this point, you can remove the application name from the
          registry as a source of event log entries. However, if you do
          this, you will not be able to see the events as you intended
          in the Event Log Viewer - it needs to be able to access the
          registry to get the .dll name. The current version does not
          do this.

      -- Method: emit (record)
          Determines the message ID, event category and event type, and
          then logs the message in the NT event log.

      -- Method: getEventCategory (record)
          Returns the event category for the record. Override this if
          you want to specify your own categories. This version returns
          0.

      -- Method: getEventType (record)
          Returns the event type for the record. Override this if you
          want to specify your own types. This version does a mapping
          using the handler's typemap attribute, which is set up in
          *note __init__(): 375. to a dictionary which contains
          mappings for `DEBUG', `INFO', `WARNING', `ERROR' and
          `CRITICAL'. If you are using your own levels, you will either
          need to override this method or place a suitable dictionary
          in the handler's _typemap_ attribute.

      -- Method: getMessageID (record)
          Returns the message ID for the record. If you are using your
          own messages, you could do this by having the _msg_ passed to
          the logger being an ID rather than a format string. Then, in
          here, you could use a dictionary lookup to get the message
          ID. This version returns 1, which is the base message ID in
          `win32service.pyd'.


File: python.info,  Node: SMTPHandler,  Next: MemoryHandler,  Prev: NTEventLogHandler,  Up: logging handlers --- Logging handlers

5.15.9.11 SMTPHandler
.....................

The *note SMTPHandler: 1348. class, located in the *note
logging.handlers: 103. module, supports sending logging messages to an
email address via SMTP.

 -- Class: logging.handlers.SMTPHandler (mailhost, fromaddr, toaddrs,
          subject, credentials=None, secure=None)
     Returns a new instance of the *note SMTPHandler: 1348. class. The
     instance is initialized with the from and to addresses and subject
     line of the email.  The _toaddrs_ should be a list of strings. To
     specify a non-standard SMTP port, use the (host, port) tuple
     format for the _mailhost_ argument. If you use a string, the
     standard SMTP port is used. If your SMTP server requires
     authentication, you can specify a (username, password) tuple for
     the _credentials_ argument.

     To specify the use of a secure protocol (TLS), pass in a tuple to
     the _secure_ argument. This will only be used when authentication
     credentials are supplied. The tuple should be either an empty
     tuple, or a single-value tuple with the name of a keyfile, or a
     2-value tuple with the names of the keyfile and certificate file.
     (This tuple is passed to the *note smtplib.SMTP.starttls(): 1349.
     method.)

     Changed in version 2.6: _credentials_ was added.

     Changed in version 2.7: _secure_ was added.

      -- Method: emit (record)
          Formats the record and sends it to the specified addressees.

      -- Method: getSubject (record)
          If you want to specify a subject line which is
          record-dependent, override this method.


File: python.info,  Node: MemoryHandler,  Next: HTTPHandler,  Prev: SMTPHandler,  Up: logging handlers --- Logging handlers

5.15.9.12 MemoryHandler
.......................

The *note MemoryHandler: 1304. class, located in the *note
logging.handlers: 103. module, supports buffering of logging records in
memory, periodically flushing them to a _target_ handler. Flushing
occurs whenever the buffer is full, or when an event of a certain
severity or greater is seen.

  *note MemoryHandler: 1304. is a subclass of the more general *note
BufferingHandler: 134e, which is an abstract class. This buffers logging
records in memory. Whenever each record is added to the buffer, a check
is made by calling `shouldFlush()' to see if the buffer should be
flushed.  If it should, then `flush()' is expected to do the flushing.

 -- Class: logging.handlers.BufferingHandler (capacity)
     Initializes the handler with a buffer of the specified capacity.

      -- Method: emit (record)
          Appends the record to the buffer. If *note shouldFlush():
          1350. returns true, calls *note flush(): 1351. to process the
          buffer.

      -- Method: flush ()
          You can override this to implement custom flushing behavior.
          This version just zaps the buffer to empty.

      -- Method: shouldFlush (record)
          Returns true if the buffer is up to capacity. This method can
          be overridden to implement custom flushing strategies.

 -- Class: logging.handlers.MemoryHandler (capacity, flushLevel=ERROR,
          target=None)
     Returns a new instance of the *note MemoryHandler: 1304. class.
     The instance is initialized with a buffer size of _capacity_. If
     _flushLevel_ is not specified, `ERROR' is used. If no _target_ is
     specified, the target will need to be set using *note setTarget():
     1352. before this handler does anything useful.

      -- Method: close ()
          Calls *note flush(): 1354, sets the target to *note None:
          393. and clears the buffer.

      -- Method: flush ()
          For a *note MemoryHandler: 1304, flushing means just sending
          the buffered records to the target, if there is one. The
          buffer is also cleared when this happens. Override if you
          want different behavior.

      -- Method: setTarget (target)
          Sets the target handler for this handler.

      -- Method: shouldFlush (record)
          Checks for buffer full or a record at the _flushLevel_ or
          higher.


File: python.info,  Node: HTTPHandler,  Prev: MemoryHandler,  Up: logging handlers --- Logging handlers

5.15.9.13 HTTPHandler
.....................

The *note HTTPHandler: 1358. class, located in the *note
logging.handlers: 103. module, supports sending logging messages to a
Web server, using either `GET' or `POST' semantics.

 -- Class: logging.handlers.HTTPHandler (host, url, method='GET')
     Returns a new instance of the *note HTTPHandler: 1358. class. The
     _host_ can be of the form `host:port', should you need to use a
     specific port number.  If no _method_ is specified, `GET' is used.

      -- Method: emit (record)
          Sends the record to the Web server as a percent-encoded
          dictionary.

See also
........

Module *note logging: 101.
     API reference for the logging module.

Module *note logging.config: 102.
     Configuration API for the logging module.


File: python.info,  Node: getpass --- Portable password input,  Next: curses --- Terminal handling for character-cell displays,  Prev: logging handlers --- Logging handlers,  Up: Generic Operating System Services

5.15.10 `getpass' -- Portable password input
--------------------------------------------

The *note getpass: df. module provides two functions:

 -- Function: getpass.getpass ([prompt[, stream]])
     Prompt the user for a password without echoing.  The user is
     prompted using the string _prompt_, which defaults to `'Password:
     ''. On Unix, the prompt is written to the file-like object
     _stream_.  _stream_ defaults to the controlling terminal
     (/dev/tty) or if that is unavailable to `sys.stderr' (this
     argument is ignored on Windows).

     If echo free input is unavailable getpass() falls back to printing
     a warning message to _stream_ and reading from `sys.stdin' and
     issuing a *note GetPassWarning: 135d.

     Availability: Macintosh, Unix, Windows.

     Changed in version 2.5: The _stream_ parameter was added.

     Changed in version 2.6: On Unix it defaults to using /dev/tty
     before falling back to `sys.stdin' and `sys.stderr'.

          Note: If you call getpass from within IDLE, the input may be
          done in the terminal you launched IDLE from rather than the
          idle window itself.

 -- Exception: getpass.GetPassWarning
     A *note UserWarning: 94a. subclass issued when password input may
     be echoed.

 -- Function: getpass.getuser ()
     Return the "login name" of the user. Availability: Unix, Windows.

     This function checks the environment variables `LOGNAME', `USER', `LNAME'
     and `USERNAME', in order, and returns the value of the first one
     which is set to a non-empty string.  If none are set, the login
     name from the password database is returned on systems which
     support the *note pwd: 13c. module, otherwise, an exception is
     raised.


File: python.info,  Node: curses --- Terminal handling for character-cell displays,  Next: curses textpad --- Text input widget for curses programs,  Prev: getpass --- Portable password input,  Up: Generic Operating System Services

5.15.11 `curses' -- Terminal handling for character-cell displays
-----------------------------------------------------------------

Changed in version 1.6: Added support for the `ncurses' library and
converted to a package.

  The *note curses: 79. module provides an interface to the curses
library, the de-facto standard for portable advanced terminal handling.

  While curses is most widely used in the Unix environment, versions
are available for DOS, OS/2, and possibly other systems as well.  This
extension module is designed to match the API of ncurses, an
open-source curses library hosted on Linux and the BSD variants of Unix.

     Note: Since version 5.4, the ncurses library decides how to
     interpret non-ASCII data using the `nl_langinfo' function.  That
     means that you have to call *note locale.setlocale(): 95a. in the
     application and encode Unicode strings using one of the system's
     available encodings.  This example uses the system's default
     encoding:

         import locale
         locale.setlocale(locale.LC_ALL, '')
         code = locale.getpreferredencoding()

     Then use _code_ as the encoding for *note str.encode(): 643. calls.

See also
........

Module *note curses.ascii: 7a.
     Utilities for working with ASCII characters, regardless of your
     locale settings.

Module *note curses.panel: 7b.
     A panel stack extension that adds depth to  curses windows.

Module *note curses.textpad: 7c.
     Editable text widget for curses supporting  *Emacs*-like bindings.

*note Curses Programming with Python: 1361.
     Tutorial material on using curses with Python, by Andrew Kuchling
     and Eric Raymond.

  The Demo/curses/(1) directory in the Python source distribution
contains some example programs using the curses bindings provided by
this module.

* Menu:

* Functions: Functions<2>.
* Window Objects::
* Constants: Constants<3>.

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Demo/curses/


File: python.info,  Node: Functions<2>,  Next: Window Objects,  Up: curses --- Terminal handling for character-cell displays

5.15.11.1 Functions
...................

The module *note curses: 79. defines the following exception:

 -- Exception: curses.error
     Exception raised when a curses library function returns an error.

     Note: Whenever _x_ or _y_ arguments to a function or a method are
     optional, they default to the current cursor location. Whenever
     _attr_ is optional, it defaults to `A_NORMAL'.

  The module *note curses: 79. defines the following functions:

 -- Function: curses.baudrate ()
     Return the output speed of the terminal in bits per second.  On
     software terminal emulators it will have a fixed high value.
     Included for historical reasons; in former times, it was used to
     write output loops for time delays and occasionally to change
     interfaces depending on the line speed.

 -- Function: curses.beep ()
     Emit a short attention sound.

 -- Function: curses.can_change_color ()
     Return `True' or `False', depending on whether the programmer can
     change the colors displayed by the terminal.

 -- Function: curses.cbreak ()
     Enter cbreak mode.  In cbreak mode (sometimes called "rare" mode)
     normal tty line buffering is turned off and characters are
     available to be read one by one.  However, unlike raw mode,
     special characters (interrupt, quit, suspend, and flow control)
     retain their effects on the tty driver and calling program.
     Calling first *note raw(): 1369. then *note cbreak(): 1368. leaves
     the terminal in cbreak mode.

 -- Function: curses.color_content (color_number)
     Return the intensity of the red, green, and blue (RGB) components
     in the color _color_number_, which must be between `0' and
     `COLORS'.  A 3-tuple is returned, containing the R,G,B values for
     the given color, which will be between `0' (no component) and
     `1000' (maximum amount of component).

 -- Function: curses.color_pair (color_number)
     Return the attribute value for displaying text in the specified
     color.  This attribute value can be combined with `A_STANDOUT',
     `A_REVERSE', and the other `A_*' attributes.  *note pair_number():
     136c. is the counterpart to this function.

 -- Function: curses.curs_set (visibility)
     Set the cursor state.  _visibility_ can be set to 0, 1, or 2, for
     invisible, normal, or very visible.  If the terminal supports the
     visibility requested, the previous cursor state is returned;
     otherwise, an exception is raised.  On many terminals, the
     "visible" mode is an underline cursor and the "very visible" mode
     is a block cursor.

 -- Function: curses.def_prog_mode ()
     Save the current terminal mode as the "program" mode, the mode
     when the running program is using curses.  (Its counterpart is the
     "shell" mode, for when the program is not in curses.)  Subsequent
     calls to *note reset_prog_mode(): 136f. will restore this mode.

 -- Function: curses.def_shell_mode ()
     Save the current terminal mode as the "shell" mode, the mode when
     the running program is not using curses.  (Its counterpart is the
     "program" mode, when the program is using curses capabilities.)
     Subsequent calls to *note reset_shell_mode(): 1371. will restore
     this mode.

 -- Function: curses.delay_output (ms)
     Insert an _ms_ millisecond pause in output.

 -- Function: curses.doupdate ()
     Update the physical screen.  The curses library keeps two data
     structures, one representing the current physical screen contents
     and a virtual screen representing the desired next state.  The
     *note doupdate(): 1373. ground updates the physical screen to
     match the virtual screen.

     The virtual screen may be updated by a `noutrefresh()' call after
     write operations such as `addstr()' have been performed on a
     window.  The normal `refresh()' call is simply `noutrefresh()'
     followed by *note doupdate(): 1373.; if you have to update
     multiple windows, you can speed performance and perhaps reduce
     screen flicker by issuing `noutrefresh()' calls on all windows,
     followed by a single *note doupdate(): 1373.

 -- Function: curses.echo ()
     Enter echo mode.  In echo mode, each character input is echoed to
     the screen as it is entered.

 -- Function: curses.endwin ()
     De-initialize the library, and return terminal to normal status.

 -- Function: curses.erasechar ()
     Return the user's current erase character.  Under Unix operating
     systems this is a property of the controlling tty of the curses
     program, and is not set by the curses library itself.

 -- Function: curses.filter ()
     The *note filter(): 1377. routine, if used, must be called before
     *note initscr(): 1378. is called.  The effect is that, during
     those calls, `LINES' is set to 1; the capabilities clear, cup,
     cud, cud1, cuu1, cuu, vpa are disabled; and the home string is set
     to the value of cr. The effect is that the cursor is confined to
     the current line, and so are screen updates.  This may be used for
     enabling character-at-a-time  line editing without touching the
     rest of the screen.

 -- Function: curses.flash ()
     Flash the screen.  That is, change it to reverse-video and then
     change it back in a short interval.  Some people prefer such as
     'visible bell' to the audible attention signal produced by *note
     beep(): 1366.

 -- Function: curses.flushinp ()
     Flush all input buffers.  This throws away any  typeahead  that
     has been typed by the user and has not yet been processed by the
     program.

 -- Function: curses.getmouse ()
     After `getch()' returns `KEY_MOUSE' to signal a mouse event, this
     method should be call to retrieve the queued mouse event,
     represented as a 5-tuple `(id, x, y, z, bstate)'. _id_ is an ID
     value used to distinguish multiple devices, and _x_, _y_, _z_ are
     the event's coordinates.  (_z_ is currently unused.)  _bstate_ is
     an integer value whose bits will be set to indicate the type of
     event, and will be the bitwise OR of one or more of the following
     constants, where _n_ is the button number from 1 to 4:
     `BUTTONn_PRESSED', `BUTTONn_RELEASED', `BUTTONn_CLICKED',
     `BUTTONn_DOUBLE_CLICKED', `BUTTONn_TRIPLE_CLICKED',
     `BUTTON_SHIFT', `BUTTON_CTRL', `BUTTON_ALT'.

 -- Function: curses.getsyx ()
     Return the current coordinates of the virtual screen cursor in y
     and x.  If leaveok is currently true, then -1,-1 is returned.

 -- Function: curses.getwin (file)
     Read window related data stored in the file by an earlier
     `putwin()' call.  The routine then creates and initializes a new
     window using that data, returning the new window object.

 -- Function: curses.has_colors ()
     Return `True' if the terminal can display colors; otherwise,
     return `False'.

 -- Function: curses.has_ic ()
     Return `True' if the terminal has insert- and delete-character
     capabilities.  This function is included for historical reasons
     only, as all modern software terminal emulators have such
     capabilities.

 -- Function: curses.has_il ()
     Return `True' if the terminal has insert- and delete-line
     capabilities, or can simulate  them  using scrolling regions. This
     function is included for historical reasons only, as all modern
     software terminal emulators have such capabilities.

 -- Function: curses.has_key (ch)
     Take a key value _ch_, and return `True' if the current terminal
     type recognizes a key with that value.

 -- Function: curses.halfdelay (tenths)
     Used for half-delay mode, which is similar to cbreak mode in that
     characters typed by the user are immediately available to the
     program. However, after blocking for _tenths_ tenths of seconds,
     an exception is raised if nothing has been typed.  The value of
     _tenths_ must be a number between `1' and `255'.  Use *note
     nocbreak(): 1383. to leave half-delay mode.

 -- Function: curses.init_color (color_number, r, g, b)
     Change the definition of a color, taking the number of the color
     to be changed followed by three RGB values (for the amounts of
     red, green, and blue components).  The value of _color_number_
     must be between `0' and `COLORS'.  Each of _r_, _g_, _b_, must be
     a value between `0' and `1000'.  When *note init_color(): 1384. is
     used, all occurrences of that color on the screen immediately
     change to the new definition.  This function is a no-op on most
     terminals; it is active only if *note can_change_color(): 1367.
     returns `1'.

 -- Function: curses.init_pair (pair_number, fg, bg)
     Change the definition of a color-pair.  It takes three arguments:
     the number of the color-pair to be changed, the foreground color
     number, and the background color number.  The value of
     _pair_number_ must be between `1' and `COLOR_PAIRS - 1' (the `0'
     color pair is wired to white on black and cannot be changed).  The
     value of _fg_ and _bg_ arguments must be between `0' and `COLORS'.
     If the color-pair was previously initialized, the screen is
     refreshed and all occurrences of that color-pair are changed to
     the new definition.

 -- Function: curses.initscr ()
     Initialize the library. Return a `WindowObject' which represents
     the whole screen.

          Note: If there is an error opening the terminal, the
          underlying curses library may cause the interpreter to exit.

 -- Function: curses.is_term_resized (nlines, ncols)
     Return `True' if *note resize_term(): 1387. would modify the
     window structure, `False' otherwise.

 -- Function: curses.isendwin ()
     Return `True' if *note endwin(): 1375. has been called (that is,
     the  curses library has been deinitialized).

 -- Function: curses.keyname (k)
     Return the name of the key numbered _k_.  The name of a key
     generating printable ASCII character is the key's character.  The
     name of a control-key combination is a two-character string
     consisting of a caret followed by the corresponding printable
     ASCII character.  The name of an alt-key combination (128-255) is a
     string consisting of the prefix 'M-' followed by the name of the
     corresponding ASCII character.

 -- Function: curses.killchar ()
     Return the user's current line kill character. Under Unix
     operating systems this is a property of the controlling tty of the
     curses program, and is not set by the curses library itself.

 -- Function: curses.longname ()
     Return a string containing the terminfo long name field describing
     the current terminal.  The maximum length of a verbose description
     is 128 characters.  It is defined only after the call to *note
     initscr(): 1378.

 -- Function: curses.meta (yes)
     If _yes_ is 1, allow 8-bit characters to be input. If _yes_ is 0,
     allow only 7-bit chars.

 -- Function: curses.mouseinterval (interval)
     Set the maximum time in milliseconds that can elapse between press
     and release events in order for them to be recognized as a click,
     and return the previous interval value.  The default value is 200
     msec, or one fifth of a second.

 -- Function: curses.mousemask (mousemask)
     Set the mouse events to be reported, and return a tuple
     `(availmask, oldmask)'.   _availmask_ indicates which of the
     specified mouse events can be reported; on complete failure it
     returns 0.  _oldmask_ is the previous value of the given window's
     mouse event mask.  If this function is never called, no mouse
     events are ever reported.

 -- Function: curses.napms (ms)
     Sleep for _ms_ milliseconds.

 -- Function: curses.newpad (nlines, ncols)
     Create and return a pointer to a new pad data structure with the
     given number of lines and columns.  A pad is returned as a window
     object.

     A pad is like a window, except that it is not restricted by the
     screen size, and is not necessarily associated with a particular
     part of the screen.  Pads can be used when a large window is
     needed, and only a part of the window will be on the screen at one
     time.  Automatic refreshes of pads (such as from scrolling or
     echoing of input) do not occur.  The `refresh()' and
     `noutrefresh()' methods of a pad require 6 arguments to specify
     the part of the pad to be displayed and the location on the screen
     to be used for the display. The arguments are _pminrow_,
     _pmincol_, _sminrow_, _smincol_, _smaxrow_, _smaxcol_; the _p_
     arguments refer to the upper left corner of the pad region to be
     displayed and the _s_ arguments define a clipping box on the
     screen within which the pad region is to be displayed.

 -- Function: curses.newwin (begin_y, begin_x)
 -- Function: curses.newwin (nlines, ncols, begin_y, begin_x)
     Return a new window, whose left-upper corner is at  `(begin_y,
     begin_x)', and whose height/width is  _nlines_/_ncols_.

     By default, the window will extend from the  specified position to
     the lower right corner of the screen.

 -- Function: curses.nl ()
     Enter newline mode.  This mode translates the return key into
     newline on input, and translates newline into return and line-feed
     on output. Newline mode is initially on.

 -- Function: curses.nocbreak ()
     Leave cbreak mode.  Return to normal "cooked" mode with line
     buffering.

 -- Function: curses.noecho ()
     Leave echo mode.  Echoing of input characters is turned off.

 -- Function: curses.nonl ()
     Leave newline mode.  Disable translation of return into newline on
     input, and disable low-level translation of newline into
     newline/return on output (but this does not change the behavior of
     `addch('\n')', which always does the equivalent of return and line
     feed on the virtual screen).  With translation off, curses can
     sometimes speed up vertical motion a little; also, it will be able
     to detect the return key on input.

 -- Function: curses.noqiflush ()
     When the *note noqiflush(): 1395. routine is used, normal flush of
     input and output queues associated with the INTR, QUIT and SUSP
     characters will not be done.  You may want to call *note
     noqiflush(): 1395. in a signal handler if you want output to
     continue as though the interrupt had not occurred, after the
     handler exits.

 -- Function: curses.noraw ()
     Leave raw mode. Return to normal "cooked" mode with line buffering.

 -- Function: curses.pair_content (pair_number)
     Return a tuple `(fg, bg)' containing the colors for the requested
     color pair.  The value of _pair_number_ must be between `1' and
     `COLOR_PAIRS - 1'.

 -- Function: curses.pair_number (attr)
     Return the number of the color-pair set by the attribute value
     _attr_.  *note color_pair(): 136b. is the counterpart to this
     function.

 -- Function: curses.putp (string)
     Equivalent to `tputs(str, 1, putchar)'; emit the value of a
     specified terminfo capability for the current terminal.  Note that
     the output of *note putp(): 1398.  always goes to standard output.

 -- Function: curses.qiflush ([flag])
     If _flag_ is `False', the effect is the same as calling *note
     noqiflush(): 1395. If _flag_ is `True', or no argument is
     provided, the queues will be flushed when these control characters
     are read.

 -- Function: curses.raw ()
     Enter raw mode.  In raw mode, normal line buffering and
     processing of interrupt, quit, suspend, and flow control keys are
     turned off; characters are presented to curses input functions one
     by one.

 -- Function: curses.reset_prog_mode ()
     Restore the  terminal  to "program" mode, as previously saved  by
     *note def_prog_mode(): 136e.

 -- Function: curses.reset_shell_mode ()
     Restore the  terminal  to "shell" mode, as previously saved  by
     *note def_shell_mode(): 1370.

 -- Function: curses.resetty ()
     Restore the state of the terminal modes to what it was at the last
     call to *note savetty(): 139b.

 -- Function: curses.resize_term (nlines, ncols)
     Backend function used by *note resizeterm(): 139c, performing most
     of the work; when resizing the windows, *note resize_term(): 1387.
     blank-fills the areas that are extended.  The calling application
     should fill in these areas with appropriate data.  The *note
     resize_term(): 1387. function attempts to resize all windows.
     However, due to the calling convention of pads, it is not possible
     to resize these without additional interaction with the
     application.

 -- Function: curses.resizeterm (nlines, ncols)
     Resize the standard and current windows to the specified
     dimensions, and adjusts other bookkeeping data used by the curses
     library that record the window dimensions (in particular the
     SIGWINCH handler).

 -- Function: curses.savetty ()
     Save the current state of the terminal modes in a buffer, usable by
     *note resetty(): 139a.

 -- Function: curses.setsyx (y, x)
     Set the virtual screen cursor to _y_, _x_. If _y_ and _x_ are both
     -1, then leaveok is set.

 -- Function: curses.setupterm ([termstr, fd])
     Initialize the terminal.  _termstr_ is a string giving the
     terminal name; if omitted, the value of the `TERM' environment
     variable will be used.  _fd_ is the file descriptor to which any
     initialization sequences will be sent; if not supplied, the file
     descriptor for `sys.stdout' will be used.

 -- Function: curses.start_color ()
     Must be called if the programmer wants to use colors, and before
     any other color manipulation routine is called.  It is good
     practice to call this routine right after *note initscr(): 1378.

     *note start_color(): 139f. initializes eight basic colors (black,
     red,  green, yellow, blue, magenta, cyan, and white), and two
     global variables in the *note curses: 79.  module, `COLORS' and
     `COLOR_PAIRS', containing the maximum number of colors and
     color-pairs the terminal can support.  It also restores the colors
     on the terminal to the values they had when the terminal was just
     turned on.

 -- Function: curses.termattrs ()
     Return a logical OR of all video attributes supported by the
     terminal.  This information is useful when a curses program needs
     complete control over the appearance of the screen.

 -- Function: curses.termname ()
     Return the value of the environment variable `TERM', truncated to
     14 characters.

 -- Function: curses.tigetflag (capname)
     Return the value of the Boolean capability corresponding to the
     terminfo capability name _capname_.  The value `-1' is returned if
     _capname_ is not a Boolean capability, or `0' if it is canceled or
     absent from the terminal description.

 -- Function: curses.tigetnum (capname)
     Return the value of the numeric capability corresponding to the
     terminfo capability name _capname_.  The value `-2' is returned if
     _capname_ is not a numeric capability, or `-1' if it is canceled
     or absent from the terminal description.

 -- Function: curses.tigetstr (capname)
     Return the value of the string capability corresponding to the
     terminfo capability name _capname_.  `None' is returned if
     _capname_ is not a string capability, or is canceled or absent
     from the terminal description.

 -- Function: curses.tparm (str[, ...])
     Instantiate the string _str_ with the supplied parameters, where
     _str_ should be a parameterized string obtained from the terminfo
     database.  E.g.  `tparm(tigetstr("cup"), 5, 3)' could result in
     `'\033[6;4H'', the exact result depending on terminal type.

 -- Function: curses.typeahead (fd)
     Specify that the file descriptor _fd_ be used for typeahead
     checking.  If _fd_ is `-1', then no typeahead checking is done.

     The curses library does "line-breakout optimization" by looking
     for typeahead periodically while updating the screen.  If input is
     found, and it is coming from a tty, the current update is
     postponed until refresh or doupdate is called again, allowing
     faster response to commands typed in advance. This function allows
     specifying a different file descriptor for typeahead checking.

 -- Function: curses.unctrl (ch)
     Return a string which is a printable representation of the
     character _ch_.  Control characters are displayed as a caret
     followed by the character, for example as `^C'. Printing
     characters are left as they are.

 -- Function: curses.ungetch (ch)
     Push _ch_ so the next `getch()' will return it.

          Note: Only one _ch_ can be pushed before `getch()' is called.

 -- Function: curses.ungetmouse (id, x, y, z, bstate)
     Push a `KEY_MOUSE' event onto the input queue, associating the
     given state data with it.

 -- Function: curses.use_env (flag)
     If used, this function should be called before *note initscr():
     1378. or newterm are called.  When _flag_ is `False', the values
     of lines and columns specified in the terminfo database will be
     used, even if environment variables `LINES' and `COLUMNS' (used by
     default) are set, or if curses is running in a window (in which
     case default behavior would be to use the window size if `LINES'
     and `COLUMNS' are not set).

 -- Function: curses.use_default_colors ()
     Allow use of default values for colors on terminals supporting
     this feature. Use this to support transparency in your
     application.  The default color is assigned to the color number
     -1. After calling this function,  `init_pair(x, curses.COLOR_RED,
     -1)' initializes, for instance, color pair _x_ to a red foreground
     color on the default background.

 -- Function: curses.wrapper (func, ...)
     Initialize curses and call another callable object, _func_, which
     should be the rest of your curses-using application.  If the
     application raises an exception, this function will restore the
     terminal to a sane state before re-raising the exception and
     generating a traceback.  The callable object _func_ is then passed
     the main window 'stdscr' as its first argument, followed by any
     other arguments passed to *note wrapper(): 13ac.  Before calling
     _func_, *note wrapper(): 13ac. turns on cbreak mode, turns off
     echo, enables the terminal keypad, and initializes colors if the
     terminal has color support.  On exit (whether normally or by
     exception) it restores cooked mode, turns on echo, and disables
     the terminal keypad.


File: python.info,  Node: Window Objects,  Next: Constants<3>,  Prev: Functions<2>,  Up: curses --- Terminal handling for character-cell displays

5.15.11.2 Window Objects
........................

Window objects, as returned by *note initscr(): 1378. and *note
newwin(): 1391. above, have the following methods:

 -- Method: window.addch (ch[, attr])
 -- Method: window.addch (y, x, ch[, attr])
          Note: A _character_ means a C character (an ASCII code),
          rather than a Python character (a string of length 1). (This
          note is true whenever the documentation mentions a
          character.) The built-in *note ord(): 6e4. is handy for
          conveying strings to codes.

     Paint character _ch_ at `(y, x)' with attributes _attr_,
     overwriting any character previously painter at that location.  By
     default, the character position and attributes are the current
     settings for the window object.

 -- Method: window.addnstr (str, n[, attr])
 -- Method: window.addnstr (y, x, str, n[, attr])
     Paint at most _n_ characters of the  string _str_ at `(y, x)' with
     attributes _attr_, overwriting anything previously on the display.

 -- Method: window.addstr (str[, attr])
 -- Method: window.addstr (y, x, str[, attr])
     Paint the string _str_ at `(y, x)' with attributes _attr_,
     overwriting anything previously on the display.

 -- Method: window.attroff (attr)
     Remove attribute _attr_ from the "background" set applied to all
     writes to the current window.

 -- Method: window.attron (attr)
     Add attribute _attr_ from the "background" set applied to all
     writes to the current window.

 -- Method: window.attrset (attr)
     Set the "background" set of attributes to _attr_.  This set is
     initially 0 (no attributes).

 -- Method: window.bkgd (ch[, attr])
     Set the background property of the window to the character _ch_,
     with attributes _attr_.  The change is then applied to every
     character position in that window:

        * The attribute of every character in the window  is changed to
          the new background attribute.

        * Wherever  the  former background character appears, it is
          changed to the new background character.

 -- Method: window.bkgdset (ch[, attr])
     Set the window's background.  A window's background consists of a
     character and any combination of attributes.  The attribute part
     of the background is combined (OR'ed) with all non-blank
     characters that are written into the window.  Both the character
     and attribute parts of the background are combined with the blank
     characters.  The background becomes a property of the character
     and moves with the character through any scrolling and
     insert/delete line/character operations.

 -- Method: window.border ([ls[, rs[, ts[, bs[, tl[, tr[, bl[,
          br]]]]]]]])
     Draw a border around the edges of the window. Each parameter
     specifies  the character to use for a specific part of the border;
     see the table below for more details.  The characters can be
     specified as integers or as one-character strings.

          Note: A `0' value for any parameter will cause the default
          character to be used for that parameter.  Keyword parameters
          can _not_ be used.  The defaults are listed in this table:

     Parameter       Description               Default value
     ---------------------------------------------------------------------- 
     _ls_            Left side                 `ACS_VLINE'
     _rs_            Right side                `ACS_VLINE'
     _ts_            Top                       `ACS_HLINE'
     _bs_            Bottom                    `ACS_HLINE'
     _tl_            Upper-left corner         `ACS_ULCORNER'
     _tr_            Upper-right corner        `ACS_URCORNER'
     _bl_            Bottom-left corner        `ACS_LLCORNER'
     _br_            Bottom-right corner       `ACS_LRCORNER'


 -- Method: window.box ([vertch, horch])
     Similar to *note border(): 13b7, but both _ls_ and _rs_ are
     _vertch_ and both _ts_ and _bs_ are _horch_.  The default corner
     characters are always used by this function.

 -- Method: window.chgat (attr)
 -- Method: window.chgat (num, attr)
 -- Method: window.chgat (y, x, attr)
 -- Method: window.chgat (y, x, num, attr)
     Set the attributes of _num_ characters at the current cursor
     position, or at position `(y, x)' if supplied. If no value of
     _num_ is given or _num_ = -1, the attribute will  be set on all
     the characters to the end of the line.  This function does not
     move the cursor. The changed line will be touched using the *note
     touchline(): 13ba. method so that the contents will be redisplayed
     by the next window refresh.

 -- Method: window.clear ()
     Like *note erase(): 13bc, but also cause the whole window to be
     repainted upon next call to *note refresh(): 13bd.

 -- Method: window.clearok (yes)
     If _yes_ is 1, the next call to *note refresh(): 13bd. will clear
     the window completely.

 -- Method: window.clrtobot ()
     Erase from cursor to the end of the window: all lines below the
     cursor are deleted, and then the equivalent of *note clrtoeol():
     13c0. is performed.

 -- Method: window.clrtoeol ()
     Erase from cursor to the end of the line.

 -- Method: window.cursyncup ()
     Update the current cursor position of all the ancestors of the
     window to reflect the current cursor position of the window.

 -- Method: window.delch ([y, x])
     Delete any character at `(y, x)'.

 -- Method: window.deleteln ()
     Delete the line under the cursor. All following lines are moved up
     by one line.

 -- Method: window.derwin (begin_y, begin_x)
 -- Method: window.derwin (nlines, ncols, begin_y, begin_x)
     An abbreviation for "derive window", *note derwin(): 13c4. is the
     same as calling *note subwin(): 13c5, except that _begin_y_ and
     _begin_x_ are relative to the origin of the window, rather than
     relative to the entire screen.  Return a window object for the
     derived window.

 -- Method: window.echochar (ch[, attr])
     Add character _ch_ with attribute _attr_, and immediately  call
     *note refresh(): 13bd.  on the window.

 -- Method: window.enclose (y, x)
     Test whether the given pair of screen-relative character-cell
     coordinates are enclosed by the given window, returning `True' or
     `False'.  It is useful for determining what subset of the screen
     windows enclose the location of a mouse event.

 -- Method: window.erase ()
     Clear the window.

 -- Method: window.getbegyx ()
     Return a tuple `(y, x)' of co-ordinates of upper-left corner.

 -- Method: window.getbkgd ()
     Return the given window's current background character/attribute
     pair.

 -- Method: window.getch ([y, x])
     Get a character. Note that the integer returned does _not_ have to
     be in ASCII range: function keys, keypad keys and so on return
     numbers higher than 256. In no-delay mode, -1 is returned if there
     is no input, else *note getch(): 13ca. waits until a key is
     pressed.

 -- Method: window.getkey ([y, x])
     Get a character, returning a string instead of an integer, as
     *note getch(): 13ca.  does. Function keys, keypad keys and so on
     return a multibyte string containing the key name.  In no-delay
     mode, an exception is raised if there is no input.

 -- Method: window.getmaxyx ()
     Return a tuple `(y, x)' of the height and width of the window.

 -- Method: window.getparyx ()
     Return the beginning coordinates of this window relative to its
     parent window into two integer variables y and x.  Return `-1, -1'
     if this window has no parent.

 -- Method: window.getstr ([y, x])
     Read a string from the user, with primitive line editing capacity.

 -- Method: window.getyx ()
     Return a tuple `(y, x)' of current cursor position  relative to
     the window's upper-left corner.

 -- Method: window.hline (ch, n)
 -- Method: window.hline (y, x, ch, n)
     Display a horizontal line starting at `(y, x)' with length _n_
     consisting of the character _ch_.

 -- Method: window.idcok (flag)
     If _flag_ is `False', curses no longer considers using the
     hardware insert/delete character feature of the terminal; if
     _flag_ is `True', use of character insertion and deletion is
     enabled.  When curses is first initialized, use of character
     insert/delete is enabled by default.

 -- Method: window.idlok (yes)
     If called with _yes_ equal to 1, *note curses: 79. will try and
     use hardware line editing facilities. Otherwise, line
     insertion/deletion are disabled.

 -- Method: window.immedok (flag)
     If _flag_ is `True', any change in the window image automatically
     causes the window to be refreshed; you no longer have to call
     *note refresh(): 13bd. yourself.  However, it may degrade
     performance considerably, due to repeated calls to wrefresh.  This
     option is disabled by default.

 -- Method: window.inch ([y, x])
     Return the character at the given position in the window. The
     bottom 8 bits are the character proper, and upper bits are the
     attributes.

 -- Method: window.insch (ch[, attr])
 -- Method: window.insch (y, x, ch[, attr])
     Paint character _ch_ at `(y, x)' with attributes _attr_, moving
     the line from position _x_ right by one character.

 -- Method: window.insdelln (nlines)
     Insert _nlines_ lines into the specified window above the current
     line.  The _nlines_ bottom lines are lost.  For negative _nlines_,
     delete _nlines_ lines starting with the one under the cursor, and
     move the remaining lines up.  The bottom _nlines_ lines are
     cleared.  The current cursor position remains the same.

 -- Method: window.insertln ()
     Insert a blank line under the cursor. All following lines are
     moved down by one line.

 -- Method: window.insnstr (str, n[, attr])
 -- Method: window.insnstr (y, x, str, n[, attr])
     Insert a character string (as many characters as will fit on the
     line) before the character under the cursor, up to _n_ characters.
      If _n_ is zero or negative, the entire string is inserted. All
     characters to the right of the cursor are shifted right, with the
     rightmost characters on the line being lost.  The cursor position
     does not change (after moving to _y_, _x_, if specified).

 -- Method: window.insstr (str[, attr])
 -- Method: window.insstr (y, x, str[, attr])
     Insert a character string (as many characters as will fit on the
     line) before the character under the cursor.  All characters to
     the right of the cursor are shifted right, with the rightmost
     characters on the line being lost.  The cursor position does not
     change (after moving to _y_, _x_, if specified).

 -- Method: window.instr ([n])
 -- Method: window.instr (y, x[, n])
     Return a string of characters, extracted from the window starting
     at the current cursor position, or at _y_, _x_ if specified.
     Attributes are stripped from the characters.  If _n_ is specified,
     *note instr(): 13da. returns a string at most _n_ characters long
     (exclusive of the trailing NUL).

 -- Method: window.is_linetouched (line)
     Return `True' if the specified line was modified since the last
     call to *note refresh(): 13bd.; otherwise return `False'.  Raise a
     *note curses.error: 1364.  exception if _line_ is not valid for
     the given window.

 -- Method: window.is_wintouched ()
     Return `True' if the specified window was modified since the last
     call to *note refresh(): 13bd.; otherwise return `False'.

 -- Method: window.keypad (yes)
     If _yes_ is 1, escape sequences generated by some keys (keypad,
     function keys) will be interpreted by *note curses: 79. If _yes_
     is 0, escape sequences will be left as is in the input stream.

 -- Method: window.leaveok (yes)
     If _yes_ is 1, cursor is left where it is on update, instead of
     being at "cursor position."  This reduces cursor movement where
     possible. If possible the cursor will be made invisible.

     If _yes_ is 0, cursor will always be at "cursor position" after an
     update.

 -- Method: window.move (new_y, new_x)
     Move cursor to `(new_y, new_x)'.

 -- Method: window.mvderwin (y, x)
     Move the window inside its parent window.  The screen-relative
     parameters of the window are not changed.  This routine is used to
     display different parts of the parent window at the same physical
     position on the screen.

 -- Method: window.mvwin (new_y, new_x)
     Move the window so its upper-left corner is at `(new_y, new_x)'.

 -- Method: window.nodelay (yes)
     If _yes_ is `1', *note getch(): 13ca. will be non-blocking.

 -- Method: window.notimeout (yes)
     If _yes_ is `1', escape sequences will not be timed out.

     If _yes_ is `0', after a few milliseconds, an escape sequence will
     not be interpreted, and will be left in the input stream as is.

 -- Method: window.noutrefresh ()
     Mark for refresh but wait.  This function updates the data
     structure representing the desired state of the window, but does
     not force an update of the physical screen.  To accomplish that,
     call  *note doupdate(): 1373.

 -- Method: window.overlay (destwin[, sminrow, smincol, dminrow,
          dmincol, dmaxrow, dmaxcol])
     Overlay the window on top of _destwin_. The windows need not be
     the same size, only the overlapping region is copied. This copy is
     non-destructive, which means that the current background character
     does not overwrite the old contents of _destwin_.

     To get fine-grained control over the copied region, the second
     form of *note overlay(): 13e5. can be used. _sminrow_ and
     _smincol_ are the upper-left coordinates of the source window, and
     the other variables mark a rectangle in the destination window.

 -- Method: window.overwrite (destwin[, sminrow, smincol, dminrow,
          dmincol, dmaxrow, dmaxcol])
     Overwrite the window on top of _destwin_. The windows need not be
     the same size, in which case only the overlapping region is
     copied. This copy is destructive, which means that the current
     background character overwrites the old contents of _destwin_.

     To get fine-grained control over the copied region, the second
     form of *note overwrite(): 13e6. can be used. _sminrow_ and
     _smincol_ are the upper-left coordinates of the source window, the
     other variables mark a rectangle in the destination window.

 -- Method: window.putwin (file)
     Write all data associated with the window into the provided file
     object.  This information can be later retrieved using the *note
     getwin(): 137d. function.

 -- Method: window.redrawln (beg, num)
     Indicate that the _num_ screen lines, starting at line _beg_, are
     corrupted and should be completely redrawn on the next *note
     refresh(): 13bd. call.

 -- Method: window.redrawwin ()
     Touch the entire window, causing it to be completely redrawn on
     the next *note refresh(): 13bd. call.

 -- Method: window.refresh ([pminrow, pmincol, sminrow, smincol,
          smaxrow, smaxcol])
     Update the display immediately (sync actual screen with previous
     drawing/deleting methods).

     The 6 optional arguments can only be specified when the window is
     a pad created with *note newpad(): 1390.  The additional
     parameters are needed to indicate what part of the pad and screen
     are involved. _pminrow_ and _pmincol_ specify the upper left-hand
     corner of the rectangle to be displayed in the pad.  _sminrow_,
     _smincol_, _smaxrow_, and _smaxcol_ specify the edges of the
     rectangle to be displayed on the screen.  The lower right-hand
     corner of the rectangle to be displayed in the pad is calculated
     from the screen coordinates, since the rectangles must be the same
     size.  Both rectangles must be entirely contained within their
     respective structures.  Negative values of _pminrow_, _pmincol_,
     _sminrow_, or _smincol_ are treated as if they were zero.

 -- Method: window.resize (nlines, ncols)
     Reallocate storage for a curses window to adjust its dimensions to
     the specified values.  If either dimension is larger than the
     current values, the window's data is filled with blanks that have
     the current background rendition (as set by *note bkgdset():
     13b6.) merged into them.

 -- Method: window.scroll ([lines=1])
     Scroll the screen or scrolling region upward by _lines_ lines.

 -- Method: window.scrollok (flag)
     Control what happens when the cursor of a window is moved off the
     edge of the window or scrolling region, either as a result of a
     newline action on the bottom line, or typing the last character of
     the last line.  If _flag_ is false, the cursor is left on the
     bottom line.  If _flag_ is true, the window is scrolled up one
     line.  Note that in order to get the physical scrolling effect on
     the terminal, it is also necessary to call *note idlok(): 13d2.

 -- Method: window.setscrreg (top, bottom)
     Set the scrolling region from line _top_ to line _bottom_. All
     scrolling actions will take place in this region.

 -- Method: window.standend ()
     Turn off the standout attribute.  On some terminals this has the
     side effect of turning off all attributes.

 -- Method: window.standout ()
     Turn on attribute _A_STANDOUT_.

 -- Method: window.subpad (begin_y, begin_x)
 -- Method: window.subpad (nlines, ncols, begin_y, begin_x)
     Return a sub-window, whose upper-left corner is at `(begin_y,
     begin_x)', and whose width/height is _ncols_/_nlines_.

 -- Method: window.subwin (begin_y, begin_x)
 -- Method: window.subwin (nlines, ncols, begin_y, begin_x)
     Return a sub-window, whose upper-left corner is at `(begin_y,
     begin_x)', and whose width/height is _ncols_/_nlines_.

     By default, the sub-window will extend from the specified position
     to the lower right corner of the window.

 -- Method: window.syncdown ()
     Touch each location in the window that has been touched in any of
     its ancestor windows.  This routine is called by *note refresh():
     13bd, so it should almost never be necessary to call it manually.

 -- Method: window.syncok (flag)
     If called with _flag_ set to `True', then *note syncup(): 13f3. is
     called automatically whenever there is a change in the window.

 -- Method: window.syncup ()
     Touch all locations in ancestors of the window that have been
     changed in  the window.

 -- Method: window.timeout (delay)
     Set blocking or non-blocking read behavior for the window.  If
     _delay_ is negative, blocking read is used (which will wait
     indefinitely for input).  If _delay_ is zero, then non-blocking
     read is used, and -1 will be returned by *note getch(): 13ca. if
     no input is waiting.  If _delay_ is positive, then *note getch():
     13ca. will block for _delay_ milliseconds, and return -1 if there
     is still no input at the end of that time.

 -- Method: window.touchline (start, count[, changed])
     Pretend _count_ lines have been changed, starting with line
     _start_.  If _changed_ is supplied, it specifies whether the
     affected lines are marked as having been changed (_changed_=1) or
     unchanged (_changed_=0).

 -- Method: window.touchwin ()
     Pretend the whole window has been changed, for purposes of drawing
     optimizations.

 -- Method: window.untouchwin ()
     Mark all lines in  the  window  as unchanged since the last call to
     *note refresh(): 13bd.

 -- Method: window.vline (ch, n)
 -- Method: window.vline (y, x, ch, n)
     Display a vertical line starting at `(y, x)' with length _n_
     consisting of the character _ch_.


File: python.info,  Node: Constants<3>,  Prev: Window Objects,  Up: curses --- Terminal handling for character-cell displays

5.15.11.3 Constants
...................

The *note curses: 79. module defines the following data members:

 -- Data: curses.ERR
     Some curses routines  that  return  an integer, such as
     `getch()', return *note ERR: 13f9. upon failure.

 -- Data: curses.OK
     Some curses routines  that  return  an integer, such as  *note
     napms(): 138f, return *note OK: 13fa. upon success.

 -- Data: curses.version
     A string representing the current version of the module.  Also
     available as `__version__'.

  Several constants are available to specify character cell attributes:

Attribute              Meaning
----------------------------------------------------------- 
`A_ALTCHARSET'         Alternate character set mode.
`A_BLINK'              Blink mode.
`A_BOLD'               Bold mode.
`A_DIM'                Dim mode.
`A_NORMAL'             Normal attribute.
`A_REVERSE'            Reverse background and foreground
                       colors.
`A_STANDOUT'           Standout mode.
`A_UNDERLINE'          Underline mode.

  Keys are referred to by integer constants with names starting with
`KEY_'.  The exact keycaps available are system dependent.

Key constant            Key
------------------------------------------------------------------------- 
`KEY_MIN'               Minimum key value
`KEY_BREAK'             Break key (unreliable)
`KEY_DOWN'              Down-arrow
`KEY_UP'                Up-arrow
`KEY_LEFT'              Left-arrow
`KEY_RIGHT'             Right-arrow
`KEY_HOME'              Home key (upward+left arrow)
`KEY_BACKSPACE'         Backspace (unreliable)
`KEY_F0'                Function keys.  Up to 64 function keys are
                        supported.
`KEY_Fn'                Value of function key _n_
`KEY_DL'                Delete line
`KEY_IL'                Insert line
`KEY_DC'                Delete character
`KEY_IC'                Insert char or enter insert mode
`KEY_EIC'               Exit insert char mode
`KEY_CLEAR'             Clear screen
`KEY_EOS'               Clear to end of screen
`KEY_EOL'               Clear to end of line
`KEY_SF'                Scroll 1 line forward
`KEY_SR'                Scroll 1 line backward (reverse)
`KEY_NPAGE'             Next page
`KEY_PPAGE'             Previous page
`KEY_STAB'              Set tab
`KEY_CTAB'              Clear tab
`KEY_CATAB'             Clear all tabs
`KEY_ENTER'             Enter or send (unreliable)
`KEY_SRESET'            Soft (partial) reset (unreliable)
`KEY_RESET'             Reset or hard reset (unreliable)
`KEY_PRINT'             Print
`KEY_LL'                Home down or bottom (lower left)
`KEY_A1'                Upper left of keypad
`KEY_A3'                Upper right of keypad
`KEY_B2'                Center of keypad
`KEY_C1'                Lower left of keypad
`KEY_C3'                Lower right of keypad
`KEY_BTAB'              Back tab
`KEY_BEG'               Beg (beginning)
`KEY_CANCEL'            Cancel
`KEY_CLOSE'             Close
`KEY_COMMAND'           Cmd (command)
`KEY_COPY'              Copy
`KEY_CREATE'            Create
`KEY_END'               End
`KEY_EXIT'              Exit
`KEY_FIND'              Find
`KEY_HELP'              Help
`KEY_MARK'              Mark
`KEY_MESSAGE'           Message
`KEY_MOVE'              Move
`KEY_NEXT'              Next
`KEY_OPEN'              Open
`KEY_OPTIONS'           Options
`KEY_PREVIOUS'          Prev (previous)
`KEY_REDO'              Redo
`KEY_REFERENCE'         Ref (reference)
`KEY_REFRESH'           Refresh
`KEY_REPLACE'           Replace
`KEY_RESTART'           Restart
`KEY_RESUME'            Resume
`KEY_SAVE'              Save
`KEY_SBEG'              Shifted Beg (beginning)
`KEY_SCANCEL'           Shifted Cancel
`KEY_SCOMMAND'          Shifted Command
`KEY_SCOPY'             Shifted Copy
`KEY_SCREATE'           Shifted Create
`KEY_SDC'               Shifted Delete char
`KEY_SDL'               Shifted Delete line
`KEY_SELECT'            Select
`KEY_SEND'              Shifted End
`KEY_SEOL'              Shifted Clear line
`KEY_SEXIT'             Shifted Dxit
`KEY_SFIND'             Shifted Find
`KEY_SHELP'             Shifted Help
`KEY_SHOME'             Shifted Home
`KEY_SIC'               Shifted Input
`KEY_SLEFT'             Shifted Left arrow
`KEY_SMESSAGE'          Shifted Message
`KEY_SMOVE'             Shifted Move
`KEY_SNEXT'             Shifted Next
`KEY_SOPTIONS'          Shifted Options
`KEY_SPREVIOUS'         Shifted Prev
`KEY_SPRINT'            Shifted Print
`KEY_SREDO'             Shifted Redo
`KEY_SREPLACE'          Shifted Replace
`KEY_SRIGHT'            Shifted Right arrow
`KEY_SRSUME'            Shifted Resume
`KEY_SSAVE'             Shifted Save
`KEY_SSUSPEND'          Shifted Suspend
`KEY_SUNDO'             Shifted Undo
`KEY_SUSPEND'           Suspend
`KEY_UNDO'              Undo
`KEY_MOUSE'             Mouse event has occurred
`KEY_RESIZE'            Terminal resize event
`KEY_MAX'               Maximum key value

  On VT100s and their software emulations, such as X terminal
emulators, there are normally at least four function keys (`KEY_F1',
`KEY_F2', `KEY_F3', `KEY_F4') available, and the arrow keys mapped to
`KEY_UP', `KEY_DOWN', `KEY_LEFT' and `KEY_RIGHT' in the obvious way.
If your machine has a PC keyboard, it is safe to expect arrow keys and
twelve function keys (older PC keyboards may have only ten function
keys); also, the following keypad mappings are standard:

Keycap                 Constant
--------------------------------------- 
`Insert'               KEY_IC
`Delete'               KEY_DC
`Home'                 KEY_HOME
`End'                  KEY_END
`Page Up'              KEY_NPAGE
`Page Down'            KEY_PPAGE

  The following table lists characters from the alternate character
set. These are inherited from the VT100 terminal, and will generally be
available on software emulations such as X terminals.  When there is no
graphic available, curses falls back on a crude printable ASCII
approximation.

     Note: These are available only after *note initscr(): 1378. has
     been called.

ACS code               Meaning
---------------------------------------------------------------------- 
`ACS_BBSS'             alternate name for upper right corner
`ACS_BLOCK'            solid square block
`ACS_BOARD'            board of squares
`ACS_BSBS'             alternate name for horizontal line
`ACS_BSSB'             alternate name for upper left corner
`ACS_BSSS'             alternate name for top tee
`ACS_BTEE'             bottom tee
`ACS_BULLET'           bullet
`ACS_CKBOARD'          checker board (stipple)
`ACS_DARROW'           arrow pointing down
`ACS_DEGREE'           degree symbol
`ACS_DIAMOND'          diamond
`ACS_GEQUAL'           greater-than-or-equal-to
`ACS_HLINE'            horizontal line
`ACS_LANTERN'          lantern symbol
`ACS_LARROW'           left arrow
`ACS_LEQUAL'           less-than-or-equal-to
`ACS_LLCORNER'         lower left-hand corner
`ACS_LRCORNER'         lower right-hand corner
`ACS_LTEE'             left tee
`ACS_NEQUAL'           not-equal sign
`ACS_PI'               letter pi
`ACS_PLMINUS'          plus-or-minus sign
`ACS_PLUS'             big plus sign
`ACS_RARROW'           right arrow
`ACS_RTEE'             right tee
`ACS_S1'               scan line 1
`ACS_S3'               scan line 3
`ACS_S7'               scan line 7
`ACS_S9'               scan line 9
`ACS_SBBS'             alternate name for lower right corner
`ACS_SBSB'             alternate name for vertical line
`ACS_SBSS'             alternate name for right tee
`ACS_SSBB'             alternate name for lower left corner
`ACS_SSBS'             alternate name for bottom tee
`ACS_SSSB'             alternate name for left tee
`ACS_SSSS'             alternate name for crossover or big plus
`ACS_STERLING'         pound sterling
`ACS_TTEE'             top tee
`ACS_UARROW'           up arrow
`ACS_ULCORNER'         upper left corner
`ACS_URCORNER'         upper right corner
`ACS_VLINE'            vertical line

  The following table lists the predefined colors:

Constant                Color
--------------------------------------------------------- 
`COLOR_BLACK'           Black
`COLOR_BLUE'            Blue
`COLOR_CYAN'            Cyan (light greenish blue)
`COLOR_GREEN'           Green
`COLOR_MAGENTA'         Magenta (purplish red)
`COLOR_RED'             Red
`COLOR_WHITE'           White
`COLOR_YELLOW'          Yellow


File: python.info,  Node: curses textpad --- Text input widget for curses programs,  Next: curses ascii --- Utilities for ASCII characters,  Prev: curses --- Terminal handling for character-cell displays,  Up: Generic Operating System Services

5.15.12 `curses.textpad' -- Text input widget for curses programs
-----------------------------------------------------------------

New in version 1.6.

  The *note curses.textpad: 7c. module provides a *note Textbox: 13fd.
class that handles elementary text editing in a curses window,
supporting a set of keybindings resembling those of Emacs (thus, also
of Netscape Navigator, BBedit 6.x, FrameMaker, and many other
programs).  The module also provides a rectangle-drawing function
useful for framing text boxes or for other purposes.

  The module *note curses.textpad: 7c. defines the following function:

 -- Function: curses.textpad.rectangle (win, uly, ulx, lry, lrx)
     Draw a rectangle.  The first argument must be a window object; the
     remaining arguments are coordinates relative to that window.  The
     second and third arguments are the y and x coordinates of the
     upper left hand corner of the rectangle to be drawn; the fourth
     and fifth arguments are the y and x coordinates of the lower right
     hand corner. The rectangle will be drawn using VT100/IBM PC forms
     characters on terminals that make this possible (including xterm
     and most other software terminal emulators).  Otherwise it will be
     drawn with ASCII  dashes, vertical bars, and plus signs.

* Menu:

* Textbox objects::


File: python.info,  Node: Textbox objects,  Up: curses textpad --- Text input widget for curses programs

5.15.12.1 Textbox objects
.........................

You can instantiate a *note Textbox: 13fd. object as follows:

 -- Class: curses.textpad.Textbox (win)
     Return a textbox widget object.  The _win_ argument should be a
     curses `WindowObject' in which the textbox is to be contained. The
     edit cursor of the textbox is initially located at the upper left
     hand corner of the containing window, with coordinates `(0, 0)'.
     The instance's *note stripspaces: 1401. flag is initially on.

     *note Textbox: 13fd. objects have the following methods:

      -- Method: edit ([validator])
          This is the entry point you will normally use.  It accepts
          editing keystrokes until one of the termination keystrokes is
          entered.  If _validator_ is supplied, it must be a function.
          It will be called for each keystroke entered with the
          keystroke as a parameter; command dispatch is done on the
          result. This method returns the window contents as a string;
          whether blanks in the window are included is affected by the
          *note stripspaces: 1401. attribute.

      -- Method: do_command (ch)
          Process a single command keystroke.  Here are the supported
          special keystrokes:

          Keystroke              Action
          ----------------------------------------------------------------------- 
          `Control-A'            Go to left edge of window.
          `Control-B'            Cursor left, wrapping to previous line if
                                 appropriate.
          `Control-D'            Delete character under cursor.
          `Control-E'            Go to right edge (stripspaces off) or end of
                                 line (stripspaces on).
          `Control-F'            Cursor right, wrapping to next line when
                                 appropriate.
          `Control-G'            Terminate, returning the window contents.
          `Control-H'            Delete character backward.
          `Control-J'            Terminate if the window is 1 line, otherwise
                                 insert newline.
          `Control-K'            If line is blank, delete it, otherwise clear
                                 to end of line.
          `Control-L'            Refresh screen.
          `Control-N'            Cursor down; move down one line.
          `Control-O'            Insert a blank line at cursor location.
          `Control-P'            Cursor up; move up one line.

          Move operations do nothing if the cursor is at an edge where
          the movement is not possible.  The following synonyms are
          supported where possible:

          Constant                     Keystroke
          ---------------------------------------------------- 
          `KEY_LEFT'                   `Control-B'
          `KEY_RIGHT'                  `Control-F'
          `KEY_UP'                     `Control-P'
          `KEY_DOWN'                   `Control-N'
          `KEY_BACKSPACE'              `Control-h'

          All other keystrokes are treated as a command to insert the
          given character and move right (with line wrapping).

      -- Method: gather ()
          Return the window contents as a string; whether blanks in the
          window are included is affected by the *note stripspaces:
          1401. member.

      -- Attribute: stripspaces
          This attribute is a flag which controls the interpretation of
          blanks in the window.  When it is on, trailing blanks on each
          line are ignored; any cursor motion that would land the
          cursor on a trailing blank goes to the end of that line
          instead, and trailing blanks are stripped when the window
          contents are gathered.


File: python.info,  Node: curses ascii --- Utilities for ASCII characters,  Next: curses panel --- A panel stack extension for curses,  Prev: curses textpad --- Text input widget for curses programs,  Up: Generic Operating System Services

5.15.13 `curses.ascii' -- Utilities for ASCII characters
--------------------------------------------------------

New in version 1.6.

  The *note curses.ascii: 7a. module supplies name constants for ASCII
characters and functions to test membership in various ASCII character
classes.  The constants supplied are names for control characters as
follows:

Name               Meaning
---------------------------------------------------------------------- 
`NUL'              
`SOH'              Start of heading, console interrupt
`STX'              Start of text
`ETX'              End of text
`EOT'              End of transmission
`ENQ'              Enquiry, goes with `ACK' flow control
`ACK'              Acknowledgement
`BEL'              Bell
`BS'               Backspace
`TAB'              Tab
`HT'               Alias for `TAB': "Horizontal tab"
`LF'               Line feed
`NL'               Alias for `LF': "New line"
`VT'               Vertical tab
`FF'               Form feed
`CR'               Carriage return
`SO'               Shift-out, begin alternate character set
`SI'               Shift-in, resume default character set
`DLE'              Data-link escape
`DC1'              XON, for flow control
`DC2'              Device control 2, block-mode flow control
`DC3'              XOFF, for flow control
`DC4'              Device control 4
`NAK'              Negative acknowledgement
`SYN'              Synchronous idle
`ETB'              End transmission block
`CAN'              Cancel
`EM'               End of medium
`SUB'              Substitute
`ESC'              Escape
`FS'               File separator
`GS'               Group separator
`RS'               Record separator, block-mode terminator
`US'               Unit separator
`SP'               Space
`DEL'              Delete

  Note that many of these have little practical significance in modern
usage.  The mnemonics derive from teleprinter conventions that predate
digital computers.

  The module supplies the following functions, patterned on those in
the standard C library:

 -- Function: curses.ascii.isalnum (c)
     Checks for an ASCII alphanumeric character; it is equivalent to
     `isalpha(c) or isdigit(c)'.

 -- Function: curses.ascii.isalpha (c)
     Checks for an ASCII alphabetic character; it is equivalent to
     `isupper(c) or islower(c)'.

 -- Function: curses.ascii.isascii (c)
     Checks for a character value that fits in the 7-bit ASCII set.

 -- Function: curses.ascii.isblank (c)
     Checks for an ASCII whitespace character.

 -- Function: curses.ascii.iscntrl (c)
     Checks for an ASCII control character (in the range 0x00 to 0x1f).

 -- Function: curses.ascii.isdigit (c)
     Checks for an ASCII decimal digit, `'0'' through `'9''.  This is
     equivalent to `c in string.digits'.

 -- Function: curses.ascii.isgraph (c)
     Checks for ASCII any printable character except space.

 -- Function: curses.ascii.islower (c)
     Checks for an ASCII lower-case character.

 -- Function: curses.ascii.isprint (c)
     Checks for any ASCII printable character including space.

 -- Function: curses.ascii.ispunct (c)
     Checks for any printable ASCII character which is not a space or
     an alphanumeric character.

 -- Function: curses.ascii.isspace (c)
     Checks for ASCII white-space characters; space, line feed,
     carriage return, form feed, horizontal tab, vertical tab.

 -- Function: curses.ascii.isupper (c)
     Checks for an ASCII uppercase letter.

 -- Function: curses.ascii.isxdigit (c)
     Checks for an ASCII hexadecimal digit.  This is equivalent to `c in
     string.hexdigits'.

 -- Function: curses.ascii.isctrl (c)
     Checks for an ASCII control character (ordinal values 0 to 31).

 -- Function: curses.ascii.ismeta (c)
     Checks for a non-ASCII character (ordinal values 0x80 and above).

  These functions accept either integers or strings; when the argument
is a string, it is first converted using the built-in function *note
ord(): 6e4.

  Note that all these functions check ordinal bit values derived from
the  first character of the string you pass in; they do not actually
know anything about the host machine's character encoding.  For
functions  that know about the character encoding (and handle
internationalization properly) see the *note string: 163. module.

  The following two functions take either a single-character string or
integer byte value; they return a value of the same type.

 -- Function: curses.ascii.ascii (c)
     Return the ASCII value corresponding to the low 7 bits of _c_.

 -- Function: curses.ascii.ctrl (c)
     Return the control character corresponding to the given character
     (the character bit value is bitwise-anded with 0x1f).

 -- Function: curses.ascii.alt (c)
     Return the 8-bit character corresponding to the given ASCII
     character (the character bit value is bitwise-ored with 0x80).

  The following function takes either a single-character string or
integer value; it returns a string.

 -- Function: curses.ascii.unctrl (c)
     Return a string representation of the ASCII character _c_.  If _c_
     is printable, this string is the character itself.  If the
     character is a control character (0x00-0x1f) the string consists
     of a caret (`'^'') followed by the corresponding uppercase letter.
     If the character is an ASCII delete (0x7f) the string is `'^?''.
     If the character has its meta bit (0x80) set, the meta bit is
     stripped, the preceding rules applied, and `'!'' prepended to the
     result.

 -- Data: curses.ascii.controlnames
     A 33-element string array that contains the ASCII mnemonics for
     the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US),
     in order, plus the mnemonic `SP' for the space character.


File: python.info,  Node: curses panel --- A panel stack extension for curses,  Next: platform --- Access to underlying platform's identifying data,  Prev: curses ascii --- Utilities for ASCII characters,  Up: Generic Operating System Services

5.15.14 `curses.panel' -- A panel stack extension for curses
------------------------------------------------------------

Panels are windows with the added feature of depth, so they can be
stacked on top of each other, and only the visible portions of each
window will be displayed.  Panels can be added, moved up or down in the
stack, and removed.

* Menu:

* Functions: Functions<3>.
* Panel Objects::


File: python.info,  Node: Functions<3>,  Next: Panel Objects,  Up: curses panel --- A panel stack extension for curses

5.15.14.1 Functions
...................

The module *note curses.panel: 7b. defines the following functions:

 -- Function: curses.panel.bottom_panel ()
     Returns the bottom panel in the panel stack.

 -- Function: curses.panel.new_panel (win)
     Returns a panel object, associating it with the given window
     _win_. Be aware that you need to keep the returned panel object
     referenced explicitly.  If you don't, the panel object is garbage
     collected and removed from the panel stack.

 -- Function: curses.panel.top_panel ()
     Returns the top panel in the panel stack.

 -- Function: curses.panel.update_panels ()
     Updates the virtual screen after changes in the panel stack. This
     does not call *note curses.doupdate(): 1373, so you'll have to do
     this yourself.


File: python.info,  Node: Panel Objects,  Prev: Functions<3>,  Up: curses panel --- A panel stack extension for curses

5.15.14.2 Panel Objects
.......................

Panel objects, as returned by *note new_panel(): 1420. above, are
windows with a stacking order. There's always a window associated with
a panel which determines the content, while the panel methods are
responsible for the window's depth in the panel stack.

  Panel objects have the following methods:

 -- Method: Panel.above ()
     Returns the panel above the current panel.

 -- Method: Panel.below ()
     Returns the panel below the current panel.

 -- Method: Panel.bottom ()
     Push the panel to the bottom of the stack.

 -- Method: Panel.hidden ()
     Returns true if the panel is hidden (not visible), false otherwise.

 -- Method: Panel.hide ()
     Hide the panel. This does not delete the object, it just makes the
     window on screen invisible.

 -- Method: Panel.move (y, x)
     Move the panel to the screen coordinates `(y, x)'.

 -- Method: Panel.replace (win)
     Change the window associated with the panel to the window _win_.

 -- Method: Panel.set_userptr (obj)
     Set the panel's user pointer to _obj_. This is used to associate
     an arbitrary piece of data with the panel, and can be any Python
     object.

 -- Method: Panel.show ()
     Display the panel (which might have been hidden).

 -- Method: Panel.top ()
     Push panel to the top of the stack.

 -- Method: Panel.userptr ()
     Returns the user pointer for the panel.  This might be any Python
     object.

 -- Method: Panel.window ()
     Returns the window object associated with the panel.


File: python.info,  Node: platform --- Access to underlying platform's identifying data,  Next: errno --- Standard errno system symbols,  Prev: curses panel --- A panel stack extension for curses,  Up: Generic Operating System Services

5.15.15 `platform' --  Access to underlying platform's identifying data
-----------------------------------------------------------------------

New in version 2.3.

  *Source code:* Lib/platform.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


     Note: Specific platforms listed alphabetically, with Linux
     included in the Unix section.

* Menu:

* Cross Platform::
* Java Platform::
* Windows Platform::
* Mac OS Platform::
* Unix Platforms::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/platform.py


File: python.info,  Node: Cross Platform,  Next: Java Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.1 Cross Platform
........................

 -- Function: platform.architecture (executable=sys.executable,
          bits='', linkage='')
     Queries the given executable (defaults to the Python interpreter
     binary) for various architecture information.

     Returns a tuple `(bits, linkage)' which contain information about
     the bit architecture and the linkage format used for the
     executable. Both values are returned as strings.

     Values that cannot be determined are returned as given by the
     parameter presets.  If bits is given as `''', the
     `sizeof(pointer)()' (or `sizeof(long)()' on Python version <
     1.5.2) is used as indicator for the supported pointer size.

     The function relies on the system's `file' command to do the
     actual work.  This is available on most if not all Unix  platforms
     and some non-Unix platforms and then only if the executable points
     to the Python interpreter.  Reasonable defaults are used when the
     above needs are not met.

          Note: On Mac OS X (and perhaps other platforms), executable
          files may be universal files containing multiple
          architectures.

          To get at the "64-bitness" of the current interpreter, it is
          more reliable to query the *note sys.maxsize: 7c1. attribute:

              is_64bits = sys.maxsize > 2**32



 -- Function: platform.machine ()
     Returns the machine type, e.g. `'i386''. An empty string is
     returned if the value cannot be determined.

 -- Function: platform.node ()
     Returns the computer's network name (may not be fully qualified!).
     An empty string is returned if the value cannot be determined.

 -- Function: platform.platform (aliased=0, terse=0)
     Returns a single string identifying the underlying platform with
     as much useful information as possible.

     The output is intended to be _human readable_ rather than machine
     parseable. It may look different on different platforms and this
     is intended.

     If _aliased_ is true, the function will use aliases for various
     platforms that report system names which differ from their common
     names, for example SunOS will be reported as Solaris.  The *note
     system_alias(): 1438. function is used to implement this.

     Setting _terse_ to true causes the function to return only the
     absolute minimum information needed to identify the platform.

 -- Function: platform.processor ()
     Returns the (real) processor name, e.g. `'amdk6''.

     An empty string is returned if the value cannot be determined.
     Note that many platforms do not provide this information or simply
     return the same value as for *note machine(): 1435.  NetBSD does
     this.

 -- Function: platform.python_build ()
     Returns a tuple `(buildno, builddate)' stating the Python build
     number and date as strings.

 -- Function: platform.python_compiler ()
     Returns a string identifying the compiler used for compiling
     Python.

 -- Function: platform.python_branch ()
     Returns a string identifying the Python implementation SCM branch.

     New in version 2.6.

 -- Function: platform.python_implementation ()
     Returns a string identifying the Python implementation. Possible
     return values are: 'CPython', 'IronPython', 'Jython', 'PyPy'.

     New in version 2.6.

 -- Function: platform.python_revision ()
     Returns a string identifying the Python implementation SCM
     revision.

     New in version 2.6.

 -- Function: platform.python_version ()
     Returns the Python version as string `'major.minor.patchlevel''

     Note that unlike the Python `sys.version', the returned value will
     always include the patchlevel (it defaults to 0).

 -- Function: platform.python_version_tuple ()
     Returns the Python version as tuple `(major, minor, patchlevel)'
     of strings.

     Note that unlike the Python `sys.version', the returned value will
     always include the patchlevel (it defaults to `'0'').

 -- Function: platform.release ()
     Returns the system's release, e.g. `'2.2.0'' or `'NT'' An empty
     string is returned if the value cannot be determined.

 -- Function: platform.system ()
     Returns the system/OS name, e.g. `'Linux'', `'Windows'', or
     `'Java''. An empty string is returned if the value cannot be
     determined.

 -- Function: platform.system_alias (system, release, version)
     Returns `(system, release, version)' aliased to common marketing
     names used for some systems.  It also does some reordering of the
     information in some cases where it would otherwise cause confusion.

 -- Function: platform.version ()
     Returns the system's release version, e.g. `'#3 on degas''. An
     empty string is returned if the value cannot be determined.

 -- Function: platform.uname ()
     Fairly portable uname interface. Returns a tuple of strings
     `(system, node, release, version, machine, processor)' identifying
     the underlying platform.

     Note that unlike the *note os.uname(): 10be. function this also
     returns possible processor information as additional tuple entry.

     Entries which cannot be determined are set to `'''.


File: python.info,  Node: Java Platform,  Next: Windows Platform,  Prev: Cross Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.2 Java Platform
.......................

 -- Function: platform.java_ver (release='', vendor='', vminfo=('', '',
          ''), osinfo=('', '', ''))
     Version interface for Jython.

     Returns a tuple `(release, vendor, vminfo, osinfo)' with _vminfo_
     being a tuple `(vm_name, vm_release, vm_vendor)' and _osinfo_
     being a tuple `(os_name, os_version, os_arch)'. Values which
     cannot be determined are set to the defaults given as parameters
     (which all default to `''').


File: python.info,  Node: Windows Platform,  Next: Mac OS Platform,  Prev: Java Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.3 Windows Platform
..........................

 -- Function: platform.win32_ver (release='', version='', csd='',
          ptype='')
     Get additional version information from the Windows Registry and
     return a tuple `(version, csd, ptype)' referring to version
     number, CSD level (service pack) and OS type (multi/single
     processor).

     As a hint: _ptype_ is `'Uniprocessor Free'' on single processor NT
     machines and `'Multiprocessor Free'' on multi processor machines.
     The _'Free'_ refers to the OS version being free of debugging
     code. It could also state _'Checked'_ which means the OS version
     uses debugging code, i.e. code that checks arguments, ranges, etc.

          Note: This function works best with Mark Hammond's `win32all'
          package installed, but also on Python 2.3 and later (support
          for this was added in Python 2.6). It obviously only runs on
          Win32 compatible platforms.

* Menu:

* Win95/98 specific::


File: python.info,  Node: Win95/98 specific,  Up: Windows Platform

5.15.15.4 Win95/98 specific
...........................

 -- Function: platform.popen (cmd, mode='r', bufsize=None)
     Portable *note popen(): 144a. interface.  Find a working popen
     implementation preferring `win32pipe.popen()'.  On Windows NT,
     `win32pipe.popen()' should work; on Windows 9x it hangs due to
     bugs in the MS C library.


File: python.info,  Node: Mac OS Platform,  Next: Unix Platforms,  Prev: Windows Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.5 Mac OS Platform
.........................

 -- Function: platform.mac_ver (release='', versioninfo=('', '', ''),
          machine='')
     Get Mac OS version information and return it as tuple `(release,
     versioninfo, machine)' with _versioninfo_ being a tuple `(version,
     dev_stage, non_release_version)'.

     Entries which cannot be determined are set to `'''.  All tuple
     entries are strings.


File: python.info,  Node: Unix Platforms,  Prev: Mac OS Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.6 Unix Platforms
........................

 -- Function: platform.dist (distname='', version='', id='',
          supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...))
     This is an old version of the functionality now provided by *note
     linux_distribution(): 144f. For new code, please use the *note
     linux_distribution(): 144f.

     The only difference between the two is that `dist()' always
     returns the short name of the distribution taken from the
     `supported_dists' parameter.

     Deprecated since version 2.6.

 -- Function: platform.linux_distribution (distname='', version='',
          id='', supported_dists=('SuSE', 'debian', 'redhat',
          'mandrake', ...), full_distribution_name=1)
     Tries to determine the name of the Linux OS distribution name.

     `supported_dists' may be given to define the set of Linux
     distributions to look for. It defaults to a list of currently
     supported Linux distributions identified by their release file
     name.

     If `full_distribution_name' is true (default), the full
     distribution read from the OS is returned. Otherwise the short
     name taken from `supported_dists' is used.

     Returns a tuple `(distname,version,id)' which defaults to the args
     given as parameters.  `id' is the item in parentheses after the
     version number.  It is usually the version codename.

     New in version 2.6.

 -- Function: platform.libc_ver (executable=sys.executable, lib='',
          version='', chunksize=2048)
     Tries to determine the libc version against which the file
     executable (defaults to the Python interpreter) is linked.
     Returns a tuple of strings `(lib, version)' which default to the
     given parameters in case the lookup fails.

     Note that this function has intimate knowledge of how different
     libc versions add symbols to the executable is probably only
     usable for executables compiled using *gcc*.

     The file is read and scanned in chunks of _chunksize_ bytes.


File: python.info,  Node: errno --- Standard errno system symbols,  Next: ctypes --- A foreign function library for Python,  Prev: platform --- Access to underlying platform's identifying data,  Up: Generic Operating System Services

5.15.16 `errno' -- Standard errno system symbols
------------------------------------------------

This module makes available standard `errno' system symbols. The value
of each symbol is the corresponding integer value. The names and
descriptions are borrowed from `linux/include/errno.h', which should be
pretty all-inclusive.

 -- Data: errno.errorcode
     Dictionary providing a mapping from the errno value to the string
     name in the underlying system.  For instance,
     `errno.errorcode[errno.EPERM]' maps to `'EPERM''.

  To translate a numeric error code to an error message, use *note
os.strerror(): 10db.

  Of the following list, symbols that are not used on the current
platform are not defined by the module.  The specific list of defined
symbols is available as `errno.errorcode.keys()'.  Symbols available
can include:

 -- Data: errno.EPERM
     Operation not permitted

 -- Data: errno.ENOENT
     No such file or directory

 -- Data: errno.ESRCH
     No such process

 -- Data: errno.EINTR
     Interrupted system call

 -- Data: errno.EIO
     I/O error

 -- Data: errno.ENXIO
     No such device or address

 -- Data: errno.E2BIG
     Arg list too long

 -- Data: errno.ENOEXEC
     Exec format error

 -- Data: errno.EBADF
     Bad file number

 -- Data: errno.ECHILD
     No child processes

 -- Data: errno.EAGAIN
     Try again

 -- Data: errno.ENOMEM
     Out of memory

 -- Data: errno.EACCES
     Permission denied

 -- Data: errno.EFAULT
     Bad address

 -- Data: errno.ENOTBLK
     Block device required

 -- Data: errno.EBUSY
     Device or resource busy

 -- Data: errno.EEXIST
     File exists

 -- Data: errno.EXDEV
     Cross-device link

 -- Data: errno.ENODEV
     No such device

 -- Data: errno.ENOTDIR
     Not a directory

 -- Data: errno.EISDIR
     Is a directory

 -- Data: errno.EINVAL
     Invalid argument

 -- Data: errno.ENFILE
     File table overflow

 -- Data: errno.EMFILE
     Too many open files

 -- Data: errno.ENOTTY
     Not a typewriter

 -- Data: errno.ETXTBSY
     Text file busy

 -- Data: errno.EFBIG
     File too large

 -- Data: errno.ENOSPC
     No space left on device

 -- Data: errno.ESPIPE
     Illegal seek

 -- Data: errno.EROFS
     Read-only file system

 -- Data: errno.EMLINK
     Too many links

 -- Data: errno.EPIPE
     Broken pipe

 -- Data: errno.EDOM
     Math argument out of domain of func

 -- Data: errno.ERANGE
     Math result not representable

 -- Data: errno.EDEADLK
     Resource deadlock would occur

 -- Data: errno.ENAMETOOLONG
     File name too long

 -- Data: errno.ENOLCK
     No record locks available

 -- Data: errno.ENOSYS
     Function not implemented

 -- Data: errno.ENOTEMPTY
     Directory not empty

 -- Data: errno.ELOOP
     Too many symbolic links encountered

 -- Data: errno.EWOULDBLOCK
     Operation would block

 -- Data: errno.ENOMSG
     No message of desired type

 -- Data: errno.EIDRM
     Identifier removed

 -- Data: errno.ECHRNG
     Channel number out of range

 -- Data: errno.EL2NSYNC
     Level 2 not synchronized

 -- Data: errno.EL3HLT
     Level 3 halted

 -- Data: errno.EL3RST
     Level 3 reset

 -- Data: errno.ELNRNG
     Link number out of range

 -- Data: errno.EUNATCH
     Protocol driver not attached

 -- Data: errno.ENOCSI
     No CSI structure available

 -- Data: errno.EL2HLT
     Level 2 halted

 -- Data: errno.EBADE
     Invalid exchange

 -- Data: errno.EBADR
     Invalid request descriptor

 -- Data: errno.EXFULL
     Exchange full

 -- Data: errno.ENOANO
     No anode

 -- Data: errno.EBADRQC
     Invalid request code

 -- Data: errno.EBADSLT
     Invalid slot

 -- Data: errno.EDEADLOCK
     File locking deadlock error

 -- Data: errno.EBFONT
     Bad font file format

 -- Data: errno.ENOSTR
     Device not a stream

 -- Data: errno.ENODATA
     No data available

 -- Data: errno.ETIME
     Timer expired

 -- Data: errno.ENOSR
     Out of streams resources

 -- Data: errno.ENONET
     Machine is not on the network

 -- Data: errno.ENOPKG
     Package not installed

 -- Data: errno.EREMOTE
     Object is remote

 -- Data: errno.ENOLINK
     Link has been severed

 -- Data: errno.EADV
     Advertise error

 -- Data: errno.ESRMNT
     Srmount error

 -- Data: errno.ECOMM
     Communication error on send

 -- Data: errno.EPROTO
     Protocol error

 -- Data: errno.EMULTIHOP
     Multihop attempted

 -- Data: errno.EDOTDOT
     RFS specific error

 -- Data: errno.EBADMSG
     Not a data message

 -- Data: errno.EOVERFLOW
     Value too large for defined data type

 -- Data: errno.ENOTUNIQ
     Name not unique on network

 -- Data: errno.EBADFD
     File descriptor in bad state

 -- Data: errno.EREMCHG
     Remote address changed

 -- Data: errno.ELIBACC
     Can not access a needed shared library

 -- Data: errno.ELIBBAD
     Accessing a corrupted shared library

 -- Data: errno.ELIBSCN
     .lib section in a.out corrupted

 -- Data: errno.ELIBMAX
     Attempting to link in too many shared libraries

 -- Data: errno.ELIBEXEC
     Cannot exec a shared library directly

 -- Data: errno.EILSEQ
     Illegal byte sequence

 -- Data: errno.ERESTART
     Interrupted system call should be restarted

 -- Data: errno.ESTRPIPE
     Streams pipe error

 -- Data: errno.EUSERS
     Too many users

 -- Data: errno.ENOTSOCK
     Socket operation on non-socket

 -- Data: errno.EDESTADDRREQ
     Destination address required

 -- Data: errno.EMSGSIZE
     Message too long

 -- Data: errno.EPROTOTYPE
     Protocol wrong type for socket

 -- Data: errno.ENOPROTOOPT
     Protocol not available

 -- Data: errno.EPROTONOSUPPORT
     Protocol not supported

 -- Data: errno.ESOCKTNOSUPPORT
     Socket type not supported

 -- Data: errno.EOPNOTSUPP
     Operation not supported on transport endpoint

 -- Data: errno.EPFNOSUPPORT
     Protocol family not supported

 -- Data: errno.EAFNOSUPPORT
     Address family not supported by protocol

 -- Data: errno.EADDRINUSE
     Address already in use

 -- Data: errno.EADDRNOTAVAIL
     Cannot assign requested address

 -- Data: errno.ENETDOWN
     Network is down

 -- Data: errno.ENETUNREACH
     Network is unreachable

 -- Data: errno.ENETRESET
     Network dropped connection because of reset

 -- Data: errno.ECONNABORTED
     Software caused connection abort

 -- Data: errno.ECONNRESET
     Connection reset by peer

 -- Data: errno.ENOBUFS
     No buffer space available

 -- Data: errno.EISCONN
     Transport endpoint is already connected

 -- Data: errno.ENOTCONN
     Transport endpoint is not connected

 -- Data: errno.ESHUTDOWN
     Cannot send after transport endpoint shutdown

 -- Data: errno.ETOOMANYREFS
     Too many references: cannot splice

 -- Data: errno.ETIMEDOUT
     Connection timed out

 -- Data: errno.ECONNREFUSED
     Connection refused

 -- Data: errno.EHOSTDOWN
     Host is down

 -- Data: errno.EHOSTUNREACH
     No route to host

 -- Data: errno.EALREADY
     Operation already in progress

 -- Data: errno.EINPROGRESS
     Operation now in progress

 -- Data: errno.ESTALE
     Stale NFS file handle

 -- Data: errno.EUCLEAN
     Structure needs cleaning

 -- Data: errno.ENOTNAM
     Not a XENIX named type file

 -- Data: errno.ENAVAIL
     No XENIX semaphores available

 -- Data: errno.EISNAM
     Is a named type file

 -- Data: errno.EREMOTEIO
     Remote I/O error

 -- Data: errno.EDQUOT
     Quota exceeded


File: python.info,  Node: ctypes --- A foreign function library for Python,  Prev: errno --- Standard errno system symbols,  Up: Generic Operating System Services

5.15.17 `ctypes' -- A foreign function library for Python
---------------------------------------------------------

New in version 2.5.

  *note ctypes: 78. is a foreign function library for Python.  It
provides C compatible data types, and allows calling functions in DLLs
or shared libraries.  It can be used to wrap these libraries in pure
Python.

* Menu:

* ctypes tutorial::
* ctypes reference::

ctypes tutorial

* Loading dynamic link libraries::
* Accessing functions from loaded dlls::
* Calling functions::
* Fundamental data types::
* Calling functions, continued: Calling functions continued.
* Calling functions with your own custom data types::
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes.
* Return types::
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference.
* Structures and unions::
* Structure/union alignment and byte order::
* Bit fields in structures and unions::
* Arrays::
* Pointers::
* Type conversions::
* Incomplete Types::
* Callback functions::
* Accessing values exported from dlls::
* Surprises::
* Variable-sized data types::

ctypes reference

* Finding shared libraries::
* Loading shared libraries::
* Foreign functions::
* Function prototypes::
* Utility functions::
* Data types::
* Fundamental data types: Fundamental data types<2>.
* Structured data types::
* Arrays and pointers::


File: python.info,  Node: ctypes tutorial,  Next: ctypes reference,  Up: ctypes --- A foreign function library for Python

5.15.17.1 ctypes tutorial
.........................

Note: The code samples in this tutorial use *note doctest: b5. to make
sure that they actually work.  Since some code samples behave
differently under Linux, Windows, or Mac OS X, they contain doctest
directives in comments.

  Note: Some code samples reference the ctypes *note c_int: 14d1. type.
This type is an alias for the *note c_long: 14d2. type on 32-bit
systems.  So, you should not be confused if *note c_long: 14d2. is
printed if you would expect *note c_int: 14d1. -- they are actually the
same type.

* Menu:

* Loading dynamic link libraries::
* Accessing functions from loaded dlls::
* Calling functions::
* Fundamental data types::
* Calling functions, continued: Calling functions continued.
* Calling functions with your own custom data types::
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes.
* Return types::
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference.
* Structures and unions::
* Structure/union alignment and byte order::
* Bit fields in structures and unions::
* Arrays::
* Pointers::
* Type conversions::
* Incomplete Types::
* Callback functions::
* Accessing values exported from dlls::
* Surprises::
* Variable-sized data types::


File: python.info,  Node: Loading dynamic link libraries,  Next: Accessing functions from loaded dlls,  Up: ctypes tutorial

5.15.17.2 Loading dynamic link libraries
........................................

*note ctypes: 78. exports the _cdll_, and on Windows _windll_ and
_oledll_ objects, for loading dynamic link libraries.

  You load libraries by accessing them as attributes of these objects.
_cdll_ loads libraries which export functions using the standard
`cdecl' calling convention, while _windll_ libraries call functions
using the `stdcall' calling convention. _oledll_ also uses the
`stdcall' calling convention, and assumes the functions return a
Windows `HRESULT' error code. The error code is used to automatically
raise a `WindowsError' exception when the function call fails.

  Here are some examples for Windows. Note that `msvcrt' is the MS
standard C library containing most standard C functions, and uses the
cdecl calling convention:

    >>> from ctypes import *
    >>> print windll.kernel32 # doctest: +WINDOWS
    <WinDLL 'kernel32', handle ... at ...>
    >>> print cdll.msvcrt # doctest: +WINDOWS
    <CDLL 'msvcrt', handle ... at ...>
    >>> libc = cdll.msvcrt # doctest: +WINDOWS
    >>>

Windows appends the usual `.dll' file suffix automatically.

  On Linux, it is required to specify the filename _including_ the
extension to load a library, so attribute access can not be used to
load libraries. Either the `LoadLibrary()' method of the dll loaders
should be used, or you should load the library by creating an instance
of CDLL by calling the constructor:

    >>> cdll.LoadLibrary("libc.so.6") # doctest: +LINUX
    <CDLL 'libc.so.6', handle ... at ...>
    >>> libc = CDLL("libc.so.6")     # doctest: +LINUX
    >>> libc                         # doctest: +LINUX
    <CDLL 'libc.so.6', handle ... at ...>
    >>>



File: python.info,  Node: Accessing functions from loaded dlls,  Next: Calling functions,  Prev: Loading dynamic link libraries,  Up: ctypes tutorial

5.15.17.3 Accessing functions from loaded dlls
..............................................

Functions are accessed as attributes of dll objects:

    >>> from ctypes import *
    >>> libc.printf
    <_FuncPtr object at 0x...>
    >>> print windll.kernel32.GetModuleHandleA # doctest: +WINDOWS
    <_FuncPtr object at 0x...>
    >>> print windll.kernel32.MyOwnFunction # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "ctypes.py", line 239, in __getattr__
        func = _StdcallFuncPtr(name, self)
    AttributeError: function 'MyOwnFunction' not found
    >>>

Note that win32 system dlls like `kernel32' and `user32' often export
ANSI as well as UNICODE versions of a function. The UNICODE version is
exported with an `W' appended to the name, while the ANSI version is
exported with an `A' appended to the name. The win32 `GetModuleHandle'
function, which returns a _module handle_ for a given module name, has
the following C prototype, and a macro is used to expose one of them as
`GetModuleHandle' depending on whether UNICODE is defined or not:

    /* ANSI version */
    HMODULE GetModuleHandleA(LPCSTR lpModuleName);
    /* UNICODE version */
    HMODULE GetModuleHandleW(LPCWSTR lpModuleName);

_windll_ does not try to select one of them by magic, you must access
the version you need by specifying `GetModuleHandleA' or
`GetModuleHandleW' explicitly, and then call it with strings or unicode
strings respectively.

  Sometimes, dlls export functions with names which aren't valid Python
identifiers, like `"??2@YAPAXI@Z"'. In this case you have to use *note
getattr(): 85f. to retrieve the function:

    >>> getattr(cdll.msvcrt, "??2@YAPAXI@Z") # doctest: +WINDOWS
    <_FuncPtr object at 0x...>
    >>>

On Windows, some dlls export functions not by name but by ordinal. These
functions can be accessed by indexing the dll object with the ordinal
number:

    >>> cdll.kernel32[1] # doctest: +WINDOWS
    <_FuncPtr object at 0x...>
    >>> cdll.kernel32[0] # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "ctypes.py", line 310, in __getitem__
        func = _StdcallFuncPtr(name, self)
    AttributeError: function ordinal 0 not found
    >>>



File: python.info,  Node: Calling functions,  Next: Fundamental data types,  Prev: Accessing functions from loaded dlls,  Up: ctypes tutorial

5.15.17.4 Calling functions
...........................

You can call these functions like any other Python callable. This
example uses the `time()' function, which returns system time in
seconds since the Unix epoch, and the `GetModuleHandleA()' function,
which returns a win32 module handle.

  This example calls both functions with a NULL pointer (`None' should
be used as the NULL pointer):

    >>> print libc.time(None) # doctest: +SKIP
    1150640792
    >>> print hex(windll.kernel32.GetModuleHandleA(None)) # doctest: +WINDOWS
    0x1d000000
    >>>

*note ctypes: 78. tries to protect you from calling functions with the
wrong number of arguments or the wrong calling convention.
Unfortunately this only works on Windows.  It does this by examining
the stack after the function returns, so although an error is raised
the function _has_ been called:

    >>> windll.kernel32.GetModuleHandleA() # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: Procedure probably called with not enough arguments (4 bytes missing)
    >>> windll.kernel32.GetModuleHandleA(0, 0) # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: Procedure probably called with too many arguments (4 bytes in excess)
    >>>

The same exception is raised when you call an `stdcall' function with
the `cdecl' calling convention, or vice versa:

    >>> cdll.kernel32.GetModuleHandleA(None) # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: Procedure probably called with not enough arguments (4 bytes missing)
    >>>

    >>> windll.msvcrt.printf("spam") # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: Procedure probably called with too many arguments (4 bytes in excess)
    >>>

To find out the correct calling convention you have to look into the C
header file or the documentation for the function you want to call.

  On Windows, *note ctypes: 78. uses win32 structured exception
handling to prevent crashes from general protection faults when
functions are called with invalid argument values:

    >>> windll.kernel32.GetModuleHandleA(32) # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    WindowsError: exception: access violation reading 0x00000020
    >>>

There are, however, enough ways to crash Python with *note ctypes: 78,
so you should be careful anyway.

  `None', integers, longs, byte strings and unicode strings are the
only native Python objects that can directly be used as parameters in
these function calls.  `None' is passed as a C `NULL' pointer, byte
strings and unicode strings are passed as pointer to the memory block
that contains their data (`char *' or `wchar_t *').  Python integers
and Python longs are passed as the platforms default C `int' type,
their value is masked to fit into the C type.

  Before we move on calling functions with other parameter types, we
have to learn more about *note ctypes: 78. data types.


File: python.info,  Node: Fundamental data types,  Next: Calling functions continued,  Prev: Calling functions,  Up: ctypes tutorial

5.15.17.5 Fundamental data types
................................

*note ctypes: 78. defines a number of primitive C compatible data types
:

ctypes type                C type                                         Python type
----------------------------------------------------------------------------------------------------------- 
*note c_bool: 14db.        `_Bool'                                        bool (1)
*note c_char: 14dc.        `char'                                         1-character string
*note c_wchar: 14dd.       `wchar_t'                                      1-character unicode string
*note c_byte: 14de.        `char'                                         int/long
*note c_ubyte: 14df.       `unsigned char'                                int/long
*note c_short: 14e0.       `short'                                        int/long
*note c_ushort: 14e1.      `unsigned short'                               int/long
*note c_int: 14d1.         `int'                                          int/long
*note c_uint: 14e2.        `unsigned int'                                 int/long
*note c_long: 14d2.        `long'                                         int/long
*note c_ulong: 14e3.       `unsigned long'                                int/long
*note c_longlong: 14e4.    `__int64' or `long long'                       int/long
*note c_ulonglong: 14e5.   `unsigned __int64' or `unsigned long long'     int/long
*note c_float: 14e6.       `float'                                        float
*note c_double: 14e7.      `double'                                       float
*note c_longdouble: 14e8.  `long double'                                  float
*note c_char_p: 14e9.      `char *' (NUL terminated)                      string or `None'
*note c_wchar_p: 14ea.     `wchar_t *' (NUL terminated)                   unicode or `None'
*note c_void_p: 14eb.      `void *'                                       int/long or `None'

  1. The constructor accepts any object with a truth value.

  All these types can be created by calling them with an optional
initializer of the correct type and value:

    >>> c_int()
    c_long(0)
    >>> c_char_p("Hello, World")
    c_char_p('Hello, World')
    >>> c_ushort(-3)
    c_ushort(65533)
    >>>

Since these types are mutable, their value can also be changed
afterwards:

    >>> i = c_int(42)
    >>> print i
    c_long(42)
    >>> print i.value
    42
    >>> i.value = -99
    >>> print i.value
    -99
    >>>

Assigning a new value to instances of the pointer types *note c_char_p:
14e9, *note c_wchar_p: 14ea, and *note c_void_p: 14eb. changes the
_memory location_ they point to, _not the contents_ of the memory block
(of course not, because Python strings are immutable):

    >>> s = "Hello, World"
    >>> c_s = c_char_p(s)
    >>> print c_s
    c_char_p('Hello, World')
    >>> c_s.value = "Hi, there"
    >>> print c_s
    c_char_p('Hi, there')
    >>> print s                 # first string is unchanged
    Hello, World
    >>>

You should be careful, however, not to pass them to functions expecting
pointers to mutable memory. If you need mutable memory blocks, ctypes
has a *note create_string_buffer(): 14ec. function which creates these
in various ways.  The current memory block contents can be accessed (or
changed) with the `raw' property; if you want to access it as NUL
terminated string, use the `value' property:

    >>> from ctypes import *
    >>> p = create_string_buffer(3)      # create a 3 byte buffer, initialized to NUL bytes
    >>> print sizeof(p), repr(p.raw)
    3 '\x00\x00\x00'
    >>> p = create_string_buffer("Hello")      # create a buffer containing a NUL terminated string
    >>> print sizeof(p), repr(p.raw)
    6 'Hello\x00'
    >>> print repr(p.value)
    'Hello'
    >>> p = create_string_buffer("Hello", 10)  # create a 10 byte buffer
    >>> print sizeof(p), repr(p.raw)
    10 'Hello\x00\x00\x00\x00\x00'
    >>> p.value = "Hi"
    >>> print sizeof(p), repr(p.raw)
    10 'Hi\x00lo\x00\x00\x00\x00\x00'
    >>>

The *note create_string_buffer(): 14ec. function replaces the
`c_buffer()' function (which is still available as an alias), as well
as the `c_string()' function from earlier ctypes releases.  To create a
mutable memory block containing unicode characters of the C type
`wchar_t' use the *note create_unicode_buffer(): 14ed. function.


File: python.info,  Node: Calling functions continued,  Next: Calling functions with your own custom data types,  Prev: Fundamental data types,  Up: ctypes tutorial

5.15.17.6 Calling functions, continued
......................................

Note that printf prints to the real standard output channel, _not_ to
*note sys.stdout: 873, so these examples will only work at the console
prompt, not from within _IDLE_ or _PythonWin_:

    >>> printf = libc.printf
    >>> printf("Hello, %s\n", "World!")
    Hello, World!
    14
    >>> printf("Hello, %S\n", u"World!")
    Hello, World!
    14
    >>> printf("%d bottles of beer\n", 42)
    42 bottles of beer
    19
    >>> printf("%f bottles of beer\n", 42.5)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2
    >>>

As has been mentioned before, all Python types except integers,
strings, and unicode strings have to be wrapped in their corresponding
*note ctypes: 78. type, so that they can be converted to the required C
data type:

    >>> printf("An int %d, a double %f\n", 1234, c_double(3.14))
    An int 1234, a double 3.140000
    31
    >>>



File: python.info,  Node: Calling functions with your own custom data types,  Next: Specifying the required argument types function prototypes,  Prev: Calling functions continued,  Up: ctypes tutorial

5.15.17.7 Calling functions with your own custom data types
...........................................................

You can also customize *note ctypes: 78. argument conversion to allow
instances of your own classes be used as function arguments.  *note
ctypes: 78. looks for an `_as_parameter_' attribute and uses this as
the function argument.  Of course, it must be one of integer, string,
or unicode:

    >>> class Bottles(object):
    ...     def __init__(self, number):
    ...         self._as_parameter_ = number
    ...
    >>> bottles = Bottles(42)
    >>> printf("%d bottles of beer\n", bottles)
    42 bottles of beer
    19
    >>>

If you don't want to store the instance's data in the `_as_parameter_'
instance variable, you could define a *note property(): 480. which
makes the data available.


File: python.info,  Node: Specifying the required argument types function prototypes,  Next: Return types,  Prev: Calling functions with your own custom data types,  Up: ctypes tutorial

5.15.17.8 Specifying the required argument types (function prototypes)
......................................................................

It is possible to specify the required argument types of functions
exported from DLLs by setting the `argtypes' attribute.

  `argtypes' must be a sequence of C data types (the `printf' function
is probably not a good example here, because it takes a variable number
and different types of parameters depending on the format string, on
the other hand this is quite handy to experiment with this feature):

    >>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double]
    >>> printf("String '%s', Int %d, Double %f\n", "Hi", 10, 2.2)
    String 'Hi', Int 10, Double 2.200000
    37
    >>>

Specifying a format protects against incompatible argument types (just
as a prototype for a C function), and tries to convert the arguments to
valid types:

    >>> printf("%d %d %d", 1, 2, 3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ArgumentError: argument 2: exceptions.TypeError: wrong type
    >>> printf("%s %d %f\n", "X", 2, 3)
    X 2 3.000000
    13
    >>>

If you have defined your own classes which you pass to function calls,
you have to implement a `from_param()' class method for them to be able
to use them in the `argtypes' sequence. The `from_param()' class method
receives the Python object passed to the function call, it should do a
typecheck or whatever is needed to make sure this object is acceptable,
and then return the object itself, its `_as_parameter_' attribute, or
whatever you want to pass as the C function argument in this case.
Again, the result should be an integer, string, unicode, a *note
ctypes: 78. instance, or an object with an `_as_parameter_' attribute.


File: python.info,  Node: Return types,  Next: Passing pointers or passing parameters by reference,  Prev: Specifying the required argument types function prototypes,  Up: ctypes tutorial

5.15.17.9 Return types
......................

By default functions are assumed to return the C `int' type.  Other
return types can be specified by setting the `restype' attribute of the
function object.

  Here is a more advanced example, it uses the `strchr' function, which
expects a string pointer and a char, and returns a pointer to a string:

    >>> strchr = libc.strchr
    >>> strchr("abcdef", ord("d")) # doctest: +SKIP
    8059983
    >>> strchr.restype = c_char_p # c_char_p is a pointer to a string
    >>> strchr("abcdef", ord("d"))
    'def'
    >>> print strchr("abcdef", ord("x"))
    None
    >>>

If you want to avoid the `ord("x")' calls above, you can set the
`argtypes' attribute, and the second argument will be converted from a
single character Python string into a C char:

    >>> strchr.restype = c_char_p
    >>> strchr.argtypes = [c_char_p, c_char]
    >>> strchr("abcdef", "d")
    'def'
    >>> strchr("abcdef", "def")
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ArgumentError: argument 2: exceptions.TypeError: one character string expected
    >>> print strchr("abcdef", "x")
    None
    >>> strchr("abcdef", "d")
    'def'
    >>>

You can also use a callable Python object (a function or a class for
example) as the `restype' attribute, if the foreign function returns an
integer.  The callable will be called with the _integer_ the C function
returns, and the result of this call will be used as the result of your
function call. This is useful to check for error return values and
automatically raise an exception:

    >>> GetModuleHandle = windll.kernel32.GetModuleHandleA # doctest: +WINDOWS
    >>> def ValidHandle(value):
    ...     if value == 0:
    ...         raise WinError()
    ...     return value
    ...
    >>>
    >>> GetModuleHandle.restype = ValidHandle # doctest: +WINDOWS
    >>> GetModuleHandle(None) # doctest: +WINDOWS
    486539264
    >>> GetModuleHandle("something silly") # doctest: +WINDOWS
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "<stdin>", line 3, in ValidHandle
    WindowsError: [Errno 126] The specified module could not be found.
    >>>

`WinError' is a function which will call Windows `FormatMessage()' api
to get the string representation of an error code, and _returns_ an
exception.  `WinError' takes an optional error code parameter, if no
one is used, it calls *note GetLastError(): 14f6. to retrieve it.

  Please note that a much more powerful error checking mechanism is
available through the `errcheck' attribute; see the reference manual
for details.


File: python.info,  Node: Passing pointers or passing parameters by reference,  Next: Structures and unions,  Prev: Return types,  Up: ctypes tutorial

5.15.17.10 Passing pointers (or: passing parameters by reference)
.................................................................

Sometimes a C api function expects a _pointer_ to a data type as
parameter, probably to write into the corresponding location, or if the
data is too large to be passed by value. This is also known as _passing
parameters by reference_.

  *note ctypes: 78. exports the *note byref(): 14f9. function which is
used to pass parameters by reference.  The same effect can be achieved
with the *note pointer(): 14fa. function, although *note pointer():
14fa. does a lot more work since it constructs a real pointer object,
so it is faster to use *note byref(): 14f9. if you don't need the
pointer object in Python itself:

    >>> i = c_int()
    >>> f = c_float()
    >>> s = create_string_buffer('\000' * 32)
    >>> print i.value, f.value, repr(s.value)
    0 0.0 ''
    >>> libc.sscanf("1 3.14 Hello", "%d %f %s",
    ...             byref(i), byref(f), s)
    3
    >>> print i.value, f.value, repr(s.value)
    1 3.1400001049 'Hello'
    >>>



File: python.info,  Node: Structures and unions,  Next: Structure/union alignment and byte order,  Prev: Passing pointers or passing parameters by reference,  Up: ctypes tutorial

5.15.17.11 Structures and unions
................................

Structures and unions must derive from the *note Structure: 14fd. and
*note Union: 14fe.  base classes which are defined in the *note ctypes:
78. module. Each subclass must define a `_fields_' attribute.
`_fields_' must be a list of _2-tuples_, containing a _field name_ and
a _field type_.

  The field type must be a *note ctypes: 78. type like *note c_int:
14d1, or any other derived *note ctypes: 78. type: structure, union,
array, pointer.

  Here is a simple example of a POINT structure, which contains two
integers named _x_ and _y_, and also shows how to initialize a
structure in the constructor:

    >>> from ctypes import *
    >>> class POINT(Structure):
    ...     _fields_ = [("x", c_int),
    ...                 ("y", c_int)]
    ...
    >>> point = POINT(10, 20)
    >>> print point.x, point.y
    10 20
    >>> point = POINT(y=5)
    >>> print point.x, point.y
    0 5
    >>> POINT(1, 2, 3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: too many initializers
    >>>

You can, however, build much more complicated structures.  A structure
can itself contain other structures by using a structure as a field
type.

  Here is a RECT structure which contains two POINTs named _upperleft_
and _lowerright_:

    >>> class RECT(Structure):
    ...     _fields_ = [("upperleft", POINT),
    ...                 ("lowerright", POINT)]
    ...
    >>> rc = RECT(point)
    >>> print rc.upperleft.x, rc.upperleft.y
    0 5
    >>> print rc.lowerright.x, rc.lowerright.y
    0 0
    >>>

Nested structures can also be initialized in the constructor in several
ways:

    >>> r = RECT(POINT(1, 2), POINT(3, 4))
    >>> r = RECT((1, 2), (3, 4))

Field *note descriptor: 14ff.s can be retrieved from the _class_, they
are useful for debugging because they can provide useful information:

    >>> print POINT.x
    <Field type=c_long, ofs=0, size=4>
    >>> print POINT.y
    <Field type=c_long, ofs=4, size=4>
    >>>


     Warning: *note ctypes: 78. does not support passing unions or
     structures with bit-fields to functions by value.  While this may
     work on 32-bit x86, it's not guaranteed by the library to work in
     the general case.  Unions and structures with bit-fields should
     always be passed to functions by pointer.


File: python.info,  Node: Structure/union alignment and byte order,  Next: Bit fields in structures and unions,  Prev: Structures and unions,  Up: ctypes tutorial

5.15.17.12 Structure/union alignment and byte order
...................................................

By default, Structure and Union fields are aligned in the same way the C
compiler does it. It is possible to override this behavior be
specifying a `_pack_' class attribute in the subclass definition. This
must be set to a positive integer and specifies the maximum alignment
for the fields. This is what `#pragma pack(n)' also does in MSVC.

  *note ctypes: 78. uses the native byte order for Structures and
Unions.  To build structures with non-native byte order, you can use
one of the *note BigEndianStructure: 1502, *note LittleEndianStructure:
1503, `BigEndianUnion', and `LittleEndianUnion' base classes.  These
classes cannot contain pointer fields.


File: python.info,  Node: Bit fields in structures and unions,  Next: Arrays,  Prev: Structure/union alignment and byte order,  Up: ctypes tutorial

5.15.17.13 Bit fields in structures and unions
..............................................

It is possible to create structures and unions containing bit fields.
Bit fields are only possible for integer fields, the bit width is
specified as the third item in the `_fields_' tuples:

    >>> class Int(Structure):
    ...     _fields_ = [("first_16", c_int, 16),
    ...                 ("second_16", c_int, 16)]
    ...
    >>> print Int.first_16
    <Field type=c_long, ofs=0:0, bits=16>
    >>> print Int.second_16
    <Field type=c_long, ofs=0:16, bits=16>
    >>>



File: python.info,  Node: Arrays,  Next: Pointers,  Prev: Bit fields in structures and unions,  Up: ctypes tutorial

5.15.17.14 Arrays
.................

Arrays are sequences, containing a fixed number of instances of the
same type.

  The recommended way to create array types is by multiplying a data
type with a positive integer:

    TenPointsArrayType = POINT * 10

Here is an example of an somewhat artificial data type, a structure
containing 4 POINTs among other stuff:

    >>> from ctypes import *
    >>> class POINT(Structure):
    ...    _fields_ = ("x", c_int), ("y", c_int)
    ...
    >>> class MyStruct(Structure):
    ...    _fields_ = [("a", c_int),
    ...                ("b", c_float),
    ...                ("point_array", POINT * 4)]
    >>>
    >>> print len(MyStruct().point_array)
    4
    >>>

Instances are created in the usual way, by calling the class:

    arr = TenPointsArrayType()
    for pt in arr:
        print pt.x, pt.y

The above code print a series of `0 0' lines, because the array
contents is initialized to zeros.

  Initializers of the correct type can also be specified:

    >>> from ctypes import *
    >>> TenIntegers = c_int * 10
    >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    >>> print ii
    <c_long_Array_10 object at 0x...>
    >>> for i in ii: print i,
    ...
    1 2 3 4 5 6 7 8 9 10
    >>>



File: python.info,  Node: Pointers,  Next: Type conversions,  Prev: Arrays,  Up: ctypes tutorial

5.15.17.15 Pointers
...................

Pointer instances are created by calling the *note pointer(): 14fa.
function on a *note ctypes: 78. type:

    >>> from ctypes import *
    >>> i = c_int(42)
    >>> pi = pointer(i)
    >>>

Pointer instances have a `contents' attribute which returns the object
to which the pointer points, the `i' object above:

    >>> pi.contents
    c_long(42)
    >>>

Note that *note ctypes: 78. does not have OOR (original object return),
it constructs a new, equivalent object each time you retrieve an
attribute:

    >>> pi.contents is i
    False
    >>> pi.contents is pi.contents
    False
    >>>

Assigning another *note c_int: 14d1. instance to the pointer's contents
attribute would cause the pointer to point to the memory location where
this is stored:

    >>> i = c_int(99)
    >>> pi.contents = i
    >>> pi.contents
    c_long(99)
    >>>


  Pointer instances can also be indexed with integers:

    >>> pi[0]
    99
    >>>

Assigning to an integer index changes the pointed to value:

    >>> print i
    c_long(99)
    >>> pi[0] = 22
    >>> print i
    c_long(22)
    >>>

It is also possible to use indexes different from 0, but you must know
what you're doing, just as in C: You can access or change arbitrary
memory locations.  Generally you only use this feature if you receive a
pointer from a C function, and you _know_ that the pointer actually
points to an array instead of a single item.

  Behind the scenes, the *note pointer(): 14fa. function does more than
simply create pointer instances, it has to create pointer _types_
first.  This is done with the *note POINTER(): 150a. function, which
accepts any *note ctypes: 78. type, and returns a new type:

    >>> PI = POINTER(c_int)
    >>> PI
    <class 'ctypes.LP_c_long'>
    >>> PI(42)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    TypeError: expected c_long instead of int
    >>> PI(c_int(42))
    <ctypes.LP_c_long object at 0x...>
    >>>

Calling the pointer type without an argument creates a `NULL' pointer.
`NULL' pointers have a `False' boolean value:

    >>> null_ptr = POINTER(c_int)()
    >>> print bool(null_ptr)
    False
    >>>

*note ctypes: 78. checks for `NULL' when dereferencing pointers (but
dereferencing invalid non-`NULL' pointers would crash Python):

    >>> null_ptr[0]
    Traceback (most recent call last):
        ....
    ValueError: NULL pointer access
    >>>

    >>> null_ptr[0] = 1234
    Traceback (most recent call last):
        ....
    ValueError: NULL pointer access
    >>>



File: python.info,  Node: Type conversions,  Next: Incomplete Types,  Prev: Pointers,  Up: ctypes tutorial

5.15.17.16 Type conversions
...........................

Usually, ctypes does strict type checking.  This means, if you have
`POINTER(c_int)' in the `argtypes' list of a function or as the type of
a member field in a structure definition, only instances of exactly the
same type are accepted.  There are some exceptions to this rule, where
ctypes accepts other objects.  For example, you can pass compatible
array instances instead of pointer types.  So, for `POINTER(c_int)',
ctypes accepts an array of c_int:

    >>> class Bar(Structure):
    ...     _fields_ = [("count", c_int), ("values", POINTER(c_int))]
    ...
    >>> bar = Bar()
    >>> bar.values = (c_int * 3)(1, 2, 3)
    >>> bar.count = 3
    >>> for i in range(bar.count):
    ...     print bar.values[i]
    ...
    1
    2
    3
    >>>

In addition, if a function argument is explicitly declared to be a
pointer type (such as `POINTER(c_int)') in `argtypes', an object of the
pointed type (`c_int' in this case) can be passed to the function.
ctypes will apply the required *note byref(): 14f9. conversion in this
case automatically.

  To set a POINTER type field to `NULL', you can assign `None':

    >>> bar.values = None
    >>>


  Sometimes you have instances of incompatible types.  In C, you can
cast one type into another type.  *note ctypes: 78. provides a *note
cast(): 150d. function which can be used in the same way.  The `Bar'
structure defined above accepts `POINTER(c_int)' pointers or *note
c_int: 14d1. arrays for its `values' field, but not instances of other
types:

    >>> bar.values = (c_byte * 4)()
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance
    >>>

For these cases, the *note cast(): 150d. function is handy.

  The *note cast(): 150d. function can be used to cast a ctypes
instance into a pointer to a different ctypes data type.  *note cast():
150d. takes two parameters, a ctypes object that is or can be converted
to a pointer of some kind, and a ctypes pointer type.  It returns an
instance of the second argument, which references the same memory block
as the first argument:

    >>> a = (c_byte * 4)()
    >>> cast(a, POINTER(c_int))
    <ctypes.LP_c_long object at ...>
    >>>

So, *note cast(): 150d. can be used to assign to the `values' field of
`Bar' the structure:

    >>> bar = Bar()
    >>> bar.values = cast((c_byte * 4)(), POINTER(c_int))
    >>> print bar.values[0]
    0
    >>>



File: python.info,  Node: Incomplete Types,  Next: Callback functions,  Prev: Type conversions,  Up: ctypes tutorial

5.15.17.17 Incomplete Types
...........................

_Incomplete Types_ are structures, unions or arrays whose members are
not yet specified. In C, they are specified by forward declarations,
which are defined later:

    struct cell; /* forward declaration */

    struct cell {
        char *name;
        struct cell *next;
    };

The straightforward translation into ctypes code would be this, but it
does not work:

    >>> class cell(Structure):
    ...     _fields_ = [("name", c_char_p),
    ...                 ("next", POINTER(cell))]
    ...
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "<stdin>", line 2, in cell
    NameError: name 'cell' is not defined
    >>>

because the new `class cell' is not available in the class statement
itself.  In *note ctypes: 78, we can define the `cell' class and set
the `_fields_' attribute later, after the class statement:

    >>> from ctypes import *
    >>> class cell(Structure):
    ...     pass
    ...
    >>> cell._fields_ = [("name", c_char_p),
    ...                  ("next", POINTER(cell))]
    >>>

Lets try it. We create two instances of `cell', and let them point to
each other, and finally follow the pointer chain a few times:

    >>> c1 = cell()
    >>> c1.name = "foo"
    >>> c2 = cell()
    >>> c2.name = "bar"
    >>> c1.next = pointer(c2)
    >>> c2.next = pointer(c1)
    >>> p = c1
    >>> for i in range(8):
    ...     print p.name,
    ...     p = p.next[0]
    ...
    foo bar foo bar foo bar foo bar
    >>>



File: python.info,  Node: Callback functions,  Next: Accessing values exported from dlls,  Prev: Incomplete Types,  Up: ctypes tutorial

5.15.17.18 Callback functions
.............................

*note ctypes: 78. allows to create C callable function pointers from
Python callables.  These are sometimes called _callback functions_.

  First, you must create a class for the callback function, the class
knows the calling convention, the return type, and the number and types
of arguments this function will receive.

  The CFUNCTYPE factory function creates types for callback functions
using the normal cdecl calling convention, and, on Windows, the
WINFUNCTYPE factory function creates types for callback functions using
the stdcall calling convention.

  Both of these factory functions are called with the result type as
first argument, and the callback functions expected argument types as
the remaining arguments.

  I will present an example here which uses the standard C library's
`qsort()' function, this is used to sort items with the help of a
callback function.  `qsort()' will be used to sort an array of integers:

    >>> IntArray5 = c_int * 5
    >>> ia = IntArray5(5, 1, 7, 33, 99)
    >>> qsort = libc.qsort
    >>> qsort.restype = None
    >>>

`qsort()' must be called with a pointer to the data to sort, the number
of items in the data array, the size of one item, and a pointer to the
comparison function, the callback. The callback will then be called
with two pointers to items, and it must return a negative integer if
the first item is smaller than the second, a zero if they are equal,
and a positive integer else.

  So our callback function receives pointers to integers, and must
return an integer. First we create the `type' for the callback function:

    >>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
    >>>

For the first implementation of the callback function, we simply print
the arguments we get, and return 0 (incremental development ;-):

    >>> def py_cmp_func(a, b):
    ...     print "py_cmp_func", a, b
    ...     return 0
    ...
    >>>

Create the C callable callback:

    >>> cmp_func = CMPFUNC(py_cmp_func)
    >>>

And we're ready to go:

    >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
    >>>

We know how to access the contents of a pointer, so lets redefine our
callback:

    >>> def py_cmp_func(a, b):
    ...     print "py_cmp_func", a[0], b[0]
    ...     return 0
    ...
    >>> cmp_func = CMPFUNC(py_cmp_func)
    >>>

Here is what we get on Windows:

    >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS
    py_cmp_func 7 1
    py_cmp_func 33 1
    py_cmp_func 99 1
    py_cmp_func 5 1
    py_cmp_func 7 5
    py_cmp_func 33 5
    py_cmp_func 99 5
    py_cmp_func 7 99
    py_cmp_func 33 99
    py_cmp_func 7 33
    >>>

It is funny to see that on linux the sort function seems to work much
more efficiently, it is doing less comparisons:

    >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +LINUX
    py_cmp_func 5 1
    py_cmp_func 33 99
    py_cmp_func 7 33
    py_cmp_func 5 7
    py_cmp_func 1 7
    >>>

Ah, we're nearly done! The last step is to actually compare the two
items and return a useful result:

    >>> def py_cmp_func(a, b):
    ...     print "py_cmp_func", a[0], b[0]
    ...     return a[0] - b[0]
    ...
    >>>

Final run on Windows:

    >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +WINDOWS
    py_cmp_func 33 7
    py_cmp_func 99 33
    py_cmp_func 5 99
    py_cmp_func 1 99
    py_cmp_func 33 7
    py_cmp_func 1 33
    py_cmp_func 5 33
    py_cmp_func 5 7
    py_cmp_func 1 7
    py_cmp_func 5 1
    >>>

and on Linux:

    >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX
    py_cmp_func 5 1
    py_cmp_func 33 99
    py_cmp_func 7 33
    py_cmp_func 1 7
    py_cmp_func 5 7
    >>>

It is quite interesting to see that the Windows `qsort()' function needs
more comparisons than the linux version!

  As we can easily check, our array is sorted now:

    >>> for i in ia: print i,
    ...
    1 5 7 33 99
    >>>

*Important note for callback functions:*

  Make sure you keep references to CFUNCTYPE objects as long as they
are used from C code. *note ctypes: 78. doesn't, and if you don't, they
may be garbage collected, crashing your program when a callback is made.


File: python.info,  Node: Accessing values exported from dlls,  Next: Surprises,  Prev: Callback functions,  Up: ctypes tutorial

5.15.17.19 Accessing values exported from dlls
..............................................

Some shared libraries not only export functions, they also export
variables. An example in the Python library itself is the
`Py_OptimizeFlag', an integer set to 0, 1, or 2, depending on the *note
-O: 44c. or *note -OO: 57b. flag given on startup.

  *note ctypes: 78. can access values like this with the `in_dll()'
class methods of the type.  _pythonapi_ is a predefined symbol giving
access to the Python C api:

    >>> opt_flag = c_int.in_dll(pythonapi, "Py_OptimizeFlag")
    >>> print opt_flag
    c_long(0)
    >>>

If the interpreter would have been started with *note -O: 44c, the
sample would have printed `c_long(1)', or `c_long(2)' if *note -OO:
57b. would have been specified.

  An extended example which also demonstrates the use of pointers
accesses the `PyImport_FrozenModules' pointer exported by Python.

  Quoting the Python docs: _This pointer is initialized to point to an
array of "struct _frozen" records, terminated by one whose members are
all NULL or zero.  When a frozen module is imported, it is searched in
this table. Third-party code could play tricks with this to provide a
dynamically created collection of frozen modules._

  So manipulating this pointer could even prove useful. To restrict the
example size, we show only how this table can be read with *note
ctypes: 78.:

    >>> from ctypes import *
    >>>
    >>> class struct_frozen(Structure):
    ...     _fields_ = [("name", c_char_p),
    ...                 ("code", POINTER(c_ubyte)),
    ...                 ("size", c_int)]
    ...
    >>>

We have defined the `struct _frozen' data type, so we can get the
pointer to the table:

    >>> FrozenTable = POINTER(struct_frozen)
    >>> table = FrozenTable.in_dll(pythonapi, "PyImport_FrozenModules")
    >>>

Since `table' is a `pointer' to the array of `struct_frozen' records, we
can iterate over it, but we just have to make sure that our loop
terminates, because pointers have no size. Sooner or later it would
probably crash with an access violation or whatever, so it's better to
break out of the loop when we hit the NULL entry:

    >>> for item in table:
    ...    print item.name, item.size
    ...    if item.name is None:
    ...        break
    ...
    __hello__ 104
    __phello__ -104
    __phello__.spam 104
    None 0
    >>>

The fact that standard Python has a frozen module and a frozen package
(indicated by the negative size member) is not well known, it is only
used for testing. Try it out with `import __hello__' for example.


File: python.info,  Node: Surprises,  Next: Variable-sized data types,  Prev: Accessing values exported from dlls,  Up: ctypes tutorial

5.15.17.20 Surprises
....................

There are some edge cases in *note ctypes: 78. where you might expect
something other than what actually happens.

  Consider the following example:

    >>> from ctypes import *
    >>> class POINT(Structure):
    ...     _fields_ = ("x", c_int), ("y", c_int)
    ...
    >>> class RECT(Structure):
    ...     _fields_ = ("a", POINT), ("b", POINT)
    ...
    >>> p1 = POINT(1, 2)
    >>> p2 = POINT(3, 4)
    >>> rc = RECT(p1, p2)
    >>> print rc.a.x, rc.a.y, rc.b.x, rc.b.y
    1 2 3 4
    >>> # now swap the two points
    >>> rc.a, rc.b = rc.b, rc.a
    >>> print rc.a.x, rc.a.y, rc.b.x, rc.b.y
    3 4 3 4
    >>>

Hm. We certainly expected the last statement to print `3 4 1 2'. What
happened? Here are the steps of the `rc.a, rc.b = rc.b, rc.a' line
above:

    >>> temp0, temp1 = rc.b, rc.a
    >>> rc.a = temp0
    >>> rc.b = temp1
    >>>

Note that `temp0' and `temp1' are objects still using the internal
buffer of the `rc' object above. So executing `rc.a = temp0' copies the
buffer contents of `temp0' into `rc' 's buffer.  This, in turn, changes
the contents of `temp1'. So, the last assignment `rc.b = temp1',
doesn't have the expected effect.

  Keep in mind that retrieving sub-objects from Structure, Unions, and
Arrays doesn't _copy_ the sub-object, instead it retrieves a wrapper
object accessing the root-object's underlying buffer.

  Another example that may behave different from what one would expect
is this:

    >>> s = c_char_p()
    >>> s.value = "abc def ghi"
    >>> s.value
    'abc def ghi'
    >>> s.value is s.value
    False
    >>>

Why is it printing `False'?  ctypes instances are objects containing a
memory block plus some *note descriptor: 14ff.s accessing the contents
of the memory.  Storing a Python object in the memory block does not
store the object itself, instead the `contents' of the object is
stored.  Accessing the contents again constructs a new Python object
each time!


File: python.info,  Node: Variable-sized data types,  Prev: Surprises,  Up: ctypes tutorial

5.15.17.21 Variable-sized data types
....................................

*note ctypes: 78. provides some support for variable-sized arrays and
structures.

  The *note resize(): 1518. function can be used to resize the memory
buffer of an existing ctypes object.  The function takes the object as
first argument, and the requested size in bytes as the second argument.
The memory block cannot be made smaller than the natural memory block
specified by the objects type, a *note ValueError: 233. is raised if
this is tried:

    >>> short_array = (c_short * 4)()
    >>> print sizeof(short_array)
    8
    >>> resize(short_array, 4)
    Traceback (most recent call last):
        ...
    ValueError: minimum size is 8
    >>> resize(short_array, 32)
    >>> sizeof(short_array)
    32
    >>> sizeof(type(short_array))
    8
    >>>

This is nice and fine, but how would one access the additional elements
contained in this array?  Since the type still only knows about 4
elements, we get errors accessing other elements:

    >>> short_array[:]
    [0, 0, 0, 0]
    >>> short_array[7]
    Traceback (most recent call last):
        ...
    IndexError: invalid index
    >>>

Another way to use variable-sized data types with *note ctypes: 78. is
to use the dynamic nature of Python, and (re-)define the data type
after the required size is already known, on a case by case basis.


File: python.info,  Node: ctypes reference,  Prev: ctypes tutorial,  Up: ctypes --- A foreign function library for Python

5.15.17.22 ctypes reference
...........................

* Menu:

* Finding shared libraries::
* Loading shared libraries::
* Foreign functions::
* Function prototypes::
* Utility functions::
* Data types::
* Fundamental data types: Fundamental data types<2>.
* Structured data types::
* Arrays and pointers::


File: python.info,  Node: Finding shared libraries,  Next: Loading shared libraries,  Up: ctypes reference

5.15.17.23 Finding shared libraries
...................................

When programming in a compiled language, shared libraries are accessed
when compiling/linking a program, and when the program is run.

  The purpose of the `find_library()' function is to locate a library
in a way similar to what the compiler does (on platforms with several
versions of a shared library the most recent should be loaded), while
the ctypes library loaders act like when a program is run, and call the
runtime loader directly.

  The `ctypes.util' module provides a function which can help to
determine the library to load.

 -- Data: ctypes.util.find_library (name)
     Try to find a library and return a pathname.  _name_ is the
     library name without any prefix like _lib_, suffix like `.so',
     `.dylib' or version number (this is the form used for the posix
     linker option `-l').  If no library can be found, returns `None'.

  The exact functionality is system dependent.

  On Linux, `find_library()' tries to run external programs
(`/sbin/ldconfig', `gcc', and `objdump') to find the library file.  It
returns the filename of the library file.  Here are some examples:

    >>> from ctypes.util import find_library
    >>> find_library("m")
    'libm.so.6'
    >>> find_library("c")
    'libc.so.6'
    >>> find_library("bz2")
    'libbz2.so.1.0'
    >>>

On OS X, `find_library()' tries several predefined naming schemes and
paths to locate the library, and returns a full pathname if successful:

    >>> from ctypes.util import find_library
    >>> find_library("c")
    '/usr/lib/libc.dylib'
    >>> find_library("m")
    '/usr/lib/libm.dylib'
    >>> find_library("bz2")
    '/usr/lib/libbz2.dylib'
    >>> find_library("AGL")
    '/System/Library/Frameworks/AGL.framework/AGL'
    >>>

On Windows, `find_library()' searches along the system search path, and
returns the full pathname, but since there is no predefined naming
scheme a call like `find_library("c")' will fail and return `None'.

  If wrapping a shared library with *note ctypes: 78, it _may_ be
better to determine the shared library name at development type, and
hardcode that into the wrapper module instead of using `find_library()'
to locate the library at runtime.


File: python.info,  Node: Loading shared libraries,  Next: Foreign functions,  Prev: Finding shared libraries,  Up: ctypes reference

5.15.17.24 Loading shared libraries
...................................

There are several ways to loaded shared libraries into the Python
process.  One way is to instantiate one of the following classes:

 -- Class: ctypes.CDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)
     Instances of this class represent loaded shared libraries.
     Functions in these libraries use the standard C calling
     convention, and are assumed to return `int'.

 -- Class: ctypes.OleDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)
     Windows only: Instances of this class represent loaded shared
     libraries, functions in these libraries use the `stdcall' calling
     convention, and are assumed to return the windows specific *note
     HRESULT: 1521. code.  *note HRESULT: 1521.  values contain
     information specifying whether the function call failed or
     succeeded, together with additional error code.  If the return
     value signals a failure, an `WindowsError' is automatically raised.

 -- Class: ctypes.WinDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)
     Windows only: Instances of this class represent loaded shared
     libraries, functions in these libraries use the `stdcall' calling
     convention, and are assumed to return `int' by default.

     On Windows CE only the standard calling convention is used, for
     convenience the *note WinDLL: 1522. and *note OleDLL: 1520. use
     the standard calling convention on this platform.

  The Python *note global interpreter lock: 1523. is released before
calling any function exported by these libraries, and reacquired
afterwards.

 -- Class: ctypes.PyDLL (name, mode=DEFAULT_MODE, handle=None)
     Instances of this class behave like *note CDLL: 151f. instances,
     except that the Python GIL is _not_ released during the function
     call, and after the function execution the Python error flag is
     checked. If the error flag is set, a Python exception is raised.

     Thus, this is only useful to call Python C api functions directly.

  All these classes can be instantiated by calling them with at least
one argument, the pathname of the shared library.  If you have an
existing handle to an already loaded shared library, it can be passed
as the `handle' named parameter, otherwise the underlying platforms
`dlopen' or `LoadLibrary' function is used to load the library into the
process, and to get a handle to it.

  The _mode_ parameter can be used to specify how the library is
loaded.  For details, consult the `dlopen(3)' manpage, on Windows,
_mode_ is ignored.

  The _use_errno_ parameter, when set to True, enables a ctypes
mechanism that allows to access the system *note errno: c8. error
number in a safe way.  *note ctypes: 78. maintains a thread-local copy
of the systems *note errno: c8.  variable; if you call foreign
functions created with `use_errno=True' then the *note errno: c8. value
before the function call is swapped with the ctypes private copy, the
same happens immediately after the function call.

  The function *note ctypes.get_errno(): 1525. returns the value of the
ctypes private copy, and the function *note ctypes.set_errno(): 1526.
changes the ctypes private copy to a new value and returns the former
value.

  The _use_last_error_ parameter, when set to True, enables the same
mechanism for the Windows error code which is managed by the *note
GetLastError(): 14f6. and `SetLastError()' Windows API functions; *note
ctypes.get_last_error(): 1527. and *note ctypes.set_last_error(): 1528.
are used to request and change the ctypes private copy of the windows
error code.

  New in version 2.6: The _use_last_error_ and _use_errno_ optional
parameters were added.

 -- Data: ctypes.RTLD_GLOBAL
     Flag to use as _mode_ parameter.  On platforms where this flag is
     not available, it is defined as the integer zero.

 -- Data: ctypes.RTLD_LOCAL
     Flag to use as _mode_ parameter.  On platforms where this is not
     available, it is the same as _RTLD_GLOBAL_.

 -- Data: ctypes.DEFAULT_MODE
     The default mode which is used to load shared libraries.  On OSX
     10.3, this is _RTLD_GLOBAL_, otherwise it is the same as
     _RTLD_LOCAL_.

  Instances of these classes have no public methods, however *note
__getattr__(): 32a.  and *note __getitem__(): 448. have special
behavior: functions exported by the shared library can be accessed as
attributes of by index.  Please note that both *note __getattr__():
32a. and *note __getitem__(): 448. cache their result, so calling them
repeatedly returns the same object each time.

  The following public attributes are available, their name starts with
an underscore to not clash with exported function names:

 -- Attribute: PyDLL._handle
     The system handle used to access the library.

 -- Attribute: PyDLL._name
     The name of the library passed in the constructor.

  Shared libraries can also be loaded by using one of the prefabricated
objects, which are instances of the *note LibraryLoader: 152b. class,
either by calling the `LoadLibrary()' method, or by retrieving the
library as attribute of the loader instance.

 -- Class: ctypes.LibraryLoader (dlltype)
     Class which loads shared libraries.  _dlltype_ should be one of the
     *note CDLL: 151f, *note PyDLL: 1524, *note WinDLL: 1522, or *note
     OleDLL: 1520. types.

     *note __getattr__(): 32a. has special behavior: It allows to load
     a shared library by accessing it as attribute of a library loader
     instance.  The result is cached, so repeated attribute accesses
     return the same library each time.

      -- Method: LoadLibrary (name)
          Load a shared library into the process and return it.  This
          method always returns a new instance of the library.

  These prefabricated library loaders are available:

 -- Data: ctypes.cdll
     Creates *note CDLL: 151f. instances.

 -- Data: ctypes.windll
     Windows only: Creates *note WinDLL: 1522. instances.

 -- Data: ctypes.oledll
     Windows only: Creates *note OleDLL: 1520. instances.

 -- Data: ctypes.pydll
     Creates *note PyDLL: 1524. instances.

  For accessing the C Python api directly, a ready-to-use Python shared
library object is available:

 -- Data: ctypes.pythonapi
     An instance of *note PyDLL: 1524. that exposes Python C API
     functions as attributes.  Note that all these functions are
     assumed to return C `int', which is of course not always the
     truth, so you have to assign the correct `restype' attribute to
     use these functions.


File: python.info,  Node: Foreign functions,  Next: Function prototypes,  Prev: Loading shared libraries,  Up: ctypes reference

5.15.17.25 Foreign functions
............................

As explained in the previous section, foreign functions can be accessed
as attributes of loaded shared libraries.  The function objects created
in this way by default accept any number of arguments, accept any
ctypes data instances as arguments, and return the default result type
specified by the library loader.  They are instances of a private class:

 -- Class: ctypes._FuncPtr
     Base class for C callable foreign functions.

     Instances of foreign functions are also C compatible data types;
     they represent C function pointers.

     This behavior can be customized by assigning to special attributes
     of the foreign function object.

      -- Attribute: restype
          Assign a ctypes type to specify the result type of the
          foreign function.  Use `None' for `void', a function not
          returning anything.

          It is possible to assign a callable Python object that is not
          a ctypes type, in this case the function is assumed to return
          a C `int', and the callable will be called with this integer,
          allowing to do further processing or error checking.  Using
          this is deprecated, for more flexible post processing or
          error checking use a ctypes data type as *note restype: 1530.
          and assign a callable to the *note errcheck: 1531. attribute.

      -- Attribute: argtypes
          Assign a tuple of ctypes types to specify the argument types
          that the function accepts.  Functions using the `stdcall'
          calling convention can only be called with the same number of
          arguments as the length of this tuple; functions using the C
          calling convention accept additional, unspecified arguments
          as well.

          When a foreign function is called, each actual argument is
          passed to the `from_param()' class method of the items in the
          *note argtypes: 1532.  tuple, this method allows to adapt the
          actual argument to an object that the foreign function
          accepts.  For example, a *note c_char_p: 14e9. item in the
          *note argtypes: 1532. tuple will convert a unicode string
          passed as argument into an byte string using ctypes
          conversion rules.

          New: It is now possible to put items in argtypes which are
          not ctypes types, but each item must have a `from_param()'
          method which returns a value usable as argument (integer,
          string, ctypes instance).  This allows to define adapters
          that can adapt custom objects as function parameters.

      -- Attribute: errcheck
          Assign a Python function or another callable to this
          attribute. The callable will be called with three or more
          arguments:

           -- Function: callable (result, func, arguments)
               _result_ is what the foreign function returns, as
               specified by the *note restype: 1530. attribute.

               _func_ is the foreign function object itself, this
               allows to reuse the same callable object to check or
               post process the results of several functions.

               _arguments_ is a tuple containing the parameters
               originally passed to the function call, this allows to
               specialize the behavior on the arguments used.

          The object that this function returns will be returned from
          the foreign function call, but it can also check the result
          value and raise an exception if the foreign function call
          failed.

 -- Exception: ctypes.ArgumentError
     This exception is raised when a foreign function call cannot
     convert one of the passed arguments.


File: python.info,  Node: Function prototypes,  Next: Utility functions,  Prev: Foreign functions,  Up: ctypes reference

5.15.17.26 Function prototypes
..............................

Foreign functions can also be created by instantiating function
prototypes.  Function prototypes are similar to function prototypes in
C; they describe a function (return type, argument types, calling
convention) without defining an implementation.  The factory functions
must be called with the desired result type and the argument types of
the function.

 -- Function: ctypes.CFUNCTYPE (restype, *argtypes, use_errno=False,
          use_last_error=False)
     The returned function prototype creates functions that use the
     standard C calling convention.  The function will release the GIL
     during the call.  If _use_errno_ is set to True, the ctypes
     private copy of the system *note errno: c8. variable is exchanged
     with the real *note errno: c8. value before and after the call;
     _use_last_error_ does the same for the Windows error code.

     Changed in version 2.6: The optional _use_errno_ and
     _use_last_error_ parameters were added.

 -- Function: ctypes.WINFUNCTYPE (restype, *argtypes, use_errno=False,
          use_last_error=False)
     Windows only: The returned function prototype creates functions
     that use the `stdcall' calling convention, except on Windows CE
     where *note WINFUNCTYPE(): 1537. is the same as *note CFUNCTYPE():
     1536.  The function will release the GIL during the call.
     _use_errno_ and _use_last_error_ have the same meaning as above.

 -- Function: ctypes.PYFUNCTYPE (restype, *argtypes)
     The returned function prototype creates functions that use the
     Python calling convention.  The function will _not_ release the
     GIL during the call.

  Function prototypes created by these factory functions can be
instantiated in different ways, depending on the type and number of the
parameters in the call:

      -- Function: prototype (address)
          Returns a foreign function at the specified address which
          must be an integer.

      -- Function: prototype (callable)
          Create a C callable function (a callback function) from a
          Python _callable_.

      -- Function: prototype (func_spec[, paramflags])
          Returns a foreign function exported by a shared library.
          _func_spec_ must be a 2-tuple `(name_or_ordinal, library)'.
          The first item is the name of the exported function as
          string, or the ordinal of the exported function as small
          integer.  The second item is the shared library instance.

      -- Function: prototype (vtbl_index, name[, paramflags[, iid]])
          Returns a foreign function that will call a COM method.
          _vtbl_index_ is the index into the virtual function table, a
          small non-negative integer. _name_ is name of the COM method.
          _iid_ is an optional pointer to the interface identifier
          which is used in extended error reporting.

          COM methods use a special calling convention: They require a
          pointer to the COM interface as first argument, in addition
          to those parameters that are specified in the `argtypes'
          tuple.

     The optional _paramflags_ parameter creates foreign function
     wrappers with much more functionality than the features described
     above.

     _paramflags_ must be a tuple of the same length as `argtypes'.

     Each item in this tuple contains further information about a
     parameter, it must be a tuple containing one, two, or three items.

     The first item is an integer containing a combination of direction
     flags for the parameter:

         1
               Specifies an input parameter to the function.

         2
               Output parameter.  The foreign function fills in a value.

         4
               Input parameter which defaults to the integer zero.

     The optional second item is the parameter name as string.  If this
     is specified, the foreign function can be called with named
     parameters.

     The optional third item is the default value for this parameter.

  This example demonstrates how to wrap the Windows `MessageBoxA'
function so that it supports default parameters and named arguments.
The C declaration from the windows header file is this:

    WINUSERAPI int WINAPI
    MessageBoxA(
        HWND hWnd ,
        LPCSTR lpText,
        LPCSTR lpCaption,
        UINT uType);

Here is the wrapping with *note ctypes: 78.:

    >>> from ctypes import c_int, WINFUNCTYPE, windll
    >>> from ctypes.wintypes import HWND, LPCSTR, UINT
    >>> prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
    >>> paramflags = (1, "hwnd", 0), (1, "text", "Hi"), (1, "caption", None), (1, "flags", 0)
    >>> MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)
    >>>

The MessageBox foreign function can now be called in these ways:

    >>> MessageBox()
    >>> MessageBox(text="Spam, spam, spam")
    >>> MessageBox(flags=2, text="foo bar")
    >>>

A second example demonstrates output parameters.  The win32
`GetWindowRect' function retrieves the dimensions of a specified window
by copying them into `RECT' structure that the caller has to supply.
Here is the C declaration:

    WINUSERAPI BOOL WINAPI
    GetWindowRect(
         HWND hWnd,
         LPRECT lpRect);

Here is the wrapping with *note ctypes: 78.:

    >>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError
    >>> from ctypes.wintypes import BOOL, HWND, RECT
    >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
    >>> paramflags = (1, "hwnd"), (2, "lprect")
    >>> GetWindowRect = prototype(("GetWindowRect", windll.user32), paramflags)
    >>>

Functions with output parameters will automatically return the output
parameter value if there is a single one, or a tuple containing the
output parameter values when there are more than one, so the
GetWindowRect function now returns a RECT instance, when called.

  Output parameters can be combined with the `errcheck' protocol to do
further output processing and error checking.  The win32
`GetWindowRect' api function returns a `BOOL' to signal success or
failure, so this function could do the error checking, and raises an
exception when the api call failed:

    >>> def errcheck(result, func, args):
    ...     if not result:
    ...         raise WinError()
    ...     return args
    ...
    >>> GetWindowRect.errcheck = errcheck
    >>>

If the `errcheck' function returns the argument tuple it receives
unchanged, *note ctypes: 78. continues the normal processing it does on
the output parameters.  If you want to return a tuple of window
coordinates instead of a `RECT' instance, you can retrieve the fields
in the function and return them instead, the normal processing will no
longer take place:

    >>> def errcheck(result, func, args):
    ...     if not result:
    ...         raise WinError()
    ...     rc = args[1]
    ...     return rc.left, rc.top, rc.bottom, rc.right
    ...
    >>> GetWindowRect.errcheck = errcheck
    >>>



File: python.info,  Node: Utility functions,  Next: Data types,  Prev: Function prototypes,  Up: ctypes reference

5.15.17.27 Utility functions
............................

 -- Function: ctypes.addressof (obj)
     Returns the address of the memory buffer as integer.  _obj_ must
     be an instance of a ctypes type.

 -- Function: ctypes.alignment (obj_or_type)
     Returns the alignment requirements of a ctypes type. _obj_or_type_
     must be a ctypes type or instance.

 -- Function: ctypes.byref (obj[, offset])
     Returns a light-weight pointer to _obj_, which must be an instance
     of a ctypes type.  _offset_ defaults to zero, and must be an
     integer that will be added to the internal pointer value.

     `byref(obj, offset)' corresponds to this C code:

         (((char *)&obj) + offset)

     The returned object can only be used as a foreign function call
     parameter.  It behaves similar to `pointer(obj)', but the
     construction is a lot faster.

     New in version 2.6: The _offset_ optional argument was added.

 -- Function: ctypes.cast (obj, type)
     This function is similar to the cast operator in C.  It returns a
     new instance of _type_ which points to the same memory block as
     _obj_.  _type_ must be a pointer type, and _obj_ must be an object
     that can be interpreted as a pointer.

 -- Function: ctypes.create_string_buffer (init_or_size[, size])
     This function creates a mutable character buffer. The returned
     object is a ctypes array of *note c_char: 14dc.

     _init_or_size_ must be an integer which specifies the size of the
     array, or a string which will be used to initialize the array
     items.

     If a string is specified as first argument, the buffer is made one
     item larger than the length of the string so that the last element
     in the array is a NUL termination character. An integer can be
     passed as second argument which allows to specify the size of the
     array if the length of the string should not be used.

     If the first parameter is a unicode string, it is converted into
     an 8-bit string according to ctypes conversion rules.

 -- Function: ctypes.create_unicode_buffer (init_or_size[, size])
     This function creates a mutable unicode character buffer. The
     returned object is a ctypes array of *note c_wchar: 14dd.

     _init_or_size_ must be an integer which specifies the size of the
     array, or a unicode string which will be used to initialize the
     array items.

     If a unicode string is specified as first argument, the buffer is
     made one item larger than the length of the string so that the
     last element in the array is a NUL termination character. An
     integer can be passed as second argument which allows to specify
     the size of the array if the length of the string should not be
     used.

     If the first parameter is a 8-bit string, it is converted into an
     unicode string according to ctypes conversion rules.

 -- Function: ctypes.DllCanUnloadNow ()
     Windows only: This function is a hook which allows to implement
     in-process COM servers with ctypes.  It is called from the
     DllCanUnloadNow function that the _ctypes extension dll exports.

 -- Function: ctypes.DllGetClassObject ()
     Windows only: This function is a hook which allows to implement
     in-process COM servers with ctypes.  It is called from the
     DllGetClassObject function that the `_ctypes' extension dll
     exports.

 -- Function: ctypes.util.find_library (name)
     Try to find a library and return a pathname.  _name_ is the
     library name without any prefix like `lib', suffix like `.so',
     `.dylib' or version number (this is the form used for the posix
     linker option `-l').  If no library can be found, returns `None'.

     The exact functionality is system dependent.

     Changed in version 2.6: Windows only: `find_library("m")' or
     `find_library("c")' return the result of a call to `find_msvcrt()'.

 -- Function: ctypes.util.find_msvcrt ()
     Windows only: return the filename of the VC runtype library used
     by Python, and by the extension modules.  If the name of the
     library cannot be determined, `None' is returned.

     If you need to free memory, for example, allocated by an extension
     module with a call to the `free(void *)', it is important that you
     use the function in the same library that allocated the memory.

     New in version 2.6.

 -- Function: ctypes.FormatError ([code])
     Windows only: Returns a textual description of the error code
     _code_.  If no error code is specified, the last error code is
     used by calling the Windows api function GetLastError.

 -- Function: ctypes.GetLastError ()
     Windows only: Returns the last error code set by Windows in the
     calling thread.  This function calls the Windows `GetLastError()'
     function directly, it does not return the ctypes-private copy of
     the error code.

 -- Function: ctypes.get_errno ()
     Returns the current value of the ctypes-private copy of the system
     *note errno: c8. variable in the calling thread.

     New in version 2.6.

 -- Function: ctypes.get_last_error ()
     Windows only: returns the current value of the ctypes-private copy
     of the system `LastError' variable in the calling thread.

     New in version 2.6.

 -- Function: ctypes.memmove (dst, src, count)
     Same as the standard C memmove library function: copies _count_
     bytes from _src_ to _dst_. _dst_ and _src_ must be integers or
     ctypes instances that can be converted to pointers.

 -- Function: ctypes.memset (dst, c, count)
     Same as the standard C memset library function: fills the memory
     block at address _dst_ with _count_ bytes of value _c_. _dst_ must
     be an integer specifying an address, or a ctypes instance.

 -- Function: ctypes.POINTER (type)
     This factory function creates and returns a new ctypes pointer
     type. Pointer types are cached an reused internally, so calling
     this function repeatedly is cheap. _type_ must be a ctypes type.

 -- Function: ctypes.pointer (obj)
     This function creates a new pointer instance, pointing to _obj_.
     The returned object is of the type `POINTER(type(obj))'.

     Note: If you just want to pass a pointer to an object to a foreign
     function call, you should use `byref(obj)' which is much faster.

 -- Function: ctypes.resize (obj, size)
     This function resizes the internal memory buffer of _obj_, which
     must be an instance of a ctypes type.  It is not possible to make
     the buffer smaller than the native size of the objects type, as
     given by `sizeof(type(obj))', but it is possible to enlarge the
     buffer.

 -- Function: ctypes.set_conversion_mode (encoding, errors)
     This function sets the rules that ctypes objects use when
     converting between 8-bit strings and unicode strings.  _encoding_
     must be a string specifying an encoding, like `'utf-8'' or
     `'mbcs'', _errors_ must be a string specifying the error handling
     on encoding/decoding errors.  Examples of possible values are
     `"strict"', `"replace"', or `"ignore"'.

     *note set_conversion_mode(): 1544. returns a 2-tuple containing
     the previous conversion rules.  On windows, the initial conversion
     rules are `('mbcs', 'ignore')', on other systems `('ascii',
     'strict')'.

 -- Function: ctypes.set_errno (value)
     Set the current value of the ctypes-private copy of the system
     *note errno: c8.  variable in the calling thread to _value_ and
     return the previous value.

     New in version 2.6.

 -- Function: ctypes.set_last_error (value)
     Windows only: set the current value of the ctypes-private copy of
     the system `LastError' variable in the calling thread to _value_
     and return the previous value.

     New in version 2.6.

 -- Function: ctypes.sizeof (obj_or_type)
     Returns the size in bytes of a ctypes type or instance memory
     buffer. Does the same as the C `sizeof()' function.

 -- Function: ctypes.string_at (address[, size])
     This function returns the string starting at memory address
     _address_. If size is specified, it is used as size, otherwise the
     string is assumed to be zero-terminated.

 -- Function: ctypes.WinError (code=None, descr=None)
     Windows only: this function is probably the worst-named thing in
     ctypes.  It creates an instance of WindowsError.  If _code_ is not
     specified, `GetLastError' is called to determine the error code.
     If `descr' is not specified, *note FormatError(): 1541. is called
     to get a textual description of the error.

 -- Function: ctypes.wstring_at (address[, size])
     This function returns the wide character string starting at memory
     address _address_ as unicode string.  If _size_ is specified, it
     is used as the number of characters of the string, otherwise the
     string is assumed to be zero-terminated.


File: python.info,  Node: Data types,  Next: Fundamental data types<2>,  Prev: Utility functions,  Up: ctypes reference

5.15.17.28 Data types
.....................

 -- Class: ctypes._CData
     This non-public class is the common base class of all ctypes data
     types.  Among other things, all ctypes type instances contain a
     memory block that hold C compatible data; the address of the
     memory block is returned by the *note addressof(): 153b. helper
     function.  Another instance variable is exposed as *note _objects:
     154c.; this contains other Python objects that need to be kept
     alive in case the memory block contains pointers.

     Common methods of ctypes data types, these are all class methods
     (to be exact, they are methods of the *note metaclass: 154d.):

      -- Method: from_buffer (source[, offset])
          This method returns a ctypes instance that shares the buffer
          of the _source_ object.  The _source_ object must support the
          writeable buffer interface.  The optional _offset_ parameter
          specifies an offset into the source buffer in bytes; the
          default is zero.  If the source buffer is not large enough a
          *note ValueError: 233. is raised.

          New in version 2.6.

      -- Method: from_buffer_copy (source[, offset])
          This method creates a ctypes instance, copying the buffer
          from the _source_ object buffer which must be readable.  The
          optional _offset_ parameter specifies an offset into the
          source buffer in bytes; the default is zero.  If the source
          buffer is not large enough a *note ValueError: 233. is raised.

          New in version 2.6.

      -- Method: from_address (address)
          This method returns a ctypes type instance using the memory
          specified by _address_ which must be an integer.

      -- Method: from_param (obj)
          This method adapts _obj_ to a ctypes type.  It is called with
          the actual object used in a foreign function call when the
          type is present in the foreign function's `argtypes' tuple;
          it must return an object that can be used as a function call
          parameter.

          All ctypes data types have a default implementation of this
          classmethod that normally returns _obj_ if that is an
          instance of the type.  Some types accept other objects as
          well.

      -- Method: in_dll (library, name)
          This method returns a ctypes type instance exported by a
          shared library. _name_ is the name of the symbol that exports
          the data, _library_ is the loaded shared library.

     Common instance variables of ctypes data types:

      -- Attribute: _b_base_
          Sometimes ctypes data instances do not own the memory block
          they contain, instead they share part of the memory block of
          a base object.  The *note _b_base_: 1553. read-only member is
          the root ctypes object that owns the memory block.

      -- Attribute: _b_needsfree_
          This read-only variable is true when the ctypes data instance
          has allocated the memory block itself, false otherwise.

      -- Attribute: _objects
          This member is either `None' or a dictionary containing
          Python objects that need to be kept alive so that the memory
          block contents is kept valid.  This object is only exposed
          for debugging; never modify the contents of this dictionary.


File: python.info,  Node: Fundamental data types<2>,  Next: Structured data types,  Prev: Data types,  Up: ctypes reference

5.15.17.29 Fundamental data types
.................................

 -- Class: ctypes._SimpleCData
     This non-public class is the base class of all fundamental ctypes
     data types. It is mentioned here because it contains the common
     attributes of the fundamental ctypes data types.  *note
     _SimpleCData: 1557. is a subclass of *note _CData: 154b, so it
     inherits their methods and attributes.

     Changed in version 2.6: ctypes data types that are not and do not
     contain pointers can now be pickled.

     Instances have a single attribute:

      -- Attribute: value
          This attribute contains the actual value of the instance. For
          integer and pointer types, it is an integer, for character
          types, it is a single character string, for character pointer
          types it is a Python string or unicode string.

          When the `value' attribute is retrieved from a ctypes
          instance, usually a new object is returned each time.  *note
          ctypes: 78. does _not_ implement original object return,
          always a new object is constructed.  The same is true for all
          other ctypes object instances.

Fundamental data types, when returned as foreign function call results,
or, for example, by retrieving structure field members or array items,
are transparently converted to native Python types.  In other words, if
a foreign function has a `restype' of *note c_char_p: 14e9, you will
always receive a Python string, _not_ a *note c_char_p: 14e9. instance.

  Subclasses of fundamental data types do _not_ inherit this behavior.
So, if a foreign functions `restype' is a subclass of *note c_void_p:
14eb, you will receive an instance of this subclass from the function
call. Of course, you can get the value of the pointer by accessing the
`value' attribute.

  These are the fundamental ctypes data types:

 -- Class: ctypes.c_byte
     Represents the C `signed char' datatype, and interprets the value
     as small integer.  The constructor accepts an optional integer
     initializer; no overflow checking is done.

 -- Class: ctypes.c_char
     Represents the C `char' datatype, and interprets the value as a
     single character.  The constructor accepts an optional string
     initializer, the length of the string must be exactly one
     character.

 -- Class: ctypes.c_char_p
     Represents the C `char *' datatype when it points to a
     zero-terminated string.  For a general character pointer that may
     also point to binary data, `POINTER(c_char)' must be used.  The
     constructor accepts an integer address, or a string.

 -- Class: ctypes.c_double
     Represents the C `double' datatype.  The constructor accepts an
     optional float initializer.

 -- Class: ctypes.c_longdouble
     Represents the C `long double' datatype.  The constructor accepts
     an optional float initializer.  On platforms where `sizeof(long
     double) == sizeof(double)' it is an alias to *note c_double: 14e7.

     New in version 2.6.

 -- Class: ctypes.c_float
     Represents the C `float' datatype.  The constructor accepts an
     optional float initializer.

 -- Class: ctypes.c_int
     Represents the C `signed int' datatype.  The constructor accepts an
     optional integer initializer; no overflow checking is done.  On
     platforms where `sizeof(int) == sizeof(long)' it is an alias to
     *note c_long: 14d2.

 -- Class: ctypes.c_int8
     Represents the C 8-bit `signed int' datatype.  Usually an alias for
     *note c_byte: 14de.

 -- Class: ctypes.c_int16
     Represents the C 16-bit `signed int' datatype.  Usually an alias
     for *note c_short: 14e0.

 -- Class: ctypes.c_int32
     Represents the C 32-bit `signed int' datatype.  Usually an alias
     for *note c_int: 14d1.

 -- Class: ctypes.c_int64
     Represents the C 64-bit `signed int' datatype.  Usually an alias
     for *note c_longlong: 14e4.

 -- Class: ctypes.c_long
     Represents the C `signed long' datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_longlong
     Represents the C `signed long long' datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_short
     Represents the C `signed short' datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_size_t
     Represents the C `size_t' datatype.

 -- Class: ctypes.c_ssize_t
     Represents the C `ssize_t' datatype.

     New in version 2.7.

 -- Class: ctypes.c_ubyte
     Represents the C `unsigned char' datatype, it interprets the value
     as small integer.  The constructor accepts an optional integer
     initializer; no overflow checking is done.

 -- Class: ctypes.c_uint
     Represents the C `unsigned int' datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.  On
     platforms where `sizeof(int) == sizeof(long)' it is an alias for
     *note c_ulong: 14e3.

 -- Class: ctypes.c_uint8
     Represents the C 8-bit `unsigned int' datatype.  Usually an alias
     for *note c_ubyte: 14df.

 -- Class: ctypes.c_uint16
     Represents the C 16-bit `unsigned int' datatype.  Usually an alias
     for *note c_ushort: 14e1.

 -- Class: ctypes.c_uint32
     Represents the C 32-bit `unsigned int' datatype.  Usually an alias
     for *note c_uint: 14e2.

 -- Class: ctypes.c_uint64
     Represents the C 64-bit `unsigned int' datatype.  Usually an alias
     for *note c_ulonglong: 14e5.

 -- Class: ctypes.c_ulong
     Represents the C `unsigned long' datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_ulonglong
     Represents the C `unsigned long long' datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_ushort
     Represents the C `unsigned short' datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_void_p
     Represents the C `void *' type.  The value is represented as
     integer.  The constructor accepts an optional integer initializer.

 -- Class: ctypes.c_wchar
     Represents the C `wchar_t' datatype, and interprets the value as a
     single character unicode string.  The constructor accepts an
     optional string initializer, the length of the string must be
     exactly one character.

 -- Class: ctypes.c_wchar_p
     Represents the C `wchar_t *' datatype, which must be a pointer to a
     zero-terminated wide character string.  The constructor accepts an
     integer address, or a string.

 -- Class: ctypes.c_bool
     Represent the C `bool' datatype (more accurately, `_Bool' from
     C99).  Its value can be True or False, and the constructor accepts
     any object that has a truth value.

     New in version 2.6.

 -- Class: ctypes.HRESULT
     Windows only: Represents a `HRESULT' value, which contains success
     or error information for a function or method call.

 -- Class: ctypes.py_object
     Represents the C *note PyObject *: 39f. datatype.  Calling this
     without an argument creates a `NULL' *note PyObject *: 39f.
     pointer.

  The `ctypes.wintypes' module provides quite some other Windows
specific data types, for example `HWND', `WPARAM', or `DWORD'.  Some
useful structures like `MSG' or `RECT' are also defined.


File: python.info,  Node: Structured data types,  Next: Arrays and pointers,  Prev: Fundamental data types<2>,  Up: ctypes reference

5.15.17.30 Structured data types
................................

 -- Class: ctypes.Union (*args, **kw)
     Abstract base class for unions in native byte order.

 -- Class: ctypes.BigEndianStructure (*args, **kw)
     Abstract base class for structures in _big endian_ byte order.

 -- Class: ctypes.LittleEndianStructure (*args, **kw)
     Abstract base class for structures in _little endian_ byte order.

  Structures with non-native byte order cannot contain pointer type
fields, or any other data types containing pointer type fields.

 -- Class: ctypes.Structure (*args, **kw)
     Abstract base class for structures in _native_ byte order.

     Concrete structure and union types must be created by subclassing
     one of these types, and at least define a *note _fields_: 1566.
     class variable. *note ctypes: 78. will create *note descriptor:
     14ff.s which allow reading and writing the fields by direct
     attribute accesses.  These are the

      -- Attribute: _fields_
          A sequence defining the structure fields.  The items must be
          2-tuples or 3-tuples.  The first item is the name of the
          field, the second item specifies the type of the field; it
          can be any ctypes data type.

          For integer type fields like *note c_int: 14d1, a third
          optional item can be given.  It must be a small positive
          integer defining the bit width of the field.

          Field names must be unique within one structure or union.
          This is not checked, only one field can be accessed when
          names are repeated.

          It is possible to define the *note _fields_: 1566. class
          variable _after_ the class statement that defines the
          Structure subclass, this allows to create data types that
          directly or indirectly reference themselves:

              class List(Structure):
                  pass
              List._fields_ = [("pnext", POINTER(List)),
                               ...
                              ]

          The *note _fields_: 1566. class variable must, however, be
          defined before the type is first used (an instance is
          created, `sizeof()' is called on it, and so on).  Later
          assignments to the *note _fields_: 1566. class variable will
          raise an AttributeError.

          Structure and union subclass constructors accept both
          positional and named arguments.  Positional arguments are
          used to initialize the fields in the same order as they
          appear in the *note _fields_: 1566. definition, named
          arguments are used to initialize the fields with the
          corresponding name.

          It is possible to defined sub-subclasses of structure types,
          they inherit the fields of the base class plus the *note
          _fields_: 1566. defined in the sub-subclass, if any.

      -- Attribute: _pack_
          An optional small integer that allows to override the
          alignment of structure fields in the instance.  *note _pack_:
          1567. must already be defined when *note _fields_: 1566. is
          assigned, otherwise it will have no effect.

      -- Attribute: _anonymous_
          An optional sequence that lists the names of unnamed
          (anonymous) fields.  *note _anonymous_: 1568. must be already
          defined when *note _fields_: 1566. is assigned, otherwise it
          will have no effect.

          The fields listed in this variable must be structure or union
          type fields.  *note ctypes: 78. will create descriptors in
          the structure type that allows to access the nested fields
          directly, without the need to create the structure or union
          field.

          Here is an example type (Windows):

              class _U(Union):
                  _fields_ = [("lptdesc", POINTER(TYPEDESC)),
                              ("lpadesc", POINTER(ARRAYDESC)),
                              ("hreftype", HREFTYPE)]

              class TYPEDESC(Structure):
                  _anonymous_ = ("u",)
                  _fields_ = [("u", _U),
                              ("vt", VARTYPE)]

          The `TYPEDESC' structure describes a COM data type, the `vt'
          field specifies which one of the union fields is valid.
          Since the `u' field is defined as anonymous field, it is now
          possible to access the members directly off the TYPEDESC
          instance. `td.lptdesc' and `td.u.lptdesc' are equivalent, but
          the former is faster since it does not need to create a
          temporary union instance:

              td = TYPEDESC()
              td.vt = VT_PTR
              td.lptdesc = POINTER(some_type)
              td.u.lptdesc = POINTER(some_type)



     It is possible to defined sub-subclasses of structures, they
     inherit the fields of the base class.  If the subclass definition
     has a separate *note _fields_: 1566. variable, the fields
     specified in this are appended to the fields of the base class.

     Structure and union constructors accept both positional and keyword
     arguments.  Positional arguments are used to initialize member
     fields in the same order as they are appear in *note _fields_:
     1566.  Keyword arguments in the constructor are interpreted as
     attribute assignments, so they will initialize *note _fields_:
     1566. with the same name, or create new attributes for names not
     present in *note _fields_: 1566.


File: python.info,  Node: Arrays and pointers,  Prev: Structured data types,  Up: ctypes reference

5.15.17.31 Arrays and pointers
..............................

Not yet written - please see the sections *note Pointers: 1508. and
section *note Arrays: 1507. in the tutorial.


File: python.info,  Node: Optional Operating System Services,  Next: Interprocess Communication and Networking,  Prev: Generic Operating System Services,  Up: The Python Standard Library

5.16 Optional Operating System Services
=======================================

The modules described in this chapter provide interfaces to operating
system features that are available on selected operating systems only.
The interfaces are generally modeled after the Unix or C interfaces but
they are available on some other systems as well (e.g. Windows or NT).
Here's an overview:

* Menu:

* select: select --- Waiting for I/O completion. Waiting for I/O completion
* threading: threading --- Higher-level threading interface. Higher-level threading interface
* thread: thread --- Multiple threads of control. Multiple threads of control
* dummy_threading: dummy_threading --- Drop-in replacement for the threading module. Drop-in replacement for the threading module
* dummy_thread: dummy_thread --- Drop-in replacement for the thread module. Drop-in replacement for the thread module
* multiprocessing: multiprocessing --- Process-based "threading" interface. Process-based "threading" interface
* mmap: mmap --- Memory-mapped file support. Memory-mapped file support
* readline: readline --- GNU readline interface. GNU readline interface
* rlcompleter: rlcompleter --- Completion function for GNU readline. Completion function for GNU readline

select --- Waiting for I/O completion

* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects.
* Polling Objects::
* Kqueue Objects::
* Kevent Objects::

threading --- Higher-level threading interface

* Thread Objects::
* Lock Objects::
* RLock Objects::
* Condition Objects::
* Semaphore Objects::
* Event Objects::
* Timer Objects::
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement.
* Importing in threaded code::

Semaphore Objects

* Semaphore Example::

multiprocessing --- Process-based "threading" interface

* Introduction: Introduction<7>.
* Reference::
* Programming guidelines::
* Examples: Examples<7>.

Introduction

* The Process class::
* Exchanging objects between processes::
* Synchronization between processes::
* Sharing state between processes::
* Using a pool of workers::

Reference

* Process and exceptions::
* Pipes and Queues::
* Miscellaneous: Miscellaneous<2>.
* Connection Objects: Connection Objects<2>.
* Synchronization primitives::
* Shared ctypes Objects::
* Managers::
* Proxy Objects::
* Process Pools::
* Listeners and Clients::
* Authentication keys::
* Logging: Logging<2>.
* The multiprocessing.dummy module: The multiprocessing dummy module.

Shared ctypes Objects

* The multiprocessing.sharedctypes module: The multiprocessing sharedctypes module.

Managers

* Namespace objects::
* Customized managers::
* Using a remote manager::

Proxy Objects

* Cleanup: Cleanup<2>.

Listeners and Clients

* Address Formats::

Programming guidelines

* All platforms::
* Windows::

readline --- GNU readline interface

* Example: Example<7>.

rlcompleter --- Completion function for GNU readline

* Completer Objects::


File: python.info,  Node: select --- Waiting for I/O completion,  Next: threading --- Higher-level threading interface,  Up: Optional Operating System Services

5.16.1 `select' -- Waiting for I/O completion
---------------------------------------------

This module provides access to the `select()' and `poll()' functions
available in most operating systems, `epoll()' available on Linux 2.5+
and `kqueue()' available on most BSD.  Note that on Windows, it only
works for sockets; on other operating systems, it also works for other
file types (in particular, on Unix, it works on pipes).  It cannot be
used on regular files to determine whether a file has grown since it
was last read.

  The module defines the following:

 -- Exception: select.error
     The exception raised when an error occurs.  The accompanying value
     is a pair containing the numeric error code from `errno' and the
     corresponding string, as would be printed by the C function
     `perror()'.

 -- Function: select.epoll ([sizehint=-1])
     (Only supported on Linux 2.5.44 and newer.)  Returns an edge
     polling object, which can be used as Edge or Level Triggered
     interface for I/O events; see section *note Edge and Level Trigger
     Polling (epoll) Objects: 1572. below for the methods supported by
     epolling objects.

     New in version 2.6.

 -- Function: select.poll ()
     (Not supported by all operating systems.)  Returns a polling
     object, which supports registering and unregistering file
     descriptors, and then polling them for I/O events; see section
     *note Polling Objects: 1574. below for the methods supported by
     polling objects.

 -- Function: select.kqueue ()
     (Only supported on BSD.)  Returns a kernel queue object; see
     section *note Kqueue Objects: 1576. below for the methods
     supported by kqueue objects.

     New in version 2.6.

 -- Function: select.kevent (ident, filter=KQ_FILTER_READ,
          flags=KQ_EV_ADD, fflags=0, data=0, udata=0)
     (Only supported on BSD.)  Returns a kernel event object; see
     section *note Kevent Objects: 1578. below for the methods
     supported by kevent objects.

     New in version 2.6.

 -- Function: select.select (rlist, wlist, xlist[, timeout])
     This is a straightforward interface to the Unix `select()' system
     call.  The first three arguments are sequences of 'waitable
     objects': either integers representing file descriptors or objects
     with a parameterless method named `fileno()' returning such an
     integer:

        * _rlist_: wait until ready for reading

        * _wlist_: wait until ready for writing

        * _xlist_: wait for an "exceptional condition" (see the manual
          page for what your system considers such a condition)

     Empty sequences are allowed, but acceptance of three empty
     sequences is platform-dependent. (It is known to work on Unix but
     not on Windows.)  The optional _timeout_ argument specifies a
     time-out as a floating point number in seconds.  When the
     _timeout_ argument is omitted the function blocks until at least
     one file descriptor is ready.  A time-out value of zero specifies a
     poll and never blocks.

     The return value is a triple of lists of objects that are ready:
     subsets of the first three arguments.  When the time-out is
     reached without a file descriptor becoming ready, three empty
     lists are returned.

     Among the acceptable object types in the sequences are Python file
     objects (e.g.  `sys.stdin', or objects returned by *note open():
     2d3. or *note os.popen(): 6ed.), socket objects returned by *note
     socket.socket(): 157a.  You may also define a _wrapper_ class
     yourself, as long as it has an appropriate `fileno()' method (that
     really returns a file descriptor, not just a random integer).

          Note: 

          File objects on Windows are not acceptable, but sockets are.
          On Windows, the underlying `select()' function is provided by
          the WinSock library, and does not handle file descriptors
          that don't originate from WinSock.

 -- Attribute: select.PIPE_BUF
     Files reported as ready for writing by *note select(): 14e, *note
     poll(): 1573. or similar interfaces in this module are guaranteed
     to not block on a write of up to *note PIPE_BUF: 157b. bytes.
     This value is guaranteed by POSIX to be at least 512.
     Availability: Unix.

     New in version 2.7.

* Menu:

* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects.
* Polling Objects::
* Kqueue Objects::
* Kevent Objects::


File: python.info,  Node: Edge and Level Trigger Polling epoll Objects,  Next: Polling Objects,  Up: select --- Waiting for I/O completion

5.16.1.1 Edge and Level Trigger Polling (epoll) Objects
.......................................................

     <http://linux.die.net/man/4/epoll>

     _eventmask_

     Constant                    Meaning
     -------------------------------------------------------------------------------- 
     `EPOLLIN'                   Available for read
     `EPOLLOUT'                  Available for write
     `EPOLLPRI'                  Urgent data for read
     `EPOLLERR'                  Error condition happened on the assoc. fd
     `EPOLLHUP'                  Hang up happened on the assoc. fd
     `EPOLLET'                   Set Edge Trigger behavior, the default is Level
                                 Trigger behavior
     `EPOLLONESHOT'              Set one-shot behavior. After one event is pulled
                                 out, the fd is internally disabled
     `EPOLLRDNORM'               Equivalent to `EPOLLIN'
     `EPOLLRDBAND'               Priority data band can be read.
     `EPOLLWRNORM'               Equivalent to `EPOLLOUT'
     `EPOLLWRBAND'               Priority data may be written.
     `EPOLLMSG'                  Ignored.


 -- Method: epoll.close ()
     Close the control file descriptor of the epoll object.

 -- Method: epoll.fileno ()
     Return the file descriptor number of the control fd.

 -- Method: epoll.fromfd (fd)
     Create an epoll object from a given file descriptor.

 -- Method: epoll.register (fd[, eventmask])
     Register a fd descriptor with the epoll object.

          Note: Registering a file descriptor that's already registered
          raises an IOError - contrary to *note Polling Objects:
          1574.'s register.

 -- Method: epoll.modify (fd, eventmask)
     Modify a register file descriptor.

 -- Method: epoll.unregister (fd)
     Remove a registered file descriptor from the epoll object.

 -- Method: epoll.poll ([timeout=-1[, maxevents=-1]])
     Wait for events. timeout in seconds (float)


File: python.info,  Node: Polling Objects,  Next: Kqueue Objects,  Prev: Edge and Level Trigger Polling epoll Objects,  Up: select --- Waiting for I/O completion

5.16.1.2 Polling Objects
........................

The `poll()' system call, supported on most Unix systems, provides
better scalability for network servers that service many, many clients
at the same time. `poll()' scales better because the system call only
requires listing the file descriptors of interest, while `select()'
builds a bitmap, turns on bits for the fds of interest, and then
afterward the whole bitmap has to be linearly scanned again. `select()'
is O(highest file descriptor), while `poll()' is O(number of file
descriptors).

 -- Method: poll.register (fd[, eventmask])
     Register a file descriptor with the polling object.  Future calls
     to the *note poll(): 1573. method will then check whether the file
     descriptor has any pending I/O events.  _fd_ can be either an
     integer, or an object with a `fileno()' method that returns an
     integer.  File objects implement `fileno()', so they can also be
     used as the argument.

     _eventmask_ is an optional bitmask describing the type of events
     you want to check for, and can be a combination of the constants
     `POLLIN', `POLLPRI', and `POLLOUT', described in the table below.
     If not specified, the default value used will check for all 3
     types of events.

     Constant                Meaning
     ----------------------------------------------------------------------- 
     `POLLIN'                There is data to read
     `POLLPRI'               There is urgent data to read
     `POLLOUT'               Ready for output: writing will not block
     `POLLERR'               Error condition of some sort
     `POLLHUP'               Hung up
     `POLLNVAL'              Invalid request: descriptor not open

     Registering a file descriptor that's already registered is not an
     error, and has the same effect as registering the descriptor
     exactly once.

 -- Method: poll.modify (fd, eventmask)
     Modifies an already registered fd. This has the same effect as
     `register(fd, eventmask)'.  Attempting to modify a file descriptor
     that was never registered causes an *note IOError: 1f7. exception
     with errno `ENOENT' to be raised.

     New in version 2.6.

 -- Method: poll.unregister (fd)
     Remove a file descriptor being tracked by a polling object.  Just
     like the *note register(): 1585. method, _fd_ can be an integer or
     an object with a `fileno()' method that returns an integer.

     Attempting to remove a file descriptor that was never registered
     causes a *note KeyError: 202. exception to be raised.

 -- Method: poll.poll ([timeout])
     Polls the set of registered file descriptors, and returns a
     possibly-empty list containing `(fd, event)' 2-tuples for the
     descriptors that have events or errors to report. _fd_ is the file
     descriptor, and _event_ is a bitmask with bits set for the
     reported events for that descriptor -- `POLLIN' for waiting input,
     `POLLOUT' to indicate that the descriptor can be written to, and
     so forth. An empty list indicates that the call timed out and no
     file descriptors had any events to report. If _timeout_ is given,
     it specifies the length of time in milliseconds which the system
     will wait for events before returning. If _timeout_ is omitted,
     negative, or *note None: 393, the call will block until there is
     an event for this poll object.


File: python.info,  Node: Kqueue Objects,  Next: Kevent Objects,  Prev: Polling Objects,  Up: select --- Waiting for I/O completion

5.16.1.3 Kqueue Objects
.......................

 -- Method: kqueue.close ()
     Close the control file descriptor of the kqueue object.

 -- Method: kqueue.fileno ()
     Return the file descriptor number of the control fd.

 -- Method: kqueue.fromfd (fd)
     Create a kqueue object from a given file descriptor.

 -- Method: kqueue.control (changelist, max_events[, timeout=None]) ->
          eventlist
     Low level interface to kevent

        - changelist must be an iterable of kevent object or None

        - max_events must be 0 or a positive integer

        - timeout in seconds (floats possible)


File: python.info,  Node: Kevent Objects,  Prev: Kqueue Objects,  Up: select --- Waiting for I/O completion

5.16.1.4 Kevent Objects
.......................

<http://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2>

 -- Attribute: kevent.ident
     Value used to identify the event. The interpretation depends on
     the filter but it's usually the file descriptor. In the
     constructor ident can either be an int or an object with a
     fileno() function. kevent stores the integer internally.

 -- Attribute: kevent.filter
     Name of the kernel filter.

     Constant                        Meaning
     ---------------------------------------------------------------------------------- 
     `KQ_FILTER_READ'                Takes a descriptor and returns whenever there is
                                     data available to read
     `KQ_FILTER_WRITE'               Takes a descriptor and returns whenever there is
                                     data available to write
     `KQ_FILTER_AIO'                 AIO requests
     `KQ_FILTER_VNODE'               Returns when one or more of the requested events
                                     watched in _fflag_ occurs
     `KQ_FILTER_PROC'                Watch for events on a process id
     `KQ_FILTER_NETDEV'              Watch for events on a network device [not
                                     available on Mac OS X]
     `KQ_FILTER_SIGNAL'              Returns whenever the watched signal is delivered
                                     to the process
     `KQ_FILTER_TIMER'               Establishes an arbitrary timer


 -- Attribute: kevent.flags
     Filter action.

     Constant                        Meaning
     ---------------------------------------------------------------------------------- 
     `KQ_EV_ADD'                     Adds or modifies an event
     `KQ_EV_DELETE'                  Removes an event from the queue
     `KQ_EV_ENABLE'                  Permitscontrol() to returns the event
     `KQ_EV_DISABLE'                 Disablesevent
     `KQ_EV_ONESHOT'                 Removes event after first occurrence
     `KQ_EV_CLEAR'                   Reset the state after an event is retrieved
     `KQ_EV_SYSFLAGS'                internal event
     `KQ_EV_FLAG1'                   internal event
     `KQ_EV_EOF'                     Filter specific EOF condition
     `KQ_EV_ERROR'                   See return values


 -- Attribute: kevent.fflags
     Filter specific flags.

     `KQ_FILTER_READ' and  `KQ_FILTER_WRITE' filter flags:

     Constant                         Meaning
     ---------------------------------------------------------------------------------- 
     `KQ_NOTE_LOWAT'                  low water mark of a socket buffer

     `KQ_FILTER_VNODE' filter flags:

     Constant                         Meaning
     ---------------------------------------------------------------------------------- 
     `KQ_NOTE_DELETE'                 _unlink()_ was called
     `KQ_NOTE_WRITE'                  a write occurred
     `KQ_NOTE_EXTEND'                 the file was extended
     `KQ_NOTE_ATTRIB'                 an attribute was changed
     `KQ_NOTE_LINK'                   the link count has changed
     `KQ_NOTE_RENAME'                 the file was renamed
     `KQ_NOTE_REVOKE'                 access to the file was revoked

     `KQ_FILTER_PROC' filter flags:

     Constant                         Meaning
     ---------------------------------------------------------------------------------- 
     `KQ_NOTE_EXIT'                   the process has exited
     `KQ_NOTE_FORK'                   the process has called _fork()_
     `KQ_NOTE_EXEC'                   the process has executed a new process
     `KQ_NOTE_PCTRLMASK'              internal filter flag
     `KQ_NOTE_PDATAMASK'              internal filter flag
     `KQ_NOTE_TRACK'                  follow a process across _fork()_
     `KQ_NOTE_CHILD'                  returned on the child process for _NOTE_TRACK_
     `KQ_NOTE_TRACKERR'               unable to attach to a child

     `KQ_FILTER_NETDEV' filter flags (not available on Mac OS X):

     Constant                         Meaning
     ---------------------------------------------------------------------------------- 
     `KQ_NOTE_LINKUP'                 link is up
     `KQ_NOTE_LINKDOWN'               link is down
     `KQ_NOTE_LINKINV'                link state is invalid


 -- Attribute: kevent.data
     Filter specific data.

 -- Attribute: kevent.udata
     User defined value.


File: python.info,  Node: threading --- Higher-level threading interface,  Next: thread --- Multiple threads of control,  Prev: select --- Waiting for I/O completion,  Up: Optional Operating System Services

5.16.2 `threading' -- Higher-level threading interface
------------------------------------------------------

*Source code:* Lib/threading.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  This module constructs higher-level threading interfaces on top of
the  lower level *note thread: 178. module.  See also the *note mutex:
11f. and *note Queue: 140. modules.

  The *note dummy_threading: b9. module is provided for situations where
*note threading: 179. cannot be used because *note thread: 178. is
missing.

     Note: Starting with Python 2.6, this module provides PEP 8(2)
     compliant aliases and properties to replace the `camelCase' names
     that were inspired by Java's threading API. This updated API is
     compatible with that of the *note multiprocessing: 119. module.
     However, no schedule has been set for the deprecation of the
     `camelCase' names and they remain fully supported in both Python
     2.x and 3.x.

     Note: Starting with Python 2.5, several Thread methods raise *note
     RuntimeError: 394.  instead of *note AssertionError: 7f7. if
     called erroneously.

*CPython implementation detail:* In CPython, due to the *note Global
Interpreter Lock: 1523, only one thread can execute Python code at once
(even though certain performance-oriented libraries might overcome this
limitation).  If you want your application to make better use of the
computational resources of multi-core machines, you are advised to use
*note multiprocessing: 119. However, threading is still an appropriate
model if you want to run multiple I/O-bound tasks simultaneously.

  This module defines the following functions and objects:

 -- Function: threading.active_count ()
 -- Function: threading.activeCount ()
     Return the number of *note Thread: 1599. objects currently alive.
     The returned count is equal to the length of the list returned by
     *note enumerate(): 159a.

 -- Function: threading.Condition ()
     A factory function that returns a new condition variable object. A
     condition variable allows one or more threads to wait until they
     are notified by another thread.

     See *note Condition Objects: 159b.

 -- Function: threading.current_thread ()
 -- Function: threading.currentThread ()
     Return the current *note Thread: 1599. object, corresponding to
     the caller's thread of control.  If the caller's thread of control
     was not created through the *note threading: 179. module, a dummy
     thread object with limited functionality is returned.

 -- Function: threading.enumerate ()
     Return a list of all *note Thread: 1599. objects currently alive.
     The list includes daemonic threads, dummy thread objects created by
     *note current_thread(): 159c, and the main thread.  It excludes
     terminated threads and threads that have not yet been started.

 -- Function: threading.Event ()
     A factory function that returns a new event object.  An event
     manages a flag that can be set to true with the *note set(): 159e.
     method and reset to false with the `clear()' method.  The `wait()'
     method blocks until the flag is true.

     See *note Event Objects: 159f.

 -- Class: threading.local
     A class that represents thread-local data.  Thread-local data are
     data whose values are thread specific.  To manage thread-local
     data, just create an instance of *note local: 15a0. (or a
     subclass) and store attributes on it:

         mydata = threading.local()
         mydata.x = 1

     The instance's values will be different for separate threads.

     For more details and extensive examples, see the documentation
     string of the `_threading_local' module.

     New in version 2.4.

 -- Function: threading.Lock ()
     A factory function that returns a new primitive lock object.  Once
     a thread has acquired it, subsequent attempts to acquire it block,
     until it is released; any thread may release it.

     See *note Lock Objects: 15a2.

 -- Function: threading.RLock ()
     A factory function that returns a new reentrant lock object. A
     reentrant lock must be released by the thread that acquired it.
     Once a thread has acquired a reentrant lock, the same thread may
     acquire it again without blocking; the thread must release it once
     for each time it has acquired it.

     See *note RLock Objects: 15a4.

 -- Function: threading.Semaphore ([value])
     A factory function that returns a new semaphore object.  A
     semaphore manages a counter representing the number of `release()'
     calls minus the number of `acquire()' calls, plus an initial
     value. The `acquire()' method blocks if necessary until it can
     return without making the counter negative.  If not given, _value_
     defaults to 1.

     See *note Semaphore Objects: 15a5.

 -- Function: threading.BoundedSemaphore ([value])
     A factory function that returns a new bounded semaphore object.  A
     bounded semaphore checks to make sure its current value doesn't
     exceed its initial value.  If it does, *note ValueError: 233. is
     raised. In most situations semaphores are used to guard resources
     with limited capacity.  If the semaphore is released too many
     times it's a sign of a bug.  If not given, _value_ defaults to 1.

 -- Class: threading.Thread
     A class that represents a thread of control.  This class can be
     safely subclassed in a limited fashion.

     See *note Thread Objects: 15a7.

 -- Class: threading.Timer
     A thread that executes a function after a specified interval has
     passed.

     See *note Timer Objects: 15a8.

 -- Function: threading.settrace (func)
     Set a trace function for all threads started from the *note
     threading: 179. module.  The _func_ will be passed to  *note
     sys.settrace(): 497. for each thread, before its `run()' method is
     called.

     New in version 2.3.

 -- Function: threading.setprofile (func)
     Set a profile function for all threads started from the *note
     threading: 179. module.  The _func_ will be passed to  *note
     sys.setprofile(): 496. for each thread, before its `run()' method
     is called.

     New in version 2.3.

 -- Function: threading.stack_size ([size])
     Return the thread stack size used when creating new threads.  The
     optional _size_ argument specifies the stack size to be used for
     subsequently created threads, and must be 0 (use platform or
     configured default) or a positive integer value of at least 32,768
     (32kB). If changing the thread stack size is unsupported, a
     `ThreadError' is raised.  If the specified stack size is invalid,
     a *note ValueError: 233. is raised and the stack size is
     unmodified.  32kB is currently the minimum supported stack size
     value to guarantee sufficient stack space for the interpreter
     itself.  Note that some platforms may have particular restrictions
     on values for the stack size, such as requiring a minimum stack
     size > 32kB or requiring allocation in multiples of the system
     memory page size - platform documentation should be referred to
     for more information (4kB pages are common; using multiples of
     4096 for the stack size is the suggested approach in the absence
     of more specific information).  Availability: Windows, systems
     with POSIX threads.

     New in version 2.5.

  Detailed interfaces for the objects are documented below.

  The design of this module is loosely based on Java's threading model.
However, where Java makes locks and condition variables basic behavior
of every object, they are separate objects in Python.  Python's *note
Thread: 1599. class supports a subset of the behavior of Java's Thread
class; currently, there are no priorities, no thread groups, and
threads cannot be destroyed, stopped, suspended, resumed, or
interrupted.  The static methods of Java's Thread class, when
implemented, are mapped to module-level functions.

  All of the methods described below are executed atomically.

* Menu:

* Thread Objects::
* Lock Objects::
* RLock Objects::
* Condition Objects::
* Semaphore Objects::
* Event Objects::
* Timer Objects::
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement.
* Importing in threaded code::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/threading.py

  (2) http://www.python.org/dev/peps/pep-0008


File: python.info,  Node: Thread Objects,  Next: Lock Objects,  Up: threading --- Higher-level threading interface

5.16.2.1 Thread Objects
.......................

This class represents an activity that is run in a separate thread of
control.  There are two ways to specify the activity: by passing a
callable object to the constructor, or by overriding the `run()' method
in a subclass.  No other methods (except for the constructor) should be
overridden in a subclass.  In other words,  _only_  override the *note
__init__(): 375. and `run()' methods of this class.

  Once a thread object is created, its activity must be started by
calling the thread's `start()' method.  This invokes the `run()' method
in a separate thread of control.

  Once the thread's activity is started, the thread is considered
'alive'. It stops being alive when its `run()' method terminates -
either normally, or by raising an unhandled exception.  The
`is_alive()' method tests whether the thread is alive.

  Other threads can call a thread's `join()' method.  This blocks the
calling thread until the thread whose `join()' method is called is
terminated.

  A thread has a name.  The name can be passed to the constructor, and
read or changed through the `name' attribute.

  A thread can be flagged as a "daemon thread".  The significance of
this flag is that the entire Python program exits when only daemon
threads are left.  The initial value is inherited from the creating
thread.  The flag can be set through the `daemon' property.

     Note: Daemon threads are abruptly stopped at shutdown.  Their
     resources (such as open files, database transactions, etc.) may
     not be released properly.  If you want your threads to stop
     gracefully, make them non-daemonic and use a suitable signalling
     mechanism such as an *note Event: 266.

  There is a "main thread" object; this corresponds to the initial
thread of control in the Python program.  It is not a daemon thread.

  There is the possibility that "dummy thread objects" are created.
These are thread objects corresponding to "alien threads", which are
threads of control started outside the threading module, such as
directly from C code.  Dummy thread objects have limited functionality;
they are always considered alive and daemonic, and cannot be
`join()'ed.  They are never deleted, since it is impossible to detect
the termination of alien threads.

 -- Class: threading.Thread (group=None, target=None, name=None,
          args=(), kwargs={})
     This constructor should always be called with keyword arguments.
     Arguments are:

     _group_ should be `None'; reserved for future extension when a
     `ThreadGroup' class is implemented.

     _target_ is the callable object to be invoked by the *note run():
     15ad. method.  Defaults to `None', meaning nothing is called.

     _name_ is the thread name.  By default, a unique name is
     constructed of the form "Thread-_N_" where _N_ is a small decimal
     number.

     _args_ is the argument tuple for the target invocation.  Defaults
     to `()'.

     _kwargs_ is a dictionary of keyword arguments for the target
     invocation.  Defaults to `{}'.

     If the subclass overrides the constructor, it must make sure to
     invoke the base class constructor (`Thread.__init__()') before
     doing anything else to the thread.

      -- Method: start ()
          Start the thread's activity.

          It must be called at most once per thread object.  It
          arranges for the object's *note run(): 15ad. method to be
          invoked in a separate thread of control.

          This method will raise a *note RuntimeError: 394. if called
          more than once on the same thread object.

      -- Method: run ()
          Method representing the thread's activity.

          You may override this method in a subclass.  The standard
          *note run(): 15ad.  method invokes the callable object passed
          to the object's constructor as the _target_ argument, if any,
          with sequential and keyword arguments taken from the _args_
          and _kwargs_ arguments, respectively.

      -- Method: join ([timeout])
          Wait until the thread terminates. This blocks the calling
          thread until the thread whose *note join(): 15af. method is
          called terminates - either normally or through an unhandled
          exception - or until the optional timeout occurs.

          When the _timeout_ argument is present and not `None', it
          should be a floating point number specifying a timeout for
          the operation in seconds (or fractions thereof). As *note
          join(): 15af. always returns `None', you must call *note
          isAlive(): 15b0. after *note join(): 15af. to decide whether
          a timeout happened - if the thread is still alive, the *note
          join(): 15af. call timed out.

          When the _timeout_ argument is not present or `None', the
          operation will block until the thread terminates.

          A thread can be *note join(): 15af.ed many times.

          *note join(): 15af. raises a *note RuntimeError: 394. if an
          attempt is made to join the current thread as that would
          cause a deadlock. It is also an error to *note join(): 15af.
          a thread before it has been started and attempts to do so
          raises the same exception.

      -- Method: getName ()
      -- Method: setName ()
          Old API for *note name: 15b3.

      -- Attribute: name
          A string used for identification purposes only. It has no
          semantics.  Multiple threads may be given the same name.  The
          initial name is set by the constructor.

      -- Attribute: ident
          The 'thread identifier' of this thread or `None' if the
          thread has not been started.  This is a nonzero integer.  See
          the *note thread.get_ident(): 15b5. function.  Thread
          identifiers may be recycled when a thread exits and another
          thread is created.  The identifier is available even after
          the thread has exited.

          New in version 2.6.

      -- Method: is_alive ()
      -- Method: isAlive ()
          Return whether the thread is alive.

          This method returns `True' just before the *note run(): 15ad.
          method starts until just after the *note run(): 15ad. method
          terminates.  The module function *note enumerate(): 159a.
          returns a list of all alive threads.

      -- Method: isDaemon ()
      -- Method: setDaemon ()
          Old API for *note daemon: 15b9.

      -- Attribute: daemon
          A boolean value indicating whether this thread is a daemon
          thread (True) or not (False).  This must be set before *note
          start(): 15ae. is called, otherwise *note RuntimeError: 394.
          is raised.  Its initial value is inherited from the creating
          thread; the main thread is not a daemon thread and therefore
          all threads created in the main thread default to *note
          daemon: 15b9.  = `False'.

          The entire Python program exits when no alive non-daemon
          threads are left.


File: python.info,  Node: Lock Objects,  Next: RLock Objects,  Prev: Thread Objects,  Up: threading --- Higher-level threading interface

5.16.2.2 Lock Objects
.....................

A primitive lock is a synchronization primitive that is not owned by a
particular thread when locked.  In Python, it is currently the lowest
level synchronization primitive available, implemented directly by the
*note thread: 178.  extension module.

  A primitive lock is in one of two states, "locked" or "unlocked". It
is created in the unlocked state.  It has two basic methods,
`acquire()' and `release()'.  When the state is unlocked, `acquire()'
changes the state to locked and returns immediately.  When the state is
locked, `acquire()' blocks until a call to `release()' in another
thread changes it to unlocked, then the `acquire()' call resets it to
locked and returns.  The `release()' method should only be called in
the locked state; it changes the state to unlocked and returns
immediately. If an attempt is made to release an unlocked lock, a *note
RuntimeError: 394. will be raised.

  When more than one thread is blocked in `acquire()' waiting for the
state to turn to unlocked, only one thread proceeds when a `release()'
call resets the state to unlocked; which one of the waiting threads
proceeds is not defined, and may vary across implementations.

  All methods are executed atomically.

 -- Method: Lock.acquire ([blocking])
     Acquire a lock, blocking or non-blocking.

     When invoked with the _blocking_ argument set to `True' (the
     default), block until the lock is unlocked, then set it to locked
     and return `True'.

     When invoked with the _blocking_ argument set to `False', do not
     block.  If a call with _blocking_ set to `True' would block,
     return `False' immediately; otherwise, set the lock to locked and
     return `True'.

 -- Method: Lock.release ()
     Release a lock.

     When the lock is locked, reset it to unlocked, and return.  If any
     other threads are blocked waiting for the lock to become unlocked,
     allow exactly one of them to proceed.

     When invoked on an unlocked lock, a `ThreadError' is raised.

     There is no return value.


File: python.info,  Node: RLock Objects,  Next: Condition Objects,  Prev: Lock Objects,  Up: threading --- Higher-level threading interface

5.16.2.3 RLock Objects
......................

A reentrant lock is a synchronization primitive that may be acquired
multiple times by the same thread.  Internally, it uses the concepts of
"owning thread" and "recursion level" in addition to the
locked/unlocked state used by primitive locks.  In the locked state,
some thread owns the lock; in the unlocked state, no thread owns it.

  To lock the lock, a thread calls its `acquire()' method; this returns
once the thread owns the lock.  To unlock the lock, a thread calls its
`release()' method. `acquire()'/`release()' call pairs may be nested;
only the final `release()' (the `release()' of the outermost pair)
resets the lock to unlocked and allows another thread blocked in
`acquire()' to proceed.

 -- Method: RLock.acquire ([blocking=1])
     Acquire a lock, blocking or non-blocking.

     When invoked without arguments: if this thread already owns the
     lock, increment the recursion level by one, and return
     immediately.  Otherwise, if another thread owns the lock, block
     until the lock is unlocked.  Once the lock is unlocked (not owned
     by any thread), then grab ownership, set the recursion level to
     one, and return.  If more than one thread is blocked waiting until
     the lock is unlocked, only one at a time will be able to grab
     ownership of the lock.  There is no return value in this case.

     When invoked with the _blocking_ argument set to true, do the same
     thing as when called without arguments, and return true.

     When invoked with the _blocking_ argument set to false, do not
     block.  If a call without an argument would block, return false
     immediately; otherwise, do the same thing as when called without
     arguments, and return true.

 -- Method: RLock.release ()
     Release a lock, decrementing the recursion level.  If after the
     decrement it is zero, reset the lock to unlocked (not owned by any
     thread), and if any other threads are blocked waiting for the lock
     to become unlocked, allow exactly one of them to proceed.  If
     after the decrement the recursion level is still nonzero, the lock
     remains locked and owned by the calling thread.

     Only call this method when the calling thread owns the lock. A
     *note RuntimeError: 394. is raised if this method is called when
     the lock is unlocked.

     There is no return value.


File: python.info,  Node: Condition Objects,  Next: Semaphore Objects,  Prev: RLock Objects,  Up: threading --- Higher-level threading interface

5.16.2.4 Condition Objects
..........................

A condition variable is always associated with some kind of lock; this
can be passed in or one will be created by default.  (Passing one in is
useful when several condition variables must share the same lock.)

  A condition variable has `acquire()' and `release()' methods that call
the corresponding methods of the associated lock. It also has a `wait()'
method, and `notify()' and `notifyAll()' methods.  These three must only
be called when the calling thread has acquired the lock, otherwise a
*note RuntimeError: 394. is raised.

  The `wait()' method releases the lock, and then blocks until it is
awakened by a `notify()' or `notifyAll()' call for the same condition
variable in another thread.  Once awakened, it re-acquires the lock and
returns.  It is also possible to specify a timeout.

  The `notify()' method wakes up one of the threads waiting for the
condition variable, if any are waiting.  The `notifyAll()' method wakes
up all threads waiting for the condition variable.

  Note: the `notify()' and `notifyAll()' methods don't release the lock;
this means that the thread or threads awakened will not return from
their `wait()' call immediately, but only when the thread that called
`notify()' or `notifyAll()' finally relinquishes ownership of the lock.

  Tip: the typical programming style using condition variables uses the
lock to synchronize access to some shared state; threads that are
interested in a particular change of state call `wait()' repeatedly
until they see the desired state, while threads that modify the state
call `notify()' or `notifyAll()' when they change the state in such a
way that it could possibly be a desired state for one of the waiters.
For example, the following code is a generic producer-consumer
situation with unlimited buffer capacity:

    # Consume one item
    cv.acquire()
    while not an_item_is_available():
        cv.wait()
    get_an_available_item()
    cv.release()

    # Produce one item
    cv.acquire()
    make_an_item_available()
    cv.notify()
    cv.release()

To choose between `notify()' and `notifyAll()', consider whether one
state change can be interesting for only one or several waiting
threads.  E.g.  in a typical producer-consumer situation, adding one
item to the buffer only needs to wake up one consumer thread.

 -- Class: threading.Condition ([lock])
     If the _lock_ argument is given and not `None', it must be a *note
     Lock: 15a1.  or *note RLock: 15a3. object, and it is used as the
     underlying lock.  Otherwise, a new *note RLock: 15a3. object is
     created and used as the underlying lock.

      -- Method: acquire (*args)
          Acquire the underlying lock. This method calls the
          corresponding method on the underlying lock; the return value
          is whatever that method returns.

      -- Method: release ()
          Release the underlying lock. This method calls the
          corresponding method on the underlying lock; there is no
          return value.

      -- Method: wait ([timeout])
          Wait until notified or until a timeout occurs. If the calling
          thread has not acquired the lock when this method is called,
          a *note RuntimeError: 394. is raised.

          This method releases the underlying lock, and then blocks
          until it is awakened by a *note notify(): 15c5. or *note
          notifyAll(): 15c6. call for the same condition variable in
          another thread, or until the optional timeout occurs.  Once
          awakened or timed out, it re-acquires the lock and returns.

          When the _timeout_ argument is present and not `None', it
          should be a floating point number specifying a timeout for
          the operation in seconds (or fractions thereof).

          When the underlying lock is an *note RLock: 15a3, it is not
          released using its *note release(): 15c3. method, since this
          may not actually unlock the lock when it was acquired
          multiple times recursively.  Instead, an internal interface
          of the *note RLock: 15a3. class is used, which really unlocks
          it even when it has been recursively acquired several times.
          Another internal interface is then used to restore the
          recursion level when the lock is reacquired.

      -- Method: notify (n=1)
          By default, wake up one thread waiting on this condition, if
          any.  If the calling thread has not acquired the lock when
          this method is called, a *note RuntimeError: 394. is raised.

          This method wakes up at most _n_ of the threads waiting for
          the condition variable; it is a no-op if no threads are
          waiting.

          The current implementation wakes up exactly _n_ threads, if
          at least _n_ threads are waiting.  However, it's not safe to
          rely on this behavior.  A future, optimized implementation
          may occasionally wake up more than _n_ threads.

          Note: an awakened thread does not actually return from its
          *note wait(): 15c4.  call until it can reacquire the lock.
          Since *note notify(): 15c5. does not release the lock, its
          caller should.

      -- Method: notify_all ()
      -- Method: notifyAll ()
          Wake up all threads waiting on this condition.  This method
          acts like *note notify(): 15c5, but wakes up all waiting
          threads instead of one. If the calling thread has not
          acquired the lock when this method is called, a *note
          RuntimeError: 394. is raised.


File: python.info,  Node: Semaphore Objects,  Next: Event Objects,  Prev: Condition Objects,  Up: threading --- Higher-level threading interface

5.16.2.5 Semaphore Objects
..........................

This is one of the oldest synchronization primitives in the history of
computer science, invented by the early Dutch computer scientist Edsger
W. Dijkstra (he used `P()' and `V()' instead of `acquire()' and
`release()').

  A semaphore manages an internal counter which is decremented by each
`acquire()' call and incremented by each `release()' call.  The counter
can never go below zero; when `acquire()' finds that it is zero, it
blocks, waiting until some other thread calls `release()'.

 -- Class: threading.Semaphore ([value])
     The optional argument gives the initial _value_ for the internal
     counter; it defaults to `1'. If the _value_ given is less than 0,
     *note ValueError: 233. is raised.

      -- Method: acquire ([blocking])
          Acquire a semaphore.

          When invoked without arguments: if the internal counter is
          larger than zero on entry, decrement it by one and return
          immediately.  If it is zero on entry, block, waiting until
          some other thread has called *note release(): 15cb. to make
          it larger than zero.  This is done with proper interlocking
          so that if multiple *note acquire(): 15ca. calls are blocked,
          *note release(): 15cb. will wake exactly one of them up.  The
          implementation may pick one at random, so the order in which
          blocked threads are awakened should not be relied on.  There
          is no return value in this case.

          When invoked with _blocking_ set to true, do the same thing
          as when called without arguments, and return true.

          When invoked with _blocking_ set to false, do not block.  If
          a call without an argument would block, return false
          immediately; otherwise, do the same thing as when called
          without arguments, and return true.

      -- Method: release ()
          Release a semaphore, incrementing the internal counter by
          one.  When it was zero on entry and another thread is waiting
          for it to become larger than zero again, wake up that thread.

* Menu:

* Semaphore Example::


File: python.info,  Node: Semaphore Example,  Up: Semaphore Objects

5.16.2.6 `Semaphore' Example
............................

Semaphores are often used to guard resources with limited capacity, for
example, a database server.  In any situation where the size of the
resource is fixed, you should use a bounded semaphore.  Before spawning
any worker threads, your main thread would initialize the semaphore:

    maxconnections = 5
    ...
    pool_sema = BoundedSemaphore(value=maxconnections)

Once spawned, worker threads call the semaphore's acquire and release
methods when they need to connect to the server:

    pool_sema.acquire()
    conn = connectdb()
    ... use connection ...
    conn.close()
    pool_sema.release()

The use of a bounded semaphore reduces the chance that a programming
error which causes the semaphore to be released more than it's acquired
will go undetected.


File: python.info,  Node: Event Objects,  Next: Timer Objects,  Prev: Semaphore Objects,  Up: threading --- Higher-level threading interface

5.16.2.7 Event Objects
......................

This is one of the simplest mechanisms for communication between
threads: one thread signals an event and other threads wait for it.

  An event object manages an internal flag that can be set to true with
the *note set(): 159e. method and reset to false with the `clear()'
method.  The `wait()' method blocks until the flag is true.

 -- Class: threading.Event
     The internal flag is initially false.

      -- Method: is_set ()
      -- Method: isSet ()
          Return true if and only if the internal flag is true.

          Changed in version 2.6: The `is_set()' syntax is new.

      -- Method: set ()
          Set the internal flag to true. All threads waiting for it to
          become true are awakened. Threads that call *note wait():
          265. once the flag is true will not block at all.

      -- Method: clear ()
          Reset the internal flag to false. Subsequently, threads
          calling *note wait(): 265. will block until *note set():
          159e. is called to set the internal flag to true again.

      -- Method: wait ([timeout])
          Block until the internal flag is true.  If the internal flag
          is true on entry, return immediately.  Otherwise, block until
          another thread calls *note set(): 159e. to set the flag to
          true, or until the optional timeout occurs.

          When the timeout argument is present and not `None', it
          should be a floating point number specifying a timeout for
          the operation in seconds (or fractions thereof).

          This method returns the internal flag on exit, so it will
          always return `True' except if a timeout is given and the
          operation times out.

          Changed in version 2.7: Previously, the method always
          returned `None'.


File: python.info,  Node: Timer Objects,  Next: Using locks conditions and semaphores in the with statement,  Prev: Event Objects,  Up: threading --- Higher-level threading interface

5.16.2.8 Timer Objects
......................

This class represents an action that should be run only after a certain
amount of time has passed -- a timer.  *note Timer: ba8. is a subclass
of *note Thread: 1599.  and as such also functions as an example of
creating custom threads.

  Timers are started, as with threads, by calling their `start()'
method.  The timer can be stopped (before its action has begun) by
calling the `cancel()' method.  The interval the timer will wait before
executing its action may not be exactly the same as the interval
specified by the user.

  For example:

    def hello():
        print "hello, world"

    t = Timer(30.0, hello)
    t.start() # after 30 seconds, "hello, world" will be printed


 -- Class: threading.Timer (interval, function, args=[], kwargs={})
     Create a timer that will run _function_ with arguments _args_ and
     keyword arguments _kwargs_, after _interval_ seconds have passed.

      -- Method: cancel ()
          Stop the timer, and cancel the execution of the timer's
          action.  This will only work if the timer is still in its
          waiting stage.


File: python.info,  Node: Using locks conditions and semaphores in the with statement,  Next: Importing in threaded code,  Prev: Timer Objects,  Up: threading --- Higher-level threading interface

5.16.2.9 Using locks, conditions, and semaphores in the `with' statement
........................................................................

All of the objects provided by this module that have `acquire()' and
`release()' methods can be used as context managers for a *note with:
1bd.  statement.  The `acquire()' method will be called when the block
is entered, and `release()' will be called when the block is exited.

  Currently, *note Lock: 15a1, *note RLock: 15a3, *note Condition: 15c1,
*note Semaphore: 15c9, and *note BoundedSemaphore: 15a6. objects may be
used as *note with: 1bd. statement context managers.  For example:

    import threading

    some_rlock = threading.RLock()

    with some_rlock:
        print "some_rlock is locked while this executes"



File: python.info,  Node: Importing in threaded code,  Prev: Using locks conditions and semaphores in the with statement,  Up: threading --- Higher-level threading interface

5.16.2.10 Importing in threaded code
....................................

While the import machinery is thread-safe, there are two key
restrictions on threaded imports due to inherent limitations in the way
that thread-safety is provided:

   * Firstly, other than in the main module, an import should not have
     the side effect of spawning a new thread and then waiting for that
     thread in any way. Failing to abide by this restriction can lead
     to a deadlock if the spawned thread directly or indirectly
     attempts to import a module.

   * Secondly, all import attempts must be completed before the
     interpreter starts shutting itself down. This can be most easily
     achieved by only performing imports from non-daemon threads
     created through the threading module. Daemon threads and threads
     created directly with the thread module will require some other
     form of synchronization to ensure they do not attempt imports
     after system shutdown has commenced. Failure to abide by this
     restriction will lead to intermittent exceptions and crashes
     during interpreter shutdown (as the late imports attempt to access
     machinery which is no longer in a valid state).



Local Variables:
coding: utf-8
End:
