This is
/home/melpa/melpa/working/python-info-20130916.1420/python.info,
produced by makeinfo version 4.13 from
/home/melpa/melpa/working/python-info/python.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.5, September 16, 2013

     Georg Brandl

     Copyright (C) 1990-2013, Python Software Foundation


File: python.info,  Node: PEP 3110 Exception-Handling Changes,  Next: PEP 3112 Byte Literals,  Prev: PEP 3105 print As a Function,  Up: What's New in Python 2 6

1.2.9 PEP 3110: Exception-Handling Changes
------------------------------------------

One error that Python programmers occasionally make is writing the
following code:

    try:
        ...
    except TypeError, ValueError:  # Wrong!
        ...

The author is probably trying to catch both *note TypeError: 215. and
*note ValueError: 233. exceptions, but this code actually does something
different: it will catch *note TypeError: 215. and bind the resulting
exception object to the local name `"ValueError"'.  The *note
ValueError: 233. exception will not be caught at all.  The correct code
specifies a tuple of exceptions:

    try:
        ...
    except (TypeError, ValueError):
        ...

This error happens because the use of the comma here is ambiguous: does
it indicate two different nodes in the parse tree, or a single node
that's a tuple?

  Python 3.0 makes this unambiguous by replacing the comma with the word
"as".  To catch an exception and store the exception object in the
variable `exc', you must write:

    try:
        ...
    except TypeError as exc:
        ...

Python 3.0 will only support the use of "as", and therefore interprets
the first example as catching two different exceptions.  Python 2.6
supports both the comma and "as", so existing code will continue to
work.  We therefore suggest using "as" when writing new Python code
that will only be executed with 2.6.

See also
........

PEP 3110(1) - Catching Exceptions in Python 3000
     PEP written and implemented by Collin Winter.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3110


File: python.info,  Node: PEP 3112 Byte Literals,  Next: PEP 3116 New I/O Library,  Prev: PEP 3110 Exception-Handling Changes,  Up: What's New in Python 2 6

1.2.10 PEP 3112: Byte Literals
------------------------------

Python 3.0 adopts Unicode as the language's fundamental string type and
denotes 8-bit literals differently, either as `b'string'' or using a
`bytes' constructor.  For future compatibility, Python 2.6 adds `bytes'
as a synonym for the *note str: 1e7. type, and it also supports the
`b''' notation.

  The 2.6 *note str: 1e7. differs from 3.0's `bytes' type in various
ways; most notably, the constructor is completely different.  In 3.0,
`bytes([65, 66, 67])' is 3 elements long, containing the bytes
representing `ABC'; in 2.6, `bytes([65, 66, 67])' returns the 12-byte
string representing the *note str(): 1e7. of the list.

  The primary use of `bytes' in 2.6 will be to write tests of object
type such as `isinstance(x, bytes)'.  This will help the 2to3
converter, which can't tell whether 2.x code intends strings to contain
either characters or 8-bit bytes; you can now use either `bytes' or
*note str: 1e7. to represent your intention exactly, and the resulting
code will also be correct in Python 3.0.

  There's also a `__future__' import that causes all string literals to
become Unicode strings.  This means that `\u' escape sequences can be
used to include Unicode characters:

    from __future__ import unicode_literals

    s = ('\u751f\u3080\u304e\u3000\u751f\u3054'
         '\u3081\u3000\u751f\u305f\u307e\u3054')

    print len(s)               # 12 Unicode characters

At the C level, Python 3.0 will rename the existing 8-bit string type,
called *note PyStringObject: 309. in Python 2.x, to `PyBytesObject'.
Python 2.6 uses `#define' to support using the names `PyBytesObject()',
`PyBytes_Check()', `PyBytes_FromStringAndSize()', and all the other
functions and macros used with strings.

  Instances of the `bytes' type are immutable just as strings are.  A
new *note bytearray: 1f4. type stores a mutable sequence of bytes:

    >>> bytearray([65, 66, 67])
    bytearray(b'ABC')
    >>> b = bytearray(u'\u21ef\u3244', 'utf-8')
    >>> b
    bytearray(b'\xe2\x87\xaf\xe3\x89\x84')
    >>> b[0] = '\xe3'
    >>> b
    bytearray(b'\xe3\x87\xaf\xe3\x89\x84')
    >>> unicode(str(b), 'utf-8')
    u'\u31ef \u3244'

Byte arrays support most of the methods of string types, such as
`startswith()'/`endswith()', `find()'/`rfind()', and some of the
methods of lists, such as `append()', `pop()',  and `reverse()'.

    >>> b = bytearray('ABC')
    >>> b.append('d')
    >>> b.append(ord('e'))
    >>> b
    bytearray(b'ABCde')

There's also a corresponding C API, with *note
PyByteArray_FromObject(): 30a, *note PyByteArray_FromStringAndSize():
30b, and various other functions.

See also
........

PEP 3112(1) - Bytes literals in Python 3000
     PEP written by Jason Orendorff; backported to 2.6 by Christian
     Heimes.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3112


File: python.info,  Node: PEP 3116 New I/O Library,  Next: PEP 3118 Revised Buffer Protocol,  Prev: PEP 3112 Byte Literals,  Up: What's New in Python 2 6

1.2.11 PEP 3116: New I/O Library
--------------------------------

Python's built-in file objects support a number of methods, but
file-like objects don't necessarily support all of them.  Objects that
imitate files usually support `read()' and `write()', but they may not
support *note readline(): 144, for example.  Python 3.0 introduces a
layered I/O library in the *note io: f9. module that separates buffering
and text-handling features from the fundamental read and write
operations.

  There are three levels of abstract base classes provided by the *note
io: f9. module:

   * `RawIOBase' defines raw I/O operations: `read()', `readinto()',
     `write()', `seek()', `tell()', `truncate()', and `close()'.  Most
     of the methods of this class will often map to a single system
     call.  There are also `readable()', `writable()', and `seekable()'
     methods for determining what operations a given object will allow.

     Python 3.0 has concrete implementations of this class for files and
     sockets, but Python 2.6 hasn't restructured its file and socket
     objects in this way.

   * `BufferedIOBase' is an abstract base class that buffers data in
     memory to reduce the number of system calls used, making I/O
     processing more efficient.  It supports all of the methods of
     `RawIOBase', and adds a `raw' attribute holding the underlying raw
     object.

     There are five concrete classes implementing this ABC.
     `BufferedWriter' and `BufferedReader' are for objects that support
     write-only or read-only usage that have a `seek()' method for
     random access.  `BufferedRandom' objects support read and write
     access upon the same underlying stream, and `BufferedRWPair' is
     for objects such as TTYs that have both read and write operations
     acting upon unconnected streams of data.  The `BytesIO' class
     supports reading, writing, and seeking over an in-memory buffer.

   * `TextIOBase': Provides functions for reading and writing strings
     (remember, strings will be Unicode in Python 3.0), and supporting
     *note universal newlines: 30e.  `TextIOBase' defines the *note
     readline(): 144. method and supports iteration upon objects.

     There are two concrete implementations.  `TextIOWrapper' wraps a
     buffered I/O object, supporting all of the methods for text I/O
     and adding a *note buffer: 30f. attribute for access to the
     underlying object.  *note StringIO: 164. simply buffers everything
     in memory without ever writing anything to disk.

     (In Python 2.6, *note io.StringIO: 310. is implemented in pure
     Python, so it's pretty slow.   You should therefore stick with the
     existing *note StringIO: 164. module or *note cStringIO: 76. for
     now.  At some point Python 3.0's *note io: f9. module will be
     rewritten into C for speed, and perhaps the C implementation will
     be  backported to the 2.x releases.)

  In Python 2.6, the underlying implementations haven't been
restructured to build on top of the *note io: f9. module's classes.  The
module is being provided to make it easier to write code that's
forward-compatible with 3.0, and to save developers the effort of
writing their own implementations of buffering and text I/O.

See also
........

PEP 3116(1) - New I/O
     PEP written by Daniel Stutzbach, Mike Verdone, and Guido van
     Rossum.  Code by Guido van Rossum, Georg Brandl, Walter Doerwald,
     Jeremy Hylton, Martin von Loewis, Tony Lownds, and others.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3116


File: python.info,  Node: PEP 3118 Revised Buffer Protocol,  Next: PEP 3119 Abstract Base Classes,  Prev: PEP 3116 New I/O Library,  Up: What's New in Python 2 6

1.2.12 PEP 3118: Revised Buffer Protocol
----------------------------------------

The buffer protocol is a C-level API that lets Python types exchange
pointers into their internal representations.  A memory-mapped file can
be viewed as a buffer of characters, for example, and this lets another
module such as *note re: 143.  treat memory-mapped files as a string of
characters to be searched.

  The primary users of the buffer protocol are numeric-processing
packages such as NumPy, which expose the internal representation of
arrays so that callers can write data directly into an array instead of
going through a slower API.  This PEP updates the buffer protocol in
light of experience from NumPy development, adding a number of new
features such as indicating the shape of an array or locking a memory
region.

  The most important new C API function is `PyObject_GetBuffer(PyObject
*obj, Py_buffer *view, int flags)', which takes an object and a set of
flags, and fills in the `Py_buffer' structure with information about
the object's memory representation.  Objects can use this operation to
lock memory in place while an external caller could be modifying the
contents, so there's a corresponding `PyBuffer_Release(Py_buffer
*view)' to indicate that the external caller is done.

  The _flags_ argument to *note PyObject_GetBuffer(): 313. specifies
constraints upon the memory returned.  Some examples are:

        * `PyBUF_WRITABLE' indicates that the memory must be writable.

        * `PyBUF_LOCK' requests a read-only or exclusive lock on the
          memory.

        * `PyBUF_C_CONTIGUOUS' and `PyBUF_F_CONTIGUOUS' requests a
          C-contiguous (last dimension varies the fastest) or
          Fortran-contiguous (first dimension varies the fastest) array
          layout.

  Two new argument codes for *note PyArg_ParseTuple(): 314, `s*' and
`z*', return locked buffer objects for a parameter.

See also
........

PEP 3118(1) - Revising the buffer protocol
     PEP written by Travis Oliphant and Carl Banks; implemented by
     Travis Oliphant.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3118


File: python.info,  Node: PEP 3119 Abstract Base Classes,  Next: PEP 3127 Integer Literal Support and Syntax,  Prev: PEP 3118 Revised Buffer Protocol,  Up: What's New in Python 2 6

1.2.13 PEP 3119: Abstract Base Classes
--------------------------------------

Some object-oriented languages such as Java support interfaces,
declaring that a class has a given set of methods or supports a given
access protocol.  Abstract Base Classes (or ABCs) are an equivalent
feature for Python. The ABC support consists of an *note abc: 4. module
containing a metaclass called `ABCMeta', special handling of this
metaclass by the *note isinstance(): 317. and *note issubclass(): 318.
builtins, and a collection of basic ABCs that the Python developers
think will be widely useful.  Future versions of Python will probably
add more ABCs.

  Let's say you have a particular class and wish to know whether it
supports dictionary-style access.  The phrase "dictionary-style" is
vague, however.  It probably means that accessing items with `obj[1]'
works.  Does it imply that setting items with `obj[2] = value' works?
Or that the object will have `keys()', `values()', and `items()'
methods?  What about the iterative variants  such as `iterkeys()'?
*note copy(): 71.  and `update()'?  Iterating over the object with
*note iter(): 319.?

  The Python 2.6 *note collections: 65. module includes a number of
different ABCs that represent these distinctions.  `Iterable' indicates
that a class defines *note __iter__(): 31a, and `Container' means the
class defines a *note __contains__(): 31b.  method and therefore
supports `x in y' expressions.  The basic dictionary interface of
getting items, setting items, and `keys()', `values()', and `items()',
is defined by the `MutableMapping' ABC.

  You can derive your own classes from a particular ABC to indicate
they support that ABC's interface:

    import collections

    class Storage(collections.MutableMapping):
        ...

Alternatively, you could write the class without deriving from the
desired ABC and instead register the class by calling the ABC's
`register()' method:

    import collections

    class Storage:
        ...

    collections.MutableMapping.register(Storage)

For classes that you write, deriving from the ABC is probably clearer.
The `register()'  method is useful when you've written a new ABC that
can describe an existing type or class, or if you want to declare that
some third-party class implements an ABC.  For example, if you defined
a `PrintableType' ABC, it's legal to do:

    # Register Python's types
    PrintableType.register(int)
    PrintableType.register(float)
    PrintableType.register(str)

Classes should obey the semantics specified by an ABC, but Python can't
check this; it's up to the class author to understand the ABC's
requirements and to implement the code accordingly.

  To check whether an object supports a particular interface, you can
now write:

    def func(d):
        if not isinstance(d, collections.MutableMapping):
            raise ValueError("Mapping object expected, not %r" % d)

Don't feel that you must now begin writing lots of checks as in the
above example.  Python has a strong tradition of duck-typing, where
explicit type-checking is never done and code simply calls methods on
an object, trusting that those methods will be there and raising an
exception if they aren't.  Be judicious in checking for ABCs and only
do it where it's absolutely necessary.

  You can write your own ABCs by using `abc.ABCMeta' as the metaclass
in a class definition:

    from abc import ABCMeta, abstractmethod

    class Drawable():
        __metaclass__ = ABCMeta

        @abstractmethod
        def draw(self, x, y, scale=1.0):
            pass

        def draw_doubled(self, x, y):
            self.draw(x, y, scale=2.0)


    class Square(Drawable):
        def draw(self, x, y, scale):
            ...

In the `Drawable' ABC above, the `draw_doubled()' method renders the
object at twice its size and can be implemented in terms of other
methods described in `Drawable'.  Classes implementing this ABC
therefore don't need to provide their own implementation of
`draw_doubled()', though they can do so.  An implementation of `draw()'
is necessary, though; the ABC can't provide a useful generic
implementation.

  You can apply the `@abstractmethod' decorator to methods such as
`draw()' that must be implemented; Python will then raise an exception
for classes that don't define the method.  Note that the exception is
only raised when you actually try to create an instance of a subclass
lacking the method:

    >>> class Circle(Drawable):
    ...     pass
    ...
    >>> c = Circle()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: Can't instantiate abstract class Circle with abstract methods draw
    >>>

Abstract data attributes can be declared using the `@abstractproperty'
decorator:

    from abc import abstractproperty
    ...

    @abstractproperty
    def readonly(self):
       return self._x

Subclasses must then define a `readonly()' property.

See also
........

PEP 3119(1) - Introducing Abstract Base Classes
     PEP written by Guido van Rossum and Talin.  Implemented by Guido
     van Rossum.  Backported to 2.6 by Benjamin Aranguren, with Alex
     Martelli.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3119


File: python.info,  Node: PEP 3127 Integer Literal Support and Syntax,  Next: PEP 3129 Class Decorators,  Prev: PEP 3119 Abstract Base Classes,  Up: What's New in Python 2 6

1.2.14 PEP 3127: Integer Literal Support and Syntax
---------------------------------------------------

Python 3.0 changes the syntax for octal (base-8) integer literals,
prefixing them with "0o" or "0O" instead of a leading zero, and adds
support for binary (base-2) integer literals, signalled by a "0b" or
"0B" prefix.

  Python 2.6 doesn't drop support for a leading 0 signalling an octal
number, but it does add support for "0o" and "0b":

    >>> 0o21, 2*8 + 1
    (17, 17)
    >>> 0b101111
    47

The *note oct(): 31e. builtin still returns numbers prefixed with a
leading zero, and a new *note bin(): 2e3.  builtin returns the binary
representation for a number:

    >>> oct(42)
    '052'
    >>> future_builtins.oct(42)
    '0o52'
    >>> bin(173)
    '0b10101101'

The *note int(): 1ef. and *note long(): 1f0. builtins will now accept
the "0o" and "0b" prefixes when base-8 or base-2 are requested, or when
the _base_ argument is zero (signalling that the base used should be
determined from the string):

    >>> int ('0o52', 0)
    42
    >>> int('1101', 2)
    13
    >>> int('0b1101', 2)
    13
    >>> int('0b1101', 0)
    13


See also
........

PEP 3127(1) - Integer Literal Support and Syntax
     PEP written by Patrick Maupin; backported to 2.6 by Eric Smith.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3127


File: python.info,  Node: PEP 3129 Class Decorators,  Next: PEP 3141 A Type Hierarchy for Numbers,  Prev: PEP 3127 Integer Literal Support and Syntax,  Up: What's New in Python 2 6

1.2.15 PEP 3129: Class Decorators
---------------------------------

Decorators have been extended from functions to classes.  It's now
legal to write:

    @foo
    @bar
    class A:
      pass

This is equivalent to:

    class A:
      pass

    A = foo(bar(A))


See also
........

PEP 3129(1) - Class Decorators
     PEP written by Collin Winter.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3129


File: python.info,  Node: PEP 3141 A Type Hierarchy for Numbers,  Next: Other Language Changes<2>,  Prev: PEP 3129 Class Decorators,  Up: What's New in Python 2 6

1.2.16 PEP 3141: A Type Hierarchy for Numbers
---------------------------------------------

Python 3.0 adds several abstract base classes for numeric types
inspired by Scheme's numeric tower.  These classes were backported to
2.6 as the *note numbers: 125. module.

  The most general ABC is `Number'.  It defines no operations at all,
and only exists to allow checking if an object is a number by doing
`isinstance(obj, Number)'.

  `Complex' is a subclass of `Number'.  Complex numbers can undergo the
basic operations of addition, subtraction, multiplication, division,
and exponentiation, and you can retrieve the real and imaginary parts
and obtain a number's conjugate.  Python's built-in complex type is an
implementation of `Complex'.

  `Real' further derives from `Complex', and adds operations that only
work on real numbers: `floor()', `trunc()', rounding, taking the
remainder mod N, floor division, and comparisons.

  `Rational' numbers derive from `Real', have `numerator' and
`denominator' properties, and can be converted to floats.  Python 2.6
adds a simple rational-number class, `Fraction', in the *note
fractions: d6. module.  (It's called `Fraction' instead of `Rational'
to avoid a name clash with *note numbers.Rational: 323.)

  `Integral' numbers derive from `Rational', and can be shifted left
and right with `<<' and `>>', combined using bitwise operations such as
`&' and `|', and can be used as array indexes and slice boundaries.

  In Python 3.0, the PEP slightly redefines the existing builtins *note
round(): 1c2, *note math.floor(): 324, *note math.ceil(): 325, and adds
a new one, *note math.trunc(): 326, that's been backported to Python
2.6.  *note math.trunc(): 326. rounds toward zero, returning the closest
`Integral' that's between the function's argument and zero.

See also
........

PEP 3141(1) - A Type Hierarchy for Numbers
     PEP written by Jeffrey Yasskin.

  Scheme's numerical tower(2), from the Guile manual.

  Scheme's number datatypes(3) from the R5RS Scheme specification.

* Menu:

* The fractions Module::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3141

  (2)
http://www.gnu.org/software/guile/manual/html_node/Numerical-Tower.html#Numerical-Tower

  (3)
http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2


File: python.info,  Node: The fractions Module,  Up: PEP 3141 A Type Hierarchy for Numbers

1.2.16.1 The `fractions' Module
...............................

To fill out the hierarchy of numeric types, the *note fractions: d6.
module provides a rational-number class.  Rational numbers store their
values as a numerator and denominator forming a fraction, and can
exactly represent numbers such as `2/3' that floating-point numbers can
only approximate.

  The `Fraction' constructor takes two `Integral' values that will be
the numerator and denominator of the resulting fraction.

    >>> from fractions import Fraction
    >>> a = Fraction(2, 3)
    >>> b = Fraction(2, 5)
    >>> float(a), float(b)
    (0.66666666666666663, 0.40000000000000002)
    >>> a+b
    Fraction(16, 15)
    >>> a/b
    Fraction(5, 3)

For converting floating-point numbers to rationals, the float type now
has an `as_integer_ratio()' method that returns the numerator and
denominator for a fraction that evaluates to the same floating-point
value:

    >>> (2.5) .as_integer_ratio()
    (5, 2)
    >>> (3.1415) .as_integer_ratio()
    (7074029114692207L, 2251799813685248L)
    >>> (1./3) .as_integer_ratio()
    (6004799503160661L, 18014398509481984L)

Note that values that can only be approximated by floating-point
numbers, such as 1./3, are not simplified to the number being
approximated; the fraction attempts to match the floating-point value
*exactly*.

  The *note fractions: d6. module is based upon an implementation by
Sjoerd Mullender that was in Python's `Demo/classes/' directory for a
long time.  This implementation was significantly updated by Jeffrey
Yasskin.


File: python.info,  Node: Other Language Changes<2>,  Next: New and Improved Modules<2>,  Prev: PEP 3141 A Type Hierarchy for Numbers,  Up: What's New in Python 2 6

1.2.17 Other Language Changes
-----------------------------

Some smaller changes made to the core Python language are:

   * Directories and zip archives containing a `__main__.py' file can
     now be executed directly by passing their name to the interpreter.
     The directory or zip archive is automatically inserted as the
     first entry in sys.path.  (Suggestion and initial patch by Andy
     Chu, subsequently revised by Phillip J. Eby and Nick Coghlan;
     issue 1739468(1).)

   * The *note hasattr(): 329. function was catching and ignoring all
     errors, under the assumption that they meant a *note
     __getattr__(): 32a. method was failing somehow and the return
     value of *note hasattr(): 329. would therefore be `False'.  This
     logic shouldn't be applied to *note KeyboardInterrupt: 24e. and
     *note SystemExit: 32b, however; Python 2.6 will no longer discard
     such exceptions when *note hasattr(): 329.  encounters them.
     (Fixed by Benjamin Peterson; issue 2196(2).)

   * When calling a function using the `**' syntax to provide keyword
     arguments, you are no longer required to use a Python dictionary;
     any mapping will now work:

         >>> def f(**kw):
         ...    print sorted(kw)
         ...
         >>> ud=UserDict.UserDict()
         >>> ud['a'] = 1
         >>> ud['b'] = 'string'
         >>> f(**ud)
         ['a', 'b']

     (Contributed by Alexander Belopolsky; issue 1686487(3).)

     It's also become legal to provide keyword arguments after a
     `*args' argument to a function call.

         >>> def f(*args, **kw):
         ...     print args, kw
         ...
         >>> f(1,2,3, *(4,5,6), keyword=13)
         (1, 2, 3, 4, 5, 6) {'keyword': 13}

     Previously this would have been a syntax error.  (Contributed by
     Amaury Forgeot d'Arc; issue 3473(4).)

   * A new builtin, `next(iterator, [default])' returns the next item
     from the specified iterator.  If the _default_ argument is
     supplied, it will be returned if _iterator_ has been exhausted;
     otherwise, the *note StopIteration: 32c. exception will be raised.
     (Backported in issue 2719(5).)

   * Tuples now have `index()' and `count()' methods matching the list
     type's `index()' and `count()' methods:

         >>> t = (0,1,2,3,4,0,1,2)
         >>> t.index(3)
         3
         >>> t.count(0)
         2

     (Contributed by Raymond Hettinger)

   * The built-in types now have improved support for extended slicing
     syntax, accepting various combinations of `(start, stop, step)'.
     Previously, the support was partial and certain corner cases
     wouldn't work.  (Implemented by Thomas Wouters.)

   * Properties now have three attributes, `getter', `setter' and
     `deleter', that are decorators providing useful shortcuts for
     adding a getter, setter or deleter function to an existing
     property. You would use them like this:

         class C(object):
             @property
             def x(self):
                 return self._x

             @x.setter
             def x(self, value):
                 self._x = value

             @x.deleter
             def x(self):
                 del self._x

         class D(C):
             @C.x.getter
             def x(self):
                 return self._x * 2

             @x.setter
             def x(self, value):
                 self._x = value / 2


   * Several methods of the built-in set types now accept multiple
     iterables: `intersection()', `intersection_update()', `union()',
     `update()', `difference()' and `difference_update()'.

         >>> s=set('1234567890')
         >>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs
         set(['2'])
         >>> s.difference('246', '789')
         set(['1', '0', '3', '5'])

     (Contributed by Raymond Hettinger.)

   * Many floating-point features were added.  The *note float(): 1e8.
     function will now turn the string `nan' into an IEEE 754 Not A
     Number value, and `+inf' and `-inf' into positive or negative
     infinity.  This works on any platform with IEEE 754 semantics.
     (Contributed by Christian Heimes; issue 1635(6).)

     Other functions in the *note math: 10c. module, `isinf()' and
     `isnan()', return true if their floating-point argument is
     infinite or Not A Number.  (issue 1640(7))

     Conversion functions were added to convert floating-point numbers
     into hexadecimal strings (issue 3008(8)).  These functions convert
     floats to and from a string representation without introducing
     rounding errors from the conversion between decimal and binary.
     Floats have a *note hex(): 32d. method that returns a string
     representation, and the `float.fromhex()' method converts a string
     back into a number:

         >>> a = 3.75
         >>> a.hex()
         '0x1.e000000000000p+1'
         >>> float.fromhex('0x1.e000000000000p+1')
         3.75
         >>> b=1./3
         >>> b.hex()
         '0x1.5555555555555p-2'


   * A numerical nicety: when creating a complex number from two floats
     on systems that support signed zeros (-0 and +0), the *note
     complex(): 1e9. constructor will now preserve the sign of the
     zero.  (Fixed by Mark T. Dickinson; issue 1507(9).)

   * Classes that inherit a *note __hash__(): 32e. method from a parent
     class can set `__hash__ = None' to indicate that the class isn't
     hashable.  This will make `hash(obj)' raise a *note TypeError: 215.
     and the class will not be indicated as implementing the `Hashable'
     ABC.

     You should do this when you've defined a *note __cmp__(): 21e. or
     *note __eq__(): 219. method that compares objects by their value
     rather than by identity.  All objects have a default hash method
     that uses `id(obj)' as the hash value.  There's no tidy way to
     remove the *note __hash__(): 32e. method inherited from a parent
     class, so assigning `None' was implemented as an override.  At the
     C level, extensions can set `tp_hash' to *note
     PyObject_HashNotImplemented(): 32f.  (Fixed by Nick Coghlan and
     Amaury Forgeot d'Arc; issue 2235(10).)

   * The *note GeneratorExit: 330. exception now subclasses *note
     BaseException: 331. instead of *note Exception: 332.  This means
     that an exception handler that does `except Exception:' will not
     inadvertently catch *note GeneratorExit: 330.  (Contributed by
     Chad Austin; issue 1537(11).)

   * Generator objects now have a `gi_code' attribute that refers to
     the original code object backing the generator.  (Contributed by
     Collin Winter; issue 1473257(12).)

   * The *note compile(): 1f8. built-in function now accepts keyword
     arguments as well as positional parameters.  (Contributed by
     Thomas Wouters; issue 1444529(13).)

   * The *note complex(): 1e9. constructor now accepts strings
     containing parenthesized complex numbers, meaning that
     `complex(repr(cplx))' will now round-trip values.  For example,
     `complex('(3+4j)')' now returns the value (3+4j).  (issue
     1491866(14))

   * The string `translate()' method now accepts `None' as the
     translation table parameter, which is treated as the identity
     transformation.   This makes it easier to carry out operations
     that only delete characters.  (Contributed by Bengt Richter and
     implemented by Raymond Hettinger; issue 1193128(15).)

   * The built-in *note dir(): 333. function now checks for a
     `__dir__()' method on the objects it receives.  This method must
     return a list of strings containing the names of valid attributes
     for the object, and lets the object control the value that *note
     dir(): 333. produces.  Objects that have *note __getattr__(): 32a.
     or *note __getattribute__(): 334.  methods can use this to
     advertise pseudo-attributes they will honor.  (issue 1591665(16))

   * Instance method objects have new attributes for the object and
     function comprising the method; the new synonym for `im_self' is
     `__self__', and `im_func' is also available as `__func__'.  The
     old names are still supported in Python 2.6, but are gone in 3.0.

   * An obscure change: when you use the *note locals(): 335. function
     inside a *note class: 336. statement, the resulting dictionary no
     longer returns free variables.  (Free variables, in this case, are
     variables referenced in the *note class: 336. statement  that
     aren't attributes of the class.)

* Menu:

* Optimizations: Optimizations<2>.
* Interpreter Changes: Interpreter Changes<2>.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1739468

  (2) http://bugs.python.org/issue2196

  (3) http://bugs.python.org/issue1686487

  (4) http://bugs.python.org/issue3473

  (5) http://bugs.python.org/issue2719

  (6) http://bugs.python.org/issue1635

  (7) http://bugs.python.org/issue1640

  (8) http://bugs.python.org/issue3008

  (9) http://bugs.python.org/issue1507

  (10) http://bugs.python.org/issue2235

  (11) http://bugs.python.org/issue1537

  (12) http://bugs.python.org/issue1473257

  (13) http://bugs.python.org/issue1444529

  (14) http://bugs.python.org/issue1491866

  (15) http://bugs.python.org/issue1193128

  (16) http://bugs.python.org/issue1591665


File: python.info,  Node: Optimizations<2>,  Next: Interpreter Changes<2>,  Up: Other Language Changes<2>

1.2.17.1 Optimizations
......................

   * The *note warnings: 193. module has been rewritten in C.  This
     makes it possible to invoke warnings from the parser, and may also
     make the interpreter's startup faster.  (Contributed by Neal
     Norwitz and Brett Cannon; issue 1631171(1).)

   * Type objects now have a cache of methods that can reduce the work
     required to find the correct method implementation for a
     particular class; once cached, the interpreter doesn't need to
     traverse base classes to figure out the right method to call.  The
     cache is cleared if a base class or the class itself is modified,
     so the cache should remain correct even in the face of Python's
     dynamic nature.  (Original optimization implemented by Armin Rigo,
     updated for Python 2.6 by Kevin Jacobs; issue 1700288(2).)

     By default, this change is only applied to types that are included
     with the Python core.  Extension modules may not necessarily be
     compatible with this cache, so they must explicitly add
     `Py_TPFLAGS_HAVE_VERSION_TAG' to the module's `tp_flags' field to
     enable the method cache.  (To be compatible with the method cache,
     the extension module's code must not directly access and modify
     the `tp_dict' member of any of the types it implements.  Most
     modules don't do this, but it's impossible for the Python
     interpreter to determine that.  See issue 1878(3) for some
     discussion.)

   * Function calls that use keyword arguments are significantly faster
     by doing a quick pointer comparison, usually saving the time of a
     full string comparison.  (Contributed by Raymond Hettinger, after
     an initial implementation by Antoine Pitrou; issue 1819(4).)

   * All of the functions in the *note struct: 166. module have been
     rewritten in C, thanks to work at the Need For Speed sprint.
     (Contributed by Raymond Hettinger.)

   * Some of the standard built-in types now set a bit in their type
     objects.  This speeds up checking whether an object is a subclass
     of one of these types.  (Contributed by Neal Norwitz.)

   * Unicode strings now use faster code for detecting whitespace and
     line breaks; this speeds up the `split()' method by about 25% and
     `splitlines()' by 35%.  (Contributed by Antoine Pitrou.)  Memory
     usage is reduced by using pymalloc for the Unicode string's data.

   * The `with' statement now stores the *note __exit__(): 1fd. method
     on the stack, producing a small speedup.  (Implemented by Jeffrey
     Yasskin.)

   * To reduce memory usage, the garbage collector will now clear
     internal free lists when garbage-collecting the highest generation
     of objects.  This may return memory to the operating system sooner.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1631171

  (2) http://bugs.python.org/issue1700288

  (3) http://bugs.python.org/issue1878

  (4) http://bugs.python.org/issue1819


File: python.info,  Node: Interpreter Changes<2>,  Prev: Optimizations<2>,  Up: Other Language Changes<2>

1.2.17.2 Interpreter Changes
............................

Two command-line options have been reserved for use by other Python
implementations.  The *note -J: 33a. switch has been reserved for use by
Jython for Jython-specific options, such as switches that are passed to
the underlying JVM.  *note -X: 33b. has been reserved for options
specific to a particular implementation of Python such as CPython,
Jython, or IronPython.  If either option is used with Python 2.6, the
interpreter will report that the option isn't currently used.

  Python can now be prevented from writing `.pyc' or `.pyo' files by
supplying the *note -B: 33c. switch to the Python interpreter, or by
setting the *note PYTHONDONTWRITEBYTECODE: 33d. environment variable
before running the interpreter.  This setting is available to Python
programs as the `sys.dont_write_bytecode' variable, and Python code can
change the value to modify the interpreter's behaviour.  (Contributed
by Neal Norwitz and Georg Brandl.)

  The encoding used for standard input, output, and standard error can
be specified by setting the *note PYTHONIOENCODING: 33e. environment
variable before running the interpreter.  The value should be a string
in the form `<encoding>' or `<encoding>:<errorhandler>'.  The
_encoding_ part specifies the encoding's name, e.g. `utf-8' or
`latin-1'; the optional _errorhandler_ part specifies what to do with
characters that can't be handled by the encoding, and  should be one of
"error", "ignore", or "replace".   (Contributed by Martin von Loewis.)


File: python.info,  Node: New and Improved Modules<2>,  Next: Deprecations and Removals,  Prev: Other Language Changes<2>,  Up: What's New in Python 2 6

1.2.18 New and Improved Modules
-------------------------------

As in every release, Python's standard library received a number of
enhancements and bug fixes.  Here's a partial list of the most notable
changes, sorted alphabetically by module name. Consult the `Misc/NEWS'
file in the source tree for a more complete list of changes, or look
through the Subversion logs for all the details.

   * The *note asyncore: 11. and *note asynchat: 10. modules are being
     actively maintained again, and a number of patches and bugfixes
     were applied.  (Maintained by Josiah Carlson; see issue 1736190(1)
     for one patch.)

   * The *note bsddb: 1c. module also has a new maintainer, Jesús Cea
     Avion, and the package is now available as a standalone package.
     The web page for the package is
     www.jcea.es/programacion/pybsddb.htm(2).  The plan is to remove
     the package from the standard library in Python 3.0, because its
     pace of releases is much more frequent than Python's.

     The `bsddb.dbshelve' module now uses the highest pickling protocol
     available, instead of restricting itself to protocol 1.
     (Contributed by W. Barnes.)

   * The *note cgi: 5c. module will now read variables from the query
     string of an HTTP POST request.  This makes it possible to use
     form actions with URLs that include query strings such as
     "/cgi-bin/add.py?category=1".  (Contributed by Alexandre Fiori and
     Nubis; issue 1817(3).)

     The `parse_qs()' and `parse_qsl()' functions have been relocated
     from the *note cgi: 5c. module to the *note urlparse: 18a. module.
     The versions still available in the *note cgi: 5c. module will
     trigger *note PendingDeprecationWarning: 1ed. messages in 2.6
     (issue 600362(4)).

   * The *note cmath: 60. module underwent extensive revision,
     contributed by Mark Dickinson and Christian Heimes.  Five new
     functions were added:

        * `polar()' converts a complex number to polar form, returning
          the modulus and argument of the complex number.

        * `rect()' does the opposite, turning a modulus, argument pair
          back into the corresponding complex number.

        * `phase()' returns the argument (also called the angle) of a
          complex number.

        * `isnan()' returns True if either the real or imaginary part
          of its argument is a NaN.

        * `isinf()' returns True if either the real or imaginary part of
          its argument is infinite.

     The revisions also improved the numerical soundness of the *note
     cmath: 60. module.  For all functions, the real and imaginary
     parts of the results are accurate to within a few units of least
     precision (ulps) whenever possible.  See issue 1381(5) for the
     details.  The branch cuts for `asinh()', `atanh()': and `atan()'
     have also been corrected.

     The tests for the module have been greatly expanded; nearly 2000
     new test cases exercise the algebraic functions.

     On IEEE 754 platforms, the *note cmath: 60. module now handles
     IEEE 754 special values and floating-point exceptions in a manner
     consistent with Annex 'G' of the C99 standard.

   * A new data type in the *note collections: 65. module:
     `namedtuple(typename, fieldnames)' is a factory function that
     creates subclasses of the standard tuple whose fields are
     accessible by name as well as index.  For example:

         >>> var_type = collections.namedtuple('variable',
         ...             'id name type size')
         >>> # Names are separated by spaces or commas.
         >>> # 'id, name, type, size' would also work.
         >>> var_type._fields
         ('id', 'name', 'type', 'size')

         >>> var = var_type(1, 'frequency', 'int', 4)
         >>> print var[0], var.id    # Equivalent
         1 1
         >>> print var[2], var.type  # Equivalent
         int int
         >>> var._asdict()
         {'size': 4, 'type': 'int', 'id': 1, 'name': 'frequency'}
         >>> v2 = var._replace(name='amplitude')
         >>> v2
         variable(id=1, name='amplitude', type='int', size=4)

     Several places in the standard library that returned tuples have
     been modified to return `namedtuple' instances.  For example, the
     `Decimal.as_tuple()' method now returns a named tuple with `sign',
     `digits', and `exponent' fields.

     (Contributed by Raymond Hettinger.)

   * Another change to the *note collections: 65. module is that the
     `deque' type now supports an optional _maxlen_ parameter; if
     supplied, the deque's size will be restricted to no more than
     _maxlen_ items.  Adding more items to a full deque causes old
     items to be discarded.

         >>> from collections import deque
         >>> dq=deque(maxlen=3)
         >>> dq
         deque([], maxlen=3)
         >>> dq.append(1) ; dq.append(2) ; dq.append(3)
         >>> dq
         deque([1, 2, 3], maxlen=3)
         >>> dq.append(4)
         >>> dq
         deque([2, 3, 4], maxlen=3)

     (Contributed by Raymond Hettinger.)

   * The *note Cookie: 6f. module's `Morsel' objects now support an
     `httponly' attribute.  In some browsers. cookies with this
     attribute set cannot be accessed or manipulated by JavaScript code.
     (Contributed by Arvin Schnell; issue 1638033(6).)

   * A new window method in the *note curses: 79. module, `chgat()',
     changes the display attributes for a certain number of characters
     on a single line.  (Contributed by Fabian Kreutz.)

         # Boldface text starting at y=0,x=21
         # and affecting the rest of the line.
         stdscr.chgat(0, 21, curses.A_BOLD)

     The `Textbox' class in the *note curses.textpad: 7c. module now
     supports editing in insert mode as well as overwrite mode.  Insert
     mode is enabled by supplying a true value for the _insert_mode_
     parameter when creating the `Textbox' instance.

   * The *note datetime: 7d. module's `strftime()' methods now support a
     `%f' format code that expands to the number of microseconds in the
     object, zero-padded on the left to six places.  (Contributed by
     Skip Montanaro; issue 1158(7).)

   * The *note decimal: 80. module was updated to version 1.66 of the
     General Decimal Specification(8).  New features include some
     methods for some basic mathematical functions such as `exp()' and
     `log10()':

         >>> Decimal(1).exp()
         Decimal("2.718281828459045235360287471")
         >>> Decimal("2.7182818").ln()
         Decimal("0.9999999895305022877376682436")
         >>> Decimal(1000).log10()
         Decimal("3")

     The `as_tuple()' method of `Decimal' objects now returns a named
     tuple with `sign', `digits', and `exponent' fields.

     (Implemented by Facundo Batista and Mark Dickinson.  Named tuple
     support added by Raymond Hettinger.)

   * The *note difflib: 82. module's `SequenceMatcher' class now
     returns named tuples representing matches, with `a', `b', and
     `size' attributes.  (Contributed by Raymond Hettinger.)

   * An optional `timeout' parameter, specifying a timeout measured in
     seconds, was added to the *note ftplib.FTP: 340. class constructor
     as well as the `connect()' method.  (Added by Facundo Batista.)
     Also, the `FTP' class's `storbinary()' and `storlines()' now take
     an optional _callback_ parameter that will be called with each
     block of data after the data has been sent.  (Contributed by Phil
     Schwartz; issue 1221598(9).)

   * The *note reduce(): 2e2. built-in function is also available in the
     *note functools: d9. module.  In Python 3.0, the builtin has been
     dropped and *note reduce(): 2e2. is only available from *note
     functools: d9.; currently there are no plans to drop the builtin
     in the 2.x series.  (Patched by Christian Heimes; issue
     1739906(10).)

   * When possible, the *note getpass: df. module will now use
     `/dev/tty' to print a prompt message and read the password,
     falling back to standard error and standard input.  If the
     password may be echoed to the terminal, a warning is printed before
     the prompt is displayed.  (Contributed by Gregory P. Smith.)

   * The *note glob.glob(): 341. function can now return Unicode
     filenames if a Unicode path was used and Unicode filenames are
     matched within the directory.  (issue 1001604(11))

   * A new function in the *note heapq: e7. module, `merge(iter1,
     iter2, ...)', takes any number of iterables returning data in
     sorted order, and returns a new generator that returns the
     contents of all the iterators, also in sorted order.  For example:

         >>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16]))
         [1, 2, 3, 5, 8, 9, 16]

     Another new function, `heappushpop(heap, item)', pushes _item_
     onto _heap_, then pops off and returns the smallest item.  This is
     more efficient than making a call to `heappush()' and then
     `heappop()'.

     *note heapq: e7. is now implemented to only use less-than
     comparison, instead of the less-than-or-equal comparison it
     previously used.  This makes *note heapq: e7.'s usage of a type
     match the `list.sort()' method.  (Contributed by Raymond
     Hettinger.)

   * An optional `timeout' parameter, specifying a timeout measured in
     seconds, was added to the *note httplib.HTTPConnection: 229. and
     `HTTPSConnection' class constructors.  (Added by Facundo Batista.)

   * Most of the *note inspect: f8. module's functions, such as
     `getmoduleinfo()' and `getargs()', now return named tuples.  In
     addition to behaving like tuples, the elements of the  return value
     can also be accessed as attributes.  (Contributed by Raymond
     Hettinger.)

     Some new functions in the module include `isgenerator()',
     `isgeneratorfunction()', and `isabstract()'.

   * The *note itertools: fa. module gained several new functions.

     `izip_longest(iter1, iter2, ...[, fillvalue])' makes tuples from
     each of the elements; if some of the iterables are shorter than
     others, the missing values are set to _fillvalue_.  For example:

         >>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5]))
         ((1, 1), (2, 2), (3, 3), (None, 4), (None, 5))

     `product(iter1, iter2, ..., [repeat=N])' returns the Cartesian
     product of the supplied iterables, a set of tuples containing
     every possible combination of the elements returned from each
     iterable.

         >>> list(itertools.product([1,2,3], [4,5,6]))
         [(1, 4), (1, 5), (1, 6),
          (2, 4), (2, 5), (2, 6),
          (3, 4), (3, 5), (3, 6)]

     The optional _repeat_ keyword argument is used for taking the
     product of an iterable or a set of iterables with themselves,
     repeated _N_ times.  With a single iterable argument, _N_-tuples
     are returned:

         >>> list(itertools.product([1,2], repeat=3))
         [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
          (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]

     With two iterables, _2N_-tuples are returned.

         >>> list(itertools.product([1,2], [3,4], repeat=2))
         [(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),
          (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),
          (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),
          (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]

     `combinations(iterable, r)' returns sub-sequences of length _r_
     from the elements of _iterable_.

         >>> list(itertools.combinations('123', 2))
         [('1', '2'), ('1', '3'), ('2', '3')]
         >>> list(itertools.combinations('123', 3))
         [('1', '2', '3')]
         >>> list(itertools.combinations('1234', 3))
         [('1', '2', '3'), ('1', '2', '4'),
          ('1', '3', '4'), ('2', '3', '4')]

     `permutations(iter[, r])' returns all the permutations of length
     _r_ of the iterable's elements.  If _r_ is not specified, it will
     default to the number of elements produced by the iterable.

         >>> list(itertools.permutations([1,2,3,4], 2))
         [(1, 2), (1, 3), (1, 4),
          (2, 1), (2, 3), (2, 4),
          (3, 1), (3, 2), (3, 4),
          (4, 1), (4, 2), (4, 3)]

     `itertools.chain(*iterables)' is an existing function in *note
     itertools: fa. that gained a new constructor in Python 2.6.
     `itertools.chain.from_iterable(iterable)' takes a single iterable
     that should return other iterables.  `chain()' will then return
     all the elements of the first iterable, then all the elements of
     the second, and so on.

         >>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))
         [1, 2, 3, 4, 5, 6]

     (All contributed by Raymond Hettinger.)

   * The *note logging: 101. module's `FileHandler' class and its
     subclasses `WatchedFileHandler', `RotatingFileHandler', and
     `TimedRotatingFileHandler' now have an optional _delay_ parameter
     to their constructors.  If _delay_ is true, opening of the log
     file is deferred until the first `emit()' call is made.
     (Contributed by Vinay Sajip.)

     `TimedRotatingFileHandler' also has a _utc_ constructor parameter.
     If the argument is true, UTC time will be used in determining when
     midnight occurs and in generating filenames; otherwise local time
     will be used.

   * Several new functions were added to the *note math: 10c. module:

        * *note isinf(): 342. and *note isnan(): 343. determine whether
          a given float is a (positive or negative) infinity or a NaN
          (Not a Number), respectively.

        * *note copysign(): 344. copies the sign bit of an IEEE 754
          number, returning the absolute value of _x_ combined with the
          sign bit of _y_.  For example, `math.copysign(1, -0.0)'
          returns -1.0.  (Contributed by Christian Heimes.)

        * *note factorial(): 345. computes the factorial of a number.
          (Contributed by Raymond Hettinger; issue 2138(12).)

        * *note fsum(): 346. adds up the stream of numbers from an
          iterable, and is careful to avoid loss of precision through
          using partial sums.  (Contributed by Jean Brouwers, Raymond
          Hettinger, and Mark Dickinson; issue 2819(13).)

        * *note acosh(): 347, *note asinh(): 348.  and *note atanh():
          349. compute the inverse hyperbolic functions.

        * *note log1p(): 34a. returns the natural logarithm of _1+x_
          (base _e_).

        * `trunc()' rounds a number toward zero, returning the closest
          `Integral' that's between the function's argument and zero.
          Added as part of the backport of *note PEP 3141's type
          hierarchy for numbers: 322.

   * The *note math: 10c. module has been improved to give more
     consistent behaviour across platforms, especially with respect to
     handling of floating-point exceptions and IEEE 754 special values.

     Whenever possible, the module follows the recommendations of the
     C99 standard about 754's special values.  For example, `sqrt(-1.)'
     should now give a *note ValueError: 233. across almost all
     platforms, while `sqrt(float('NaN'))' should return a NaN on all
     IEEE 754 platforms.  Where Annex 'F' of the C99 standard
     recommends signaling 'divide-by-zero' or 'invalid', Python will
     raise *note ValueError: 233.  Where Annex 'F' of the C99 standard
     recommends signaling 'overflow', Python will raise *note
     OverflowError: 2d8.  (See issue 711019(14) and issue 1640(15).)

     (Contributed by Christian Heimes and Mark Dickinson.)

   * *note mmap: 114. objects now have a `rfind()' method that searches
     for a substring beginning at the end of the string and searching
     backwards.  The `find()' method also gained an _end_ parameter
     giving an index at which to stop searching.  (Contributed by John
     Lenton.)

   * The *note operator: 126. module gained a `methodcaller()' function
     that takes a name and an optional set of arguments, returning a
     callable that will call the named function on any arguments passed
     to it.  For example:

         >>> # Equivalent to lambda s: s.replace('old', 'new')
         >>> replacer = operator.methodcaller('replace', 'old', 'new')
         >>> replacer('old wine in old bottles')
         'new wine in new bottles'

     (Contributed by Georg Brandl, after a suggestion by Gregory
     Petrosyan.)

     The `attrgetter()' function now accepts dotted names and performs
     the corresponding attribute lookups:

         >>> inst_name = operator.attrgetter(
         ...        '__class__.__name__')
         >>> inst_name('')
         'str'
         >>> inst_name(help)
         '_Helper'

     (Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)

   * The *note os: 128. module now wraps several new system calls.
     `fchmod(fd, mode)' and `fchown(fd, uid, gid)' change the mode and
     ownership of an opened file, and `lchmod(path, mode)' changes the
     mode of a symlink.  (Contributed by Georg Brandl and Christian
     Heimes.)

     `chflags()' and `lchflags()' are wrappers for the corresponding
     system calls (where they're available), changing the flags set on
     a file.  Constants for the flag values are defined in the *note
     stat: 161. module; some possible values include `UF_IMMUTABLE' to
     signal the file may not be changed and `UF_APPEND' to indicate
     that data can only be appended to the file.  (Contributed by M.
     Levinson.)

     `os.closerange(low, high)' efficiently closes all file descriptors
     from _low_ to _high_, ignoring any errors and not including _high_
     itself.  This function is now used by the *note subprocess: 167.
     module to make starting processes faster.  (Contributed by Georg
     Brandl; issue 1663329(16).)

   * The `os.environ' object's `clear()' method will now unset the
     environment variables using *note os.unsetenv(): 34b. in addition
     to clearing the object's keys.  (Contributed by Martin Horcicka;
     issue 1181(17).)

   * The *note os.walk(): 34c. function now has a `followlinks'
     parameter. If set to True, it will follow symlinks pointing to
     directories and visit the directory's contents.  For backward
     compatibility, the parameter's default value is false.  Note that
     the function can fall into an infinite recursion if there's a
     symlink that points to a parent directory.  (issue 1273829(18))

   * In the *note os.path: 129. module, the `splitext()' function has
     been changed to not split on leading period characters.  This
     produces better results when operating on Unix's dot-files.  For
     example, `os.path.splitext('.ipython')' now returns `('.ipython',
     '')' instead of `('', '.ipython')'.  (issue 1115886(19))

     A new function, `os.path.relpath(path, start='.')', returns a
     relative path from the `start' path, if it's supplied, or from the
     current working directory to the destination `path'.  (Contributed
     by Richard Barran; issue 1339796(20).)

     On Windows, *note os.path.expandvars(): 34d. will now expand
     environment variables given in the form "%var%", and "~user" will
     be expanded into the user's home directory path.  (Contributed by
     Josiah Carlson; issue 957650(21).)

   * The Python debugger provided by the *note pdb: 12c. module gained
     a new command: "run" restarts the Python program being debugged
     and can optionally take new command-line arguments for the program.
     (Contributed by Rocky Bernstein; issue 1393667(22).)

   * The *note pdb.post_mortem(): 34e. function, used to begin
     debugging a traceback, will now use the traceback returned by
     *note sys.exc_info(): 2ec.  if no traceback is supplied.
     (Contributed by Facundo Batista; issue 1106316(23).)

   * The *note pickletools: 12e. module now has an `optimize()' function
     that takes a string containing a pickle and removes some unused
     opcodes, returning a shorter pickle that contains the same data
     structure.  (Contributed by Raymond Hettinger.)

   * A `get_data()' function was added to the *note pkgutil: 131.
     module that returns the contents of resource files included with
     an installed Python package.  For example:

         >>> import pkgutil
         >>> print pkgutil.get_data('test', 'exception_hierarchy.txt')
         BaseException
          +-- SystemExit
          +-- KeyboardInterrupt
          +-- GeneratorExit
          +-- Exception
               +-- StopIteration
               +-- StandardError
          ...

     (Contributed by Paul Moore; issue 2439(24).)

   * The `pyexpat' module's `Parser' objects now allow setting their
     `buffer_size' attribute to change the size of the buffer used to
     hold character data.  (Contributed by Achim Gaedke; issue
     1137(25).)

   * The *note Queue: 140. module now provides queue variants that
     retrieve entries in different orders.  The `PriorityQueue' class
     stores queued items in a heap and retrieves them in priority order,
     and `LifoQueue' retrieves the most recently added entries first,
     meaning that it behaves like a stack.  (Contributed by Raymond
     Hettinger.)

   * The *note random: 142. module's `Random' objects can now be
     pickled on a 32-bit system and unpickled on a 64-bit system, and
     vice versa.  Unfortunately, this change also means that Python
     2.6's `Random' objects can't be unpickled correctly on earlier
     versions of Python.  (Contributed by Shawn Ligocki; issue
     1727780(26).)

     The new `triangular(low, high, mode)' function returns random
     numbers following a triangular distribution.   The returned values
     are between _low_ and _high_, not including _high_ itself, and
     with _mode_ as the most frequently occurring value in the
     distribution.  (Contributed by Wladmir van der Laan and Raymond
     Hettinger; issue 1681432(27).)

   * Long regular expression searches carried out by the  *note re: 143.
     module will check for signals being delivered, so time-consuming
     searches can now be interrupted.  (Contributed by Josh Hoyt and
     Ralf Schmitt; issue 846388(28).)

     The regular expression module is implemented by compiling bytecodes
     for a tiny regex-specific virtual machine.  Untrusted code could
     create malicious strings of bytecode directly and cause crashes,
     so Python 2.6 includes a verifier for the regex bytecode.
     (Contributed by Guido van Rossum from work for Google App Engine;
     issue 3487(29).)

   * The *note rlcompleter: 149. module's `Completer.complete()' method
     will now ignore exceptions triggered while evaluating a name.
     (Fixed by Lorenz Quack; issue 2250(30).)

   * The *note sched: 14c. module's `scheduler' instances now have a
     read-only `queue' attribute that returns the contents of the
     scheduler's queue, represented as a list of named tuples with the
     fields `(time, priority, action, argument)'.  (Contributed by
     Raymond Hettinger; issue 1861(31).)

   * The *note select: 14e. module now has wrapper functions for the
     Linux `epoll()' and BSD `kqueue()' system calls.  `modify()'
     method was added to the existing `poll' objects;
     `pollobj.modify(fd, eventmask)' takes a file descriptor or file
     object and an event mask, modifying the recorded event mask for
     that file.  (Contributed by Christian Heimes; issue 1657(32).)

   * The *note shutil.copytree(): 24a. function now has an optional
     _ignore_ argument that takes a callable object.  This callable
     will receive each directory path and a list of the directory's
     contents, and returns a list of names that will be ignored, not
     copied.

     The *note shutil: 154. module also provides an `ignore_patterns()'
     function for use with this new parameter.  `ignore_patterns()'
     takes an arbitrary number of glob-style patterns and returns a
     callable that will ignore any files and directories that match any
     of these patterns.  The following example copies a directory tree,
     but skips both `.svn' directories and Emacs backup files, which
     have names ending with '~':

         shutil.copytree('Doc/library', '/tmp/library',
                         ignore=shutil.ignore_patterns('*~', '.svn'))

     (Contributed by Tarek Ziadé; issue 2663(33).)

   * Integrating signal handling with GUI handling event loops like
     those used by Tkinter or GTk+ has long been a problem; most
     software ends up polling, waking up every fraction of a second to
     check if any GUI events have occurred.  The *note signal: 155.
     module can now make this more efficient.  Calling
     `signal.set_wakeup_fd(fd)' sets a file descriptor to be used; when
     a signal is received, a byte is written to that file descriptor.
     There's also a C-level function, *note PySignal_SetWakeupFd():
     34f, for setting the descriptor.

     Event loops will use this by opening a pipe to create two
     descriptors, one for reading and one for writing.  The writable
     descriptor will be passed to `set_wakeup_fd()', and the readable
     descriptor will be added to the list of descriptors monitored by
     the event loop via `select()' or `poll()'.  On receiving a signal,
     a byte will be written and the main event loop will be woken up,
     avoiding the need to poll.

     (Contributed by Adam Olsen; issue 1583(34).)

     The `siginterrupt()' function is now available from Python code,
     and allows changing whether signals can interrupt system calls or
     not.  (Contributed by Ralf Schmitt.)

     The `setitimer()' and `getitimer()' functions have also been added
     (where they're available).  `setitimer()' allows setting interval
     timers that will cause a signal to be delivered to the process
     after a specified time, measured in wall-clock time, consumed
     process time, or combined process+system time.  (Contributed by
     Guilherme Polo; issue 2240(35).)

   * The *note smtplib: 15a. module now supports SMTP over SSL thanks
     to the addition of the `SMTP_SSL' class. This class supports an
     interface identical to the existing `SMTP' class.  (Contributed by
     Monty Taylor.)  Both class constructors also have an optional
     `timeout' parameter that specifies a timeout for the initial
     connection attempt, measured in seconds.  (Contributed by Facundo
     Batista.)

     An implementation of the LMTP protocol ( RFC 2033(36)) was also
     added to the module.  LMTP is used in place of SMTP when
     transferring e-mail between agents that don't manage a mail queue.
     (LMTP implemented by Leif Hedstrom; issue 957003(37).)

     `SMTP.starttls()' now complies with RFC 3207(38) and forgets any
     knowledge obtained from the server not obtained from the TLS
     negotiation itself.  (Patch contributed by Bill Fenner; issue
     829951(39).)

   * The *note socket: 15c. module now supports TIPC
     (<http://tipc.sf.net>), a high-performance non-IP-based protocol
     designed for use in clustered environments.  TIPC addresses are 4-
     or 5-tuples.  (Contributed by Alberto Bertogli; issue 1646(40).)

     A new function, `create_connection()', takes an address and
     connects to it using an optional timeout value, returning the
     connected socket object.  This function also looks up the address's
     type and connects to it using IPv4 or IPv6 as appropriate.
     Changing your code to use `create_connection()' instead of
     `socket(socket.AF_INET, ...)' may be all that's required to make
     your code work with IPv6.

   * The base classes in the *note SocketServer: 15d. module now support
     calling a `handle_timeout()' method after a span of inactivity
     specified by the server's `timeout' attribute.  (Contributed by
     Michael Pomraning.)  The `serve_forever()' method now takes an
     optional poll interval measured in seconds, controlling how often
     the server will check for a shutdown request.  (Contributed by
     Pedro Werneck and Jeffrey Yasskin; issue 742598(41), issue
     1193577(42).)

   * The *note sqlite3: 15f. module, maintained by Gerhard Haering, has
     been updated from version 2.3.2 in Python 2.5 to version 2.4.1.

   * The *note struct: 166. module now supports the C99 `_Bool' type,
     using the format character `'?''.  (Contributed by David Remahl.)

   * The `Popen' objects provided by the *note subprocess: 167. module
     now have `terminate()', `kill()', and `send_signal()' methods.  On
     Windows, `send_signal()' only supports the `SIGTERM' signal, and
     all these methods are aliases for the Win32 API function
     `TerminateProcess()'.  (Contributed by Christian Heimes.)

   * A new variable in the *note sys: 16d. module, `float_info', is an
     object containing information derived from the `float.h' file
     about the platform's floating-point support.  Attributes of this
     object include `mant_dig' (number of digits in the mantissa),
     `epsilon' (smallest difference between 1.0 and the next largest
     value representable), and several others.  (Contributed by
     Christian Heimes; issue 1534(43).)

     Another new variable, `dont_write_bytecode', controls whether
     Python writes any `.pyc' or `.pyo' files on importing a module.
     If this variable is true, the compiled files are not written.  The
     variable is initially set on start-up by supplying the *note -B:
     33c.  switch to the Python interpreter, or by setting the *note
     PYTHONDONTWRITEBYTECODE: 33d. environment variable before running
     the interpreter.  Python code can subsequently change the value of
     this variable to control whether bytecode files are written or not.
     (Contributed by Neal Norwitz and Georg Brandl.)

     Information about the command-line arguments supplied to the Python
     interpreter is available by reading attributes of a named tuple
     available as `sys.flags'.  For example, the `verbose' attribute is
     true if Python was executed in verbose mode, `debug' is true in
     debugging mode, etc.  These attributes are all read-only.
     (Contributed by Christian Heimes.)

     A new function, `getsizeof()', takes a Python object and returns
     the amount of memory used by the object, measured in bytes.
     Built-in objects return correct results; third-party extensions
     may not, but can define a `__sizeof__()' method to return the
     object's size.  (Contributed by Robert Schuppenies; issue
     2898(44).)

     It's now possible to determine the current profiler and tracer
     functions by calling *note sys.getprofile(): 350. and *note
     sys.gettrace(): 351.  (Contributed by Georg Brandl; issue
     1648(45).)

   * The *note tarfile: 171. module now supports POSIX.1-2001 (pax)
     tarfiles in addition to the POSIX.1-1988 (ustar) and GNU tar
     formats that were already supported.  The default format is GNU
     tar; specify the `format' parameter to open a file using a
     different format:

         tar = tarfile.open("output.tar", "w",
                            format=tarfile.PAX_FORMAT)

     The new `encoding' and `errors' parameters specify an encoding and
     an error handling scheme for character conversions.  `'strict'',
     `'ignore'', and `'replace'' are the three standard ways Python can
     handle errors,; `'utf-8'' is a special value that replaces bad
     characters with their UTF-8 representation.  (Character
     conversions occur because the PAX format supports Unicode
     filenames, defaulting to UTF-8 encoding.)

     The `TarFile.add()' method now accepts an `exclude' argument that's
     a function that can be used to exclude certain filenames from an
     archive.  The function must take a filename and return true if the
     file should be excluded or false if it should be archived.  The
     function is applied to both the name initially passed to `add()'
     and to the names of files in recursively-added directories.

     (All changes contributed by Lars Gustäbel).

   * An optional `timeout' parameter was added to the *note
     telnetlib.Telnet: 352. class constructor, specifying a timeout
     measured in seconds.  (Added by Facundo Batista.)

   * The *note tempfile.NamedTemporaryFile: 353. class usually deletes
     the temporary file it created when the file is closed.  This
     behaviour can now be changed by passing `delete=False' to the
     constructor.  (Contributed by Damien Miller; issue 1537850(46).)

     A new class, `SpooledTemporaryFile', behaves like a temporary file
     but stores its data in memory until a maximum size is exceeded.
     On reaching that limit, the contents will be written to an on-disk
     temporary file.  (Contributed by Dustin J. Mitchell.)

     The `NamedTemporaryFile' and `SpooledTemporaryFile' classes both
     work as context managers, so you can write `with
     tempfile.NamedTemporaryFile() as tmp: ...'.  (Contributed by
     Alexander Belopolsky; issue 2021(47).)

   * The *note test.test_support: 176. module gained a number of
     context managers useful for writing tests.
     `EnvironmentVarGuard()' is a context manager that temporarily
     changes environment variables and automatically restores them to
     their old values.

     Another context manager, `TransientResource', can surround calls
     to resources that may or may not be available; it will catch and
     ignore a specified list of exceptions.  For example, a network
     test may ignore certain failures when connecting to an external
     web site:

         with test_support.TransientResource(IOError,
                                         errno=errno.ETIMEDOUT):
             f = urllib.urlopen('https://sf.net')
             ...

     Finally, `check_warnings()' resets the `warning' module's warning
     filters and returns an object that will record all warning
     messages triggered (issue 3781(48)):

         with test_support.check_warnings() as wrec:
             warnings.simplefilter("always")
             # ... code that triggers a warning ...
             assert str(wrec.message) == "function is outdated"
             assert len(wrec.warnings) == 1, "Multiple warnings raised"

     (Contributed by Brett Cannon.)

   * The *note textwrap: 177. module can now preserve existing
     whitespace at the beginnings and ends of the newly-created lines
     by specifying `drop_whitespace=False' as an argument:

         >>> S = """This  sentence  has a bunch   of
         ...   extra   whitespace."""
         >>> print textwrap.fill(S, width=15)
         This  sentence
         has a bunch
         of    extra
         whitespace.
         >>> print textwrap.fill(S, drop_whitespace=False, width=15)
         This  sentence
           has a bunch
            of    extra
            whitespace.
         >>>

     (Contributed by Dwayne Bailey; issue 1581073(49).)

   * The *note threading: 179. module API is being changed to use
     properties such as `daemon' instead of `setDaemon()' and
     `isDaemon()' methods, and some methods have been renamed to use
     underscores instead of camel-case; for example, the
     `activeCount()' method is renamed to `active_count()'.  Both the
     2.6 and 3.0 versions of the module support the same properties and
     renamed methods, but don't remove the old methods.  No date has
     been set for the deprecation of the old APIs in Python 3.x; the
     old APIs won't be removed in any 2.x version.  (Carried out by
     several people, most notably Benjamin Peterson.)

     The *note threading: 179. module's `Thread' objects gained an
     `ident' property that returns the thread's identifier, a nonzero
     integer.  (Contributed by Gregory P. Smith; issue 2871(50).)

   * The *note timeit: 17b. module now accepts callables as well as
     strings for the statement being timed and for the setup code.  Two
     convenience functions were added for creating `Timer' instances:
     `repeat(stmt, setup, time, repeat, number)' and `timeit(stmt,
     setup, time, number)' create an instance and call the
     corresponding method. (Contributed by Erik Demaine; issue
     1533909(51).)

   * The *note Tkinter: 17d. module now accepts lists and tuples for
     options, separating the elements by spaces before passing the
     resulting value to Tcl/Tk.  (Contributed by Guilherme Polo; issue
     2906(52).)

   * The *note turtle: 184. module for turtle graphics was greatly
     enhanced by Gregor Lingl.  New features in the module include:

        * Better animation of turtle movement and rotation.

        * Control over turtle movement using the new `delay()',
          `tracer()', and `speed()' methods.

        * The ability to set new shapes for the turtle, and to define a
          new coordinate system.

        * Turtles now have an `undo()' method that can roll back
          actions.

        * Simple support for reacting to input events such as mouse and
          keyboard activity, making it possible to write simple games.

        * A `turtle.cfg' file can be used to customize the starting
          appearance of the turtle's screen.

        * The module's docstrings can be replaced by new docstrings
          that have been translated into another language.

     (issue 1513695(53))

   * An optional `timeout' parameter was added to the *note
     urllib.urlopen(): 354. function and the `urllib.ftpwrapper' class
     constructor, as well as the *note urllib2.urlopen(): 355.
     function.  The parameter specifies a timeout measured in seconds.
     For example:

         >>> u = urllib2.urlopen("http://slow.example.com",
                                 timeout=3)
         Traceback (most recent call last):
           ...
         urllib2.URLError: <urlopen error timed out>
         >>>

     (Added by Facundo Batista.)

   * The Unicode database provided by the *note unicodedata: 186. module
     has been updated to version 5.1.0.  (Updated by Martin von Loewis;
     issue 3811(54).)

   * The *note warnings: 193. module's `formatwarning()' and
     `showwarning()' gained an optional _line_ argument that can be
     used to supply the line of source code.  (Added as part of issue
     1631171(55), which re-implemented part of the *note warnings: 193.
     module in C code.)

     A new function, `catch_warnings()', is a context manager intended
     for testing purposes that lets you temporarily modify the warning
     filters and then restore their original values (issue 3781(56)).

   * The XML-RPC *note SimpleXMLRPCServer: 157. and *note
     DocXMLRPCServer: b6.  classes can now be prevented from
     immediately opening and binding to their socket by passing True as
     the `bind_and_activate' constructor parameter.  This can be used
     to modify the instance's `allow_reuse_address' attribute before
     calling the `server_bind()' and `server_activate()' methods to
     open the socket and begin listening for connections.  (Contributed
     by Peter Parente; issue 1599845(57).)

     *note SimpleXMLRPCServer: 157. also has a `_send_traceback_header'
     attribute; if true, the exception and formatted traceback are
     returned as HTTP headers "X-Exception" and "X-Traceback".  This
     feature is for debugging purposes only and should not be used on
     production servers because the tracebacks might reveal passwords
     or other sensitive information.  (Contributed by Alan McIntyre as
     part of his project for Google's Summer of Code 2007.)

   * The *note xmlrpclib: 1aa. module no longer automatically converts
     *note datetime.date: 356. and *note datetime.time: 357. to the
     `xmlrpclib.DateTime' type; the conversion semantics were not
     necessarily correct for all applications.  Code using *note
     xmlrpclib: 1aa. should convert `date' and *note time: 17a.
     instances. (issue 1330538(58))  The code can also handle dates
     before 1900 (contributed by Ralf Schmitt; issue 2014(59)) and
     64-bit integers represented by using `<i8>' in XML-RPC responses
     (contributed by Riku Lindblad; issue 2985(60)).

   * The *note zipfile: 1ab. module's `ZipFile' class now has
     `extract()' and `extractall()' methods that will unpack a single
     file or all the files in the archive to the current directory, or
     to a specified directory:

         z = zipfile.ZipFile('python-251.zip')

         # Unpack a single file, writing it relative
         # to the /tmp directory.
         z.extract('Python/sysmodule.c', '/tmp')

         # Unpack all the files in the archive.
         z.extractall()

     (Contributed by Alan McIntyre; issue 467924(61).)

     The *note open(): 2d3, `read()' and `extract()' methods can now
     take either a filename or a `ZipInfo' object.  This is useful when
     an archive accidentally contains a duplicated filename.
     (Contributed by Graham Horler; issue 1775025(62).)

     Finally, *note zipfile: 1ab. now supports using Unicode filenames
     for archived files.  (Contributed by Alexey Borzenkov; issue
     1734346(63).)

* Menu:

* The ast module::
* The future_builtins module::
* The json module; JavaScript Object Notation: The json module JavaScript Object Notation.
* The plistlib module; A Property-List Parser: The plistlib module A Property-List Parser.
* ctypes Enhancements::
* Improved SSL Support::

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1736190

  (2) http://www.jcea.es/programacion/pybsddb.htm

  (3) http://bugs.python.org/issue1817

  (4) http://bugs.python.org/issue600362

  (5) http://bugs.python.org/issue1381

  (6) http://bugs.python.org/issue1638033

  (7) http://bugs.python.org/issue1158

  (8) http://www2.hursley.ibm.com/decimal/decarith.html

  (9) http://bugs.python.org/issue1221598

  (10) http://bugs.python.org/issue1739906

  (11) http://bugs.python.org/issue1001604

  (12) http://bugs.python.org/issue2138

  (13) http://bugs.python.org/issue2819

  (14) http://bugs.python.org/issue711019

  (15) http://bugs.python.org/issue1640

  (16) http://bugs.python.org/issue1663329

  (17) http://bugs.python.org/issue1181

  (18) http://bugs.python.org/issue1273829

  (19) http://bugs.python.org/issue1115886

  (20) http://bugs.python.org/issue1339796

  (21) http://bugs.python.org/issue957650

  (22) http://bugs.python.org/issue1393667

  (23) http://bugs.python.org/issue1106316

  (24) http://bugs.python.org/issue2439

  (25) http://bugs.python.org/issue1137

  (26) http://bugs.python.org/issue1727780

  (27) http://bugs.python.org/issue1681432

  (28) http://bugs.python.org/issue846388

  (29) http://bugs.python.org/issue3487

  (30) http://bugs.python.org/issue2250

  (31) http://bugs.python.org/issue1861

  (32) http://bugs.python.org/issue1657

  (33) http://bugs.python.org/issue2663

  (34) http://bugs.python.org/issue1583

  (35) http://bugs.python.org/issue2240

  (36) http://tools.ietf.org/html/rfc2033.html

  (37) http://bugs.python.org/issue957003

  (38) http://tools.ietf.org/html/rfc3207.html

  (39) http://bugs.python.org/issue829951

  (40) http://bugs.python.org/issue1646

  (41) http://bugs.python.org/issue742598

  (42) http://bugs.python.org/issue1193577

  (43) http://bugs.python.org/issue1534

  (44) http://bugs.python.org/issue2898

  (45) http://bugs.python.org/issue1648

  (46) http://bugs.python.org/issue1537850

  (47) http://bugs.python.org/issue2021

  (48) http://bugs.python.org/issue3781

  (49) http://bugs.python.org/issue1581073

  (50) http://bugs.python.org/issue2871

  (51) http://bugs.python.org/issue1533909

  (52) http://bugs.python.org/issue2906

  (53) http://bugs.python.org/issue1513695

  (54) http://bugs.python.org/issue3811

  (55) http://bugs.python.org/issue1631171

  (56) http://bugs.python.org/issue3781

  (57) http://bugs.python.org/issue1599845

  (58) http://bugs.python.org/issue1330538

  (59) http://bugs.python.org/issue2014

  (60) http://bugs.python.org/issue2985

  (61) http://bugs.python.org/issue467924

  (62) http://bugs.python.org/issue1775025

  (63) http://bugs.python.org/issue1734346


File: python.info,  Node: The ast module,  Next: The future_builtins module,  Up: New and Improved Modules<2>

1.2.18.1 The `ast' module
.........................

The *note ast: f. module provides an Abstract Syntax Tree
representation of Python code, and Armin Ronacher contributed a set of
helper functions that perform a variety of common tasks.  These will be
useful for HTML templating packages, code analyzers, and similar tools
that process Python code.

  The `parse()' function takes an expression and returns an AST.  The
`dump()' function outputs a representation of a tree, suitable for
debugging:

    import ast

    t = ast.parse("""
    d = {}
    for i in 'abcdefghijklm':
        d[i + i] = ord(i) - ord('a') + 1
    print d
    """)
    print ast.dump(t)

This outputs a deeply nested tree:

    Module(body=[
      Assign(targets=[
        Name(id='d', ctx=Store())
       ], value=Dict(keys=[], values=[]))
      For(target=Name(id='i', ctx=Store()),
          iter=Str(s='abcdefghijklm'), body=[
        Assign(targets=[
          Subscript(value=
            Name(id='d', ctx=Load()),
              slice=
              Index(value=
                BinOp(left=Name(id='i', ctx=Load()), op=Add(),
                 right=Name(id='i', ctx=Load()))), ctx=Store())
         ], value=
         BinOp(left=
          BinOp(left=
           Call(func=
            Name(id='ord', ctx=Load()), args=[
              Name(id='i', ctx=Load())
             ], keywords=[], starargs=None, kwargs=None),
           op=Sub(), right=Call(func=
            Name(id='ord', ctx=Load()), args=[
              Str(s='a')
             ], keywords=[], starargs=None, kwargs=None)),
           op=Add(), right=Num(n=1)))
        ], orelse=[])
       Print(dest=None, values=[
         Name(id='d', ctx=Load())
       ], nl=True)
     ])

The `literal_eval()' method takes a string or an AST representing a
literal expression, parses and evaluates it, and returns the resulting
value.  A literal expression is a Python expression containing only
strings, numbers, dictionaries, etc. but no statements or function
calls.  If you need to evaluate an expression but cannot accept the
security risk of using an *note eval(): 359. call, `literal_eval()'
will handle it safely:

    >>> literal = '("a", "b", {2:4, 3:8, 1:2})'
    >>> print ast.literal_eval(literal)
    ('a', 'b', {1: 2, 2: 4, 3: 8})
    >>> print ast.literal_eval('"a" + "b"')
    Traceback (most recent call last):
      ...
    ValueError: malformed string

The module also includes `NodeVisitor' and `NodeTransformer' classes
for traversing and modifying an AST, and functions for common
transformations such as changing line numbers.


File: python.info,  Node: The future_builtins module,  Next: The json module JavaScript Object Notation,  Prev: The ast module,  Up: New and Improved Modules<2>

1.2.18.2 The `future_builtins' module
.....................................

Python 3.0 makes many changes to the repertoire of built-in functions,
and most of the changes can't be introduced in the Python 2.x series
because they would break compatibility.  The *note future_builtins: da.
module provides versions of these built-in functions that can be
imported when writing 3.0-compatible code.

  The functions in this module currently include:

   * `ascii(obj)': equivalent to *note repr(): 145.  In Python 3.0,
     *note repr(): 145. will return a Unicode string, while `ascii()'
     will return a pure ASCII bytestring.

   * `filter(predicate, iterable)', `map(func, iterable1, ...)': the
     3.0 versions return iterators, unlike the 2.x builtins which
     return lists.

   * `hex(value)', `oct(value)': instead of calling the *note
     __hex__(): 35b. or *note __oct__(): 35c. methods, these versions
     will call the *note __index__(): 25c. method and convert the
     result to hexadecimal or octal.  *note oct(): 31e. will use the
     new `0o' notation for its result.


File: python.info,  Node: The json module JavaScript Object Notation,  Next: The plistlib module A Property-List Parser,  Prev: The future_builtins module,  Up: New and Improved Modules<2>

1.2.18.3 The `json' module: JavaScript Object Notation
......................................................

The new *note json: fc. module supports the encoding and decoding of
Python types in JSON (Javascript Object Notation). JSON is a
lightweight interchange format often used in web applications. For more
information about JSON, see <http://www.json.org>.

  *note json: fc. comes with support for decoding and encoding most
built-in Python types. The following example encodes and decodes a
dictionary:

    >>> import json
    >>> data = {"spam" : "foo", "parrot" : 42}
    >>> in_json = json.dumps(data) # Encode the data
    >>> in_json
    '{"parrot": 42, "spam": "foo"}'
    >>> json.loads(in_json) # Decode into a Python object
    {"spam" : "foo", "parrot" : 42}

It's also possible to write your own decoders and encoders to support
more types. Pretty-printing of the JSON strings is also supported.

  *note json: fc. (originally called simplejson) was written by Bob
Ippolito.


File: python.info,  Node: The plistlib module A Property-List Parser,  Next: ctypes Enhancements,  Prev: The json module JavaScript Object Notation,  Up: New and Improved Modules<2>

1.2.18.4 The `plistlib' module: A Property-List Parser
......................................................

The `.plist' format is commonly used on Mac OS X to store basic data
types (numbers, strings, lists, and dictionaries) by serializing them
into an XML-based format.  It resembles the XML-RPC serialization of
data types.

  Despite being primarily used on Mac OS X, the format has nothing
Mac-specific about it and the Python implementation works on any
platform that Python supports, so the *note plistlib: 133. module has
been promoted to the standard library.

  Using the module is simple:

    import sys
    import plistlib
    import datetime

    # Create data structure
    data_struct = dict(lastAccessed=datetime.datetime.now(),
                       version=1,
                       categories=('Personal','Shared','Private'))

    # Create string containing XML.
    plist_str = plistlib.writePlistToString(data_struct)
    new_struct = plistlib.readPlistFromString(plist_str)
    print data_struct
    print new_struct

    # Write data structure to a file and read it back.
    plistlib.writePlist(data_struct, '/tmp/customizations.plist')
    new_struct = plistlib.readPlist('/tmp/customizations.plist')

    # read/writePlist accepts file-like objects as well as paths.
    plistlib.writePlist(data_struct, sys.stdout)



File: python.info,  Node: ctypes Enhancements,  Next: Improved SSL Support,  Prev: The plistlib module A Property-List Parser,  Up: New and Improved Modules<2>

1.2.18.5 ctypes Enhancements
............................

Thomas Heller continued to maintain and enhance the *note ctypes: 78.
module.

  *note ctypes: 78. now supports a `c_bool' datatype that represents
the C99 `bool' type.  (Contributed by David Remahl; issue 1649190(1).)

  The *note ctypes: 78. string, buffer and array types have improved
support for extended slicing syntax, where various combinations of
`(start, stop, step)' are supplied.  (Implemented by Thomas Wouters.)

  All *note ctypes: 78. data types now support `from_buffer()' and
`from_buffer_copy()' methods that create a ctypes instance based on a
provided buffer object.  `from_buffer_copy()' copies the contents of
the object, while `from_buffer()' will share the same memory area.

  A new calling convention tells *note ctypes: 78. to clear the `errno'
or Win32 LastError variables at the outset of each wrapped call.
(Implemented by Thomas Heller; issue 1798(2).)

  You can now retrieve the Unix `errno' variable after a function call.
When creating a wrapped function, you can supply `use_errno=True' as a
keyword parameter to the `DLL()' function and then call the
module-level methods `set_errno()' and `get_errno()' to set and
retrieve the error value.

  The Win32 LastError variable is similarly supported by the `DLL()',
`OleDLL()', and `WinDLL()' functions.  You supply `use_last_error=True'
as a keyword parameter and then call the module-level methods
`set_last_error()' and `get_last_error()'.

  The `byref()' function, used to retrieve a pointer to a ctypes
instance, now has an optional _offset_ parameter that is a byte count
that will be added to the returned pointer.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1649190

  (2) http://bugs.python.org/issue1798


File: python.info,  Node: Improved SSL Support,  Prev: ctypes Enhancements,  Up: New and Improved Modules<2>

1.2.18.6 Improved SSL Support
.............................

Bill Janssen made extensive improvements to Python 2.6's support for
the Secure Sockets Layer by adding a new module, *note ssl: 160, that's
built atop the OpenSSL(1) library.  This new module provides more
control over the protocol negotiated, the X.509 certificates used, and
has better support for writing SSL servers (as opposed to clients) in
Python.  The existing SSL support in the *note socket: 15c. module
hasn't been removed and continues to work, though it will be removed in
Python 3.0.

  To use the new module, you must first create a TCP connection in the
usual way and then pass it to the *note ssl.wrap_socket(): 256.
function.  It's possible to specify whether a certificate is required,
and to obtain certificate info by calling the `getpeercert()' method.

See also
........

The documentation for the *note ssl: 160. module.

  ---------- Footnotes ----------

  (1) http://www.openssl.org/


File: python.info,  Node: Deprecations and Removals,  Next: Build and C API Changes<2>,  Prev: New and Improved Modules<2>,  Up: What's New in Python 2 6

1.2.19 Deprecations and Removals
--------------------------------

   * String exceptions have been removed.  Attempting to use them
     raises a *note TypeError: 215.

   * Changes to the `Exception' interface as dictated by PEP 352(1)
     continue to be made.  For 2.6, the `message' attribute is being
     deprecated in favor of the `args' attribute.

   * (3.0-warning mode) Python 3.0 will feature a reorganized standard
     library that will drop many outdated modules and rename others.
     Python 2.6 running in 3.0-warning mode will warn about these
     modules when they are imported.

     The list of deprecated modules is: `audiodev', `bgenlocations',
     *note buildtools: 1d, `bundlebuilder', `Canvas', *note compiler:
     6a, *note dircache: 83, *note dl: b4, *note fpformat: d5, *note
     gensuitemodule: dd, `ihooks', *note imageop: f1, *note imgfile: f3,
     `linuxaudiodev', *note mhlib: 10e, *note mimetools: 10f, *note
     multifile: 118, *note new: 122, `pure', *note statvfs: 162, *note
     sunaudiodev: 169, `test.testall', and `toaiff'.

   * The `gopherlib' module has been removed.

   * The *note MimeWriter: 111. module and *note mimify: 112. module
     have been deprecated; use the *note email: bb.  package instead.

   * The *note md5: 10d. module has been deprecated; use the *note
     hashlib: e6. module instead.

   * The *note posixfile: 137. module has been deprecated; *note
     fcntl.lockf(): 362.  provides better locking.

   * The *note popen2: 134. module has been deprecated; use the *note
     subprocess: 167.  module.

   * The `rgbimg' module has been removed.

   * The *note sets: 14f. module has been deprecated; it's better to
     use the built-in *note set: 363. and *note frozenset: 364. types.

   * The *note sha: 151. module has been deprecated; use the *note
     hashlib: e6. module instead.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0352


File: python.info,  Node: Build and C API Changes<2>,  Next: Porting to Python 2 6,  Prev: Deprecations and Removals,  Up: What's New in Python 2 6

1.2.20 Build and C API Changes
------------------------------

Changes to Python's build process and to the C API include:

   * Python now must be compiled with C89 compilers (after 19 years!).
     This means that the Python source tree has dropped its own
     implementations of `memmove()' and `strerror()', which are in the
     C89 standard library.

   * Python 2.6 can be built with Microsoft Visual Studio 2008 (version
     9.0), and this is the new default compiler.  See the `PCbuild'
     directory for the build files.  (Implemented by Christian Heimes.)

   * On Mac OS X, Python 2.6 can be compiled as a 4-way universal build.
     The *configure* script can take a
     `--with-universal-archs=[32-bit|64-bit|all]' switch, controlling
     whether the binaries are built for 32-bit architectures (x86,
     PowerPC), 64-bit (x86-64 and PPC-64), or both.  (Contributed by
     Ronald Oussoren.)

   * The BerkeleyDB module now has a C API object, available as
     `bsddb.db.api'.   This object can be used by other C extensions
     that wish to use the *note bsddb: 1c. module for their own
     purposes.  (Contributed by Duncan Grisby.)

   * The new buffer interface, previously described in *note the PEP
     3118 section: 312, adds *note PyObject_GetBuffer(): 313. and *note
     PyBuffer_Release(): 366, as well as a few other functions.

   * Python's use of the C stdio library is now thread-safe, or at least
     as thread-safe as the underlying library is.  A long-standing
     potential bug occurred if one thread closed a file object while
     another thread was reading from or writing to the object.  In 2.6
     file objects have a reference count, manipulated by the *note
     PyFile_IncUseCount(): 367. and *note PyFile_DecUseCount(): 368.
     functions.  File objects can't be closed unless the reference count
     is zero.  *note PyFile_IncUseCount(): 367. should be called while
     the GIL is still held, before carrying out an I/O operation using
     the `FILE *' pointer, and *note PyFile_DecUseCount(): 368. should
     be called immediately after the GIL is re-acquired.  (Contributed
     by Antoine Pitrou and Gregory P. Smith.)

   * Importing modules simultaneously in two different threads no longer
     deadlocks; it will now raise an *note ImportError: 369.  A new API
     function, *note PyImport_ImportModuleNoBlock(): 36a, will look for
     a module in `sys.modules' first, then try to import it after
     acquiring an import lock.  If the import lock is held by another
     thread, an *note ImportError: 369. is raised.  (Contributed by
     Christian Heimes.)

   * Several functions return information about the platform's
     floating-point support.  *note PyFloat_GetMax(): 36b. returns the
     maximum representable floating point value, and *note
     PyFloat_GetMin(): 36c. returns the minimum positive value.  *note
     PyFloat_GetInfo(): 36d. returns an object containing more
     information from the `float.h' file, such as `"mant_dig"' (number
     of digits in the mantissa), `"epsilon"' (smallest difference
     between 1.0 and the next largest value representable), and several
     others.  (Contributed by Christian Heimes; issue 1534(1).)

   * C functions and methods that use *note PyComplex_AsCComplex():
     36e. will now accept arguments that have a *note __complex__():
     2e0. method.  In particular, the functions in the *note cmath: 60.
     module will now accept objects with this method.  This is a
     backport of a Python 3.0 change.  (Contributed by Mark Dickinson;
     issue 1675423(2).)

   * Python's C API now includes two functions for case-insensitive
     string comparisons, `PyOS_stricmp(char*, char*)' and
     `PyOS_strnicmp(char*, char*, Py_ssize_t)'.  (Contributed by
     Christian Heimes; issue 1635(3).)

   * Many C extensions define their own little macro for adding
     integers and strings to the module's dictionary in the `init*'
     function.  Python 2.6 finally defines standard macros for adding
     values to a module, *note PyModule_AddStringMacro: 36f.  and
     `PyModule_AddIntMacro()'.  (Contributed by Christian Heimes.)

   * Some macros were renamed in both 3.0 and 2.6 to make it clearer
     that they are macros, not functions.  `Py_Size()' became
     `Py_SIZE()', `Py_Type()' became `Py_TYPE()', and `Py_Refcnt()'
     became `Py_REFCNT()'.  The mixed-case macros are still available
     in Python 2.6 for backward compatibility.  (issue 1629(4))

   * Distutils now places C extensions it builds in a different
     directory when running on a debug version of Python.  (Contributed
     by Collin Winter; issue 1530959(5).)

   * Several basic data types, such as integers and strings, maintain
     internal free lists of objects that can be re-used.  The data
     structures for these free lists now follow a naming convention: the
     variable is always named `free_list', the counter is always named
     `numfree', and a macro `Py<typename>_MAXFREELIST' is always
     defined.

   * A new Makefile target, "make patchcheck", prepares the Python
     source tree for making a patch: it fixes trailing whitespace in
     all modified `.py' files, checks whether the documentation has
     been changed, and reports whether the `Misc/ACKS' and `Misc/NEWS'
     files have been updated.  (Contributed by Brett Cannon.)

     Another new target, "make profile-opt", compiles a Python binary
     using GCC's profile-guided optimization.  It compiles Python with
     profiling enabled, runs the test suite to obtain a set of profiling
     results, and then compiles using these results for optimization.
     (Contributed by Gregory P. Smith.)

* Menu:

* Port-Specific Changes; Windows: Port-Specific Changes Windows<2>.
* Port-Specific Changes; Mac OS X: Port-Specific Changes Mac OS X<2>.
* Port-Specific Changes; IRIX: Port-Specific Changes IRIX.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1534

  (2) http://bugs.python.org/issue1675423

  (3) http://bugs.python.org/issue1635

  (4) http://bugs.python.org/issue1629

  (5) http://bugs.python.org/issue1530959


File: python.info,  Node: Port-Specific Changes Windows<2>,  Next: Port-Specific Changes Mac OS X<2>,  Up: Build and C API Changes<2>

1.2.20.1 Port-Specific Changes: Windows
.......................................

   * The support for Windows 95, 98, ME and NT4 has been dropped.
     Python 2.6 requires at least Windows 2000 SP4.

   * The new default compiler on Windows is Visual Studio 2008 (version
     9.0). The build directories for Visual Studio 2003 (version 7.1)
     and 2005 (version 8.0) were moved into the PC/ directory. The new
     `PCbuild' directory supports cross compilation for X64, debug
     builds and Profile Guided Optimization (PGO). PGO builds are
     roughly 10% faster than normal builds.  (Contributed by Christian
     Heimes with help from Amaury Forgeot d'Arc and Martin von Loewis.)

   * The *note msvcrt: 117. module now supports both the normal and
     wide char variants of the console I/O API.  The `getwch()'
     function reads a keypress and returns a Unicode value, as does the
     `getwche()' function.  The `putwch()' function takes a Unicode
     character and writes it to the console.  (Contributed by Christian
     Heimes.)

   * *note os.path.expandvars(): 34d. will now expand environment
     variables in the form "%var%", and "~user" will be expanded into
     the user's home directory path.  (Contributed by Josiah Carlson;
     issue 957650(1).)

   * The *note socket: 15c. module's socket objects now have an
     `ioctl()' method that provides a limited interface to the
     `WSAIoctl()' system interface.

   * The *note _winreg: 3. module now has a function,
     `ExpandEnvironmentStrings()', that expands environment variable
     references such as `%NAME%' in an input string.  The handle
     objects provided by this module now support the context protocol,
     so they can be used in *note with: 1bd. statements. (Contributed
     by Christian Heimes.)

     *note _winreg: 3. also has better support for x64 systems,
     exposing the `DisableReflectionKey()', `EnableReflectionKey()',
     and `QueryReflectionKey()' functions, which enable and disable
     registry reflection for 32-bit processes running on 64-bit systems.
     (issue 1753245(2))

   * The *note msilib: 116. module's `Record' object gained
     `GetInteger()' and `GetString()' methods that return field values
     as an integer or a string.  (Contributed by Floris Bruynooghe;
     issue 2125(3).)

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue957650

  (2) http://bugs.python.org/issue1753245

  (3) http://bugs.python.org/issue2125


File: python.info,  Node: Port-Specific Changes Mac OS X<2>,  Next: Port-Specific Changes IRIX,  Prev: Port-Specific Changes Windows<2>,  Up: Build and C API Changes<2>

1.2.20.2 Port-Specific Changes: Mac OS X
........................................

   * When compiling a framework build of Python, you can now specify the
     framework name to be used by providing the
     `--with-framework-name=' option to the *configure* script.

   * The `macfs' module has been removed.  This in turn required the
     *note macostools.touched(): 372. function to be removed because it
     depended on the `macfs' module.  (issue 1490190(1))

   * Many other Mac OS modules have been deprecated and will removed in
     Python 3.0: `_builtinSuites', *note aepack: 5, *note aetools: 6,
     *note aetypes: 7, *note applesingle: c, `appletrawmain',
     `appletrunner', `argvemulator', `Audio_mac', *note autoGIL: 14,
     `Carbon', *note cfmfile: 5b, `CodeWarrior', *note ColorPicker: 66,
     *note EasyDialogs: ba, `Explorer', `Finder', *note FrameWork: d7,
     *note findertools: cd, *note ic: ef, `icglue', *note icopen: f0,
     *note macerrors: 104, *note MacOS: 105, `macfs', *note macostools:
     106, *note macresource: 108, *note MiniAEFrame: 113, *note Nav:
     120, `Netscape', `OSATerminology', `pimp', *note PixMapWrapper:
     130, `StdSuites', `SystemEvents', `Terminal', and
     `terminalcommand'.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1490190


File: python.info,  Node: Port-Specific Changes IRIX,  Prev: Port-Specific Changes Mac OS X<2>,  Up: Build and C API Changes<2>

1.2.20.3 Port-Specific Changes: IRIX
....................................

A number of old IRIX-specific modules were deprecated and will be
removed in Python 3.0: *note al: a. and *note AL: 9, *note cd: 5a,
`cddb', `cdplayer', `CL' and `cl', *note DEVICE: 81, `ERRNO', `FILE',
*note FL: ce. and *note fl: cf, *note flp: d0, *note fm: d1, `GET',
`GLWS', *note GL: e2. and *note gl: e1, `IN', `IOCTL', *note jpeg: fb,
`panelparser', `readcd', `SV' and `sv', `torgb', *note videoreader:
191, and `WAIT'.


File: python.info,  Node: Porting to Python 2 6,  Next: Acknowledgements<2>,  Prev: Build and C API Changes<2>,  Up: What's New in Python 2 6

1.2.21 Porting to Python 2.6
----------------------------

This section lists previously described changes and other bugfixes that
may require changes to your code:

   * Classes that aren't supposed to be hashable should set `__hash__ =
     None' in their definitions to indicate the fact.

   * String exceptions have been removed.  Attempting to use them
     raises a *note TypeError: 215.

   * The *note __init__(): 375. method of *note collections.deque: 206.
     now clears any existing contents of the deque before adding
     elements from the iterable.  This change makes the behavior match
     `list.__init__()'.

   * *note object.__init__(): 375. previously accepted arbitrary
     arguments and keyword arguments, ignoring them.  In Python 2.6,
     this is no longer allowed and will result in a *note TypeError:
     215.  This will affect *note __init__(): 375. methods that end up
     calling the corresponding method on *note object: 1ee. (perhaps
     through using *note super(): 376.).  See issue 1683368(1) for
     discussion.

   * The `Decimal' constructor now accepts leading and trailing
     whitespace when passed a string.  Previously it would raise an
     `InvalidOperation' exception.  On the other hand, the
     `create_decimal()' method of `Context' objects now explicitly
     disallows extra whitespace, raising a `ConversionSyntax' exception.

   * Due to an implementation accident, if you passed a file path to
     the built-in  *note __import__(): 377. function, it would actually
     import the specified file.  This was never intended to work,
     however, and the implementation now explicitly checks for this
     case and raises an *note ImportError: 369.

   * C API: the *note PyImport_Import(): 378. and *note
     PyImport_ImportModule(): 379.  functions now default to absolute
     imports, not relative imports.  This will affect C extensions that
     import other modules.

   * C API: extension data types that shouldn't be hashable should
     define their `tp_hash' slot to *note
     PyObject_HashNotImplemented(): 32f.

   * The *note socket: 15c. module exception *note socket.error: 37a.
     now inherits from *note IOError: 1f7.  Previously it wasn't a
     subclass of *note StandardError: 37b. but now it is, through *note
     IOError: 1f7.  (Implemented by Gregory P. Smith; issue 1706815(2).)

   * The *note xmlrpclib: 1aa. module no longer automatically converts
     *note datetime.date: 356. and *note datetime.time: 357. to the
     `xmlrpclib.DateTime' type; the conversion semantics were not
     necessarily correct for all applications.  Code using *note
     xmlrpclib: 1aa. should convert `date' and *note time: 17a.
     instances. (issue 1330538(3))

   * (3.0-warning mode) The `Exception' class now warns when accessed
     using slicing or index access; having `Exception' behave like a
     tuple is being phased out.

   * (3.0-warning mode) inequality comparisons between two dictionaries
     or two objects that don't implement comparison methods are reported
     as warnings.  `dict1 == dict2' still works, but `dict1 < dict2' is
     being phased out.

     Comparisons between cells, which are an implementation detail of
     Python's scoping rules, also cause warnings because such
     comparisons are forbidden entirely in 3.0.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue1683368

  (2) http://bugs.python.org/issue1706815

  (3) http://bugs.python.org/issue1330538


File: python.info,  Node: Acknowledgements<2>,  Prev: Porting to Python 2 6,  Up: What's New in Python 2 6

1.2.22 Acknowledgements
-----------------------

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim
Jewett, Kent Johnson, Chris Lambacher,  Martin Michlmayr, Antoine
Pitrou, Brian Warner.


File: python.info,  Node: What's New in Python 2 5,  Next: What's New in Python 2 4,  Prev: What's New in Python 2 6,  Up: What's New in Python

1.3 What's New in Python 2.5
============================

     Author: A.M. Kuchling

  This article explains the new features in Python 2.5.  The final
release of Python 2.5 is scheduled for August 2006; PEP 356(1)
describes the planned release schedule.

  The changes in Python 2.5 are an interesting mix of language and
library improvements. The library enhancements will be more important
to Python's user community, I think, because several widely-useful
packages were added.  New modules include ElementTree for XML
processing (`xml.etree'), the SQLite database module (`sqlite'), and
the *note ctypes: 78.  module for calling C functions.

  The language changes are of middling significance.  Some pleasant new
features were added, but most of them aren't features that you'll use
every day.  Conditional expressions were finally added to the language
using a novel syntax; see section *note PEP 308; Conditional
Expressions: 380.  The new '*note with: 1bd.' statement will make
writing cleanup code easier (section *note PEP 343; The 'with'
statement: 381.).  Values can now be passed into generators (section
*note PEP 342; New Generator Features: 382.).  Imports are now visible
as either absolute or relative (section *note PEP 328; Absolute and
Relative Imports: 383.).  Some corner cases of exception handling are
handled better (section *note PEP 341; Unified try/except/finally:
384.).  All these improvements are worthwhile, but they're improvements
to one specific language feature or another; none of them are broad
modifications to Python's semantics.

  As well as the language and library additions, other improvements and
bugfixes were made throughout the source tree.  A search through the
SVN change logs finds there were 353 patches applied and 458 bugs fixed
between Python 2.4 and 2.5.  (Both figures are likely to be
underestimates.)

  This article doesn't try to be a complete specification of the new
features; instead changes are briefly introduced using helpful
examples.  For full details, you should always refer to the
documentation for Python 2.5 at <http://docs.python.org>. If you want
to understand the complete implementation and design rationale, refer
to the PEP for a particular new feature.

  Comments, suggestions, and error reports for this document are
welcome; please e-mail them to the author or open a bug in the Python
bug tracker.

* Menu:

* PEP 308; Conditional Expressions: PEP 308 Conditional Expressions.
* PEP 309; Partial Function Application: PEP 309 Partial Function Application.
* PEP 314; Metadata for Python Software Packages v1.1: PEP 314 Metadata for Python Software Packages v1 1.
* PEP 328; Absolute and Relative Imports: PEP 328 Absolute and Relative Imports.
* PEP 338; Executing Modules as Scripts: PEP 338 Executing Modules as Scripts.
* PEP 341; Unified try/except/finally: PEP 341 Unified try/except/finally.
* PEP 342; New Generator Features: PEP 342 New Generator Features.
* PEP 343; The 'with' statement: PEP 343 The 'with' statement<2>.
* PEP 352; Exceptions as New-Style Classes: PEP 352 Exceptions as New-Style Classes.
* PEP 353; Using ssize_t as the index type: PEP 353 Using ssize_t as the index type.
* PEP 357; The '__index__' method: PEP 357 The '__index__' method.
* Other Language Changes: Other Language Changes<3>.
* New, Improved, and Removed Modules: New Improved and Removed Modules.
* Build and C API Changes: Build and C API Changes<3>.
* Porting to Python 2.5: Porting to Python 2 5.
* Acknowledgements: Acknowledgements<3>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0356


File: python.info,  Node: PEP 308 Conditional Expressions,  Next: PEP 309 Partial Function Application,  Up: What's New in Python 2 5

1.3.1 PEP 308: Conditional Expressions
--------------------------------------

For a long time, people have been requesting a way to write conditional
expressions, which are expressions that return value A or value B
depending on whether a Boolean value is true or false.  A conditional
expression lets you write a single assignment statement that has the
same effect as the following:

    if condition:
        x = true_value
    else:
        x = false_value

There have been endless tedious discussions of syntax on both
python-dev and comp.lang.python.  A vote was even held that found the
majority of voters wanted conditional expressions in some form, but
there was no syntax that was preferred by a clear majority. Candidates
included C's `cond ? true_v : false_v', `if cond then true_v else
false_v', and 16 other variations.

  Guido van Rossum eventually chose a surprising syntax:

    x = true_value if condition else false_value

Evaluation is still lazy as in existing Boolean expressions, so the
order of evaluation jumps around a bit.  The _condition_ expression in
the middle is evaluated first, and the _true_value_ expression is
evaluated only if the condition was true.  Similarly, the _false_value_
expression is only evaluated when the condition is false.

  This syntax may seem strange and backwards; why does the condition go
in the _middle_ of the expression, and not in the front as in C's `c ?
x : y'?  The decision was checked by applying the new syntax to the
modules in the standard library and seeing how the resulting code read.
In many cases where a conditional expression is used, one value seems
to be the 'common case' and one value is an 'exceptional case', used
only on rarer occasions when the condition isn't met.  The conditional
syntax makes this pattern a bit more obvious:

    contents = ((doc + '\n') if doc else '')

I read the above statement as meaning "here _contents_ is  usually
assigned a value of `doc+'\n''; sometimes  _doc_ is empty, in which
special case an empty string is returned."   I doubt I will use
conditional expressions very often where there  isn't a clear common
and uncommon case.

  There was some discussion of whether the language should require
surrounding conditional expressions with parentheses.  The decision was
made to _not_ require parentheses in the Python language's grammar, but
as a matter of style I think you should always use them. Consider these
two statements:

    # First version -- no parens
    level = 1 if logging else 0

    # Second version -- with parens
    level = (1 if logging else 0)

In the first version, I think a reader's eye might group the statement
into 'level = 1', 'if logging', 'else 0', and think that the condition
decides whether the assignment to _level_ is performed.  The second
version reads better, in my opinion, because it makes it clear that the
assignment is always performed and the choice is being made between two
values.

  Another reason for including the brackets: a few odd combinations of
list comprehensions and lambdas could look like incorrect conditional
expressions.  See PEP 308(1) for some examples.  If you put parentheses
around your conditional expressions, you won't run into this case.

See also
........

PEP 308(2) - Conditional Expressions
     PEP written by Guido van Rossum and Raymond D. Hettinger;
     implemented by Thomas Wouters.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0308

  (2) http://www.python.org/dev/peps/pep-0308


File: python.info,  Node: PEP 309 Partial Function Application,  Next: PEP 314 Metadata for Python Software Packages v1 1,  Prev: PEP 308 Conditional Expressions,  Up: What's New in Python 2 5

1.3.2 PEP 309: Partial Function Application
-------------------------------------------

The *note functools: d9. module is intended to contain tools for
functional-style programming.

  One useful tool in this module is the `partial()' function. For
programs written in a functional style, you'll sometimes want to
construct variants of existing functions that have some of the
parameters filled in.  Consider a Python function `f(a, b, c)'; you
could create a new function `g(b, c)' that was equivalent to `f(1, b,
c)'.  This is called "partial function application".

  `partial()' takes the arguments `(function, arg1, arg2, ...
kwarg1=value1, kwarg2=value2)'.  The resulting object is callable, so
you can just call it to invoke _function_ with the filled-in arguments.

  Here's a small but realistic example:

    import functools

    def log (message, subsystem):
        "Write the contents of 'message' to the specified subsystem."
        print '%s: %s' % (subsystem, message)
        ...

    server_log = functools.partial(log, subsystem='server')
    server_log('Unable to open socket')

Here's another example, from a program that uses PyGTK.  Here a context-
sensitive pop-up menu is being constructed dynamically.  The callback
provided for the menu option is a partially applied version of the
`open_item()' method, where the first argument has been provided.

    ...
    class Application:
        def open_item(self, path):
           ...
        def init (self):
            open_func = functools.partial(self.open_item, item_path)
            popup_menu.append( ("Open", open_func, 1) )

Another function in the *note functools: d9. module is the
`update_wrapper(wrapper, wrapped)()' function that helps you write well-
behaved decorators.  `update_wrapper()' copies the name, module, and
docstring attribute to a wrapper function so that tracebacks inside the
wrapped function are easier to understand.  For example, you might
write:

    def my_decorator(f):
        def wrapper(*args, **kwds):
            print 'Calling decorated function'
            return f(*args, **kwds)
        functools.update_wrapper(wrapper, f)
        return wrapper

`wraps()' is a decorator that can be used inside your own decorators to
copy the wrapped function's information.  An alternate  version of the
previous example would be:

    def my_decorator(f):
        @functools.wraps(f)
        def wrapper(*args, **kwds):
            print 'Calling decorated function'
            return f(*args, **kwds)
        return wrapper


See also
........

PEP 309(1) - Partial Function Application
     PEP proposed and written by Peter Harris; implemented by Hye-Shik
     Chang and Nick Coghlan, with adaptations by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0309


File: python.info,  Node: PEP 314 Metadata for Python Software Packages v1 1,  Next: PEP 328 Absolute and Relative Imports,  Prev: PEP 309 Partial Function Application,  Up: What's New in Python 2 5

1.3.3 PEP 314: Metadata for Python Software Packages v1.1
---------------------------------------------------------

Some simple dependency support was added to Distutils.  The `setup()'
function now has `requires', `provides', and `obsoletes' keyword
parameters.  When you build a source distribution using the `sdist'
command, the dependency information will be recorded in the `PKG-INFO'
file.

  Another new keyword parameter is `download_url', which should be set
to a URL for the package's source code.  This means it's now possible
to look up an entry in the package index, determine the dependencies
for a package, and download the required packages.

    VERSION = '1.0'
    setup(name='PyPackage',
          version=VERSION,
          requires=['numarray', 'zlib (>=1.1.4)'],
          obsoletes=['OldPackage']
          download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'
                        % VERSION),
         )

Another new enhancement to the Python package index at
<http://cheeseshop.python.org> is storing source and binary archives
for a package.  The new *upload* Distutils command will upload a
package to the repository.

  Before a package can be uploaded, you must be able to build a
distribution using the *sdist* Distutils command.  Once that works, you
can run `python setup.py upload' to add your package to the PyPI
archive.  Optionally you can GPG-sign the package by supplying the
`--sign' and `--identity' options.

  Package uploading was implemented by Martin von Löwis and Richard
Jones.

See also
........

PEP 314(1) - Metadata for Python Software Packages v1.1
     PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred
     Drake; implemented by Richard Jones and Fred Drake.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0314


File: python.info,  Node: PEP 328 Absolute and Relative Imports,  Next: PEP 338 Executing Modules as Scripts,  Prev: PEP 314 Metadata for Python Software Packages v1 1,  Up: What's New in Python 2 5

1.3.4 PEP 328: Absolute and Relative Imports
--------------------------------------------

The simpler part of PEP 328 was implemented in Python 2.4: parentheses
could now be used to enclose the names imported from a module using the
`from ... import ...' statement, making it easier to import many
different names.

  The more complicated part has been implemented in Python 2.5:
importing a module can be specified to use absolute or package-relative
imports.  The plan is to move toward making absolute imports the
default in future versions of Python.

  Let's say you have a package directory like this:

    pkg/
    pkg/__init__.py
    pkg/main.py
    pkg/string.py

This defines a package named `pkg' containing the `pkg.main' and
`pkg.string' submodules.

  Consider the code in the `main.py' module.  What happens if it
executes the statement `import string'?  In Python 2.4 and earlier, it
will first look in the package's directory to perform a relative
import, finds `pkg/string.py', imports the contents of that file as the
`pkg.string' module, and that module is bound to the name `string' in
the `pkg.main' module's namespace.

  That's fine if `pkg.string' was what you wanted.  But what if you
wanted Python's standard *note string: 163. module?  There's no clean
way to ignore `pkg.string' and look for the standard module; generally
you had to look at the contents of `sys.modules', which is slightly
unclean.    Holger Krekel's `py.std' package provides a tidier way to
perform imports from the standard library, `import py ;
py.std.string.join()', but that package isn't available on all Python
installations.

  Reading code which relies on relative imports is also less clear,
because a reader may be confused about which module, *note string: 163.
or `pkg.string', is intended to be used.  Python users soon learned not
to duplicate the names of standard library modules in the names of
their packages' submodules, but you can't protect against having your
submodule's name being used for a new module added in a future version
of Python.

  In Python 2.5, you can switch *note import: 1f1.'s behaviour to
absolute imports using a `from __future__ import absolute_import'
directive.  This absolute- import behaviour will become the default in
a future version (probably Python 2.7).  Once absolute imports  are the
default, `import string' will always find the standard library's
version. It's suggested that users should begin using absolute imports
as much as possible, so it's preferable to begin writing `from pkg
import string' in your code.

  Relative imports are still possible by adding a leading period  to
the module name when using the `from ... import' form:

    # Import names from pkg.string
    from .string import name1, name2
    # Import pkg.string
    from . import string

This imports the *note string: 163. module relative to the current
package, so in `pkg.main' this will import _name1_ and _name2_ from
`pkg.string'.  Additional leading periods perform the relative import
starting from the parent of the current package.  For example, code in
the `A.B.C' module can do:

    from . import D                 # Imports A.B.D
    from .. import E                # Imports A.E
    from ..F import G               # Imports A.F.G

Leading periods cannot be used with the `import modname'  form of the
import statement, only the `from ... import' form.

See also
........

PEP 328(1) - Imports: Multi-Line and Absolute/Relative
     PEP written by Aahz; implemented by Thomas Wouters.

<http://codespeak.net/py/current/doc/index.html>
     The py library by Holger Krekel, which contains the `py.std'
     package.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0328


File: python.info,  Node: PEP 338 Executing Modules as Scripts,  Next: PEP 341 Unified try/except/finally,  Prev: PEP 328 Absolute and Relative Imports,  Up: What's New in Python 2 5

1.3.5 PEP 338: Executing Modules as Scripts
-------------------------------------------

The *note -m: 2f4. switch added in Python 2.4 to execute a module as a
script gained a few more abilities.  Instead of being implemented in C
code inside the Python interpreter, the switch now uses an
implementation in a new module, *note runpy: 14b.

  The *note runpy: 14b. module implements a more sophisticated import
mechanism so that it's now possible to run modules in a package such as
`pychecker.checker'.  The module also supports alternative import
mechanisms such as the *note zipimport: 1ac. module.  This means you
can add a .zip archive's path to `sys.path' and then use the *note -m:
2f4. switch to execute code from the archive.

See also
........

PEP 338(1) - Executing modules as scripts
     PEP written and  implemented by Nick Coghlan.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0338


File: python.info,  Node: PEP 341 Unified try/except/finally,  Next: PEP 342 New Generator Features,  Prev: PEP 338 Executing Modules as Scripts,  Up: What's New in Python 2 5

1.3.6 PEP 341: Unified try/except/finally
-----------------------------------------

Until Python 2.5, the *note try: 38e. statement came in two flavours.
You could use a *note finally: 38f. block to ensure that code is always
executed, or one or more *note except: 390. blocks to catch  specific
exceptions.  You couldn't combine both *note except: 390. blocks and a
*note finally: 38f. block, because generating the right bytecode for
the combined version was complicated and it wasn't clear what the
semantics of the combined statement should be.

  Guido van Rossum spent some time working with Java, which does
support the equivalent of combining *note except: 390. blocks and a
*note finally: 38f. block, and this clarified what the statement should
mean.  In Python 2.5, you can now write:

    try:
        block-1 ...
    except Exception1:
        handler-1 ...
    except Exception2:
        handler-2 ...
    else:
        else-block
    finally:
        final-block

The code in _block-1_ is executed.  If the code raises an exception,
the various *note except: 390. blocks are tested: if the exception is
of class `Exception1', _handler-1_ is executed; otherwise if it's of
class `Exception2', _handler-2_ is executed, and so forth.  If no
exception is raised, the _else-block_ is executed.

  No matter what happened previously, the _final-block_ is executed
once the code block is complete and any raised exceptions handled. Even
if there's an error in an exception handler or the _else-block_ and a
new exception is raised, the code in the _final-block_ is still run.

See also
........

PEP 341(1) - Unifying try-except and try-finally
     PEP written by Georg Brandl;  implementation by Thomas Lee.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0341


File: python.info,  Node: PEP 342 New Generator Features,  Next: PEP 343 The 'with' statement<2>,  Prev: PEP 341 Unified try/except/finally,  Up: What's New in Python 2 5

1.3.7 PEP 342: New Generator Features
-------------------------------------

Python 2.5 adds a simple way to pass values _into_ a generator. As
introduced in Python 2.3, generators only produce output; once a
generator's code was invoked to create an iterator, there was no way to
pass any new information into the function when its execution is
resumed.  Sometimes the ability to pass in some information would be
useful.  Hackish solutions to this include making the generator's code
look at a global variable and then changing the global variable's
value, or passing in some mutable object that callers then modify.

  To refresh your memory of basic generators, here's a simple example:

    def counter (maximum):
        i = 0
        while i < maximum:
            yield i
            i += 1

When you call `counter(10)', the result is an iterator that returns the
values from 0 up to 9.  On encountering the *note yield: 2f0.
statement, the iterator returns the provided value and suspends the
function's execution, preserving the local variables. Execution resumes
on the following call to the iterator's *note next(): 392. method,
picking up after the *note yield: 2f0. statement.

  In Python 2.3, *note yield: 2f0. was a statement; it didn't return
any value.  In 2.5, *note yield: 2f0. is now an expression, returning a
value that can be assigned to a variable or otherwise operated on:

    val = (yield i)

I recommend that you always put parentheses around a *note yield: 2f0.
expression when you're doing something with the returned value, as in
the above example.  The parentheses aren't always necessary, but it's
easier to always add them instead of having to remember when they're
needed.

  ( PEP 342(1) explains the exact rules, which are that a *note yield:
2f0.-expression must always be parenthesized except when it occurs at
the top-level expression on the right-hand side of an assignment.  This
means you can write `val = yield i' but have to use parentheses when
there's an operation, as in `val = (yield i) + 12'.)

  Values are sent into a generator by calling its `send(value)()'
method.  The generator's code is then resumed and the *note yield: 2f0.
expression returns the specified _value_.  If the regular *note next():
392. method is called, the *note yield: 2f0. returns *note None: 393.

  Here's the previous example, modified to allow changing the value of
the internal counter.

    def counter (maximum):
        i = 0
        while i < maximum:
            val = (yield i)
            # If value provided, change counter
            if val is not None:
                i = val
            else:
                i += 1

And here's an example of changing the counter:

    >>> it = counter(10)
    >>> print it.next()
    0
    >>> print it.next()
    1
    >>> print it.send(8)
    8
    >>> print it.next()
    9
    >>> print it.next()
    Traceback (most recent call last):
      File "t.py", line 15, in ?
        print it.next()
    StopIteration

*note yield: 2f0. will usually return *note None: 393, so you should
always check for this case.  Don't just use its value in expressions
unless you're sure that the `send()' method will be the only method
used to resume your generator function.

  In addition to `send()', there are two other new methods on
generators:

   * `throw(type, value=None, traceback=None)()' is used to raise an
     exception inside the generator; the exception is raised by the
     *note yield: 2f0. expression where the generator's execution is
     paused.

   * `close()' raises a new *note GeneratorExit: 330. exception inside
     the generator to terminate the iteration.  On receiving this
     exception, the generator's code must either raise *note
     GeneratorExit: 330. or *note StopIteration: 32c.  Catching the
     *note GeneratorExit: 330. exception and returning a value is
     illegal and will trigger a *note RuntimeError: 394.; if the
     function raises some other exception, that exception is propagated
     to the caller.  `close()' will also be called by Python's garbage
     collector when the generator is garbage-collected.

     If you need to run cleanup code when a *note GeneratorExit: 330.
     occurs, I suggest using a `try: ... finally:' suite instead of
     catching *note GeneratorExit: 330.

  The cumulative effect of these changes is to turn generators from
one-way producers of information into both producers and consumers.

  Generators also become _coroutines_, a more generalized form of
subroutines.  Subroutines are entered at one point and exited at
another point (the top of the function, and a *note return: 2ed.
statement), but coroutines can be entered, exited, and resumed at many
different points (the *note yield: 2f0. statements).  We'll have to
figure out patterns for using coroutines effectively in Python.

  The addition of the `close()' method has one side effect that isn't
obvious.  `close()' is called when a generator is garbage-collected, so
this means the generator's code gets one last chance to run before the
generator is destroyed.  This last chance means that `try...finally'
statements in generators can now be guaranteed to work; the *note
finally: 38f. clause will now always get a chance to run.  The
syntactic restriction that you couldn't mix *note yield: 2f0.
statements with a `try...finally' suite has therefore been removed.
This seems like a minor bit of language trivia, but using generators and
`try...finally' is actually necessary in order to implement the *note
with: 1bd. statement described by PEP 343.  I'll look at this new
statement in the following  section.

  Another even more esoteric effect of this change: previously, the
`gi_frame' attribute of a generator was always a frame object. It's now
possible for `gi_frame' to be `None' once the generator has been
exhausted.

See also
........

PEP 342(2) - Coroutines via Enhanced Generators
     PEP written by  Guido van Rossum and Phillip J. Eby; implemented
     by Phillip J.  Eby.  Includes examples of  some fancier uses of
     generators as coroutines.

     Earlier versions of these features were proposed in PEP 288(3) by
     Raymond Hettinger and PEP 325(4) by Samuele Pedroni.

<http://en.wikipedia.org/wiki/Coroutine>
     The Wikipedia entry for  coroutines.

<http://www.sidhe.org/~dan/blog/archives/000178.html>
     An explanation of coroutines from a Perl point of view, written by
     Dan Sugalski.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0342

  (2) http://www.python.org/dev/peps/pep-0342

  (3) http://www.python.org/dev/peps/pep-0288

  (4) http://www.python.org/dev/peps/pep-0325


File: python.info,  Node: PEP 343 The 'with' statement<2>,  Next: PEP 352 Exceptions as New-Style Classes,  Prev: PEP 342 New Generator Features,  Up: What's New in Python 2 5

1.3.8 PEP 343: The 'with' statement
-----------------------------------

The '*note with: 1bd.' statement clarifies code that previously would
use `try...finally' blocks to ensure that clean-up code is executed.
In this section, I'll discuss the statement as it will commonly be
used.  In the next section, I'll examine the implementation details and
show how to write objects for use with this statement.

  The '*note with: 1bd.' statement is a new control-flow structure
whose basic structure is:

    with expression [as variable]:
        with-block

The expression is evaluated, and it should result in an object that
supports the context management protocol (that is, has *note
__enter__(): 1fc. and *note __exit__(): 1fd.  methods.

  The object's *note __enter__(): 1fc. is called before _with-block_ is
executed and therefore can run set-up code. It also may return a value
that is bound to the name _variable_, if given.  (Note carefully that
_variable_ is _not_ assigned the result of _expression_.)

  After execution of the _with-block_ is finished, the object's *note
__exit__(): 1fd.  method is called, even if the block raised an
exception, and can therefore run clean-up code.

  To enable the statement in Python 2.5, you need to add the following
directive to your module:

    from __future__ import with_statement

The statement will always be enabled in Python 2.6.

  Some standard Python objects now support the context management
protocol and can be used with the '*note with: 1bd.' statement. File
objects are one example:

    with open('/etc/passwd', 'r') as f:
        for line in f:
            print line
            ... more processing code ...

After this statement has executed, the file object in _f_ will have been
automatically closed, even if the *note for: 2e9. loop raised an
exception part- way through the block.

     Note: In this case, _f_ is the same object created by *note
     open(): 2d3, because `file.__enter__()' returns _self_.

  The *note threading: 179. module's locks and condition variables
also support the '*note with: 1bd.' statement:

    lock = threading.Lock()
    with lock:
        # Critical section of code
        ...

The lock is acquired before the block is executed and always released
once  the block is complete.

  The new `localcontext()' function in the *note decimal: 80. module
makes it easy to save and restore the current decimal context, which
encapsulates the desired precision and rounding characteristics for
computations:

    from decimal import Decimal, Context, localcontext

    # Displays with default precision of 28 digits
    v = Decimal('578')
    print v.sqrt()

    with localcontext(Context(prec=16)):
        # All code in this block uses a precision of 16 digits.
        # The original context is restored on exiting the block.
        print v.sqrt()


* Menu:

* Writing Context Managers: Writing Context Managers<2>.
* The contextlib module: The contextlib module<2>.


File: python.info,  Node: Writing Context Managers<2>,  Next: The contextlib module<2>,  Up: PEP 343 The 'with' statement<2>

1.3.8.1 Writing Context Managers
................................

Under the hood, the '*note with: 1bd.' statement is fairly complicated.
Most people will only use '*note with: 1bd.' in company with existing
objects and don't need to know these details, so you can skip the rest
of this section if you like.  Authors of new objects will need to
understand the details of the underlying implementation and should keep
reading.

  A high-level explanation of the context management protocol is:

   * The expression is evaluated and should result in an object called
     a "context manager".  The context manager must have *note
     __enter__(): 1fc. and *note __exit__(): 1fd.  methods.

   * The context manager's *note __enter__(): 1fc. method is called.
     The value returned is assigned to _VAR_.  If no `'as VAR'' clause
     is present, the value is simply discarded.

   * The code in _BLOCK_ is executed.

   * If _BLOCK_ raises an exception, the `__exit__(type, value,
     traceback)()' is called with the exception details, the same
     values returned by *note sys.exc_info(): 2ec.  The method's return
     value controls whether the exception is re-raised: any false value
     re-raises the exception, and `True' will result in suppressing it.
     You'll only rarely want to suppress the exception, because if you
     do the author of the code containing the '*note with: 1bd.'
     statement will never realize anything went wrong.

   * If _BLOCK_ didn't raise an exception,  the *note __exit__(): 1fd.
     method is still called, but _type_, _value_, and _traceback_ are
     all `None'.

  Let's think through an example.  I won't present detailed code but
will only sketch the methods necessary for a database that supports
transactions.

  (For people unfamiliar with database terminology: a set of changes to
the database are grouped into a transaction.  Transactions can be
either committed, meaning that all the changes are written into the
database, or rolled back, meaning that the changes are all discarded
and the database is unchanged.  See any database textbook for more
information.)

  Let's assume there's an object representing a database connection.
Our goal will be to let the user write code like this:

    db_connection = DatabaseConnection()
    with db_connection as cursor:
        cursor.execute('insert into ...')
        cursor.execute('delete from ...')
        # ... more operations ...

The transaction should be committed if the code in the block runs
flawlessly or rolled back if there's an exception. Here's the basic
interface for `DatabaseConnection' that I'll assume:

    class DatabaseConnection:
        # Database interface
        def cursor (self):
            "Returns a cursor object and starts a new transaction"
        def commit (self):
            "Commits current transaction"
        def rollback (self):
            "Rolls back current transaction"

The *note __enter__(): 1fc. method is pretty easy, having only to start
a new transaction.  For this application the resulting cursor object
would be a useful result, so the method will return it.  The user can
then add `as cursor' to their '*note with: 1bd.' statement to bind the
cursor to a variable name.

    class DatabaseConnection:
        ...
        def __enter__ (self):
            # Code to start a new transaction
            cursor = self.cursor()
            return cursor

The *note __exit__(): 1fd. method is the most complicated because it's
where most of the work has to be done.  The method has to check if an
exception occurred.  If there was no exception, the transaction is
committed.  The transaction is rolled back if there was an exception.

  In the code below, execution will just fall off the end of the
function, returning the default value of `None'.  `None' is false, so
the exception will be re-raised automatically.  If you wished, you
could be more explicit and add a *note return: 2ed. statement at the
marked location.

    class DatabaseConnection:
        ...
        def __exit__ (self, type, value, tb):
            if tb is None:
                # No exception, so commit
                self.commit()
            else:
                # Exception occurred, so rollback.
                self.rollback()
                # return False



File: python.info,  Node: The contextlib module<2>,  Prev: Writing Context Managers<2>,  Up: PEP 343 The 'with' statement<2>

1.3.8.2 The contextlib module
.............................

The new *note contextlib: 6e. module provides some functions and a
decorator that are useful for writing objects for use with the '*note
with: 1bd.' statement.

  The decorator is called `contextmanager()', and lets you write a
single generator function instead of defining a new class.  The
generator should yield exactly one value.  The code up to the *note
yield: 2f0. will be executed as the *note __enter__(): 1fc. method, and
the value yielded will be the method's return value that will get bound
to the variable in the '*note with: 1bd.' statement's *note as: 2f1.
clause, if any.  The code after the *note yield: 2f0. will be executed
in the *note __exit__(): 1fd. method.  Any exception raised in the
block will be raised by the *note yield: 2f0. statement.

  Our database example from the previous section could be written
using this decorator as:

    from contextlib import contextmanager

    @contextmanager
    def db_transaction (connection):
        cursor = connection.cursor()
        try:
            yield cursor
        except:
            connection.rollback()
            raise
        else:
            connection.commit()

    db = DatabaseConnection()
    with db_transaction(db) as cursor:
        ...

The *note contextlib: 6e. module also has a `nested(mgr1, mgr2, ...)()'
function that combines a number of context managers so you don't need
to write nested '*note with: 1bd.' statements.  In this example, the
single '*note with: 1bd.'  statement both starts a database transaction
and acquires a thread lock:

    lock = threading.Lock()
    with nested (db_transaction(db), lock) as (cursor, locked):
        ...

Finally, the `closing(object)()' function returns _object_ so that it
can be bound to a variable, and calls `object.close' at the end of the
block.

    import urllib, sys
    from contextlib import closing

    with closing(urllib.urlopen('http://www.yahoo.com')) as f:
        for line in f:
            sys.stdout.write(line)


See also
........

PEP 343(1) - The "with" statement
     PEP written by Guido van Rossum and Nick Coghlan; implemented by
     Mike Bland, Guido van Rossum, and Neal Norwitz.  The PEP shows the
     code generated for a '*note with: 1bd.' statement, which can be
     helpful in learning how the statement works.

  The documentation  for the *note contextlib: 6e. module.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0343


File: python.info,  Node: PEP 352 Exceptions as New-Style Classes,  Next: PEP 353 Using ssize_t as the index type,  Prev: PEP 343 The 'with' statement<2>,  Up: What's New in Python 2 5

1.3.9 PEP 352: Exceptions as New-Style Classes
----------------------------------------------

Exception classes can now be new-style classes, not just classic
classes, and the built-in *note Exception: 332. class and all the
standard built-in exceptions (*note NameError: 39c, *note ValueError:
233, etc.) are now new-style classes.

  The inheritance hierarchy for exceptions has been rearranged a bit.
In 2.5, the inheritance relationships are:

    BaseException       # New in Python 2.5
    |- KeyboardInterrupt
    |- SystemExit
    |- Exception
       |- (all other current built-in exceptions)

This rearrangement was done because people often want to catch all
exceptions that indicate program errors.  *note KeyboardInterrupt: 24e.
and *note SystemExit: 32b.  aren't errors, though, and usually
represent an explicit action such as the user hitting Control-C or code
calling *note sys.exit(): 2a4.  A bare `except:' will catch all
exceptions, so you commonly need to list *note KeyboardInterrupt: 24e.
and *note SystemExit: 32b. in order to re-raise them.  The usual
pattern is:

    try:
        ...
    except (KeyboardInterrupt, SystemExit):
        raise
    except:
        # Log error...
        # Continue running program...

In Python 2.5, you can now write `except Exception' to achieve the same
result, catching all the exceptions that usually indicate errors  but
leaving *note KeyboardInterrupt: 24e. and *note SystemExit: 32b. alone.
As in previous versions, a bare `except:' still catches all exceptions.

  The goal for Python 3.0 is to require any class raised as an
exception to derive from *note BaseException: 331. or some descendant
of *note BaseException: 331, and future releases in the Python 2.x
series may begin to enforce this constraint.  Therefore, I suggest you
begin making all your exception classes derive from *note Exception:
332. now.  It's been suggested that the bare `except:' form should be
removed in Python 3.0, but Guido van Rossum hasn't decided whether to
do this or not.

  Raising of strings as exceptions, as in the statement `raise "Error
occurred"', is deprecated in Python 2.5 and will trigger a warning.
The aim is to be able to remove the string-exception feature in a few
releases.

See also
........

PEP 352(1) - Required Superclass for Exceptions
     PEP written by  Brett Cannon and Guido van Rossum; implemented by
     Brett Cannon.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0352


File: python.info,  Node: PEP 353 Using ssize_t as the index type,  Next: PEP 357 The '__index__' method,  Prev: PEP 352 Exceptions as New-Style Classes,  Up: What's New in Python 2 5

1.3.10 PEP 353: Using ssize_t as the index type
-----------------------------------------------

A wide-ranging change to Python's C API, using a new  `Py_ssize_t' type
definition instead of `int',  will permit the interpreter to handle more
data on 64-bit platforms. This change doesn't affect Python's capacity
on 32-bit platforms.

  Various pieces of the Python interpreter used C's `int' type to store
sizes or counts; for example, the number of items in a list or tuple
were stored in an `int'.  The C compilers for most 64-bit platforms
still define `int' as a 32-bit type, so that meant that lists could
only hold up to `2**31 - 1' = 2147483647 items. (There are actually a
few different programming models that 64-bit C compilers can use - see
<http://www.unix.org/version2/whatsnew/lp64_wp.html> for a discussion -
but the most commonly available model leaves `int' as 32 bits.)

  A limit of 2147483647 items doesn't really matter on a 32-bit
platform because you'll run out of memory before hitting the length
limit. Each list item requires space for a pointer, which is 4 bytes,
plus space for a *note PyObject: 39f. representing the item.
2147483647*4 is already more bytes than a 32-bit address space can
contain.

  It's possible to address that much memory on a 64-bit platform,
however.  The pointers for a list that size would only require 16 GiB
of space, so it's not unreasonable that Python programmers might
construct lists that large.  Therefore, the Python interpreter had to
be changed to use some type other than `int', and this will be a 64-bit
type on 64-bit platforms.  The change will cause incompatibilities on
64-bit machines, so it was deemed worth making the transition now,
while the number of 64-bit users is still relatively small.  (In 5 or
10 years, we may _all_ be on 64-bit machines, and the transition would
be more painful then.)

  This change most strongly affects authors of C extension modules.
Python strings and container types such as lists and tuples  now use
`Py_ssize_t' to store their size.   Functions such as *note
PyList_Size(): 3a0.  now return `Py_ssize_t'.  Code in extension modules
may therefore need to have some variables changed to `Py_ssize_t'.

  The *note PyArg_ParseTuple(): 314. and *note Py_BuildValue(): 3a1.
functions have a new conversion code, `n', for `Py_ssize_t'.   *note
PyArg_ParseTuple(): 314.'s `s#' and `t#' still output `int' by default,
but you can define the macro  `PY_SSIZE_T_CLEAN' before including
`Python.h'  to make them return `Py_ssize_t'.

  PEP 353(1) has a section on conversion guidelines that  extension
authors should read to learn about supporting 64-bit platforms.

See also
........

PEP 353(2) - Using ssize_t as the index type
     PEP written and implemented by Martin von Löwis.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0353

  (2) http://www.python.org/dev/peps/pep-0353


File: python.info,  Node: PEP 357 The '__index__' method,  Next: Other Language Changes<3>,  Prev: PEP 353 Using ssize_t as the index type,  Up: What's New in Python 2 5

1.3.11 PEP 357: The '__index__' method
--------------------------------------

The NumPy developers had a problem that could only be solved by adding
a new special method, *note __index__(): 25c.  When using slice
notation, as in `[start:stop:step]', the values of the _start_, _stop_,
and _step_ indexes must all be either integers or long integers.  NumPy
defines a variety of specialized integer types corresponding to
unsigned and signed integers of 8, 16, 32, and 64 bits, but there was
no way to signal that these types could be used as slice indexes.

  Slicing can't just use the existing *note __int__(): 25d. method
because that method is also used to implement coercion to integers.  If
slicing used *note __int__(): 25d, floating-point numbers would also
become legal slice indexes and that's clearly an undesirable behaviour.

  Instead, a new special method called *note __index__(): 25c. was
added.  It takes no arguments and returns an integer giving the slice
index to use.  For example:

    class C:
        def __index__ (self):
            return self.value

The return value must be either a Python integer or long integer. The
interpreter will check that the type returned is correct, and raises a
*note TypeError: 215. if this requirement isn't met.

  A corresponding `nb_index' slot was added to the C-level *note
PyNumberMethods: 3a4. structure to let C extensions implement this
protocol.  `PyNumber_Index(obj)()' can be used in extension code to
call the *note __index__(): 25c. function and retrieve its result.

See also
........

PEP 357(1) - Allowing Any Object to be Used for Slicing
     PEP written  and implemented by Travis Oliphant.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0357


File: python.info,  Node: Other Language Changes<3>,  Next: New Improved and Removed Modules,  Prev: PEP 357 The '__index__' method,  Up: What's New in Python 2 5

1.3.12 Other Language Changes
-----------------------------

Here are all of the changes that Python 2.5 makes to the core Python
language.

   * The *note dict: 2fe. type has a new hook for letting subclasses
     provide a default value when a key isn't contained in the
     dictionary. When a key isn't found, the dictionary's
     `__missing__(key)()' method will be called.  This hook is used to
     implement the new `defaultdict' class in the *note collections: 65.
     module.  The following example defines a dictionary  that returns
     zero for any missing key:

         class zerodict (dict):
             def __missing__ (self, key):
                 return 0

         d = zerodict({1:1, 2:2})
         print d[1], d[2]   # Prints 1, 2
         print d[3], d[4]   # Prints 0, 0


   * Both 8-bit and Unicode strings have new `partition(sep)()'  and
     `rpartition(sep)()' methods that simplify a common use case.

     The `find(S)()' method is often used to get an index which is then
     used to slice the string and obtain the pieces that are before and
     after the separator.  `partition(sep)()' condenses this pattern
     into a single method call that returns a 3-tuple containing the
     substring before the separator, the separator itself, and the
     substring after the separator.  If the separator isn't found, the
     first element of the tuple is the entire string and the other two
     elements are empty.  `rpartition(sep)()' also returns a 3-tuple
     but starts searching from the end of the string; the `r' stands
     for 'reverse'.

     Some examples:

         >>> ('http://www.python.org').partition('://')
         ('http', '://', 'www.python.org')
         >>> ('file:/usr/share/doc/index.html').partition('://')
         ('file:/usr/share/doc/index.html', '', '')
         >>> (u'Subject: a quick question').partition(':')
         (u'Subject', u':', u' a quick question')
         >>> 'www.python.org'.rpartition('.')
         ('www.python', '.', 'org')
         >>> 'www.python.org'.rpartition(':')
         ('', '', 'www.python.org')

     (Implemented by Fredrik Lundh following a suggestion by Raymond
     Hettinger.)

   * The `startswith()' and `endswith()' methods of string types now
     accept tuples of strings to check for.

         def is_image_file (filename):
             return filename.endswith(('.gif', '.jpg', '.tiff'))

     (Implemented by Georg Brandl following a suggestion by Tom Lynn.)

   * The *note min(): 221. and *note max(): 222. built-in functions
     gained a `key' keyword parameter analogous to the `key' argument
     for `sort()'.  This parameter supplies a function that takes a
     single argument and is called for every value in the list; *note
     min(): 221./*note max(): 222. will return the element with the
     smallest/largest return value from this function. For example, to
     find the longest string in a list, you can do:

         L = ['medium', 'longest', 'short']
         # Prints 'longest'
         print max(L, key=len)
         # Prints 'short', because lexicographically 'short' has the largest value
         print max(L)

     (Contributed by Steven Bethard and Raymond Hettinger.)

   * Two new built-in functions, *note any(): 3a7. and *note all():
     3a8, evaluate whether an iterator contains any true or false
     values.  *note any(): 3a7. returns *note True: 3a9.  if any value
     returned by the iterator is true; otherwise it will return *note
     False: 3aa.  *note all(): 3a8. returns *note True: 3a9. only if
     all of the values returned by the iterator evaluate as true.
     (Suggested by Guido van Rossum, and implemented by Raymond
     Hettinger.)

   * The result of a class's *note __hash__(): 32e. method can now be
     either a long integer or a regular integer.  If a long integer is
     returned, the hash of that value is taken.  In earlier versions
     the hash value was required to be a regular integer, but in 2.5
     the *note id(): 3ab. built-in was changed to always return
     non-negative numbers, and users often seem to use `id(self)' in
     *note __hash__(): 32e. methods (though this is discouraged).

   * ASCII is now the default encoding for modules.  It's now  a syntax
     error if a module contains string literals with 8-bit characters
     but doesn't have an encoding declaration.  In Python 2.4 this
     triggered a warning, not a syntax error.  See PEP 263(1)  for how
     to declare a module's encoding; for example, you might add  a line
     like this near the top of the source file:

         # -*- coding: latin1 -*-


   * A new warning, `UnicodeWarning', is triggered when  you attempt to
     compare a Unicode string and an 8-bit string  that can't be
     converted to Unicode using the default ASCII encoding.   The
     result of the comparison is false:

         >>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode
         __main__:1: UnicodeWarning: Unicode equal comparison failed
           to convert both arguments to Unicode - interpreting them
           as being unequal
         False
         >>> chr(127) == unichr(127)   # chr(127) can be converted
         True

     Previously this would raise a `UnicodeDecodeError' exception, but
     in 2.5 this could result in puzzling problems when accessing a
     dictionary.  If you looked up `unichr(128)' and `chr(128)' was
     being used as a key, you'd get a `UnicodeDecodeError' exception.
     Other changes in 2.5 resulted in this exception being raised
     instead of suppressed by the code in `dictobject.c' that
     implements dictionaries.

     Raising an exception for such a comparison is strictly correct,
     but the change might have broken code, so instead
     `UnicodeWarning' was introduced.

     (Implemented by Marc-André Lemburg.)

   * One error that Python programmers sometimes make is forgetting to
     include an `__init__.py' module in a package directory. Debugging
     this mistake can be confusing, and usually requires running Python
     with the *note -v: 3ac. switch to log all the paths searched. In
     Python 2.5, a new *note ImportWarning: 3ad. warning is triggered
     when an import would have picked up a directory as a package but no
     `__init__.py' was found.  This warning is silently ignored by
     default; provide the `-Wd' option when running the Python
     executable to display the warning message. (Implemented by Thomas
     Wouters.)

   * The list of base classes in a class definition can now be empty.
     As an example, this is now legal:

         class C():
             pass

     (Implemented by Brett Cannon.)

* Menu:

* Interactive Interpreter Changes::
* Optimizations: Optimizations<3>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0263


File: python.info,  Node: Interactive Interpreter Changes,  Next: Optimizations<3>,  Up: Other Language Changes<3>

1.3.12.1 Interactive Interpreter Changes
........................................

In the interactive interpreter, `quit' and `exit'  have long been
strings so that new users get a somewhat helpful message when they try
to quit:

    >>> quit
    'Use Ctrl-D (i.e. EOF) to exit.'

In Python 2.5, `quit' and `exit' are now objects that still produce
string representations of themselves, but are also callable. Newbies
who try `quit()' or `exit()' will now exit the interpreter as they
expect.  (Implemented by Georg Brandl.)

  The Python executable now accepts the standard long options  *note
-help: 1d2.  and *note -version: 3b0.; on Windows,  it also accepts the
`/?' option for displaying a help message. (Implemented by Georg
Brandl.)


File: python.info,  Node: Optimizations<3>,  Prev: Interactive Interpreter Changes,  Up: Other Language Changes<3>

1.3.12.2 Optimizations
......................

Several of the optimizations were developed at the NeedForSpeed sprint,
an event held in Reykjavik, Iceland, from May 21-28 2006. The sprint
focused on speed enhancements to the CPython implementation and was
funded by EWT LLC with local support from CCP Games.  Those
optimizations added at this sprint are specially marked in the
following list.

   * When they were introduced  in Python 2.4, the built-in *note set:
     363. and *note frozenset: 364. types were built on top of Python's
     dictionary type.   In 2.5 the internal data structure has been
     customized for implementing sets, and as a result sets will use a
     third less memory and are somewhat faster. (Implemented by Raymond
     Hettinger.)

   * The speed of some Unicode operations, such as finding substrings,
     string splitting, and character map encoding and decoding, has
     been improved.  (Substring search and splitting improvements were
     added by Fredrik Lundh and Andrew Dalke at the NeedForSpeed
     sprint. Character maps were improved by Walter Dörwald and Martin
     von Löwis.)

   * The `long(str, base)()' function is now faster on long digit
     strings because fewer intermediate results are calculated.  The
     peak is for strings of around 800-1000 digits where  the function
     is 6 times faster. (Contributed by Alan McIntyre and committed at
     the NeedForSpeed sprint.)

   * It's now illegal to mix iterating over a file  with `for line in
     file' and calling  the file object's `read()'/*note readline():
     144./`readlines()' methods.  Iteration uses an internal buffer and
     the  `read*()' methods don't use that buffer.   Instead they would
     return the data following the buffer, causing the data to appear
     out of order.  Mixing iteration and these methods will now trigger
     a *note ValueError: 233. from the `read*()' method.  (Implemented
     by Thomas Wouters.)

   * The *note struct: 166. module now compiles structure format
     strings into an internal representation and caches this
     representation, yielding a 20% speedup.  (Contributed by Bob
     Ippolito at the NeedForSpeed sprint.)

   * The *note re: 143. module got a 1 or 2% speedup by switching to
     Python's allocator functions instead of the system's  `malloc()'
     and `free()'.  (Contributed by Jack Diederich at the NeedForSpeed
     sprint.)

   * The code generator's peephole optimizer now performs simple
     constant folding in expressions.  If you write something like `a =
     2+3', the code generator will do the arithmetic and produce code
     corresponding to `a = 5'.  (Proposed and implemented  by Raymond
     Hettinger.)

   * Function calls are now faster because code objects now keep  the
     most recently finished frame (a "zombie frame") in an internal
     field of the code object, reusing it the next time the code object
     is invoked.  (Original patch by Michael Hudson, modified by Armin
     Rigo and Richard Jones; committed at the NeedForSpeed sprint.)
     Frame objects are also slightly smaller, which may improve cache
     locality and reduce memory usage a bit.  (Contributed by Neal
     Norwitz.)

   * Python's built-in exceptions are now new-style classes, a change
     that speeds up instantiation considerably.  Exception handling in
     Python 2.5 is therefore about 30% faster than in 2.4. (Contributed
     by Richard Jones, Georg Brandl and Sean Reifschneider at the
     NeedForSpeed sprint.)

   * Importing now caches the paths tried, recording whether  they
     exist or not so that the interpreter makes fewer  `open()' and
     `stat()' calls on startup. (Contributed by Martin von Löwis and
     Georg Brandl.)



File: python.info,  Node: New Improved and Removed Modules,  Next: Build and C API Changes<3>,  Prev: Other Language Changes<3>,  Up: What's New in Python 2 5

1.3.13 New, Improved, and Removed Modules
-----------------------------------------

The standard library received many enhancements and bug fixes in Python
2.5.  Here's a partial list of the most notable changes, sorted
alphabetically by module name. Consult the `Misc/NEWS' file in the
source tree for a more complete list of changes, or look through the
SVN logs for all the details.

   * The *note audioop: 13. module now supports the a-LAW encoding, and
     the code for u-LAW encoding has been improved.  (Contributed by
     Lars Immisch.)

   * The *note codecs: 63. module gained support for incremental
     codecs.  The `codec.lookup()' function now returns a `CodecInfo'
     instance instead of a tuple. `CodecInfo' instances behave like a
     4-tuple to preserve backward compatibility but also have the
     attributes `encode', `decode', `incrementalencoder',
     `incrementaldecoder', `streamwriter', and `streamreader'.
     Incremental codecs  can receive input and produce output in
     multiple chunks; the output is the same as if the entire input was
     fed to the non-incremental codec. See the *note codecs: 63. module
     documentation for details. (Designed and implemented by Walter
     Dörwald.)

   * The *note collections: 65. module gained a new type,
     `defaultdict', that subclasses the standard *note dict: 2fe. type.
     The new type mostly behaves like a dictionary but constructs a
     default value when a key isn't present, automatically adding it to
     the dictionary for the requested key value.

     The first argument to `defaultdict''s constructor is a factory
     function that gets called whenever a key is requested but not
     found. This factory function receives no arguments, so you can use
     built-in type constructors such as *note list(): 3b5. or *note
     int(): 1ef.  For example,  you can make an index of words based on
     their initial letter like this:

         words = """Nel mezzo del cammin di nostra vita
         mi ritrovai per una selva oscura
         che la diritta via era smarrita""".lower().split()

         index = defaultdict(list)

         for w in words:
             init_letter = w[0]
             index[init_letter].append(w)

     Printing `index' results in the following output:

         defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],
                 'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],
                 'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],
                 'p': ['per'], 's': ['selva', 'smarrita'],
                 'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}

     (Contributed by Guido van Rossum.)

   * The `deque' double-ended queue type supplied by the *note
     collections: 65.  module now has a `remove(value)()' method that
     removes the first occurrence of _value_ in the queue, raising
     *note ValueError: 233. if the value isn't found.  (Contributed by
     Raymond Hettinger.)

   * New module: The *note contextlib: 6e. module contains helper
     functions for use with the new '*note with: 1bd.' statement.  See
     section *note The contextlib module: 399.  for more about this
     module.

   * New module: The *note cProfile: 74. module is a C implementation
     of  the existing *note profile: 139. module that has much lower
     overhead. The module's interface is the same as *note profile:
     139.: you run `cProfile.run('main()')' to profile a function, can
     save profile data to a file, etc.  It's not yet known if the
     Hotshot profiler, which is also written in C but doesn't match the
     *note profile: 139. module's interface, will continue to be
     maintained in future versions of Python.  (Contributed by Armin
     Rigo.)

     Also, the *note pstats: 13a. module for analyzing the data
     measured by the profiler now supports directing the output to any
     file object by supplying a _stream_ argument to the `Stats'
     constructor. (Contributed by Skip Montanaro.)

   * The *note csv: 77. module, which parses files in comma-separated
     value format, received several enhancements and a number of
     bugfixes.  You can now set the maximum size in bytes of a field by
     calling the `csv.field_size_limit(new_limit)()' function; omitting
     the _new_limit_ argument will return the currently-set limit.  The
     `reader' class now has a `line_num' attribute that counts the
     number of physical lines read from the source; records can span
     multiple physical lines, so `line_num' is not the same as the
     number of records read.

     The CSV parser is now stricter about multi-line quoted fields.
     Previously, if a line ended within a quoted field without a
     terminating newline character, a newline would be inserted into
     the returned field. This behavior caused problems when reading
     files that contained carriage return characters within fields, so
     the code was changed to return the field without inserting
     newlines. As a consequence, if newlines embedded within fields are
     important, the input should be split into lines in a manner that
     preserves the newline characters.

     (Contributed by Skip Montanaro and Andrew McNamara.)

   * The *note datetime: 7d. class in the *note datetime: 7d.  module
     now has a `strptime(string, format)()'  method for parsing date
     strings, contributed by Josh Spoerri. It uses the same format
     characters as *note time.strptime(): 3b6. and *note
     time.strftime(): 3b7.:

         from datetime import datetime

         ts = datetime.strptime('10:13:15 2006-03-07',
                                '%H:%M:%S %Y-%m-%d')


   * The `SequenceMatcher.get_matching_blocks()' method in the *note
     difflib: 82.  module now guarantees to return a minimal list of
     blocks describing matching subsequences.  Previously, the
     algorithm would occasionally break a block of matching elements
     into two list entries. (Enhancement by Tim Peters.)

   * The *note doctest: b5. module gained a `SKIP' option that keeps an
     example from being executed at all.  This is intended for code
     snippets that are usage examples intended for the reader and
     aren't actually test cases.

     An _encoding_ parameter was added to the `testfile()' function and
     the `DocFileSuite' class to specify the file's encoding.  This
     makes it easier to use non-ASCII characters in  tests contained
     within a docstring.  (Contributed by Bjorn Tillenius.)

   * The *note email: bb. package has been updated to version 4.0.
     (Contributed by Barry Warsaw.)

   * The *note fileinput: cc. module was made more flexible. Unicode
     filenames are now supported, and a _mode_ parameter that defaults
     to `"r"' was added to the *note input(): 3b8. function to allow
     opening files in binary or *note universal newlines: 30e. mode.
     Another new parameter, _openhook_, lets you use a function other
     than *note open(): 2d3.  to open the input files.  Once you're
     iterating over the set of files, the `FileInput' object's new
     `fileno()' returns the file descriptor for the currently opened
     file. (Contributed by Georg Brandl.)

   * In the *note gc: db. module, the new `get_count()' function
     returns a 3-tuple containing the current collection counts for the
     three GC generations.  This is accounting information for the
     garbage collector; when these counts reach a specified threshold,
     a garbage collection sweep will be made.  The existing *note
     gc.collect(): 3b9. function now takes an optional _generation_
     argument of 0, 1, or 2 to specify which generation to collect.
     (Contributed by Barry Warsaw.)

   * The `nsmallest()' and  `nlargest()' functions in the *note heapq:
     e7.  module  now support a `key' keyword parameter similar to the
     one provided by the *note min(): 221./*note max(): 222. functions
     and the `sort()' methods.  For example:

         >>> import heapq
         >>> L = ["short", 'medium', 'longest', 'longer still']
         >>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically
         ['longer still', 'longest']
         >>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements
         ['short', 'medium']

     (Contributed by Raymond Hettinger.)

   * The *note itertools.islice(): 3ba. function now accepts `None' for
     the start and step arguments.  This makes it more compatible with
     the attributes of slice objects, so that you can now write the
     following:

         s = slice(5)     # Create slice object
         itertools.islice(iterable, s.start, s.stop, s.step)

     (Contributed by Raymond Hettinger.)

   * The *note format(): 1ec. function in the *note locale: 100. module
     has been modified and two new functions were added,
     `format_string()' and `currency()'.

     The *note format(): 1ec. function's _val_ parameter could
     previously be a string as long as no more than one %char specifier
     appeared; now the parameter must be exactly one %char specifier
     with no surrounding text.  An optional _monetary_ parameter was
     also added which, if `True', will use the locale's rules for
     formatting currency in placing a separator between groups of three
     digits.

     To format strings with multiple %char specifiers, use the new
     `format_string()' function that works like *note format(): 1ec.
     but also supports mixing %char specifiers with arbitrary text.

     A new `currency()' function was also added that formats a number
     according to the current locale's settings.

     (Contributed by Georg Brandl.)

   * The *note mailbox: 109. module underwent a massive rewrite to add
     the capability to modify mailboxes in addition to reading them.  A
     new set of classes that include `mbox', `MH', and `Maildir' are
     used to read mailboxes, and have an `add(message)()' method to add
     messages, `remove(key)()' to remove messages, and
     `lock()'/`unlock()' to lock/unlock the mailbox.  The following
     example converts a maildir-format mailbox into an mbox-format one:

         import mailbox

         # 'factory=None' uses email.Message.Message as the class representing
         # individual messages.
         src = mailbox.Maildir('maildir', factory=None)
         dest = mailbox.mbox('/tmp/mbox')

         for msg in src:
             dest.add(msg)

     (Contributed by Gregory K. Johnson.  Funding was provided by
     Google's 2005 Summer of Code.)

   * New module: the *note msilib: 116. module allows creating
     Microsoft Installer `.msi' files and CAB files.  Some support for
     reading the `.msi' database is also included. (Contributed by
     Martin von Löwis.)

   * The *note nis: 123. module now supports accessing domains other
     than the system default domain by supplying a _domain_ argument to
     the *note nis.match(): 3bb. and *note nis.maps(): 3bc. functions.
     (Contributed by Ben Bell.)

   * The *note operator: 126. module's `itemgetter()'  and
     `attrgetter()' functions now support multiple fields.   A call
     such as `operator.attrgetter('a', 'b')' will return a function
     that retrieves the `a' and `b' attributes.  Combining  this new
     feature with the `sort()' method's `key' parameter  lets you
     easily sort lists using multiple fields. (Contributed by Raymond
     Hettinger.)

   * The *note optparse: 127. module was updated to version 1.5.1 of
     the Optik library.  The `OptionParser' class gained an `epilog'
     attribute, a string that will be printed after the help message,
     and a `destroy()' method to break reference cycles created by the
     object. (Contributed by Greg Ward.)

   * The *note os: 128. module underwent several changes.  The
     `stat_float_times' variable now defaults to true, meaning that
     *note os.stat(): 3bd. will now return time values as floats.
     (This doesn't necessarily mean that *note os.stat(): 3bd. will
     return times that are precise to fractions of a second; not all
     systems support such precision.)

     Constants named *note os.SEEK_SET: 3be, *note os.SEEK_CUR: 3bf, and
     *note os.SEEK_END: 3c0. have been added; these are the parameters
     to the *note os.lseek(): 3c1. function.  Two new constants for
     locking are *note os.O_SHLOCK: 3c2. and *note os.O_EXLOCK: 3c3.

     Two new functions, `wait3()' and `wait4()', were added.  They're
     similar the `waitpid()' function which waits for a child process
     to exit and returns a tuple of the process ID and its exit status,
     but `wait3()' and `wait4()' return additional information.
     `wait3()' doesn't take a process ID as input, so it waits for any
     child process to exit and returns a 3-tuple of _process-id_,
     _exit-status_, _resource-usage_ as returned from the *note
     resource.getrusage(): 3c4. function. `wait4(pid)()' does take a
     process ID.  (Contributed by Chad J. Schroeder.)

     On FreeBSD, the *note os.stat(): 3bd. function now returns  times
     with nanosecond resolution, and the returned object now has
     `st_gen' and `st_birthtime'. The `st_flags' attribute is also
     available, if the platform supports it. (Contributed by Antti
     Louko and  Diego Pettenò.)

   * The Python debugger provided by the *note pdb: 12c. module can now
     store lists of commands to execute when a breakpoint is reached
     and execution stops.  Once breakpoint #1 has been created, enter
     `commands 1' and enter a series of commands to be executed,
     finishing the list with `end'.  The command list can include
     commands that resume execution, such as `continue' or `next'.
     (Contributed by Grégoire Dooms.)

   * The *note pickle: 12d. and *note cPickle: 73. modules no longer
     accept a return value of `None' from the *note __reduce__(): 3c5.
     method; the method must return a tuple of arguments instead.  The
     ability to return `None' was deprecated in Python 2.4, so this
     completes the removal of the feature.

   * The *note pkgutil: 131. module, containing various utility
     functions for finding packages, was enhanced to support PEP 302's
     import hooks and now also works for packages stored in ZIP-format
     archives. (Contributed by Phillip J. Eby.)

   * The pybench benchmark suite by Marc-André Lemburg is now included
     in the `Tools/pybench' directory.  The pybench suite is an
     improvement on the commonly used `pystone.py' program because
     pybench provides a more detailed measurement of the interpreter's
     speed.  It times particular operations such as function calls,
     tuple slicing, method lookups, and numeric operations, instead of
     performing many different operations and reducing the result to a
     single number as `pystone.py' does.

   * The `pyexpat' module now uses version 2.0 of the Expat parser.
     (Contributed by Trent Mick.)

   * The *note Queue: 140. class provided by the *note Queue: 140.
     module gained two new methods.  `join()' blocks until all items in
     the queue have been retrieved and all processing work on the items
     have been completed.  Worker threads call the other new method,
     `task_done()', to signal that processing for an item has been
     completed.  (Contributed by Raymond Hettinger.)

   * The old `regex' and `regsub' modules, which have been  deprecated
     ever since Python 2.0, have finally been deleted.   Other deleted
     modules: `statcache', `tzparse', `whrandom'.

   * Also deleted: the `lib-old' directory, which includes ancient
     modules such as `dircmp' and `ni', was removed.  `lib-old' wasn't
     on the default `sys.path', so unless your programs explicitly
     added the directory to `sys.path', this removal shouldn't affect
     your code.

   * The *note rlcompleter: 149. module is no longer  dependent on
     importing the *note readline: 144. module and therefore now works
     on non-Unix platforms. (Patch from Robert Kiendl.)

   * The *note SimpleXMLRPCServer: 157. and *note DocXMLRPCServer: b6.
     classes now have a `rpc_paths' attribute that constrains XML-RPC
     operations to a limited set of URL paths; the default is to allow
     only `'/'' and `'/RPC2''.  Setting `rpc_paths' to `None' or an
     empty tuple disables  this path checking.

   * The *note socket: 15c. module now supports `AF_NETLINK' sockets on
     Linux, thanks to a patch from Philippe Biondi.   Netlink sockets
     are a Linux-specific mechanism for communications between a
     user-space process and kernel code; an introductory  article about
     them is at <http://www.linuxjournal.com/article/7356>.  In Python
     code, netlink addresses are represented as a tuple of 2 integers,
     `(pid, group_mask)'.

     Two new methods on socket objects, `recv_into(buffer)()' and
     `recvfrom_into(buffer)()', store the received data in an object
     that supports the buffer protocol instead of returning the data as
     a string.  This means you can put the data directly into an array
     or a memory-mapped file.

     Socket objects also gained `getfamily()', `gettype()', and
     `getproto()' accessor methods to retrieve the family, type, and
     protocol values for the socket.

   * New module: the *note spwd: 15e. module provides functions for
     accessing the shadow password database on systems that support
     shadow passwords.

   * The *note struct: 166. is now faster because it  compiles format
     strings into `Struct' objects with `pack()' and `unpack()'
     methods.  This is similar to how the *note re: 143. module lets
     you create compiled regular expression objects.  You can still use
     the module-level  `pack()' and `unpack()' functions; they'll
     create  `Struct' objects and cache them.  Or you can use  `Struct'
     instances directly:

         s = struct.Struct('ih3s')

         data = s.pack(1972, 187, 'abc')
         year, number, name = s.unpack(data)

     You can also pack and unpack data to and from buffer objects
     directly using the `pack_into(buffer, offset, v1, v2, ...)()' and
     `unpack_from(buffer, offset)()' methods.  This lets you store data
     directly into an array or a memory- mapped file.

     (`Struct' objects were implemented by Bob Ippolito at the
     NeedForSpeed sprint.  Support for buffer objects was added by
     Martin Blais, also at the NeedForSpeed sprint.)

   * The Python developers switched from CVS to Subversion during the
     2.5 development process.  Information about the exact build
     version is available as the `sys.subversion' variable, a 3-tuple
     of `(interpreter-name, branch-name, revision-range)'.  For
     example, at the time of writing my copy of 2.5 was reporting
     `('CPython', 'trunk', '45313:45315')'.

     This information is also available to C extensions via the *note
     Py_GetBuildInfo(): 3c6. function that returns a  string of build
     information like this: `"trunk:45355:45356M, Apr 13 2006,
     07:42:19"'.   (Contributed by Barry Warsaw.)

   * Another new function, *note sys._current_frames(): 3c7, returns
     the current stack frames for all running threads as a dictionary
     mapping thread identifiers to the topmost stack frame currently
     active in that thread at the time the function is called.
     (Contributed by Tim Peters.)

   * The `TarFile' class in the *note tarfile: 171. module now has an
     `extractall()' method that extracts all members from the archive
     into the current working directory.  It's also possible to set a
     different directory as the extraction target, and to unpack only a
     subset of the archive's members.

     The compression used for a tarfile opened in stream mode can now
     be autodetected using the mode `'r|*''. (Contributed by Lars
     Gustäbel.)

   * The *note threading: 179. module now lets you set the stack size
     used when new threads are created. The `stack_size([*size*])()'
     function returns the currently configured stack size, and
     supplying the optional _size_ parameter sets a new value.  Not all
     platforms support changing the stack size, but Windows, POSIX
     threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)

   * The *note unicodedata: 186. module has been updated to use version
     4.1.0 of the Unicode character database.  Version 3.2.0 is
     required  by some specifications, so it's still available as
     *note unicodedata.ucd_3_2_0: 3c8.

   * New module: the  *note uuid: 190. module generates  universally
     unique identifiers (UUIDs) according to RFC 4122(1).  The RFC
     defines several different UUID versions that are generated from a
     starting string, from system properties, or purely randomly.  This
     module contains a `UUID' class and  functions named `uuid1()',
     `uuid3()', `uuid4()',  and  `uuid5()' to generate different
     versions of UUID.  (Version 2 UUIDs  are not specified in RFC
     4122(2) and are not supported by this module.)

         >>> import uuid
         >>> # make a UUID based on the host ID and current time
         >>> uuid.uuid1()
         UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

         >>> # make a UUID using an MD5 hash of a namespace UUID and a name
         >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
         UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

         >>> # make a random UUID
         >>> uuid.uuid4()
         UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

         >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
         >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
         UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

     (Contributed by Ka-Ping Yee.)

   * The *note weakref: 195. module's `WeakKeyDictionary' and
     `WeakValueDictionary' types gained new methods for iterating over
     the weak references contained in the dictionary.  `iterkeyrefs()'
     and `keyrefs()' methods were added to `WeakKeyDictionary', and
     `itervaluerefs()' and `valuerefs()' were added to
     `WeakValueDictionary'.  (Contributed by Fred L. Drake, Jr.)

   * The *note webbrowser: 196. module received a number of
     enhancements. It's now usable as a script with `python -m
     webbrowser', taking a URL as the argument; there are a number of
     switches  to control the behaviour (`-n' for a new browser window,
     *note -t: 3c9. for a new tab).  New module-level functions,
     `open_new()' and `open_new_tab()', were added  to support this.
     The module's *note open(): 2d3. function supports an additional
     feature, an _autoraise_ parameter that signals whether to raise
     the open window when possible. A number of additional browsers
     were added to the supported list such as Firefox, Opera,
     Konqueror, and elinks.  (Contributed by Oleg Broytmann and Georg
     Brandl.)

   * The *note xmlrpclib: 1aa. module now supports returning  *note
     datetime: 7d. objects for the XML-RPC date type.  Supply
     `use_datetime=True' to the `loads()' function or the
     `Unmarshaller' class to enable this feature. (Contributed by Skip
     Montanaro.)

   * The *note zipfile: 1ab. module now supports the ZIP64 version of
     the  format, meaning that a .zip archive can now be larger than 4
     GiB and can contain individual files larger than 4 GiB.
     (Contributed by Ronald Oussoren.)

   * The *note zlib: 1ad. module's `Compress' and `Decompress' objects
     now support a *note copy(): 71. method that makes a copy of the
     object's internal state and returns a new  `Compress' or
     `Decompress' object.  (Contributed by Chris AtLee.)


* Menu:

* The ctypes package::
* The ElementTree package::
* The hashlib package::
* The sqlite3 package::
* The wsgiref package::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc4122.html

  (2) http://tools.ietf.org/html/rfc4122.html


File: python.info,  Node: The ctypes package,  Next: The ElementTree package,  Up: New Improved and Removed Modules

1.3.13.1 The ctypes package
...........................

The *note ctypes: 78. package, written by Thomas Heller, has been added
to the standard library.  *note ctypes: 78. lets you call arbitrary
functions  in shared libraries or DLLs.  Long-time users may remember
the *note dl: b4. module, which provides functions for loading shared
libraries and calling functions in them.  The *note ctypes: 78. package
is much fancier.

  To load a shared library or DLL, you must create an instance of the
`CDLL' class and provide the name or path of the shared library or DLL.
Once that's done, you can call arbitrary functions by accessing them as
attributes of the `CDLL' object.

    import ctypes

    libc = ctypes.CDLL('libc.so.6')
    result = libc.printf("Line of output\n")

Type constructors for the various C types are provided: `c_int()',
`c_float()', `c_double()', `c_char_p()' (equivalent to `char *'), and
so forth.  Unlike Python's types, the C versions are all mutable; you
can assign to their `value' attribute to change the wrapped value.
Python integers and strings will be automatically converted to the
corresponding C types, but for other types you  must call the correct
type constructor.  (And I mean _must_;  getting it wrong will often
result in the interpreter crashing with a segmentation fault.)

  You shouldn't use `c_char_p()' with a Python string when the C
function will be modifying the memory area, because Python strings are
supposed to be immutable; breaking this rule will cause puzzling bugs.
When you need a modifiable memory area, use `create_string_buffer()':

    s = "this is a string"
    buf = ctypes.create_string_buffer(s)
    libc.strfry(buf)

C functions are assumed to return integers, but you can set the
`restype' attribute of the function object to  change this:

    >>> libc.atof('2.71828')
    -1783957616
    >>> libc.atof.restype = ctypes.c_double
    >>> libc.atof('2.71828')
    2.71828

*note ctypes: 78. also provides a wrapper for Python's C API  as the
`ctypes.pythonapi' object.  This object does _not_  release the global
interpreter lock before calling a function, because the lock must be
held when calling into the interpreter's code.   There's a
`py_object()' type constructor that will create a  *note PyObject *:
39f. pointer.  A simple usage:

    import ctypes

    d = {}
    ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),
              ctypes.py_object("abc"),  ctypes.py_object(1))
    # d is now {'abc', 1}.

Don't forget to use `py_object()'; if it's omitted you end  up with a
segmentation fault.

  *note ctypes: 78. has been around for a while, but people still write
and distribution hand-coded extension modules because you can't rely on
*note ctypes: 78. being present. Perhaps developers will begin to write
Python wrappers atop a library accessed through *note ctypes: 78.
instead of extension modules, now that *note ctypes: 78. is included
with core Python.

See also
........

<http://starship.python.net/crew/theller/ctypes/>
     The ctypes web page, with a tutorial, reference, and FAQ.

  The documentation  for the *note ctypes: 78. module.


File: python.info,  Node: The ElementTree package,  Next: The hashlib package,  Prev: The ctypes package,  Up: New Improved and Removed Modules

1.3.13.2 The ElementTree package
................................

A subset of Fredrik Lundh's ElementTree library for processing XML has
been added to the standard library as `xml.etree'.  The available
modules are `ElementTree', `ElementPath', and `ElementInclude' from
ElementTree 1.2.6.    The `cElementTree' accelerator module is also
included.

  The rest of this section will provide a brief overview of using
ElementTree.  Full documentation for ElementTree is available at
<http://effbot.org/zone/element-index.htm>.

  ElementTree represents an XML document as a tree of element nodes.
The text content of the document is stored as the `text' and `tail'
attributes of  (This is one of the major differences between
ElementTree and the Document Object Model; in the DOM there are many
different types of node, including `TextNode'.)

  The most commonly used parsing function is `parse()', that takes
either a string (assumed to contain a filename) or a file-like object
and returns an `ElementTree' instance:

    from xml.etree import ElementTree as ET

    tree = ET.parse('ex-1.xml')

    feed = urllib.urlopen(
              'http://planet.python.org/rss10.xml')
    tree = ET.parse(feed)

Once you have an `ElementTree' instance, you can call its `getroot()'
method to get the root `Element' node.

  There's also an `XML()' function that takes a string literal and
returns an `Element' node (not an `ElementTree').   This function
provides a tidy way to incorporate XML fragments, approaching the
convenience of an XML literal:

    svg = ET.XML("""<svg width="10px" version="1.0">
                 </svg>""")
    svg.set('height', '320px')
    svg.append(elem1)

Each XML element supports some dictionary-like and some list-like access
methods.  Dictionary-like operations are used to access attribute
values, and list-like operations are used to access child nodes.

Operation                           Result
------------------------------------------------------------------------------------- 
`elem[n]'                           Returns n'th child element.
`elem[m:n]'                         Returns list of m'th through n'th child
                                    elements.
`len(elem)'                         Returns number of child elements.
`list(elem)'                        Returns list of child elements.
`elem.append(elem2)'                Adds _elem2_ as a child.
`elem.insert(index, elem2)'         Inserts _elem2_ at the specified location.
`del elem[n]'                       Deletes n'th child element.
`elem.keys()'                       Returns list of attribute names.
`elem.get(name)'                    Returns value of attribute _name_.
`elem.set(name, value)'             Sets new value for attribute _name_.
`elem.attrib'                       Retrieves the dictionary containing attributes.
`del elem.attrib[name]'             Deletes attribute _name_.

  Comments and processing instructions are also represented as `Element'
nodes.  To check if a node is a comment or processing instructions:

    if elem.tag is ET.Comment:
        ...
    elif elem.tag is ET.ProcessingInstruction:
        ...

To generate XML output, you should call the `ElementTree.write()'
method.  Like `parse()', it can take either a string or a file-like
object:

    # Encoding is US-ASCII
    tree.write('output.xml')

    # Encoding is UTF-8
    f = open('output.xml', 'w')
    tree.write(f, encoding='utf-8')

(Caution: the default encoding used for output is ASCII.  For general
XML work, where an element's name may contain arbitrary Unicode
characters, ASCII isn't a very useful encoding because it will raise an
exception if an element's name contains any characters with values
greater than 127.  Therefore, it's best to specify a different encoding
such as UTF-8 that can handle any Unicode character.)

  This section is only a partial description of the ElementTree
interfaces. Please read the package's official documentation for more
details.

See also
........

<http://effbot.org/zone/element-index.htm>
     Official documentation for ElementTree.


File: python.info,  Node: The hashlib package,  Next: The sqlite3 package,  Prev: The ElementTree package,  Up: New Improved and Removed Modules

1.3.13.3 The hashlib package
............................

A new *note hashlib: e6. module, written by Gregory P. Smith,  has been
added to replace the *note md5: 10d. and *note sha: 151. modules.
*note hashlib: e6. adds support for additional secure hashes (SHA-224,
SHA-256, SHA-384, and SHA-512). When available, the module uses OpenSSL
for fast platform optimized implementations of algorithms.

  The old *note md5: 10d. and *note sha: 151. modules still exist as
wrappers around hashlib to preserve backwards compatibility.  The new
module's interface is very close to that of the old modules, but not
identical. The most significant difference is that the constructor
functions for creating new hashing objects are named differently.

    # Old versions
    h = md5.md5()
    h = md5.new()

    # New version
    h = hashlib.md5()

    # Old versions
    h = sha.sha()
    h = sha.new()

    # New version
    h = hashlib.sha1()

    # Hash that weren't previously available
    h = hashlib.sha224()
    h = hashlib.sha256()
    h = hashlib.sha384()
    h = hashlib.sha512()

    # Alternative form
    h = hashlib.new('md5')          # Provide algorithm as a string

Once a hash object has been created, its methods are the same as before:
`update(string)()' hashes the specified string into the  current digest
state, `digest()' and `hexdigest()' return the digest value as a binary
string or a string of hex digits, and *note copy(): 71. returns a new
hashing object with the same digest state.

See also
........

The documentation  for the *note hashlib: e6. module.


File: python.info,  Node: The sqlite3 package,  Next: The wsgiref package,  Prev: The hashlib package,  Up: New Improved and Removed Modules

1.3.13.4 The sqlite3 package
............................

The pysqlite module (<http://www.pysqlite.org>), a wrapper for the
SQLite embedded database, has been added to the standard library under
the package name *note sqlite3: 15f.

  SQLite is a C library that provides a lightweight disk-based database
that doesn't require a separate server process and allows accessing the
database using a nonstandard variant of the SQL query language. Some
applications can use SQLite for internal data storage.  It's also
possible to prototype an application using SQLite and then port the
code to a larger database such as PostgreSQL or Oracle.

  pysqlite was written by Gerhard Häring and provides a SQL interface
compliant with the DB-API 2.0 specification described by PEP 249(1).

  If you're compiling the Python source yourself, note that the source
tree doesn't include the SQLite code, only the wrapper module. You'll
need to have the SQLite libraries and headers installed before
compiling Python, and the build process will compile the module when
the necessary headers are available.

  To use the module, you must first create a `Connection' object that
represents the database.  Here the data will be stored in the
`/tmp/example' file:

    conn = sqlite3.connect('/tmp/example')

You can also supply the special name `:memory:' to create a database in
RAM.

  Once you have a `Connection', you can create a `Cursor'  object and
call its `execute()' method to perform SQL commands:

    c = conn.cursor()

    # Create table
    c.execute('''create table stocks
    (date text, trans text, symbol text,
     qty real, price real)''')

    # Insert a row of data
    c.execute("""insert into stocks
              values ('2006-01-05','BUY','RHAT',100,35.14)""")

Usually your SQL operations will need to use values from Python
variables.  You shouldn't assemble your query using Python's string
operations because doing so is insecure; it makes your program
vulnerable to an SQL injection attack.

  Instead, use the DB-API's parameter substitution.  Put `?' as a
placeholder wherever you want to use a value, and then provide a tuple
of values as the second argument to the cursor's `execute()' method.
(Other database modules may use a different placeholder, such as `%s'
or `:1'.) For example:

    # Never do this -- insecure!
    symbol = 'IBM'
    c.execute("... where symbol = '%s'" % symbol)

    # Do this instead
    t = (symbol,)
    c.execute('select * from stocks where symbol=?', t)

    # Larger example
    for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
              ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),
              ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
             ):
        c.execute('insert into stocks values (?,?,?,?,?)', t)

To retrieve data after executing a SELECT statement, you can either
treat the cursor as an iterator, call the cursor's `fetchone()' method
to retrieve a single matching row,  or call `fetchall()' to get a list
of the matching rows.

  This example uses the iterator form:

    >>> c = conn.cursor()
    >>> c.execute('select * from stocks order by price')
    >>> for row in c:
    ...    print row
    ...
    (u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)
    (u'2006-03-28', u'BUY', u'IBM', 1000, 45.0)
    (u'2006-04-06', u'SELL', u'IBM', 500, 53.0)
    (u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0)
    >>>

For more information about the SQL dialect supported by SQLite, see
<http://www.sqlite.org>.

See also
........

<http://www.pysqlite.org>
     The pysqlite web page.

<http://www.sqlite.org>
     The SQLite web page; the documentation describes the syntax and
     the available data types for the supported SQL dialect.

  The documentation  for the *note sqlite3: 15f. module.

PEP 249(2) - Database API Specification 2.0
     PEP written by Marc-André Lemburg.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0249

  (2) http://www.python.org/dev/peps/pep-0249


File: python.info,  Node: The wsgiref package,  Prev: The sqlite3 package,  Up: New Improved and Removed Modules

1.3.13.5 The wsgiref package
............................

The Web Server Gateway Interface (WSGI) v1.0 defines a standard
interface between web servers and Python web applications and is
described in PEP 333(1).  The *note wsgiref: 199. package is a
reference implementation of the WSGI specification.

  The package includes a basic HTTP server that will run a WSGI
application; this server is useful for debugging but isn't intended for
production use.  Setting up a server takes only a few lines of code:

    from wsgiref import simple_server

    wsgi_app = ...

    host = ''
    port = 8000
    httpd = simple_server.make_server(host, port, wsgi_app)
    httpd.serve_forever()


See also
........

<http://www.wsgi.org>
     A central web site for WSGI-related resources.

PEP 333(2) - Python Web Server Gateway Interface v1.0
     PEP written by Phillip J. Eby.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0333

  (2) http://www.python.org/dev/peps/pep-0333


File: python.info,  Node: Build and C API Changes<3>,  Next: Porting to Python 2 5,  Prev: New Improved and Removed Modules,  Up: What's New in Python 2 5

1.3.14 Build and C API Changes
------------------------------

Changes to Python's build process and to the C API include:

   * The Python source tree was converted from CVS to Subversion,  in a
     complex migration procedure that was supervised and flawlessly
     carried out by Martin von Löwis.  The procedure was developed as PEP
     347(1).

   * Coverity, a company that markets a source code analysis tool
     called Prevent, provided the results of their examination of the
     Python source code.  The analysis found about 60 bugs that  were
     quickly fixed.  Many of the bugs were refcounting problems, often
     occurring in error-handling code.  See <http://scan.coverity.com>
     for the statistics.

   * The largest change to the C API came from PEP 353(2), which
     modifies the interpreter to use a `Py_ssize_t' type definition
     instead of `int'.  See the earlier section *note PEP 353; Using
     ssize_t as the index type: 39d. for a discussion of this change.

   * The design of the bytecode compiler has changed a great deal,  no
     longer generating bytecode by traversing the parse tree.  Instead
     the parse tree is converted to an abstract syntax tree (or AST),
     and it is  the abstract syntax tree that's traversed to produce
     the bytecode.

     It's possible for Python code to obtain AST objects by using the
     *note compile(): 1f8. built-in and specifying `_ast.PyCF_ONLY_AST'
     as the value of the  _flags_ parameter:

         from _ast import PyCF_ONLY_AST
         ast = compile("""a=0
         for i in range(10):
             a += i
         """, "<string>", 'exec', PyCF_ONLY_AST)

         assignment = ast.body[0]
         for_loop = ast.body[1]

     No official documentation has been written for the AST code yet,
     but PEP 339(3) discusses the design.  To start learning about the
     code, read the definition of the various AST nodes in
     `Parser/Python.asdl'.  A Python script reads this file and
     generates a set of C structure definitions in
     `Include/Python-ast.h'.  The `PyParser_ASTFromString()' and
     `PyParser_ASTFromFile()', defined in `Include/pythonrun.h', take
     Python source as input and return the root of an AST representing
     the contents.  This AST can then be turned into a code object by
     `PyAST_Compile()'.  For more information, read the source code,
     and then ask questions on python-dev.

     The AST code was developed under Jeremy Hylton's management, and
     implemented by (in alphabetical order) Brett Cannon, Nick Coghlan,
     Grant Edwards, John Ehresman, Kurt Kaiser, Neal Norwitz, Tim
     Peters, Armin Rigo, and Neil Schemenauer, plus the participants in
     a number of AST sprints at conferences such as PyCon.

   * Evan Jones's patch to obmalloc, first described in a talk at PyCon
     DC 2005, was applied.  Python 2.4 allocated small objects in
     256K-sized arenas, but never freed arenas.  With this patch,
     Python will free arenas when they're empty.  The net effect is
     that on some platforms, when you allocate many objects, Python's
     memory usage may actually drop when you delete them and the memory
     may be returned to the operating system.  (Implemented by Evan
     Jones, and reworked by Tim Peters.)

     Note that this change means extension modules must be more careful
     when allocating memory.  Python's API has many different functions
     for allocating memory that are grouped into families.  For
     example, *note PyMem_Malloc(): 3d6, *note PyMem_Realloc(): 3d7,
     and *note PyMem_Free(): 3d8. are one family that allocates raw
     memory, while `PyObject_Malloc()', `PyObject_Realloc()', and
     `PyObject_Free()' are another family that's supposed to be used for
     creating Python objects.

     Previously these different families all reduced to the platform's
     `malloc()' and `free()' functions.  This meant  it didn't matter if
     you got things wrong and allocated memory with the `PyMem()'
     function but freed it with the *note PyObject(): 39f. function.
     With 2.5's changes to obmalloc, these families now do different
     things and mismatches will probably result in a segfault.  You
     should carefully test your C extension modules with Python 2.5.

   * The built-in set types now have an official C API.  Call *note
     PySet_New(): 3d9.  and *note PyFrozenSet_New(): 3da. to create a
     new set, *note PySet_Add(): 3db. and *note PySet_Discard(): 3dc.
     to add and remove elements, and *note PySet_Contains(): 3dd.  and
     *note PySet_Size(): 3de. to examine the set's state. (Contributed
     by Raymond Hettinger.)

   * C code can now obtain information about the exact revision of the
     Python interpreter by calling the  *note Py_GetBuildInfo(): 3c6.
     function that returns a string of build information like this:
     `"trunk:45355:45356M, Apr 13 2006, 07:42:19"'.   (Contributed by
     Barry Warsaw.)

   * Two new macros can be used to indicate C functions that are local
     to the current file so that a faster calling convention can be
     used.  `Py_LOCAL(type)()' declares the function as returning a
     value of the specified _type_ and uses a fast-calling qualifier.
     `Py_LOCAL_INLINE(type)()' does the same thing and also requests the
     function be inlined.  If `PY_LOCAL_AGGRESSIVE()' is defined before
     `python.h' is included, a set of more aggressive optimizations are
     enabled for the module; you should benchmark the results to find
     out if these optimizations actually make the code faster.
     (Contributed by Fredrik Lundh at the NeedForSpeed sprint.)

   * `PyErr_NewException(name, base, dict)()' can now accept a tuple of
     base classes as its _base_ argument.  (Contributed by Georg
     Brandl.)

   * The *note PyErr_Warn(): 3df. function for issuing warnings is now
     deprecated in favour of `PyErr_WarnEx(category, message,
     stacklevel)()' which lets you specify the number of stack frames
     separating this function and the caller.  A _stacklevel_ of 1 is
     the function calling *note PyErr_WarnEx(): 3e0, 2 is the function
     above that, and so forth.  (Added by Neal Norwitz.)

   * The CPython interpreter is still written in C, but  the code can
     now be compiled with a C++ compiler without errors.   (Implemented
     by Anthony Baxter, Martin von Löwis, Skip Montanaro.)

   * The `PyRange_New()' function was removed.  It was never
     documented, never used in the core code, and had dangerously lax
     error checking.  In the unlikely case that your extensions were
     using it, you can replace it by something like the following:

         range = PyObject_CallFunction((PyObject*) &PyRange_Type, "lll",
                                       start, stop, step);



* Menu:

* Port-Specific Changes::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0347

  (2) http://www.python.org/dev/peps/pep-0353

  (3) http://www.python.org/dev/peps/pep-0339


File: python.info,  Node: Port-Specific Changes,  Up: Build and C API Changes<3>

1.3.14.1 Port-Specific Changes
..............................

   * MacOS X (10.3 and higher): dynamic loading of modules now uses the
     `dlopen()' function instead of MacOS-specific functions.

   * MacOS X: an `--enable-universalsdk' switch was added to the
     *configure* script that compiles the interpreter as a universal
     binary able to run on both PowerPC and Intel processors.
     (Contributed by Ronald Oussoren; issue 2573(1).)

   * Windows: `.dll' is no longer supported as a filename extension for
     extension modules.  `.pyd' is now the only filename extension that
     will be searched for.

  ---------- Footnotes ----------

  (1) http://bugs.python.org/issue2573


File: python.info,  Node: Porting to Python 2 5,  Next: Acknowledgements<3>,  Prev: Build and C API Changes<3>,  Up: What's New in Python 2 5

1.3.15 Porting to Python 2.5
----------------------------

This section lists previously described changes that may require
changes to your code:

   * ASCII is now the default encoding for modules.  It's now  a syntax
     error if a module contains string literals with 8-bit characters
     but doesn't have an encoding declaration.  In Python 2.4 this
     triggered a warning, not a syntax error.

   * Previously, the `gi_frame' attribute of a generator was always a
     frame object.  Because of the PEP 342(1) changes described in
     section *note PEP 342; New Generator Features: 382, it's now
     possible for `gi_frame' to be `None'.

   * A new warning, `UnicodeWarning', is triggered when  you attempt to
     compare a Unicode string and an 8-bit string that can't be
     converted to Unicode using the default ASCII encoding.  Previously
     such comparisons would raise a `UnicodeDecodeError' exception.

   * Library: the *note csv: 77. module is now stricter about
     multi-line quoted fields.  If your files contain newlines embedded
     within fields, the input should be split into lines in a manner
     which preserves the newline characters.

   * Library: the *note locale: 100. module's  *note format(): 1ec.
     function's would previously  accept any string as long as no more
     than one %char specifier appeared.  In Python 2.5, the argument
     must be exactly one %char specifier with no surrounding text.

   * Library: The *note pickle: 12d. and *note cPickle: 73. modules no
     longer accept a return value of `None' from the *note
     __reduce__(): 3c5. method; the method must return a tuple of
     arguments instead.  The modules also no longer accept the
     deprecated _bin_ keyword parameter.

   * Library: The *note SimpleXMLRPCServer: 157. and *note
     DocXMLRPCServer: b6.  classes now have a `rpc_paths' attribute
     that constrains XML-RPC operations to a limited set of URL paths;
     the default is to allow only `'/'' and `'/RPC2''.  Setting
     `rpc_paths' to `None' or an empty tuple disables  this path
     checking.

   * C API: Many functions now use `Py_ssize_t'  instead of `int' to
     allow processing more data on 64-bit machines.  Extension code may
     need to make the same change to avoid warnings and to support
     64-bit machines.  See the earlier section *note PEP 353; Using
     ssize_t as the index type: 39d. for a discussion of this change.

   * C API:  The obmalloc changes mean that  you must be careful to not
     mix usage of the `PyMem_*()' and `PyObject_*()' families of
     functions. Memory allocated with  one family's `*_Malloc()' must
     be  freed with the corresponding family's `*_Free()' function.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0342


File: python.info,  Node: Acknowledgements<3>,  Prev: Porting to Python 2 5,  Up: What's New in Python 2 5

1.3.16 Acknowledgements
-----------------------

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gustäbel,
Raymond Hettinger, Ralf W. Grosse- Kunstleve, Kent Johnson, Iain Lowe,
Martin von Löwis, Fredrik Lundh, Andrew McNamara, Skip Montanaro,
Gustavo Niemeyer, Paul Prescod, James Pryor, Mike Rovner, Scott
Weikart, Barry Warsaw, Thomas Wouters.


File: python.info,  Node: What's New in Python 2 4,  Next: What's New in Python 2 3,  Prev: What's New in Python 2 5,  Up: What's New in Python

1.4 What's New in Python 2.4
============================

     Author: A.M. Kuchling

  This article explains the new features in Python 2.4.1, released on
March 30, 2005.

  Python 2.4 is a medium-sized release.  It doesn't introduce as many
changes as the radical Python 2.2, but introduces more features than
the conservative 2.3 release.  The most significant new language
features are function decorators and generator expressions; most other
changes are to the standard library.

  According to the CVS change logs, there were 481 patches applied and
502 bugs fixed between Python 2.3 and 2.4.  Both figures are likely to
be underestimates.

  This article doesn't attempt to provide a complete specification of
every single new feature, but instead provides a brief introduction to
each feature.  For full details, you should refer to the documentation
for Python 2.4, such as the Python Library Reference and the Python
Reference Manual.  Often you will be referred to the PEP for a
particular new feature for explanations of the implementation and
design rationale.

* Menu:

* PEP 218; Built-In Set Objects: PEP 218 Built-In Set Objects.
* PEP 237; Unifying Long Integers and Integers: PEP 237 Unifying Long Integers and Integers.
* PEP 289; Generator Expressions: PEP 289 Generator Expressions.
* PEP 292; Simpler String Substitutions: PEP 292 Simpler String Substitutions.
* PEP 318; Decorators for Functions and Methods: PEP 318 Decorators for Functions and Methods.
* PEP 322; Reverse Iteration: PEP 322 Reverse Iteration.
* PEP 324; New subprocess Module: PEP 324 New subprocess Module.
* PEP 327; Decimal Data Type: PEP 327 Decimal Data Type.
* PEP 328; Multi-line Imports: PEP 328 Multi-line Imports.
* PEP 331; Locale-Independent Float/String Conversions: PEP 331 Locale-Independent Float/String Conversions.
* Other Language Changes: Other Language Changes<4>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules.
* Build and C API Changes: Build and C API Changes<4>.
* Porting to Python 2.4: Porting to Python 2 4.
* Acknowledgements: Acknowledgements<4>.


File: python.info,  Node: PEP 218 Built-In Set Objects,  Next: PEP 237 Unifying Long Integers and Integers,  Up: What's New in Python 2 4

1.4.1 PEP 218: Built-In Set Objects
-----------------------------------

Python 2.3 introduced the *note sets: 14f. module.  C implementations
of set data types have now been added to the Python core as two new
built-in types, `set(iterable)()' and `frozenset(iterable)()'.  They
provide high speed operations for membership testing, for eliminating
duplicates from sequences, and for mathematical operations like unions,
intersections, differences, and symmetric differences.

    >>> a = set('abracadabra')              # form a set from a string
    >>> 'z' in a                            # fast membership testing
    False
    >>> a                                   # unique letters in a
    set(['a', 'r', 'b', 'c', 'd'])
    >>> ''.join(a)                          # convert back into a string
    'arbcd'

    >>> b = set('alacazam')                 # form a second set
    >>> a - b                               # letters in a but not in b
    set(['r', 'd', 'b'])
    >>> a | b                               # letters in either a or b
    set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
    >>> a & b                               # letters in both a and b
    set(['a', 'c'])
    >>> a ^ b                               # letters in a or b but not both
    set(['r', 'd', 'b', 'm', 'z', 'l'])

    >>> a.add('z')                          # add a new element
    >>> a.update('wxy')                     # add multiple new elements
    >>> a
    set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])
    >>> a.remove('x')                       # take one element out
    >>> a
    set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])

The *note frozenset(): 364. type is an immutable version of *note
set(): 363. Since it is immutable and hashable, it may be used as a
dictionary key or as a member of another set.

  The *note sets: 14f. module remains in the standard library, and may
be useful if you wish to subclass the `Set' or `ImmutableSet' classes.
There are currently no plans to deprecate the module.

See also
........

PEP 218(1) - Adding a Built-In Set Object Type
     Originally proposed by Greg Wilson and ultimately implemented by
     Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0218


File: python.info,  Node: PEP 237 Unifying Long Integers and Integers,  Next: PEP 289 Generator Expressions,  Prev: PEP 218 Built-In Set Objects,  Up: What's New in Python 2 4

1.4.2 PEP 237: Unifying Long Integers and Integers
--------------------------------------------------

The lengthy transition process for this PEP, begun in Python 2.2, takes
another step forward in Python 2.4.  In 2.3, certain integer operations
that would behave differently after int/long unification triggered
*note FutureWarning: 2b1.  warnings and returned values limited to 32
or 64 bits (depending on your platform).  In 2.4, these expressions no
longer produce a warning and instead produce a different result that's
usually a long integer.

  The problematic expressions are primarily left shifts and lengthy
hexadecimal and octal constants.  For example, `2 << 32' results in a
warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4,
this expression now returns the correct answer, 8589934592.

See also
........

PEP 237(1) - Unifying Long Integers and Integers
     Original PEP written by Moshe Zadka and GvR.  The changes for 2.4
     were implemented by  Kalle Svensson.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0237


File: python.info,  Node: PEP 289 Generator Expressions,  Next: PEP 292 Simpler String Substitutions,  Prev: PEP 237 Unifying Long Integers and Integers,  Up: What's New in Python 2 4

1.4.3 PEP 289: Generator Expressions
------------------------------------

The iterator feature introduced in Python 2.2 and the *note itertools:
fa. module make it easier to write programs that loop through large
data sets without having the entire data set in memory at one time.
List comprehensions don't fit into this picture very well because they
produce a Python list object containing all of the items.  This
unavoidably pulls all of the objects into memory, which can be a
problem if your data set is very large.  When trying to write a
functionally-styled program, it would be natural to write something
like:

    links = [link for link in get_all_links() if not link.followed]
    for link in links:
        ...

instead of

    for link in get_all_links():
        if link.followed:
            continue
        ...

The first form is more concise and perhaps more readable, but if you're
dealing with a large number of link objects you'd have to write the
second form to avoid having all link objects in memory at the same time.

  Generator expressions work similarly to list comprehensions but don't
materialize the entire list; instead they create a generator that will
return elements one by one.  The above example could be written as:

    links = (link for link in get_all_links() if not link.followed)
    for link in links:
        ...

Generator expressions always have to be written inside parentheses, as
in the above example.  The parentheses signalling a function call also
count, so if you want to create an iterator that will be immediately
passed to a function you could write:

    print sum(obj.count for obj in list_all_objects())

Generator expressions differ from list comprehensions in various small
ways.  Most notably, the loop variable (_obj_ in the above example) is
not accessible outside of the generator expression.  List
comprehensions leave the variable assigned to its last value; future
versions of Python will change this, making list comprehensions match
generator expressions in this respect.

See also
........

PEP 289(1) - Generator Expressions
     Proposed by Raymond Hettinger and implemented by Jiwon Seo with
     early efforts steered by Hye-Shik Chang.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0289


File: python.info,  Node: PEP 292 Simpler String Substitutions,  Next: PEP 318 Decorators for Functions and Methods,  Prev: PEP 289 Generator Expressions,  Up: What's New in Python 2 4

1.4.4 PEP 292: Simpler String Substitutions
-------------------------------------------

Some new classes in the standard library provide an alternative
mechanism for substituting variables into strings; this style of
substitution may be better for applications where untrained users need
to edit templates.

  The usual way of substituting variables by name is the `%' operator:

    >>> '%(page)i: %(title)s' % {'page':2, 'title': 'The Best of Times'}
    '2: The Best of Times'

When writing the template string, it can be easy to forget the `i' or
`s' after the closing parenthesis.  This isn't a big problem if the
template is in a Python module, because you run the code, get an
"Unsupported format character" *note ValueError: 233, and fix the
problem.  However, consider an application such as Mailman where
template strings or translations are being edited by users who aren't
aware of the Python language.  The format string's syntax is complicated
to explain to such users, and if they make a mistake, it's difficult to
provide helpful feedback to them.

  PEP 292 adds a `Template' class to the *note string: 163. module that
uses `$' to indicate a substitution:

    >>> import string
    >>> t = string.Template('$page: $title')
    >>> t.substitute({'page':2, 'title': 'The Best of Times'})
    '2: The Best of Times'

If a key is missing from the dictionary, the `substitute()' method will
raise a *note KeyError: 202.  There's also a `safe_substitute()' method
that ignores missing keys:

    >>> t = string.Template('$page: $title')
    >>> t.safe_substitute({'page':3})
    '3: $title'


See also
........

PEP 292(1) - Simpler String Substitutions
     Written and implemented  by Barry Warsaw.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0292


File: python.info,  Node: PEP 318 Decorators for Functions and Methods,  Next: PEP 322 Reverse Iteration,  Prev: PEP 292 Simpler String Substitutions,  Up: What's New in Python 2 4

1.4.5 PEP 318: Decorators for Functions and Methods
---------------------------------------------------

Python 2.2 extended Python's object model by adding static methods and
class methods, but it didn't extend Python's syntax to provide any new
way of defining static or class methods.  Instead, you had to write a
*note def: 3ed. statement in the usual way, and pass the resulting
method to a *note staticmethod(): 3ee. or *note classmethod(): 3ef.
function that would wrap up the function as a method of the new type.
Your code would look like this:

    class C:
       def meth (cls):
           ...

       meth = classmethod(meth)   # Rebind name to wrapped-up class method

If the method was very long, it would be easy to miss or forget the
*note classmethod(): 3ef. invocation after the function body.

  The intention was always to add some syntax to make such definitions
more readable, but at the time of 2.2's release a good syntax was not
obvious.  Today a good syntax _still_ isn't obvious but users are
asking for easier access to the feature; a new syntactic feature has
been added to meet this need.

  The new feature is called "function decorators".  The name comes from
the idea that *note classmethod(): 3ef, *note staticmethod(): 3ee, and
friends are storing additional information on a function object;
they're _decorating_ functions with more details.

  The notation borrows from Java and uses the `'@'' character as an
indicator.  Using the new syntax, the example above would be written:

    class C:

       @classmethod
       def meth (cls):
           ...

The `@classmethod' is shorthand for the `meth=classmethod(meth)'
assignment.  More generally, if you have the following:

    @A
    @B
    @C
    def f ():
        ...

It's equivalent to the following pre-decorator code:

    def f(): ...
    f = A(B(C(f)))

Decorators must come on the line before a function definition, one
decorator per line, and can't be on the same line as the def statement,
meaning that `@A def f(): ...' is illegal.  You can only decorate
function definitions, either at the module level or inside a class; you
can't decorate class definitions.

  A decorator is just a function that takes the function to be
decorated as an argument and returns either the same function or some
new object.  The return value of the decorator need not be callable
(though it typically is), unless further decorators will be applied to
the result.  It's easy to write your own decorators.  The following
simple example just sets an attribute on the function object:

    >>> def deco(func):
    ...    func.attr = 'decorated'
    ...    return func
    ...
    >>> @deco
    ... def f(): pass
    ...
    >>> f
    <function f at 0x402ef0d4>
    >>> f.attr
    'decorated'
    >>>

As a slightly more realistic example, the following decorator checks
that the supplied argument is an integer:

    def require_int (func):
        def wrapper (arg):
            assert isinstance(arg, int)
            return func(arg)

        return wrapper

    @require_int
    def p1 (arg):
        print arg

    @require_int
    def p2(arg):
        print arg*2

An example in PEP 318(1) contains a fancier version of this idea that
lets you both specify the required type and check the returned type.

  Decorator functions can take arguments.  If arguments are supplied,
your decorator function is called with only those arguments and must
return a new decorator function; this function must take a single
function and return a function, as previously described.  In other
words, `@A @B @C(args)' becomes:

    def f(): ...
    _deco = C(args)
    f = A(B(_deco(f)))

Getting this right can be slightly brain-bending, but it's not too
difficult.

  A small related change makes the `func_name' attribute of functions
writable.  This attribute is used to display function names in
tracebacks, so decorators should change the name of any new function
that's constructed and returned.

See also
........

PEP 318(2) - Decorators for Functions, Methods and Classes
     Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.
     Several people wrote patches implementing function decorators, but
     the one that was actually checked in was patch #979728, written by
     Mark Russell.

<http://www.python.org/moin/PythonDecoratorLibrary>
     This Wiki page contains several examples of decorators.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0318

  (2) http://www.python.org/dev/peps/pep-0318


File: python.info,  Node: PEP 322 Reverse Iteration,  Next: PEP 324 New subprocess Module,  Prev: PEP 318 Decorators for Functions and Methods,  Up: What's New in Python 2 4

1.4.6 PEP 322: Reverse Iteration
--------------------------------

A new built-in function, `reversed(seq)()', takes a sequence and
returns an iterator that loops over the elements of the sequence  in
reverse order.

    >>> for i in reversed(xrange(1,4)):
    ...    print i
    ...
    3
    2
    1

Compared to extended slicing, such as `range(1,4)[::-1]', *note
reversed(): 3f1. is easier to read, runs faster, and uses substantially
less memory.

  Note that *note reversed(): 3f1. only accepts sequences, not
arbitrary iterators.  If you want to reverse an iterator, first convert
it to  a list with *note list(): 3b5.

    >>> input = open('/etc/passwd', 'r')
    >>> for line in reversed(list(input)):
    ...   print line
    ...
    root:*:0:0:System Administrator:/var/root:/bin/tcsh
      ...


See also
........

PEP 322(1) - Reverse Iteration
     Written and implemented by Raymond Hettinger.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0322


File: python.info,  Node: PEP 324 New subprocess Module,  Next: PEP 327 Decimal Data Type,  Prev: PEP 322 Reverse Iteration,  Up: What's New in Python 2 4

1.4.7 PEP 324: New subprocess Module
------------------------------------

The standard library provides a number of ways to execute a subprocess,
offering different features and different levels of complexity.
`os.system(command)()' is easy to use, but slow (it runs a shell process
which executes the command) and dangerous (you have to be careful about
escaping the shell's metacharacters).  The *note popen2: 134. module
offers classes that can capture standard output and standard error from
the subprocess, but the naming is confusing.  The *note subprocess:
167. module cleans  this up, providing a unified interface that offers
all the features you might need.

  Instead of *note popen2: 134.'s collection of classes, *note
subprocess: 167. contains a single class called `Popen'  whose
constructor supports a number of different keyword arguments.

    class Popen(args, bufsize=0, executable=None,
                stdin=None, stdout=None, stderr=None,
                preexec_fn=None, close_fds=False, shell=False,
                cwd=None, env=None, universal_newlines=False,
                startupinfo=None, creationflags=0):

_args_ is commonly a sequence of strings that will be the arguments to
the program executed as the subprocess.  (If the _shell_ argument is
true, _args_ can be a string which will then be passed on to the shell
for interpretation, just as *note os.system(): 3f3. does.)

  _stdin_, _stdout_, and _stderr_ specify what the subprocess's input,
output, and error streams will be.  You can provide a file object or a
file descriptor, or you can use the constant `subprocess.PIPE' to
create a pipe between the subprocess and the parent.

  The constructor has a number of handy options:

   * _close_fds_ requests that all file descriptors be closed before
     running the subprocess.

   * _cwd_ specifies the working directory in which the subprocess will
     be executed (defaulting to whatever the parent's working directory
     is).

   * _env_ is a dictionary specifying environment variables.

   * _preexec_fn_ is a function that gets called before the child is
     started.

   * _universal_newlines_ opens the child's input and output using
     Python's *note universal newlines: 30e. feature.

  Once you've created the `Popen' instance,  you can call its `wait()'
method to pause until the subprocess has exited, `poll()' to check if
it's exited without pausing,  or `communicate(data)()' to send the
string _data_ to the subprocess's standard input.
`communicate(data)()'  then reads any data that the subprocess has sent
to its standard output  or standard error, returning a tuple
`(stdout_data, stderr_data)'.

  `call()' is a shortcut that passes its arguments along to the `Popen'
constructor, waits for the command to complete, and returns the status
code of the subprocess.  It can serve as a safer analog to *note
os.system(): 3f3.:

    sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb'])
    if sts == 0:
        # Success
        ...
    else:
        # dpkg returned an error
        ...

The command is invoked without use of the shell.  If you really do want
to  use the shell, you can add `shell=True' as a keyword argument and
provide a string instead of a sequence:

    sts = subprocess.call('dpkg -i /tmp/new-package.deb', shell=True)

The PEP takes various examples of shell and Python code and shows how
they'd be translated into Python code that uses *note subprocess: 167.
Reading this section of the PEP is highly recommended.

See also
........

PEP 324(1) - subprocess - New process module
     Written and implemented by Peter Åstrand, with assistance from
     Fredrik Lundh and others.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0324


File: python.info,  Node: PEP 327 Decimal Data Type,  Next: PEP 328 Multi-line Imports,  Prev: PEP 324 New subprocess Module,  Up: What's New in Python 2 4

1.4.8 PEP 327: Decimal Data Type
--------------------------------

Python has always supported floating-point (FP) numbers, based on the
underlying C `double' type, as a data type.  However, while most
programming languages provide a floating-point type, many people (even
programmers) are unaware that floating-point numbers don't represent
certain decimal fractions accurately.  The new `Decimal' type can
represent these fractions accurately, up to a user-specified precision
limit.

* Menu:

* Why is Decimal needed?::
* The Decimal type::
* The Context type::


File: python.info,  Node: Why is Decimal needed?,  Next: The Decimal type,  Up: PEP 327 Decimal Data Type

1.4.8.1 Why is Decimal needed?
..............................

The limitations arise from the representation used for floating-point
numbers.  FP numbers are made up of three components:

   * The sign, which is positive or negative.

   * The mantissa, which is a single-digit binary number   followed by
     a fractional part.  For example, `1.01' in base-2 notation is `1 +
     0/2 + 1/4', or 1.25 in decimal notation.

   * The exponent, which tells where the decimal point is located in
     the number represented.

  For example, the number 1.25 has positive sign, a mantissa value of
1.01 (in binary), and an exponent of 0 (the decimal point doesn't need
to be shifted).  The number 5 has the same sign and mantissa, but the
exponent is 2 because the mantissa is multiplied by 4 (2 to the power
of the exponent 2); 1.25 * 4 equals 5.

  Modern systems usually provide floating-point support that conforms
to a standard called IEEE 754.  C's `double' type is usually
implemented as a 64-bit IEEE 754 number, which uses 52 bits of space
for the mantissa.  This means that numbers can only be specified to 52
bits of precision.  If you're trying to represent numbers whose
expansion repeats endlessly, the expansion is cut off after 52 bits.
Unfortunately, most software needs to produce output in base 10, and
common fractions in base 10 are often repeating decimals in binary.
For example, 1.1 decimal is binary `1.0001100110011 ...'; .1 = 1/16 +
1/32 + 1/256 plus an infinite number of additional terms.  IEEE 754 has
to chop off that infinitely repeated decimal after 52 digits, so the
representation is slightly inaccurate.

  Sometimes you can see this inaccuracy when the number is printed:

    >>> 1.1
    1.1000000000000001

The inaccuracy isn't always visible when you print the number because
the FP-to- decimal-string conversion is provided by the C library, and
most C libraries try to produce sensible output.  Even if it's not
displayed, however, the inaccuracy is still there and subsequent
operations can magnify the error.

  For many applications this doesn't matter.  If I'm plotting points and
displaying them on my monitor, the difference between 1.1 and
1.1000000000000001 is too small to be visible.  Reports often limit
output to a certain number of decimal places, and if you round the
number to two or three or even eight decimal places, the error is never
apparent.  However, for applications where it does matter,  it's a lot
of work to implement your own custom arithmetic routines.

  Hence, the `Decimal' type was created.


File: python.info,  Node: The Decimal type,  Next: The Context type,  Prev: Why is Decimal needed?,  Up: PEP 327 Decimal Data Type

1.4.8.2 The `Decimal' type
..........................

A new module, *note decimal: 80, was added to Python's standard
library.  It contains two classes, `Decimal' and `Context'.  `Decimal'
instances represent numbers, and `Context' instances are used to wrap up
various settings such as the precision and default rounding mode.

  `Decimal' instances are immutable, like regular Python integers and FP
numbers; once it's been created, you can't change the value an instance
represents.  `Decimal' instances can be created from integers or
strings:

    >>> import decimal
    >>> decimal.Decimal(1972)
    Decimal("1972")
    >>> decimal.Decimal("1.1")
    Decimal("1.1")

You can also provide tuples containing the sign, the mantissa
represented  as a tuple of decimal digits, and the exponent:

    >>> decimal.Decimal((1, (1, 4, 7, 5), -2))
    Decimal("-14.75")

Cautionary note: the sign bit is a Boolean value, so 0 is positive and
1 is negative.

  Converting from floating-point numbers poses a bit of a problem:
should the FP number representing 1.1 turn into the decimal number for
exactly 1.1, or for 1.1 plus whatever inaccuracies are introduced? The
decision was to dodge the issue and leave such a conversion out of the
API.  Instead, you should convert the floating-point number into a
string using the desired precision and pass the string to the `Decimal'
constructor:

    >>> f = 1.1
    >>> decimal.Decimal(str(f))
    Decimal("1.1")
    >>> decimal.Decimal('%.12f' % f)
    Decimal("1.100000000000")

Once you have `Decimal' instances, you can perform the usual
mathematical operations on them.  One limitation: exponentiation
requires an integer exponent:

    >>> a = decimal.Decimal('35.72')
    >>> b = decimal.Decimal('1.73')
    >>> a+b
    Decimal("37.45")
    >>> a-b
    Decimal("33.99")
    >>> a*b
    Decimal("61.7956")
    >>> a/b
    Decimal("20.64739884393063583815028902")
    >>> a ** 2
    Decimal("1275.9184")
    >>> a**b
    Traceback (most recent call last):
      ...
    decimal.InvalidOperation: x ** (non-integer)

You can combine `Decimal' instances with integers, but not with
floating- point numbers:

    >>> a + 4
    Decimal("39.72")
    >>> a + 4.5
    Traceback (most recent call last):
      ...
    TypeError: You can interact Decimal only with int, long or Decimal data types.
    >>>

`Decimal' numbers can be used with the *note math: 10c. and *note
cmath: 60.  modules, but note that they'll be immediately converted to
floating-point numbers before the operation is performed, resulting in
a possible loss of precision and accuracy.  You'll also get back a
regular floating-point number and not a `Decimal'.

    >>> import math, cmath
    >>> d = decimal.Decimal('123456789012.345')
    >>> math.sqrt(d)
    351364.18288201344
    >>> cmath.sqrt(-d)
    351364.18288201344j

`Decimal' instances have a `sqrt()' method that returns a `Decimal',
but if you need other things such as trigonometric functions you'll
have to implement them.

    >>> d.sqrt()
    Decimal("351364.1828820134592177245001")



File: python.info,  Node: The Context type,  Prev: The Decimal type,  Up: PEP 327 Decimal Data Type

1.4.8.3 The `Context' type
..........................

Instances of the `Context' class encapsulate several settings for
decimal operations:

   * `prec' is the precision, the number of decimal places.

   * `rounding' specifies the rounding mode.  The *note decimal: 80.
     module has constants for the various possibilities: `ROUND_DOWN',
     `ROUND_CEILING',  `ROUND_HALF_EVEN', and various others.

   * `traps' is a dictionary specifying what happens on encountering
     certain error conditions: either  an exception is raised or  a
     value is returned.  Some examples of error conditions are division
     by zero, loss of precision, and overflow.

  There's a thread-local default context available by calling
`getcontext()'; you can change the properties of this context to alter
the default precision, rounding, or trap handling.  The following
example shows the effect of changing the precision of the default
context:

    >>> decimal.getcontext().prec
    28
    >>> decimal.Decimal(1) / decimal.Decimal(7)
    Decimal("0.1428571428571428571428571429")
    >>> decimal.getcontext().prec = 9
    >>> decimal.Decimal(1) / decimal.Decimal(7)
    Decimal("0.142857143")

The default action for error conditions is selectable; the module can
either return a special value such as infinity or not-a-number, or
exceptions can be raised:

    >>> decimal.Decimal(1) / decimal.Decimal(0)
    Traceback (most recent call last):
      ...
    decimal.DivisionByZero: x / 0
    >>> decimal.getcontext().traps[decimal.DivisionByZero] = False
    >>> decimal.Decimal(1) / decimal.Decimal(0)
    Decimal("Infinity")
    >>>

The `Context' instance also has various methods for formatting  numbers
such as `to_eng_string()' and `to_sci_string()'.

  For more information, see the documentation for the *note decimal:
80. module, which includes a quick-start tutorial and a reference.

See also
........

PEP 327(1) - Decimal Data Type
     Written by Facundo Batista and implemented by Facundo Batista,
     Eric Price, Raymond Hettinger, Aahz, and Tim Peters.

<http://www.lahey.com/float.htm>
     The article uses Fortran code to illustrate many of the problems
     that floating- point inaccuracy can cause.

<http://www2.hursley.ibm.com/decimal/>
     A description of a decimal-based representation.  This
     representation is being proposed as a standard, and underlies the
     new Python decimal type.  Much of this material was written by
     Mike Cowlishaw, designer of the Rexx language.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0327


File: python.info,  Node: PEP 328 Multi-line Imports,  Next: PEP 331 Locale-Independent Float/String Conversions,  Prev: PEP 327 Decimal Data Type,  Up: What's New in Python 2 4

1.4.9 PEP 328: Multi-line Imports
---------------------------------

One language change is a small syntactic tweak aimed at making it
easier to import many names from a module.  In a `from module import
names' statement, _names_ is a sequence of names separated by commas.
If the sequence is  very long, you can either write multiple imports
from the same module, or you can use backslashes to escape the line
endings like this:

    from SimpleXMLRPCServer import SimpleXMLRPCServer,\
                SimpleXMLRPCRequestHandler,\
                CGIXMLRPCRequestHandler,\
                resolve_dotted_attribute

The syntactic change in Python 2.4 simply allows putting the names
within parentheses.  Python ignores newlines within a parenthesized
expression, so the backslashes are no longer needed:

    from SimpleXMLRPCServer import (SimpleXMLRPCServer,
                                    SimpleXMLRPCRequestHandler,
                                    CGIXMLRPCRequestHandler,
                                    resolve_dotted_attribute)

The PEP also proposes that all *note import: 1f1. statements be
absolute imports, with a leading `.' character to indicate a relative
import.  This part of the PEP was not implemented for Python 2.4, but
was completed for Python 2.5.

See also
........

PEP 328(1) - Imports: Multi-Line and Absolute/Relative
     Written by Aahz.  Multi-line imports were implemented by Dima
     Dorfman.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0328


File: python.info,  Node: PEP 331 Locale-Independent Float/String Conversions,  Next: Other Language Changes<4>,  Prev: PEP 328 Multi-line Imports,  Up: What's New in Python 2 4

1.4.10 PEP 331: Locale-Independent Float/String Conversions
-----------------------------------------------------------

The *note locale: 100. modules lets Python software select various
conversions and display conventions that are localized to a particular
country or language.  However, the module was careful to not change the
numeric locale because various functions in Python's implementation
required that the numeric locale remain set to the `'C'' locale.  Often
this was because the code was using the C library's `atof()' function.

  Not setting the numeric locale caused trouble for extensions that
used third- party C libraries, however, because they wouldn't have the
correct locale set.  The motivating example was GTK+, whose user
interface widgets weren't displaying numbers in the current locale.

  The solution described in the PEP is to add three new functions to
the Python API that perform ASCII-only conversions, ignoring the locale
setting:

   * `PyOS_ascii_strtod(str, ptr)()'  and `PyOS_ascii_atof(str, ptr)()'
     both convert a string to a C `double'.

   * `PyOS_ascii_formatd(buffer, buf_len, format, d)()' converts a
     `double' to an ASCII string.

  The code for these functions came from the GLib library
(<http://library.gnome.org/devel/glib/stable/>), whose developers kindly
relicensed the relevant functions and donated them to the Python
Software Foundation.  The *note locale: 100. module  can now change the
numeric locale, letting extensions such as GTK+  produce the correct
results.

See also
........

PEP 331(1) - Locale-Independent Float/String Conversions
     Written by Christian R. Reis, and implemented by Gustavo Carneiro.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0331


File: python.info,  Node: Other Language Changes<4>,  Next: New Improved and Deprecated Modules,  Prev: PEP 331 Locale-Independent Float/String Conversions,  Up: What's New in Python 2 4

1.4.11 Other Language Changes
-----------------------------

Here are all of the changes that Python 2.4 makes to the core Python
language.

   * Decorators for functions and methods were added ( PEP 318(1)).

   * Built-in *note set(): 363. and *note frozenset(): 364. types were
     added ( PEP 218(2)).  Other new built-ins include the
     `reversed(seq)()' function ( PEP 322(3)).

   * Generator expressions were added ( PEP 289(4)).

   * Certain numeric expressions no longer return values restricted to
     32 or 64 bits ( PEP 237(5)).

   * You can now put parentheses around the list of names in a `from
     module import names' statement ( PEP 328(6)).

   * The *note dict.update(): 3fb. method now accepts the same argument
     forms as the *note dict: 2fe. constructor.  This includes any
     mapping, any iterable of key/value pairs, and keyword arguments.
     (Contributed by Raymond Hettinger.)

   * The string methods `ljust()', `rjust()', and `center()' now take
     an optional argument for specifying a fill character other than a
     space.  (Contributed by Raymond Hettinger.)

   * Strings also gained an `rsplit()' method that works like the
     `split()' method but splits from the end of the string.
     (Contributed by Sean Reifschneider.)

         >>> 'www.python.org'.split('.', 1)
         ['www', 'python.org']
         'www.python.org'.rsplit('.', 1)
         ['www.python', 'org']


   * Three keyword parameters, _cmp_, _key_, and _reverse_, were added
     to the `sort()' method of lists. These parameters make some common
     usages of `sort()' simpler. All of these parameters are optional.

     For the _cmp_ parameter, the value should be a comparison function
     that takes two parameters and returns -1, 0, or +1 depending on
     how the parameters compare.  This function will then be used to
     sort the list.  Previously this was the only parameter that could
     be provided to `sort()'.

     _key_ should be a single-parameter function that takes a list
     element and returns a comparison key for the element.  The list is
     then sorted using the comparison keys.  The following example
     sorts a list case-insensitively:

         >>> L = ['A', 'b', 'c', 'D']
         >>> L.sort()                 # Case-sensitive sort
         >>> L
         ['A', 'D', 'b', 'c']
         >>> # Using 'key' parameter to sort list
         >>> L.sort(key=lambda x: x.lower())
         >>> L
         ['A', 'b', 'c', 'D']
         >>> # Old-fashioned way
         >>> L.sort(cmp=lambda x,y: cmp(x.lower(), y.lower()))
         >>> L
         ['A', 'b', 'c', 'D']

     The last example, which uses the _cmp_ parameter, is the old way
     to perform a case-insensitive sort.  It works but is slower than
     using a _key_ parameter.  Using _key_ calls `lower()' method once
     for each element in the list while using _cmp_ will call it twice
     for each comparison, so using _key_ saves on invocations of the
     `lower()' method.

     For simple key functions and comparison functions, it is often
     possible to avoid a *note lambda: 3fc. expression by using an
     unbound method instead.  For example, the above case-insensitive
     sort is best written as:

         >>> L.sort(key=str.lower)
         >>> L
         ['A', 'b', 'c', 'D']

     Finally, the _reverse_ parameter takes a Boolean value.  If the
     value is true, the list will be sorted into reverse order. Instead
     of `L.sort() ; L.reverse()', you can now write
     `L.sort(reverse=True)'.

     The results of sorting are now guaranteed to be stable.  This
     means that two entries with equal keys will be returned in the
     same order as they were input.  For example, you can sort a list
     of people by name, and then sort the list by age, resulting in a
     list sorted by age where people with the same age are in
     name-sorted order.

     (All changes to `sort()' contributed by Raymond Hettinger.)

   * There is a new built-in function `sorted(iterable)()' that works
     like the in-place `list.sort()' method but can be used in
     expressions.  The differences are:

   * the input may be any iterable;

   * a newly formed copy is sorted, leaving the original intact; and

   * the expression returns the new sorted copy

         >>> L = [9,7,8,3,2,4,1,6,5]
         >>> [10+i for i in sorted(L)]       # usable in a list comprehension
         [11, 12, 13, 14, 15, 16, 17, 18, 19]
         >>> L                               # original is left unchanged
         [9,7,8,3,2,4,1,6,5]
         >>> sorted('Monty Python')          # any iterable may be an input
         [' ', 'M', 'P', 'h', 'n', 'n', 'o', 'o', 't', 't', 'y', 'y']

         >>> # List the contents of a dict sorted by key values
         >>> colormap = dict(red=1, blue=2, green=3, black=4, yellow=5)
         >>> for k, v in sorted(colormap.iteritems()):
         ...     print k, v
         ...
         black 4
         blue 2
         green 3
         red 1
         yellow 5

     (Contributed by Raymond Hettinger.)

   * Integer operations will no longer trigger an `OverflowWarning'. The
     `OverflowWarning' warning will disappear in Python 2.5.

   * The interpreter gained a new switch, *note -m: 2f4, that takes a
     name, searches for the corresponding  module on `sys.path', and
     runs the module as a script.  For example,  you can now run the
     Python profiler with `python -m profile'.  (Contributed by Nick
     Coghlan.)

   * The `eval(expr, globals, locals)()' and `execfile(filename,
     globals, locals)()' functions and the *note exec: 3fd. statement
     now accept any mapping type for the _locals_ parameter.
     Previously this had to be a regular Python dictionary.
     (Contributed by Raymond Hettinger.)

   * The *note zip(): 3fe. built-in function and *note
     itertools.izip(): 3ff. now return an empty list if called with no
     arguments. Previously they raised a *note TypeError: 215.
     exception.  This makes them more suitable for use with variable
     length argument lists:

         >>> def transpose(array):
         ...    return zip(*array)
         ...
         >>> transpose([(1,2,3), (4,5,6)])
         [(1, 4), (2, 5), (3, 6)]
         >>> transpose([])
         []

     (Contributed by Raymond Hettinger.)

   * Encountering a failure while importing a module no longer leaves a
     partially- initialized module object in `sys.modules'.  The
     incomplete module object left behind would fool further imports of
     the same module into succeeding, leading to confusing errors.
     (Fixed by Tim Peters.)

   * *note None: 393. is now a constant; code that binds a new value to
     the name `None' is now a syntax error. (Contributed by Raymond
     Hettinger.)

* Menu:

* Optimizations: Optimizations<4>.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0318

  (2) http://www.python.org/dev/peps/pep-0218

  (3) http://www.python.org/dev/peps/pep-0322

  (4) http://www.python.org/dev/peps/pep-0289

  (5) http://www.python.org/dev/peps/pep-0237

  (6) http://www.python.org/dev/peps/pep-0328


File: python.info,  Node: Optimizations<4>,  Up: Other Language Changes<4>

1.4.11.1 Optimizations
......................

   * The inner loops for list and tuple slicing were optimized and now
     run about one-third faster.  The inner loops for dictionaries were
     also optimized, resulting in performance boosts for `keys()',
     `values()', `items()', `iterkeys()', `itervalues()', and
     `iteritems()'. (Contributed by Raymond Hettinger.)

   * The machinery for growing and shrinking lists was optimized for
     speed and for space efficiency.  Appending and popping from lists
     now runs faster due to more efficient code paths and less frequent
     use of the underlying system `realloc()'.  List comprehensions
     also benefit.   `list.extend()' was also optimized and no longer
     converts its argument into a temporary list before extending the
     base list.  (Contributed by Raymond Hettinger.)

   * *note list(): 3b5, *note tuple(): 401, *note map(): 2fd, *note
     filter(): 402, and *note zip(): 3fe. now run several times faster
     with non-sequence arguments that supply a *note __len__(): 403.
     method.  (Contributed by Raymond Hettinger.)

   * The methods `list.__getitem__()', `dict.__getitem__()', and
     `dict.__contains__()' are now implemented as `method_descriptor'
     objects rather than `wrapper_descriptor' objects.  This form of
     access doubles their performance and makes them more suitable for
     use as arguments to functionals: `map(mydict.__getitem__,
     keylist)'. (Contributed by Raymond Hettinger.)

   * Added a new opcode, `LIST_APPEND', that simplifies the generated
     bytecode for list comprehensions and speeds them up by about a
     third.  (Contributed by Raymond Hettinger.)

   * The peephole bytecode optimizer has been improved to  produce
     shorter, faster bytecode; remarkably, the resulting bytecode is
     more readable.  (Enhanced by Raymond Hettinger.)

   * String concatenations in statements of the form `s = s + "abc"'
     and `s += "abc"' are now performed more efficiently in certain
     circumstances.  This optimization won't be present in other Python
     implementations such as Jython, so you shouldn't rely on it; using
     the `join()' method of strings is still recommended when you want
     to efficiently glue a large number of strings together.
     (Contributed by Armin Rigo.)

  The net result of the 2.4 optimizations is that Python 2.4 runs the
pystone benchmark around 5% faster than Python 2.3 and 35% faster than
Python 2.2.  (pystone is not a particularly good benchmark, but it's
the most commonly used measurement of Python's performance.  Your own
applications may show greater or smaller benefits from Python 2.4.)


File: python.info,  Node: New Improved and Deprecated Modules,  Next: Build and C API Changes<4>,  Prev: Other Language Changes<4>,  Up: What's New in Python 2 4

1.4.12 New, Improved, and Deprecated Modules
--------------------------------------------

As usual, Python's standard library received a number of enhancements
and bug fixes.  Here's a partial list of the most notable changes,
sorted alphabetically by module name. Consult the `Misc/NEWS' file in
the source tree for a more complete list of changes, or look through
the CVS logs for all the details.

   * The *note asyncore: 11. module's `loop()' function now has a
     _count_ parameter that lets you perform a limited number of passes
     through the polling loop.  The default is still to loop forever.

   * The *note base64: 15. module now has more complete RFC 3548
     support for Base64, Base32, and Base16 encoding and decoding,
     including optional case folding and optional alternative
     alphabets. (Contributed by Barry Warsaw.)

   * The *note bisect: 1b. module now has an underlying C
     implementation for improved performance. (Contributed by Dmitry
     Vasiliev.)

   * The CJKCodecs collections of East Asian codecs, maintained by
     Hye-Shik Chang, was integrated into 2.4.   The new encodings are:

   * Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz

   * Chinese (ROC): big5, cp950

   *
    Japanese: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,
          iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext,
          iso-2022-jp-2004, shift-jis, shift-jisx0213, shift-jis-2004

   * Korean: cp949, euc-kr, johab, iso-2022-kr

   * Some other new encodings were added: HP Roman8,  ISO_8859-11,
     ISO_8859-16, PCTP-154, and TIS-620.

   * The UTF-8 and UTF-16 codecs now cope better with receiving partial
     input.  Previously the `StreamReader' class would try to read more
     data, making it impossible to resume decoding from the stream.
     The `read()' method will now return as much data as it can and
     future calls will resume decoding where previous ones left off.
     (Implemented by Walter Dörwald.)

   * There is a new *note collections: 65. module for  various
     specialized collection datatypes.   Currently it contains just one
     type, `deque',  a double- ended queue that supports efficiently
     adding and removing elements from either end:

         >>> from collections import deque
         >>> d = deque('ghi')        # make a new deque with three items
         >>> d.append('j')           # add a new entry to the right side
         >>> d.appendleft('f')       # add a new entry to the left side
         >>> d                       # show the representation of the deque
         deque(['f', 'g', 'h', 'i', 'j'])
         >>> d.pop()                 # return and remove the rightmost item
         'j'
         >>> d.popleft()             # return and remove the leftmost item
         'f'
         >>> list(d)                 # list the contents of the deque
         ['g', 'h', 'i']
         >>> 'h' in d                # search the deque
         True

     Several modules, such as the *note Queue: 140. and *note
     threading: 179. modules, now take advantage of *note
     collections.deque: 206. for improved performance.  (Contributed by
     Raymond Hettinger.)

   * The *note ConfigParser: 6d. classes have been enhanced slightly.
     The `read()' method now returns a list of the files that were
     successfully parsed, and the *note set(): 363. method raises *note
     TypeError: 215. if passed a _value_ argument that isn't a string.
     (Contributed by John Belmonte and David Goodger.)

   * The *note curses: 79. module now supports the ncurses extension
     `use_default_colors()'.  On platforms where the terminal supports
     transparency, this makes it possible to use a transparent
     background.  (Contributed by Jörg Lehmann.)

   * The *note difflib: 82. module now includes an `HtmlDiff' class
     that creates an HTML table showing a side by side comparison of
     two versions of a text.  (Contributed by Dan Gass.)

   * The *note email: bb. package was updated to version 3.0,  which
     dropped various deprecated APIs and removes support for Python
     versions earlier than 2.3.  The 3.0 version of the package uses a
     new incremental parser for MIME messages, available in the
     `email.FeedParser' module.  The new parser doesn't require reading
     the entire message into memory, and doesn't raise exceptions if a
     message is malformed; instead it records any problems in the
     `defect' attribute of the message.  (Developed by Anthony Baxter,
     Barry Warsaw, Thomas Wouters, and others.)

   * The *note heapq: e7. module has been converted to C.  The
     resulting tenfold improvement in speed makes the module suitable
     for handling high volumes of data.  In addition, the module has
     two new functions `nlargest()' and `nsmallest()' that use heaps to
     find the N largest or smallest values in a dataset without the
     expense of a full sort.  (Contributed by Raymond Hettinger.)

   * The *note httplib: ee. module now contains constants for HTTP
     status codes defined in various HTTP-related RFC documents.
     Constants have names such as `OK', `CREATED', `CONTINUE', and
     `MOVED_PERMANENTLY'; use pydoc to get a full list.  (Contributed by
     Andrew Eland.)

   * The *note imaplib: f2. module now supports IMAP's THREAD command
     (contributed by Yves Dionne) and new `deleteacl()' and
     `myrights()' methods (contributed by Arnaud Mazin).

   * The *note itertools: fa. module gained a `groupby(iterable[,
     *func*])()' function. _iterable_ is something that can be iterated
     over to return a stream of elements, and the optional _func_
     parameter is a function that takes an element and returns a key
     value; if omitted, the key is simply the element itself.
     `groupby()' then groups the elements into subsequences which have
     matching values of the key, and returns a series of 2-tuples
     containing the key value and an iterator over the subsequence.

     Here's an example to make this clearer.  The _key_ function simply
     returns whether a number is even or odd, so the result of
     `groupby()' is to return consecutive runs of odd or even numbers.

         >>> import itertools
         >>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]
         >>> for key_val, it in itertools.groupby(L, lambda x: x % 2):
         ...    print key_val, list(it)
         ...
         0 [2, 4, 6]
         1 [7]
         0 [8]
         1 [9, 11]
         0 [12, 14]
         >>>

     `groupby()' is typically used with sorted input.  The logic for
     `groupby()' is similar to the Unix `uniq' filter which makes it
     handy for eliminating, counting, or identifying duplicate elements:

         >>> word = 'abracadabra'
         >>> letters = sorted(word)   # Turn string into a sorted list of letters
         >>> letters
         ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r']
         >>> for k, g in itertools.groupby(letters):
         ...    print k, list(g)
         ...
         a ['a', 'a', 'a', 'a', 'a']
         b ['b', 'b']
         c ['c']
         d ['d']
         r ['r', 'r']
         >>> # List unique letters
         >>> [k for k, g in groupby(letters)]
         ['a', 'b', 'c', 'd', 'r']
         >>> # Count letter occurrences
         >>> [(k, len(list(g))) for k, g in groupby(letters)]
         [('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]

     (Contributed by Hye-Shik Chang.)

   * *note itertools: fa. also gained a function named `tee(iterator,
     N)()' that returns _N_ independent iterators that replicate
     _iterator_.  If _N_ is omitted, the default is 2.

         >>> L = [1,2,3]
         >>> i1, i2 = itertools.tee(L)
         >>> i1,i2
         (<itertools.tee object at 0x402c2080>, <itertools.tee object at 0x402c2090>)
         >>> list(i1)               # Run the first iterator to exhaustion
         [1, 2, 3]
         >>> list(i2)               # Run the second iterator to exhaustion
         [1, 2, 3]

     Note that `tee()' has to keep copies of the values returned  by the
     iterator; in the worst case, it may need to keep all of them.
     This should therefore be used carefully if the leading iterator
     can run far ahead of the trailing iterator in a long stream of
     inputs. If the separation is large, then you might as well use
     *note list(): 3b5. instead.  When the iterators track closely with
     one another, `tee()' is ideal.  Possible applications include
     bookmarking, windowing, or lookahead iterators. (Contributed by
     Raymond Hettinger.)

   * A number of functions were added to the *note locale: 100.
     module, such as `bind_textdomain_codeset()' to specify a
     particular encoding and a family of `l*gettext()' functions that
     return messages in the chosen encoding.  (Contributed by Gustavo
     Niemeyer.)

   * Some keyword arguments were added to the *note logging: 101.
     package's `basicConfig()' function to simplify log configuration.
     The default behavior is to log messages to standard error, but
     various keyword arguments can be specified to log to a particular
     file, change the logging format, or set the logging level. For
     example:

         import logging
         logging.basicConfig(filename='/var/log/application.log',
             level=0,  # Log all messages
             format='%(levelname):%(process):%(thread):%(message)')

     Other additions to the *note logging: 101. package include a
     `log(level, msg)()' convenience method, as well as a
     `TimedRotatingFileHandler' class that rotates its log files at a
     timed interval.  The module already had `RotatingFileHandler',
     which rotated logs once the file exceeded a certain size.  Both
     classes derive from a new `BaseRotatingHandler' class that can be
     used to implement other rotating handlers.

     (Changes implemented by Vinay Sajip.)

   * The *note marshal: 10b. module now shares interned strings on
     unpacking a  data structure.  This may shrink the size of certain
     pickle strings, but the primary effect is to make `.pyc' files
     significantly smaller. (Contributed by Martin von Löwis.)

   * The *note nntplib: 124. module's `NNTP' class gained
     `description()' and `descriptions()' methods to retrieve
     newsgroup descriptions for a single group or for a range of
     groups. (Contributed by Jürgen A. Erhard.)

   * Two new functions were added to the *note operator: 126. module,
     `attrgetter(attr)()' and `itemgetter(index)()'. Both functions
     return callables that take a single argument and return the
     corresponding attribute or item; these callables make excellent
     data extractors when used with *note map(): 2fd.  or *note
     sorted(): 220.  For example:

         >>> L = [('c', 2), ('d', 1), ('a', 4), ('b', 3)]
         >>> map(operator.itemgetter(0), L)
         ['c', 'd', 'a', 'b']
         >>> map(operator.itemgetter(1), L)
         [2, 1, 4, 3]
         >>> sorted(L, key=operator.itemgetter(1)) # Sort list by second tuple item
         [('d', 1), ('c', 2), ('b', 3), ('a', 4)]

     (Contributed by Raymond Hettinger.)

   * The *note optparse: 127. module was updated in various ways.  The
     module now passes its messages through *note gettext.gettext():
     405, making it possible to internationalize Optik's help and error
     messages.  Help messages for options can now include the string
     `'%default'', which will be replaced by the option's default
     value.  (Contributed by Greg Ward.)

   * The long-term plan is to deprecate the *note rfc822: 148. module
     in some future Python release in favor of the *note email: bb.
     package. To this end, the `email.Utils.formatdate()' function has
     been changed to make it usable as a replacement for
     `rfc822.formatdate()'.  You may want to write new e-mail
     processing code with this in mind.  (Change implemented by Anthony
     Baxter.)

   * A new `urandom(n)()' function was added to the *note os: 128.
     module, returning a string containing _n_ bytes of random data.
     This function provides access to platform-specific sources of
     randomness such as `/dev/urandom' on Linux or the Windows
     CryptoAPI.  (Contributed by Trevor Perrin.)

   * Another new function: `os.path.lexists(path)()'  returns true if
     the file specified by _path_ exists, whether or not it's a
     symbolic link.  This differs from the existing
     `os.path.exists(path)()' function, which returns false if _path_
     is a symlink that points to a destination that doesn't exist.
     (Contributed by Beni Cherniavsky.)

   * A new `getsid()' function was added to the *note posix: 136.
     module that underlies the *note os: 128. module. (Contributed by
     J. Raynor.)

   * The *note poplib: 135. module now supports POP over SSL.
     (Contributed by Hector Urtubia.)

   * The *note profile: 139. module can now profile C extension
     functions. (Contributed by Nick Bastin.)

   * The *note random: 142. module has a new method called
     `getrandbits(N)()' that returns a long integer _N_ bits in length.
     The existing `randrange()' method now uses `getrandbits()' where
     appropriate, making generation of arbitrarily large random numbers
     more efficient.  (Contributed by Raymond Hettinger.)

   * The regular expression language accepted by the *note re: 143.
     module was extended with simple conditional expressions, written
     as `(?(group)A|B)'.  _group_ is either a numeric group ID or a
     group name defined with `(?P<group>...)' earlier in the
     expression.  If the specified group matched, the regular
     expression pattern _A_ will be tested against the string; if the
     group didn't match, the pattern _B_ will be used instead.
     (Contributed by Gustavo Niemeyer.)

   * The *note re: 143. module is also no longer recursive, thanks to a
     massive amount of work by Gustavo Niemeyer.  In a recursive
     regular expression engine, certain patterns result in a large
     amount of C stack space being consumed, and it was possible to
     overflow the stack. For example, if you matched a 30000-byte string
     of `a' characters against the expression `(a|b)+', one stack frame
     was consumed per character.  Python 2.3 tried to check for stack
     overflow and raise a *note RuntimeError: 394. exception, but
     certain patterns could sidestep the checking and if you were
     unlucky Python could segfault. Python 2.4's regular expression
     engine can match this pattern without problems.

   * The *note signal: 155. module now performs tighter error-checking
     on the parameters to the *note signal.signal(): 406. function.
     For example, you can't set a handler on the `SIGKILL' signal;
     previous versions of Python would quietly accept this, but 2.4
     will raise a *note RuntimeError: 394. exception.

   * Two new functions were added to the *note socket: 15c. module.
     `socketpair()' returns a pair of connected sockets and
     `getservbyport(port)()' looks up the service name for a given port
     number. (Contributed by Dave Cole and Barry Warsaw.)

   * The *note sys.exitfunc(): 407. function has been deprecated.  Code
     should be using the existing *note atexit: 12. module, which
     correctly handles calling multiple exit functions.  Eventually
     *note sys.exitfunc(): 407. will become a purely internal
     interface, accessed only by *note atexit: 12.

   * The *note tarfile: 171. module now generates GNU-format tar files
     by default.  (Contributed by Lars Gustaebel.)

   * The *note threading: 179. module now has an elegantly simple way
     to support thread-local data.  The module contains a `local' class
     whose attribute values are local to different threads.

         import threading

         data = threading.local()
         data.number = 42
         data.url = ('www.python.org', 80)

     Other threads can assign and retrieve their own values for the
     `number' and `url' attributes.  You can subclass `local' to
     initialize attributes or to add methods. (Contributed by Jim
     Fulton.)

   * The *note timeit: 17b. module now automatically disables periodic
     garbage collection during the timing loop.  This change makes
     consecutive timings more comparable.  (Contributed by Raymond
     Hettinger.)

   * The *note weakref: 195. module now supports a wider variety of
     objects including Python functions, class instances, sets,
     frozensets, deques, arrays, files, sockets, and regular expression
     pattern objects. (Contributed by Raymond Hettinger.)

   * The *note xmlrpclib: 1aa. module now supports a multi-call
     extension for transmitting multiple XML-RPC calls in a single HTTP
     operation. (Contributed by Brian Quinlan.)

   * The `mpz', `rotor', and `xreadlines' modules have  been removed.

* Menu:

* cookielib::
* doctest::


File: python.info,  Node: cookielib,  Next: doctest,  Up: New Improved and Deprecated Modules

1.4.12.1 cookielib
..................

The *note cookielib: 70. library supports client-side handling for HTTP
cookies, mirroring the *note Cookie: 6f. module's server-side cookie
support. Cookies are stored in cookie jars; the library transparently
stores cookies offered by the web server in the cookie jar, and fetches
the cookie from the jar when connecting to the server. As in web
browsers, policy objects control whether cookies are accepted or not.

  In order to store cookies across sessions, two implementations of
cookie jars are provided: one that stores cookies in the Netscape
format so applications can use the Mozilla or Lynx cookie files, and
one that stores cookies in the same format as the Perl libwww library.

  *note urllib2: 189. has been changed to interact with *note
cookielib: 70.: `HTTPCookieProcessor' manages a cookie jar that is used
when accessing URLs.

  This module was contributed by John J. Lee.


File: python.info,  Node: doctest,  Prev: cookielib,  Up: New Improved and Deprecated Modules

1.4.12.2 doctest
................

The *note doctest: b5. module underwent considerable refactoring thanks
to Edward Loper and Tim Peters.  Testing can still be as simple as
running *note doctest.testmod(): 40a, but the refactorings allow
customizing the module's operation in various ways

  The new `DocTestFinder' class extracts the tests from a given
object's docstrings:

    def f (x, y):
        """>>> f(2,2)
    4
    >>> f(3,2)
    6
        """
        return x*y

    finder = doctest.DocTestFinder()

    # Get list of DocTest instances
    tests = finder.find(f)

The new `DocTestRunner' class then runs individual tests and can produce
a summary of the results:

    runner = doctest.DocTestRunner()
    for t in tests:
        tried, failed = runner.run(t)

    runner.summarize(verbose=1)

The above example produces the following output:

    1 items passed all tests:
       2 tests in f
    2 tests in 1 items.
    2 passed and 0 failed.
    Test passed.

`DocTestRunner' uses an instance of the `OutputChecker' class to
compare the expected output with the actual output.  This class takes a
number of different flags that customize its behaviour; ambitious users
can also write a completely new subclass of `OutputChecker'.

  The default output checker provides a number of handy features. For
example, with the *note doctest.ELLIPSIS: 40b. option flag, an ellipsis
(`...') in the expected output matches any substring,  making it easier
to accommodate outputs that vary in minor ways:

    def o (n):
        """>>> o(1)
    <__main__.C instance at 0x...>
    >>>
    """

Another special string, `<BLANKLINE>', matches a blank line:

    def p (n):
        """>>> p(1)
    <BLANKLINE>
    >>>
    """

Another new capability is producing a diff-style display of the output
by specifying the *note doctest.REPORT_UDIFF: 40c. (unified diffs),
*note doctest.REPORT_CDIFF: 40d. (context diffs), or *note
doctest.REPORT_NDIFF: 40e.  (delta-style) option flags.  For example:

    def g (n):
        """>>> g(4)
    here
    is
    a
    lengthy
    >>>"""
        L = 'here is a rather lengthy list of words'.split()
        for word in L[:n]:
            print word

Running the above function's tests with *note doctest.REPORT_UDIFF:
40c. specified, you get the following output:

    **********************************************************************
    File "t.py", line 15, in g
    Failed example:
        g(4)
    Differences (unified diff with -expected +actual):
        @@ -2,3 +2,3 @@
         is
         a
        -lengthy
        +rather
    **********************************************************************



File: python.info,  Node: Build and C API Changes<4>,  Next: Porting to Python 2 4,  Prev: New Improved and Deprecated Modules,  Up: What's New in Python 2 4

1.4.13 Build and C API Changes
------------------------------

Some of the changes to Python's build process and to the C API are:

   * Three new convenience macros were added for common return values
     from extension functions: *note Py_RETURN_NONE: 410, *note
     Py_RETURN_TRUE: 411, and *note Py_RETURN_FALSE: 412. (Contributed
     by Brett Cannon.)

   * Another new macro, `Py_CLEAR(obj)',  decreases the reference count
     of _obj_ and sets _obj_ to the null pointer.  (Contributed by Jim
     Fulton.)

   * A new function, `PyTuple_Pack(N, obj1, obj2, ..., objN)()',
     constructs tuples from a variable length argument list of Python
     objects.  (Contributed by Raymond Hettinger.)

   * A new function, `PyDict_Contains(d, k)()', implements fast
     dictionary lookups without masking exceptions raised during the
     look-up process.  (Contributed by Raymond Hettinger.)

   * The `Py_IS_NAN(X)' macro returns 1 if  its float or double argument
     _X_ is a NaN.   (Contributed by Tim Peters.)

   * C code can avoid unnecessary locking by using the new *note
     PyEval_ThreadsInitialized(): 413. function to tell  if any thread
     operations have been performed.  If this function  returns false,
     no lock operations are needed. (Contributed by Nick Coghlan.)

   * A new function, *note PyArg_VaParseTupleAndKeywords(): 414, is the
     same as *note PyArg_ParseTupleAndKeywords(): 415. but takes a
     `va_list' instead of a number of arguments. (Contributed by Greg
     Chapman.)

   * A new method flag, `METH_COEXISTS', allows a function defined in
     slots to co-exist with a *note PyCFunction: 416. having the same
     name.  This can halve the access time for a method such as
     `set.__contains__()'.  (Contributed by Raymond Hettinger.)

   * Python can now be built with additional profiling for the
     interpreter itself, intended as an aid to people developing the
     Python core.  Providing `----enable-profiling' to the *configure*
     script will let you profile the interpreter with *gprof*, and
     providing the `----with-tsc' switch enables profiling using the
     Pentium's Time-Stamp- Counter register.  Note that the
     `----with-tsc' switch is slightly misnamed, because the profiling
     feature also works on the PowerPC platform, though that processor
     architecture doesn't call that register "the TSC register".
     (Contributed by Jeremy Hylton.)

   * The `tracebackobject' type has been renamed to `PyTracebackObject'.

* Menu:

* Port-Specific Changes: Port-Specific Changes<2>.


File: python.info,  Node: Port-Specific Changes<2>,  Up: Build and C API Changes<4>

1.4.13.1 Port-Specific Changes
..............................

   * The Windows port now builds under MSVC++ 7.1 as well as version 6.
     (Contributed by Martin von Löwis.)


File: python.info,  Node: Porting to Python 2 4,  Next: Acknowledgements<4>,  Prev: Build and C API Changes<4>,  Up: What's New in Python 2 4

1.4.14 Porting to Python 2.4
----------------------------

This section lists previously described changes that may require
changes to your code:

   * Left shifts and hexadecimal/octal constants that are too  large no
     longer trigger a *note FutureWarning: 2b1. and return  a value
     limited to 32 or 64 bits; instead they return a long integer.

   * Integer operations will no longer trigger an `OverflowWarning'. The
     `OverflowWarning' warning will disappear in Python 2.5.

   * The *note zip(): 3fe. built-in function and *note
     itertools.izip(): 3ff. now return  an empty list instead of
     raising a *note TypeError: 215. exception if called with no
     arguments.

   * You can no longer compare the `date' and *note datetime: 7d.
     instances provided by the *note datetime: 7d. module.  Two
     instances of different classes will now always be unequal, and
     relative comparisons (`<', `>') will raise a *note TypeError: 215.

   * *note dircache.listdir(): 419. now passes exceptions to the caller
     instead of returning empty lists.

   * `LexicalHandler.startDTD()' used to receive the public and system
     IDs in the wrong order.  This has been corrected; applications
     relying on the wrong order need to be fixed.

   * *note fcntl.ioctl(): 41a. now warns if the _mutate_  argument is
     omitted and relevant.

   * The *note tarfile: 171. module now generates GNU-format tar files
     by default.

   * Encountering a failure while importing a module no longer leaves a
     partially- initialized module object in `sys.modules'.

   * *note None: 393. is now a constant; code that binds a new value to
     the name `None' is now a syntax error.

   * The `signals.signal()' function now raises a *note RuntimeError:
     394. exception for certain illegal values; previously these errors
     would pass silently.  For example, you can no longer set a handler
     on the `SIGKILL' signal.


File: python.info,  Node: Acknowledgements<4>,  Prev: Porting to Python 2 4,  Up: What's New in Python 2 4

1.4.15 Acknowledgements
-----------------------

The author would like to thank the following people for offering
suggestions, corrections and assistance with various drafts of this
article: Koray Can, Hye-Shik Chang, Michael Dyck, Raymond Hettinger,
Brian Hurt, Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin
Rejeb.


File: python.info,  Node: What's New in Python 2 3,  Next: What's New in Python 2 2,  Prev: What's New in Python 2 4,  Up: What's New in Python

1.5 What's New in Python 2.3
============================

     Author: A.M. Kuchling

  This article explains the new features in Python 2.3.  Python 2.3 was
released on July 29, 2003.

  The main themes for Python 2.3 are polishing some of the features
added in 2.2, adding various small but useful enhancements to the core
language, and expanding the standard library.  The new object model
introduced in the previous version has benefited from 18 months of
bugfixes and from optimization efforts that have improved the
performance of new-style classes.  A few new built-in functions have
been added such as *note sum(): 41f. and *note enumerate(): 420.  The
*note in: 421.  operator can now be used for substring searches (e.g.
`"ab" in "abc"' returns *note True: 3a9.).

  Some of the many new library features include Boolean, set, heap, and
date/time data types, the ability to import modules from ZIP-format
archives, metadata support for the long-awaited Python catalog, an
updated version of IDLE, and modules for logging messages, wrapping
text, parsing CSV files, processing command-line options, using
BerkeleyDB databases...  the list of new and enhanced modules is
lengthy.

  This article doesn't attempt to provide a complete specification of
the new features, but instead provides a convenient overview.  For full
details, you should refer to the documentation for Python 2.3, such as
the Python Library Reference and the Python Reference Manual.  If you
want to understand the complete implementation and design rationale,
refer to the PEP for a particular new feature.

* Menu:

* PEP 218; A Standard Set Datatype: PEP 218 A Standard Set Datatype.
* PEP 255; Simple Generators: PEP 255 Simple Generators.
* PEP 263; Source Code Encodings: PEP 263 Source Code Encodings.
* PEP 273; Importing Modules from ZIP Archives: PEP 273 Importing Modules from ZIP Archives.
* PEP 277; Unicode file name support for Windows NT: PEP 277 Unicode file name support for Windows NT.
* PEP 278; Universal Newline Support: PEP 278 Universal Newline Support.
* PEP 279; enumerate(): PEP 279 enumerate.
* PEP 282; The logging Package: PEP 282 The logging Package.
* PEP 285; A Boolean Type: PEP 285 A Boolean Type.
* PEP 293; Codec Error Handling Callbacks: PEP 293 Codec Error Handling Callbacks.
* PEP 301; Package Index and Metadata for Distutils: PEP 301 Package Index and Metadata for Distutils.
* PEP 302; New Import Hooks: PEP 302 New Import Hooks.
* PEP 305; Comma-separated Files: PEP 305 Comma-separated Files.
* PEP 307; Pickle Enhancements: PEP 307 Pickle Enhancements.
* Extended Slices::
* Other Language Changes: Other Language Changes<5>.
* New, Improved, and Deprecated Modules: New Improved and Deprecated Modules<2>.
* Pymalloc; A Specialized Object Allocator: Pymalloc A Specialized Object Allocator.
* Build and C API Changes: Build and C API Changes<5>.
* Other Changes and Fixes: Other Changes and Fixes<2>.
* Porting to Python 2.3: Porting to Python 2 3.
* Acknowledgements: Acknowledgements<5>.


File: python.info,  Node: PEP 218 A Standard Set Datatype,  Next: PEP 255 Simple Generators,  Up: What's New in Python 2 3

1.5.1 PEP 218: A Standard Set Datatype
--------------------------------------

The new *note sets: 14f. module contains an implementation of a set
datatype.  The `Set' class is for mutable sets, sets that can have
members added and removed.  The `ImmutableSet' class is for sets that
can't be modified, and instances of `ImmutableSet' can therefore be
used as dictionary keys.  Sets are built on top of dictionaries, so the
elements within a set must be hashable.

  Here's a simple example:

    >>> import sets
    >>> S = sets.Set([1,2,3])
    >>> S
    Set([1, 2, 3])
    >>> 1 in S
    True
    >>> 0 in S
    False
    >>> S.add(5)
    >>> S.remove(3)
    >>> S
    Set([1, 2, 5])
    >>>

The union and intersection of sets can be computed with the `union()'
and `intersection()' methods; an alternative notation uses the bitwise
operators `&' and `|'. Mutable sets also have in-place versions of
these methods, `union_update()' and `intersection_update()'.

    >>> S1 = sets.Set([1,2,3])
    >>> S2 = sets.Set([4,5,6])
    >>> S1.union(S2)
    Set([1, 2, 3, 4, 5, 6])
    >>> S1 | S2                  # Alternative notation
    Set([1, 2, 3, 4, 5, 6])
    >>> S1.intersection(S2)
    Set([])
    >>> S1 & S2                  # Alternative notation
    Set([])
    >>> S1.union_update(S2)
    >>> S1
    Set([1, 2, 3, 4, 5, 6])
    >>>

It's also possible to take the symmetric difference of two sets.  This
is the set of all elements in the union that aren't in the
intersection.  Another way of putting it is that the symmetric
difference contains all elements that are in exactly one set.  Again,
there's an alternative notation (`^'), and an in- place version with
the ungainly name `symmetric_difference_update()'.

    >>> S1 = sets.Set([1,2,3,4])
    >>> S2 = sets.Set([3,4,5,6])
    >>> S1.symmetric_difference(S2)
    Set([1, 2, 5, 6])
    >>> S1 ^ S2
    Set([1, 2, 5, 6])
    >>>

There are also `issubset()' and `issuperset()' methods for checking
whether one set is a subset or superset of another:

    >>> S1 = sets.Set([1,2,3])
    >>> S2 = sets.Set([2,3])
    >>> S2.issubset(S1)
    True
    >>> S1.issubset(S2)
    False
    >>> S1.issuperset(S2)
    True
    >>>


See also
........

PEP 218(1) - Adding a Built-In Set Object Type
     PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex
     Martelli, and GvR.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0218


File: python.info,  Node: PEP 255 Simple Generators,  Next: PEP 263 Source Code Encodings,  Prev: PEP 218 A Standard Set Datatype,  Up: What's New in Python 2 3

1.5.2 PEP 255: Simple Generators
--------------------------------

In Python 2.2, generators were added as an optional feature, to be
enabled by a `from __future__ import generators' directive.  In 2.3
generators no longer need to be specially enabled, and are now always
present; this means that *note yield: 2f0. is now always a keyword.
The rest of this section is a copy of the description of generators
from the "What's New in Python 2.2" document; if you read it back when
Python 2.2 came out, you can skip the rest of this section.

  You're doubtless familiar with how function calls work in Python or
C. When you call a function, it gets a private namespace where its
local variables are created.  When the function reaches a *note return:
2ed. statement, the local variables are destroyed and the resulting
value is returned to the caller.  A later call to the same function
will get a fresh new set of local variables.  But, what if the local
variables weren't thrown away on exiting a function?  What if you could
later resume the function where it left off?  This is what generators
provide; they can be thought of as resumable functions.

  Here's the simplest example of a generator function:

    def generate_ints(N):
        for i in range(N):
            yield i

A new keyword, *note yield: 2f0, was introduced for generators.  Any
function containing a *note yield: 2f0. statement is a generator
function; this is detected by Python's bytecode compiler which compiles
the function specially as a result.

  When you call a generator function, it doesn't return a single value;
instead it returns a generator object that supports the iterator
protocol.  On executing the *note yield: 2f0. statement, the generator
outputs the value of `i', similar to a *note return: 2ed. statement.
The big difference between *note yield: 2f0. and a *note return: 2ed.
statement is that on reaching a *note yield: 2f0. the generator's state
of execution is suspended and local variables are preserved.  On the
next call to the generator's `.next()' method, the function will resume
executing immediately after the *note yield: 2f0. statement.  (For
complicated reasons, the *note yield: 2f0.  statement isn't allowed
inside the *note try: 38e. block of a *note try: 38e...*note finally:
38f. statement; read PEP 255(1) for a full explanation of the
interaction between *note yield: 2f0. and exceptions.)

  Here's a sample usage of the `generate_ints()' generator:

    >>> gen = generate_ints(3)
    >>> gen
    <generator object at 0x8117f90>
    >>> gen.next()
    0
    >>> gen.next()
    1
    >>> gen.next()
    2
    >>> gen.next()
    Traceback (most recent call last):
      File "stdin", line 1, in ?
      File "stdin", line 2, in generate_ints
    StopIteration

You could equally write `for i in generate_ints(5)', or `a,b,c =
generate_ints(3)'.

  Inside a generator function, the *note return: 2ed. statement can
only be used without a value, and signals the end of the procession of
values; afterwards the generator cannot return any further values.
*note return: 2ed. with a value, such as `return 5', is a syntax error
inside a generator function.  The end of the generator's results can
also be indicated by raising *note StopIteration: 32c.  manually, or by
just letting the flow of execution fall off the bottom of the function.

  You could achieve the effect of generators manually by writing your
own class and storing all the local variables of the generator as
instance variables.  For example, returning a list of integers could be
done by setting `self.count' to 0, and having the *note next(): 392.
method increment `self.count' and return it.  However, for a moderately
complicated generator, writing a corresponding class would be much
messier. `Lib/test/test_generators.py' contains a number of more
interesting examples.  The simplest one implements an in-order
traversal of a tree using generators recursively.

    # A recursive generator that generates Tree leaves in in-order.
    def inorder(t):
        if t:
            for x in inorder(t.left):
                yield x
            yield t.label
            for x in inorder(t.right):
                yield x

Two other examples in `Lib/test/test_generators.py' produce solutions
for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so
that no queen threatens another) and the Knight's Tour (a route that
takes a knight to every square of an $NxN$ chessboard without visiting
any square twice).

  The idea of generators comes from other programming languages,
especially Icon (<http://www.cs.arizona.edu/icon/>), where the idea of
generators is central.  In Icon, every expression and function call
behaves like a generator.  One example from "An Overview of the Icon
Programming Language" at
<http://www.cs.arizona.edu/icon/docs/ipd266.htm> gives an idea of what
this looks like:

    sentence := "Store it in the neighboring harbor"
    if (i := find("or", sentence)) > 5 then write(i)

In Icon the `find()' function returns the indexes at which the substring
"or" is found: 3, 23, 33.  In the *note if: 425. statement, `i' is first
assigned a value of 3, but 3 is less than 5, so the comparison fails,
and Icon retries it with the second value of 23.  23 is greater than 5,
so the comparison now succeeds, and the code prints the value 23 to the
screen.

  Python doesn't go nearly as far as Icon in adopting generators as a
central concept.  Generators are considered part of the core Python
language, but learning or using them isn't compulsory; if they don't
solve any problems that you have, feel free to ignore them. One novel
feature of Python's interface as compared to Icon's is that a
generator's state is represented as a concrete object (the iterator)
that can be passed around to other functions or stored in a data
structure.

See also
........

PEP 255(2) - Simple Generators
     Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.
     Implemented mostly by Neil Schemenauer and Tim Peters, with other
     fixes from the Python Labs crew.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0255

  (2) http://www.python.org/dev/peps/pep-0255


File: python.info,  Node: PEP 263 Source Code Encodings,  Next: PEP 273 Importing Modules from ZIP Archives,  Prev: PEP 255 Simple Generators,  Up: What's New in Python 2 3

1.5.3 PEP 263: Source Code Encodings
------------------------------------

Python source files can now be declared as being in different character
set encodings.  Encodings are declared by including a specially
formatted comment in the first or second line of the source file.  For
example, a UTF-8 file can be declared with:

    #!/usr/bin/env python
    # -*- coding: UTF-8 -*-

Without such an encoding declaration, the default encoding used is
7-bit ASCII.  Executing or importing modules that contain string
literals with 8-bit characters and have no encoding declaration will
result in a *note DeprecationWarning: 1b9. being signalled by Python
2.3; in 2.4 this will be a syntax error.

  The encoding declaration only affects Unicode string literals, which
will be converted to Unicode using the specified encoding.  Note that
Python identifiers are still restricted to ASCII characters, so you
can't have variable names that use characters outside of the usual
alphanumerics.

See also
........

PEP 263(1) - Defining Python Source Code Encodings
     Written by Marc-André Lemburg and Martin von Löwis; implemented by
     Suzuki Hisao and Martin von Löwis.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0263


File: python.info,  Node: PEP 273 Importing Modules from ZIP Archives,  Next: PEP 277 Unicode file name support for Windows NT,  Prev: PEP 263 Source Code Encodings,  Up: What's New in Python 2 3

1.5.4 PEP 273: Importing Modules from ZIP Archives
--------------------------------------------------

The new *note zipimport: 1ac. module adds support for importing modules
from a ZIP- format archive.  You don't need to import the module
explicitly; it will be automatically imported if a ZIP archive's
filename is added to `sys.path'.  For example:

    amk@nyman:~/src/python$ unzip -l /tmp/example.zip
    Archive:  /tmp/example.zip
      Length     Date   Time    Name
     --------    ----   ----    ----
         8467  11-26-02 22:30   jwzthreading.py
     --------                   -------
         8467                   1 file
    amk@nyman:~/src/python$ ./python
    Python 2.3 (#1, Aug 1 2003, 19:54:32)
    >>> import sys
    >>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path
    >>> import jwzthreading
    >>> jwzthreading.__file__
    '/tmp/example.zip/jwzthreading.py'
    >>>

An entry in `sys.path' can now be the filename of a ZIP archive. The ZIP
archive can contain any kind of files, but only files named `*.py',
`*.pyc', or `*.pyo' can be imported.  If an archive only contains
`*.py' files, Python will not attempt to modify the archive by adding
the corresponding `*.pyc' file, meaning that if a ZIP archive doesn't
contain `*.pyc' files, importing may be rather slow.

  A path within the archive can also be specified to only import from a
subdirectory; for example, the path `/tmp/example.zip/lib/' would only
import from the `lib/' subdirectory within the archive.

See also
........

PEP 273(1) - Import Modules from Zip Archives
     Written by James C. Ahlstrom,  who also provided an
     implementation. Python 2.3 follows the specification in PEP
     273(2),  but uses an implementation written by Just van Rossum
     that uses the import hooks described in PEP 302(3). See section
     *note PEP 302; New Import Hooks: 429. for a description of the new
     import hooks.

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-0273

  (2) http://www.python.org/dev/peps/pep-0273

  (3) http://www.python.org/dev/peps/pep-0302



Local Variables:
coding: utf-8
End:
