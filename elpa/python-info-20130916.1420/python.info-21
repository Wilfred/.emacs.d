This is
/home/melpa/melpa/working/python-info-20130916.1420/python.info,
produced by makeinfo version 4.13 from
/home/melpa/melpa/working/python-info/python.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.5, September 16, 2013

     Georg Brandl

     Copyright (C) 1990-2013, Python Software Foundation


File: python.info,  Node: Unicode Exception Objects,  Next: Recursion Control,  Up: Exception Handling

7.4.1 Unicode Exception Objects
-------------------------------

The following functions are used to create and modify Unicode
exceptions from C.

 -- C Function: PyObject* PyUnicodeDecodeError_Create (const
          char *encoding, const char *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)
     Create a `UnicodeDecodeError' object with the attributes
     _encoding_, _object_, _length_, _start_, _end_ and _reason_.

 -- C Function: PyObject* PyUnicodeEncodeError_Create (const
          char *encoding, const Py_UNICODE *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)
     Create a `UnicodeEncodeError' object with the attributes
     _encoding_, _object_, _length_, _start_, _end_ and _reason_.

 -- C Function: PyObject* PyUnicodeTranslateError_Create (const
          Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start,
          Py_ssize_t end, const char *reason)
     Create a `UnicodeTranslateError' object with the attributes
     _object_, _length_, _start_, _end_ and _reason_.

 -- C Function: PyObject* PyUnicodeDecodeError_GetEncoding
          (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetEncoding
          (PyObject *exc)
     Return the _encoding_ attribute of the given exception object.

 -- C Function: PyObject* PyUnicodeDecodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetObject
          (PyObject *exc)
     Return the _object_ attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeEncodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeTranslateError_GetStart (PyObject *exc,
          Py_ssize_t *start)
     Get the _start_ attribute of the given exception object and place
     it into _*start_.  _start_ must not be _NULL_.  Return `0' on
     success, `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeEncodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeTranslateError_SetStart (PyObject *exc,
          Py_ssize_t start)
     Set the _start_ attribute of the given exception object to
     _start_.  Return `0' on success, `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeEncodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeTranslateError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
     Get the _end_ attribute of the given exception object and place it
     into _*end_.  _end_ must not be _NULL_.  Return `0' on success,
     `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeEncodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeTranslateError_SetEnd (PyObject *exc,
          Py_ssize_t end)
     Set the _end_ attribute of the given exception object to _end_.
     Return `0' on success, `-1' on failure.

 -- C Function: PyObject* PyUnicodeDecodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetReason
          (PyObject *exc)
     Return the _reason_ attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_SetReason (PyObject *exc,
          const char *reason)
 -- C Function: int PyUnicodeEncodeError_SetReason (PyObject *exc,
          const char *reason)
 -- C Function: int PyUnicodeTranslateError_SetReason (PyObject *exc,
          const char *reason)
     Set the _reason_ attribute of the given exception object to
     _reason_.  Return `0' on success, `-1' on failure.


File: python.info,  Node: Recursion Control,  Next: Standard Exceptions,  Prev: Unicode Exception Objects,  Up: Exception Handling

7.4.2 Recursion Control
-----------------------

These two functions provide a way to perform safe recursive calls at
the C level, both in the core and in extension modules.  They are
needed if the recursive code does not necessarily invoke Python code
(which tracks its recursion depth automatically).

 -- C Function: int Py_EnterRecursiveCall (char *where)
     Marks a point where a recursive C-level call is about to be
     performed.

     If `USE_STACKCHECK' is defined, this function checks if the OS
     stack overflowed using *note PyOS_CheckStack(): 2a7a.  In this is
     the case, it sets a *note MemoryError: 93a. and returns a nonzero
     value.

     The function then checks if the recursion limit is reached.  If
     this is the case, a *note RuntimeError: 394. is set and a nonzero
     value is returned.  Otherwise, zero is returned.

     _where_ should be a string such as `" in instance check"' to be
     concatenated to the *note RuntimeError: 394. message caused by the
     recursion depth limit.

 -- C Function: void Py_LeaveRecursiveCall ()
     Ends a *note Py_EnterRecursiveCall(): 2a79.  Must be called once
     for each _successful_ invocation of *note Py_EnterRecursiveCall():
     2a79.


File: python.info,  Node: Standard Exceptions,  Next: String Exceptions,  Prev: Recursion Control,  Up: Exception Handling

7.4.3 Standard Exceptions
-------------------------

All standard Python exceptions are available as global variables whose
names are `PyExc_' followed by the Python exception name.  These have
the type *note PyObject*: 39f.; they are all class objects.  For
completeness, here are all the variables:

C Name                                    Python Name                      Notes
------------------------------------------------------------------------------------------ 
`PyExc_BaseException'                     *note BaseException: 331.        (1), (4)
`PyExc_Exception'                         *note Exception: 332.            (1)
`PyExc_StandardError'                     *note StandardError: 37b.        (1)
`PyExc_ArithmeticError'                   *note ArithmeticError: 934.      (1)
`PyExc_LookupError'                       *note LookupError: 879.          (1)
`PyExc_AssertionError'                    *note AssertionError: 7f7.       
`PyExc_AttributeError'                    *note AttributeError: 1f5.       
`PyExc_EOFError'                          *note EOFError: 874.             
`PyExc_EnvironmentError'                  *note EnvironmentError: 939.     (1)
`PyExc_FloatingPointError'                *note FloatingPointError: 935.   
`PyExc_IOError'                           *note IOError: 1f7.              
`PyExc_ImportError'                       *note ImportError: 369.          
`PyExc_IndexError'                        *note IndexError: 4d8.           
`PyExc_KeyError'                          *note KeyError: 202.             
`PyExc_KeyboardInterrupt'                 *note KeyboardInterrupt: 24e.    
`PyExc_MemoryError'                       *note MemoryError: 93a.          
`PyExc_NameError'                         *note NameError: 39c.            
`PyExc_NotImplementedError'               *note NotImplementedError: 93b.  
`PyExc_OSError'                           *note OSError: 22e.              
`PyExc_OverflowError'                     *note OverflowError: 2d8.        
`PyExc_ReferenceError'                    *note ReferenceError: 4a9.       (2)
`PyExc_RuntimeError'                      *note RuntimeError: 394.         
`PyExc_SyntaxError'                       *note SyntaxError: 48f.          
`PyExc_SystemError'                       *note SystemError: 93d.          
`PyExc_SystemExit'                        *note SystemExit: 32b.           
`PyExc_TypeError'                         *note TypeError: 215.            
`PyExc_ValueError'                        *note ValueError: 233.           
`PyExc_WindowsError'                      *note WindowsError: 948.         (3)
`PyExc_ZeroDivisionError'                 *note ZeroDivisionError: 5a0.    

  Notes:

  1. This is a base class for other standard exceptions.

  2. This is the same as *note weakref.ReferenceError: 4ba.

  3. Only defined on Windows; protect code that uses this by testing
     that the preprocessor macro `MS_WINDOWS' is defined.

  4. New in version 2.5.


File: python.info,  Node: String Exceptions,  Prev: Standard Exceptions,  Up: Exception Handling

7.4.4 String Exceptions
-----------------------

Changed in version 2.6: All exceptions to be raised or caught must be
derived from *note BaseException: 331.  Trying to raise a string
exception now raises *note TypeError: 215.


File: python.info,  Node: Utilities,  Next: Abstract Objects Layer,  Prev: Exception Handling,  Up: Python/C API Reference Manual

7.5 Utilities
=============

The functions in this chapter perform various utility tasks, ranging
from helping C code be more portable across platforms, using Python
modules from C, and parsing function arguments and constructing Python
values from C values.

* Menu:

* Operating System Utilities::
* System Functions::
* Process Control::
* Importing Modules: Importing Modules<2>.
* Data marshalling support::
* Parsing arguments and building values::
* String conversion and formatting::
* Reflection::
* Codec registry and support functions::


File: python.info,  Node: Operating System Utilities,  Next: System Functions,  Up: Utilities

7.5.1 Operating System Utilities
--------------------------------

 -- C Function: int Py_FdIsInteractive (FILE *fp, const char *filename)
     Return true (nonzero) if the standard I/O file _fp_ with name
     _filename_ is deemed interactive.  This is the case for files for
     which `isatty(fileno(fp))' is true.  If the global flag
     `Py_InteractiveFlag' is true, this function also returns true if
     the _filename_ pointer is _NULL_ or if the name is equal to one of
     the strings `'<stdin>'' or `'???''.

 -- C Function: void PyOS_AfterFork ()
     Function to update some internal state after a process fork; this
     should be called in the new process if the Python interpreter will
     continue to be used.  If a new executable is loaded into the new
     process, this function does not need to be called.

 -- C Function: int PyOS_CheckStack ()
     Return true when the interpreter runs out of stack space.  This is
     a reliable check, but is only available when `USE_STACKCHECK' is
     defined (currently on Windows using the Microsoft Visual C++
     compiler).  `USE_STACKCHECK' will be defined automatically; you
     should never change the definition in your own code.

 -- C Function: PyOS_sighandler_t PyOS_getsig (int i)
     Return the current signal handler for signal _i_.  This is a thin
     wrapper around either `sigaction()' or `signal()'.  Do not call
     those functions directly! `PyOS_sighandler_t' is a typedef alias
     for `void (*)(int)'.

 -- C Function: PyOS_sighandler_t PyOS_setsig (int i,
          PyOS_sighandler_t h)
     Set the signal handler for signal _i_ to be _h_; return the old
     signal handler.  This is a thin wrapper around either
     `sigaction()' or `signal()'.  Do not call those functions
     directly!  `PyOS_sighandler_t' is a typedef alias for `void
     (*)(int)'.


File: python.info,  Node: System Functions,  Next: Process Control,  Prev: Operating System Utilities,  Up: Utilities

7.5.2 System Functions
----------------------

These are utility functions that make functionality from the *note sys:
16d. module accessible to C code.  They all work with the current
interpreter thread's *note sys: 16d. module's dict, which is contained
in the internal thread state structure.

 -- C Function: PyObject *PySys_GetObject (char *name)
     Return value: Borrowed reference.

     Return the object _name_ from the *note sys: 16d. module or _NULL_
     if it does not exist, without setting an exception.

 -- C Function: FILE *PySys_GetFile (char *name, FILE *def)
     Return the `FILE*' associated with the object _name_ in the *note
     sys: 16d. module, or _def_ if _name_ is not in the module or is
     not associated with a `FILE*'.

 -- C Function: int PySys_SetObject (char *name, PyObject *v)
     Set _name_ in the *note sys: 16d. module to _v_ unless _v_ is
     _NULL_, in which case _name_ is deleted from the sys module.
     Returns `0' on success, `-1' on error.

 -- C Function: void PySys_ResetWarnOptions ()
     Reset *note sys.warnoptions: 23b2. to an empty list.

 -- C Function: void PySys_AddWarnOption (char *s)
     Append _s_ to *note sys.warnoptions: 23b2.

 -- C Function: void PySys_SetPath (char *path)
     Set *note sys.path: 576. to a list object of paths found in _path_
     which should be a list of paths separated with the platform's
     search path delimiter (`:' on Unix, `;' on Windows).

 -- C Function: void PySys_WriteStdout (const char *format, ...)
     Write the output string described by _format_ to *note sys.stdout:
     873.  No exceptions are raised, even if truncation occurs (see
     below).

     _format_ should limit the total size of the formatted output
     string to 1000 bytes or less - after 1000 bytes, the output string
     is truncated.  In particular, this means that no unrestricted "%s"
     formats should occur; these should be limited using "%.<N>s" where
     <N> is a decimal number calculated so that <N> plus the maximum
     size of other formatted text does not exceed 1000 bytes.  Also
     watch out for "%f", which can print hundreds of digits for very
     large numbers.

     If a problem occurs, or *note sys.stdout: 873. is unset, the
     formatted message is written to the real (C level) _stdout_.

 -- C Function: void PySys_WriteStderr (const char *format, ...)
     As above, but write to *note sys.stderr: 634. or _stderr_ instead.


File: python.info,  Node: Process Control,  Next: Importing Modules<2>,  Prev: System Functions,  Up: Utilities

7.5.3 Process Control
---------------------

 -- C Function: void Py_FatalError (const char *message)
     Print a fatal error message and kill the process.  No cleanup is
     performed.  This function should only be invoked when a condition
     is detected that would make it dangerous to continue using the
     Python interpreter; e.g., when the object administration appears
     to be corrupted.  On Unix, the standard C library function
     `abort()' is called which will attempt to produce a `core' file.

 -- C Function: void Py_Exit (int status)
     Exit the current process.  This calls *note Py_Finalize(): 2c0.
     and then calls the standard C library function `exit(status)'.

 -- C Function: int Py_AtExit (void (*func) ())
     Register a cleanup function to be called by *note Py_Finalize():
     2c0.  The cleanup function will be called with no arguments and
     should return no value.  At most 32 cleanup functions can be
     registered.  When the registration is successful, *note
     Py_AtExit(): 2a97. returns `0'; on failure, it returns `-1'.  The
     cleanup function registered last is called first. Each cleanup
     function will be called at most once.  Since Python's internal
     finalization will have completed before the cleanup function, no
     Python APIs should be called by _func_.


File: python.info,  Node: Importing Modules<2>,  Next: Data marshalling support,  Prev: Process Control,  Up: Utilities

7.5.4 Importing Modules
-----------------------

 -- C Function: PyObject* PyImport_ImportModule (const char *name)
     Return value: New reference.

     This is a simplified interface to *note PyImport_ImportModuleEx():
     2a9b. below, leaving the _globals_ and _locals_ arguments set to
     _NULL_ and _level_ set to 0.  When the _name_ argument contains a
     dot (when it specifies a submodule of a package), the _fromlist_
     argument is set to the list `['*']' so that the return value is the
     named module rather than the top-level package containing it as
     would otherwise be the case.  (Unfortunately, this has an
     additional side effect when _name_ in fact specifies a subpackage
     instead of a submodule: the submodules specified in the package's
     `__all__' variable are  loaded.)  Return a new reference to the
     imported module, or _NULL_ with an exception set on failure.
     Before Python 2.4, the module may still be created in the failure
     case -- examine `sys.modules' to find out.  Starting with Python
     2.4, a failing import of a module no longer leaves the module in
     `sys.modules'.

     Changed in version 2.4: Failing imports remove incomplete module
     objects.

     Changed in version 2.6: Always uses absolute imports.

 -- C Function: PyObject* PyImport_ImportModuleNoBlock (const
          char *name)
     This version of *note PyImport_ImportModule(): 379. does not
     block. It's intended to be used in C functions that import other
     modules to execute a function.  The import may block if another
     thread holds the import lock. The function *note
     PyImport_ImportModuleNoBlock(): 36a. never blocks. It first tries
     to fetch the module from sys.modules and falls back to *note
     PyImport_ImportModule(): 379.  unless the lock is held, in which
     case the function will raise an *note ImportError: 369.

     New in version 2.6.

 -- C Function: PyObject* PyImport_ImportModuleEx (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist)
     Return value: New reference.

     Import a module.  This is best described by referring to the
     built-in Python function *note __import__(): 377, as the standard
     *note __import__(): 377. function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or _NULL_ with an exception set on failure
     (before Python 2.4, the module may still be created in this case).
     Like for *note __import__(): 377, the return value when a
     submodule of a package was requested is normally the top-level
     package, unless a non-empty _fromlist_ was given.

     Changed in version 2.4: Failing imports remove incomplete module
     objects.

     Changed in version 2.6: The function is an alias for *note
     PyImport_ImportModuleLevel(): 2a9c. with -1 as level, meaning
     relative import.

 -- C Function: PyObject* PyImport_ImportModuleLevel (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist,
          int level)
     Return value: New reference.

     Import a module.  This is best described by referring to the
     built-in Python function *note __import__(): 377, as the standard
     *note __import__(): 377. function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or _NULL_ with an exception set on failure.
     Like for *note __import__(): 377, the return value when a
     submodule of a package was requested is normally the top-level
     package, unless a non-empty _fromlist_ was given.

     New in version 2.5.

 -- C Function: PyObject* PyImport_Import (PyObject *name)
     Return value: New reference.

     This is a higher-level interface that calls the current "import
     hook function".  It invokes the *note __import__(): 377. function
     from the `__builtins__' of the current globals.  This means that
     the import is done using whatever import hooks are installed in
     the current environment, e.g. by *note rexec: 147. or `ihooks'.

     Changed in version 2.6: Always uses absolute imports.

 -- C Function: PyObject* PyImport_ReloadModule (PyObject *m)
     Return value: New reference.

     Reload a module.  This is best described by referring to the
     built-in Python function *note reload(): 571, as the standard
     *note reload(): 571. function calls this function directly.
     Return a new reference to the reloaded module, or _NULL_ with an
     exception set on failure (the module still exists in this case).

 -- C Function: PyObject* PyImport_AddModule (const char *name)
     Return value: Borrowed reference.

     Return the module object corresponding to a module name.  The
     _name_ argument may be of the form `package.module'. First check
     the modules dictionary if there's one there, and if not, create a
     new one and insert it in the modules dictionary. Return _NULL_
     with an exception set on failure.

          Note: This function does not load or import the module; if
          the module wasn't already loaded, you will get an empty
          module object. Use *note PyImport_ImportModule(): 379.  or
          one of its variants to import a module.  Package structures
          implied by a dotted name for _name_ are not created if not
          already present.

 -- C Function: PyObject* PyImport_ExecCodeModule (char *name,
          PyObject *co)
     Return value: New reference.

     Given a module name (possibly of the form `package.module') and a
     code object read from a Python bytecode file or obtained from the
     built-in function *note compile(): 1f8, load the module.  Return a
     new reference to the module object, or _NULL_ with an exception
     set if an error occurred.  Before Python 2.4, the module could
     still be created in error cases.  Starting with Python 2.4, _name_
     is removed from *note sys.modules: 80f. in error cases, and even
     if _name_ was already in *note sys.modules: 80f. on entry to *note
     PyImport_ExecCodeModule(): 2a9e.  Leaving incompletely initialized
     modules in *note sys.modules: 80f. is dangerous, as imports of
     such modules have no way to know that the module object is an
     unknown (and probably damaged with respect to the module author's
     intents) state.

     The module's `__file__' attribute will be set to the code object's
     `co_filename'.

     This function will reload the module if it was already imported.
     See *note PyImport_ReloadModule(): 2a9d. for the intended way to
     reload a module.

     If _name_ points to a dotted name of the form `package.module',
     any package structures not already created will still not be
     created.

     Changed in version 2.4: _name_ is removed from *note sys.modules:
     80f. in error cases.

 -- C Function: PyObject* PyImport_ExecCodeModuleEx (char *name,
          PyObject *co, char *pathname)
     Return value: New reference.

     Like *note PyImport_ExecCodeModule(): 2a9e, but the `__file__'
     attribute of the module object is set to _pathname_ if it is
     non-`NULL'.

 -- C Function: long PyImport_GetMagicNumber ()
     Return the magic number for Python bytecode files (a.k.a. `.pyc'
     and `.pyo' files).  The magic number should be present in the
     first four bytes of the bytecode file, in little-endian byte order.

 -- C Function: PyObject* PyImport_GetModuleDict ()
     Return value: Borrowed reference.

     Return the dictionary used for the module administration (a.k.a.
     `sys.modules').  Note that this is a per-interpreter variable.

 -- C Function: PyObject* PyImport_GetImporter (PyObject *path)
     Return an importer object for a *note sys.path:
     576./`pkg.__path__' item _path_, possibly by fetching it from the
     *note sys.path_importer_cache: 814.  dict.  If it wasn't yet
     cached, traverse *note sys.path_hooks: 813. until a hook is found
     that can handle the path item.  Return `None' if no hook could;
     this tells our caller it should fall back to the built-in import
     mechanism.  Cache the result in *note sys.path_importer_cache:
     814.  Return a new reference to the importer object.

     New in version 2.6.

 -- C Function: void _PyImport_Init ()
     Initialize the import mechanism.  For internal use only.

 -- C Function: void PyImport_Cleanup ()
     Empty the module table.  For internal use only.

 -- C Function: void _PyImport_Fini ()
     Finalize the import mechanism.  For internal use only.

 -- C Function: PyObject* _PyImport_FindExtension (char *, char *)
     For internal use only.

 -- C Function: PyObject* _PyImport_FixupExtension (char *, char *)
     For internal use only.

 -- C Function: int PyImport_ImportFrozenModule (char *name)
     Load a frozen module named _name_.  Return `1' for success, `0' if
     the module is not found, and `-1' with an exception set if the
     initialization failed.  To access the imported module on a
     successful load, use *note PyImport_ImportModule(): 379.  (Note
     the misnomer -- this function would reload the module if it was
     already imported.)

 -- C Type: struct _frozen
     This is the structure type definition for frozen module
     descriptors, as generated by the *freeze* utility (see
     `Tools/freeze/' in the Python source distribution).  Its
     definition, found in `Include/import.h', is:

         struct _frozen {
             char *name;
             unsigned char *code;
             int size;
         };



 -- C Variable: struct _frozen* PyImport_FrozenModules
     This pointer is initialized to point to an array of `struct
     _frozen' records, terminated by one whose members are all _NULL_
     or zero.  When a frozen module is imported, it is searched in this
     table.  Third-party code could play tricks with this to provide a
     dynamically created collection of frozen modules.

 -- C Function: int PyImport_AppendInittab (const char *name,
          void (*initfunc)(void))
     Add a single module to the existing table of built-in modules.
     This is a convenience wrapper around *note
     PyImport_ExtendInittab(): 2aac, returning `-1' if the table could
     not be extended.  The new module can be imported by the name
     _name_, and uses the function _initfunc_ as the initialization
     function called on the first attempted import.  This should be
     called before *note Py_Initialize(): 2989.

 -- C Type: struct _inittab
     Structure describing a single entry in the list of built-in
     modules.  Each of these structures gives the name and
     initialization function for a module built into the interpreter.
     Programs which embed Python may use an array of these structures
     in conjunction with *note PyImport_ExtendInittab(): 2aac. to
     provide additional built-in modules.  The structure is defined in
     `Include/import.h' as:

         struct _inittab {
             char *name;
             void (*initfunc)(void);
         };



 -- C Function: int PyImport_ExtendInittab (struct _inittab *newtab)
     Add a collection of modules to the table of built-in modules.  The
     _newtab_ array must end with a sentinel entry which contains
     _NULL_ for the `name' field; failure to provide the sentinel value
     can result in a memory fault.  Returns `0' on success or `-1' if
     insufficient memory could be allocated to extend the internal
     table.  In the event of failure, no modules are added to the
     internal table.  This should be called before *note
     Py_Initialize(): 2989.


File: python.info,  Node: Data marshalling support,  Next: Parsing arguments and building values,  Prev: Importing Modules<2>,  Up: Utilities

7.5.5 Data marshalling support
------------------------------

These routines allow C code to work with serialized objects using the
same data format as the *note marshal: 10b. module.  There are
functions to write data into the serialization format, and additional
functions that can be used to read the data back.  Files used to store
marshalled data must be opened in binary mode.

  Numeric values are stored with the least significant byte first.

  The module supports two versions of the data format: version 0 is the
historical version, version 1 (new in Python 2.4) shares interned
strings in the file, and upon unmarshalling.  Version 2 (new in Python
2.5) uses a binary format for floating point numbers.
_Py_MARSHAL_VERSION_ indicates the current file format (currently 2).

 -- C Function: void PyMarshal_WriteLongToFile (long value, FILE *file,
          int version)
     Marshal a `long' integer, _value_, to _file_.  This will only write
     the least-significant 32 bits of _value_; regardless of the size
     of the native `long' type.

     Changed in version 2.4: _version_ indicates the file format.

 -- C Function: void PyMarshal_WriteObjectToFile (PyObject *value,
          FILE *file, int version)
     Marshal a Python object, _value_, to _file_.

     Changed in version 2.4: _version_ indicates the file format.

 -- C Function: PyObject* PyMarshal_WriteObjectToString
          (PyObject *value, int version)
     Return value: New reference.

     Return a string object containing the marshalled representation of
     _value_.

     Changed in version 2.4: _version_ indicates the file format.

  The following functions allow marshalled values to be read back in.

  XXX What about error detection?  It appears that reading past the end
of the file will always result in a negative numeric value (where
that's relevant), but it's not clear that negative values won't be
handled properly when there's no error.  What's the right way to tell?
Should only non-negative values be written using these routines?

 -- C Function: long PyMarshal_ReadLongFromFile (FILE *file)
     Return a C `long' from the data stream in a `FILE*' opened for
     reading.  Only a 32-bit value can be read in using this function,
     regardless of the native size of `long'.

 -- C Function: int PyMarshal_ReadShortFromFile (FILE *file)
     Return a C `short' from the data stream in a `FILE*' opened for
     reading.  Only a 16-bit value can be read in using this function,
     regardless of the native size of `short'.

 -- C Function: PyObject* PyMarshal_ReadObjectFromFile (FILE *file)
     Return value: New reference.

     Return a Python object from the data stream in a `FILE*' opened for
     reading.  On error, sets the appropriate exception (*note
     EOFError: 874. or *note TypeError: 215.) and returns _NULL_.

 -- C Function: PyObject* PyMarshal_ReadLastObjectFromFile (FILE *file)
     Return value: New reference.

     Return a Python object from the data stream in a `FILE*' opened for
     reading.  Unlike *note PyMarshal_ReadObjectFromFile(): 2ab6, this
     function assumes that no further objects will be read from the
     file, allowing it to aggressively load file data into memory so
     that the de-serialization can operate from data in memory rather
     than reading a byte at a time from the file.  Only use these
     variant if you are certain that you won't be reading anything else
     from the file.  On error, sets the appropriate exception (*note
     EOFError: 874. or *note TypeError: 215.) and returns _NULL_.

 -- C Function: PyObject* PyMarshal_ReadObjectFromString (char *string,
          Py_ssize_t len)
     Return value: New reference.

     Return a Python object from the data stream in a character buffer
     containing _len_ bytes pointed to by _string_.  On error, sets the
     appropriate exception (*note EOFError: 874. or *note TypeError:
     215.) and returns _NULL_.

     Changed in version 2.5: This function used an `int' type for
     _len_. This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: Parsing arguments and building values,  Next: String conversion and formatting,  Prev: Data marshalling support,  Up: Utilities

7.5.6 Parsing arguments and building values
-------------------------------------------

These functions are useful when creating your own extensions functions
and methods.  Additional information and examples are available in
*note Extending and Embedding the Python Interpreter: 4f1.

  The first three of these functions described, *note
PyArg_ParseTuple(): 314, *note PyArg_ParseTupleAndKeywords(): 415, and
*note PyArg_Parse(): 2abb, all use _format strings_ which are used to
tell the function about the expected arguments.  The format strings use
the same syntax for each of these functions.

  A format string consists of zero or more "format units."  A format
unit describes one Python object; it is usually a single character or a
parenthesized sequence of format units.  With a few exceptions, a
format unit that is not a parenthesized sequence normally corresponds
to a single address argument to these functions.  In the following
description, the quoted form is the format unit; the entry in (round)
parentheses is the Python object type that matches the format unit; and
the entry in [square] brackets is the type of the C variable(s) whose
address should be passed.

  These formats allow to access an object as a contiguous chunk of
memory.  You don't have to provide raw storage for the returned unicode
or bytes area.  Also, you won't have to release any memory yourself,
except with the `es', `es#', `et' and `et#' formats.

`s' (string or Unicode) [const char *]
     Convert a Python string or Unicode object to a C pointer to a
     character string.  You must not provide storage for the string
     itself; a pointer to an existing string is stored into the
     character pointer variable whose address you pass.  The C string
     is NUL-terminated.  The Python string must not contain embedded
     NUL bytes; if it does, a *note TypeError: 215. exception is
     raised. Unicode objects are converted to C strings using the
     default encoding.  If this conversion fails, a *note UnicodeError:
     42c. is raised.

`s#' (string, Unicode or any read buffer compatible object) [const char *, int (or `Py_ssize_t', see below)]
     This variant on `s' stores into two C variables, the first one a
     pointer to a character string, the second one its length.  In this
     case the Python string may contain embedded null bytes.  Unicode
     objects pass back a pointer to the default encoded string version
     of the object if such a conversion is possible.  All other
     read-buffer compatible objects pass back a reference to the raw
     internal data representation.

     Starting with Python 2.5 the type of the length argument can be
     controlled by defining the macro `PY_SSIZE_T_CLEAN' before
     including `Python.h'.  If the macro is defined, length is a
     `Py_ssize_t' rather than an int.

`s*' (string, Unicode, or any buffer compatible object) [Py_buffer]
     Similar to `s#', this code fills a Py_buffer structure provided by
     the caller.  The buffer gets locked, so that the caller can
     subsequently use the buffer even inside a `Py_BEGIN_ALLOW_THREADS'
     block; the caller is responsible for calling `PyBuffer_Release'
     with the structure after it has processed the data.

     New in version 2.6.

`z' (string, Unicode  or `None') [const char *]
     Like `s', but the Python object may also be `None', in which case
     the C pointer is set to _NULL_.

`z#' (string, Unicode, `None' or any read buffer compatible object) [const char *, int]
     This is to `s#' as `z' is to `s'.

`z*' (string, Unicode, `None' or any buffer compatible object) [Py_buffer]
     This is to `s*' as `z' is to `s'.

     New in version 2.6.

`u' (Unicode) [Py_UNICODE *]
     Convert a Python Unicode object to a C pointer to a NUL-terminated
     buffer of 16-bit Unicode (UTF-16) data.  As with `s', there is no
     need to provide storage for the Unicode data buffer; a pointer to
     the existing Unicode data is stored into the *note Py_UNICODE:
     a76. pointer variable whose address you pass.

`u#' (Unicode) [Py_UNICODE *, int]
     This variant on `u' stores into two C variables, the first one a
     pointer to a Unicode data buffer, the second one its length.
     Non-Unicode objects are handled by interpreting their read-buffer
     pointer as pointer to a *note Py_UNICODE: a76. array.

`es' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer]
     This variant on `s' is used for encoding Unicode and objects
     convertible to Unicode into a character buffer. It only works for
     encoded data without embedded NUL bytes.

     This format requires two arguments.  The first is only used as
     input, and must be a `const char*' which points to the name of an
     encoding as a NUL-terminated string, or _NULL_, in which case the
     default encoding is used.  An exception is raised if the named
     encoding is not known to Python.  The second argument must be a
     `char**'; the value of the pointer it references will be set to a
     buffer with the contents of the argument text.  The text will be
     encoded in the encoding specified by the first argument.

     *note PyArg_ParseTuple(): 314. will allocate a buffer of the
     needed size, copy the encoded data into this buffer and adjust
     _*buffer_ to reference the newly allocated storage.  The caller is
     responsible for calling *note PyMem_Free(): 3d8. to free the
     allocated buffer after use.

`et' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer]
     Same as `es' except that 8-bit string objects are passed through
     without recoding them.  Instead, the implementation assumes that
     the string object uses the encoding passed in as parameter.

`es#' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer, int *buffer_length]
     This variant on `s#' is used for encoding Unicode and objects
     convertible to Unicode into a character buffer.  Unlike the `es'
     format, this variant allows input data which contains NUL
     characters.

     It requires three arguments.  The first is only used as input, and
     must be a `const char*' which points to the name of an encoding as
     a NUL-terminated string, or _NULL_, in which case the default
     encoding is used.  An exception is raised if the named encoding is
     not known to Python.  The second argument must be a `char**'; the
     value of the pointer it references will be set to a buffer with
     the contents of the argument text.  The text will be encoded in
     the encoding specified by the first argument.  The third argument
     must be a pointer to an integer; the referenced integer will be
     set to the number of bytes in the output buffer.

     There are two modes of operation:

     If _*buffer_ points a _NULL_ pointer, the function will allocate a
     buffer of the needed size, copy the encoded data into this buffer
     and set _*buffer_ to reference the newly allocated storage.  The
     caller is responsible for calling *note PyMem_Free(): 3d8. to free
     the allocated buffer after usage.

     If _*buffer_ points to a non-_NULL_ pointer (an already allocated
     buffer), *note PyArg_ParseTuple(): 314. will use this location as
     the buffer and interpret the initial value of _*buffer_length_ as
     the buffer size.  It will then copy the encoded data into the
     buffer and NUL-terminate it.  If the buffer is not large enough, a
     *note ValueError: 233. will be set.

     In both cases, _*buffer_length_ is set to the length of the
     encoded data without the trailing NUL byte.

`et#' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer, int *buffer_length]
     Same as `es#' except that string objects are passed through without
     recoding them. Instead, the implementation assumes that the string
     object uses the encoding passed in as parameter.

`b' (integer) [unsigned char]
     Convert a nonnegative Python integer to an unsigned tiny int,
     stored in a C `unsigned char'.

`B' (integer) [unsigned char]
     Convert a Python integer to a tiny int without overflow checking,
     stored in a C `unsigned char'.

     New in version 2.3.

`h' (integer) [short int]
     Convert a Python integer to a C `short int'.

`H' (integer) [unsigned short int]
     Convert a Python integer to a C `unsigned short int', without
     overflow checking.

     New in version 2.3.

`i' (integer) [int]
     Convert a Python integer to a plain C `int'.

`I' (integer) [unsigned int]
     Convert a Python integer to a C `unsigned int', without overflow
     checking.

     New in version 2.3.

`l' (integer) [long int]
     Convert a Python integer to a C `long int'.

`k' (integer) [unsigned long]
     Convert a Python integer or long integer to a C `unsigned long'
     without overflow checking.

     New in version 2.3.

`L' (integer) [PY_LONG_LONG]
     Convert a Python integer to a C `long long'.  This format is only
     available on platforms that support `long long' (or `_int64' on
     Windows).

`K' (integer) [unsigned PY_LONG_LONG]
     Convert a Python integer or long integer to a C `unsigned long
     long' without overflow checking.  This format is only available on
     platforms that support `unsigned long long' (or `unsigned _int64'
     on Windows).

     New in version 2.3.

`n' (integer) [Py_ssize_t]
     Convert a Python integer or long integer to a C `Py_ssize_t'.

     New in version 2.5.

`c' (string of length 1) [char]
     Convert a Python character, represented as a string of length 1,
     to a C `char'.

`f' (float) [float]
     Convert a Python floating point number to a C `float'.

`d' (float) [double]
     Convert a Python floating point number to a C `double'.

`D' (complex) [Py_complex]
     Convert a Python complex number to a C *note Py_complex: 2abc.
     structure.

`O' (object) [PyObject *]
     Store a Python object (without any conversion) in a C object
     pointer.  The C program thus receives the actual object that was
     passed.  The object's reference count is not increased.  The
     pointer stored is not _NULL_.

`O!' (object) [_typeobject_, PyObject *]
     Store a Python object in a C object pointer.  This is similar to
     `O', but takes two C arguments: the first is the address of a
     Python type object, the second is the address of the C variable
     (of type *note PyObject*: 39f.)  into which the object pointer is
     stored.  If the Python object does not have the required type,
     *note TypeError: 215. is raised.

`O&' (object) [_converter_, _anything_]
     Convert a Python object to a C variable through a _converter_
     function.  This takes two arguments: the first is a function, the
     second is the address of a C variable (of arbitrary type),
     converted to `void *'.  The _converter_ function in turn is called
     as follows:

         status = converter(object, address);

     where _object_ is the Python object to be converted and _address_
     is the `void*' argument that was passed to the *note
     PyArg_Parse*(): 2abb.  function.  The returned _status_ should be
     `1' for a successful conversion and `0' if the conversion has
     failed.  When the conversion fails, the _converter_ function
     should raise an exception and leave the content of _address_
     unmodified.

`S' (string) [PyStringObject *]
     Like `O' but requires that the Python object is a string object.
     Raises *note TypeError: 215. if the object is not a string object.
     The C variable may also be declared as *note PyObject*: 39f.

`U' (Unicode string) [PyUnicodeObject *]
     Like `O' but requires that the Python object is a Unicode object.
     Raises *note TypeError: 215. if the object is not a Unicode
     object.  The C variable may also be declared as *note PyObject*:
     39f.

`t#' (read-only character buffer) [char *, int]
     Like `s#', but accepts any object which implements the read-only
     buffer interface.  The `char*' variable is set to point to the
     first byte of the buffer, and the `int' is set to the length of
     the buffer.  Only single-segment buffer objects are accepted;
     *note TypeError: 215. is raised for all others.

`w' (read-write character buffer) [char *]
     Similar to `s', but accepts any object which implements the
     read-write buffer interface.  The caller must determine the length
     of the buffer by other means, or use `w#' instead.  Only
     single-segment buffer objects are accepted; *note TypeError: 215.
     is raised for all others.

`w#' (read-write character buffer) [char *, Py_ssize_t]
     Like `s#', but accepts any object which implements the read-write
     buffer interface.  The `char *' variable is set to point to the
     first byte of the buffer, and the `Py_ssize_t' is set to the
     length of the buffer.  Only single-segment buffer objects are
     accepted; *note TypeError: 215.  is raised for all others.

`w*' (read-write byte-oriented buffer) [Py_buffer]
     This is to `w' what `s*' is to `s'.

     New in version 2.6.

`(items)' (tuple) [_matching-items_]
     The object must be a Python sequence whose length is the number of
     format units in _items_.  The C arguments must correspond to the
     individual format units in _items_.  Format units for sequences
     may be nested.

          Note: Prior to Python version 1.5.2, this format specifier
          only accepted a tuple containing the individual parameters,
          not an arbitrary sequence.  Code which previously caused
          *note TypeError: 215. to be raised here may now proceed
          without an exception.  This is not expected to be a problem
          for existing code.

  It is possible to pass Python long integers where integers are
requested; however no proper range checking is done -- the most
significant bits are silently truncated when the receiving field is too
small to receive the value (actually, the semantics are inherited from
downcasts in C -- your mileage may vary).

  A few other characters have a meaning in a format string.  These may
not occur inside nested parentheses.  They are:

`|'
     Indicates that the remaining arguments in the Python argument list
     are optional.  The C variables corresponding to optional arguments
     should be initialized to their default value -- when an optional
     argument is not specified, *note PyArg_ParseTuple(): 314. does not
     touch the contents of the corresponding C variable(s).

`:'
     The list of format units ends here; the string after the colon is
     used as the function name in error messages (the "associated
     value" of the exception that *note PyArg_ParseTuple(): 314.
     raises).

`;'
     The list of format units ends here; the string after the semicolon
     is used as the error message _instead_ of the default error
     message.  `:' and `;' mutually exclude each other.

  Note that any Python object references which are provided to the
caller are _borrowed_ references; do not decrement their reference
count!

  Additional arguments passed to these functions must be addresses of
variables whose type is determined by the format string; these are used
to store values from the input tuple.  There are a few cases, as
described in the list of format units above, where these parameters are
used as input values; they should match what is specified for the
corresponding format unit in that case.

  For the conversion to succeed, the _arg_ object must match the format
and the format must be exhausted.  On success, the *note
PyArg_Parse*(): 2abb. functions return true, otherwise they return
false and raise an appropriate exception.  When the *note
PyArg_Parse*(): 2abb. functions fail due to conversion failure in one
of the format units, the variables at the addresses corresponding to
that and the following format units are left untouched.

 -- C Function: int PyArg_ParseTuple (PyObject *args, const
          char *format, ...)
     Parse the parameters of a function that takes only positional
     parameters into local variables.  Returns true on success; on
     failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParse (PyObject *args, const char *format,
          va_list vargs)
     Identical to *note PyArg_ParseTuple(): 314, except that it accepts
     a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[], ...)
     Parse the parameters of a function that takes both positional and
     keyword parameters into local variables.  Returns true on success;
     on failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[],
          va_list vargs)
     Identical to *note PyArg_ParseTupleAndKeywords(): 415, except that
     it accepts a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_Parse (PyObject *args, const char *format,
          ...)
     Function used to deconstruct the argument lists of "old-style"
     functions -- these are functions which use the *note METH_OLDARGS:
     4a4. parameter parsing method.  This is not recommended for use in
     parameter parsing in new code, and most code in the standard
     interpreter has been modified to no longer use this for that
     purpose.  It does remain a convenient way to decompose other
     tuples, however, and may continue to be used for that purpose.

 -- C Function: int PyArg_UnpackTuple (PyObject *args, const
          char *name, Py_ssize_t min, Py_ssize_t max, ...)
     A simpler form of parameter retrieval which does not use a format
     string to specify the types of the arguments.  Functions which use
     this method to retrieve their parameters should be declared as
     *note METH_VARARGS: 4a3. in function or method tables.  The tuple
     containing the actual parameters should be passed as _args_; it
     must actually be a tuple.  The length of the tuple must be at
     least _min_ and no more than _max_; _min_ and _max_ may be equal.
     Additional arguments must be passed to the function, each of which
     should be a pointer to a *note PyObject*: 39f. variable; these
     will be filled in with the values from _args_; they will contain
     borrowed references.  The variables which correspond to optional
     parameters not given by _args_ will not be filled in; these should
     be initialized by the caller. This function returns true on
     success and false if _args_ is not a tuple or contains the wrong
     number of elements; an exception will be set if there was a
     failure.

     This is an example of the use of this function, taken from the
     sources for the `_weakref' helper module for weak references:

         static PyObject *
         weakref_ref(PyObject *self, PyObject *args)
         {
             PyObject *object;
             PyObject *callback = NULL;
             PyObject *result = NULL;

             if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
                 result = PyWeakref_NewRef(object, callback);
             }
             return result;
         }

     The call to *note PyArg_UnpackTuple(): 4a1. in this example is
     entirely equivalent to this call to *note PyArg_ParseTuple(): 314.:

         PyArg_ParseTuple(args, "O|O:ref", &object, &callback)

     New in version 2.2.

     Changed in version 2.5: This function used an `int' type for _min_
     and _max_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* Py_BuildValue (const char *format, ...)
     Return value: New reference.

     Create a new value based on a format string similar to those
     accepted by the *note PyArg_Parse*(): 2abb. family of functions
     and a sequence of values.  Returns the value or _NULL_ in the case
     of an error; an exception will be raised if _NULL_ is returned.

     *note Py_BuildValue(): 3a1. does not always build a tuple.  It
     builds a tuple only if its format string contains two or more
     format units.  If the format string is empty, it returns `None';
     if it contains exactly one format unit, it returns whatever object
     is described by that format unit.  To force it to return a tuple
     of size 0 or one, parenthesize the format string.

     When memory buffers are passed as parameters to supply data to
     build objects, as for the `s' and `s#' formats, the required data
     is copied.  Buffers provided by the caller are never referenced by
     the objects created by *note Py_BuildValue(): 3a1.  In other
     words, if your code invokes `malloc()' and passes the allocated
     memory to *note Py_BuildValue(): 3a1, your code is responsible for
     calling `free()' for that memory once *note Py_BuildValue(): 3a1.
     returns.

     In the following description, the quoted form is the format unit;
     the entry in (round) parentheses is the Python object type that
     the format unit will return; and the entry in [square] brackets is
     the type of the C value(s) to be passed.

     The characters space, tab, colon and comma are ignored in format
     strings (but not within format units such as `s#').  This can be
     used to make long format strings a tad more readable.

    `s' (string) [char *]
          Convert a null-terminated C string to a Python object.  If
          the C string pointer is _NULL_, `None' is used.

    `s#' (string) [char *, int]
          Convert a C string and its length to a Python object.  If the
          C string pointer is _NULL_, the length is ignored and `None'
          is returned.

    `z' (string or `None') [char *]
          Same as `s'.

    `z#' (string or `None') [char *, int]
          Same as `s#'.

    `u' (Unicode string) [Py_UNICODE *]
          Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)
          data to a Python Unicode object.  If the Unicode buffer
          pointer is _NULL_, `None' is returned.

    `u#' (Unicode string) [Py_UNICODE *, int]
          Convert a Unicode (UCS-2 or UCS-4) data buffer and its length
          to a Python Unicode object.   If the Unicode buffer pointer
          is _NULL_, the length is ignored and `None' is returned.

    `i' (integer) [int]
          Convert a plain C `int' to a Python integer object.

    `b' (integer) [char]
          Convert a plain C `char' to a Python integer object.

    `h' (integer) [short int]
          Convert a plain C `short int' to a Python integer object.

    `l' (integer) [long int]
          Convert a C `long int' to a Python integer object.

    `B' (integer) [unsigned char]
          Convert a C `unsigned char' to a Python integer object.

    `H' (integer) [unsigned short int]
          Convert a C `unsigned short int' to a Python integer object.

    `I' (integer/long) [unsigned int]
          Convert a C `unsigned int' to a Python integer object or a
          Python long integer object, if it is larger than `sys.maxint'.

    `k' (integer/long) [unsigned long]
          Convert a C `unsigned long' to a Python integer object or a
          Python long integer object, if it is larger than `sys.maxint'.

    `L' (long) [PY_LONG_LONG]
          Convert a C `long long' to a Python long integer object. Only
          available on platforms that support `long long'.

    `K' (long) [unsigned PY_LONG_LONG]
          Convert a C `unsigned long long' to a Python long integer
          object.  Only available on platforms that support `unsigned
          long long'.

    `n' (int) [Py_ssize_t]
          Convert a C `Py_ssize_t' to a Python integer or long integer.

          New in version 2.5.

    `c' (string of length 1) [char]
          Convert a C `int' representing a character to a Python string
          of length 1.

    `d' (float) [double]
          Convert a C `double' to a Python floating point number.

    `f' (float) [float]
          Same as `d'.

    `D' (complex) [Py_complex *]
          Convert a C *note Py_complex: 2abc. structure to a Python
          complex number.

    `O' (object) [PyObject *]
          Pass a Python object untouched (except for its reference
          count, which is incremented by one).  If the object passed in
          is a _NULL_ pointer, it is assumed that this was caused
          because the call producing the argument found an error and
          set an exception. Therefore, *note Py_BuildValue(): 3a1.
          will return _NULL_ but won't raise an exception.  If no
          exception has been raised yet, *note SystemError: 93d. is set.

    `S' (object) [PyObject *]
          Same as `O'.

    `N' (object) [PyObject *]
          Same as `O', except it doesn't increment the reference count
          on the object.  Useful when the object is created by a call
          to an object constructor in the argument list.

    `O&' (object) [_converter_, _anything_]
          Convert _anything_ to a Python object through a _converter_
          function.  The function is called with _anything_ (which
          should be compatible with `void *') as its argument and
          should return a "new" Python object, or _NULL_ if an error
          occurred.

    `(items)' (tuple) [_matching-items_]
          Convert a sequence of C values to a Python tuple with the
          same number of items.

    `[items]' (list) [_matching-items_]
          Convert a sequence of C values to a Python list with the same
          number of items.

    `{items}' (dictionary) [_matching-items_]
          Convert a sequence of C values to a Python dictionary.  Each
          pair of consecutive C values adds one item to the dictionary,
          serving as key and value, respectively.

     If there is an error in the format string, the *note SystemError:
     93d. exception is set and _NULL_ returned.

 -- C Function: PyObject* Py_VaBuildValue (const char *format,
          va_list vargs)
     Identical to *note Py_BuildValue(): 3a1, except that it accepts a
     va_list rather than a variable number of arguments.


File: python.info,  Node: String conversion and formatting,  Next: Reflection,  Prev: Parsing arguments and building values,  Up: Utilities

7.5.7 String conversion and formatting
--------------------------------------

Functions for number conversion and formatted string output.

 -- C Function: int PyOS_snprintf (char *str, size_t size, const
          char *format, ...)
     Output not more than _size_ bytes to _str_ according to the format
     string _format_ and the extra arguments. See the Unix man page
     `snprintf(2)'.

 -- C Function: int PyOS_vsnprintf (char *str, size_t size, const
          char *format, va_list va)
     Output not more than _size_ bytes to _str_ according to the format
     string _format_ and the variable argument list _va_. Unix man page
     `vsnprintf(2)'.

  *note PyOS_snprintf(): 4a5. and *note PyOS_vsnprintf(): 4a6. wrap the
Standard C library functions `snprintf()' and `vsnprintf()'. Their
purpose is to guarantee consistent behavior in corner cases, which the
Standard C functions do not.

  The wrappers ensure that _str*[*size_-1] is always `'\0'' upon
return. They never write more than _size_ bytes (including the trailing
`'\0'' into str.  Both functions require that `str != NULL', `size > 0'
and `format != NULL'.

  If the platform doesn't have `vsnprintf()' and the buffer size needed
to avoid truncation exceeds _size_ by more than 512 bytes, Python
aborts with a _Py_FatalError_.

  The return value (_rv_) for these functions should be interpreted as
follows:

   * When `0 <= rv < size', the output conversion was successful and
     _rv_ characters were written to _str_ (excluding the trailing
     `'\0'' byte at _str*[*rv_]).

   * When `rv >= size', the output conversion was truncated and a
     buffer with `rv + 1' bytes would have been needed to succeed.
     _str*[*size_-1] is `'\0'' in this case.

   * When `rv < 0', "something bad happened." _str*[*size_-1] is `'\0''
     in this case too, but the rest of _str_ is undefined. The exact
     cause of the error depends on the underlying platform.

  The following functions provide locale-independent string to number
conversions.

 -- C Function: double PyOS_string_to_double (const char *s,
          char **endptr, PyObject *overflow_exception)
     Convert a string `s' to a `double', raising a Python exception on
     failure.  The set of accepted strings corresponds to the set of
     strings accepted by Python's *note float(): 1e8. constructor,
     except that `s' must not have leading or trailing whitespace.  The
     conversion is independent of the current locale.

     If `endptr' is `NULL', convert the whole string.  Raise ValueError
     and return `-1.0' if the string is not a valid representation of a
     floating-point number.

     If endptr is not `NULL', convert as much of the string as possible
     and set `*endptr' to point to the first unconverted character.  If
     no initial segment of the string is the valid representation of a
     floating-point number, set `*endptr' to point to the beginning of
     the string, raise ValueError, and return `-1.0'.

     If `s' represents a value that is too large to store in a float
     (for example, `"1e500"' is such a string on many platforms) then
     if `overflow_exception' is `NULL' return `Py_HUGE_VAL' (with an
     appropriate sign) and don't set any exception.  Otherwise,
     `overflow_exception' must point to a Python exception object;
     raise that exception and return `-1.0'.  In both cases, set
     `*endptr' to point to the first character after the converted
     value.

     If any other error occurs during the conversion (for example an
     out-of-memory error), set the appropriate Python exception and
     return `-1.0'.

     New in version 2.7.

 -- C Function: double PyOS_ascii_strtod (const char *nptr,
          char **endptr)
     Convert a string to a `double'. This function behaves like the
     Standard C function `strtod()' does in the C locale. It does this
     without changing the current locale, since that would not be
     thread-safe.

     *note PyOS_ascii_strtod(): 2bb. should typically be used for
     reading configuration files or other non-user input that should be
     locale independent.

     See the Unix man page `strtod(2)' for details.

     New in version 2.4.

     Deprecated since version 2.7: Use *note PyOS_string_to_double():
     2ba. instead.

 -- C Function: char* PyOS_ascii_formatd (char *buffer, size_t buf_len,
          const char *format, double d)
     Convert a `double' to a string using the `'.'' as the decimal
     separator. _format_ is a `printf()'-style format string specifying
     the number format. Allowed conversion characters are `'e'', `'E'',
     `'f'', `'F'', `'g'' and `'G''.

     The return value is a pointer to _buffer_ with the converted
     string or NULL if the conversion failed.

     New in version 2.4.

     Deprecated since version 2.7: This function is removed in Python
     2.7 and 3.1.  Use `PyOS_double_to_string()' instead.

 -- C Function: char* PyOS_double_to_string (double val,
          char format_code, int precision, int flags, int *ptype)
     Convert a `double' _val_ to a string using supplied _format_code_,
     _precision_, and _flags_.

     _format_code_ must be one of `'e'', `'E'', `'f'', `'F'', `'g'',
     `'G'' or `'r''.  For `'r'', the supplied _precision_ must be 0 and
     is ignored.  The `'r'' format code specifies the standard *note
     repr(): 145. format.

     _flags_ can be zero or more of the values _Py_DTSF_SIGN_,
     _Py_DTSF_ADD_DOT_0_, or _Py_DTSF_ALT_, or-ed together:

        * _Py_DTSF_SIGN_ means to always precede the returned string
          with a sign character, even if _val_ is non-negative.

        * _Py_DTSF_ADD_DOT_0_ means to ensure that the returned string
          will not look like an integer.

        * _Py_DTSF_ALT_ means to apply "alternate" formatting rules.
          See the documentation for the *note PyOS_snprintf(): 4a5.
          `'#'' specifier for details.

     If _ptype_ is non-NULL, then the value it points to will be set to
     one of _Py_DTST_FINITE_, _Py_DTST_INFINITE_, or _Py_DTST_NAN_,
     signifying that _val_ is a finite number, an infinite number, or
     not a number, respectively.

     The return value is a pointer to _buffer_ with the converted
     string or _NULL_ if the conversion failed. The caller is
     responsible for freeing the returned string by calling *note
     PyMem_Free(): 3d8.

     New in version 2.7.

 -- C Function: double PyOS_ascii_atof (const char *nptr)
     Convert a string to a `double' in a locale-independent way.

     See the Unix man page `atof(2)' for details.

     New in version 2.4.

     Deprecated since version 3.1: Use *note PyOS_string_to_double():
     2ba. instead.

 -- C Function: char* PyOS_stricmp (char *s1, char *s2)
     Case insensitive comparison of strings. The function works almost
     identically to `strcmp()' except that it ignores the case.

     New in version 2.6.

 -- C Function: char* PyOS_strnicmp (char *s1, char *s2, Py_ssize_t
           size)
     Case insensitive comparison of strings. The function works almost
     identically to `strncmp()' except that it ignores the case.

     New in version 2.6.


File: python.info,  Node: Reflection,  Next: Codec registry and support functions,  Prev: String conversion and formatting,  Up: Utilities

7.5.8 Reflection
----------------

 -- C Function: PyObject* PyEval_GetBuiltins ()
     Return value: Borrowed reference.

     Return a dictionary of the builtins in the current execution frame,
     or the interpreter of the thread state if no frame is currently
     executing.

 -- C Function: PyObject* PyEval_GetLocals ()
     Return value: Borrowed reference.

     Return a dictionary of the local variables in the current
     execution frame, or _NULL_ if no frame is currently executing.

 -- C Function: PyObject* PyEval_GetGlobals ()
     Return value: Borrowed reference.

     Return a dictionary of the global variables in the current
     execution frame, or _NULL_ if no frame is currently executing.

 -- C Function: PyFrameObject* PyEval_GetFrame ()
     Return value: Borrowed reference.

     Return the current thread state's frame, which is _NULL_ if no
     frame is currently executing.

 -- C Function: int PyFrame_GetLineNumber (PyFrameObject *frame)
     Return the line number that _frame_ is currently executing.

 -- C Function: int PyEval_GetRestricted ()
     If there is a current frame and it is executing in restricted
     mode, return true, otherwise false.

 -- C Function: const char* PyEval_GetFuncName (PyObject *func)
     Return the name of _func_ if it is a function, class or instance
     object, else the name of _func_s type.

 -- C Function: const char* PyEval_GetFuncDesc (PyObject *func)
     Return a description string, depending on the type of _func_.
     Return values include "()" for functions and methods, "
     constructor", " instance", and " object".  Concatenated with the
     result of *note PyEval_GetFuncName(): 2ace, the result will be a
     description of _func_.


File: python.info,  Node: Codec registry and support functions,  Prev: Reflection,  Up: Utilities

7.5.9 Codec registry and support functions
------------------------------------------

 -- C Function: int PyCodec_Register (PyObject *search_function)
     Register a new codec search function.

     As side effect, this tries to load the `encodings' package, if not
     yet done, to make sure that it is always first in the list of
     search functions.

 -- C Function: int PyCodec_KnownEncoding (const char *encoding)
     Return `1' or `0' depending on whether there is a registered codec
     for the given _encoding_.

 -- C Function: PyObject* PyCodec_Encode (PyObject *object, const
          char *encoding, const char *errors)
     Generic codec based encoding API.

     _object_ is passed through the encoder function found for the given
     _encoding_ using the error handling method defined by _errors_.
     _errors_ may be _NULL_ to use the default method defined for the
     codec.  Raises a *note LookupError: 879. if no encoder can be
     found.

 -- C Function: PyObject* PyCodec_Decode (PyObject *object, const
          char *encoding, const char *errors)
     Generic codec based decoding API.

     _object_ is passed through the decoder function found for the given
     _encoding_ using the error handling method defined by _errors_.
     _errors_ may be _NULL_ to use the default method defined for the
     codec.  Raises a *note LookupError: 879. if no encoder can be
     found.

* Menu:

* Codec lookup API::
* Registry API for Unicode encoding error handlers::


File: python.info,  Node: Codec lookup API,  Next: Registry API for Unicode encoding error handlers,  Up: Codec registry and support functions

7.5.9.1 Codec lookup API
........................

In the following functions, the _encoding_ string is looked up
converted to all lower-case characters, which makes encodings looked up
through this mechanism effectively case-insensitive.  If no codec is
found, a *note KeyError: 202. is set and _NULL_ returned.

 -- C Function: PyObject* PyCodec_Encoder (const char *encoding)
     Get an encoder function for the given _encoding_.

 -- C Function: PyObject* PyCodec_Decoder (const char *encoding)
     Get a decoder function for the given _encoding_.

 -- C Function: PyObject* PyCodec_IncrementalEncoder (const
          char *encoding, const char *errors)
     Get an `IncrementalEncoder' object for the given _encoding_.

 -- C Function: PyObject* PyCodec_IncrementalDecoder (const
          char *encoding, const char *errors)
     Get an `IncrementalDecoder' object for the given _encoding_.

 -- C Function: PyObject* PyCodec_StreamReader (const char *encoding,
          PyObject *stream, const char *errors)
     Get a `StreamReader' factory function for the given _encoding_.

 -- C Function: PyObject* PyCodec_StreamWriter (const char *encoding,
          PyObject *stream, const char *errors)
     Get a `StreamWriter' factory function for the given _encoding_.


File: python.info,  Node: Registry API for Unicode encoding error handlers,  Prev: Codec lookup API,  Up: Codec registry and support functions

7.5.9.2 Registry API for Unicode encoding error handlers
........................................................

 -- C Function: int PyCodec_RegisterError (const char *name,
          PyObject *error)
     Register the error handling callback function _error_ under the
     given _name_.  This callback function will be called by a codec
     when it encounters unencodable characters/undecodable bytes and
     _name_ is specified as the error parameter in the call to the
     encode/decode function.

     The callback gets a single argument, an instance of *note
     UnicodeEncodeError: 944, *note UnicodeDecodeError: 945. or *note
     UnicodeTranslateError: 946. that holds information about the
     problematic sequence of characters or bytes and their offset in
     the original string (see *note Unicode Exception Objects: 2a5d.
     for functions to extract this information).  The callback must
     either raise the given exception, or return a two-item tuple
     containing the replacement for the problematic sequence, and an
     integer giving the offset in the original string at which
     encoding/decoding should be resumed.

     Return `0' on success, `-1' on error.

 -- C Function: PyObject* PyCodec_LookupError (const char *name)
     Lookup the error handling callback function registered under
     _name_.  As a special case _NULL_ can be passed, in which case the
     error handling callback for "strict" will be returned.

 -- C Function: PyObject* PyCodec_StrictErrors (PyObject *exc)
     Raise _exc_ as an exception.

 -- C Function: PyObject* PyCodec_IgnoreErrors (PyObject *exc)
     Ignore the unicode error, skipping the faulty input.

 -- C Function: PyObject* PyCodec_ReplaceErrors (PyObject *exc)
     Replace the unicode encode error with `?' or `U+FFFD'.

 -- C Function: PyObject* PyCodec_XMLCharRefReplaceErrors
          (PyObject *exc)
     Replace the unicode encode error with XML character references.

 -- C Function: PyObject* PyCodec_BackslashReplaceErrors (PyObject *exc)
     Replace the unicode encode error with backslash escapes (`\x',
     `\u' and `\U').


File: python.info,  Node: Abstract Objects Layer,  Next: Concrete Objects Layer,  Prev: Utilities,  Up: Python/C API Reference Manual

7.6 Abstract Objects Layer
==========================

The functions in this chapter interact with Python objects regardless
of their type, or with wide classes of object types (e.g. all numerical
types, or all sequence types).  When used on object types for which
they do not apply, they will raise a Python exception.

  It is not possible to use these functions on objects that are not
properly initialized, such as a list object that has been created by
*note PyList_New(): 2a0a, but whose items have not been set to some
non-`NULL' value yet.

* Menu:

* Object Protocol::
* Number Protocol::
* Sequence Protocol::
* Mapping Protocol::
* Iterator Protocol::
* Old Buffer Protocol::


File: python.info,  Node: Object Protocol,  Next: Number Protocol,  Up: Abstract Objects Layer

7.6.1 Object Protocol
---------------------

 -- C Function: int PyObject_Print (PyObject *o, FILE *fp, int flags)
     Print an object _o_, on file _fp_.  Returns `-1' on error.  The
     flags argument is used to enable certain printing options.  The
     only option currently supported is `Py_PRINT_RAW'; if given, the
     *note str(): 1e7. of the object is written instead of the *note
     repr(): 145.

 -- C Function: int PyObject_HasAttr (PyObject *o, PyObject *attr_name)
     Returns `1' if _o_ has the attribute _attr_name_, and `0'
     otherwise.  This is equivalent to the Python expression
     `hasattr(o, attr_name)'.  This function always succeeds.

 -- C Function: int PyObject_HasAttrString (PyObject *o, const
          char *attr_name)
     Returns `1' if _o_ has the attribute _attr_name_, and `0'
     otherwise.  This is equivalent to the Python expression
     `hasattr(o, attr_name)'.  This function always succeeds.

 -- C Function: PyObject* PyObject_GetAttr (PyObject *o,
          PyObject *attr_name)
     Return value: New reference.

     Retrieve an attribute named _attr_name_ from object _o_. Returns
     the attribute value on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression `o.attr_name'.

 -- C Function: PyObject* PyObject_GetAttrString (PyObject *o, const
          char *attr_name)
     Return value: New reference.

     Retrieve an attribute named _attr_name_ from object _o_. Returns
     the attribute value on success, or _NULL_ on failure. This is the
     equivalent of the Python expression `o.attr_name'.

 -- C Function: PyObject* PyObject_GenericGetAttr (PyObject *o,
          PyObject *name)
     Generic attribute getter function that is meant to be put into a
     type object's `tp_getattro' slot.  It looks for a descriptor in
     the dictionary of classes in the object's MRO as well as an
     attribute in the object's `__dict__' (if present).  As outlined in
     *note Implementing Descriptors: 6eb, data descriptors take
     preference over instance attributes, while non-data descriptors
     don't.  Otherwise, an *note AttributeError: 1f5. is raised.

 -- C Function: int PyObject_SetAttr (PyObject *o, PyObject *attr_name,
          PyObject *v)
     Set the value of the attribute named _attr_name_, for object _o_,
     to the value _v_. Returns `-1' on failure.  This is the equivalent
     of the Python statement `o.attr_name = v'.

 -- C Function: int PyObject_SetAttrString (PyObject *o, const
          char *attr_name, PyObject *v)
     Set the value of the attribute named _attr_name_, for object _o_,
     to the value _v_. Returns `-1' on failure.  This is the equivalent
     of the Python statement `o.attr_name = v'.

 -- C Function: int PyObject_GenericSetAttr (PyObject *o,
          PyObject *name, PyObject *value)
     Generic attribute setter function that is meant to be put into a
     type object's `tp_setattro' slot.  It looks for a data descriptor
     in the dictionary of classes in the object's MRO, and if found it
     takes preference over setting the attribute in the instance
     dictionary. Otherwise, the attribute is set in the object's
     `__dict__' (if present).  Otherwise, an *note AttributeError: 1f5.
     is raised and `-1' is returned.

 -- C Function: int PyObject_DelAttr (PyObject *o, PyObject *attr_name)
     Delete attribute named _attr_name_, for object _o_. Returns `-1'
     on failure.  This is the equivalent of the Python statement `del
     o.attr_name'.

 -- C Function: int PyObject_DelAttrString (PyObject *o, const
          char *attr_name)
     Delete attribute named _attr_name_, for object _o_. Returns `-1'
     on failure.  This is the equivalent of the Python statement `del
     o.attr_name'.

 -- C Function: PyObject* PyObject_RichCompare (PyObject *o1,
          PyObject *o2, int opid)
     Return value: New reference.

     Compare the values of _o1_ and _o2_ using the operation specified
     by _opid_, which must be one of `Py_LT', `Py_LE', `Py_EQ',
     `Py_NE', `Py_GT', or `Py_GE', corresponding to `<', `<=', `==',
     `!=', `>', or `>=' respectively. This is the equivalent of the
     Python expression `o1 op o2', where `op' is the operator
     corresponding to _opid_. Returns the value of the comparison on
     success, or _NULL_ on failure.

 -- C Function: int PyObject_RichCompareBool (PyObject *o1,
          PyObject *o2, int opid)
     Compare the values of _o1_ and _o2_ using the operation specified
     by _opid_, which must be one of `Py_LT', `Py_LE', `Py_EQ',
     `Py_NE', `Py_GT', or `Py_GE', corresponding to `<', `<=', `==',
     `!=', `>', or `>=' respectively. Returns `-1' on error, `0' if the
     result is false, `1' otherwise. This is the equivalent of the
     Python expression `o1 op o2', where `op' is the operator
     corresponding to _opid_.

     Note: If _o1_ and _o2_ are the same object, *note
     PyObject_RichCompareBool(): 2af5.  will always return `1' for
     `Py_EQ' and `0' for `Py_NE'.

 -- C Function: int PyObject_Cmp (PyObject *o1, PyObject *o2,
          int *result)
     Compare the values of _o1_ and _o2_ using a routine provided by
     _o1_, if one exists, otherwise with a routine provided by _o2_.
     The result of the comparison is returned in _result_.  Returns
     `-1' on failure.  This is the equivalent of the Python statement
     `result = cmp(o1, o2)'.

 -- C Function: int PyObject_Compare (PyObject *o1, PyObject *o2)
     Compare the values of _o1_ and _o2_ using a routine provided by
     _o1_, if one exists, otherwise with a routine provided by _o2_.
     Returns the result of the comparison on success.  On error, the
     value returned is undefined; use *note PyErr_Occurred(): 297c. to
     detect an error.  This is equivalent to the Python expression
     `cmp(o1, o2)'.

 -- C Function: PyObject* PyObject_Repr (PyObject *o)
     Return value: New reference.

     Compute a string representation of object _o_.  Returns the string
     representation on success, _NULL_ on failure.  This is the
     equivalent of the Python expression `repr(o)'.  Called by the
     *note repr(): 145. built-in function and by reverse quotes.

 -- C Function: PyObject* PyObject_Str (PyObject *o)
     Return value: New reference.

     Compute a string representation of object _o_.  Returns the string
     representation on success, _NULL_ on failure.  This is the
     equivalent of the Python expression `str(o)'.  Called by the *note
     str(): 1e7. built-in function and by the *note print: 4d7.
     statement.

 -- C Function: PyObject* PyObject_Bytes (PyObject *o)
     Compute a bytes representation of object _o_.  In 2.x, this is
     just a alias for *note PyObject_Str(): 2af7.

 -- C Function: PyObject* PyObject_Unicode (PyObject *o)
     Return value: New reference.

     Compute a Unicode string representation of object _o_.  Returns
     the Unicode string representation on success, _NULL_ on failure.
     This is the equivalent of the Python expression `unicode(o)'.
     Called by the *note unicode(): 1f2. built-in function.

 -- C Function: int PyObject_IsInstance (PyObject *inst, PyObject *cls)
     Returns `1' if _inst_ is an instance of the class _cls_ or a
     subclass of _cls_, or `0' if not.  On error, returns `-1' and sets
     an exception.  If _cls_ is a type object rather than a class
     object, *note PyObject_IsInstance(): 2afa.  returns `1' if _inst_
     is of type _cls_.  If _cls_ is a tuple, the check will be done
     against every entry in _cls_. The result will be `1' when at least
     one of the checks returns `1', otherwise it will be `0'. If _inst_
     is not a class instance and _cls_ is neither a type object, nor a
     class object, nor a tuple, _inst_ must have a `__class__'
     attribute -- the class relationship of the value of that attribute
     with _cls_ will be used to determine the result of this function.

     New in version 2.1.

     Changed in version 2.2: Support for a tuple as the second argument
     added.

  Subclass determination is done in a fairly straightforward way, but
includes a wrinkle that implementors of extensions to the class system
may want to be aware of.  If `A' and `B' are class objects, `B' is a
subclass of `A' if it inherits from `A' either directly or indirectly.
If either is not a class object, a more general mechanism is used to
determine the class relationship of the two objects.  When testing if
_B_ is a subclass of _A_, if _A_ is _B_, *note PyObject_IsSubclass():
2afb. returns true.  If _A_ and _B_ are different objects, _B_'s
`__bases__' attribute is searched in a depth-first fashion for _A_ --
the presence of the `__bases__' attribute is considered sufficient for
this determination.

 -- C Function: int PyObject_IsSubclass (PyObject *derived,
          PyObject *cls)
     Returns `1' if the class _derived_ is identical to or derived from
     the class _cls_, otherwise returns `0'.  In case of an error,
     returns `-1'. If _cls_ is a tuple, the check will be done against
     every entry in _cls_. The result will be `1' when at least one of
     the checks returns `1', otherwise it will be `0'. If either
     _derived_ or _cls_ is not an actual class object (or tuple), this
     function uses the generic algorithm described above.

     New in version 2.1.

     Changed in version 2.3: Older versions of Python did not support a
     tuple as the second argument.

 -- C Function: int PyCallable_Check (PyObject *o)
     Determine if the object _o_ is callable.  Return `1' if the object
     is callable and `0' otherwise.  This function always succeeds.

 -- C Function: PyObject* PyObject_Call (PyObject *callable_object,
          PyObject *args, PyObject *kw)
     Return value: New reference.

     Call a callable Python object _callable_object_, with arguments
     given by the tuple _args_, and named arguments given by the
     dictionary _kw_. If no named arguments are needed, _kw_ may be
     _NULL_. _args_ must not be _NULL_, use an empty tuple if no
     arguments are needed. Returns the result of the call on success,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression `apply(callable_object, args, kw)' or
     `callable_object(*args, **kw)'.

     New in version 2.2.

 -- C Function: PyObject* PyObject_CallObject
          (PyObject *callable_object, PyObject *args)
     Return value: New reference.

     Call a callable Python object _callable_object_, with arguments
     given by the tuple _args_.  If no arguments are needed, then
     _args_ may be _NULL_.  Returns the result of the call on success,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression `apply(callable_object, args)' or
     `callable_object(*args)'.

 -- C Function: PyObject* PyObject_CallFunction (PyObject *callable,
          char *format, ...)
     Return value: New reference.

     Call a callable Python object _callable_, with a variable number
     of C arguments.  The C arguments are described using a *note
     Py_BuildValue(): 3a1. style format string.  The format may be
     _NULL_, indicating that no arguments are provided.  Returns the
     result of the call on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression `apply(callable, args)' or
     `callable(*args)'. Note that if you only pass *note PyObject *:
     39f. args, *note PyObject_CallFunctionObjArgs(): 2afe. is a faster
     alternative.

 -- C Function: PyObject* PyObject_CallMethod (PyObject *o,
          char *method, char *format, ...)
     Return value: New reference.

     Call the method named _method_ of object _o_ with a variable
     number of C arguments.  The C arguments are described by a *note
     Py_BuildValue(): 3a1. format string that should  produce a tuple.
     The format may be _NULL_, indicating that no arguments are
     provided. Returns the result of the call on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression
     `o.method(args)'.  Note that if you only pass *note PyObject *:
     39f. args, *note PyObject_CallMethodObjArgs(): 2b00. is a faster
     alternative.

 -- C Function: PyObject* PyObject_CallFunctionObjArgs
          (PyObject *callable, ..., NULL)
     Return value: New reference.

     Call a callable Python object _callable_, with a variable number of
     *note PyObject*: 39f. arguments.  The arguments are provided as a
     variable number of parameters followed by _NULL_. Returns the
     result of the call on success, or _NULL_ on failure.

     New in version 2.2.

 -- C Function: PyObject* PyObject_CallMethodObjArgs (PyObject *o,
          PyObject *name, ..., NULL)
     Return value: New reference.

     Calls a method of the object _o_, where the name of the method is
     given as a Python string object in _name_.  It is called with a
     variable number of *note PyObject*: 39f. arguments.  The arguments
     are provided as a variable number of parameters followed by
     _NULL_. Returns the result of the call on success, or _NULL_ on
     failure.

     New in version 2.2.

 -- C Function: long PyObject_Hash (PyObject *o)
     Compute and return the hash value of an object _o_.  On failure,
     return `-1'.  This is the equivalent of the Python expression
     `hash(o)'.

 -- C Function: long PyObject_HashNotImplemented (PyObject *o)
     Set a *note TypeError: 215. indicating that `type(o)' is not
     hashable and return `-1'.  This function receives special
     treatment when stored in a `tp_hash' slot, allowing a type to
     explicitly indicate to the interpreter that it is not hashable.

     New in version 2.6.

 -- C Function: int PyObject_IsTrue (PyObject *o)
     Returns `1' if the object _o_ is considered to be true, and `0'
     otherwise.  This is equivalent to the Python expression `not not
     o'.  On failure, return `-1'.

 -- C Function: int PyObject_Not (PyObject *o)
     Returns `0' if the object _o_ is considered to be true, and `1'
     otherwise.  This is equivalent to the Python expression `not o'.
     On failure, return `-1'.

 -- C Function: PyObject* PyObject_Type (PyObject *o)
     Return value: New reference.

     When _o_ is non-_NULL_, returns a type object corresponding to the
     object type of object _o_. On failure, raises *note SystemError:
     93d. and returns _NULL_.  This is equivalent to the Python
     expression `type(o)'. This function increments the reference count
     of the return value. There's really no reason to use this function
     instead of the common expression `o->ob_type', which returns a
     pointer of type *note PyTypeObject*: 29b9, except when the
     incremented reference count is needed.

 -- C Function: int PyObject_TypeCheck (PyObject *o, PyTypeObject *type)
     Return true if the object _o_ is of type _type_ or a subtype of
     _type_.  Both parameters must be non-_NULL_.

     New in version 2.2.

 -- C Function: Py_ssize_t PyObject_Length (PyObject *o)
 -- C Function: Py_ssize_t PyObject_Size (PyObject *o)
     Return the length of object _o_.  If the object _o_ provides
     either the sequence and mapping protocols, the sequence length is
     returned.  On error, `-1' is returned.  This is the equivalent to
     the Python expression `len(o)'.

     Changed in version 2.5: These functions returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyObject_GetItem (PyObject *o, PyObject *key)
     Return value: New reference.

     Return element of _o_ corresponding to the object _key_ or _NULL_
     on failure.  This is the equivalent of the Python expression
     `o[key]'.

 -- C Function: int PyObject_SetItem (PyObject *o, PyObject *key,
          PyObject *v)
     Map the object _key_ to the value _v_.  Returns `-1' on failure.
     This is the equivalent of the Python statement `o[key] = v'.

 -- C Function: int PyObject_DelItem (PyObject *o, PyObject *key)
     Delete the mapping for _key_ from _o_.  Returns `-1' on failure.
     This is the equivalent of the Python statement `del o[key]'.

 -- C Function: int PyObject_AsFileDescriptor (PyObject *o)
     Derives a file descriptor from a Python object.  If the object is
     an integer or long integer, its value is returned.  If not, the
     object's `fileno()' method is called if it exists; the method must
     return an integer or long integer, which is returned as the file
     descriptor value.  Returns `-1' on failure.

 -- C Function: PyObject* PyObject_Dir (PyObject *o)
     Return value: New reference.

     This is equivalent to the Python expression `dir(o)', returning a
     (possibly empty) list of strings appropriate for the object
     argument, or _NULL_ if there was an error.  If the argument is
     _NULL_, this is like the Python `dir()', returning the names of
     the current locals; in this case, if no execution frame is active
     then _NULL_ is returned but *note PyErr_Occurred(): 297c. will
     return false.

 -- C Function: PyObject* PyObject_GetIter (PyObject *o)
     Return value: New reference.

     This is equivalent to the Python expression `iter(o)'. It returns
     a new iterator for the object argument, or the object  itself if
     the object is already an iterator.  Raises *note TypeError: 215.
     and returns _NULL_ if the object cannot be iterated.


File: python.info,  Node: Number Protocol,  Next: Sequence Protocol,  Prev: Object Protocol,  Up: Abstract Objects Layer

7.6.2 Number Protocol
---------------------

 -- C Function: int PyNumber_Check (PyObject *o)
     Returns `1' if the object _o_ provides numeric protocols, and
     false otherwise.  This function always succeeds.

 -- C Function: PyObject* PyNumber_Add (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of adding _o1_ and _o2_, or _NULL_ on failure.
     This is the equivalent of the Python expression `o1 + o2'.

 -- C Function: PyObject* PyNumber_Subtract (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of subtracting _o2_ from _o1_, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 -
     o2'.

 -- C Function: PyObject* PyNumber_Multiply (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of multiplying _o1_ and _o2_, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 *
     o2'.

 -- C Function: PyObject* PyNumber_Divide (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of dividing _o1_ by _o2_, or _NULL_ on failure.
     This is the equivalent of the Python expression `o1 / o2'.

 -- C Function: PyObject* PyNumber_FloorDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return the floor of _o1_ divided by _o2_, or _NULL_ on failure.
     This is equivalent to the "classic" division of integers.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_TrueDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return a reasonable approximation for the mathematical value of
     _o1_ divided by _o2_, or _NULL_ on failure.  The return value is
     "approximate" because binary floating point numbers are
     approximate; it is not possible to represent all real numbers in
     base two.  This function can return a floating point value when
     passed two integers.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_Remainder (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the remainder of dividing _o1_ by _o2_, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 %
     o2'.

 -- C Function: PyObject* PyNumber_Divmod (PyObject *o1, PyObject *o2)
     Return value: New reference.

     See the built-in function *note divmod(): 72a. Returns _NULL_ on
     failure.  This is the equivalent of the Python expression
     `divmod(o1, o2)'.

 -- C Function: PyObject* PyNumber_Power (PyObject *o1, PyObject *o2,
          PyObject *o3)
     Return value: New reference.

     See the built-in function *note pow(): 4ac. Returns _NULL_ on
     failure.  This is the equivalent of the Python expression `pow(o1,
     o2, o3)', where _o3_ is optional.  If _o3_ is to be ignored, pass
     *note Py_None: 2984. in its place (passing _NULL_ for _o3_ would
     cause an illegal memory access).

 -- C Function: PyObject* PyNumber_Negative (PyObject *o)
     Return value: New reference.

     Returns the negation of _o_ on success, or _NULL_ on failure. This
     is the equivalent of the Python expression `-o'.

 -- C Function: PyObject* PyNumber_Positive (PyObject *o)
     Return value: New reference.

     Returns _o_ on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression `+o'.

 -- C Function: PyObject* PyNumber_Absolute (PyObject *o)
     Return value: New reference.

     Returns the absolute value of _o_, or _NULL_ on failure.  This is
     the equivalent of the Python expression `abs(o)'.

 -- C Function: PyObject* PyNumber_Invert (PyObject *o)
     Return value: New reference.

     Returns the bitwise negation of _o_ on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression `~o'.

 -- C Function: PyObject* PyNumber_Lshift (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of left shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `o1 << o2'.

 -- C Function: PyObject* PyNumber_Rshift (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the result of right shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `o1 >> o2'.

 -- C Function: PyObject* PyNumber_And (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the "bitwise and" of _o1_ and _o2_ on success and _NULL_
     on failure.  This is the equivalent of the Python expression `o1 &
     o2'.

 -- C Function: PyObject* PyNumber_Xor (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the "bitwise exclusive or" of _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `o1 ^ o2'.

 -- C Function: PyObject* PyNumber_Or (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Returns the "bitwise or" of _o1_ and _o2_ on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression `o1 |
     o2'.

 -- C Function: PyObject* PyNumber_InPlaceAdd (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of adding _o1_ and _o2_, or _NULL_ on failure.
     The operation is done _in-place_ when _o1_ supports it.  This is
     the equivalent of the Python statement `o1 += o2'.

 -- C Function: PyObject* PyNumber_InPlaceSubtract (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of subtracting _o2_ from _o1_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 -= o2'.

 -- C Function: PyObject* PyNumber_InPlaceMultiply (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of multiplying _o1_ and _o2_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 *= o2'.

 -- C Function: PyObject* PyNumber_InPlaceDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of dividing _o1_ by _o2_, or _NULL_ on failure.
     The operation is done _in-place_ when _o1_ supports it. This is
     the equivalent of the Python statement `o1 /= o2'.

 -- C Function: PyObject* PyNumber_InPlaceFloorDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the mathematical floor of dividing _o1_ by _o2_, or _NULL_
     on failure.  The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python statement `o1 //= o2'.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_InPlaceTrueDivide (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return a reasonable approximation for the mathematical value of
     _o1_ divided by _o2_, or _NULL_ on failure.  The return value is
     "approximate" because binary floating point numbers are
     approximate; it is not possible to represent all real numbers in
     base two.  This function can return a floating point value when
     passed two integers.  The operation is done _in-place_ when _o1_
     supports it.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_InPlaceRemainder (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the remainder of dividing _o1_ by _o2_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 %= o2'.

 -- C Function: PyObject* PyNumber_InPlacePower (PyObject *o1,
          PyObject *o2, PyObject *o3)
     Return value: New reference.

     See the built-in function *note pow(): 4ac. Returns _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 **= o2' when o3
     is *note Py_None: 2984, or an in-place variant of `pow(o1, o2,
     o3)' otherwise. If _o3_ is to be ignored, pass *note Py_None: 2984.
     in its place (passing _NULL_ for _o3_ would cause an illegal
     memory access).

 -- C Function: PyObject* PyNumber_InPlaceLshift (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of left shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement `o1
     <<= o2'.

 -- C Function: PyObject* PyNumber_InPlaceRshift (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the result of right shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement `o1
     >>= o2'.

 -- C Function: PyObject* PyNumber_InPlaceAnd (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the "bitwise and" of _o1_ and _o2_ on success and _NULL_
     on failure. The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python statement `o1 &= o2'.

 -- C Function: PyObject* PyNumber_InPlaceXor (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the "bitwise exclusive or" of _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement `o1
     ^= o2'.

 -- C Function: PyObject* PyNumber_InPlaceOr (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Returns the "bitwise or" of _o1_ and _o2_ on success, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement `o1 |= o2'.

 -- C Function: int PyNumber_Coerce (PyObject **p1, PyObject **p2)
     This function takes the addresses of two variables of type *note
     PyObject*: 39f.  If the objects pointed to by `*p1' and `*p2' have
     the same type, increment their reference count and return `0'
     (success). If the objects can be converted to a common numeric
     type, replace `*p1' and `*p2' by their converted value (with 'new'
     reference counts), and return `0'. If no conversion is possible,
     or if some other error occurs, return `-1' (failure) and don't
     increment the reference counts.  The call `PyNumber_Coerce(&o1,
     &o2)' is equivalent to the Python statement `o1, o2 = coerce(o1,
     o2)'.

 -- C Function: int PyNumber_CoerceEx (PyObject **p1, PyObject **p2)
     This function is similar to *note PyNumber_Coerce(): 2b2e, except
     that it returns `1' when the conversion is not possible and when
     no error is raised.  Reference counts are still not increased in
     this case.

 -- C Function: PyObject* PyNumber_Int (PyObject *o)
     Return value: New reference.

     Returns the _o_ converted to an integer object on success, or
     _NULL_ on failure.  If the argument is outside the integer range a
     long object will be returned instead. This is the equivalent of
     the Python expression `int(o)'.

 -- C Function: PyObject* PyNumber_Long (PyObject *o)
     Return value: New reference.

     Returns the _o_ converted to a long integer object on success, or
     _NULL_ on failure.  This is the equivalent of the Python
     expression `long(o)'.

 -- C Function: PyObject* PyNumber_Float (PyObject *o)
     Return value: New reference.

     Returns the _o_ converted to a float object on success, or _NULL_
     on failure.  This is the equivalent of the Python expression
     `float(o)'.

 -- C Function: PyObject* PyNumber_Index (PyObject *o)
     Returns the _o_ converted to a Python int or long on success or
     _NULL_ with a *note TypeError: 215. exception raised on failure.

     New in version 2.5.

 -- C Function: PyObject* PyNumber_ToBase (PyObject *n, int base)
     Returns the integer _n_ converted to _base_ as a string with a base
     marker of `'0b'', `'0o'', or `'0x'' if applicable.  When _base_ is
     not 2, 8, 10, or 16, the format is `'x#num'' where x is the base.
     If _n_ is not an int object, it is converted with *note
     PyNumber_Index(): 2b33. first.

     New in version 2.6.

 -- C Function: Py_ssize_t PyNumber_AsSsize_t (PyObject *o,
          PyObject *exc)
     Returns _o_ converted to a Py_ssize_t value if _o_ can be
     interpreted as an integer. If _o_ can be converted to a Python int
     or long but the attempt to convert to a Py_ssize_t value would
     raise an *note OverflowError: 2d8, then the _exc_ argument is the
     type of exception that will be raised (usually *note IndexError:
     4d8. or *note OverflowError: 2d8.).  If _exc_ is _NULL_, then the
     exception is cleared and the value is clipped to _PY_SSIZE_T_MIN_
     for a negative integer or _PY_SSIZE_T_MAX_ for a positive integer.

     New in version 2.5.

 -- C Function: int PyIndex_Check (PyObject *o)
     Returns True if _o_ is an index integer (has the nb_index slot of
     the tp_as_number structure filled in).

     New in version 2.5.


File: python.info,  Node: Sequence Protocol,  Next: Mapping Protocol,  Prev: Number Protocol,  Up: Abstract Objects Layer

7.6.3 Sequence Protocol
-----------------------

 -- C Function: int PySequence_Check (PyObject *o)
     Return `1' if the object provides sequence protocol, and `0'
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PySequence_Size (PyObject *o)
 -- C Function: Py_ssize_t PySequence_Length (PyObject *o)
     Returns the number of objects in sequence _o_ on success, and `-1'
     on failure.  For objects that do not provide sequence protocol,
     this is equivalent to the Python expression `len(o)'.

     Changed in version 2.5: These functions returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PySequence_Concat (PyObject *o1, PyObject *o2)
     Return value: New reference.

     Return the concatenation of _o1_ and _o2_ on success, and _NULL_
     on failure.  This is the equivalent of the Python expression `o1 +
     o2'.

 -- C Function: PyObject* PySequence_Repeat (PyObject *o,
          Py_ssize_t count)
     Return value: New reference.

     Return the result of repeating sequence object _o_ _count_ times,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression `o * count'.

     Changed in version 2.5: This function used an `int' type for
     _count_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PySequence_InPlaceConcat (PyObject *o1,
          PyObject *o2)
     Return value: New reference.

     Return the concatenation of _o1_ and _o2_ on success, and _NULL_
     on failure.  The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python expression `o1 += o2'.

 -- C Function: PyObject* PySequence_InPlaceRepeat (PyObject *o,
          Py_ssize_t count)
     Return value: New reference.

     Return the result of repeating sequence object _o_ _count_ times,
     or _NULL_ on failure.  The operation is done _in-place_ when _o_
     supports it.  This is the equivalent of the Python expression `o
     *= count'.

     Changed in version 2.5: This function used an `int' type for
     _count_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PySequence_GetItem (PyObject *o, Py_ssize_t i)
     Return value: New reference.

     Return the _i_th element of _o_, or _NULL_ on failure. This is the
     equivalent of the Python expression `o[i]'.

     Changed in version 2.5: This function used an `int' type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PySequence_GetSlice (PyObject *o,
          Py_ssize_t i1, Py_ssize_t i2)
     Return value: New reference.

     Return the slice of sequence object _o_ between _i1_ and _i2_, or
     _NULL_ on failure. This is the equivalent of the Python expression
     `o[i1:i2]'.

     Changed in version 2.5: This function used an `int' type for _i1_
     and _i2_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PySequence_SetItem (PyObject *o, Py_ssize_t i,
          PyObject *v)
     Assign object _v_ to the _i_th element of _o_.  Returns `-1' on
     failure.  This is the equivalent of the Python statement `o[i] =
     v'.  This function _does not_ steal a reference to _v_.

     Changed in version 2.5: This function used an `int' type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PySequence_DelItem (PyObject *o, Py_ssize_t i)
     Delete the _i_th element of object _o_.  Returns `-1' on failure.
     This is the equivalent of the Python statement `del o[i]'.

     Changed in version 2.5: This function used an `int' type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PySequence_SetSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2, PyObject *v)
     Assign the sequence object _v_ to the slice in sequence object _o_
     from _i1_ to _i2_.  This is the equivalent of the Python statement
     `o[i1:i2] = v'.

     Changed in version 2.5: This function used an `int' type for _i1_
     and _i2_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PySequence_DelSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2)
     Delete the slice in sequence object _o_ from _i1_ to _i2_.
     Returns `-1' on failure.  This is the equivalent of the Python
     statement `del o[i1:i2]'.

     Changed in version 2.5: This function used an `int' type for _i1_
     and _i2_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: Py_ssize_t PySequence_Count (PyObject *o,
          PyObject *value)
     Return the number of occurrences of _value_ in _o_, that is,
     return the number of keys for which `o[key] == value'.  On
     failure, return `-1'.  This is equivalent to the Python expression
     `o.count(value)'.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PySequence_Contains (PyObject *o, PyObject *value)
     Determine if _o_ contains _value_.  If an item in _o_ is equal to
     _value_, return `1', otherwise return `0'. On error, return `-1'.
     This is equivalent to the Python expression `value in o'.

 -- C Function: Py_ssize_t PySequence_Index (PyObject *o,
          PyObject *value)
     Return the first index _i_ for which `o[i] == value'.  On error,
     return `-1'.    This is equivalent to the Python expression
     `o.index(value)'.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PySequence_List (PyObject *o)
     Return value: New reference.

     Return a list object with the same contents as the arbitrary
     sequence _o_.  The returned list is guaranteed to be new.

 -- C Function: PyObject* PySequence_Tuple (PyObject *o)
     Return value: New reference.

     Return a tuple object with the same contents as the arbitrary
     sequence _o_ or _NULL_ on failure.  If _o_ is a tuple, a new
     reference will be returned, otherwise a tuple will be constructed
     with the appropriate contents.  This is equivalent to the Python
     expression `tuple(o)'.

 -- C Function: PyObject* PySequence_Fast (PyObject *o, const char *m)
     Return value: New reference.

     Returns the sequence _o_ as a tuple, unless it is already a tuple
     or list, in which case _o_ is returned.  Use *note
     PySequence_Fast_GET_ITEM(): 2b4b. to access the members of the
     result.  Returns _NULL_ on failure.  If the object is not a
     sequence, raises *note TypeError: 215. with _m_ as the message
     text.

 -- C Function: PyObject* PySequence_Fast_GET_ITEM (PyObject *o,
          Py_ssize_t i)
     Return value: Borrowed reference.

     Return the _i_th element of _o_, assuming that _o_ was returned by
     *note PySequence_Fast(): 2b4a, _o_ is not _NULL_, and that _i_ is
     within bounds.

     Changed in version 2.5: This function used an `int' type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject** PySequence_Fast_ITEMS (PyObject *o)
     Return the underlying array of PyObject pointers.  Assumes that
     _o_ was returned by *note PySequence_Fast(): 2b4a. and _o_ is not
     _NULL_.

     Note, if a list gets resized, the reallocation may relocate the
     items array.  So, only use the underlying array pointer in
     contexts where the sequence cannot change.

     New in version 2.4.

 -- C Function: PyObject* PySequence_ITEM (PyObject *o, Py_ssize_t i)
     Return value: New reference.

     Return the _i_th element of _o_ or _NULL_ on failure. Macro form of
     *note PySequence_GetItem(): 2a0c. but without checking that *note
     PySequence_Check(): 2b3a. on _o_ is true and without adjustment
     for negative indices.

     New in version 2.3.

     Changed in version 2.5: This function used an `int' type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: Py_ssize_t PySequence_Fast_GET_SIZE (PyObject *o)
     Returns the length of _o_, assuming that _o_ was returned by *note
     PySequence_Fast(): 2b4a. and that _o_ is not _NULL_.  The size can
     also be gotten by calling *note PySequence_Size(): 2b3b. on _o_,
     but *note PySequence_Fast_GET_SIZE(): 2b4e. is faster because it
     can assume _o_ is a list or tuple.


File: python.info,  Node: Mapping Protocol,  Next: Iterator Protocol,  Prev: Sequence Protocol,  Up: Abstract Objects Layer

7.6.4 Mapping Protocol
----------------------

 -- C Function: int PyMapping_Check (PyObject *o)
     Return `1' if the object provides mapping protocol, and `0'
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PyMapping_Size (PyObject *o)
 -- C Function: Py_ssize_t PyMapping_Length (PyObject *o)
     Returns the number of keys in object _o_ on success, and `-1' on
     failure.  For objects that do not provide mapping protocol, this
     is equivalent to the Python expression `len(o)'.

     Changed in version 2.5: These functions returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PyMapping_DelItemString (PyObject *o, char *key)
     Remove the mapping for object _key_ from the object _o_. Return
     `-1' on failure.  This is equivalent to the Python statement `del
     o[key]'.

 -- C Function: int PyMapping_DelItem (PyObject *o, PyObject *key)
     Remove the mapping for object _key_ from the object _o_. Return
     `-1' on failure.  This is equivalent to the Python statement `del
     o[key]'.

 -- C Function: int PyMapping_HasKeyString (PyObject *o, char *key)
     On success, return `1' if the mapping object has the key _key_ and
     `0' otherwise.  This is equivalent to `o[key]', returning `True'
     on success and `False' on an exception.  This function always
     succeeds.

 -- C Function: int PyMapping_HasKey (PyObject *o, PyObject *key)
     Return `1' if the mapping object has the key _key_ and `0'
     otherwise.  This is equivalent to `o[key]', returning `True' on
     success and `False' on an exception.  This function always
     succeeds.

 -- C Function: PyObject* PyMapping_Keys (PyObject *o)
     Return value: New reference.

     On success, return a list of the keys in object _o_.  On failure,
     return _NULL_.  This is equivalent to the Python expression
     `o.keys()'.

 -- C Function: PyObject* PyMapping_Values (PyObject *o)
     Return value: New reference.

     On success, return a list of the values in object _o_.  On
     failure, return _NULL_. This is equivalent to the Python
     expression `o.values()'.

 -- C Function: PyObject* PyMapping_Items (PyObject *o)
     Return value: New reference.

     On success, return a list of the items in object _o_, where each
     item is a tuple containing a key-value pair.  On failure, return
     _NULL_. This is equivalent to the Python expression `o.items()'.

 -- C Function: PyObject* PyMapping_GetItemString (PyObject *o,
          char *key)
     Return value: New reference.

     Return element of _o_ corresponding to the object _key_ or _NULL_
     on failure.  This is the equivalent of the Python expression
     `o[key]'.

 -- C Function: int PyMapping_SetItemString (PyObject *o, char *key,
          PyObject *v)
     Map the object _key_ to the value _v_ in object _o_. Returns `-1'
     on failure.  This is the equivalent of the Python statement
     `o[key] = v'.


File: python.info,  Node: Iterator Protocol,  Next: Old Buffer Protocol,  Prev: Mapping Protocol,  Up: Abstract Objects Layer

7.6.5 Iterator Protocol
-----------------------

New in version 2.2.

  There are only a couple of functions specifically for working with
iterators.

 -- C Function: int PyIter_Check (PyObject *o)
     Return true if the object _o_ supports the iterator protocol.

 -- C Function: PyObject* PyIter_Next (PyObject *o)
     Return value: New reference.

     Return the next value from the iteration _o_.  If the object is an
     iterator, this retrieves the next value from the iteration, and
     returns _NULL_ with no exception set if there are no remaining
     items.  If the object is not an iterator, *note TypeError: 215. is
     raised, or if there is an error in retrieving the item, returns
     _NULL_ and passes along the exception.

  To write a loop which iterates over an iterator, the C code should
look something like this:

    PyObject *iterator = PyObject_GetIter(obj);
    PyObject *item;

    if (iterator == NULL) {
        /* propagate error */
    }

    while (item = PyIter_Next(iterator)) {
        /* do something with item */
        ...
        /* release reference when done */
        Py_DECREF(item);
    }

    Py_DECREF(iterator);

    if (PyErr_Occurred()) {
        /* propagate error */
    }
    else {
        /* continue doing useful work */
    }



File: python.info,  Node: Old Buffer Protocol,  Prev: Iterator Protocol,  Up: Abstract Objects Layer

7.6.6 Old Buffer Protocol
-------------------------

This section describes the legacy buffer protocol, which has been
introduced in Python 1.6. It is still supported but deprecated in the
Python 2.x series.  Python 3 introduces a new buffer protocol which
fixes weaknesses and shortcomings of the protocol, and has been
backported to Python 2.6.  See *note Buffers and Memoryview Objects:
937. for more information.

 -- C Function: int PyObject_AsCharBuffer (PyObject *obj, const
          char **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a read-only memory location usable as
     character-based input.  The _obj_ argument must support the
     single-segment character buffer interface.  On success, returns
     `0', sets _buffer_ to the memory location and _buffer_len_ to the
     buffer length.  Returns `-1' and sets a *note TypeError: 215. on
     error.

     New in version 1.6.

     Changed in version 2.5: This function used an `int *' type for
     _buffer_len_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyObject_AsReadBuffer (PyObject *obj, const
          void **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a read-only memory location containing
     arbitrary data.  The _obj_ argument must support the
     single-segment readable buffer interface.  On success, returns
     `0', sets _buffer_ to the memory location and _buffer_len_ to the
     buffer length.  Returns `-1' and sets a *note TypeError: 215. on
     error.

     New in version 1.6.

     Changed in version 2.5: This function used an `int *' type for
     _buffer_len_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyObject_CheckReadBuffer (PyObject *o)
     Returns `1' if _o_ supports the single-segment readable buffer
     interface.  Otherwise returns `0'.

     New in version 2.2.

 -- C Function: int PyObject_AsWriteBuffer (PyObject *obj,
          void **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a writeable memory location.  The _obj_
     argument must support the single-segment, character buffer
     interface.  On success, returns `0', sets _buffer_ to the memory
     location and _buffer_len_ to the buffer length.  Returns `-1' and
     sets a *note TypeError: 215. on error.

     New in version 1.6.

     Changed in version 2.5: This function used an `int *' type for
     _buffer_len_. This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: Concrete Objects Layer,  Next: Initialization Finalization and Threads,  Prev: Abstract Objects Layer,  Up: Python/C API Reference Manual

7.7 Concrete Objects Layer
==========================

The functions in this chapter are specific to certain Python object
types.  Passing them an object of the wrong type is not a good idea; if
you receive an object from a Python program and you are not sure that
it has the right type, you must perform a type check first; for
example, to check that an object is a dictionary, use *note
PyDict_Check(): 2b6d.  The chapter is structured like the "family tree"
of Python object types.

     Warning: While the functions described in this chapter carefully
     check the type of the objects which are passed in, many of them do
     not check for _NULL_ being passed instead of a valid object.
     Allowing _NULL_ to be passed in can cause memory access violations
     and immediate termination of the interpreter.

* Menu:

* Fundamental Objects::
* Numeric Objects::
* Sequence Objects::
* Mapping Objects::
* Other Objects::

Fundamental Objects

* Type Objects: Type Objects<2>.
* The None Object::

Numeric Objects

* Plain Integer Objects::
* Boolean Objects: Boolean Objects<2>.
* Long Integer Objects::
* Floating Point Objects::
* Complex Number Objects::

Complex Number Objects

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::

Sequence Objects

* Byte Array Objects::
* String/Bytes Objects::
* Unicode Objects and Codecs::
* Buffers and Memoryview Objects::
* Tuple Objects::
* List Objects::

Byte Array Objects

* Type check macros::
* Direct API functions::
* Macros::

Unicode Objects and Codecs

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::

Buffers and Memoryview Objects

* The new-style Py_buffer struct::
* Buffer related functions::
* MemoryView objects::
* Old-style buffer objects::

Mapping Objects

* Dictionary Objects::

Other Objects

* Class and Instance Objects::
* Function Objects: Function Objects<2>.
* Method Objects: Method Objects<2>.
* File Objects: File Objects<2>.
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* Weak Reference Objects: Weak Reference Objects<2>.
* Capsules: Capsules<2>.
* CObjects::
* Cell Objects::
* Generator Objects::
* DateTime Objects: DateTime Objects<2>.
* Set Objects: Set Objects<2>.
* Code Objects: Code Objects<2>.


File: python.info,  Node: Fundamental Objects,  Next: Numeric Objects,  Up: Concrete Objects Layer

7.7.1 Fundamental Objects
-------------------------

This section describes Python type objects and the singleton object
`None'.

* Menu:

* Type Objects: Type Objects<2>.
* The None Object::


File: python.info,  Node: Type Objects<2>,  Next: The None Object,  Up: Fundamental Objects

7.7.1.1 Type Objects
....................

 -- C Type: PyTypeObject
     The C structure of the objects used to describe built-in types.

 -- C Variable: PyObject* PyType_Type
     This is the type object for type objects; it is the same object as
     `type' and `types.TypeType' in the Python layer.

 -- C Function: int PyType_Check (PyObject *o)
     Return true if the object _o_ is a type object, including
     instances of types derived from the standard type object.  Return
     false in all other cases.

 -- C Function: int PyType_CheckExact (PyObject *o)
     Return true if the object _o_ is a type object, but not a subtype
     of the standard type object.  Return false in all other cases.

     New in version 2.2.

 -- C Function: unsigned int PyType_ClearCache ()
     Clear the internal lookup cache. Return the current version tag.

     New in version 2.6.

 -- C Function: void PyType_Modified (PyTypeObject *type)
     Invalidate the internal lookup cache for the type and all of its
     subtypes.  This function must be called after any manual
     modification of the attributes or base classes of the type.

     New in version 2.6.

 -- C Function: int PyType_HasFeature (PyObject *o, int feature)
     Return true if the type object _o_ sets the feature _feature_.
     Type features are denoted by single bit flags.

 -- C Function: int PyType_IS_GC (PyObject *o)
     Return true if the type object includes support for the cycle
     detector; this tests the type flag *note Py_TPFLAGS_HAVE_GC: 29c5.

     New in version 2.0.

 -- C Function: int PyType_IsSubtype (PyTypeObject *a, PyTypeObject *b)
     Return true if _a_ is a subtype of _b_.

     New in version 2.2.

 -- C Function: PyObject* PyType_GenericAlloc (PyTypeObject *type,
          Py_ssize_t nitems)
     Return value: New reference.

     New in version 2.2.

     Changed in version 2.5: This function used an `int' type for
     _nitems_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyType_GenericNew (PyTypeObject *type,
          PyObject *args, PyObject *kwds)
     Return value: New reference.

     New in version 2.2.

 -- C Function: int PyType_Ready (PyTypeObject *type)
     Finalize a type object.  This should be called on all type objects
     to finish their initialization.  This function is responsible for
     adding inherited slots from a type's base class.  Return `0' on
     success, or return `-1' and sets an exception on error.

     New in version 2.2.


File: python.info,  Node: The None Object,  Prev: Type Objects<2>,  Up: Fundamental Objects

7.7.1.2 The None Object
.......................

Note that the *note PyTypeObject: 29b9. for `None' is not directly
exposed in the Python/C API.  Since `None' is a singleton, testing for
object identity (using `==' in C) is sufficient. There is no
`PyNone_Check()' function for the same reason.

 -- C Variable: PyObject* Py_None
     The Python `None' object, denoting lack of value.  This object has
     no methods.  It needs to be treated just like any other object
     with respect to reference counts.

 -- C Macro: Py_RETURN_NONE
     Properly handle returning *note Py_None: 2984. from within a C
     function.

     New in version 2.4.


File: python.info,  Node: Numeric Objects,  Next: Sequence Objects,  Prev: Fundamental Objects,  Up: Concrete Objects Layer

7.7.2 Numeric Objects
---------------------

* Menu:

* Plain Integer Objects::
* Boolean Objects: Boolean Objects<2>.
* Long Integer Objects::
* Floating Point Objects::
* Complex Number Objects::


File: python.info,  Node: Plain Integer Objects,  Next: Boolean Objects<2>,  Up: Numeric Objects

7.7.2.1 Plain Integer Objects
.............................

 -- C Type: PyIntObject
     This subtype of *note PyObject: 39f. represents a Python integer
     object.

 -- C Variable: PyTypeObject PyInt_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     plain integer type.  This is the same object as `int' and
     `types.IntType'.

 -- C Function: int PyInt_Check (PyObject *o)
     Return true if _o_ is of type *note PyInt_Type: 2b85. or a subtype
     of *note PyInt_Type: 2b85.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyInt_CheckExact (PyObject *o)
     Return true if _o_ is of type *note PyInt_Type: 2b85, but not a
     subtype of *note PyInt_Type: 2b85.

     New in version 2.2.

 -- C Function: PyObject* PyInt_FromString (char *str, char **pend,
          int base)
     Return value: New reference.

     Return a new *note PyIntObject: 2b84. or *note PyLongObject: 2b89.
     based on the string value in _str_, which is interpreted according
     to the radix in _base_.  If _pend_ is non-_NULL_, `*pend' will
     point to the first character in _str_ which follows the
     representation of the number.  If _base_ is `0', the radix will be
     determined based on the leading characters of _str_: if _str_
     starts with `'0x'' or `'0X'', radix 16 will be used; if _str_
     starts with `'0'', radix 8 will be used; otherwise radix 10 will
     be used.  If _base_ is not `0', it must be between `2' and `36',
     inclusive.  Leading spaces are ignored.  If there are no digits,
     *note ValueError: 233. will be raised.  If the string represents a
     number too large to be contained within the machine's `long int'
     type and overflow warnings are being suppressed, a *note
     PyLongObject: 2b89. will be returned.  If overflow warnings are
     not being suppressed, _NULL_ will be returned in this case.

 -- C Function: PyObject* PyInt_FromLong (long ival)
     Return value: New reference.

     Create a new integer object with a value of _ival_.

     The current implementation keeps an array of integer objects for
     all integers between `-5' and `256', when you create an int in
     that range you actually just get back a reference to the existing
     object. So it should be possible to change the value of `1'.  I
     suspect the behaviour of Python in this case is undefined. :-)

 -- C Function: PyObject* PyInt_FromSsize_t (Py_ssize_t ival)
     Return value: New reference.

     Create a new integer object with a value of _ival_. If the value
     is larger than `LONG_MAX' or smaller than `LONG_MIN', a long
     integer object is returned.

     New in version 2.5.

 -- C Function: PyObject* PyInt_FromSize_t (size_t ival)
     Create a new integer object with a value of _ival_. If the value
     exceeds `LONG_MAX', a long integer object is returned.

     New in version 2.5.

 -- C Function: long PyInt_AsLong (PyObject *io)
     Will first attempt to cast the object to a *note PyIntObject:
     2b84, if it is not already one, and then return its value. If
     there is an error, `-1' is returned, and the caller should check
     `PyErr_Occurred()' to find out whether there was an error, or
     whether the value just happened to be -1.

 -- C Function: long PyInt_AS_LONG (PyObject *io)
     Return the value of the object _io_.  No error checking is
     performed.

 -- C Function: unsigned long PyInt_AsUnsignedLongMask (PyObject *io)
     Will first attempt to cast the object to a *note PyIntObject:
     2b84. or *note PyLongObject: 2b89, if it is not already one, and
     then return its value as unsigned long.  This function does not
     check for overflow.

     New in version 2.3.

 -- C Function: unsigned PY_LONG_LONG PyInt_AsUnsignedLongLongMask
          (PyObject *io)
     Will first attempt to cast the object to a *note PyIntObject:
     2b84. or *note PyLongObject: 2b89, if it is not already one, and
     then return its value as unsigned long long, without checking for
     overflow.

     New in version 2.3.

 -- C Function: Py_ssize_t PyInt_AsSsize_t (PyObject *io)
     Will first attempt to cast the object to a *note PyIntObject:
     2b84. or *note PyLongObject: 2b89, if it is not already one, and
     then return its value as `Py_ssize_t'.

     New in version 2.5.

 -- C Function: long PyInt_GetMax ()
     Return the system's idea of the largest integer it can handle
     (`LONG_MAX', as defined in the system header files).

 -- C Function: int PyInt_ClearFreeList ()
     Clear the integer free list. Return the number of items that could
     not be freed.

     New in version 2.6.


File: python.info,  Node: Boolean Objects<2>,  Next: Long Integer Objects,  Prev: Plain Integer Objects,  Up: Numeric Objects

7.7.2.2 Boolean Objects
.......................

Booleans in Python are implemented as a subclass of integers.  There
are only two booleans, `Py_False' and `Py_True'.  As such, the normal
creation and deletion functions don't apply to booleans.  The following
macros are available, however.

 -- C Function: int PyBool_Check (PyObject *o)
     Return true if _o_ is of type `PyBool_Type'.

     New in version 2.3.

 -- C Variable: PyObject* Py_False
     The Python `False' object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Variable: PyObject* Py_True
     The Python `True' object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Macro: Py_RETURN_FALSE
     Return `Py_False' from a function, properly incrementing its
     reference count.

     New in version 2.4.

 -- C Macro: Py_RETURN_TRUE
     Return `Py_True' from a function, properly incrementing its
     reference count.

     New in version 2.4.

 -- C Function: PyObject* PyBool_FromLong (long v)
     Return value: New reference.

     Return a new reference to `Py_True' or `Py_False' depending on the
     truth value of _v_.

     New in version 2.3.


File: python.info,  Node: Long Integer Objects,  Next: Floating Point Objects,  Prev: Boolean Objects<2>,  Up: Numeric Objects

7.7.2.3 Long Integer Objects
............................

 -- C Type: PyLongObject
     This subtype of *note PyObject: 39f. represents a Python long
     integer object.

 -- C Variable: PyTypeObject PyLong_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     long integer type.  This is the same object as `long' and
     `types.LongType'.

 -- C Function: int PyLong_Check (PyObject *p)
     Return true if its argument is a *note PyLongObject: 2b89. or a
     subtype of *note PyLongObject: 2b89.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyLong_CheckExact (PyObject *p)
     Return true if its argument is a *note PyLongObject: 2b89, but not
     a subtype of *note PyLongObject: 2b89.

     New in version 2.2.

 -- C Function: PyObject* PyLong_FromLong (long v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from _v_, or _NULL_
     on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLong (unsigned long v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from a C `unsigned
     long', or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from a C
     `Py_ssize_t', or _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromSize_t (size_t v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from a C `size_t', or
     _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)
     Return a new *note PyLongObject: 2b89. object with a value of _v_,
     or _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromSize_t (size_t v)
     Return a new *note PyLongObject: 2b89. object with a value of _v_,
     or _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromLongLong (PY_LONG_LONG v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from a C `long
     long', or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLongLong (unsigned
          PY_LONG_LONG v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from a C `unsigned
     long long', or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromDouble (double v)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. object from the integer
     part of _v_, or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromString (char *str, char **pend,
          int base)
     Return value: New reference.

     Return a new *note PyLongObject: 2b89. based on the string value
     in _str_, which is interpreted according to the radix in _base_.
     If _pend_ is non-_NULL_, _*pend_ will point to the first character
     in _str_ which follows the representation of the number.  If
     _base_ is `0', the radix will be determined based on the leading
     characters of _str_: if _str_ starts with `'0x'' or `'0X'', radix
     16 will be used; if _str_ starts with `'0'', radix 8 will be used;
     otherwise radix 10 will be used.  If _base_ is not `0', it must be
     between `2' and `36', inclusive.  Leading spaces are ignored.  If
     there are no digits, *note ValueError: 233. will be raised.

 -- C Function: PyObject* PyLong_FromUnicode (Py_UNICODE *u,
          Py_ssize_t length, int base)
     Return value: New reference.

     Convert a sequence of Unicode digits to a Python long integer
     value.  The first parameter, _u_, points to the first character of
     the Unicode string, _length_ gives the number of characters, and
     _base_ is the radix for the conversion.  The radix must be in the
     range [2, 36]; if it is out of range, *note ValueError: 233.  will
     be raised.

     New in version 1.6.

     Changed in version 2.5: This function used an `int' for _length_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyLong_FromVoidPtr (void *p)
     Return value: New reference.

     Create a Python integer or long integer from the pointer _p_. The
     pointer value can be retrieved from the resulting value using
     *note PyLong_AsVoidPtr(): 2baa.

     New in version 1.5.2.

     Changed in version 2.5: If the integer is larger than LONG_MAX, a
     positive long integer is returned.

 -- C Function: long PyLong_AsLong (PyObject *pylong)
     Return a C `long' representation of the contents of _pylong_.  If
     _pylong_ is greater than `LONG_MAX', an *note OverflowError: 2d8.
     is raised and `-1' will be returned.

 -- C Function: long PyLong_AsLongAndOverflow (PyObject *pylong,
          int *overflow)
     Return a C `long' representation of the contents of _pylong_.  If
     _pylong_ is greater than `LONG_MAX' or less than `LONG_MIN', set
     _*overflow_ to `1' or `-1', respectively, and return `-1';
     otherwise, set _*overflow_ to `0'.  If any other exception occurs
     (for example a TypeError or MemoryError), then `-1' will be
     returned and _*overflow_ will be `0'.

     New in version 2.7.

 -- C Function: PY_LONG_LONG PyLong_AsLongLongAndOverflow
          (PyObject *pylong, int *overflow)
     Return a C `long long' representation of the contents of _pylong_.
     If _pylong_ is greater than `PY_LLONG_MAX' or less than
     `PY_LLONG_MIN', set _*overflow_ to `1' or `-1', respectively, and
     return `-1'; otherwise, set _*overflow_ to `0'.  If any other
     exception occurs (for example a TypeError or MemoryError), then
     `-1' will be returned and _*overflow_ will be `0'.

     New in version 2.7.

 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)
     Return a C `Py_ssize_t' representation of the contents of
     _pylong_.  If _pylong_ is greater than `PY_SSIZE_T_MAX', an *note
     OverflowError: 2d8. is raised and `-1' will be returned.

     New in version 2.6.

 -- C Function: unsigned long PyLong_AsUnsignedLong (PyObject *pylong)
     Return a C `unsigned long' representation of the contents of
     _pylong_.  If _pylong_ is greater than `ULONG_MAX', an *note
     OverflowError: 2d8. is raised.

 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)
     Return a `Py_ssize_t' representation of the contents of _pylong_.
     If _pylong_ is greater than `PY_SSIZE_T_MAX', an *note
     OverflowError: 2d8. is raised.

     New in version 2.6.

 -- C Function: PY_LONG_LONG PyLong_AsLongLong (PyObject *pylong)
     Return a C `long long' from a Python long integer.  If _pylong_
     cannot be represented as a `long long', an *note OverflowError:
     2d8. is raised and `-1' is returned.

     New in version 2.2.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLong
          (PyObject *pylong)
     Return a C `unsigned long long' from a Python long integer. If
     _pylong_ cannot be represented as an `unsigned long long', an
     *note OverflowError: 2d8. is raised and `(unsigned long long)-1' is
     returned.

     New in version 2.2.

     Changed in version 2.7: A negative _pylong_ now raises *note
     OverflowError: 2d8, not *note TypeError: 215.

 -- C Function: unsigned long PyLong_AsUnsignedLongMask (PyObject *io)
     Return a C `unsigned long' from a Python long integer, without
     checking for overflow.

     New in version 2.3.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLongMask
          (PyObject *io)
     Return a C `unsigned long long' from a Python long integer, without
     checking for overflow.

     New in version 2.3.

 -- C Function: double PyLong_AsDouble (PyObject *pylong)
     Return a C `double' representation of the contents of _pylong_.  If
     _pylong_ cannot be approximately represented as a `double', an
     *note OverflowError: 2d8. exception is raised and `-1.0' will be
     returned.

 -- C Function: void* PyLong_AsVoidPtr (PyObject *pylong)
     Convert a Python integer or long integer _pylong_ to a C `void'
     pointer.  If _pylong_ cannot be converted, an *note OverflowError:
     2d8. will be raised.  This is only assured to produce a usable
     `void' pointer for values created with *note PyLong_FromVoidPtr():
     2ba9.

     New in version 1.5.2.

     Changed in version 2.5: For values outside 0..LONG_MAX, both
     signed and unsigned integers are accepted.


File: python.info,  Node: Floating Point Objects,  Next: Complex Number Objects,  Prev: Long Integer Objects,  Up: Numeric Objects

7.7.2.4 Floating Point Objects
..............................

 -- C Type: PyFloatObject
     This subtype of *note PyObject: 39f. represents a Python floating
     point object.

 -- C Variable: PyTypeObject PyFloat_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     floating point type.  This is the same object as `float' and
     `types.FloatType'.

 -- C Function: int PyFloat_Check (PyObject *p)
     Return true if its argument is a *note PyFloatObject: 2bb6. or a
     subtype of *note PyFloatObject: 2bb6.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyFloat_CheckExact (PyObject *p)
     Return true if its argument is a *note PyFloatObject: 2bb6, but
     not a subtype of *note PyFloatObject: 2bb6.

     New in version 2.2.

 -- C Function: PyObject* PyFloat_FromString (PyObject *str,
          char **pend)
     Return value: New reference.

     Create a *note PyFloatObject: 2bb6. object based on the string
     value in _str_, or _NULL_ on failure.  The _pend_ argument is
     ignored.  It remains only for backward compatibility.

 -- C Function: PyObject* PyFloat_FromDouble (double v)
     Return value: New reference.

     Create a *note PyFloatObject: 2bb6. object from _v_, or _NULL_ on
     failure.

 -- C Function: double PyFloat_AsDouble (PyObject *pyfloat)
     Return a C `double' representation of the contents of _pyfloat_.
     If _pyfloat_ is not a Python floating point object but has a *note
     __float__(): 747.  method, this method will first be called to
     convert _pyfloat_ into a float.  This method returns `-1.0' upon
     failure, so one should call *note PyErr_Occurred(): 297c. to check
     for errors.

 -- C Function: double PyFloat_AS_DOUBLE (PyObject *pyfloat)
     Return a C `double' representation of the contents of _pyfloat_,
     but without error checking.

 -- C Function: PyObject* PyFloat_GetInfo (void)
     Return a structseq instance which contains information about the
     precision, minimum and maximum values of a float. It's a thin
     wrapper around the header file `float.h'.

     New in version 2.6.

 -- C Function: double PyFloat_GetMax ()
     Return the maximum representable finite float _DBL_MAX_ as C
     `double'.

     New in version 2.6.

 -- C Function: double PyFloat_GetMin ()
     Return the minimum normalized positive float _DBL_MIN_ as C
     `double'.

     New in version 2.6.

 -- C Function: int PyFloat_ClearFreeList ()
     Clear the float free list. Return the number of items that could
     not be freed.

     New in version 2.6.

 -- C Function: void PyFloat_AsString (char *buf, PyFloatObject *v)
     Convert the argument _v_ to a string, using the same rules as
     *note str(): 1e7. The length of _buf_ should be at least 100.

     This function is unsafe to call because it writes to a buffer whose
     length it does not know.

     Deprecated since version 2.7: Use `PyObject_Str()' or
     `PyOS_double_to_string()' instead.

 -- C Function: void PyFloat_AsReprString (char *buf, PyFloatObject *v)
     Same as PyFloat_AsString, except uses the same rules as *note
     repr(): 145.  The length of _buf_ should be at least 100.

     This function is unsafe to call because it writes to a buffer whose
     length it does not know.

     Deprecated since version 2.7: Use `PyObject_Repr()' or
     `PyOS_double_to_string()' instead.


File: python.info,  Node: Complex Number Objects,  Prev: Floating Point Objects,  Up: Numeric Objects

7.7.2.5 Complex Number Objects
..............................

Python's complex number objects are implemented as two distinct types
when viewed from the C API:  one is the Python object exposed to Python
programs, and the other is a C structure which represents the actual
complex number value.  The API provides functions for working with both.

* Menu:

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::


File: python.info,  Node: Complex Numbers as C Structures,  Next: Complex Numbers as Python Objects,  Up: Complex Number Objects

7.7.2.6 Complex Numbers as C Structures
.......................................

Note that the functions which accept these structures as parameters and
return them as results do so _by value_ rather than dereferencing them
through pointers.  This is consistent throughout the API.

 -- C Type: Py_complex
     The C structure which corresponds to the value portion of a Python
     complex number object.  Most of the functions for dealing with
     complex number objects use structures of this type as input or
     output values, as appropriate.  It is defined as:

         typedef struct {
            double real;
            double imag;
         } Py_complex;



 -- C Function: Py_complex _Py_c_sum (Py_complex left, Py_complex right)
     Return the sum of two complex numbers, using the C *note
     Py_complex: 2abc.  representation.

 -- C Function: Py_complex _Py_c_diff (Py_complex left,
          Py_complex right)
     Return the difference between two complex numbers, using the C
     *note Py_complex: 2abc. representation.

 -- C Function: Py_complex _Py_c_neg (Py_complex complex)
     Return the negation of the complex number _complex_, using the C
     *note Py_complex: 2abc. representation.

 -- C Function: Py_complex _Py_c_prod (Py_complex left,
          Py_complex right)
     Return the product of two complex numbers, using the C *note
     Py_complex: 2abc.  representation.

 -- C Function: Py_complex _Py_c_quot (Py_complex dividend,
          Py_complex divisor)
     Return the quotient of two complex numbers, using the C *note
     Py_complex: 2abc.  representation.

     If _divisor_ is null, this method returns zero and sets `errno' to
     `EDOM'.

 -- C Function: Py_complex _Py_c_pow (Py_complex num, Py_complex exp)
     Return the exponentiation of _num_ by _exp_, using the C *note
     Py_complex: 2abc.  representation.

     If _num_ is null and _exp_ is not a positive real number, this
     method returns zero and sets `errno' to `EDOM'.


File: python.info,  Node: Complex Numbers as Python Objects,  Prev: Complex Numbers as C Structures,  Up: Complex Number Objects

7.7.2.7 Complex Numbers as Python Objects
.........................................

 -- C Type: PyComplexObject
     This subtype of *note PyObject: 39f. represents a Python complex
     number object.

 -- C Variable: PyTypeObject PyComplex_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     complex number type. It is the same object as `complex' and
     `types.ComplexType'.

 -- C Function: int PyComplex_Check (PyObject *p)
     Return true if its argument is a *note PyComplexObject: 2bcc. or a
     subtype of *note PyComplexObject: 2bcc.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyComplex_CheckExact (PyObject *p)
     Return true if its argument is a *note PyComplexObject: 2bcc, but
     not a subtype of *note PyComplexObject: 2bcc.

     New in version 2.2.

 -- C Function: PyObject* PyComplex_FromCComplex (Py_complex v)
     Return value: New reference.

     Create a new Python complex number object from a C *note
     Py_complex: 2abc. value.

 -- C Function: PyObject* PyComplex_FromDoubles (double real,
          double imag)
     Return value: New reference.

     Return a new *note PyComplexObject: 2bcc. object from _real_ and
     _imag_.

 -- C Function: double PyComplex_RealAsDouble (PyObject *op)
     Return the real part of _op_ as a C `double'.

 -- C Function: double PyComplex_ImagAsDouble (PyObject *op)
     Return the imaginary part of _op_ as a C `double'.

 -- C Function: Py_complex PyComplex_AsCComplex (PyObject *op)
     Return the *note Py_complex: 2abc. value of the complex number
     _op_.  Upon failure, this method returns `-1.0' as a real value.

     Changed in version 2.6: If _op_ is not a Python complex number
     object but has a *note __complex__(): 2e0.  method, this method
     will first be called to convert _op_ to a Python complex number
     object.


File: python.info,  Node: Sequence Objects,  Next: Mapping Objects,  Prev: Numeric Objects,  Up: Concrete Objects Layer

7.7.3 Sequence Objects
----------------------

Generic operations on sequence objects were discussed in the previous
chapter; this section deals with the specific kinds of sequence objects
that are intrinsic to the Python language.

* Menu:

* Byte Array Objects::
* String/Bytes Objects::
* Unicode Objects and Codecs::
* Buffers and Memoryview Objects::
* Tuple Objects::
* List Objects::

Byte Array Objects

* Type check macros::
* Direct API functions::
* Macros::

Unicode Objects and Codecs

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::

Buffers and Memoryview Objects

* The new-style Py_buffer struct::
* Buffer related functions::
* MemoryView objects::
* Old-style buffer objects::


File: python.info,  Node: Byte Array Objects,  Next: String/Bytes Objects,  Up: Sequence Objects

7.7.3.1 Byte Array Objects
..........................

New in version 2.6.

 -- C Type: PyByteArrayObject
     This subtype of *note PyObject: 39f. represents a Python bytearray
     object.

 -- C Variable: PyTypeObject PyByteArray_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     bytearray type; it is the same object as `bytearray' in the Python
     layer.

* Menu:

* Type check macros::
* Direct API functions::
* Macros::


File: python.info,  Node: Type check macros,  Next: Direct API functions,  Up: Byte Array Objects

7.7.3.2 Type check macros
.........................

 -- C Function: int PyByteArray_Check (PyObject *o)
     Return true if the object _o_ is a bytearray object or an instance
     of a subtype of the bytearray type.

 -- C Function: int PyByteArray_CheckExact (PyObject *o)
     Return true if the object _o_ is a bytearray object, but not an
     instance of a subtype of the bytearray type.


File: python.info,  Node: Direct API functions,  Next: Macros,  Prev: Type check macros,  Up: Byte Array Objects

7.7.3.3 Direct API functions
............................

 -- C Function: PyObject* PyByteArray_FromObject (PyObject *o)
     Return a new bytearray object from any object, _o_, that
     implements the buffer protocol.


 -- C Function: PyObject* PyByteArray_FromStringAndSize (const
          char *string, Py_ssize_t len)
     Create a new bytearray object from _string_ and its length, _len_.
     On failure, _NULL_ is returned.

 -- C Function: PyObject* PyByteArray_Concat (PyObject *a, PyObject *b)
     Concat bytearrays _a_ and _b_ and return a new bytearray with the
     result.

 -- C Function: Py_ssize_t PyByteArray_Size (PyObject *bytearray)
     Return the size of _bytearray_ after checking for a _NULL_ pointer.

 -- C Function: char* PyByteArray_AsString (PyObject *bytearray)
     Return the contents of _bytearray_ as a char array after checking
     for a _NULL_ pointer.

 -- C Function: int PyByteArray_Resize (PyObject *bytearray,
          Py_ssize_t len)
     Resize the internal buffer of _bytearray_ to _len_.


File: python.info,  Node: Macros,  Prev: Direct API functions,  Up: Byte Array Objects

7.7.3.4 Macros
..............

These macros trade safety for speed and they don't check pointers.

 -- C Function: char* PyByteArray_AS_STRING (PyObject *bytearray)
     Macro version of *note PyByteArray_AsString(): 2be1.

 -- C Function: Py_ssize_t PyByteArray_GET_SIZE (PyObject *bytearray)
     Macro version of *note PyByteArray_Size(): 2be0.


File: python.info,  Node: String/Bytes Objects,  Next: Unicode Objects and Codecs,  Prev: Byte Array Objects,  Up: Sequence Objects

7.7.3.5 String/Bytes Objects
............................

These functions raise *note TypeError: 215. when expecting a string
parameter and are called with a non-string parameter.

     Note: These functions have been renamed to PyBytes_* in Python
     3.x. Unless otherwise noted, the PyBytes functions available in
     3.x are aliased to their PyString_* equivalents to help porting.

 -- C Type: PyStringObject
     This subtype of *note PyObject: 39f. represents a Python string
     object.

 -- C Variable: PyTypeObject PyString_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     string type; it is the same object as `str' and `types.StringType'
     in the Python layer. .

 -- C Function: int PyString_Check (PyObject *o)
     Return true if the object _o_ is a string object or an instance of
     a subtype of the string type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyString_CheckExact (PyObject *o)
     Return true if the object _o_ is a string object, but not an
     instance of a subtype of the string type.

     New in version 2.2.

 -- C Function: PyObject* PyString_FromString (const char *v)
     Return value: New reference.

     Return a new string object with a copy of the string _v_ as value
     on success, and _NULL_ on failure.  The parameter _v_ must not be
     _NULL_; it will not be checked.

 -- C Function: PyObject* PyString_FromStringAndSize (const char *v,
          Py_ssize_t len)
     Return value: New reference.

     Return a new string object with a copy of the string _v_ as value
     and length _len_ on success, and _NULL_ on failure.  If _v_ is
     _NULL_, the contents of the string are uninitialized.

     Changed in version 2.5: This function used an `int' type for
     _len_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_FromFormat (const char *format, ...)
     Return value: New reference.

     Take a C `printf()'-style _format_ string and a variable number of
     arguments, calculate the size of the resulting Python string and
     return a string with the values formatted into it.  The variable
     arguments must be C types and must correspond exactly to the
     format characters in the _format_ string.  The following format
     characters are allowed:

     Format Characters       Type                Comment
     --------------------------------------------------------------------------------- 
     `%%'                    _n/a_               The literal % character.
     `%c'                    int                 A single character, represented as
                                                 an C int.
     `%d'                    int                 Exactly equivalent to
                                                 `printf("%d")'.
     `%u'                    unsigned int        Exactly equivalent to
                                                 `printf("%u")'.
     `%ld'                   long                Exactly equivalent to
                                                 `printf("%ld")'.
     `%lu'                   unsigned long       Exactly equivalent to
                                                 `printf("%lu")'.
     `%lld'                  long long           Exactly equivalent to
                                                 `printf("%lld")'.
     `%llu'                  unsigned long long  Exactly equivalent to
                                                 `printf("%llu")'.
     `%zd'                   Py_ssize_t          Exactly equivalent to
                                                 `printf("%zd")'.
     `%zu'                   size_t              Exactly equivalent to
                                                 `printf("%zu")'.
     `%i'                    int                 Exactly equivalent to
                                                 `printf("%i")'.
     `%x'                    int                 Exactly equivalent to
                                                 `printf("%x")'.
     `%s'                    char*               A null-terminated C character array.
     `%p'                    void*               The hex representation of a C
                                                 pointer. Mostly equivalent to
                                                 `printf("%p")' except that it is
                                                 guaranteed to start with the
                                                 literal `0x' regardless of what the
                                                 platform's `printf' yields.

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

          Note: The `"%lld"' and `"%llu"' format specifiers are only
          available when `HAVE_LONG_LONG' is defined.

     Changed in version 2.7: Support for `"%lld"' and `"%llu"' added.

 -- C Function: PyObject* PyString_FromFormatV (const char *format,
          va_list vargs)
     Return value: New reference.

     Identical to *note PyString_FromFormat(): 2a4b. except that it
     takes exactly two arguments.

 -- C Function: Py_ssize_t PyString_Size (PyObject *string)
     Return the length of the string in string object _string_.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyString_GET_SIZE (PyObject *string)
     Macro form of *note PyString_Size(): 2bee. but without error
     checking.

     Changed in version 2.5: This macro returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: char* PyString_AsString (PyObject *string)
     Return a NUL-terminated representation of the contents of
     _string_.  The pointer refers to the internal buffer of _string_,
     not a copy.  The data must not be modified in any way, unless the
     string was just created using `PyString_FromStringAndSize(NULL,
     size)'. It must not be deallocated.  If _string_ is a Unicode
     object, this function computes the default encoding of _string_
     and operates on that.  If _string_ is not a string object at all,
     *note PyString_AsString(): 2bf0. returns _NULL_ and raises *note
     TypeError: 215.

 -- C Function: char* PyString_AS_STRING (PyObject *string)
     Macro form of *note PyString_AsString(): 2bf0. but without error
     checking.  Only string objects are supported; no Unicode objects
     should be passed.

 -- C Function: int PyString_AsStringAndSize (PyObject *obj,
          char **buffer, Py_ssize_t *length)
     Return a NUL-terminated representation of the contents of the
     object _obj_ through the output variables _buffer_ and _length_.

     The function accepts both string and Unicode objects as input. For
     Unicode objects it returns the default encoded version of the
     object.  If _length_ is _NULL_, the resulting buffer may not
     contain NUL characters; if it does, the function returns `-1' and
     a *note TypeError: 215. is raised.

     The buffer refers to an internal string buffer of _obj_, not a
     copy. The data must not be modified in any way, unless the string
     was just created using `PyString_FromStringAndSize(NULL, size)'.
     It must not be deallocated.  If _string_ is a Unicode object, this
     function computes the default encoding of _string_ and operates on
     that.  If _string_ is not a string object at all, *note
     PyString_AsStringAndSize(): 2bf2. returns `-1' and raises *note
     TypeError: 215.

     Changed in version 2.5: This function used an `int *' type for
     _length_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: void PyString_Concat (PyObject **string,
          PyObject *newpart)
     Create a new string object in _*string_ containing the contents of
     _newpart_ appended to _string_; the caller will own the new
     reference.  The reference to the old value of _string_ will be
     stolen.  If the new string cannot be created, the old reference to
     _string_ will still be discarded and the value of _*string_ will
     be set to _NULL_; the appropriate exception will be set.

 -- C Function: void PyString_ConcatAndDel (PyObject **string,
          PyObject *newpart)
     Create a new string object in _*string_ containing the contents of
     _newpart_ appended to _string_.  This version decrements the
     reference count of _newpart_.

 -- C Function: int _PyString_Resize (PyObject **string,
          Py_ssize_t newsize)
     A way to resize a string object even though it is "immutable".
     Only use this to build up a brand new string object; don't use
     this if the string may already be known in other parts of the
     code.  It is an error to call this function if the refcount on the
     input string object is not one. Pass the address of an existing
     string object as an lvalue (it may be written into), and the new
     size desired.  On success, _*string_ holds the resized string
     object and `0' is returned; the address in _*string_ may differ
     from its input value.  If the reallocation fails, the original
     string object at _*string_ is deallocated, _*string_ is set to
     _NULL_, a memory exception is set, and `-1' is returned.

     Changed in version 2.5: This function used an `int' type for
     _newsize_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_Format (PyObject *format,
          PyObject *args)
     Return value: New reference.

     Return a new string object from _format_ and _args_. Analogous to
     `format % args'.  The _args_ argument must be a tuple.

 -- C Function: void PyString_InternInPlace (PyObject **string)
     Intern the argument _*string_ in place.  The argument must be the
     address of a pointer variable pointing to a Python string object.
     If there is an existing interned string that is the same as
     _*string_, it sets _*string_ to it (decrementing the reference
     count of the old string object and incrementing the reference
     count of the interned string object), otherwise it leaves _*string_
     alone and interns it (incrementing its reference count).
     (Clarification: even though there is a lot of talk about reference
     counts, think of this function as reference-count-neutral; you own
     the object after the call if and only if you owned it before the
     call.)

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_InternFromString (const char *v)
     Return value: New reference.

     A combination of *note PyString_FromString(): 29f4. and *note
     PyString_InternInPlace(): 2bf7, returning either a new string
     object that has been interned, or a new ("owned") reference to an
     earlier interned string object with the same value.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     Return value: New reference.

     Create an object by decoding _size_ bytes of the encoded buffer
     _s_ using the codec registered for _encoding_.  _encoding_ and
     _errors_ have the same meaning as the parameters of the same name
     in the *note unicode(): 1f2. built-in function.  The codec to be
     used is looked up using the Python codec registry.  Return _NULL_
     if an exception was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_AsDecodedObject (PyObject *str,
          const char *encoding, const char *errors)
     Return value: New reference.

     Decode a string object by passing it to the codec registered for
     _encoding_ and return the result as Python object. _encoding_ and
     _errors_ have the same meaning as the parameters of the same name
     in the string `encode()' method.  The codec to be used is looked
     up using the Python codec registry. Return _NULL_ if an exception
     was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_Encode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     Return value: New reference.

     Encode the `char' buffer of the given size by passing it to the
     codec registered for _encoding_ and return a Python object.
     _encoding_ and _errors_ have the same meaning as the parameters of
     the same name in the string `encode()' method. The codec to be
     used is looked up using the Python codec registry.  Return _NULL_
     if an exception was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_AsEncodedObject (PyObject *str,
          const char *encoding, const char *errors)
     Return value: New reference.

     Encode a string object using the codec registered for _encoding_
     and return the result as Python object. _encoding_ and _errors_
     have the same meaning as the parameters of the same name in the
     string `encode()' method. The codec to be used is looked up using
     the Python codec registry. Return _NULL_ if an exception was
     raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.


File: python.info,  Node: Unicode Objects and Codecs,  Next: Buffers and Memoryview Objects,  Prev: String/Bytes Objects,  Up: Sequence Objects

7.7.3.6 Unicode Objects and Codecs
..................................

* Menu:

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::

Unicode Objects

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* wchar_t Support::

Built-in Codecs

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::


File: python.info,  Node: Unicode Objects,  Next: Built-in Codecs,  Up: Unicode Objects and Codecs

7.7.3.7 Unicode Objects
.......................

* Menu:

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* wchar_t Support::


File: python.info,  Node: Unicode Type,  Next: Unicode Character Properties,  Up: Unicode Objects

7.7.3.8 Unicode Type
....................

These are the basic Unicode object types used for the Unicode
implementation in Python:

 -- C Type: Py_UNICODE
     This type represents the storage type which is used by Python
     internally as basis for holding Unicode ordinals.  Python's
     default builds use a 16-bit type for *note Py_UNICODE: a76. and
     store Unicode values internally as UCS2. It is also possible to
     build a UCS4 version of Python (most recent Linux distributions
     come with UCS4 builds of Python). These builds then use a 32-bit
     type for *note Py_UNICODE: a76. and store Unicode data internally
     as UCS4. On platforms where `wchar_t' is available and compatible
     with the chosen Python Unicode build variant, *note Py_UNICODE:
     a76. is a typedef alias for `wchar_t' to enhance native platform
     compatibility. On all other platforms, *note Py_UNICODE: a76. is a
     typedef alias for either `unsigned short' (UCS2) or `unsigned
     long' (UCS4).

  Note that UCS2 and UCS4 Python builds are not binary compatible.
Please keep this in mind when writing extensions or interfaces.

 -- C Type: PyUnicodeObject
     This subtype of *note PyObject: 39f. represents a Python Unicode
     object.

 -- C Variable: PyTypeObject PyUnicode_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     Unicode type.  It is exposed to Python code as `unicode' and
     `types.UnicodeType'.

  The following APIs are really C macros and can be used to do fast
checks and to access internal read-only data of Unicode objects:

 -- C Function: int PyUnicode_Check (PyObject *o)
     Return true if the object _o_ is a Unicode object or an instance
     of a Unicode subtype.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyUnicode_CheckExact (PyObject *o)
     Return true if the object _o_ is a Unicode object, but not an
     instance of a subtype.

     New in version 2.2.

 -- C Function: Py_ssize_t PyUnicode_GET_SIZE (PyObject *o)
     Return the size of the object.  _o_ has to be a *note
     PyUnicodeObject: 2c02. (not checked).

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyUnicode_GET_DATA_SIZE (PyObject *o)
     Return the size of the object's internal buffer in bytes.  _o_ has
     to be a *note PyUnicodeObject: 2c02. (not checked).

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_UNICODE* PyUnicode_AS_UNICODE (PyObject *o)
     Return a pointer to the internal *note Py_UNICODE: a76. buffer of
     the object.  _o_ has to be a *note PyUnicodeObject: 2c02. (not
     checked).

 -- C Function: const char* PyUnicode_AS_DATA (PyObject *o)
     Return a pointer to the internal buffer of the object. _o_ has to
     be a *note PyUnicodeObject: 2c02. (not checked).

 -- C Function: int PyUnicode_ClearFreeList ()
     Clear the free list. Return the total number of freed items.

     New in version 2.6.


File: python.info,  Node: Unicode Character Properties,  Next: Plain Py_UNICODE,  Prev: Unicode Type,  Up: Unicode Objects

7.7.3.9 Unicode Character Properties
....................................

Unicode provides many different character properties. The most often
needed ones are available through these macros which are mapped to C
functions depending on the Python configuration.

 -- C Function: int Py_UNICODE_ISSPACE (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a whitespace character.

 -- C Function: int Py_UNICODE_ISLOWER (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a lowercase character.

 -- C Function: int Py_UNICODE_ISUPPER (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is an uppercase character.

 -- C Function: int Py_UNICODE_ISTITLE (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a titlecase character.

 -- C Function: int Py_UNICODE_ISLINEBREAK (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a linebreak character.

 -- C Function: int Py_UNICODE_ISDECIMAL (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a decimal character.

 -- C Function: int Py_UNICODE_ISDIGIT (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a digit character.

 -- C Function: int Py_UNICODE_ISNUMERIC (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is a numeric character.

 -- C Function: int Py_UNICODE_ISALPHA (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is an alphabetic character.

 -- C Function: int Py_UNICODE_ISALNUM (Py_UNICODE ch)
     Return 1 or 0 depending on whether _ch_ is an alphanumeric
     character.

  These APIs can be used for fast direct character conversions:

 -- C Function: Py_UNICODE Py_UNICODE_TOLOWER (Py_UNICODE ch)
     Return the character _ch_ converted to lower case.

 -- C Function: Py_UNICODE Py_UNICODE_TOUPPER (Py_UNICODE ch)
     Return the character _ch_ converted to upper case.

 -- C Function: Py_UNICODE Py_UNICODE_TOTITLE (Py_UNICODE ch)
     Return the character _ch_ converted to title case.

 -- C Function: int Py_UNICODE_TODECIMAL (Py_UNICODE ch)
     Return the character _ch_ converted to a decimal positive integer.
     Return `-1' if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: int Py_UNICODE_TODIGIT (Py_UNICODE ch)
     Return the character _ch_ converted to a single digit integer.
     Return `-1' if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: double Py_UNICODE_TONUMERIC (Py_UNICODE ch)
     Return the character _ch_ converted to a double. Return `-1.0' if
     this is not possible.  This macro does not raise exceptions.


File: python.info,  Node: Plain Py_UNICODE,  Next: wchar_t Support,  Prev: Unicode Character Properties,  Up: Unicode Objects

7.7.3.10 Plain Py_UNICODE
.........................

To create Unicode objects and access their basic sequence properties,
use these APIs:

 -- C Function: PyObject* PyUnicode_FromUnicode (const Py_UNICODE *u,
          Py_ssize_t size)
     Return value: New reference.

     Create a Unicode object from the Py_UNICODE buffer _u_ of the
     given size. _u_ may be _NULL_ which causes the contents to be
     undefined. It is the user's responsibility to fill in the needed
     data.  The buffer is copied into the new object. If the buffer is
     not _NULL_, the return value might be a shared object.  Therefore,
     modification of the resulting Unicode object is only allowed when
     _u_ is _NULL_.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_FromStringAndSize (const char *u,
          Py_ssize_t size)
     Return value: New reference.

     Create a Unicode object from the char buffer _u_.  The bytes will
     be interpreted as being UTF-8 encoded.  _u_ may also be _NULL_
     which causes the contents to be undefined. It is the user's
     responsibility to fill in the needed data.  The buffer is copied
     into the new object. If the buffer is not _NULL_, the return value
     might be a shared object. Therefore, modification of the resulting
     Unicode object is only allowed when _u_ is _NULL_.

     New in version 2.6.

 -- C Function: PyObject *PyUnicode_FromString (const char *u)
     Return value: New reference.

     Create a Unicode object from an UTF-8 encoded null-terminated char
     buffer _u_.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_FromFormat (const char *format, ...)
     Return value: New reference.

     Take a C `printf()'-style _format_ string and a variable number of
     arguments, calculate the size of the resulting Python unicode
     string and return a string with the values formatted into it.  The
     variable arguments must be C types and must correspond exactly to
     the format characters in the _format_ string.  The following
     format characters are allowed:

     Format Characters       Type                      Comment
     --------------------------------------------------------------------------------------- 
     `%%'                    _n/a_                     The literal % character.
     `%c'                    int                       A single character, represented as
                                                       an C int.
     `%d'                    int                       Exactly equivalent to
                                                       `printf("%d")'.
     `%u'                    unsigned int              Exactly equivalent to
                                                       `printf("%u")'.
     `%ld'                   long                      Exactly equivalent to
                                                       `printf("%ld")'.
     `%lu'                   unsigned long             Exactly equivalent to
                                                       `printf("%lu")'.
     `%zd'                   Py_ssize_t                Exactly equivalent to
                                                       `printf("%zd")'.
     `%zu'                   size_t                    Exactly equivalent to
                                                       `printf("%zu")'.
     `%i'                    int                       Exactly equivalent to
                                                       `printf("%i")'.
     `%x'                    int                       Exactly equivalent to
                                                       `printf("%x")'.
     `%s'                    char*                     A null-terminated C character array.
     `%p'                    void*                     The hex representation of a C
                                                       pointer. Mostly equivalent to
                                                       `printf("%p")' except that it is
                                                       guaranteed to start with the
                                                       literal `0x' regardless of what the
                                                       platform's `printf' yields.
     `%U'                    PyObject*                 A unicode object.
     `%V'                    PyObject*, char *         A unicode object (which may be
                                                       _NULL_) and a null-terminated C
                                                       character array as a second
                                                       parameter (which will be used, if
                                                       the first parameter is _NULL_).
     `%S'                    PyObject*                 The result of calling
                                                       `PyObject_Unicode()'.
     `%R'                    PyObject*                 The result of calling
                                                       `PyObject_Repr()'.

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_FromFormatV (const char *format,
          va_list vargs)
     Return value: New reference.

     Identical to `PyUnicode_FromFormat()' except that it takes exactly
     two arguments.

     New in version 2.6.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicode (PyObject *unicode)
     Return a read-only pointer to the Unicode object's internal *note
     Py_UNICODE: a76. buffer, _NULL_ if _unicode_ is not a Unicode
     object.  Note that the resulting *note Py_UNICODE*: a76. string
     may contain embedded null characters, which would cause the string
     to be truncated when used in most C functions.

 -- C Function: Py_ssize_t PyUnicode_GetSize (PyObject *unicode)
     Return the length of the Unicode object.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PyUnicode_FromEncodedObject (PyObject *obj,
          const char *encoding, const char *errors)
     Return value: New reference.

     Coerce an encoded object _obj_ to an Unicode object and return a
     reference with incremented refcount.

     String and other char buffer compatible objects are decoded
     according to the given encoding and using the error handling
     defined by errors.  Both can be _NULL_ to have the interface use
     the default values (see the next section for details).

     All other objects, including Unicode objects, cause a *note
     TypeError: 215. to be set.

     The API returns _NULL_ if there was an error.  The caller is
     responsible for decref'ing the returned objects.

 -- C Function: PyObject* PyUnicode_FromObject (PyObject *obj)
     Return value: New reference.

     Shortcut for `PyUnicode_FromEncodedObject(obj, NULL, "strict")'
     which is used throughout the interpreter whenever coercion to
     Unicode is needed.

  If the platform supports `wchar_t' and provides a header file wchar.h,
Python can interface directly to this type using the following
functions.  Support is optimized if Python's own *note Py_UNICODE: a76.
type is identical to the system's `wchar_t'.


File: python.info,  Node: wchar_t Support,  Prev: Plain Py_UNICODE,  Up: Unicode Objects

7.7.3.11 wchar_t Support
........................

`wchar_t' support for platforms which support it:

 -- C Function: PyObject* PyUnicode_FromWideChar (const wchar_t *w,
          Py_ssize_t size)
     Return value: New reference.

     Create a Unicode object from the `wchar_t' buffer _w_ of the given
     _size_.  Return _NULL_ on failure.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: Py_ssize_t PyUnicode_AsWideChar
          (PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)
     Copy the Unicode object contents into the `wchar_t' buffer _w_.
     At most _size_ `wchar_t' characters are copied (excluding a
     possibly trailing 0-termination character).  Return the number of
     `wchar_t' characters copied or -1 in case of an error.  Note that
     the resulting `wchar_t' string may or may not be 0-terminated.  It
     is the responsibility of the caller to make sure that the
     `wchar_t' string is 0-terminated in case this is required by the
     application. Also, note that the `wchar_t*' string might contain
     null characters, which would cause the string to be truncated when
     used with most C functions.

     Changed in version 2.5: This function returned an `int' type and
     used an `int' type for _size_. This might require changes in your
     code for properly supporting 64-bit systems.


File: python.info,  Node: Built-in Codecs,  Next: Methods and Slot Functions,  Prev: Unicode Objects,  Up: Unicode Objects and Codecs

7.7.3.12 Built-in Codecs
........................

Python provides a set of built-in codecs which are written in C for
speed. All of these codecs are directly usable via the following
functions.

  Many of the following APIs take two arguments encoding and errors,
and they have the same semantics as the ones of the built-in *note
unicode(): 1f2. Unicode object constructor.

  Setting encoding to _NULL_ causes the default encoding to be used
which is ASCII.  The file system calls should use
`Py_FileSystemDefaultEncoding' as the encoding for file names. This
variable should be treated as read-only: on some systems, it will be a
pointer to a static string, on others, it will change at run-time (such
as when the application invokes setlocale).

  Error handling is set by errors which may also be set to _NULL_
meaning to use the default handling defined for the codec.  Default
error handling for all built-in codecs is "strict" (*note ValueError:
233. is raised).

  The codecs all use a similar interface.  Only deviation from the
following generic ones are documented for simplicity.

* Menu:

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::


File: python.info,  Node: Generic Codecs,  Next: UTF-8 Codecs,  Up: Built-in Codecs

7.7.3.13 Generic Codecs
.......................

These are the generic codec APIs:

 -- C Function: PyObject* PyUnicode_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the encoded
     string _s_.  _encoding_ and _errors_ have the same meaning as the
     parameters of the same name in the *note unicode(): 1f2. built-in
     function.  The codec to be used is looked up using the Python
     codec registry.  Return _NULL_ if an exception was raised by the
     codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_Encode (const Py_UNICODE *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer _s_ of the given _size_
     and return a Python string object.  _encoding_ and _errors_ have
     the same meaning as the parameters of the same name in the Unicode
     `encode()' method.  The codec to be used is looked up using the
     Python codec registry.  Return _NULL_ if an exception was raised
     by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsEncodedString (PyObject *unicode,
          const char *encoding, const char *errors)
     Return value: New reference.

     Encode a Unicode object and return the result as Python string
     object.  _encoding_ and _errors_ have the same meaning as the
     parameters of the same name in the Unicode `encode()' method. The
     codec to be used is looked up using the Python codec registry.
     Return _NULL_ if an exception was raised by the codec.


File: python.info,  Node: UTF-8 Codecs,  Next: UTF-32 Codecs,  Prev: Generic Codecs,  Up: Built-in Codecs

7.7.3.14 UTF-8 Codecs
.....................

These are the UTF-8 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF8 (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the UTF-8
     encoded string _s_. Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_DecodeUTF8Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     Return value: New reference.

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF8():
     2c30. If _consumed_ is not _NULL_, trailing incomplete UTF-8 byte
     sequences will not be treated as an error. Those bytes will not be
     decoded and the number of bytes that have been decoded will be
     stored in _consumed_.

     New in version 2.4.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeUTF8 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer _s_ of the given _size_
     using UTF-8 and return a Python string object.  Return _NULL_ if
     an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsUTF8String (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using UTF-8 and return the result as
     Python string object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python.info,  Node: UTF-32 Codecs,  Next: UTF-16 Codecs,  Prev: UTF-8 Codecs,  Up: Built-in Codecs

7.7.3.15 UTF-32 Codecs
......................

These are the UTF-32 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF32 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     Decode _size_ bytes from a UTF-32 encoded buffer string and return
     the corresponding Unicode object.  _errors_ (if non-_NULL_)
     defines the error handling. It defaults to "strict".

     If _byteorder_ is non-_NULL_, the decoder starts decoding using
     the given byte order:

         *byteorder == -1: little endian
         *byteorder == 0:  native order
         *byteorder == 1:  big endian

     If `*byteorder' is zero, and the first four bytes of the input
     data are a byte order mark (BOM), the decoder switches to this
     byte order and the BOM is not copied into the resulting Unicode
     string.  If `*byteorder' is `-1' or `1', any byte order mark is
     copied to the output.

     After completion, _*byteorder_ is set to the current byte order at
     the end of input data.

     In a narrow build codepoints outside the BMP will be decoded as
     surrogate pairs.

     If _byteorder_ is _NULL_, the codec starts in native order mode.

     Return _NULL_ if an exception was raised by the codec.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_DecodeUTF32Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     If _consumed_ is _NULL_, behave like *note
     PyUnicode_DecodeUTF32(): 2c35. If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeUTF32Stateful(): 2c36. will not treat trailing
     incomplete UTF-32 byte sequences (such as a number of bytes not
     divisible by four) as an error. Those bytes will not be decoded
     and the number of bytes that have been decoded will be stored in
     _consumed_.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_EncodeUTF32 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     Return a Python bytes object holding the UTF-32 encoded value of
     the Unicode data in _s_.  Output is written according to the
     following byte order:

         byteorder == -1: little endian
         byteorder == 0:  native byte order (writes a BOM mark)
         byteorder == 1:  big endian

     If byteorder is `0', the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If _Py_UNICODE_WIDE_ is not defined, surrogate pairs will be output
     as a single codepoint.

     Return _NULL_ if an exception was raised by the codec.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_AsUTF32String (PyObject *unicode)
     Return a Python string using the UTF-32 encoding in native byte
     order. The string always starts with a BOM mark.  Error handling
     is "strict".  Return _NULL_ if an exception was raised by the
     codec.

     New in version 2.6.


File: python.info,  Node: UTF-16 Codecs,  Next: UTF-7 Codecs,  Prev: UTF-32 Codecs,  Up: Built-in Codecs

7.7.3.16 UTF-16 Codecs
......................

These are the UTF-16 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF16 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     Return value: New reference.

     Decode _size_ bytes from a UTF-16 encoded buffer string and return
     the corresponding Unicode object.  _errors_ (if non-_NULL_)
     defines the error handling. It defaults to "strict".

     If _byteorder_ is non-_NULL_, the decoder starts decoding using
     the given byte order:

         *byteorder == -1: little endian
         *byteorder == 0:  native order
         *byteorder == 1:  big endian

     If `*byteorder' is zero, and the first two bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If `*byteorder' is `-1' or `1', any byte order mark is copied to
     the output (where it will result in either a `\ufeff' or a
     `\ufffe' character).

     After completion, _*byteorder_ is set to the current byte order at
     the end of input data.

     If _byteorder_ is _NULL_, the codec starts in native order mode.

     Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_DecodeUTF16Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     Return value: New reference.

     If _consumed_ is _NULL_, behave like *note
     PyUnicode_DecodeUTF16(): 2c3a. If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeUTF16Stateful(): 2c3b. will not treat trailing
     incomplete UTF-16 byte sequences (such as an odd number of bytes
     or a split surrogate pair) as an error. Those bytes will not be
     decoded and the number of bytes that have been decoded will be
     stored in _consumed_.

     New in version 2.4.

     Changed in version 2.5: This function used an `int' type for
     _size_ and an `int *' type for _consumed_. This might require
     changes in your code for properly supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeUTF16 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     Return value: New reference.

     Return a Python string object holding the UTF-16 encoded value of
     the Unicode data in _s_.  Output is written according to the
     following byte order:

         byteorder == -1: little endian
         byteorder == 0:  native byte order (writes a BOM mark)
         byteorder == 1:  big endian

     If byteorder is `0', the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If _Py_UNICODE_WIDE_ is defined, a single *note Py_UNICODE: a76.
     value may get represented as a surrogate pair. If it is not
     defined, each *note Py_UNICODE: a76.  values is interpreted as an
     UCS-2 character.

     Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsUTF16String (PyObject *unicode)
     Return value: New reference.

     Return a Python string using the UTF-16 encoding in native byte
     order. The string always starts with a BOM mark.  Error handling
     is "strict".  Return _NULL_ if an exception was raised by the
     codec.


File: python.info,  Node: UTF-7 Codecs,  Next: Unicode-Escape Codecs,  Prev: UTF-16 Codecs,  Up: Built-in Codecs

7.7.3.17 UTF-7 Codecs
.....................

These are the UTF-7 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF7 (const char *s,
          Py_ssize_t size, const char *errors)
     Create a Unicode object by decoding _size_ bytes of the UTF-7
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF7Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF7():
     2c3f.  If _consumed_ is not _NULL_, trailing incomplete UTF-7
     base-64 sections will not be treated as an error.  Those bytes
     will not be decoded and the number of bytes that have been decoded
     will be stored in _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeUTF7 (const Py_UNICODE *s,
          Py_ssize_t size, int base64SetO, int base64WhiteSpace, const
          char *errors)
     Encode the *note Py_UNICODE: a76. buffer of the given size using
     UTF-7 and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

     If _base64SetO_ is nonzero, "Set O" (punctuation that has no
     otherwise special meaning) will be encoded in base-64.  If
     _base64WhiteSpace_ is nonzero, whitespace will be encoded in
     base-64.  Both are set to zero for the Python "utf-7" codec.


File: python.info,  Node: Unicode-Escape Codecs,  Next: Raw-Unicode-Escape Codecs,  Prev: UTF-7 Codecs,  Up: Built-in Codecs

7.7.3.18 Unicode-Escape Codecs
..............................

These are the "Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUnicodeEscape (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the
     Unicode-Escape encoded string _s_.  Return _NULL_ if an exception
     was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer of the given _size_ using
     Unicode-Escape and return a Python string object.  Return _NULL_
     if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsUnicodeEscapeString
          (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using Unicode-Escape and return the result
     as Python string object.  Error handling is "strict". Return
     _NULL_ if an exception was raised by the codec.


File: python.info,  Node: Raw-Unicode-Escape Codecs,  Next: Latin-1 Codecs,  Prev: Unicode-Escape Codecs,  Up: Built-in Codecs

7.7.3.19 Raw-Unicode-Escape Codecs
..................................

These are the "Raw Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeRawUnicodeEscape (const
          char *s, Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the
     Raw-Unicode-Escape encoded string _s_.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeRawUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer of the given _size_ using
     Raw-Unicode-Escape and return a Python string object.  Return
     _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsRawUnicodeEscapeString
          (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using Raw-Unicode-Escape and return the
     result as Python string object. Error handling is "strict". Return
     _NULL_ if an exception was raised by the codec.


File: python.info,  Node: Latin-1 Codecs,  Next: ASCII Codecs,  Prev: Raw-Unicode-Escape Codecs,  Up: Built-in Codecs

7.7.3.20 Latin-1 Codecs
.......................

These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256
Unicode ordinals and only these are accepted by the codecs during
encoding.

 -- C Function: PyObject* PyUnicode_DecodeLatin1 (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the Latin-1
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeLatin1 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer of the given _size_ using
     Latin-1 and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsLatin1String (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using Latin-1 and return the result as
     Python string object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python.info,  Node: ASCII Codecs,  Next: Character Map Codecs,  Prev: Latin-1 Codecs,  Up: Built-in Codecs

7.7.3.21 ASCII Codecs
.....................

These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All
other codes generate errors.

 -- C Function: PyObject* PyUnicode_DecodeASCII (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the ASCII
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeASCII (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer of the given _size_ using
     ASCII and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsASCIIString (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using ASCII and return the result as
     Python string object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python.info,  Node: Character Map Codecs,  Next: MBCS codecs for Windows,  Prev: ASCII Codecs,  Up: Built-in Codecs

7.7.3.22 Character Map Codecs
.............................

This codec is special in that it can be used to implement many
different codecs (and this is in fact what was done to obtain most of
the standard codecs included in the `encodings' package). The codec
uses mapping to encode and decode characters.

  Decoding mappings must map single string characters to single Unicode
characters, integers (which are then interpreted as Unicode ordinals)
or None (meaning "undefined mapping" and causing an error).

  Encoding mappings must map single Unicode characters to single string
characters, integers (which are then interpreted as Latin-1 ordinals)
or None (meaning "undefined mapping" and causing an error).

  The mapping objects provided must only support the __getitem__ mapping
interface.

  If a character lookup fails with a LookupError, the character is
copied as-is meaning that its ordinal value will be interpreted as
Unicode or Latin-1 ordinal resp. Because of this, mappings only need to
contain those mappings which map characters to different code points.

  These are the mapping codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeCharmap (const char *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the encoded
     string _s_ using the given _mapping_ object.  Return _NULL_ if an
     exception was raised by the codec. If _mapping_ is _NULL_ latin-1
     decoding will be done. Else it can be a dictionary mapping byte or
     a unicode string, which is treated as a lookup table.  Byte values
     greater that the length of the string and U+FFFE "characters" are
     treated as "undefined mapping".

     Changed in version 2.4: Allowed unicode string as mapping argument.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeCharmap (const Py_UNICODE *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer of the given _size_ using
     the given _mapping_ object and return a Python string object.
     Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsCharmapString (PyObject *unicode,
          PyObject *mapping)
     Return value: New reference.

     Encode a Unicode object using the given _mapping_ object and
     return the result as Python string object.  Error handling is
     "strict".  Return _NULL_ if an exception was raised by the codec.

  The following codec API is special in that maps Unicode to Unicode.

 -- C Function: PyObject* PyUnicode_TranslateCharmap (const
          Py_UNICODE *s, Py_ssize_t size, PyObject *table, const
          char *errors)
     Return value: New reference.

     Translate a *note Py_UNICODE: a76. buffer of the given _size_ by
     applying a character mapping _table_ to it and return the
     resulting Unicode object.  Return _NULL_ when an exception was
     raised by the codec.

     The _mapping_ table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the *note __getitem__(): 448.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *note LookupError: 879.)
     are left untouched and are copied as-is.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: MBCS codecs for Windows,  Next: Methods & Slots,  Prev: Character Map Codecs,  Up: Built-in Codecs

7.7.3.23 MBCS codecs for Windows
................................

These are the MBCS codec APIs. They are currently only available on
Windows and use the Win32 MBCS converters to implement the conversions.
Note that MBCS (or DBCS) is a class of encodings, not just one.  The
target encoding is defined by the user settings on the machine running
the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCS (const char *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the MBCS
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_DecodeMBCSStateful (const char *s,
          int size, const char *errors, int *consumed)
     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeMBCS():
     2c58. If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeMBCSStateful(): 2c59. will not decode trailing
     lead byte and the number of bytes that have been decoded will be
     stored in _consumed_.

     New in version 2.5.

 -- C Function: PyObject* PyUnicode_EncodeMBCS (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     Return value: New reference.

     Encode the *note Py_UNICODE: a76. buffer of the given _size_ using
     MBCS and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsMBCSString (PyObject *unicode)
     Return value: New reference.

     Encode a Unicode object using MBCS and return the result as Python
     string object.  Error handling is "strict".  Return _NULL_ if an
     exception was raised by the codec.


File: python.info,  Node: Methods & Slots,  Prev: MBCS codecs for Windows,  Up: Built-in Codecs

7.7.3.24 Methods & Slots
........................


File: python.info,  Node: Methods and Slot Functions,  Prev: Built-in Codecs,  Up: Unicode Objects and Codecs

7.7.3.25 Methods and Slot Functions
...................................

The following APIs are capable of handling Unicode objects and strings
on input (we refer to them as strings in the descriptions) and return
Unicode objects or integers as appropriate.

  They all return _NULL_ or `-1' if an exception occurs.

 -- C Function: PyObject* PyUnicode_Concat (PyObject *left,
          PyObject *right)
     Return value: New reference.

     Concat two strings giving a new Unicode string.

 -- C Function: PyObject* PyUnicode_Split (PyObject *s, PyObject *sep,
          Py_ssize_t maxsplit)
     Return value: New reference.

     Split a string giving a list of Unicode strings.  If _sep_ is
     _NULL_, splitting will be done at all whitespace substrings.
     Otherwise, splits occur at the given separator.  At most
     _maxsplit_ splits will be done.  If negative, no limit is set.
     Separators are not included in the resulting list.

     Changed in version 2.5: This function used an `int' type for
     _maxsplit_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_Splitlines (PyObject *s,
          int keepend)
     Return value: New reference.

     Split a Unicode string at line breaks, returning a list of Unicode
     strings.  CRLF is considered to be one line break.  If _keepend_
     is 0, the Line break characters are not included in the resulting
     strings.

 -- C Function: PyObject* PyUnicode_Translate (PyObject *str,
          PyObject *table, const char *errors)
     Return value: New reference.

     Translate a string by applying a character mapping table to it and
     return the resulting Unicode object.

     The mapping table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the *note __getitem__(): 448.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *note LookupError: 879.)
     are left untouched and are copied as-is.

     _errors_ has the usual meaning for codecs. It may be _NULL_ which
     indicates to use the default error handling.

 -- C Function: PyObject* PyUnicode_Join (PyObject *separator,
          PyObject *seq)
     Return value: New reference.

     Join a sequence of strings using the given _separator_ and return
     the resulting Unicode string.

 -- C Function: int PyUnicode_Tailmatch (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)
     Return 1 if _substr_ matches `str[start:end]' at the given tail end
     (_direction_ == -1 means to do a prefix match, _direction_ == 1 a
     suffix match), 0 otherwise. Return `-1' if an error occurred.

     Changed in version 2.5: This function used an `int' type for
     _start_ and _end_. This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: Py_ssize_t PyUnicode_Find (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)
     Return the first position of _substr_ in `str[start:end]' using
     the given _direction_ (_direction_ == 1 means to do a forward
     search, _direction_ == -1 a backward search).  The return value is
     the index of the first match; a value of `-1' indicates that no
     match was found, and `-2' indicates that an error occurred and an
     exception has been set.

     Changed in version 2.5: This function used an `int' type for
     _start_ and _end_. This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: Py_ssize_t PyUnicode_Count (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end)
     Return the number of non-overlapping occurrences of _substr_ in
     `str[start:end]'.  Return `-1' if an error occurred.

     Changed in version 2.5: This function returned an `int' type and
     used an `int' type for _start_ and _end_. This might require
     changes in your code for properly supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_Replace (PyObject *str,
          PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)
     Return value: New reference.

     Replace at most _maxcount_ occurrences of _substr_ in _str_ with
     _replstr_ and return the resulting Unicode object. _maxcount_ ==
     -1 means replace all occurrences.

     Changed in version 2.5: This function used an `int' type for
     _maxcount_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyUnicode_Compare (PyObject *left, PyObject *right)
     Compare two strings and return -1, 0, 1 for less than, equal, and
     greater than, respectively.

 -- C Function: int PyUnicode_RichCompare (PyObject *left,
          PyObject *right, int op)
     Rich compare two unicode strings and return one of the following:

        * `NULL' in case an exception was raised

        * `Py_True' or `Py_False' for successful comparisons

        * `Py_NotImplemented' in case the type combination is unknown

     Note that `Py_EQ' and `Py_NE' comparisons can cause a *note
     UnicodeWarning: 94c. in case the conversion of the arguments to
     Unicode fails with a *note UnicodeDecodeError: 945.

     Possible values for _op_ are `Py_GT', `Py_GE', `Py_EQ', `Py_NE',
     `Py_LT', and `Py_LE'.

 -- C Function: PyObject* PyUnicode_Format (PyObject *format,
          PyObject *args)
     Return value: New reference.

     Return a new string object from _format_ and _args_; this is
     analogous to `format % args'.  The _args_ argument must be a tuple.

 -- C Function: int PyUnicode_Contains (PyObject *container,
          PyObject *element)
     Check whether _element_ is contained in _container_ and return
     true or false accordingly.

     _element_ has to coerce to a one element Unicode string. `-1' is
     returned if there was an error.


File: python.info,  Node: Buffers and Memoryview Objects,  Next: Tuple Objects,  Prev: Unicode Objects and Codecs,  Up: Sequence Objects

7.7.3.26 Buffers and Memoryview Objects
.......................................

Python objects implemented in C can export a group of functions called
the "buffer interface."  These functions can be used by an object to
expose its data in a raw, byte-oriented format. Clients of the object
can use the buffer interface to access the object data directly,
without needing to copy it first.

  Two examples of objects that support the buffer interface are strings
and arrays. The string object exposes the character contents in the
buffer interface's byte-oriented form. An array can also expose its
contents, but it should be noted that array elements may be multi-byte
values.

  An example user of the buffer interface is the file object's `write()'
method. Any object that can export a series of bytes through the buffer
interface can be written to a file. There are a number of format codes
to *note PyArg_ParseTuple(): 314. that operate against an object's
buffer interface, returning data from the target object.

  Starting from version 1.6, Python has been providing Python-level
buffer objects and a C-level buffer API so that any built-in or
used-defined type can expose its characteristics. Both, however, have
been deprecated because of various shortcomings, and have been
officially removed in Python 3 in favour of a new C-level buffer API
and a new Python-level object named *note memoryview: 1c0.

  The new buffer API has been backported to Python 2.6, and the *note
memoryview: 1c0. object has been backported to Python 2.7. It is
strongly advised to use them rather than the old APIs, unless you are
blocked from doing so for compatibility reasons.

* Menu:

* The new-style Py_buffer struct::
* Buffer related functions::
* MemoryView objects::
* Old-style buffer objects::


File: python.info,  Node: The new-style Py_buffer struct,  Next: Buffer related functions,  Up: Buffers and Memoryview Objects

7.7.3.27 The new-style Py_buffer struct
.......................................

 -- C Type: Py_buffer
      -- C Member: void *buf
          A pointer to the start of the memory for the object.

      -- C Member: Py_ssize_t len
          The total length of the memory in bytes.

      -- C Member: int readonly
          An indicator of whether the buffer is read only.

      -- C Member: const char *format
          A _NULL_ terminated string in *note struct: 166. module style
          syntax giving the contents of the elements available through
          the buffer.  If this is _NULL_, `"B"' (unsigned bytes) is
          assumed.

      -- C Member: int ndim
          The number of dimensions the memory represents as a
          multi-dimensional array.  If it is 0, `strides' and
          `suboffsets' must be _NULL_.

      -- C Member: Py_ssize_t *shape
          An array of `Py_ssize_t's the length of `ndim' giving the
          shape of the memory as a multi-dimensional array.  Note that
          `((*shape)[0] * ... * (*shape)[ndims-1])*itemsize' should be
          equal to `len'.

      -- C Member: Py_ssize_t *strides
          An array of `Py_ssize_t's the length of `ndim' giving the
          number of bytes to skip to get to a new element in each
          dimension.

      -- C Member: Py_ssize_t *suboffsets
          An array of `Py_ssize_t's the length of `ndim'.  If these
          suboffset numbers are greater than or equal to 0, then the
          value stored along the indicated dimension is a pointer and
          the suboffset value dictates how many bytes to add to the
          pointer after de-referencing. A suboffset value that it
          negative indicates that no de-referencing should occur
          (striding in a contiguous memory block).

          Here is a function that returns a pointer to the element in
          an N-D array pointed to by an N-dimesional index when there
          are both non-NULL strides and suboffsets:

              void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,
                  Py_ssize_t *suboffsets, Py_ssize_t *indices) {
                  char *pointer = (char*)buf;
                  int i;
                  for (i = 0; i < ndim; i++) {
                      pointer += strides[i] * indices[i];
                      if (suboffsets[i] >=0 ) {
                          pointer = *((char**)pointer) + suboffsets[i];
                      }
                  }
                  return (void*)pointer;
               }



      -- C Member: Py_ssize_t itemsize
          This is a storage for the itemsize (in bytes) of each element
          of the shared memory. It is technically un-necessary as it
          can be obtained using *note PyBuffer_SizeFromFormat(): 2c77,
          however an exporter may know this information without parsing
          the format string and it is necessary to know the itemsize
          for proper interpretation of striding. Therefore, storing it
          is more convenient and faster.

      -- C Member: void *internal
          This is for use internally by the exporting object. For
          example, this might be re-cast as an integer by the exporter
          and used to store flags about whether or not the shape,
          strides, and suboffsets arrays must be freed when the buffer
          is released. The consumer should never alter this value.


File: python.info,  Node: Buffer related functions,  Next: MemoryView objects,  Prev: The new-style Py_buffer struct,  Up: Buffers and Memoryview Objects

7.7.3.28 Buffer related functions
.................................

 -- C Function: int PyObject_CheckBuffer (PyObject *obj)
     Return 1 if _obj_ supports the buffer interface otherwise 0.

 -- C Function: int PyObject_GetBuffer (PyObject *obj, Py_buffer *view,
          int flags)
     Export _obj_ into a *note Py_buffer: 2c6f, _view_.  These
     arguments must never be _NULL_.  The _flags_ argument is a bit
     field indicating what kind of buffer the caller is prepared to
     deal with and therefore what kind of buffer the exporter is
     allowed to return.  The buffer interface allows for complicated
     memory sharing possibilities, but some caller may not be able to
     handle all the complexity but may want to see if the exporter will
     let them take a simpler view to its memory.

     Some exporters may not be able to share memory in every possible
     way and may need to raise errors to signal to some consumers that
     something is just not possible. These errors should be a *note
     BufferError: 936. unless there is another error that is actually
     causing the problem. The exporter can use flags information to
     simplify how much of the *note Py_buffer: 2c6f. structure is
     filled in with non-default values and/or raise an error if the
     object can't support a simpler view of its memory.

     0 is returned on success and -1 on error.

     The following table gives possible values to the _flags_ arguments.

     Flag                                Description
     -------------------------------------------------------------------------------------------- 
     `PyBUF_SIMPLE'                      This is the default flag state.  The returned buffer
                                         may or may not have writable memory.  The format of
                                         the data will be assumed to be unsigned bytes.  This
                                         is a "stand-alone" flag constant. It never needs to be
                                         '|'d to the others. The exporter will raise an error
                                         if it cannot provide such a contiguous buffer of bytes.
     `PyBUF_WRITABLE'                    The returned buffer must be writable.  If it is not
                                         writable, then raise an error.
     `PyBUF_STRIDES'                     This implies `PyBUF_ND'. The returned buffer must
                                         provide strides information (i.e. the strides cannot
                                         be NULL). This would be used when the consumer can
                                         handle strided, discontiguous arrays.  Handling
                                         strides automatically assumes you can handle shape.
                                         The exporter can raise an error if a strided
                                         representation of the data is not possible (i.e.
                                         without the suboffsets).
     `PyBUF_ND'                          The returned buffer must provide shape information.
                                         The memory will be assumed C-style contiguous (last
                                         dimension varies the fastest). The exporter may raise
                                         an error if it cannot provide this kind of contiguous
                                         buffer. If this is not given then shape will be _NULL_.
     `PyBUF_C_CONTIGUOUS'                These flags indicate that the contiguity returned
     `PyBUF_F_CONTIGUOUS'                buffer must be respectively, C-contiguous (last
     `PyBUF_ANY_CONTIGUOUS'              dimension varies the fastest), Fortran contiguous
                                         (first dimension varies the fastest) or either one.
                                         All of these flags imply `PyBUF_STRIDES' and guarantee
                                         that the strides buffer info structure will be filled
                                         in correctly.
     `PyBUF_INDIRECT'                    This flag indicates the returned buffer must have
                                         suboffsets information (which can be NULL if no
                                         suboffsets are needed).  This can be used when the
                                         consumer can handle indirect array referencing implied
                                         by these suboffsets. This implies `PyBUF_STRIDES'.
     `PyBUF_FORMAT'                      The returned buffer must have true format information
                                         if this flag is provided. This would be used when the
                                         consumer is going to be checking for what 'kind' of
                                         data is actually stored. An exporter should always be
                                         able to provide this information if requested. If
                                         format is not explicitly requested then the format
                                         must be returned as _NULL_ (which means `'B'', or
                                         unsigned bytes)
     `PyBUF_STRIDED'                     This is equivalent to `(PyBUF_STRIDES |
                                         PyBUF_WRITABLE)'.
     `PyBUF_STRIDED_RO'                  This is equivalent to `(PyBUF_STRIDES)'.
     `PyBUF_RECORDS'                     This is equivalent to `(PyBUF_STRIDES | PyBUF_FORMAT |
                                         PyBUF_WRITABLE)'.
     `PyBUF_RECORDS_RO'                  This is equivalent to `(PyBUF_STRIDES | PyBUF_FORMAT)'.
     `PyBUF_FULL'                        This is equivalent to `(PyBUF_INDIRECT | PyBUF_FORMAT
                                         | PyBUF_WRITABLE)'.
     `PyBUF_FULL_RO'                     This is equivalent to `(PyBUF_INDIRECT |
                                         PyBUF_FORMAT)'.
     `PyBUF_CONTIG'                      This is equivalent to `(PyBUF_ND | PyBUF_WRITABLE)'.
     `PyBUF_CONTIG_RO'                   This is equivalent to `(PyBUF_ND)'.


 -- C Function: void PyBuffer_Release (Py_buffer *view)
     Release the buffer _view_.  This should be called when the buffer
     is no longer being used as it may free memory from it.

 -- C Function: Py_ssize_t PyBuffer_SizeFromFormat (const char *)
     Return the implied *note itemsize: 2c76. from the struct-stype
     `format'.

 -- C Function: int PyBuffer_IsContiguous (Py_buffer *view,
          char fortran)
     Return 1 if the memory defined by the _view_ is C-style (_fortran_
     is `'C'') or Fortran-style (_fortran_ is `'F'') contiguous or
     either one (_fortran_ is `'A'').  Return 0 otherwise.

 -- C Function: void PyBuffer_FillContiguousStrides (int ndim,
          Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize,
          char fortran)
     Fill the _strides_ array with byte-strides of a contiguous
     (C-style if _fortran_ is `'C'' or Fortran-style if _fortran_ is
     `'F'') array of the given shape with the given number of bytes per
     element.

 -- C Function: int PyBuffer_FillInfo (Py_buffer *view, PyObject *obj,
          void *buf, Py_ssize_t len, int readonly, int infoflags)
     Fill in a buffer-info structure, _view_, correctly for an exporter
     that can only share a contiguous chunk of memory of "unsigned
     bytes" of the given length.  Return 0 on success and -1 (with
     raising an error) on error.


File: python.info,  Node: MemoryView objects,  Next: Old-style buffer objects,  Prev: Buffer related functions,  Up: Buffers and Memoryview Objects

7.7.3.29 MemoryView objects
...........................

New in version 2.7.

  A *note memoryview: 1c0. object exposes the new C level buffer
interface as a Python object which can then be passed around like any
other object.

 -- C Function: PyObject *PyMemoryView_FromObject (PyObject *obj)
     Create a memoryview object from an object that defines the new
     buffer interface.

 -- C Function: PyObject *PyMemoryView_FromBuffer (Py_buffer *view)
     Create a memoryview object wrapping the given buffer-info
     structure _view_.  The memoryview object then owns the buffer,
     which means you shouldn't try to release it yourself: it will be
     released on deallocation of the memoryview object.

 -- C Function: PyObject *PyMemoryView_GetContiguous (PyObject *obj,
          int buffertype, char order)
     Create a memoryview object to a contiguous chunk of memory (in
     either 'C' or 'F'ortran _order_) from an object that defines the
     buffer interface. If memory is contiguous, the memoryview object
     points to the original memory. Otherwise copy is made and the
     memoryview points to a new bytes object.

 -- C Function: int PyMemoryView_Check (PyObject *obj)
     Return true if the object _obj_ is a memoryview object.  It is not
     currently allowed to create subclasses of *note memoryview: 1c0.

 -- C Function: Py_buffer *PyMemoryView_GET_BUFFER (PyObject *obj)
     Return a pointer to the buffer-info structure wrapped by the given
     object.  The object *must* be a memoryview instance; this macro
     doesn't check its type, you must do it yourself or you will risk
     crashes.


File: python.info,  Node: Old-style buffer objects,  Prev: MemoryView objects,  Up: Buffers and Memoryview Objects

7.7.3.30 Old-style buffer objects
.................................

More information on the old buffer interface is provided in the section
*note Buffer Object Structures: 2c85, under the description for *note
PyBufferProcs: 2c86.

  A "buffer object" is defined in the `bufferobject.h' header (included
by `Python.h'). These objects look very similar to string objects at the
Python programming level: they support slicing, indexing,
concatenation, and some other standard string operations. However,
their data can come from one of two sources: from a block of memory, or
from another object which exports the buffer interface.

  Buffer objects are useful as a way to expose the data from another
object's buffer interface to the Python programmer. They can also be
used as a zero-copy slicing mechanism. Using their ability to reference
a block of memory, it is possible to expose any data to the Python
programmer quite easily. The memory could be a large, constant array in
a C extension, it could be a raw block of memory for manipulation
before passing to an operating system library, or it could be used to
pass around structured data in its native, in-memory format.

 -- C Type: PyBufferObject
     This subtype of *note PyObject: 39f. represents a buffer object.

 -- C Variable: PyTypeObject PyBuffer_Type
     The instance of *note PyTypeObject: 29b9. which represents the
     Python buffer type; it is the same object as `buffer' and
     `types.BufferType' in the Python layer. .

 -- C Variable: int Py_END_OF_BUFFER
     This constant may be passed as the _size_ parameter to *note
     PyBuffer_FromObject(): 2c8a. or *note
     PyBuffer_FromReadWriteObject(): 2c8b.  It indicates that the new
     *note PyBufferObject: 2c87. should refer to _base_ object from the
     specified _offset_ to the end of its exported buffer.  Using this
     enables the caller to avoid querying the _base_ object for its
     length.

 -- C Function: int PyBuffer_Check (PyObject *p)
     Return true if the argument has type *note PyBuffer_Type: 2c88.

 -- C Function: PyObject* PyBuffer_FromObject (PyObject *base,
          Py_ssize_t offset, Py_ssize_t size)
     Return value: New reference.

     Return a new read-only buffer object.  This raises *note
     TypeError: 215. if _base_ doesn't support the read-only buffer
     protocol or doesn't provide exactly one buffer segment, or it
     raises *note ValueError: 233. if _offset_ is less than zero.  The
     buffer will hold a reference to the _base_ object, and the
     buffer's contents will refer to the _base_ object's buffer
     interface, starting as position _offset_ and extending for _size_
     bytes. If _size_ is `Py_END_OF_BUFFER', then the new buffer's
     contents extend to the length of the _base_ object's exported
     buffer data.

     Changed in version 2.5: This function used an `int' type for
     _offset_ and _size_. This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_FromReadWriteObject (PyObject *base,
          Py_ssize_t offset, Py_ssize_t size)
     Return value: New reference.

     Return a new writable buffer object.  Parameters and exceptions
     are similar to those for *note PyBuffer_FromObject(): 2c8a.  If
     the _base_ object does not export the writeable buffer protocol,
     then *note TypeError: 215. is raised.

     Changed in version 2.5: This function used an `int' type for
     _offset_ and _size_. This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_FromMemory (void *ptr,
          Py_ssize_t size)
     Return value: New reference.

     Return a new read-only buffer object that reads from a specified
     location in memory, with a specified size.  The caller is
     responsible for ensuring that the memory buffer, passed in as
     _ptr_, is not deallocated while the returned buffer object exists.
     Raises *note ValueError: 233. if _size_ is less than zero.  Note
     that `Py_END_OF_BUFFER' may _not_ be passed for the _size_
     parameter; *note ValueError: 233. will be raised in that case.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_FromReadWriteMemory (void *ptr,
          Py_ssize_t size)
     Return value: New reference.

     Similar to *note PyBuffer_FromMemory(): 2c8d, but the returned
     buffer is writable.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_New (Py_ssize_t size)
     Return value: New reference.

     Return a new writable buffer object that maintains its own memory
     buffer of _size_ bytes.  *note ValueError: 233. is returned if
     _size_ is not zero or positive.  Note that the memory buffer (as
     returned by *note PyObject_AsWriteBuffer(): 2b69.) is not
     specifically aligned.

     Changed in version 2.5: This function used an `int' type for
     _size_. This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: Tuple Objects,  Next: List Objects,  Prev: Buffers and Memoryview Objects,  Up: Sequence Objects

7.7.3.31 Tuple Objects
......................

 -- C Type: PyTupleObject
     This subtype of *note PyObject: 39f. represents a Python tuple
     object.

 -- C Variable: PyTypeObject PyTuple_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     tuple type; it is the same object as `tuple' and `types.TupleType'
     in the Python layer..

 -- C Function: int PyTuple_Check (PyObject *p)
     Return true if _p_ is a tuple object or an instance of a subtype
     of the tuple type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyTuple_CheckExact (PyObject *p)
     Return true if _p_ is a tuple object, but not an instance of a
     subtype of the tuple type.

     New in version 2.2.

 -- C Function: PyObject* PyTuple_New (Py_ssize_t len)
     Return value: New reference.

     Return a new tuple object of size _len_, or _NULL_ on failure.

     Changed in version 2.5: This function used an `int' type for
     _len_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyTuple_Pack (Py_ssize_t n, ...)
     Return value: New reference.

     Return a new tuple object of size _n_, or _NULL_ on failure. The
     tuple values are initialized to the subsequent _n_ C arguments
     pointing to Python objects.  `PyTuple_Pack(2, a, b)' is equivalent
     to `Py_BuildValue("(OO)", a, b)'.

     New in version 2.4.

     Changed in version 2.5: This function used an `int' type for _n_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: Py_ssize_t PyTuple_Size (PyObject *p)
     Take a pointer to a tuple object, and return the size of that
     tuple.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyTuple_GET_SIZE (PyObject *p)
     Return the size of the tuple _p_, which must be non-_NULL_ and
     point to a tuple; no error checking is performed.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PyTuple_GetItem (PyObject *p, Py_ssize_t pos)
     Return value: Borrowed reference.

     Return the object at position _pos_ in the tuple pointed to by
     _p_.  If _pos_ is out of bounds, return _NULL_ and sets an *note
     IndexError: 4d8. exception.

     Changed in version 2.5: This function used an `int' type for
     _pos_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyTuple_GET_ITEM (PyObject *p, Py_ssize_t pos)
     Return value: Borrowed reference.

     Like *note PyTuple_GetItem(): 29a0, but does no checking of its
     arguments.

     Changed in version 2.5: This function used an `int' type for
     _pos_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyTuple_GetSlice (PyObject *p,
          Py_ssize_t low, Py_ssize_t high)
     Return value: New reference.

     Take a slice of the tuple pointed to by _p_ from _low_ to _high_
     and return it as a new tuple.

     Changed in version 2.5: This function used an `int' type for _low_
     and _high_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyTuple_SetItem (PyObject *p, Py_ssize_t pos,
          PyObject *o)
     Insert a reference to object _o_ at position _pos_ of the tuple
     pointed to by _p_. Return `0' on success.

          Note: This function "steals" a reference to _o_.

     Changed in version 2.5: This function used an `int' type for
     _pos_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: void PyTuple_SET_ITEM (PyObject *p, Py_ssize_t pos,
          PyObject *o)
     Like *note PyTuple_SetItem(): 29a5, but does no error checking,
     and should _only_ be used to fill in brand new tuples.

          Note: This function "steals" a reference to _o_.

     Changed in version 2.5: This function used an `int' type for
     _pos_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int _PyTuple_Resize (PyObject **p, Py_ssize_t newsize)
     Can be used to resize a tuple.  _newsize_ will be the new length
     of the tuple.  Because tuples are _supposed_ to be immutable, this
     should only be used if there is only one reference to the object.
     Do _not_ use this if the tuple may already be known to some other
     part of the code.  The tuple will always grow or shrink at the
     end.  Think of this as destroying the old tuple and creating a new
     one, only more efficiently.  Returns `0' on success. Client code
     should never assume that the resulting value of `*p' will be the
     same as before calling this function. If the object referenced by
     `*p' is replaced, the original `*p' is destroyed.  On failure,
     returns `-1' and sets `*p' to _NULL_, and raises *note
     MemoryError: 93a. or *note SystemError: 93d.

     Changed in version 2.2: Removed unused third parameter,
     _last_is_sticky_.

     Changed in version 2.5: This function used an `int' type for
     _newsize_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyTuple_ClearFreeList ()
     Clear the free list. Return the total number of freed items.

     New in version 2.6.


File: python.info,  Node: List Objects,  Prev: Tuple Objects,  Up: Sequence Objects

7.7.3.32 List Objects
.....................

 -- C Type: PyListObject
     This subtype of *note PyObject: 39f. represents a Python list
     object.

 -- C Variable: PyTypeObject PyList_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     list type.  This is the same object as `list' in the Python layer.

 -- C Function: int PyList_Check (PyObject *p)
     Return true if _p_ is a list object or an instance of a subtype of
     the list type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyList_CheckExact (PyObject *p)
     Return true if _p_ is a list object, but not an instance of a
     subtype of the list type.

     New in version 2.2.

 -- C Function: PyObject* PyList_New (Py_ssize_t len)
     Return value: New reference.

     Return a new list of length _len_ on success, or _NULL_ on failure.

          Note: If _len_ is greater than zero, the returned list
          object's items are set to `NULL'.  Thus you cannot use
          abstract API functions such as *note PySequence_SetItem():
          2a08.  or expose the object to Python code before setting all
          items to a real object with *note PyList_SetItem(): 29a6.

     Changed in version 2.5: This function used an `int' for _size_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: Py_ssize_t PyList_Size (PyObject *list)
     Return the length of the list object in _list_; this is equivalent
     to `len(list)' on a list object.

     Changed in version 2.5: This function returned an `int'. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyList_GET_SIZE (PyObject *list)
     Macro form of *note PyList_Size(): 3a0. without error checking.

     Changed in version 2.5: This macro returned an `int'. This might
     require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PyList_GetItem (PyObject *list,
          Py_ssize_t index)
     Return value: Borrowed reference.

     Return the object at position _index_ in the list pointed to by
     _list_.  The position must be positive, indexing from the end of
     the list is not supported.  If _index_ is out of bounds, return
     _NULL_ and set an *note IndexError: 4d8. exception.

     Changed in version 2.5: This function used an `int' for _index_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyList_GET_ITEM (PyObject *list, Py_ssize_t i)
     Return value: Borrowed reference.

     Macro form of *note PyList_GetItem(): 29a1. without error checking.

     Changed in version 2.5: This macro used an `int' for _i_. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PyList_SetItem (PyObject *list, Py_ssize_t index,
          PyObject *item)
     Set the item at index _index_ in list to _item_.  Return `0' on
     success or `-1' on failure.

          Note: This function "steals" a reference to _item_ and
          discards a reference to an item already in the list at the
          affected position.

     Changed in version 2.5: This function used an `int' for _index_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: void PyList_SET_ITEM (PyObject *list, Py_ssize_t i,
          PyObject *o)
     Macro form of *note PyList_SetItem(): 29a6. without error
     checking. This is normally only used to fill in new lists where
     there is no previous content.

          Note: This macro "steals" a reference to _item_, and, unlike
          *note PyList_SetItem(): 29a6, does _not_ discard a reference
          to any item that it being replaced; any reference in _list_
          at position _i_ will be leaked.

     Changed in version 2.5: This macro used an `int' for _i_. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PyList_Insert (PyObject *list, Py_ssize_t index,
          PyObject *item)
     Insert the item _item_ into list _list_ in front of index _index_.
     Return `0' if successful; return `-1' and set an exception if
     unsuccessful.  Analogous to `list.insert(index, item)'.

     Changed in version 2.5: This function used an `int' for _index_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PyList_Append (PyObject *list, PyObject *item)
     Append the object _item_ at the end of list _list_. Return `0' if
     successful; return `-1' and set an exception if unsuccessful.
     Analogous to `list.append(item)'.

 -- C Function: PyObject* PyList_GetSlice (PyObject *list,
          Py_ssize_t low, Py_ssize_t high)
     Return value: New reference.

     Return a list of the objects in _list_ containing the objects
     _between_ _low_ and _high_.  Return _NULL_ and set an exception if
     unsuccessful.  Analogous to `list[low:high]'.  Negative indices,
     as when slicing from Python, are not supported.

     Changed in version 2.5: This function used an `int' for _low_ and
     _high_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyList_SetSlice (PyObject *list, Py_ssize_t low,
          Py_ssize_t high, PyObject *itemlist)
     Set the slice of _list_ between _low_ and _high_ to the contents of
     _itemlist_.  Analogous to `list[low:high] = itemlist'. The
     _itemlist_ may be _NULL_, indicating the assignment of an empty
     list (slice deletion).  Return `0' on success, `-1' on failure.
     Negative indices, as when slicing from Python, are not supported.

     Changed in version 2.5: This function used an `int' for _low_ and
     _high_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyList_Sort (PyObject *list)
     Sort the items of _list_ in place.  Return `0' on success, `-1' on
     failure.  This is equivalent to `list.sort()'.

 -- C Function: int PyList_Reverse (PyObject *list)
     Reverse the items of _list_ in place.  Return `0' on success, `-1'
     on failure.  This is the equivalent of `list.reverse()'.

 -- C Function: PyObject* PyList_AsTuple (PyObject *list)
     Return value: New reference.

     Return a new tuple object containing the contents of _list_;
     equivalent to `tuple(list)'.


File: python.info,  Node: Mapping Objects,  Next: Other Objects,  Prev: Sequence Objects,  Up: Concrete Objects Layer

7.7.4 Mapping Objects
---------------------

* Menu:

* Dictionary Objects::


File: python.info,  Node: Dictionary Objects,  Up: Mapping Objects

7.7.4.1 Dictionary Objects
..........................

 -- C Type: PyDictObject
     This subtype of *note PyObject: 39f. represents a Python
     dictionary object.

 -- C Variable: PyTypeObject PyDict_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     dictionary type.  This is exposed to Python programs as `dict' and
     `types.DictType'.

 -- C Function: int PyDict_Check (PyObject *p)
     Return true if _p_ is a dict object or an instance of a subtype of
     the dict type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyDict_CheckExact (PyObject *p)
     Return true if _p_ is a dict object, but not an instance of a
     subtype of the dict type.

     New in version 2.4.

 -- C Function: PyObject* PyDict_New ()
     Return value: New reference.

     Return a new empty dictionary, or _NULL_ on failure.

 -- C Function: PyObject* PyDictProxy_New (PyObject *dict)
     Return value: New reference.

     Return a proxy object for a mapping which enforces read-only
     behavior.  This is normally used to create a proxy to prevent
     modification of the dictionary for non-dynamic class types.

     New in version 2.2.

 -- C Function: void PyDict_Clear (PyObject *p)
     Empty an existing dictionary of all key-value pairs.

 -- C Function: int PyDict_Contains (PyObject *p, PyObject *key)
     Determine if dictionary _p_ contains _key_.  If an item in _p_ is
     matches _key_, return `1', otherwise return `0'.  On error, return
     `-1'.  This is equivalent to the Python expression `key in p'.

     New in version 2.4.

 -- C Function: PyObject* PyDict_Copy (PyObject *p)
     Return value: New reference.

     Return a new dictionary that contains the same key-value pairs as
     _p_.

     New in version 1.6.

 -- C Function: int PyDict_SetItem (PyObject *p, PyObject *key,
          PyObject *val)
     Insert _value_ into the dictionary _p_ with a key of _key_.  _key_
     must be *note hashable: 6e5.; if it isn't, *note TypeError: 215.
     will be raised. Return `0' on success or `-1' on failure.

 -- C Function: int PyDict_SetItemString (PyObject *p, const char *key,
          PyObject *val)
     Insert _value_ into the dictionary _p_ using _key_ as a key. _key_
     should be a `char*'.  The key object is created using
     `PyString_FromString(key)'.  Return `0' on success or `-1' on
     failure.

 -- C Function: int PyDict_DelItem (PyObject *p, PyObject *key)
     Remove the entry in dictionary _p_ with key _key_. _key_ must be
     hashable; if it isn't, *note TypeError: 215. is raised.  Return
     `0' on success or `-1' on failure.

 -- C Function: int PyDict_DelItemString (PyObject *p, char *key)
     Remove the entry in dictionary _p_ which has a key specified by
     the string _key_.  Return `0' on success or `-1' on failure.

 -- C Function: PyObject* PyDict_GetItem (PyObject *p, PyObject *key)
     Return value: Borrowed reference.

     Return the object from dictionary _p_ which has a key _key_.
     Return _NULL_ if the key _key_ is not present, but _without_
     setting an exception.

 -- C Function: PyObject* PyDict_GetItemString (PyObject *p, const
          char *key)
     Return value: Borrowed reference.

     This is the same as *note PyDict_GetItem(): 29a2, but _key_ is
     specified as a `char*', rather than a *note PyObject*: 39f.

 -- C Function: PyObject* PyDict_Items (PyObject *p)
     Return value: New reference.

     Return a *note PyListObject: 2ca2. containing all the items from
     the dictionary, as in the dictionary method *note dict.items():
     1e0.

 -- C Function: PyObject* PyDict_Keys (PyObject *p)
     Return value: New reference.

     Return a *note PyListObject: 2ca2. containing all the keys from
     the dictionary, as in the dictionary method *note dict.keys(): 1de.

 -- C Function: PyObject* PyDict_Values (PyObject *p)
     Return value: New reference.

     Return a *note PyListObject: 2ca2. containing all the values from
     the dictionary _p_, as in the dictionary method *note
     dict.values(): 1df.

 -- C Function: Py_ssize_t PyDict_Size (PyObject *p)
     Return the number of items in the dictionary.  This is equivalent
     to `len(p)' on a dictionary.

     Changed in version 2.5: This function returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PyDict_Next (PyObject *p, Py_ssize_t *ppos,
          PyObject **pkey, PyObject **pvalue)
     Iterate over all key-value pairs in the dictionary _p_.  The
     `Py_ssize_t' referred to by _ppos_ must be initialized to `0'
     prior to the first call to this function to start the iteration;
     the function returns true for each pair in the dictionary, and
     false once all pairs have been reported.  The parameters _pkey_
     and _pvalue_ should either point to *note PyObject*: 39f.
     variables that will be filled in with each key and value,
     respectively, or may be _NULL_.  Any references returned through
     them are borrowed.  _ppos_ should not be altered during iteration.
     Its value represents offsets within the internal dictionary
     structure, and since the structure is sparse, the offsets are not
     consecutive.

     For example:

         PyObject *key, *value;
         Py_ssize_t pos = 0;

         while (PyDict_Next(self->dict, &pos, &key, &value)) {
             /* do something interesting with the values... */
             ...
         }

     The dictionary _p_ should not be mutated during iteration.  It is
     safe (since Python 2.1) to modify the values of the keys as you
     iterate over the dictionary, but only so long as the set of keys
     does not change.  For example:

         PyObject *key, *value;
         Py_ssize_t pos = 0;

         while (PyDict_Next(self->dict, &pos, &key, &value)) {
             int i = PyInt_AS_LONG(value) + 1;
             PyObject *o = PyInt_FromLong(i);
             if (o == NULL)
                 return -1;
             if (PyDict_SetItem(self->dict, key, o) < 0) {
                 Py_DECREF(o);
                 return -1;
             }
             Py_DECREF(o);
         }

     Changed in version 2.5: This function used an `int *' type for
     _ppos_. This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyDict_Merge (PyObject *a, PyObject *b,
          int override)
     Iterate over mapping object _b_ adding key-value pairs to
     dictionary _a_.  _b_ may be a dictionary, or any object supporting
     *note PyMapping_Keys(): 2b59.  and *note PyObject_GetItem(): 2a0b.
     If _override_ is true, existing pairs in _a_ will be replaced if a
     matching key is found in _b_, otherwise pairs will only be added
     if there is not a matching key in _a_. Return `0' on success or
     `-1' if an exception was raised.

     New in version 2.2.

 -- C Function: int PyDict_Update (PyObject *a, PyObject *b)
     This is the same as `PyDict_Merge(a, b, 1)' in C, or `a.update(b)'
     in Python.  Return `0' on success or `-1' if an exception was
     raised.

     New in version 2.2.

 -- C Function: int PyDict_MergeFromSeq2 (PyObject *a, PyObject *seq2,
          int override)
     Update or merge into dictionary _a_, from the key-value pairs in
     _seq2_.  _seq2_ must be an iterable object producing iterable
     objects of length 2, viewed as key-value pairs.  In case of
     duplicate keys, the last wins if _override_ is true, else the
     first wins. Return `0' on success or `-1' if an exception was
     raised. Equivalent Python (except for the return value):

         def PyDict_MergeFromSeq2(a, seq2, override):
             for key, value in seq2:
                 if override or key not in a:
                     a[key] = value

     New in version 2.2.


File: python.info,  Node: Other Objects,  Prev: Mapping Objects,  Up: Concrete Objects Layer

7.7.5 Other Objects
-------------------

* Menu:

* Class and Instance Objects::
* Function Objects: Function Objects<2>.
* Method Objects: Method Objects<2>.
* File Objects: File Objects<2>.
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* Weak Reference Objects: Weak Reference Objects<2>.
* Capsules: Capsules<2>.
* CObjects::
* Cell Objects::
* Generator Objects::
* DateTime Objects: DateTime Objects<2>.
* Set Objects: Set Objects<2>.
* Code Objects: Code Objects<2>.


File: python.info,  Node: Class and Instance Objects,  Next: Function Objects<2>,  Up: Other Objects

7.7.5.1 Class and Instance Objects
..................................

Note that the class objects described here represent old-style classes,
which will go away in Python 3. When creating new types for extension
modules, you will want to work with type objects (section *note Type
Objects: 2b72.).

 -- C Type: PyClassObject
     The C structure of the objects used to describe built-in classes.

 -- C Variable: PyObject* PyClass_Type
     This is the type object for class objects; it is the same object as
     `types.ClassType' in the Python layer.

 -- C Function: int PyClass_Check (PyObject *o)
     Return true if the object _o_ is a class object, including
     instances of types derived from the standard class object.  Return
     false in all other cases.

 -- C Function: int PyClass_IsSubclass (PyObject *klass, PyObject *base)
     Return true if _klass_ is a subclass of _base_. Return false in
     all other cases.

  There are very few functions specific to instance objects.

 -- C Variable: PyTypeObject PyInstance_Type
     Type object for class instances.

 -- C Function: int PyInstance_Check (PyObject *obj)
     Return true if _obj_ is an instance.

 -- C Function: PyObject* PyInstance_New (PyObject *class,
          PyObject *arg, PyObject *kw)
     Return value: New reference.

     Create a new instance of a specific class.  The parameters _arg_
     and _kw_ are used as the positional and keyword parameters to the
     object's constructor.

 -- C Function: PyObject* PyInstance_NewRaw (PyObject *class,
          PyObject *dict)
     Return value: New reference.

     Create a new instance of a specific class without calling its
     constructor.  _class_ is the class of new object.  The _dict_
     parameter will be used as the object's `__dict__'; if _NULL_, a
     new dictionary will be created for the instance.


File: python.info,  Node: Function Objects<2>,  Next: Method Objects<2>,  Prev: Class and Instance Objects,  Up: Other Objects

7.7.5.2 Function Objects
........................

There are a few functions specific to Python functions.

 -- C Type: PyFunctionObject
     The C structure used for functions.

 -- C Variable: PyTypeObject PyFunction_Type
     This is an instance of *note PyTypeObject: 29b9. and represents
     the Python function type.  It is exposed to Python programmers as
     `types.FunctionType'.

 -- C Function: int PyFunction_Check (PyObject *o)
     Return true if _o_ is a function object (has type *note
     PyFunction_Type: 2cd8.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyFunction_New (PyObject *code,
          PyObject *globals)
     Return value: New reference.

     Return a new function object associated with the code object
     _code_. _globals_ must be a dictionary with the global variables
     accessible to the function.

     The function's docstring, name and ___module___ are retrieved from
     the code object, the argument defaults and closure are set to
     _NULL_.

 -- C Function: PyObject* PyFunction_GetCode (PyObject *op)
     Return value: Borrowed reference.

     Return the code object associated with the function object _op_.

 -- C Function: PyObject* PyFunction_GetGlobals (PyObject *op)
     Return value: Borrowed reference.

     Return the globals dictionary associated with the function object
     _op_.

 -- C Function: PyObject* PyFunction_GetModule (PyObject *op)
     Return value: Borrowed reference.

     Return the ___module___ attribute of the function object _op_.
     This is normally a string containing the module name, but can be
     set to any other object by Python code.

 -- C Function: PyObject* PyFunction_GetDefaults (PyObject *op)
     Return value: Borrowed reference.

     Return the argument default values of the function object _op_.
     This can be a tuple of arguments or _NULL_.

 -- C Function: int PyFunction_SetDefaults (PyObject *op,
          PyObject *defaults)
     Set the argument default values for the function object _op_.
     _defaults_ must be _Py_None_ or a tuple.

     Raises *note SystemError: 93d. and returns `-1' on failure.

 -- C Function: PyObject* PyFunction_GetClosure (PyObject *op)
     Return value: Borrowed reference.

     Return the closure associated with the function object _op_. This
     can be _NULL_ or a tuple of cell objects.

 -- C Function: int PyFunction_SetClosure (PyObject *op,
          PyObject *closure)
     Set the closure associated with the function object _op_.
     _closure_ must be _Py_None_ or a tuple of cell objects.

     Raises *note SystemError: 93d. and returns `-1' on failure.


File: python.info,  Node: Method Objects<2>,  Next: File Objects<2>,  Prev: Function Objects<2>,  Up: Other Objects

7.7.5.3 Method Objects
......................

There are some useful functions that are useful for working with method
objects.

 -- C Variable: PyTypeObject PyMethod_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     method type.  This is exposed to Python programs as
     `types.MethodType'.

 -- C Function: int PyMethod_Check (PyObject *o)
     Return true if _o_ is a method object (has type *note
     PyMethod_Type: 2ce5.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyMethod_New (PyObject *func, PyObject *self,
          PyObject *class)
     Return value: New reference.

     Return a new method object, with _func_ being any callable object;
     this is the function that will be called when the method is
     called.  If this method should be bound to an instance, _self_
     should be the instance and _class_ should be the class of _self_,
     otherwise _self_ should be _NULL_ and _class_ should be the class
     which provides the unbound method..

 -- C Function: PyObject* PyMethod_Class (PyObject *meth)
     Return value: Borrowed reference.

     Return the class object from which the method _meth_ was created;
     if this was created from an instance, it will be the class of the
     instance.

 -- C Function: PyObject* PyMethod_GET_CLASS (PyObject *meth)
     Return value: Borrowed reference.

     Macro version of *note PyMethod_Class(): 2ce8. which avoids error
     checking.

 -- C Function: PyObject* PyMethod_Function (PyObject *meth)
     Return value: Borrowed reference.

     Return the function object associated with the method _meth_.

 -- C Function: PyObject* PyMethod_GET_FUNCTION (PyObject *meth)
     Return value: Borrowed reference.

     Macro version of *note PyMethod_Function(): 2cea. which avoids
     error checking.

 -- C Function: PyObject* PyMethod_Self (PyObject *meth)
     Return value: Borrowed reference.

     Return the instance associated with the method _meth_ if it is
     bound, otherwise return _NULL_.

 -- C Function: PyObject* PyMethod_GET_SELF (PyObject *meth)
     Return value: Borrowed reference.

     Macro version of *note PyMethod_Self(): 2cec. which avoids error
     checking.

 -- C Function: int PyMethod_ClearFreeList ()
     Clear the free list. Return the total number of freed items.

     New in version 2.6.


File: python.info,  Node: File Objects<2>,  Next: Module Objects,  Prev: Method Objects<2>,  Up: Other Objects

7.7.5.4 File Objects
....................

Python's built-in file objects are implemented entirely on the `FILE*'
support from the C standard library.  This is an implementation detail
and may change in future releases of Python.

 -- C Type: PyFileObject
     This subtype of *note PyObject: 39f. represents a Python file
     object.

 -- C Variable: PyTypeObject PyFile_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     file type.  This is exposed to Python programs as `file' and
     `types.FileType'.

 -- C Function: int PyFile_Check (PyObject *p)
     Return true if its argument is a *note PyFileObject: 2cf2. or a
     subtype of *note PyFileObject: 2cf2.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyFile_CheckExact (PyObject *p)
     Return true if its argument is a *note PyFileObject: 2cf2, but not
     a subtype of *note PyFileObject: 2cf2.

     New in version 2.2.

 -- C Function: PyObject* PyFile_FromString (char *filename, char *mode)
     Return value: New reference.

     On success, return a new file object that is opened on the file
     given by _filename_, with a file mode given by _mode_, where
     _mode_ has the same semantics as the standard C routine `fopen()'.
     On failure, return _NULL_.

 -- C Function: PyObject* PyFile_FromFile (FILE *fp, char *name,
          char *mode, int (*close)(FILE*))
     Return value: New reference.

     Create a new *note PyFileObject: 2cf2. from the already-open
     standard C file pointer, _fp_.  The function _close_ will be
     called when the file should be closed.  Return _NULL_ and close
     the file using _close_ on failure.  _close_ is optional and can be
     set to _NULL_.

 -- C Function: FILE* PyFile_AsFile (PyObject *p)
     Return the file object associated with _p_ as a `FILE*'.

     If the caller will ever use the returned `FILE*' object while the
     *note GIL: 2cf9. is released it must also call the *note
     PyFile_IncUseCount(): 367. and *note PyFile_DecUseCount(): 368.
     functions described below as appropriate.

 -- C Function: void PyFile_IncUseCount (PyFileObject *p)
     Increments the PyFileObject's internal use count to indicate that
     the underlying `FILE*' is being used.  This prevents Python from
     calling f_close() on it from another thread.  Callers of this must
     call *note PyFile_DecUseCount(): 368. when they are finished with
     the `FILE*'.  Otherwise the file object will never be closed by
     Python.

     The *note GIL: 2cf9. must be held while calling this function.

     The suggested use is to call this after *note PyFile_AsFile():
     2cf8. and before you release the GIL:

         FILE *fp = PyFile_AsFile(p);
         PyFile_IncUseCount(p);
         /* ... */
         Py_BEGIN_ALLOW_THREADS
         do_something(fp);
         Py_END_ALLOW_THREADS
         /* ... */
         PyFile_DecUseCount(p);

     New in version 2.6.

 -- C Function: void PyFile_DecUseCount (PyFileObject *p)
     Decrements the PyFileObject's internal unlocked_count member to
     indicate that the caller is done with its own use of the `FILE*'.
     This may only be called to undo a prior call to *note
     PyFile_IncUseCount(): 367.

     The *note GIL: 2cf9. must be held while calling this function (see
     the example above).

     New in version 2.6.

 -- C Function: PyObject* PyFile_GetLine (PyObject *p, int n)
     Return value: New reference.

     Equivalent to `p.readline([n])', this function reads one line from
     the object _p_.  _p_ may be a file object or any object with a
     *note readline(): 144.  method.  If _n_ is `0', exactly one line
     is read, regardless of the length of the line.  If _n_ is greater
     than `0', no more than _n_ bytes will be read from the file; a
     partial line can be returned.  In both cases, an empty string is
     returned if the end of the file is reached immediately.  If _n_ is
     less than `0', however, one line is read regardless of length, but
     *note EOFError: 874. is raised if the end of the file is reached
     immediately.

 -- C Function: PyObject* PyFile_Name (PyObject *p)
     Return value: Borrowed reference.

     Return the name of the file specified by _p_ as a string object.

 -- C Function: void PyFile_SetBufSize (PyFileObject *p, int n)
     Available on systems with `setvbuf()' only.  This should only be
     called immediately after file object creation.

 -- C Function: int PyFile_SetEncoding (PyFileObject *p, const
          char *enc)
     Set the file's encoding for Unicode output to _enc_. Return 1 on
     success and 0 on failure.

     New in version 2.3.

 -- C Function: int PyFile_SetEncodingAndErrors (PyFileObject *p, const
          char *enc, *errors)
     Set the file's encoding for Unicode output to _enc_, and its error
     mode to _err_. Return 1 on success and 0 on failure.

     New in version 2.6.

 -- C Function: int PyFile_SoftSpace (PyObject *p, int newflag)
     This function exists for internal use by the interpreter.  Set the
     `softspace' attribute of _p_ to _newflag_ and return the previous
     value.  _p_ does not have to be a file object for this function to
     work properly; any object is supported (thought its only
     interesting if the `softspace' attribute can be set).  This
     function clears any errors, and will return `0' as the previous
     value if the attribute either does not exist or if there were
     errors in retrieving it.  There is no way to detect errors from
     this function, but doing so should not be needed.

 -- C Function: int PyFile_WriteObject (PyObject *obj, PyObject *p,
          int flags)
     Write object _obj_ to file object _p_.  The only supported flag
     for _flags_ is `Py_PRINT_RAW'; if given, the *note str(): 1e7. of
     the object is written instead of the *note repr(): 145.  Return
     `0' on success or `-1' on failure; the appropriate exception will
     be set.

 -- C Function: int PyFile_WriteString (const char *s, PyObject *p)
     Write string _s_ to file object _p_.  Return `0' on success or
     `-1' on failure; the appropriate exception will be set.


File: python.info,  Node: Module Objects,  Next: Iterator Objects,  Prev: File Objects<2>,  Up: Other Objects

7.7.5.5 Module Objects
......................

There are only a few functions special to module objects.

 -- C Variable: PyTypeObject PyModule_Type
     This instance of *note PyTypeObject: 29b9. represents the Python
     module type.  This is exposed to Python programs as
     `types.ModuleType'.

 -- C Function: int PyModule_Check (PyObject *p)
     Return true if _p_ is a module object, or a subtype of a module
     object.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyModule_CheckExact (PyObject *p)
     Return true if _p_ is a module object, but not a subtype of *note
     PyModule_Type: 2d05.

     New in version 2.2.

 -- C Function: PyObject* PyModule_New (const char *name)
     Return value: New reference.

     Return a new module object with the `__name__' attribute set to
     _name_.  Only the module's `__doc__' and `__name__' attributes are
     filled in; the caller is responsible for providing a `__file__'
     attribute.

 -- C Function: PyObject* PyModule_GetDict (PyObject *module)
     Return value: Borrowed reference.

     Return the dictionary object that implements _module_'s namespace;
     this object is the same as the `__dict__' attribute of the module
     object.  This function never fails.  It is recommended extensions
     use other `PyModule_*()' and `PyObject_*()' functions rather than
     directly manipulate a module's `__dict__'.

 -- C Function: char* PyModule_GetName (PyObject *module)
     Return _module_'s `__name__' value.  If the module does not
     provide one, or if it is not a string, *note SystemError: 93d. is
     raised and _NULL_ is returned.

 -- C Function: char* PyModule_GetFilename (PyObject *module)
     Return the name of the file from which _module_ was loaded using
     _module_'s `__file__' attribute.  If this is not defined, or if it
     is not a string, raise *note SystemError: 93d. and return _NULL_.

 -- C Function: int PyModule_AddObject (PyObject *module, const
          char *name, PyObject *value)
     Add an object to _module_ as _name_.  This is a convenience
     function which can be used from the module's initialization
     function.  This steals a reference to _value_.  Return `-1' on
     error, `0' on success.

     New in version 2.0.

 -- C Function: int PyModule_AddIntConstant (PyObject *module, const
          char *name, long value)
     Add an integer constant to _module_ as _name_.  This convenience
     function can be used from the module's initialization function.
     Return `-1' on error, `0' on success.

     New in version 2.0.

 -- C Function: int PyModule_AddStringConstant (PyObject *module, const
          char *name, const char *value)
     Add a string constant to _module_ as _name_.  This convenience
     function can be used from the module's initialization function.
     The string _value_ must be null-terminated.  Return `-1' on error,
     `0' on success.

     New in version 2.0.

 -- C Function: int PyModule_AddIntMacro (PyObject *module, macro)
     Add an int constant to _module_. The name and the value are taken
     from _macro_. For example `PyModule_AddIntMacro(module, AF_INET)'
     adds the int constant _AF_INET_ with the value of _AF_INET_ to
     _module_.  Return `-1' on error, `0' on success.

     New in version 2.6.

 -- C Function: int PyModule_AddStringMacro (PyObject *module, macro)
          Add a string constant to _module_.

     New in version 2.6.


File: python.info,  Node: Iterator Objects,  Next: Descriptor Objects,  Prev: Module Objects,  Up: Other Objects

7.7.5.6 Iterator Objects
........................

Python provides two general-purpose iterator objects.  The first, a
sequence iterator, works with an arbitrary sequence supporting the
*note __getitem__(): 448.  method.  The second works with a callable
object and a sentinel value, calling the callable for each item in the
sequence, and ending the iteration when the sentinel value is returned.

 -- C Variable: PyTypeObject PySeqIter_Type
     Type object for iterator objects returned by *note
     PySeqIter_New(): 2d14. and the one-argument form of the *note
     iter(): 319. built-in function for built-in sequence types.

     New in version 2.2.

 -- C Function: int PySeqIter_Check (op)
     Return true if the type of _op_ is *note PySeqIter_Type: 2d13.

     New in version 2.2.

 -- C Function: PyObject* PySeqIter_New (PyObject *seq)
     Return value: New reference.

     Return an iterator that works with a general sequence object,
     _seq_.  The iteration ends when the sequence raises *note
     IndexError: 4d8. for the subscripting operation.

     New in version 2.2.

 -- C Variable: PyTypeObject PyCallIter_Type
     Type object for iterator objects returned by *note
     PyCallIter_New(): 2d17. and the two-argument form of the *note
     iter(): 319. built-in function.

     New in version 2.2.

 -- C Function: int PyCallIter_Check (op)
     Return true if the type of _op_ is *note PyCallIter_Type: 2d16.

     New in version 2.2.

 -- C Function: PyObject* PyCallIter_New (PyObject *callable,
          PyObject *sentinel)
     Return value: New reference.

     Return a new iterator.  The first parameter, _callable_, can be
     any Python callable object that can be called with no parameters;
     each call to it should return the next item in the iteration.
     When _callable_ returns a value equal to _sentinel_, the iteration
     will be terminated.

     New in version 2.2.


File: python.info,  Node: Descriptor Objects,  Next: Slice Objects,  Prev: Iterator Objects,  Up: Other Objects

7.7.5.7 Descriptor Objects
..........................

"Descriptors" are objects that describe some attribute of an object.
They are found in the dictionary of type objects.

 -- C Variable: PyTypeObject PyProperty_Type
     The type object for the built-in descriptor types.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewGetSet (PyTypeObject *type, struct
          PyGetSetDef *getset)
     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewMember (PyTypeObject *type, struct
          PyMemberDef *meth)
     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewMethod (PyTypeObject *type, struct
          PyMethodDef *meth)
     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewWrapper (PyTypeObject *type,
          struct wrapperbase *wrapper, void *wrapped)
     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewClassMethod (PyTypeObject *type,
          PyMethodDef *method)
     Return value: New reference.

     New in version 2.3.

 -- C Function: int PyDescr_IsData (PyObject *descr)
     Return true if the descriptor objects _descr_ describes a data
     attribute, or false if it describes a method.  _descr_ must be a
     descriptor object; there is no error checking.

     New in version 2.2.

 -- C Function: PyObject* PyWrapper_New (PyObject *, PyObject *)
     Return value: New reference.

     New in version 2.2.


File: python.info,  Node: Slice Objects,  Next: Weak Reference Objects<2>,  Prev: Descriptor Objects,  Up: Other Objects

7.7.5.8 Slice Objects
.....................

 -- C Variable: PyTypeObject PySlice_Type
     The type object for slice objects.  This is the same as `slice' and
     `types.SliceType'.

 -- C Function: int PySlice_Check (PyObject *ob)
     Return true if _ob_ is a slice object; _ob_ must not be _NULL_.

 -- C Function: PyObject* PySlice_New (PyObject *start, PyObject *stop,
          PyObject *step)
     Return value: New reference.

     Return a new slice object with the given values.  The _start_,
     _stop_, and _step_ parameters are used as the values of the slice
     object attributes of the same names.  Any of the values may be
     _NULL_, in which case the `None' will be used for the
     corresponding attribute.  Return _NULL_ if the new object could
     not be allocated.

 -- C Function: int PySlice_GetIndices (PySliceObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step)
     Retrieve the start, stop and step indices from the slice object
     _slice_, assuming a sequence of length _length_. Treats indices
     greater than _length_ as errors.

     Returns 0 on success and -1 on error with no exception set (unless
     one of the indices was not *note None: 393. and failed to be
     converted to an integer, in which case -1 is returned with an
     exception set).

     You probably do not want to use this function.  If you want to use
     slice objects in versions of Python prior to 2.3, you would
     probably do well to incorporate the source of *note
     PySlice_GetIndicesEx(): 2d2b, suitably renamed, in the source of
     your extension.

     Changed in version 2.5: This function used an `int' type for
     _length_ and an `int *' type for _start_, _stop_, and _step_. This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PySlice_GetIndicesEx (PySliceObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step, Py_ssize_t *slicelength)
     Usable replacement for *note PySlice_GetIndices(): 2d2a.  Retrieve
     the start, stop, and step indices from the slice object _slice_
     assuming a sequence of length _length_, and store the length of
     the slice in _slicelength_.  Out of bounds indices are clipped in
     a manner consistent with the handling of normal slices.

     Returns 0 on success and -1 on error with exception set.

     New in version 2.3.

     Changed in version 2.5: This function used an `int' type for
     _length_ and an `int *' type for _start_, _stop_, _step_, and
     _slicelength_. This might require changes in your code for
     properly supporting 64-bit systems.


File: python.info,  Node: Weak Reference Objects<2>,  Next: Capsules<2>,  Prev: Slice Objects,  Up: Other Objects

7.7.5.9 Weak Reference Objects
..............................

Python supports _weak references_ as first-class objects.  There are two
specific object types which directly implement weak references.  The
first is a simple reference object, and the second acts as a proxy for
the original object as much as it can.

 -- C Function: int PyWeakref_Check (ob)
     Return true if _ob_ is either a reference or proxy object.

     New in version 2.2.

 -- C Function: int PyWeakref_CheckRef (ob)
     Return true if _ob_ is a reference object.

     New in version 2.2.

 -- C Function: int PyWeakref_CheckProxy (ob)
     Return true if _ob_ is a proxy object.

     New in version 2.2.

 -- C Function: PyObject* PyWeakref_NewRef (PyObject *ob,
          PyObject *callback)
     Return value: New reference.

     Return a weak reference object for the object _ob_.  This will
     always return a new reference, but is not guaranteed to create a
     new object; an existing reference object may be returned.  The
     second parameter, _callback_, can be a callable object that
     receives notification when _ob_ is garbage collected; it should
     accept a single parameter, which will be the weak reference object
     itself. _callback_ may also be `None' or _NULL_.  If _ob_ is not a
     weakly-referencable object, or if _callback_ is not callable,
     `None', or _NULL_, this will return _NULL_ and raise *note
     TypeError: 215.

     New in version 2.2.

 -- C Function: PyObject* PyWeakref_NewProxy (PyObject *ob,
          PyObject *callback)
     Return value: New reference.

     Return a weak reference proxy object for the object _ob_.  This
     will always return a new reference, but is not guaranteed to
     create a new object; an existing proxy object may be returned.
     The second parameter, _callback_, can be a callable object that
     receives notification when _ob_ is garbage collected; it should
     accept a single parameter, which will be the weak reference object
     itself. _callback_ may also be `None' or _NULL_.  If _ob_ is not a
     weakly-referencable object, or if _callback_ is not callable,
     `None', or _NULL_, this will return _NULL_ and raise *note
     TypeError: 215.

     New in version 2.2.

 -- C Function: PyObject* PyWeakref_GetObject (PyObject *ref)
     Return value: Borrowed reference.

     Return the referenced object from a weak reference, _ref_.  If the
     referent is no longer live, returns `Py_None'.

     New in version 2.2.

          Warning: This function returns a *borrowed reference* to the
          referenced object.  This means that you should always call
          *note Py_INCREF(): 297b. on the object except if you know
          that it cannot be destroyed while you are still using it.

 -- C Function: PyObject* PyWeakref_GET_OBJECT (PyObject *ref)
     Return value: Borrowed reference.

     Similar to *note PyWeakref_GetObject(): 2d34, but implemented as a
     macro that does no error checking.

     New in version 2.2.


File: python.info,  Node: Capsules<2>,  Next: CObjects,  Prev: Weak Reference Objects<2>,  Up: Other Objects

7.7.5.10 Capsules
.................

Refer to *note Providing a C API for an Extension Module: 2c6. for more
information on using these objects.

 -- C Type: PyCapsule
     This subtype of *note PyObject: 39f. represents an opaque value,
     useful for C extension modules who need to pass an opaque value
     (as a `void*' pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Type: PyCapsule_Destructor
     The type of a destructor callback for a capsule.  Defined as:

         typedef void (*PyCapsule_Destructor)(PyObject *);

     See *note PyCapsule_New(): 29b1. for the semantics of
     PyCapsule_Destructor callbacks.

 -- C Function: int PyCapsule_CheckExact (PyObject *p)
     Return true if its argument is a *note PyCapsule: 1c3.

 -- C Function: PyObject* PyCapsule_New (void *pointer, const
          char *name, PyCapsule_Destructor destructor)
     Return value: New reference.

     Create a *note PyCapsule: 1c3. encapsulating the _pointer_.  The
     _pointer_ argument may not be _NULL_.

     On failure, set an exception and return _NULL_.

     The _name_ string may either be _NULL_ or a pointer to a valid C
     string.  If non-_NULL_, this string must outlive the capsule.
     (Though it is permitted to free it inside the _destructor_.)

     If the _destructor_ argument is not _NULL_, it will be called with
     the capsule as its argument when it is destroyed.

     If this capsule will be stored as an attribute of a module, the
     _name_ should be specified as `modulename.attributename'.  This
     will enable other modules to import the capsule using *note
     PyCapsule_Import(): 29b2.

 -- C Function: void* PyCapsule_GetPointer (PyObject *capsule, const
          char *name)
     Retrieve the _pointer_ stored in the capsule.  On failure, set an
     exception and return _NULL_.

     The _name_ parameter must compare exactly to the name stored in
     the capsule.  If the name stored in the capsule is _NULL_, the
     _name_ passed in must also be _NULL_.  Python uses the C function
     `strcmp()' to compare capsule names.

 -- C Function: PyCapsule_Destructor PyCapsule_GetDestructor
          (PyObject *capsule)
     Return the current destructor stored in the capsule.  On failure,
     set an exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ destructor.  This makes
     a _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 2c5. or *note PyErr_Occurred(): 297c. to
     disambiguate.

 -- C Function: void* PyCapsule_GetContext (PyObject *capsule)
     Return the current context stored in the capsule.  On failure, set
     an exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ context.  This makes a
     _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 2c5. or *note PyErr_Occurred(): 297c. to
     disambiguate.

 -- C Function: const char* PyCapsule_GetName (PyObject *capsule)
     Return the current name stored in the capsule.  On failure, set an
     exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ name.  This makes a
     _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 2c5. or *note PyErr_Occurred(): 297c. to
     disambiguate.

 -- C Function: void* PyCapsule_Import (const char *name, int no_block)
     Import a pointer to a C object from a capsule attribute in a
     module.  The _name_ parameter should specify the full name to the
     attribute, as in `module.attribute'.  The _name_ stored in the
     capsule must match this string exactly.  If _no_block_ is true,
     import the module without blocking (using *note
     PyImport_ImportModuleNoBlock(): 36a.).  If _no_block_ is false,
     import the module conventionally (using *note
     PyImport_ImportModule(): 379.).

     Return the capsule's internal _pointer_ on success.  On failure,
     set an exception and return _NULL_.  However, if *note
     PyCapsule_Import(): 29b2. failed to import the module, and
     _no_block_ was true, no exception is set.

 -- C Function: int PyCapsule_IsValid (PyObject *capsule, const
          char *name)
     Determines whether or not _capsule_ is a valid capsule.  A valid
     capsule is non-_NULL_, passes *note PyCapsule_CheckExact(): 2d39,
     has a non-_NULL_ pointer stored in it, and its internal name
     matches the _name_ parameter.  (See *note PyCapsule_GetPointer():
     2d3a. for information on how capsule names are compared.)

     In other words, if *note PyCapsule_IsValid(): 2c5. returns a true
     value, calls to any of the accessors (any function starting with
     `PyCapsule_Get()') are guaranteed to succeed.

     Return a nonzero value if the object is valid and matches the name
     passed in.  Return 0 otherwise.  This function will not fail.

 -- C Function: int PyCapsule_SetContext (PyObject *capsule,
          void *context)
     Set the context pointer inside _capsule_ to _context_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetDestructor (PyObject *capsule,
          PyCapsule_Destructor destructor)
     Set the destructor inside _capsule_ to _destructor_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetName (PyObject *capsule, const
          char *name)
     Set the name inside _capsule_ to _name_.  If non-_NULL_, the name
     must outlive the capsule.  If the previous _name_ stored in the
     capsule was not _NULL_, no attempt is made to free it.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetPointer (PyObject *capsule,
          void *pointer)
     Set the void pointer inside _capsule_ to _pointer_.  The pointer
     may not be _NULL_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.


File: python.info,  Node: CObjects,  Next: Cell Objects,  Prev: Capsules<2>,  Up: Other Objects

7.7.5.11 CObjects
.................

     Warning: The CObject API is deprecated as of Python 2.7.  Please
     switch to the new *note Capsules: 29b3. API.

 -- C Type: PyCObject
     This subtype of *note PyObject: 39f. represents an opaque value,
     useful for C extension modules who need to pass an opaque value
     (as a `void*' pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Function: int PyCObject_Check (PyObject *p)
     Return true if its argument is a *note PyCObject: 2c4.

 -- C Function: PyObject* PyCObject_FromVoidPtr (void* cobj, void
          (*destr)(void *))
     Return value: New reference.

     Create a *note PyCObject: 2c4. from the `void *' _cobj_.  The
     _destr_ function will be called when the object is reclaimed,
     unless it is _NULL_.

 -- C Function: PyObject* PyCObject_FromVoidPtrAndDesc (void* cobj,
          void* desc, void (*destr)(void *, void *))
     Return value: New reference.

     Create a *note PyCObject: 2c4. from the `void *' _cobj_.  The
     _destr_ function will be called when the object is reclaimed. The
     _desc_ argument can be used to pass extra callback data for the
     destructor function.

 -- C Function: void* PyCObject_AsVoidPtr (PyObject* self)
     Return the object `void *' that the *note PyCObject: 2c4. _self_
     was created with.

 -- C Function: void* PyCObject_GetDesc (PyObject* self)
     Return the description `void *' that the *note PyCObject: 2c4.
     _self_ was created with.

 -- C Function: int PyCObject_SetVoidPtr (PyObject* self, void* cobj)
     Set the void pointer inside _self_ to _cobj_. The *note PyCObject:
     2c4. must not have an associated destructor. Return true on
     success, false on failure.


File: python.info,  Node: Cell Objects,  Next: Generator Objects,  Prev: CObjects,  Up: Other Objects

7.7.5.12 Cell Objects
.....................

"Cell" objects are used to implement variables referenced by multiple
scopes.  For each such variable, a cell object is created to store the
value; the local variables of each stack frame that references the
value contains a reference to the cells from outer scopes which also
use that variable.  When the value is accessed, the value contained in
the cell is used instead of the cell object itself.  This
de-referencing of the cell object requires support from the generated
byte-code; these are not automatically de-referenced when accessed.
Cell objects are not likely to be useful elsewhere.

 -- C Type: PyCellObject
     The C structure used for cell objects.

 -- C Variable: PyTypeObject PyCell_Type
     The type object corresponding to cell objects.

 -- C Function: int PyCell_Check (ob)
     Return true if _ob_ is a cell object; _ob_ must not be _NULL_.

 -- C Function: PyObject* PyCell_New (PyObject *ob)
     Return value: New reference.

     Create and return a new cell object containing the value _ob_. The
     parameter may be _NULL_.

 -- C Function: PyObject* PyCell_Get (PyObject *cell)
     Return value: New reference.

     Return the contents of the cell _cell_.

 -- C Function: PyObject* PyCell_GET (PyObject *cell)
     Return value: Borrowed reference.

     Return the contents of the cell _cell_, but without checking that
     _cell_ is non-_NULL_ and a cell object.

 -- C Function: int PyCell_Set (PyObject *cell, PyObject *value)
     Set the contents of the cell object _cell_ to _value_.  This
     releases the reference to any current content of the cell. _value_
     may be _NULL_.  _cell_ must be non-_NULL_; if it is not a cell
     object, `-1' will be returned.  On success, `0' will be returned.

 -- C Function: void PyCell_SET (PyObject *cell, PyObject *value)
     Sets the value of the cell object _cell_ to _value_.  No reference
     counts are adjusted, and no checks are made for safety; _cell_
     must be non-_NULL_ and must be a cell object.


File: python.info,  Node: Generator Objects,  Next: DateTime Objects<2>,  Prev: Cell Objects,  Up: Other Objects

7.7.5.13 Generator Objects
..........................

Generator objects are what Python uses to implement generator
iterators. They are normally created by iterating over a function that
yields values, rather than explicitly calling *note PyGen_New(): 2d58.

 -- C Type: PyGenObject
     The C structure used for generator objects.

 -- C Variable: PyTypeObject PyGen_Type
     The type object corresponding to generator objects

 -- C Function: int PyGen_Check (ob)
     Return true if _ob_ is a generator object; _ob_ must not be _NULL_.

 -- C Function: int PyGen_CheckExact (ob)
     Return true if _ob_'s type is _PyGen_Type_ is a generator object;
     _ob_ must not be _NULL_.

 -- C Function: PyObject* PyGen_New (PyFrameObject *frame)
     Return value: New reference.

     Create and return a new generator object based on the _frame_
     object. A reference to _frame_ is stolen by this function. The
     parameter must not be _NULL_.


File: python.info,  Node: DateTime Objects<2>,  Next: Set Objects<2>,  Prev: Generator Objects,  Up: Other Objects

7.7.5.14 DateTime Objects
.........................

Various date and time objects are supplied by the *note datetime: 7d.
module.  Before using any of these functions, the header file
`datetime.h' must be included in your source (note that this is not
included by `Python.h'), and the macro `PyDateTime_IMPORT' must be
invoked, usually as part of the module initialisation function.  The
macro puts a pointer to a C structure into a static variable,
`PyDateTimeAPI', that is used by the following macros.

  Type-check macros:

 -- C Function: int PyDate_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateType' or a subtype
     of `PyDateTime_DateType'.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDate_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateType'. _ob_ must
     not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDateTime_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateTimeType' or a
     subtype of `PyDateTime_DateTimeType'.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDateTime_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DateTimeType'. _ob_
     must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTime_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TimeType' or a subtype
     of `PyDateTime_TimeType'.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTime_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TimeType'. _ob_ must
     not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDelta_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DeltaType' or a subtype
     of `PyDateTime_DeltaType'.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDelta_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_DeltaType'. _ob_ must
     not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTZInfo_Check (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TZInfoType' or a
     subtype of `PyDateTime_TZInfoType'.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTZInfo_CheckExact (PyObject *ob)
     Return true if _ob_ is of type `PyDateTime_TZInfoType'. _ob_ must
     not be _NULL_.

     New in version 2.4.

  Macros to create objects:

 -- C Function: PyObject* PyDate_FromDate (int year, int month, int day)
     Return value: New reference.

     Return a `datetime.date' object with the specified year, month and
     day.

     New in version 2.4.

 -- C Function: PyObject* PyDateTime_FromDateAndTime (int year,
          int month, int day, int hour, int minute, int second,
          int usecond)
     Return value: New reference.

     Return a `datetime.datetime' object with the specified year,
     month, day, hour, minute, second and microsecond.

     New in version 2.4.

 -- C Function: PyObject* PyTime_FromTime (int hour, int minute,
          int second, int usecond)
     Return value: New reference.

     Return a `datetime.time' object with the specified hour, minute,
     second and microsecond.

     New in version 2.4.

 -- C Function: PyObject* PyDelta_FromDSU (int days, int seconds,
          int useconds)
     Return value: New reference.

     Return a `datetime.timedelta' object representing the given number
     of days, seconds and microseconds.  Normalization is performed so
     that the resulting number of microseconds and seconds lie in the
     ranges documented for `datetime.timedelta' objects.

     New in version 2.4.

  Macros to extract fields from date objects.  The argument must be an
instance of `PyDateTime_Date', including subclasses (such as
`PyDateTime_DateTime').  The argument must not be _NULL_, and the type
is not checked:

 -- C Function: int PyDateTime_GET_YEAR (PyDateTime_Date *o)
     Return the year, as a positive int.

     New in version 2.4.

 -- C Function: int PyDateTime_GET_MONTH (PyDateTime_Date *o)
     Return the month, as an int from 1 through 12.

     New in version 2.4.

 -- C Function: int PyDateTime_GET_DAY (PyDateTime_Date *o)
     Return the day, as an int from 1 through 31.

     New in version 2.4.

  Macros to extract fields from datetime objects.  The argument must be
an instance of `PyDateTime_DateTime', including subclasses. The argument
must not be _NULL_, and the type is not checked:

 -- C Function: int PyDateTime_DATE_GET_HOUR (PyDateTime_DateTime *o)
     Return the hour, as an int from 0 through 23.

     New in version 2.4.

 -- C Function: int PyDateTime_DATE_GET_MINUTE (PyDateTime_DateTime *o)
     Return the minute, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_DATE_GET_SECOND (PyDateTime_DateTime *o)
     Return the second, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_DATE_GET_MICROSECOND
          (PyDateTime_DateTime *o)
     Return the microsecond, as an int from 0 through 999999.

     New in version 2.4.

  Macros to extract fields from time objects.  The argument must be an
instance of `PyDateTime_Time', including subclasses. The argument must
not be _NULL_, and the type is not checked:

 -- C Function: int PyDateTime_TIME_GET_HOUR (PyDateTime_Time *o)
     Return the hour, as an int from 0 through 23.

     New in version 2.4.

 -- C Function: int PyDateTime_TIME_GET_MINUTE (PyDateTime_Time *o)
     Return the minute, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_TIME_GET_SECOND (PyDateTime_Time *o)
     Return the second, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_TIME_GET_MICROSECOND (PyDateTime_Time *o)
     Return the microsecond, as an int from 0 through 999999.

     New in version 2.4.

  Macros for the convenience of modules implementing the DB API:

 -- C Function: PyObject* PyDateTime_FromTimestamp (PyObject *args)
     Return value: New reference.

     Create and return a new `datetime.datetime' object given an
     argument tuple suitable for passing to
     `datetime.datetime.fromtimestamp()'.

     New in version 2.4.

 -- C Function: PyObject* PyDate_FromTimestamp (PyObject *args)
     Return value: New reference.

     Create and return a new `datetime.date' object given an argument
     tuple suitable for passing to `datetime.date.fromtimestamp()'.

     New in version 2.4.



Local Variables:
coding: utf-8
End:
