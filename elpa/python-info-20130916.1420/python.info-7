This is
/home/melpa/melpa/working/python-info-20130916.1420/python.info,
produced by makeinfo version 4.13 from
/home/melpa/melpa/working/python-info/python.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY

     Python 2.7.5, September 16, 2013

     Georg Brandl

     Copyright (C) 1990-2013, Python Software Foundation


File: python.info,  Node: Codec Objects,  Next: IncrementalEncoder Objects,  Up: Codec Base Classes

5.7.8.2 Codec Objects
.....................

The `Codec' class defines these methods which also define the function
interfaces of the stateless encoder and decoder:

 -- Method: Codec.encode (input[, errors])
     Encodes the object _input_ and returns a tuple (output object,
     length consumed).  While codecs are not restricted to use with
     Unicode, in a Unicode context, encoding converts a Unicode object
     to a plain string using a particular character set encoding (e.g.,
     `cp1252' or `iso-8859-1').

     _errors_ defines the error handling to apply. It defaults to
     `'strict'' handling.

     The method may not store state in the `Codec' instance. Use
     `StreamCodec' for codecs which have to keep state in order to make
     encoding/decoding efficient.

     The encoder must be able to handle zero length input and return an
     empty object of the output object type in this situation.

 -- Method: Codec.decode (input[, errors])
     Decodes the object _input_ and returns a tuple (output object,
     length consumed).  In a Unicode context, decoding converts a plain
     string encoded using a particular character set encoding to a
     Unicode object.

     _input_ must be an object which provides the `bf_getreadbuf'
     buffer slot.  Python strings, buffer objects and memory mapped
     files are examples of objects providing this slot.

     _errors_ defines the error handling to apply. It defaults to
     `'strict'' handling.

     The method may not store state in the `Codec' instance. Use
     `StreamCodec' for codecs which have to keep state in order to make
     encoding/decoding efficient.

     The decoder must be able to handle zero length input and return an
     empty object of the output object type in this situation.

  The *note IncrementalEncoder: a39. and *note IncrementalDecoder: a3a.
classes provide the basic interface for incremental encoding and
decoding. Encoding/decoding the input isn't done with one call to the
stateless encoder/decoder function, but with multiple calls to the
`encode()'/`decode()' method of the incremental encoder/decoder. The
incremental encoder/decoder keeps track of the encoding/decoding
process during method calls.

  The joined output of calls to the `encode()'/`decode()' method is the
same as if all the single inputs were joined into one, and this input
was encoded/decoded with the stateless encoder/decoder.


File: python.info,  Node: IncrementalEncoder Objects,  Next: IncrementalDecoder Objects,  Prev: Codec Objects,  Up: Codec Base Classes

5.7.8.3 IncrementalEncoder Objects
..................................

New in version 2.5.

  The *note IncrementalEncoder: a39. class is used for encoding an
input in multiple steps. It defines the following methods which every
incremental encoder must define in order to be compatible with the
Python codec registry.

 -- Class: codecs.IncrementalEncoder ([errors])
     Constructor for an *note IncrementalEncoder: a39. instance.

     All incremental encoders must provide this constructor interface.
     They are free to add additional keyword arguments, but only the
     ones defined here are used by the Python codec registry.

     The *note IncrementalEncoder: a39. may implement different error
     handling schemes by providing the _errors_ keyword argument. These
     parameters are predefined:

        * `'strict'' Raise *note ValueError: 233. (or a subclass); this
          is the default.

        * `'ignore'' Ignore the character and continue with the next.

        * `'replace'' Replace with a suitable replacement character

        * `'xmlcharrefreplace'' Replace with the appropriate XML
          character reference

        * `'backslashreplace'' Replace with backslashed escape
          sequences.

     The _errors_ argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note IncrementalEncoder: a39.  object.

     The set of allowed values for the _errors_ argument can be
     extended with *note register_error(): 437.

      -- Method: encode (object[, final])
          Encodes _object_ (taking the current state of the encoder
          into account) and returns the resulting encoded object. If
          this is the last call to *note encode(): a5d. _final_ must be
          true (the default is false).

      -- Method: reset ()
          Reset the encoder to the initial state.


File: python.info,  Node: IncrementalDecoder Objects,  Next: StreamWriter Objects,  Prev: IncrementalEncoder Objects,  Up: Codec Base Classes

5.7.8.4 IncrementalDecoder Objects
..................................

The *note IncrementalDecoder: a3a. class is used for decoding an input
in multiple steps. It defines the following methods which every
incremental decoder must define in order to be compatible with the
Python codec registry.

 -- Class: codecs.IncrementalDecoder ([errors])
     Constructor for an *note IncrementalDecoder: a3a. instance.

     All incremental decoders must provide this constructor interface.
     They are free to add additional keyword arguments, but only the
     ones defined here are used by the Python codec registry.

     The *note IncrementalDecoder: a3a. may implement different error
     handling schemes by providing the _errors_ keyword argument. These
     parameters are predefined:

        * `'strict'' Raise *note ValueError: 233. (or a subclass); this
          is the default.

        * `'ignore'' Ignore the character and continue with the next.

        * `'replace'' Replace with a suitable replacement character.

     The _errors_ argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note IncrementalDecoder: a3a.  object.

     The set of allowed values for the _errors_ argument can be
     extended with *note register_error(): 437.

      -- Method: decode (object[, final])
          Decodes _object_ (taking the current state of the decoder
          into account) and returns the resulting decoded object. If
          this is the last call to *note decode(): a61. _final_ must be
          true (the default is false). If _final_ is true the decoder
          must decode the input completely and must flush all buffers.
          If this isn't possible (e.g. because of incomplete byte
          sequences at the end of the input) it must initiate error
          handling just like in the stateless case (which might raise
          an exception).

      -- Method: reset ()
          Reset the decoder to the initial state.

  The *note StreamWriter: a3b. and *note StreamReader: a3c. classes
provide generic working interfaces which can be used to implement new
encoding submodules very easily. See `encodings.utf_8' for an example
of how this is done.


File: python.info,  Node: StreamWriter Objects,  Next: StreamReader Objects,  Prev: IncrementalDecoder Objects,  Up: Codec Base Classes

5.7.8.5 StreamWriter Objects
............................

The *note StreamWriter: a3b. class is a subclass of `Codec' and defines
the following methods which every stream writer must define in order to
be compatible with the Python codec registry.

 -- Class: codecs.StreamWriter (stream[, errors])
     Constructor for a *note StreamWriter: a3b. instance.

     All stream writers must provide this constructor interface. They
     are free to add additional keyword arguments, but only the ones
     defined here are used by the Python codec registry.

     _stream_ must be a file-like object open for writing binary data.

     The *note StreamWriter: a3b. may implement different error
     handling schemes by providing the _errors_ keyword argument. These
     parameters are predefined:

        * `'strict'' Raise *note ValueError: 233. (or a subclass); this
          is the default.

        * `'ignore'' Ignore the character and continue with the next.

        * `'replace'' Replace with a suitable replacement character

        * `'xmlcharrefreplace'' Replace with the appropriate XML
          character reference

        * `'backslashreplace'' Replace with backslashed escape
          sequences.

     The _errors_ argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note StreamWriter: a3b. object.

     The set of allowed values for the _errors_ argument can be
     extended with *note register_error(): 437.

      -- Method: write (object)
          Writes the object's contents encoded to the stream.

      -- Method: writelines (list)
          Writes the concatenated list of strings to the stream
          (possibly by reusing the *note write(): a65. method).

      -- Method: reset ()
          Flushes and resets the codec buffers used for keeping state.

          Calling this method should ensure that the data on the output
          is put into a clean state that allows appending of new fresh
          data without having to rescan the whole stream to recover
          state.

  In addition to the above methods, the *note StreamWriter: a3b. must
also inherit all other methods and attributes from the underlying
stream.


File: python.info,  Node: StreamReader Objects,  Next: StreamReaderWriter Objects,  Prev: StreamWriter Objects,  Up: Codec Base Classes

5.7.8.6 StreamReader Objects
............................

The *note StreamReader: a3c. class is a subclass of `Codec' and defines
the following methods which every stream reader must define in order to
be compatible with the Python codec registry.

 -- Class: codecs.StreamReader (stream[, errors])
     Constructor for a *note StreamReader: a3c. instance.

     All stream readers must provide this constructor interface. They
     are free to add additional keyword arguments, but only the ones
     defined here are used by the Python codec registry.

     _stream_ must be a file-like object open for reading (binary) data.

     The *note StreamReader: a3c. may implement different error
     handling schemes by providing the _errors_ keyword argument. These
     parameters are defined:

        * `'strict'' Raise *note ValueError: 233. (or a subclass); this
          is the default.

        * `'ignore'' Ignore the character and continue with the next.

        * `'replace'' Replace with a suitable replacement character.

     The _errors_ argument will be assigned to an attribute of the same
     name.  Assigning to this attribute makes it possible to switch
     between different error handling strategies during the lifetime of
     the *note StreamReader: a3c. object.

     The set of allowed values for the _errors_ argument can be
     extended with *note register_error(): 437.

      -- Method: read ([size[, chars[, firstline]]])
          Decodes data from the stream and returns the resulting object.

          _chars_ indicates the number of characters to read from the
          stream. *note read(): a6a. will never return more than
          _chars_ characters, but it might return less, if there are
          not enough characters available.

          _size_ indicates the approximate maximum number of bytes to
          read from the stream for decoding purposes. The decoder can
          modify this setting as appropriate. The default value -1
          indicates to read and decode as much as possible.  _size_ is
          intended to prevent having to decode huge files in one step.

          _firstline_ indicates that it would be sufficient to only
          return the first line, if there are decoding errors on later
          lines.

          The method should use a greedy read strategy meaning that it
          should read as much data as is allowed within the definition
          of the encoding and the given size, e.g.  if optional
          encoding endings or state markers are available on the
          stream, these should be read too.

          Changed in version 2.4: _chars_ argument added.

          Changed in version 2.4.2: _firstline_ argument added.

      -- Method: readline ([size[, keepends]])
          Read one line from the input stream and return the decoded
          data.

          _size_, if given, is passed as size argument to the stream's
          *note readline(): 144. method.

          If _keepends_ is false line-endings will be stripped from the
          lines returned.

          Changed in version 2.4: _keepends_ argument added.

      -- Method: readlines ([sizehint[, keepends]])
          Read all lines available on the input stream and return them
          as a list of lines.

          Line-endings are implemented using the codec's decoder method
          and are included in the list entries if _keepends_ is true.

          _sizehint_, if given, is passed as the _size_ argument to the
          stream's *note read(): a6a. method.

      -- Method: reset ()
          Resets the codec buffers used for keeping state.

          Note that no stream repositioning should take place.  This
          method is primarily intended to be able to recover from
          decoding errors.

  In addition to the above methods, the *note StreamReader: a3c. must
also inherit all other methods and attributes from the underlying
stream.

  The next two base classes are included for convenience. They are not
needed by the codec registry, but may provide useful in practice.


File: python.info,  Node: StreamReaderWriter Objects,  Next: StreamRecoder Objects,  Prev: StreamReader Objects,  Up: Codec Base Classes

5.7.8.7 StreamReaderWriter Objects
..................................

The *note StreamReaderWriter: a70. allows wrapping streams which work
in both read and write modes.

  The design is such that one can use the factory functions returned by
the *note lookup(): 938. function to construct the instance.

 -- Class: codecs.StreamReaderWriter (stream, Reader, Writer, errors)
     Creates a *note StreamReaderWriter: a70. instance. _stream_ must
     be a file-like object. _Reader_ and _Writer_ must be factory
     functions or classes providing the *note StreamReader: a3c. and
     *note StreamWriter: a3b. interface resp. Error handling is done in
     the same way as defined for the stream readers and writers.

  *note StreamReaderWriter: a70. instances define the combined
interfaces of *note StreamReader: a3c. and *note StreamWriter: a3b.
classes. They inherit all other methods and attributes from the
underlying stream.


File: python.info,  Node: StreamRecoder Objects,  Prev: StreamReaderWriter Objects,  Up: Codec Base Classes

5.7.8.8 StreamRecoder Objects
.............................

The *note StreamRecoder: a73. provide a frontend - backend view of
encoding data which is sometimes useful when dealing with different
encoding environments.

  The design is such that one can use the factory functions returned by
the *note lookup(): 938. function to construct the instance.

 -- Class: codecs.StreamRecoder (stream, encode, decode, Reader,
          Writer, errors)
     Creates a *note StreamRecoder: a73. instance which implements a
     two-way conversion: _encode_ and _decode_ work on the frontend
     (the input to `read()' and output of `write()') while _Reader_ and
     _Writer_ work on the backend (reading and writing to the stream).

     You can use these objects to do transparent direct recodings from
     e.g. Latin-1 to UTF-8 and back.

     _stream_ must be a file-like object.

     _encode_, _decode_ must adhere to the `Codec' interface. _Reader_,
     _Writer_ must be factory functions or classes providing objects of
     the *note StreamReader: a3c. and *note StreamWriter: a3b.
     interface respectively.

     _encode_ and _decode_ are needed for the frontend translation,
     _Reader_ and _Writer_ for the backend translation.  The
     intermediate format used is determined by the two sets of codecs,
     e.g. the Unicode codecs will use Unicode as the intermediate
     encoding.

     Error handling is done in the same way as defined for the stream
     readers and writers.

  *note StreamRecoder: a73. instances define the combined interfaces of
*note StreamReader: a3c. and *note StreamWriter: a3b. classes. They
inherit all other methods and attributes from the underlying stream.


File: python.info,  Node: Encodings and Unicode,  Next: Standard Encodings,  Prev: Codec Base Classes,  Up: codecs --- Codec registry and base classes

5.7.8.9 Encodings and Unicode
.............................

Unicode strings are stored internally as sequences of codepoints (to be
precise as *note Py_UNICODE: a76. arrays). Depending on the way Python
is compiled (either via `--enable-unicode=ucs2' or
`--enable-unicode=ucs4', with the former being the default) *note
Py_UNICODE: a76. is either a 16-bit or 32-bit data type. Once a Unicode
object is used outside of CPU and memory, CPU endianness and how these
arrays are stored as bytes become an issue.  Transforming a unicode
object into a sequence of bytes is called encoding and recreating the
unicode object from the sequence of bytes is known as decoding.  There
are many different methods for how this transformation can be done
(these methods are also called encodings). The simplest method is to
map the codepoints 0-255 to the bytes `0x0'-`0xff'. This means that a
unicode object that contains codepoints above `U+00FF' can't be encoded
with this method (which is called `'latin-1'' or `'iso-8859-1'').
`unicode.encode()' will raise a *note UnicodeEncodeError: 944. that
looks like this: `UnicodeEncodeError: 'latin-1' codec can't encode
character u'\u1234' in position 3: ordinal not in range(256)'.

  There's another group of encodings (the so called charmap encodings)
that choose a different subset of all unicode code points and how these
codepoints are mapped to the bytes `0x0'-`0xff'. To see how this is
done simply open e.g. `encodings/cp1252.py' (which is an encoding that
is used primarily on Windows). There's a string constant with 256
characters that shows you which character is mapped to which byte value.

  All of these encodings can only encode 256 of the 1114112 codepoints
defined in unicode. A simple and straightforward way that can store
each Unicode code point, is to store each codepoint as four consecutive
bytes. There are two possibilities: store the bytes in big endian or in
little endian order. These two encodings are called `UTF-32-BE' and
`UTF-32-LE' respectively. Their disadvantage is that if e.g. you use
`UTF-32-BE' on a little endian machine you will always have to swap
bytes on encoding and decoding. `UTF-32' avoids this problem: bytes
will always be in natural endianness. When these bytes are read by a
CPU with a different endianness, then bytes have to be swapped though.
To be able to detect the endianness of a `UTF-16' or `UTF-32' byte
sequence, there's the so called BOM ("Byte Order Mark"). This is the
Unicode character `U+FEFF'. This character can be prepended to every
`UTF-16' or `UTF-32' byte sequence. The byte swapped version of this
character (`0xFFFE') is an illegal character that may not appear in a
Unicode text. So when the first character in an `UTF-16' or `UTF-32'
byte sequence appears to be a `U+FFFE' the bytes have to be swapped on
decoding.  Unfortunately the character `U+FEFF' had a second purpose as
a `ZERO WIDTH NO-BREAK SPACE': a character that has no width and
doesn't allow a word to be split. It can e.g. be used to give hints to
a ligature algorithm.  With Unicode 4.0 using `U+FEFF' as a `ZERO WIDTH
NO-BREAK SPACE' has been deprecated (with `U+2060' (`WORD JOINER')
assuming this role). Nevertheless Unicode software still must be able
to handle `U+FEFF' in both roles: as a BOM it's a device to determine
the storage layout of the encoded bytes, and vanishes once the byte
sequence has been decoded into a Unicode string; as a `ZERO WIDTH
NO-BREAK SPACE' it's a normal character that will be decoded like any
other.

  There's another encoding that is able to encoding the full range of
Unicode characters: UTF-8. UTF-8 is an 8-bit encoding, which means
there are no issues with byte order in UTF-8. Each byte in a UTF-8 byte
sequence consists of two parts: marker bits (the most significant bits)
and payload bits. The marker bits are a sequence of zero to four `1'
bits followed by a `0' bit. Unicode characters are encoded like this
(with x being payload bits, which when concatenated give the Unicode
character):

Range                                   Encoding
------------------------------------------------------------------------------------------- 
`U-00000000' ... `U-0000007F'           0xxxxxxx
`U-00000080' ... `U-000007FF'           110xxxxx 10xxxxxx
`U-00000800' ... `U-0000FFFF'           1110xxxx 10xxxxxx 10xxxxxx
`U-00010000' ... `U-0010FFFF'           11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

  The least significant bit of the Unicode character is the rightmost x
bit.

  As UTF-8 is an 8-bit encoding no BOM is required and any `U+FEFF'
character in the decoded Unicode string (even if it's the first
character) is treated as a `ZERO WIDTH NO-BREAK SPACE'.

  Without external information it's impossible to reliably determine
which encoding was used for encoding a Unicode string. Each charmap
encoding can decode any random byte sequence. However that's not
possible with UTF-8, as UTF-8 byte sequences have a structure that
doesn't allow arbitrary byte sequences. To increase the reliability
with which a UTF-8 encoding can be detected, Microsoft invented a
variant of UTF-8 (that Python 2.5 calls `"utf-8-sig"') for its Notepad
program: Before any of the Unicode characters is written to the file, a
UTF-8 encoded BOM (which looks like this as a byte sequence: `0xef',
`0xbb', `0xbf') is written. As it's rather improbable that any charmap
encoded file starts with these byte values (which would e.g.  map to

         LATIN SMALL LETTER I WITH DIAERESIS 
         RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK 
         INVERTED QUESTION MARK 


  in iso-8859-1), this increases the probability that a `utf-8-sig'
encoding can be correctly guessed from the byte sequence. So here the
BOM is not used to be able to determine the byte order used for
generating the byte sequence, but as a signature that helps in guessing
the encoding. On encoding the utf-8-sig codec will write `0xef',
`0xbb', `0xbf' as the first three bytes to the file. On decoding
`utf-8-sig' will skip those three bytes if they appear as the first
three bytes in the file.  In UTF-8, the use of the BOM is discouraged
and should generally be avoided.


File: python.info,  Node: Standard Encodings,  Next: encodings idna --- Internationalized Domain Names in Applications,  Prev: Encodings and Unicode,  Up: codecs --- Codec registry and base classes

5.7.8.10 Standard Encodings
...........................

Python comes with a number of codecs built-in, either implemented as C
functions or with dictionaries as mapping tables. The following table
lists the codecs by name, together with a few common aliases, and the
languages for which the encoding is likely used. Neither the list of
aliases nor the list of languages is meant to be exhaustive. Notice
that spelling alternatives that only differ in case or use a hyphen
instead of an underscore are also valid aliases; therefore, e.g.
`'utf-8'' is a valid alias for the `'utf_8'' codec.

  Many of the character sets support the same languages. They vary in
individual characters (e.g. whether the EURO SIGN is supported or not),
and in the assignment of characters to code positions. For the European
languages in particular, the following variants typically exist:

   * an ISO 8859 codeset

   * a Microsoft Windows code page, which is typically derived from a
     8859 codeset, but replaces control characters with additional
     graphic characters

   * an IBM EBCDIC code page

   * an IBM PC code page, which is ASCII compatible

Codec                 Aliases                              Languages
------------------------------------------------------------------------------------------------ 
ascii                 646, us-ascii                        English
big5                  big5-tw, csbig5                      Traditional Chinese
big5hkscs             big5-hkscs, hkscs                    Traditional Chinese
cp037                 IBM037, IBM039                       English
cp424                 EBCDIC-CP-HE, IBM424                 Hebrew
cp437                 437, IBM437                          English
cp500                 EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500   Western Europe
cp720                                                      Arabic
cp737                                                      Greek
cp775                 IBM775                               Baltic languages
cp850                 850, IBM850                          Western Europe
cp852                 852, IBM852                          Central and Eastern Europe
cp855                 855, IBM855                          Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
cp856                                                      Hebrew
cp857                 857, IBM857                          Turkish
cp858                 858, IBM858                          Western Europe
cp860                 860, IBM860                          Portuguese
cp861                 861, CP-IS, IBM861                   Icelandic
cp862                 862, IBM862                          Hebrew
cp863                 863, IBM863                          Canadian
cp864                 IBM864                               Arabic
cp865                 865, IBM865                          Danish, Norwegian
cp866                 866, IBM866                          Russian
cp869                 869, CP-GR, IBM869                   Greek
cp874                                                      Thai
cp875                                                      Greek
cp932                 932, ms932, mskanji, ms-kanji        Japanese
cp949                 949, ms949, uhc                      Korean
cp950                 950, ms950                           Traditional Chinese
cp1006                                                     Urdu
cp1026                ibm1026                              Turkish
cp1140                ibm1140                              Western Europe
cp1250                windows-1250                         Central and Eastern Europe
cp1251                windows-1251                         Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
cp1252                windows-1252                         Western Europe
cp1253                windows-1253                         Greek
cp1254                windows-1254                         Turkish
cp1255                windows-1255                         Hebrew
cp1256                windows-1256                         Arabic
cp1257                windows-1257                         Baltic languages
cp1258                windows-1258                         Vietnamese
euc_jp                eucjp, ujis, u-jis                   Japanese
euc_jis_2004          jisx0213, eucjis2004                 Japanese
euc_jisx0213          eucjisx0213                          Japanese
euc_kr                euckr, korean, ksc5601, ks_c-5601,   Korean
                      ks_c-5601-1987, ksx1001, ks_x-1001   
gb2312                chinese, csiso58gb231280, euc- cn,   Simplified Chinese
                      euccn, eucgb2312-cn, gb2312-1980,    
                      gb2312-80, iso- ir-58                
gbk                   936, cp936, ms936                    Unified Chinese
gb18030               gb18030-2000                         Unified Chinese
hz                    hzgb, hz-gb, hz-gb-2312              Simplified Chinese
iso2022_jp            csiso2022jp, iso2022jp, iso-2022-jp  Japanese
iso2022_jp_1          iso2022jp-1, iso-2022-jp-1           Japanese
iso2022_jp_2          iso2022jp-2, iso-2022-jp-2           Japanese, Korean, Simplified
                                                           Chinese, Western Europe, Greek
iso2022_jp_2004       iso2022jp-2004, iso-2022-jp-2004     Japanese
iso2022_jp_3          iso2022jp-3, iso-2022-jp-3           Japanese
iso2022_jp_ext        iso2022jp-ext, iso-2022-jp-ext       Japanese
iso2022_kr            csiso2022kr, iso2022kr, iso-2022-kr  Korean
latin_1               iso-8859-1, iso8859-1, 8859, cp819,  West Europe
                      latin, latin1, L1                    
iso8859_2             iso-8859-2, latin2, L2               Central and Eastern Europe
iso8859_3             iso-8859-3, latin3, L3               Esperanto, Maltese
iso8859_4             iso-8859-4, latin4, L4               Baltic languages
iso8859_5             iso-8859-5, cyrillic                 Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
iso8859_6             iso-8859-6, arabic                   Arabic
iso8859_7             iso-8859-7, greek, greek8            Greek
iso8859_8             iso-8859-8, hebrew                   Hebrew
iso8859_9             iso-8859-9, latin5, L5               Turkish
iso8859_10            iso-8859-10, latin6, L6              Nordic languages
iso8859_13            iso-8859-13, latin7, L7              Baltic languages
iso8859_14            iso-8859-14, latin8, L8              Celtic languages
iso8859_15            iso-8859-15, latin9, L9              Western Europe
iso8859_16            iso-8859-16, latin10, L10            South-Eastern Europe
johab                 cp1361, ms1361                       Korean
koi8_r                                                     Russian
koi8_u                                                     Ukrainian
mac_cyrillic          maccyrillic                          Bulgarian, Byelorussian,
                                                           Macedonian, Russian, Serbian
mac_greek             macgreek                             Greek
mac_iceland           maciceland                           Icelandic
mac_latin2            maclatin2, maccentraleurope          Central and Eastern Europe
mac_roman             macroman                             Western Europe
mac_turkish           macturkish                           Turkish
ptcp154               csptcp154, pt154, cp154,             Kazakh
                      cyrillic-asian                       
shift_jis             csshiftjis, shiftjis, sjis, s_jis    Japanese
shift_jis_2004        shiftjis2004, sjis_2004, sjis2004    Japanese
shift_jisx0213        shiftjisx0213, sjisx0213, s_jisx0213 Japanese
utf_32                U32, utf32                           all languages
utf_32_be             UTF-32BE                             all languages
utf_32_le             UTF-32LE                             all languages
utf_16                U16, utf16                           all languages
utf_16_be             UTF-16BE                             all languages (BMP only)
utf_16_le             UTF-16LE                             all languages (BMP only)
utf_7                 U7, unicode-1-1-utf-7                all languages
utf_8                 U8, UTF, utf8                        all languages
utf_8_sig                                                  all languages

  A number of codecs are specific to Python, so their codec names have
no meaning outside Python. Some of them don't convert from Unicode
strings to byte strings, but instead use the property of the Python
codecs machinery that any bijective function with one argument can be
considered as an encoding.

  For the codecs listed below, the result in the "encoding" direction
is always a byte string. The result of the "decoding" direction is
listed as operand type in the table.

Codec                    Aliases                         Operand type         Purpose
-------------------------------------------------------------------------------------------------------------- 
base64_codec             base64, base-64                 byte string          Convert operand to MIME base64
                                                                              (the result always includes a
                                                                              trailing `'\n'')
bz2_codec                bz2                             byte string          Compress the operand using bz2
hex_codec                hex                             byte string          Convert operand to hexadecimal
                                                                              representation, with two
                                                                              digits per byte
idna                                                     Unicode string       Implements RFC 3490(1), see
                                                                              also *note encodings.idna: c6.
mbcs                     dbcs                            Unicode string       Windows only: Encode operand
                                                                              according to the ANSI codepage
                                                                              (CP_ACP)
palmos                                                   Unicode string       Encoding of PalmOS 3.5
punycode                                                 Unicode string       Implements RFC 3492(2)
quopri_codec             quopri, quoted-printable,       byte string          Convert operand to MIME quoted
                         quotedprintable                                      printable
raw_unicode_escape                                       Unicode string       Produce a string that is
                                                                              suitable as raw Unicode
                                                                              literal in Python source code
rot_13                   rot13                           Unicode string       Returns the Caesar-cypher
                                                                              encryption of the operand
string_escape                                            byte string          Produce a string that is
                                                                              suitable as string literal in
                                                                              Python source code
undefined                                                any                  Raise an exception for all
                                                                              conversions. Can be used as
                                                                              the system encoding if no
                                                                              automatic *note coercion: a78.
                                                                              between byte and Unicode
                                                                              strings is desired.
unicode_escape                                           Unicode string       Produce a string that is
                                                                              suitable as Unicode literal in
                                                                              Python source code
unicode_internal                                         Unicode string       Return the internal
                                                                              representation of the operand
uu_codec                 uu                              byte string          Convert the operand using
                                                                              uuencode
zlib_codec               zip, zlib                       byte string          Compress the operand using gzip

  New in version 2.3: The `idna' and `punycode' encodings.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc3490.html

  (2) http://tools.ietf.org/html/rfc3492.html


File: python.info,  Node: encodings idna --- Internationalized Domain Names in Applications,  Next: encodings utf_8_sig --- UTF-8 codec with BOM signature,  Prev: Standard Encodings,  Up: codecs --- Codec registry and base classes

5.7.8.11 `encodings.idna' -- Internationalized Domain Names in Applications
...........................................................................

New in version 2.3.

  This module implements RFC 3490(1) (Internationalized Domain Names in
Applications) and RFC 3492(2) (Nameprep: A Stringprep Profile for
Internationalized Domain Names (IDN)). It builds upon the `punycode'
encoding and *note stringprep: 165.

  These RFCs together define a protocol to support non-ASCII characters
in domain names. A domain name containing non-ASCII characters (such as
`www.Alliancefrançaise.nu') is converted into an ASCII-compatible
encoding (ACE, such as `www.xn--alliancefranaise-npb.nu'). The ACE form
of the domain name is then used in all places where arbitrary
characters are not allowed by the protocol, such as DNS queries, HTTP
`Host' fields, and so on. This conversion is carried out in the
application; if possible invisible to the user: The application should
transparently convert Unicode domain labels to IDNA on the wire, and
convert back ACE labels to Unicode before presenting them to the user.

  Python supports this conversion in several ways:  the `idna' codec
performs conversion between Unicode and ACE, separating an input string
into labels based on the separator characters defined in section 3.1(3)
(1) of RFC 3490(4) and converting each label to ACE as required, and
conversely separating an input byte string into labels based on the `.'
separator and converting any ACE labels found into unicode.
Furthermore, the *note socket: 15c. module transparently converts
Unicode host names to ACE, so that applications need not be concerned
about converting host names themselves when they pass them to the
socket module. On top of that, modules that have host names as function
parameters, such as *note httplib: ee. and *note ftplib: d8, accept
Unicode host names (*note httplib: ee. then also transparently sends an
IDNA hostname in the `Host' field if it sends that field at all).

  When receiving host names from the wire (such as in reverse name
lookup), no automatic conversion to Unicode is performed: Applications
wishing to present such host names to the user should decode them to
Unicode.

  The module *note encodings.idna: c6. also implements the nameprep
procedure, which performs certain normalizations on host names, to
achieve case-insensitivity of international domain names, and to unify
similar characters. The nameprep functions can be used directly if
desired.

 -- Function: encodings.idna.nameprep (label)
     Return the nameprepped version of _label_. The implementation
     currently assumes query strings, so `AllowUnassigned' is true.

 -- Function: encodings.idna.ToASCII (label)
     Convert a label to ASCII, as specified in RFC 3490(5).
     `UseSTD3ASCIIRules' is assumed to be false.

 -- Function: encodings.idna.ToUnicode (label)
     Convert a label to Unicode, as specified in RFC 3490(6).

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc3490.html

  (2) http://tools.ietf.org/html/rfc3492.html

  (3) http://tools.ietf.org/html/rfc3490#section-3.1

  (4) http://tools.ietf.org/html/rfc3490.html

  (5) http://tools.ietf.org/html/rfc3490.html

  (6) http://tools.ietf.org/html/rfc3490.html


File: python.info,  Node: encodings utf_8_sig --- UTF-8 codec with BOM signature,  Prev: encodings idna --- Internationalized Domain Names in Applications,  Up: codecs --- Codec registry and base classes

5.7.8.12 `encodings.utf_8_sig' -- UTF-8 codec with BOM signature
................................................................

New in version 2.5.

  This module implements a variant of the UTF-8 codec: On encoding a
UTF-8 encoded BOM will be prepended to the UTF-8 encoded bytes. For the
stateful encoder this is only done once (on the first write to the byte
stream).  For decoding an optional UTF-8 encoded BOM at the start of
the data will be skipped.


File: python.info,  Node: unicodedata --- Unicode Database,  Next: stringprep --- Internet String Preparation,  Prev: codecs --- Codec registry and base classes,  Up: String Services

5.7.9 `unicodedata' -- Unicode Database
---------------------------------------

This module provides access to the Unicode Character Database which
defines character properties for all Unicode characters. The data in
this database is based on the `UnicodeData.txt' file version 5.2.0
which is publicly available from <ftp://ftp.unicode.org/>.

  The module uses the same names and symbols as defined by the
UnicodeData File Format 5.2.0 (see
<http://www.unicode.org/reports/tr44/tr44-4.html>).  It defines the
following functions:

 -- Function: unicodedata.lookup (name)
     Look up character by name.  If a character with the given name is
     found, return the corresponding Unicode character.  If not found,
     *note KeyError: 202. is raised.

 -- Function: unicodedata.name (unichr[, default])
     Returns the name assigned to the Unicode character _unichr_ as a
     string. If no name is defined, _default_ is returned, or, if not
     given, *note ValueError: 233. is raised.

 -- Function: unicodedata.decimal (unichr[, default])
     Returns the decimal value assigned to the Unicode character
     _unichr_ as integer.  If no such value is defined, _default_ is
     returned, or, if not given, *note ValueError: 233. is raised.

 -- Function: unicodedata.digit (unichr[, default])
     Returns the digit value assigned to the Unicode character _unichr_
     as integer.  If no such value is defined, _default_ is returned,
     or, if not given, *note ValueError: 233. is raised.

 -- Function: unicodedata.numeric (unichr[, default])
     Returns the numeric value assigned to the Unicode character
     _unichr_ as float.  If no such value is defined, _default_ is
     returned, or, if not given, *note ValueError: 233. is raised.

 -- Function: unicodedata.category (unichr)
     Returns the general category assigned to the Unicode character
     _unichr_ as string.

 -- Function: unicodedata.bidirectional (unichr)
     Returns the bidirectional class assigned to the Unicode character
     _unichr_ as string. If no such value is defined, an empty string
     is returned.

 -- Function: unicodedata.combining (unichr)
     Returns the canonical combining class assigned to the Unicode
     character _unichr_ as integer. Returns `0' if no combining class
     is defined.

 -- Function: unicodedata.east_asian_width (unichr)
     Returns the east asian width assigned to the Unicode character
     _unichr_ as string.

     New in version 2.4.

 -- Function: unicodedata.mirrored (unichr)
     Returns the mirrored property assigned to the Unicode character
     _unichr_ as integer. Returns `1' if the character has been
     identified as a "mirrored" character in bidirectional text, `0'
     otherwise.

 -- Function: unicodedata.decomposition (unichr)
     Returns the character decomposition mapping assigned to the
     Unicode character _unichr_ as string. An empty string is returned
     in case no such mapping is defined.

 -- Function: unicodedata.normalize (form, unistr)
     Return the normal form _form_ for the Unicode string _unistr_.
     Valid values for _form_ are 'NFC', 'NFKC', 'NFD', and 'NFKD'.

     The Unicode standard defines various normalization forms of a
     Unicode string, based on the definition of canonical equivalence
     and compatibility equivalence.  In Unicode, several characters can
     be expressed in various way. For example, the character U+00C7
     (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the
     sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING
     CEDILLA).

     For each character, there are two normal forms: normal form C and
     normal form D.  Normal form D (NFD) is also known as canonical
     decomposition, and translates each character into its decomposed
     form. Normal form C (NFC) first applies a canonical decomposition,
     then composes pre-combined characters again.

     In addition to these two forms, there are two additional normal
     forms based on compatibility equivalence. In Unicode, certain
     characters are supported which normally would be unified with
     other characters. For example, U+2160 (ROMAN NUMERAL ONE) is
     really the same thing as U+0049 (LATIN CAPITAL LETTER I).
     However, it is supported in Unicode for compatibility with
     existing character sets (e.g. gb2312).

     The normal form KD (NFKD) will apply the compatibility
     decomposition, i.e.  replace all compatibility characters with
     their equivalents. The normal form KC (NFKC) first applies the
     compatibility decomposition, followed by the canonical composition.

     Even if two unicode strings are normalized and look the same to a
     human reader, if one has combining characters and the other
     doesn't, they may not compare equal.

     New in version 2.3.

  In addition, the module exposes the following constant:

 -- Data: unicodedata.unidata_version
     The version of the Unicode database used in this module.

     New in version 2.3.

 -- Data: unicodedata.ucd_3_2_0
     This is an object that has the same methods as the entire module,
     but uses the Unicode database version 3.2 instead, for
     applications that require this specific version of the Unicode
     database (such as IDNA).

     New in version 2.5.

  Examples:

    >>> import unicodedata
    >>> unicodedata.lookup('LEFT CURLY BRACKET')
    u'{'
    >>> unicodedata.name(u'/')
    'SOLIDUS'
    >>> unicodedata.decimal(u'9')
    9
    >>> unicodedata.decimal(u'a')
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: not a decimal
    >>> unicodedata.category(u'A')  # 'L'etter, 'u'ppercase
    'Lu'
    >>> unicodedata.bidirectional(u'\u0660') # 'A'rabic, 'N'umber
    'AN'



File: python.info,  Node: stringprep --- Internet String Preparation,  Next: fpformat --- Floating point conversions,  Prev: unicodedata --- Unicode Database,  Up: String Services

5.7.10 `stringprep' -- Internet String Preparation
--------------------------------------------------

New in version 2.3.

  When identifying things (such as host names) in the internet, it is
often necessary to compare such identifications for "equality". Exactly
how this comparison is executed may depend on the application domain,
e.g. whether it should be case-insensitive or not. It may be also
necessary to restrict the possible identifications, to allow only
identifications consisting of "printable" characters.

  RFC 3454(1) defines a procedure for "preparing" Unicode strings in
internet protocols. Before passing strings onto the wire, they are
processed with the preparation procedure, after which they have a
certain normalized form. The RFC defines a set of tables, which can be
combined into profiles. Each profile must define which tables it uses,
and what other optional parts of the `stringprep' procedure are part of
the profile. One example of a `stringprep' profile is `nameprep', which
is used for internationalized domain names.

  The module *note stringprep: 165. only exposes the tables from RFC
3454. As these tables would be very large to represent them as
dictionaries or lists, the module uses the Unicode character database
internally. The module source code itself was generated using the
`mkstringprep.py' utility.

  As a result, these tables are exposed as functions, not as data
structures.  There are two kinds of tables in the RFC: sets and
mappings. For a set, *note stringprep: 165. provides the
"characteristic function", i.e. a function that returns true if the
parameter is part of the set. For mappings, it provides the mapping
function: given the key, it returns the associated value. Below is a
list of all functions available in the module.

 -- Function: stringprep.in_table_a1 (code)
     Determine whether _code_ is in tableA.1 (Unassigned code points in
     Unicode 3.2).

 -- Function: stringprep.in_table_b1 (code)
     Determine whether _code_ is in tableB.1 (Commonly mapped to
     nothing).

 -- Function: stringprep.map_table_b2 (code)
     Return the mapped value for _code_ according to tableB.2 (Mapping
     for case-folding used with NFKC).

 -- Function: stringprep.map_table_b3 (code)
     Return the mapped value for _code_ according to tableB.3 (Mapping
     for case-folding used with no normalization).

 -- Function: stringprep.in_table_c11 (code)
     Determine whether _code_ is in tableC.1.1  (ASCII space
     characters).

 -- Function: stringprep.in_table_c12 (code)
     Determine whether _code_ is in tableC.1.2  (Non-ASCII space
     characters).

 -- Function: stringprep.in_table_c11_c12 (code)
     Determine whether _code_ is in tableC.1  (Space characters, union
     of C.1.1 and C.1.2).

 -- Function: stringprep.in_table_c21 (code)
     Determine whether _code_ is in tableC.2.1  (ASCII control
     characters).

 -- Function: stringprep.in_table_c22 (code)
     Determine whether _code_ is in tableC.2.2  (Non-ASCII control
     characters).

 -- Function: stringprep.in_table_c21_c22 (code)
     Determine whether _code_ is in tableC.2  (Control characters,
     union of C.2.1 and C.2.2).

 -- Function: stringprep.in_table_c3 (code)
     Determine whether _code_ is in tableC.3  (Private use).

 -- Function: stringprep.in_table_c4 (code)
     Determine whether _code_ is in tableC.4  (Non-character code
     points).

 -- Function: stringprep.in_table_c5 (code)
     Determine whether _code_ is in tableC.5  (Surrogate codes).

 -- Function: stringprep.in_table_c6 (code)
     Determine whether _code_ is in tableC.6  (Inappropriate for plain
     text).

 -- Function: stringprep.in_table_c7 (code)
     Determine whether _code_ is in tableC.7  (Inappropriate for
     canonical representation).

 -- Function: stringprep.in_table_c8 (code)
     Determine whether _code_ is in tableC.8  (Change display
     properties or are deprecated).

 -- Function: stringprep.in_table_c9 (code)
     Determine whether _code_ is in tableC.9  (Tagging characters).

 -- Function: stringprep.in_table_d1 (code)
     Determine whether _code_ is in tableD.1  (Characters with
     bidirectional property "R" or "AL").

 -- Function: stringprep.in_table_d2 (code)
     Determine whether _code_ is in tableD.2  (Characters with
     bidirectional property "L").

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc3454.html


File: python.info,  Node: fpformat --- Floating point conversions,  Prev: stringprep --- Internet String Preparation,  Up: String Services

5.7.11 `fpformat' -- Floating point conversions
-----------------------------------------------

Deprecated since version 2.6: The *note fpformat: d5. module has been
removed in Python 3.

  The *note fpformat: d5. module defines functions for dealing with
floating point numbers representations in 100% pure Python.

     Note: This module is unnecessary: everything here can be done
     using the `%' string interpolation operator described in the *note
     String Formatting Operations: 51b. section.

  The *note fpformat: d5. module defines the following functions and an
exception:

 -- Function: fpformat.fix (x, digs)
     Format _x_ as `[-]ddd.ddd' with _digs_ digits after the point and
     at least one digit before. If `digs <= 0', the decimal point is
     suppressed.

     _x_ can be either a number or a string that looks like one. _digs_
     is an integer.

     Return value is a string.

 -- Function: fpformat.sci (x, digs)
     Format _x_ as `[-]d.dddE[+-]ddd' with _digs_ digits after the
     point and exactly one digit before. If `digs <= 0', one digit is
     kept and the point is suppressed.

     _x_ can be either a real number, or a string that looks like one.
     _digs_ is an integer.

     Return value is a string.

 -- Exception: fpformat.NotANumber
     Exception raised when a string passed to *note fix(): aa3. or
     *note sci(): aa4. as the _x_ parameter does not look like a
     number. This is a subclass of *note ValueError: 233.  when the
     standard exceptions are strings.  The exception value is the
     improperly formatted string that caused the exception to be raised.

  Example:

    >>> import fpformat
    >>> fpformat.fix(1.23, 1)
    '1.2'



File: python.info,  Node: Data Types,  Next: Numeric and Mathematical Modules,  Prev: String Services,  Up: The Python Standard Library

5.8 Data Types
==============

The modules described in this chapter provide a variety of specialized
data types such as dates and times, fixed-type arrays, heap queues,
synchronized queues, and sets.

  Python also provides some built-in data types, in particular, *note
dict: 2fe, *note list: 3b5, *note set: 363. (which along with *note
frozenset: 364, replaces the deprecated *note sets: 14f. module), and
*note tuple: 401. The *note str: 1e7. class can be used to handle
binary data and 8-bit text, and the *note unicode: 1f2. class to handle
Unicode text.

  The following modules are documented in this chapter:

* Menu:

* datetime: datetime --- Basic date and time types. Basic date and time types
* calendar: calendar --- General calendar-related functions. General calendar-related functions
* collections: collections --- High-performance container datatypes. High-performance container datatypes
* heapq: heapq --- Heap queue algorithm. Heap queue algorithm
* bisect: bisect --- Array bisection algorithm. Array bisection algorithm
* array: array --- Efficient arrays of numeric values. Efficient arrays of numeric values
* sets: sets --- Unordered collections of unique elements. Unordered collections of unique elements
* sched: sched --- Event scheduler. Event scheduler
* mutex: mutex --- Mutual exclusion support. Mutual exclusion support
* Queue: Queue --- A synchronized queue class. A synchronized queue class
* weakref: weakref --- Weak references. Weak references
* UserDict: UserDict --- Class wrapper for dictionary objects. Class wrapper for dictionary objects
* UserList: UserList --- Class wrapper for list objects. Class wrapper for list objects
* UserString: UserString --- Class wrapper for string objects. Class wrapper for string objects
* types: types --- Names for built-in types. Names for built-in types
* new: new --- Creation of runtime internal objects. Creation of runtime internal objects
* copy: copy --- Shallow and deep copy operations. Shallow and deep copy operations
* pprint: pprint --- Data pretty printer. Data pretty printer
* repr: repr --- Alternate repr implementation. Alternate repr() implementation

datetime --- Basic date and time types

* Available Types::
* timedelta Objects::
* date Objects::
* datetime Objects::
* time Objects::
* tzinfo Objects::
* strftime() and strptime() Behavior: strftime and strptime Behavior.

collections --- High-performance container datatypes

* Counter objects::
* deque objects::
* defaultdict objects::
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields.
* OrderedDict objects::
* Collections Abstract Base Classes::

deque objects

* deque Recipes::

defaultdict objects

* defaultdict Examples::

OrderedDict objects

* OrderedDict Examples and Recipes::

heapq --- Heap queue algorithm

* Basic Examples::
* Priority Queue Implementation Notes::
* Theory::

bisect --- Array bisection algorithm

* Searching Sorted Lists::
* Other Examples::

sets --- Unordered collections of unique elements

* Set Objects::
* Example::
* Protocol for automatic conversion to immutable::
* Comparison to the built-in set types::

sched --- Event scheduler

* Scheduler Objects::

mutex --- Mutual exclusion support

* Mutex Objects::

Queue --- A synchronized queue class

* Queue Objects::

weakref --- Weak references

* Weak Reference Objects::
* Example: Example<2>.

pprint --- Data pretty printer

* PrettyPrinter Objects::
* pprint Example::

repr --- Alternate repr() implementation

* Repr Objects::
* Subclassing Repr Objects::


File: python.info,  Node: datetime --- Basic date and time types,  Next: calendar --- General calendar-related functions,  Up: Data Types

5.8.1 `datetime' -- Basic date and time types
---------------------------------------------

New in version 2.3.

  The *note datetime: 7d. module supplies classes for manipulating
dates and times in both simple and complex ways.  While date and time
arithmetic is supported, the focus of the implementation is on
efficient attribute extraction for output formatting and manipulation.
For related functionality, see also the *note time: 17a. and *note
calendar: 1f. modules.

  There are two kinds of date and time objects: "naive" and "aware".

  An aware object has sufficient knowledge of applicable algorithmic and
political time adjustments, such as time zone and daylight saving time
information, to locate itself relative to other aware objects.  An
aware object is used to represent a specific moment in time that is not
open to interpretation (1).

  A naive object does not contain enough information to unambiguously
locate itself relative to other date/time objects.  Whether a naive
object represents Coordinated Universal Time (UTC), local time, or time
in some other timezone is purely up to the program, just like it's up
to the program whether a particular number represents metres, miles, or
mass.  Naive objects are easy to understand and to work with, at the
cost of ignoring some aspects of reality.

  For applications requiring aware objects, *note datetime: 2d7. and
*note time: 357.  objects have an optional time zone information
attribute, *note tzinfo: aab, that can be set to an instance of a
subclass of the abstract *note tzinfo: aab. class.  These *note tzinfo:
aab. objects capture information about the offset from UTC time, the
time zone name, and whether Daylight Saving Time is in effect.  Note
that no concrete *note tzinfo: aab. classes are supplied by the *note
datetime: 7d.  module.  Supporting timezones at whatever level of
detail is required is up to the application.  The rules for time
adjustment across the world are more political than rational, and there
is no standard suitable for every application.

  The *note datetime: 7d. module exports the following constants:

 -- Data: datetime.MINYEAR
     The smallest year number allowed in a *note date: 356. or *note
     datetime: 2d7. object.  *note MINYEAR: aac. is `1'.

 -- Data: datetime.MAXYEAR
     The largest year number allowed in a *note date: 356. or *note
     datetime: 2d7. object.  *note MAXYEAR: aad. is `9999'.

See also
........

Module *note calendar: 1f.
     General calendar related functions.

Module *note time: 17a.
     Time access and conversions.

* Menu:

* Available Types::
* timedelta Objects::
* date Objects::
* datetime Objects::
* time Objects::
* tzinfo Objects::
* strftime() and strptime() Behavior: strftime and strptime Behavior.

  ---------- Footnotes ----------

  (1) If, that is, we ignore the effects of Relativity


File: python.info,  Node: Available Types,  Next: timedelta Objects,  Up: datetime --- Basic date and time types

5.8.1.1 Available Types
.......................

 -- Class: datetime.date
     An idealized naive date, assuming the current Gregorian calendar
     always was, and always will be, in effect. Attributes: `year',
     `month', and `day'.

 -- Class: datetime.time
     An idealized time, independent of any particular day, assuming
     that every day has exactly 24*60*60 seconds (there is no notion of
     "leap seconds" here).  Attributes: `hour', `minute', `second',
     `microsecond', and *note tzinfo: aab.

 -- Class: datetime.datetime
     A combination of a date and a time. Attributes: `year', `month',
     `day', `hour', `minute', `second', `microsecond', and *note
     tzinfo: aab.

 -- Class: datetime.timedelta
     A duration expressing the difference between two *note date: 356,
     *note time: 357, or *note datetime: 2d7. instances to microsecond
     resolution.

 -- Class: datetime.tzinfo
     An abstract base class for time zone information objects.  These
     are used by the *note datetime: 2d7. and *note time: 357. classes
     to provide a customizable notion of time adjustment (for example,
     to account for time zone and/or daylight saving time).

  Objects of these types are immutable.

  Objects of the *note date: 356. type are always naive.

  An object of type *note time: 357. or *note datetime: 2d7. may be
naive or aware.  A *note datetime: 2d7. object _d_ is aware if
`d.tzinfo' is not `None' and `d.tzinfo.utcoffset(d)' does not return
`None'.  If `d.tzinfo' is `None', or if `d.tzinfo' is not `None' but
`d.tzinfo.utcoffset(d)' returns `None', _d_ is naive.  A *note time:
357. object _t_ is aware if `t.tzinfo' is not `None' and
`t.tzinfo.utcoffset(None)' does not return `None'.  Otherwise, _t_ is
naive.

  The distinction between naive and aware doesn't apply to *note
timedelta: 20d.  objects.

  Subclass relationships:

    object
        timedelta
        tzinfo
        time
        date
            datetime



File: python.info,  Node: timedelta Objects,  Next: date Objects,  Prev: Available Types,  Up: datetime --- Basic date and time types

5.8.1.2 `timedelta' Objects
...........................

A *note timedelta: 20d. object represents a duration, the difference
between two dates or times.

 -- Class: datetime.timedelta ([days[, seconds[, microseconds[,
          milliseconds[, minutes[, hours[, weeks]]]]]]])
     All arguments are optional and default to `0'.  Arguments may be
     ints, longs, or floats, and may be positive or negative.

     Only _days_, _seconds_ and _microseconds_ are stored internally.
     Arguments are converted to those units:

        * A millisecond is converted to 1000 microseconds.

        * A minute is converted to 60 seconds.

        * An hour is converted to 3600 seconds.

        * A week is converted to 7 days.

     and days, seconds and microseconds are then normalized so that the
     representation is unique, with

        * `0 <= microseconds < 1000000'

        * `0 <= seconds < 3600*24' (the number of seconds in one day)

        * `-999999999 <= days <= 999999999'

     If any argument is a float and there are fractional microseconds,
     the fractional microseconds left over from all arguments are
     combined and their sum is rounded to the nearest microsecond.  If
     no argument is a float, the conversion and normalization processes
     are exact (no information is lost).

     If the normalized value of days lies outside the indicated range,
     *note OverflowError: 2d8. is raised.

     Note that normalization of negative values may be surprising at
     first. For example,

         >>> from datetime import timedelta
         >>> d = timedelta(microseconds=-1)
         >>> (d.days, d.seconds, d.microseconds)
         (-1, 86399, 999999)



  Class attributes are:

 -- Attribute: timedelta.min
     The most negative *note timedelta: 20d. object,
     `timedelta(-999999999)'.

 -- Attribute: timedelta.max
     The most positive *note timedelta: 20d. object,
     `timedelta(days=999999999, hours=23, minutes=59, seconds=59,
     microseconds=999999)'.

 -- Attribute: timedelta.resolution
     The smallest possible difference between non-equal *note
     timedelta: 20d. objects, `timedelta(microseconds=1)'.

  Note that, because of normalization, `timedelta.max' >
`-timedelta.min'.  `-timedelta.max' is not representable as a *note
timedelta: 20d. object.

  Instance attributes (read-only):

Attribute              Value
------------------------------------------------------------------------ 
`days'                 Between -999999999 and 999999999 inclusive
`seconds'              Between 0 and 86399 inclusive
`microseconds'         Between 0 and 999999 inclusive

  Supported operations:

Operation                            Result
----------------------------------------------------------------------------------------- 
`t1 = t2 + t3'                       Sum of _t2_ and _t3_. Afterwards _t1_-_t2_ == _t3_
                                     and _t1_-_t3_ == _t2_ are true. (1)
`t1 = t2 - t3'                       Difference of _t2_ and _t3_. Afterwards _t1_ ==
                                     _t2_ - _t3_ and _t2_ == _t1_ + _t3_ are true. (1)
`t1 = t2 * i or t1 = i * t2'         Delta multiplied by an integer or long.
                                     Afterwards _t1_ // i == _t2_ is true, provided `i
                                     != 0'.
                                     In general, _t1_ * i == _t1_ * (i-1) + _t1_ is
                                     true. (1)
`t1 = t2 // i'                       The floor is computed and the remainder (if any)
                                     is thrown away. (3)
`+t1'                                Returns a *note timedelta: 20d. object with the
                                     same value. (2)
`-t1'                                equivalent to *note timedelta: 20d.(-_t1.days_,
                                     -_t1.seconds_, -_t1.microseconds_), and to _t1_*
                                     -1. (1)(4)
`abs(t)'                             equivalent to +_t_ when `t.days >= 0', and to -_t_
                                     when `t.days < 0'. (2)
`str(t)'                             Returns a string in the form `[D day[s],
                                     ][H]H:MM:SS[.UUUUUU]', where D is negative for
                                     negative `t'. (5)
`repr(t)'                            Returns a string in the form
                                     `datetime.timedelta(D[, S[, U]])', where D is
                                     negative for negative `t'. (5)

  Notes:

  1. This is exact, but may overflow.

  2. This is exact, and cannot overflow.

  3. Division by 0 raises *note ZeroDivisionError: 5a0.

  4. -_timedelta.max_ is not representable as a *note timedelta: 20d.
     object.

  5. String representations of *note timedelta: 20d. objects are
     normalized similarly to their internal representation.  This leads
     to somewhat unusual results for negative timedeltas.  For example:

         >>> timedelta(hours=-5)
         datetime.timedelta(-1, 68400)
         >>> print(_)
         -1 day, 19:00:00



  In addition to the operations listed above *note timedelta: 20d.
objects support certain additions and subtractions with *note date:
356. and *note datetime: 2d7.  objects (see below).

  Comparisons of *note timedelta: 20d. objects are supported with the
*note timedelta: 20d. object representing the smaller duration
considered to be the smaller timedelta. In order to stop mixed-type
comparisons from falling back to the default comparison by object
address, when a *note timedelta: 20d. object is compared to an object
of a different type, *note TypeError: 215. is raised unless the
comparison is `==' or `!='.  The latter cases return *note False: 3aa.
or *note True: 3a9, respectively.

  *note timedelta: 20d. objects are *note hashable: 6e5. (usable as
dictionary keys), support efficient pickling, and in Boolean contexts,
a *note timedelta: 20d. object is considered to be true if and only if
it isn't equal to `timedelta(0)'.

  Instance methods:

 -- Method: timedelta.total_seconds ()
     Return the total number of seconds contained in the duration.
     Equivalent to `(td.microseconds + (td.seconds + td.days * 24 *
     3600) * 10**6) / 10**6' computed with true division enabled.

     Note that for very large time intervals (greater than 270 years on
     most platforms) this method will lose microsecond accuracy.

     New in version 2.7.

  Example usage:

    >>> from datetime import timedelta
    >>> year = timedelta(days=365)
    >>> another_year = timedelta(weeks=40, days=84, hours=23,
    ...                          minutes=50, seconds=600)  # adds up to 365 days
    >>> year.total_seconds()
    31536000.0
    >>> year == another_year
    True
    >>> ten_years = 10 * year
    >>> ten_years, ten_years.days // 365
    (datetime.timedelta(3650), 10)
    >>> nine_years = ten_years - year
    >>> nine_years, nine_years.days // 365
    (datetime.timedelta(3285), 9)
    >>> three_years = nine_years // 3;
    >>> three_years, three_years.days // 365
    (datetime.timedelta(1095), 3)
    >>> abs(three_years - ten_years) == 2 * three_years + year
    True



File: python.info,  Node: date Objects,  Next: datetime Objects,  Prev: timedelta Objects,  Up: datetime --- Basic date and time types

5.8.1.3 `date' Objects
......................

A *note date: 356. object represents a date (year, month and day) in an
idealized calendar, the current Gregorian calendar indefinitely
extended in both directions.  January 1 of year 1 is called day number
1, January 2 of year 1 is called day number 2, and so on.  This matches
the definition of the "proleptic Gregorian" calendar in Dershowitz and
Reingold's book Calendrical Calculations, where it's the base calendar
for all computations.  See the book for algorithms for converting
between proleptic Gregorian ordinals and many other calendar systems.

 -- Class: datetime.date (year, month, day)
     All arguments are required.  Arguments may be ints or longs, in
     the following ranges:

        * `MINYEAR <= year <= MAXYEAR'

        * `1 <= month <= 12'

        * `1 <= day <= number of days in the given month and year'

     If an argument outside those ranges is given, *note ValueError:
     233. is raised.

  Other constructors, all class methods:

 -- Class Method: date.today ()
     Return the current local date.  This is equivalent to
     `date.fromtimestamp(time.time())'.

 -- Class Method: date.fromtimestamp (timestamp)
     Return the local date corresponding to the POSIX timestamp, such
     as is returned by *note time.time(): 45a.  This may raise *note
     ValueError: 233, if the timestamp is out of the range of values
     supported by the platform C `localtime()' function.  It's common
     for this to be restricted to years from 1970 through 2038.  Note
     that on non-POSIX systems that include leap seconds in their
     notion of a timestamp, leap seconds are ignored by *note
     fromtimestamp(): ab7.

 -- Class Method: date.fromordinal (ordinal)
     Return the date corresponding to the proleptic Gregorian ordinal,
     where January 1 of year 1 has ordinal 1.  *note ValueError: 233.
     is raised unless `1 <= ordinal <= date.max.toordinal()'. For any
     date _d_, `date.fromordinal(d.toordinal()) == d'.

  Class attributes:

 -- Attribute: date.min
     The earliest representable date, `date(MINYEAR, 1, 1)'.

 -- Attribute: date.max
     The latest representable date, `date(MAXYEAR, 12, 31)'.

 -- Attribute: date.resolution
     The smallest possible difference between non-equal date objects,
     `timedelta(days=1)'.

  Instance attributes (read-only):

 -- Attribute: date.year
     Between *note MINYEAR: aac. and *note MAXYEAR: aad. inclusive.

 -- Attribute: date.month
     Between 1 and 12 inclusive.

 -- Attribute: date.day
     Between 1 and the number of days in the given month of the given
     year.

  Supported operations:

Operation                           Result
--------------------------------------------------------------------------------------- 
`date2 = date1 + timedelta'         _date2_ is `timedelta.days' days removed from
                                    _date1_.  (1)
`date2 = date1 - timedelta'         Computes _date2_ such that `date2 + timedelta ==
                                    date1'. (2)
`timedelta = date1 - date2'         (3)
`date1 < date2'                     _date1_ is considered less than _date2_ when
                                    _date1_ precedes _date2_ in time. (4)

  Notes:

  1. _date2_ is moved forward in time if `timedelta.days > 0', or
     backward if `timedelta.days < 0'.  Afterward `date2 - date1 ==
     timedelta.days'.  `timedelta.seconds' and `timedelta.microseconds'
     are ignored.  *note OverflowError: 2d8. is raised if `date2.year'
     would be smaller than *note MINYEAR: aac. or larger than *note
     MAXYEAR: aad.

  2. This isn't quite equivalent to date1 + (-timedelta), because
     -timedelta in isolation can overflow in cases where date1 -
     timedelta does not.  `timedelta.seconds' and
     `timedelta.microseconds' are ignored.

  3. This is exact, and cannot overflow.  timedelta.seconds and
     timedelta.microseconds are 0, and date2 + timedelta == date1 after.

  4. In other words, `date1 < date2' if and only if `date1.toordinal() <
     date2.toordinal()'. In order to stop comparison from falling back
     to the default scheme of comparing object addresses, date
     comparison normally raises *note TypeError: 215. if the other
     comparand isn't also a *note date: 356. object.  However,
     `NotImplemented' is returned instead if the other comparand has a
     `timetuple()' attribute.  This hook gives other kinds of date
     objects a chance at implementing mixed-type comparison. If not,
     when a *note date: 356.  object is compared to an object of a
     different type, *note TypeError: 215. is raised unless the
     comparison is `==' or `!='.  The latter cases return *note False:
     3aa. or *note True: 3a9, respectively.

  Dates can be used as dictionary keys. In Boolean contexts, all *note
date: 356.  objects are considered to be true.

  Instance methods:

 -- Method: date.replace (year, month, day)
     Return a date with the same value, except for those parameters
     given new values by whichever keyword arguments are specified.
     For example, if `d == date(2002, 12, 31)', then `d.replace(day=26)
     == date(2002, 12, 26)'.

 -- Method: date.timetuple ()
     Return a *note time.struct_time: ac1. such as returned by *note
     time.localtime(): ac2.  The hours, minutes and seconds are 0, and
     the DST flag is -1. `d.timetuple()' is equivalent to
     `time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(),
     yday, -1))', where `yday = d.toordinal() - date(d.year, 1,
     1).toordinal() + 1' is the day number within the current year
     starting with `1' for January 1st.

 -- Method: date.toordinal ()
     Return the proleptic Gregorian ordinal of the date, where January
     1 of year 1 has ordinal 1.  For any *note date: 356. object _d_,
     `date.fromordinal(d.toordinal()) == d'.

 -- Method: date.weekday ()
     Return the day of the week as an integer, where Monday is 0 and
     Sunday is 6.  For example, `date(2002, 12, 4).weekday() == 2', a
     Wednesday. See also *note isoweekday(): ac5.

 -- Method: date.isoweekday ()
     Return the day of the week as an integer, where Monday is 1 and
     Sunday is 7.  For example, `date(2002, 12, 4).isoweekday() == 3',
     a Wednesday. See also *note weekday(): ac4, *note isocalendar():
     ac6.

 -- Method: date.isocalendar ()
     Return a 3-tuple, (ISO year, ISO week number, ISO weekday).

     The ISO calendar is a widely used variant of the Gregorian
     calendar. See
     <http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm> for a good
     explanation.

     The ISO year consists of 52 or 53 full weeks, and where a week
     starts on a Monday and ends on a Sunday.  The first week of an ISO
     year is the first (Gregorian) calendar week of a year containing a
     Thursday. This is called week number 1, and the ISO year of that
     Thursday is the same as its Gregorian year.

     For example, 2004 begins on a Thursday, so the first week of ISO
     year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan
     2004, so that `date(2003, 12, 29).isocalendar() == (2004, 1, 1)'
     and `date(2004, 1, 4).isocalendar() == (2004, 1, 7)'.

 -- Method: date.isoformat ()
     Return a string representing the date in ISO 8601 format,
     'YYYY-MM-DD'.  For example, `date(2002, 12, 4).isoformat() ==
     '2002-12-04''.

 -- Method: date.__str__ ()
     For a date _d_, `str(d)' is equivalent to `d.isoformat()'.

 -- Method: date.ctime ()
     Return a string representing the date, for example `date(2002, 12,
     4).ctime() == 'Wed Dec 4 00:00:00 2002''. `d.ctime()' is
     equivalent to `time.ctime(time.mktime(d.timetuple()))' on
     platforms where the native C `ctime()' function (which *note
     time.ctime(): aca. invokes, but which *note date.ctime(): ac9.
     does not invoke) conforms to the C standard.

 -- Method: date.strftime (format)
     Return a string representing the date, controlled by an explicit
     format string.  Format codes referring to hours, minutes or
     seconds will see 0 values. See section *note strftime() and
     strptime() Behavior: acc.

 -- Method: date.__format__ (format)
     Same as *note date.strftime(): acb. This makes it possible to
     specify format string for a *note date: 356. object when using
     *note str.format(): 1cf.  See section *note strftime() and
     strptime() Behavior: acc.

  Example of counting days to an event:

    >>> import time
    >>> from datetime import date
    >>> today = date.today()
    >>> today
    datetime.date(2007, 12, 5)
    >>> today == date.fromtimestamp(time.time())
    True
    >>> my_birthday = date(today.year, 6, 24)
    >>> if my_birthday < today:
    ...     my_birthday = my_birthday.replace(year=today.year + 1)
    >>> my_birthday
    datetime.date(2008, 6, 24)
    >>> time_to_birthday = abs(my_birthday - today)
    >>> time_to_birthday.days
    202

Example of working with *note date: 356.:

    >>> from datetime import date
    >>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001
    >>> d
    datetime.date(2002, 3, 11)
    >>> t = d.timetuple()
    >>> for i in t:
    ...     print i
    2002                # year
    3                   # month
    11                  # day
    0
    0
    0
    0                   # weekday (0 = Monday)
    70                  # 70th day in the year
    -1
    >>> ic = d.isocalendar()
    >>> for i in ic:
    ...     print i
    2002                # ISO year
    11                  # ISO week number
    1                   # ISO day number ( 1 = Monday )
    >>> d.isoformat()
    '2002-03-11'
    >>> d.strftime("%d/%m/%y")
    '11/03/02'
    >>> d.strftime("%A %d. %B %Y")
    'Monday 11. March 2002'
    >>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, "day", "month")
    'The day is 11, the month is March.'



File: python.info,  Node: datetime Objects,  Next: time Objects,  Prev: date Objects,  Up: datetime --- Basic date and time types

5.8.1.4 `datetime' Objects
..........................

A *note datetime: 2d7. object is a single object containing all the
information from a *note date: 356. object and a *note time: 357.
object.  Like a *note date: 356.  object, *note datetime: 2d7. assumes
the current Gregorian calendar extended in both directions; like a time
object, *note datetime: 2d7. assumes there are exactly 3600*24 seconds
in every day.

  Constructor:

 -- Class: datetime.datetime (year, month, day[, hour[, minute[,
          second[, microsecond[, tzinfo]]]]])
     The year, month and day arguments are required.  _tzinfo_ may be
     `None', or an instance of a *note tzinfo: aab. subclass.  The
     remaining arguments may be ints or longs, in the following ranges:

        * `MINYEAR <= year <= MAXYEAR'

        * `1 <= month <= 12'

        * `1 <= day <= number of days in the given month and year'

        * `0 <= hour < 24'

        * `0 <= minute < 60'

        * `0 <= second < 60'

        * `0 <= microsecond < 1000000'

     If an argument outside those ranges is given, *note ValueError:
     233. is raised.

  Other constructors, all class methods:

 -- Class Method: datetime.today ()
     Return the current local datetime, with *note tzinfo: aab. `None'.
     This is equivalent to `datetime.fromtimestamp(time.time())'. See
     also *note now(): ad1, *note fromtimestamp(): ad2.

 -- Class Method: datetime.now ([tz])
     Return the current local date and time.  If optional argument _tz_
     is `None' or not specified, this is like *note today(): ad0, but,
     if possible, supplies more precision than can be gotten from going
     through a *note time.time(): 45a. timestamp (for example, this may
     be possible on platforms supplying the C `gettimeofday()'
     function).

     Else _tz_ must be an instance of a class *note tzinfo: aab.
     subclass, and the current date and time are converted to _tz_'s
     time zone.  In this case the result is equivalent to
     `tz.fromutc(datetime.utcnow().replace(tzinfo=tz))'.  See also
     *note today(): ad0, *note utcnow(): ad3.

 -- Class Method: datetime.utcnow ()
     Return the current UTC date and time, with *note tzinfo: aab.
     `None'. This is like *note now(): ad1, but returns the current UTC
     date and time, as a naive *note datetime: 2d7. object. See also
     *note now(): ad1.

 -- Class Method: datetime.fromtimestamp (timestamp[, tz])
     Return the local date and time corresponding to the POSIX
     timestamp, such as is returned by *note time.time(): 45a. If
     optional argument _tz_ is `None' or not specified, the timestamp
     is converted to the platform's local date and time, and the
     returned *note datetime: 2d7. object is naive.

     Else _tz_ must be an instance of a class *note tzinfo: aab.
     subclass, and the timestamp is converted to _tz_'s time zone.  In
     this case the result is equivalent to
     `tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz))'.

     *note fromtimestamp(): ad2. may raise *note ValueError: 233, if
     the timestamp is out of the range of values supported by the
     platform C `localtime()' or `gmtime()' functions.  It's common for
     this to be restricted to years in 1970 through 2038. Note that on
     non-POSIX systems that include leap seconds in their notion of a
     timestamp, leap seconds are ignored by *note fromtimestamp(): ad2,
     and then it's possible to have two timestamps differing by a
     second that yield identical *note datetime: 2d7. objects. See also
     *note utcfromtimestamp(): ad4.

 -- Class Method: datetime.utcfromtimestamp (timestamp)
     Return the UTC *note datetime: 2d7. corresponding to the POSIX
     timestamp, with *note tzinfo: aab. `None'. This may raise *note
     ValueError: 233, if the timestamp is out of the range of values
     supported by the platform C `gmtime()' function.  It's common for
     this to be restricted to years in 1970 through 2038. See also
     *note fromtimestamp(): ad2.

 -- Class Method: datetime.fromordinal (ordinal)
     Return the *note datetime: 2d7. corresponding to the proleptic
     Gregorian ordinal, where January 1 of year 1 has ordinal 1. *note
     ValueError: 233. is raised unless `1 <= ordinal <=
     datetime.max.toordinal()'.  The hour, minute, second and
     microsecond of the result are all 0, and *note tzinfo: aab. is
     `None'.

 -- Class Method: datetime.combine (date, time)
     Return a new *note datetime: 2d7. object whose date components are
     equal to the given *note date: 356. object's, and whose time
     components and *note tzinfo: aab.  attributes are equal to the
     given *note time: 357. object's. For any *note datetime: 2d7.
     object _d_, `d == datetime.combine(d.date(), d.timetz())'.  If
     date is a *note datetime: 2d7. object, its time components and
     *note tzinfo: aab. attributes are ignored.

 -- Class Method: datetime.strptime (date_string, format)
     Return a *note datetime: 2d7. corresponding to _date_string_,
     parsed according to _format_.  This is equivalent to
     `datetime(*(time.strptime(date_string, format)[0:6]))'. *note
     ValueError: 233. is raised if the date_string and format can't be
     parsed by *note time.strptime(): 3b6. or if it returns a value
     which isn't a time tuple. See section *note strftime() and
     strptime() Behavior: acc.

     New in version 2.5.

  Class attributes:

 -- Attribute: datetime.min
     The earliest representable *note datetime: 2d7, `datetime(MINYEAR,
     1, 1, tzinfo=None)'.

 -- Attribute: datetime.max
     The latest representable *note datetime: 2d7, `datetime(MAXYEAR,
     12, 31, 23, 59, 59, 999999, tzinfo=None)'.

 -- Attribute: datetime.resolution
     The smallest possible difference between non-equal *note datetime:
     2d7. objects, `timedelta(microseconds=1)'.

  Instance attributes (read-only):

 -- Attribute: datetime.year
     Between *note MINYEAR: aac. and *note MAXYEAR: aad. inclusive.

 -- Attribute: datetime.month
     Between 1 and 12 inclusive.

 -- Attribute: datetime.day
     Between 1 and the number of days in the given month of the given
     year.

 -- Attribute: datetime.hour
     In `range(24)'.

 -- Attribute: datetime.minute
     In `range(60)'.

 -- Attribute: datetime.second
     In `range(60)'.

 -- Attribute: datetime.microsecond
     In `range(1000000)'.

 -- Attribute: datetime.tzinfo
     The object passed as the _tzinfo_ argument to the *note datetime:
     2d7. constructor, or `None' if none was passed.

  Supported operations:

Operation                                   Result
--------------------------------------------------------------------------------- 
`datetime2 = datetime1 + timedelta'         (1)
`datetime2 = datetime1 - timedelta'         (2)
`timedelta = datetime1 - datetime2'         (3)
`datetime1 < datetime2'                     Compares *note datetime: 2d7. to
                                            *note datetime: 2d7. (4)

  1. datetime2 is a duration of timedelta removed from datetime1,
     moving forward in time if `timedelta.days' > 0, or backward if
     `timedelta.days' < 0.  The result has the same *note tzinfo: aab.
     attribute as the input datetime, and datetime2 - datetime1 ==
     timedelta after. *note OverflowError: 2d8. is raised if
     datetime2.year would be smaller than *note MINYEAR: aac. or larger
     than *note MAXYEAR: aad. Note that no time zone adjustments are
     done even if the input is an aware object.

  2. Computes the datetime2 such that datetime2 + timedelta ==
     datetime1. As for addition, the result has the same *note tzinfo:
     aab. attribute as the input datetime, and no time zone adjustments
     are done even if the input is aware.  This isn't quite equivalent
     to datetime1 + (-timedelta), because -timedelta in isolation can
     overflow in cases where datetime1 - timedelta does not.

  3. Subtraction of a *note datetime: 2d7. from a *note datetime: 2d7.
     is defined only if both operands are naive, or if both are aware.
     If one is aware and the other is naive, *note TypeError: 215. is
     raised.

     If both are naive, or both are aware and have the same *note
     tzinfo: aab. attribute, the *note tzinfo: aab. attributes are
     ignored, and the result is a *note timedelta: 20d.  object _t_
     such that `datetime2 + t == datetime1'.  No time zone adjustments
     are done in this case.

     If both are aware and have different *note tzinfo: aab.
     attributes, `a-b' acts as if _a_ and _b_ were first converted to
     naive UTC datetimes first.  The result is `(a.replace(tzinfo=None)
     - a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())'
     except that the implementation never overflows.

  4. _datetime1_ is considered less than _datetime2_ when _datetime1_
     precedes _datetime2_ in time.

     If one comparand is naive and the other is aware, *note TypeError:
     215. is raised.  If both comparands are aware, and have the same
     *note tzinfo: aab. attribute, the common *note tzinfo: aab.
     attribute is ignored and the base datetimes are compared.  If both
     comparands are aware and have different *note tzinfo: aab.
     attributes, the comparands are first adjusted by subtracting their
     UTC offsets (obtained from `self.utcoffset()').

          Note: In order to stop comparison from falling back to the
          default scheme of comparing object addresses, datetime
          comparison normally raises *note TypeError: 215. if the other
          comparand isn't also a *note datetime: 2d7. object.  However,
          `NotImplemented' is returned instead if the other comparand
          has a `timetuple()' attribute.  This hook gives other kinds
          of date objects a chance at implementing mixed-type
          comparison.  If not, when a *note datetime: 2d7.  object is
          compared to an object of a different type, *note TypeError:
          215. is raised unless the comparison is `==' or `!='.  The
          latter cases return *note False: 3aa. or *note True: 3a9,
          respectively.

  *note datetime: 2d7. objects can be used as dictionary keys. In
Boolean contexts, all *note datetime: 2d7. objects are considered to be
true.

  Instance methods:

 -- Method: datetime.date ()
     Return *note date: 356. object with same year, month and day.

 -- Method: datetime.time ()
     Return *note time: 357. object with same hour, minute, second and
     microsecond.  *note tzinfo: aab. is `None'.  See also method *note
     timetz(): ae5.

 -- Method: datetime.timetz ()
     Return *note time: 357. object with same hour, minute, second,
     microsecond, and tzinfo attributes.  See also method *note time():
     17a.

 -- Method: datetime.replace ([year[, month[, day[, hour[, minute[,
          second[, microsecond[, tzinfo]]]]]]]])
     Return a datetime with the same attributes, except for those
     attributes given new values by whichever keyword arguments are
     specified.  Note that `tzinfo=None' can be specified to create a
     naive datetime from an aware datetime with no conversion of date
     and time data.

 -- Method: datetime.astimezone (tz)
     Return a *note datetime: 2d7. object with new *note tzinfo: aab.
     attribute _tz_, adjusting the date and time data so the result is
     the same UTC time as _self_, but in _tz_'s local time.

     _tz_ must be an instance of a *note tzinfo: aab. subclass, and its
     *note utcoffset(): ae8. and *note dst(): ae9. methods must not
     return `None'.  _self_ must be aware (`self.tzinfo' must not be
     `None', and `self.utcoffset()' must not return `None').

     If `self.tzinfo' is _tz_, `self.astimezone(tz)' is equal to
     _self_:  no adjustment of date or time data is performed. Else the
     result is local time in time zone _tz_, representing the same UTC
     time as _self_:  after `astz = dt.astimezone(tz)', `astz -
     astz.utcoffset()' will usually have the same date and time data as
     `dt - dt.utcoffset()'. The discussion of class *note tzinfo: aab.
     explains the cases at Daylight Saving Time transition boundaries
     where this cannot be achieved (an issue only if _tz_ models both
     standard and daylight time).

     If you merely want to attach a time zone object _tz_ to a datetime
     _dt_ without adjustment of date and time data, use
     `dt.replace(tzinfo=tz)'.  If you merely want to remove the time
     zone object from an aware datetime _dt_ without conversion of date
     and time data, use `dt.replace(tzinfo=None)'.

     Note that the default *note tzinfo.fromutc(): aea. method can be
     overridden in a *note tzinfo: aab. subclass to affect the result
     returned by *note astimezone(): ae7.  Ignoring error cases, *note
     astimezone(): ae7. acts like:

         def astimezone(self, tz):
             if self.tzinfo is tz:
                 return self
             # Convert self to UTC, and attach the new time zone object.
             utc = (self - self.utcoffset()).replace(tzinfo=tz)
             # Convert from UTC to tz's local time.
             return tz.fromutc(utc)



 -- Method: datetime.utcoffset ()
     If *note tzinfo: aab. is `None', returns `None', else returns
     `self.tzinfo.utcoffset(self)', and raises an exception if the
     latter doesn't return `None', or a *note timedelta: 20d. object
     representing a whole number of minutes with magnitude less than
     one day.

 -- Method: datetime.dst ()
     If *note tzinfo: aab. is `None', returns `None', else returns
     `self.tzinfo.dst(self)', and raises an exception if the latter
     doesn't return `None', or a *note timedelta: 20d. object
     representing a whole number of minutes with magnitude less than
     one day.

 -- Method: datetime.tzname ()
     If *note tzinfo: aab. is `None', returns `None', else returns
     `self.tzinfo.tzname(self)', raises an exception if the latter
     doesn't return `None' or a string object,

 -- Method: datetime.timetuple ()
     Return a *note time.struct_time: ac1. such as returned by *note
     time.localtime(): ac2.  `d.timetuple()' is equivalent to
     `time.struct_time((d.year, d.month, d.day, d.hour, d.minute,
     d.second, d.weekday(), yday, dst))', where `yday = d.toordinal() -
     date(d.year, 1, 1).toordinal() + 1' is the day number within the
     current year starting with `1' for January 1st. The `tm_isdst' flag
     of the result is set according to the *note dst(): ae9. method:
     *note tzinfo: aab. is `None' or *note dst(): ae9. returns `None',
     `tm_isdst' is set to `-1'; else if *note dst(): ae9. returns a
     non-zero value, `tm_isdst' is set to `1'; else `tm_isdst' is set
     to `0'.

 -- Method: datetime.utctimetuple ()
     If *note datetime: 2d7. instance _d_ is naive, this is the same as
     `d.timetuple()' except that `tm_isdst' is forced to 0 regardless
     of what `d.dst()' returns.  DST is never in effect for a UTC time.

     If _d_ is aware, _d_ is normalized to UTC time, by subtracting
     `d.utcoffset()', and a *note time.struct_time: ac1. for the
     normalized time is returned.  `tm_isdst' is forced to 0. Note that
     the result's `tm_year' member may be *note MINYEAR: aac.-1 or
     *note MAXYEAR: aad.+1, if _d_.year was `MINYEAR' or `MAXYEAR' and
     UTC adjustment spills over a year boundary.

 -- Method: datetime.toordinal ()
     Return the proleptic Gregorian ordinal of the date.  The same as
     `self.date().toordinal()'.

 -- Method: datetime.weekday ()
     Return the day of the week as an integer, where Monday is 0 and
     Sunday is 6.  The same as `self.date().weekday()'. See also *note
     isoweekday(): af0.

 -- Method: datetime.isoweekday ()
     Return the day of the week as an integer, where Monday is 1 and
     Sunday is 7.  The same as `self.date().isoweekday()'. See also
     *note weekday(): aef, *note isocalendar(): af1.

 -- Method: datetime.isocalendar ()
     Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The
     same as `self.date().isocalendar()'.

 -- Method: datetime.isoformat ([sep])
     Return a string representing the date and time in ISO 8601 format,
     YYYY-MM-DDTHH:MM:SS.mmmmmm or, if *note microsecond: ae1. is 0,
     YYYY-MM-DDTHH:MM:SS

     If *note utcoffset(): ae8. does not return `None', a 6-character
     string is appended, giving the UTC offset in (signed) hours and
     minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if *note
     microsecond: ae1. is 0 YYYY-MM-DDTHH:MM:SS+HH:MM

     The optional argument _sep_ (default `'T'') is a one-character
     separator, placed between the date and time portions of the
     result.  For example,

         >>> from datetime import tzinfo, timedelta, datetime
         >>> class TZ(tzinfo):
         ...     def utcoffset(self, dt): return timedelta(minutes=-399)
         ...
         >>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
         '2002-12-25 00:00:00-06:39'



 -- Method: datetime.__str__ ()
     For a *note datetime: 2d7. instance _d_, `str(d)' is equivalent to
     `d.isoformat(' ')'.

 -- Method: datetime.ctime ()
     Return a string representing the date and time, for example
     `datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40
     2002''. `d.ctime()' is equivalent to
     `time.ctime(time.mktime(d.timetuple()))' on platforms where the
     native C `ctime()' function (which *note time.ctime(): aca.
     invokes, but which *note datetime.ctime(): af4. does not invoke)
     conforms to the C standard.

 -- Method: datetime.strftime (format)
     Return a string representing the date and time, controlled by an
     explicit format string.  See section *note strftime() and
     strptime() Behavior: acc.

 -- Method: datetime.__format__ (format)
     Same as *note datetime.strftime(): af5.  This makes it possible to
     specify format string for a *note datetime: 2d7. object when using
     *note str.format(): 1cf.  See section *note strftime() and
     strptime() Behavior: acc.

  Examples of working with datetime objects:

    >>> from datetime import datetime, date, time
    >>> # Using datetime.combine()
    >>> d = date(2005, 7, 14)
    >>> t = time(12, 30)
    >>> datetime.combine(d, t)
    datetime.datetime(2005, 7, 14, 12, 30)
    >>> # Using datetime.now() or datetime.utcnow()
    >>> datetime.now()
    datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1
    >>> datetime.utcnow()
    datetime.datetime(2007, 12, 6, 15, 29, 43, 79060)
    >>> # Using datetime.strptime()
    >>> dt = datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
    >>> dt
    datetime.datetime(2006, 11, 21, 16, 30)
    >>> # Using datetime.timetuple() to get tuple of all attributes
    >>> tt = dt.timetuple()
    >>> for it in tt:
    ...     print it
    ...
    2006    # year
    11      # month
    21      # day
    16      # hour
    30      # minute
    0       # second
    1       # weekday (0 = Monday)
    325     # number of days since 1st January
    -1      # dst - method tzinfo.dst() returned None
    >>> # Date in ISO format
    >>> ic = dt.isocalendar()
    >>> for it in ic:
    ...     print it
    ...
    2006    # ISO year
    47      # ISO week
    2       # ISO weekday
    >>> # Formatting datetime
    >>> dt.strftime("%A, %d. %B %Y %I:%M%p")
    'Tuesday, 21. November 2006 04:30PM'
    >>> 'The {1} is {0:%d}, the {2} is {0:%B}, the {3} is {0:%I:%M%p}.'.format(dt, "day", "month", "time")
    'The day is 21, the month is November, the time is 04:30PM.'

Using datetime with tzinfo:

    >>> from datetime import timedelta, datetime, tzinfo
    >>> class GMT1(tzinfo):
    ...     def utcoffset(self, dt):
    ...         return timedelta(hours=1) + self.dst(dt)
    ...     def dst(self, dt):
    ...         # DST starts last Sunday in March
    ...         d = datetime(dt.year, 4, 1)   # ends last Sunday in October
    ...         self.dston = d - timedelta(days=d.weekday() + 1)
    ...         d = datetime(dt.year, 11, 1)
    ...         self.dstoff = d - timedelta(days=d.weekday() + 1)
    ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
    ...             return timedelta(hours=1)
    ...         else:
    ...             return timedelta(0)
    ...     def tzname(self,dt):
    ...          return "GMT +1"
    ...
    >>> class GMT2(tzinfo):
    ...     def utcoffset(self, dt):
    ...         return timedelta(hours=2) + self.dst(dt)
    ...     def dst(self, dt):
    ...         d = datetime(dt.year, 4, 1)
    ...         self.dston = d - timedelta(days=d.weekday() + 1)
    ...         d = datetime(dt.year, 11, 1)
    ...         self.dstoff = d - timedelta(days=d.weekday() + 1)
    ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
    ...             return timedelta(hours=1)
    ...         else:
    ...             return timedelta(0)
    ...     def tzname(self,dt):
    ...         return "GMT +2"
    ...
    >>> gmt1 = GMT1()
    >>> # Daylight Saving Time
    >>> dt1 = datetime(2006, 11, 21, 16, 30, tzinfo=gmt1)
    >>> dt1.dst()
    datetime.timedelta(0)
    >>> dt1.utcoffset()
    datetime.timedelta(0, 3600)
    >>> dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=gmt1)
    >>> dt2.dst()
    datetime.timedelta(0, 3600)
    >>> dt2.utcoffset()
    datetime.timedelta(0, 7200)
    >>> # Convert datetime to another time zone
    >>> dt3 = dt2.astimezone(GMT2())
    >>> dt3     # doctest: +ELLIPSIS
    datetime.datetime(2006, 6, 14, 14, 0, tzinfo=<GMT2 object at 0x...>)
    >>> dt2     # doctest: +ELLIPSIS
    datetime.datetime(2006, 6, 14, 13, 0, tzinfo=<GMT1 object at 0x...>)
    >>> dt2.utctimetuple() == dt3.utctimetuple()
    True



File: python.info,  Node: time Objects,  Next: tzinfo Objects,  Prev: datetime Objects,  Up: datetime --- Basic date and time types

5.8.1.5 `time' Objects
......................

A time object represents a (local) time of day, independent of any
particular day, and subject to adjustment via a *note tzinfo: aab.
object.

 -- Class: datetime.time ([hour[, minute[, second[, microsecond[,
          tzinfo]]]]])
     All arguments are optional.  _tzinfo_ may be `None', or an
     instance of a *note tzinfo: aab. subclass.  The remaining
     arguments may be ints or longs, in the following ranges:

        * `0 <= hour < 24'

        * `0 <= minute < 60'

        * `0 <= second < 60'

        * `0 <= microsecond < 1000000'.

     If an argument outside those ranges is given, *note ValueError:
     233. is raised.  All default to `0' except _tzinfo_, which
     defaults to *note None: 393.

  Class attributes:

 -- Attribute: time.min
     The earliest representable *note time: 357, `time(0, 0, 0, 0)'.

 -- Attribute: time.max
     The latest representable *note time: 357, `time(23, 59, 59,
     999999)'.

 -- Attribute: time.resolution
     The smallest possible difference between non-equal *note time:
     357. objects, `timedelta(microseconds=1)', although note that
     arithmetic on *note time: 357. objects is not supported.

  Instance attributes (read-only):

 -- Attribute: time.hour
     In `range(24)'.

 -- Attribute: time.minute
     In `range(60)'.

 -- Attribute: time.second
     In `range(60)'.

 -- Attribute: time.microsecond
     In `range(1000000)'.

 -- Attribute: time.tzinfo
     The object passed as the tzinfo argument to the *note time: 357.
     constructor, or `None' if none was passed.

  Supported operations:

   * comparison of *note time: 357. to *note time: 357, where _a_ is
     considered less than _b_ when _a_ precedes _b_ in time.  If one
     comparand is naive and the other is aware, *note TypeError: 215.
     is raised.  If both comparands are aware, and have the same *note
     tzinfo: aab. attribute, the common *note tzinfo: aab. attribute is
     ignored and the base times are compared.  If both comparands are
     aware and have different *note tzinfo: aab. attributes, the
     comparands are first adjusted by subtracting their UTC offsets
     (obtained from `self.utcoffset()'). In order to stop mixed-type
     comparisons from falling back to the default comparison by object
     address, when a *note time: 357. object is compared to an object
     of a different type, *note TypeError: 215. is raised unless the
     comparison is `==' or `!='.  The latter cases return *note False:
     3aa. or *note True: 3a9, respectively.

   * hash, use as dict key

   * efficient pickling

   * in Boolean contexts, a *note time: 357. object is considered to be
     true if and only if, after converting it to minutes and
     subtracting `utcoffset()' (or `0' if that's `None'), the result is
     non-zero.

  Instance methods:

 -- Method: time.replace ([hour[, minute[, second[, microsecond[,
          tzinfo]]]]])
     Return a *note time: 357. with the same value, except for those
     attributes given new values by whichever keyword arguments are
     specified.  Note that `tzinfo=None' can be specified to create a
     naive *note time: 357. from an aware *note time: 357, without
     conversion of the time data.

 -- Method: time.isoformat ()
     Return a string representing the time in ISO 8601 format,
     HH:MM:SS.mmmmmm or, if self.microsecond is 0, HH:MM:SS If *note
     utcoffset(): b03. does not return `None', a 6-character string is
     appended, giving the UTC offset in (signed) hours and minutes:
     HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is 0, HH:MM:SS+HH:MM

 -- Method: time.__str__ ()
     For a time _t_, `str(t)' is equivalent to `t.isoformat()'.

 -- Method: time.strftime (format)
     Return a string representing the time, controlled by an explicit
     format string.  See section *note strftime() and strptime()
     Behavior: acc.

 -- Method: time.__format__ (format)
     Same as *note time.strftime(): b05. This makes it possible to
     specify format string for a *note time: 357. object when using
     *note str.format(): 1cf.  See section *note strftime() and
     strptime() Behavior: acc.

 -- Method: time.utcoffset ()
     If *note tzinfo: aab. is `None', returns `None', else returns
     `self.tzinfo.utcoffset(None)', and raises an exception if the
     latter doesn't return `None' or a *note timedelta: 20d. object
     representing a whole number of minutes with magnitude less than
     one day.

 -- Method: time.dst ()
     If *note tzinfo: aab. is `None', returns `None', else returns
     `self.tzinfo.dst(None)', and raises an exception if the latter
     doesn't return `None', or a *note timedelta: 20d. object
     representing a whole number of minutes with magnitude less than
     one day.

 -- Method: time.tzname ()
     If *note tzinfo: aab. is `None', returns `None', else returns
     `self.tzinfo.tzname(None)', or raises an exception if the latter
     doesn't return `None' or a string object.

  Example:

    >>> from datetime import time, tzinfo
    >>> class GMT1(tzinfo):
    ...     def utcoffset(self, dt):
    ...         return timedelta(hours=1)
    ...     def dst(self, dt):
    ...         return timedelta(0)
    ...     def tzname(self,dt):
    ...         return "Europe/Prague"
    ...
    >>> t = time(12, 10, 30, tzinfo=GMT1())
    >>> t                               # doctest: +ELLIPSIS
    datetime.time(12, 10, 30, tzinfo=<GMT1 object at 0x...>)
    >>> gmt = GMT1()
    >>> t.isoformat()
    '12:10:30+01:00'
    >>> t.dst()
    datetime.timedelta(0)
    >>> t.tzname()
    'Europe/Prague'
    >>> t.strftime("%H:%M:%S %Z")
    '12:10:30 Europe/Prague'
    >>> 'The {} is {:%H:%M}.'.format("time", t)
    'The time is 12:10.'



File: python.info,  Node: tzinfo Objects,  Next: strftime and strptime Behavior,  Prev: time Objects,  Up: datetime --- Basic date and time types

5.8.1.6 `tzinfo' Objects
........................

*note tzinfo: aab. is an abstract base class, meaning that this class
should not be instantiated directly.  You need to derive a concrete
subclass, and (at least) supply implementations of the standard *note
tzinfo: aab. methods needed by the *note datetime: 2d7. methods you
use.  The *note datetime: 7d. module does not supply any concrete
subclasses of *note tzinfo: aab.

  An instance of (a concrete subclass of) *note tzinfo: aab. can be
passed to the constructors for *note datetime: 2d7. and *note time:
357. objects. The latter objects view their attributes as being in
local time, and the *note tzinfo: aab. object supports methods
revealing offset of local time from UTC, the name of the time zone, and
DST offset, all relative to a date or time object passed to them.

  Special requirement for pickling:  A *note tzinfo: aab. subclass must
have an *note __init__(): 375. method that can be called with no
arguments, else it can be pickled but possibly not unpickled again.
This is a technical requirement that may be relaxed in the future.

  A concrete subclass of *note tzinfo: aab. may need to implement the
following methods.  Exactly which methods are needed depends on the
uses made of aware *note datetime: 7d. objects.  If in doubt, simply
implement all of them.

 -- Method: tzinfo.utcoffset (self, dt)
     Return offset of local time from UTC, in minutes east of UTC.  If
     local time is west of UTC, this should be negative.  Note that
     this is intended to be the total offset from UTC; for example, if
     a *note tzinfo: aab. object represents both time zone and DST
     adjustments, *note utcoffset(): b0b. should return their sum.  If
     the UTC offset isn't known, return `None'.  Else the value
     returned must be a *note timedelta: 20d. object specifying a whole
     number of minutes in the range -1439 to 1439 inclusive (1440 =
     24*60; the magnitude of the offset must be less than one day).
     Most implementations of *note utcoffset(): b0b. will probably look
     like one of these two:

         return CONSTANT                 # fixed-offset class
         return CONSTANT + self.dst(dt)  # daylight-aware class

     If *note utcoffset(): b0b. does not return `None', *note dst():
     b0c. should not return `None' either.

     The default implementation of *note utcoffset(): b0b. raises *note
     NotImplementedError: 93b.

 -- Method: tzinfo.dst (self, dt)
     Return the daylight saving time (DST) adjustment, in minutes east
     of UTC, or `None' if DST information isn't known.  Return
     `timedelta(0)' if DST is not in effect. If DST is in effect,
     return the offset as a *note timedelta: 20d. object (see *note
     utcoffset(): b0b. for details). Note that DST offset, if
     applicable, has already been added to the UTC offset returned by
     *note utcoffset(): b0b, so there's no need to consult *note dst():
     b0c. unless you're interested in obtaining DST info separately.
     For example, *note datetime.timetuple(): aec. calls its *note
     tzinfo: aab.  attribute's *note dst(): b0c. method to determine
     how the `tm_isdst' flag should be set, and *note tzinfo.fromutc():
     aea. calls *note dst(): b0c. to account for DST changes when
     crossing time zones.

     An instance _tz_ of a *note tzinfo: aab. subclass that models both
     standard and daylight times must be consistent in this sense:

     `tz.utcoffset(dt) - tz.dst(dt)'

     must return the same result for every *note datetime: 2d7. _dt_
     with `dt.tzinfo == tz'  For sane *note tzinfo: aab. subclasses,
     this expression yields the time zone's "standard offset", which
     should not depend on the date or the time, but only on geographic
     location.  The implementation of *note datetime.astimezone(): ae7.
     relies on this, but cannot detect violations; it's the programmer's
     responsibility to ensure it.  If a *note tzinfo: aab. subclass
     cannot guarantee this, it may be able to override the default
     implementation of *note tzinfo.fromutc(): aea. to work correctly
     with `astimezone()' regardless.

     Most implementations of *note dst(): b0c. will probably look like
     one of these two:

         def dst(self, dt):
             # a fixed-offset class:  doesn't account for DST
             return timedelta(0)

     or

         def dst(self, dt):
             # Code to set dston and dstoff to the time zone's DST
             # transition times based on the input dt.year, and expressed
             # in standard local time.  Then

             if dston <= dt.replace(tzinfo=None) < dstoff:
                 return timedelta(hours=1)
             else:
                 return timedelta(0)

     The default implementation of *note dst(): b0c. raises *note
     NotImplementedError: 93b.

 -- Method: tzinfo.tzname (self, dt)
     Return the time zone name corresponding to the *note datetime:
     2d7. object _dt_, as a string. Nothing about string names is
     defined by the *note datetime: 7d. module, and there's no
     requirement that it mean anything in particular.  For example,
     "GMT", "UTC", "-500", "-5:00", "EDT", "US/Eastern", "America/New
     York" are all valid replies.  Return `None' if a string name isn't
     known.  Note that this is a method rather than a fixed string
     primarily because some *note tzinfo: aab.  subclasses will wish to
     return different names depending on the specific value of _dt_
     passed, especially if the *note tzinfo: aab. class is accounting
     for daylight time.

     The default implementation of *note tzname(): b0d. raises *note
     NotImplementedError: 93b.

  These methods are called by a *note datetime: 2d7. or *note time:
357. object, in response to their methods of the same names.  A *note
datetime: 2d7. object passes itself as the argument, and a *note time:
357. object passes `None' as the argument.  A *note tzinfo: aab.
subclass's methods should therefore be prepared to accept a _dt_
argument of `None', or of class *note datetime: 2d7.

  When `None' is passed, it's up to the class designer to decide the
best response.  For example, returning `None' is appropriate if the
class wishes to say that time objects don't participate in the *note
tzinfo: aab. protocols.  It may be more useful for `utcoffset(None)' to
return the standard UTC offset, as there is no other convention for
discovering the standard offset.

  When a *note datetime: 2d7. object is passed in response to a *note
datetime: 2d7.  method, `dt.tzinfo' is the same object as _self_.
*note tzinfo: aab. methods can rely on this, unless user code calls
*note tzinfo: aab. methods directly.  The intent is that the *note
tzinfo: aab. methods interpret _dt_ as being in local time, and not
need worry about objects in other timezones.

  There is one more *note tzinfo: aab. method that a subclass may wish
to override:

 -- Method: tzinfo.fromutc (self, dt)
     This is called from the default *note datetime.astimezone(): ae7.
     implementation.  When called from that, `dt.tzinfo' is _self_, and
     _dt_'s date and time data are to be viewed as expressing a UTC
     time.  The purpose of *note fromutc(): aea. is to adjust the date
     and time data, returning an equivalent datetime in _self_'s local
     time.

     Most *note tzinfo: aab. subclasses should be able to inherit the
     default *note fromutc(): aea. implementation without problems.
     It's strong enough to handle fixed-offset time zones, and time
     zones accounting for both standard and daylight time, and the
     latter even if the DST transition times differ in different years.
     An example of a time zone the default *note fromutc(): aea.
     implementation may not handle correctly in all cases is one where
     the standard offset (from UTC) depends on the specific date and
     time passed, which can happen for political reasons. The default
     implementations of `astimezone()' and *note fromutc(): aea. may
     not produce the result you want if the result is one of the hours
     straddling the moment the standard offset changes.

     Skipping code for error cases, the default *note fromutc(): aea.
     implementation acts like:

         def fromutc(self, dt):
             # raise ValueError error if dt.tzinfo is not self
             dtoff = dt.utcoffset()
             dtdst = dt.dst()
             # raise ValueError if dtoff is None or dtdst is None
             delta = dtoff - dtdst  # this is self's standard offset
             if delta:
                 dt += delta   # convert to standard local time
                 dtdst = dt.dst()
                 # raise ValueError if dtdst is None
             if dtdst:
                 return dt + dtdst
             else:
                 return dt



  Example *note tzinfo: aab. classes:

    from datetime import tzinfo, timedelta, datetime

    ZERO = timedelta(0)
    HOUR = timedelta(hours=1)

    # A UTC class.

    class UTC(tzinfo):
        """UTC"""

        def utcoffset(self, dt):
            return ZERO

        def tzname(self, dt):
            return "UTC"

        def dst(self, dt):
            return ZERO

    utc = UTC()

    # A class building tzinfo objects for fixed-offset time zones.
    # Note that FixedOffset(0, "UTC") is a different way to build a
    # UTC tzinfo object.

    class FixedOffset(tzinfo):
        """Fixed offset in minutes east from UTC."""

        def __init__(self, offset, name):
            self.__offset = timedelta(minutes = offset)
            self.__name = name

        def utcoffset(self, dt):
            return self.__offset

        def tzname(self, dt):
            return self.__name

        def dst(self, dt):
            return ZERO

    # A class capturing the platform's idea of local time.

    import time as _time

    STDOFFSET = timedelta(seconds = -_time.timezone)
    if _time.daylight:
        DSTOFFSET = timedelta(seconds = -_time.altzone)
    else:
        DSTOFFSET = STDOFFSET

    DSTDIFF = DSTOFFSET - STDOFFSET

    class LocalTimezone(tzinfo):

        def utcoffset(self, dt):
            if self._isdst(dt):
                return DSTOFFSET
            else:
                return STDOFFSET

        def dst(self, dt):
            if self._isdst(dt):
                return DSTDIFF
            else:
                return ZERO

        def tzname(self, dt):
            return _time.tzname[self._isdst(dt)]

        def _isdst(self, dt):
            tt = (dt.year, dt.month, dt.day,
                  dt.hour, dt.minute, dt.second,
                  dt.weekday(), 0, 0)
            stamp = _time.mktime(tt)
            tt = _time.localtime(stamp)
            return tt.tm_isdst > 0

    Local = LocalTimezone()


    # A complete implementation of current DST rules for major US time zones.

    def first_sunday_on_or_after(dt):
        days_to_go = 6 - dt.weekday()
        if days_to_go:
            dt += timedelta(days_to_go)
        return dt


    # US DST Rules
    #
    # This is a simplified (i.e., wrong for a few cases) set of rules for US
    # DST start and end times. For a complete and up-to-date set of DST rules
    # and timezone definitions, visit the Olson Database (or try pytz):
    # http://www.twinsun.com/tz/tz-link.htm
    # http://sourceforge.net/projects/pytz/ (might not be up-to-date)
    #
    # In the US, since 2007, DST starts at 2am (standard time) on the second
    # Sunday in March, which is the first Sunday on or after Mar 8.
    DSTSTART_2007 = datetime(1, 3, 8, 2)
    # and ends at 2am (DST time; 1am standard time) on the first Sunday of Nov.
    DSTEND_2007 = datetime(1, 11, 1, 1)
    # From 1987 to 2006, DST used to start at 2am (standard time) on the first
    # Sunday in April and to end at 2am (DST time; 1am standard time) on the last
    # Sunday of October, which is the first Sunday on or after Oct 25.
    DSTSTART_1987_2006 = datetime(1, 4, 1, 2)
    DSTEND_1987_2006 = datetime(1, 10, 25, 1)
    # From 1967 to 1986, DST used to start at 2am (standard time) on the last
    # Sunday in April (the one on or after April 24) and to end at 2am (DST time;
    # 1am standard time) on the last Sunday of October, which is the first Sunday
    # on or after Oct 25.
    DSTSTART_1967_1986 = datetime(1, 4, 24, 2)
    DSTEND_1967_1986 = DSTEND_1987_2006

    class USTimeZone(tzinfo):

        def __init__(self, hours, reprname, stdname, dstname):
            self.stdoffset = timedelta(hours=hours)
            self.reprname = reprname
            self.stdname = stdname
            self.dstname = dstname

        def __repr__(self):
            return self.reprname

        def tzname(self, dt):
            if self.dst(dt):
                return self.dstname
            else:
                return self.stdname

        def utcoffset(self, dt):
            return self.stdoffset + self.dst(dt)

        def dst(self, dt):
            if dt is None or dt.tzinfo is None:
                # An exception may be sensible here, in one or both cases.
                # It depends on how you want to treat them.  The default
                # fromutc() implementation (called by the default astimezone()
                # implementation) passes a datetime with dt.tzinfo is self.
                return ZERO
            assert dt.tzinfo is self

            # Find start and end times for US DST. For years before 1967, return
            # ZERO for no DST.
            if 2006 < dt.year:
                dststart, dstend = DSTSTART_2007, DSTEND_2007
            elif 1986 < dt.year < 2007:
                dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006
            elif 1966 < dt.year < 1987:
                dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986
            else:
                return ZERO

            start = first_sunday_on_or_after(dststart.replace(year=dt.year))
            end = first_sunday_on_or_after(dstend.replace(year=dt.year))

            # Can't compare naive to aware objects, so strip the timezone from
            # dt first.
            if start <= dt.replace(tzinfo=None) < end:
                return HOUR
            else:
                return ZERO

    Eastern  = USTimeZone(-5, "Eastern",  "EST", "EDT")
    Central  = USTimeZone(-6, "Central",  "CST", "CDT")
    Mountain = USTimeZone(-7, "Mountain", "MST", "MDT")
    Pacific  = USTimeZone(-8, "Pacific",  "PST", "PDT")

Note that there are unavoidable subtleties twice per year in a *note
tzinfo: aab.  subclass accounting for both standard and daylight time,
at the DST transition points.  For concreteness, consider US Eastern
(UTC -0500), where EDT begins the minute after 1:59 (EST) on the second
Sunday in March, and ends the minute after 1:59 (EDT) on the first
Sunday in November:

      UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM
      EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM
      EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM

    start  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM

      end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM

When DST starts (the "start" line), the local wall clock leaps from
1:59 to 3:00.  A wall time of the form 2:MM doesn't really make sense
on that day, so `astimezone(Eastern)' won't deliver a result with `hour
== 2' on the day DST begins.  In order for `astimezone()' to make this
guarantee, the `rzinfo.dst()' method must consider times in the
"missing hour" (2:MM for Eastern) to be in daylight time.

  When DST ends (the "end" line), there's a potentially worse problem:
there's an hour that can't be spelled unambiguously in local wall time:
the last hour of daylight time.  In Eastern, that's times of the form
5:MM UTC on the day daylight time ends.  The local wall clock leaps
from 1:59 (daylight time) back to 1:00 (standard time) again. Local
times of the form 1:MM are ambiguous.  `astimezone()' mimics the local
clock's behavior by mapping two adjacent UTC hours into the same local
hour then.  In the Eastern example, UTC times of the form 5:MM and 6:MM
both map to 1:MM when converted to Eastern.  In order for
`astimezone()' to make this guarantee, the *note tzinfo.dst(): b0c.
method must consider times in the "repeated hour" to be in standard
time.  This is easily arranged, as in the example, by expressing DST
switch times in the time zone's standard local time.

  Applications that can't bear such ambiguities should avoid using
hybrid *note tzinfo: aab. subclasses; there are no ambiguities when
using UTC, or any other fixed-offset *note tzinfo: aab. subclass (such
as a class representing only EST (fixed offset -5 hours), or only EDT
(fixed offset -4 hours)).

See also
........

pytz(1)
     The standard library has no *note tzinfo: aab. instances, but
     there exists a third-party library which brings the _IANA timezone
     database_ (also known as the Olson database) to Python: _pytz_.

     _pytz_ contains up-to-date information and its usage is
     recommended.

IANA timezone database(2)
     The Time Zone Database (often called tz or zoneinfo) contains code
     and data that represent the history of local time for many
     representative locations around the globe. It is updated
     periodically to reflect changes made by political bodies to time
     zone boundaries, UTC offsets, and daylight-saving rules.

  ---------- Footnotes ----------

  (1) http://pypi.python.org/pypi/pytz/

  (2) http://www.iana.org/time-zones


File: python.info,  Node: strftime and strptime Behavior,  Prev: tzinfo Objects,  Up: datetime --- Basic date and time types

5.8.1.7 `strftime()' and `strptime()' Behavior
..............................................

*note date: 356, *note datetime: 2d7, and *note time: 357. objects all
support a `strftime(format)' method, to create a string representing
the time under the control of an explicit format string.  Broadly
speaking, `d.strftime(fmt)' acts like the *note time: 17a. module's
`time.strftime(fmt, d.timetuple())' although not all objects support a
`timetuple()' method.

  Conversely, the *note datetime.strptime(): ad7. class method creates a
*note datetime: 2d7. object from a string representing a date and time
and a corresponding format string. `datetime.strptime(date_string,
format)' is equivalent to `datetime(*(time.strptime(date_string,
format)[0:6]))'.

  For *note time: 357. objects, the format codes for year, month, and
day should not be used, as time objects have no such values.  If
they're used anyway, `1900' is substituted for the year, and `1' for
the month and day.

  For *note date: 356. objects, the format codes for hours, minutes,
seconds, and microseconds should not be used, as *note date: 356.
objects have no such values.  If they're used anyway, `0' is
substituted for them.

  New in version 2.6: *note time: 357. and *note datetime: 2d7. objects
support a `%f' format code which expands to the number of microseconds
in the object, zero-padded on the left to six places.

  For a naive object, the `%z' and `%Z' format codes are replaced by
empty strings.

  For an aware object:

`%z'
     `utcoffset()' is transformed into a 5-character string of the form
     +HHMM or -HHMM, where HH is a 2-digit string giving the number of
     UTC offset hours, and MM is a 2-digit string giving the number of
     UTC offset minutes.  For example, if `utcoffset()' returns
     `timedelta(hours=-3, minutes=-30)', `%z' is replaced with the
     string `'-0330''.

`%Z'
     If `tzname()' returns `None', `%Z' is replaced by an empty string.
     Otherwise `%Z' is replaced by the returned value, which must be a
     string.

  The full set of format codes supported varies across platforms,
because Python calls the platform C library's `strftime()' function,
and platform variations are common.

  The following is a list of all the format codes that the C standard
(1989 version) requires, and these work on all platforms with a
standard C implementation.  Note that the 1999 version of the C
standard added additional format codes.

  The exact range of years for which `strftime()' works also varies
across platforms.  Regardless of platform, years before 1900 cannot be
used.

Directive       Meaning                              Notes
----------------------------------------------------------------- 
`%a'            Locale's abbreviated weekday name.   
`%A'            Locale's full weekday name.          
`%b'            Locale's abbreviated month name.     
`%B'            Locale's full month name.            
`%c'            Locale's appropriate date and time   
                representation.                      
`%d'            Day of the month as a decimal        
                number [01,31].                      
`%f'            Microsecond as a decimal number      (1)
                [0,999999], zero-padded on the left  
`%H'            Hour (24-hour clock) as a decimal    
                number [00,23].                      
`%I'            Hour (12-hour clock) as a decimal    
                number [01,12].                      
`%j'            Day of the year as a decimal number  
                [001,366].                           
`%m'            Month as a decimal number [01,12].   
`%M'            Minute as a decimal number [00,59].  
`%p'            Locale's equivalent of either AM or  (2)
                PM.                                  
`%S'            Second as a decimal number [00,61].  (3)
`%U'            Week number of the year (Sunday as   (4)
                the first day of the week) as a      
                decimal number [00,53].  All days    
                in a new year preceding the first    
                Sunday are considered to be in week  
                0.                                   
`%w'            Weekday as a decimal number          
                [0(Sunday),6].                       
`%W'            Week number of the year (Monday as   (4)
                the first day of the week) as a      
                decimal number [00,53].  All days    
                in a new year preceding the first    
                Monday are considered to be in week  
                0.                                   
`%x'            Locale's appropriate date            
                representation.                      
`%X'            Locale's appropriate time            
                representation.                      
`%y'            Year without century as a decimal    
                number [00,99].                      
`%Y'            Year with century as a decimal       
                number.                              
`%z'            UTC offset in the form +HHMM or      (5)
                -HHMM (empty string if the the       
                object is naive).                    
`%Z'            Time zone name (empty string if the  
                object is naive).                    
`%%'            A literal `'%'' character.           

  Notes:

  1. When used with the `strptime()' method, the `%f' directive accepts
     from one to six digits and zero pads on the right.  `%f' is an
     extension to the set of format characters in the C standard (but
     implemented separately in datetime objects, and therefore always
     available).

  2. When used with the `strptime()' method, the `%p' directive only
     affects the output hour field if the `%I' directive is used to
     parse the hour.

  3. The range really is `0' to `61'; according to the Posix standard
     this accounts for leap seconds and the (very rare) double leap
     seconds.  The *note time: 17a. module may produce and does accept
     leap seconds since it is based on the Posix standard, but the
     *note datetime: 7d. module does not accept leap seconds in
     `strptime()' input nor will it produce them in `strftime()' output.

  4. When used with the `strptime()' method, `%U' and `%W' are only
     used in calculations when the day of the week and the year are
     specified.

  5. For example, if `utcoffset()' returns `timedelta(hours=-3,
     minutes=-30)', `%z' is replaced with the string `'-0330''.


File: python.info,  Node: calendar --- General calendar-related functions,  Next: collections --- High-performance container datatypes,  Prev: datetime --- Basic date and time types,  Up: Data Types

5.8.2 `calendar' -- General calendar-related functions
------------------------------------------------------

*Source code:* Lib/calendar.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  This module allows you to output calendars like the Unix *cal*
program, and provides additional useful functions related to the
calendar. By default, these calendars have Monday as the first day of
the week, and Sunday as the last (the European convention). Use *note
setfirstweekday(): b11. to set the first day of the week to Sunday (6)
or to any other weekday.  Parameters that specify dates are given as
integers. For related functionality, see also the *note datetime: 7d.
and *note time: 17a. modules.

  Most of these functions and classes rely on the *note datetime: 7d.
module which uses an idealized calendar, the current Gregorian calendar
indefinitely extended in both directions.  This matches the definition
of the "proleptic Gregorian" calendar in Dershowitz and Reingold's book
"Calendrical Calculations", where it's the base calendar for all
computations.

 -- Class: calendar.Calendar ([firstweekday])
     Creates a *note Calendar: b12. object. _firstweekday_ is an
     integer specifying the first day of the week. `0' is Monday (the
     default), `6' is Sunday.

     A *note Calendar: b12. object provides several methods that can be
     used for preparing the calendar data for formatting. This class
     doesn't do any formatting itself. This is the job of subclasses.

     New in version 2.5.

     *note Calendar: b12. instances have the following methods:

      -- Method: iterweekdays ()
          Return an iterator for the week day numbers that will be used
          for one week.  The first value from the iterator will be the
          same as the value of the *note firstweekday: b14. property.

      -- Method: itermonthdates (year, month)
          Return an iterator for the month _month_ (1-12) in the year
          _year_. This iterator will return all days (as *note
          datetime.date: 356. objects) for the month and all days
          before the start of the month or after the end of the month
          that are required to get a complete week.

      -- Method: itermonthdays2 (year, month)
          Return an iterator for the month _month_ in the year _year_
          similar to *note itermonthdates(): b15. Days returned will be
          tuples consisting of a day number and a week day number.

      -- Method: itermonthdays (year, month)
          Return an iterator for the month _month_ in the year _year_
          similar to *note itermonthdates(): b15. Days returned will
          simply be day numbers.

      -- Method: monthdatescalendar (year, month)
          Return a list of the weeks in the month _month_ of the _year_
          as full weeks.  Weeks are lists of seven *note datetime.date:
          356. objects.

      -- Method: monthdays2calendar (year, month)
          Return a list of the weeks in the month _month_ of the _year_
          as full weeks.  Weeks are lists of seven tuples of day
          numbers and weekday numbers.

      -- Method: monthdayscalendar (year, month)
          Return a list of the weeks in the month _month_ of the _year_
          as full weeks.  Weeks are lists of seven day numbers.

      -- Method: yeardatescalendar (year[, width])
          Return the data for the specified year ready for formatting.
          The return value is a list of month rows. Each month row
          contains up to _width_ months (defaulting to 3). Each month
          contains between 4 and 6 weeks and each week contains 1-7
          days. Days are *note datetime.date: 356. objects.

      -- Method: yeardays2calendar (year[, width])
          Return the data for the specified year ready for formatting
          (similar to *note yeardatescalendar(): b1b.). Entries in the
          week lists are tuples of day numbers and weekday numbers. Day
          numbers outside this month are zero.

      -- Method: yeardayscalendar (year[, width])
          Return the data for the specified year ready for formatting
          (similar to *note yeardatescalendar(): b1b.). Entries in the
          week lists are day numbers. Day numbers outside this month
          are zero.

 -- Class: calendar.TextCalendar ([firstweekday])
     This class can be used to generate plain text calendars.

     New in version 2.5.

     *note TextCalendar: b1e. instances have the following methods:

      -- Method: formatmonth (theyear, themonth[, w[, l]])
          Return a month's calendar in a multi-line string. If _w_ is
          provided, it specifies the width of the date columns, which
          are centered. If _l_ is given, it specifies the number of
          lines that each week will use. Depends on the first weekday
          as specified in the constructor or set by the *note
          setfirstweekday(): b11. method.

      -- Method: prmonth (theyear, themonth[, w[, l]])
          Print a month's calendar as returned by *note formatmonth():
          b1f.

      -- Method: formatyear (theyear[, w[, l[, c[, m]]]])
          Return a _m_-column calendar for an entire year as a
          multi-line string.  Optional parameters _w_, _l_, and _c_ are
          for date column width, lines per week, and number of spaces
          between month columns, respectively. Depends on the first
          weekday as specified in the constructor or set by the *note
          setfirstweekday(): b11. method.  The earliest year for which
          a calendar can be generated is platform-dependent.

      -- Method: pryear (theyear[, w[, l[, c[, m]]]])
          Print the calendar for an entire year as returned by *note
          formatyear(): b21.

 -- Class: calendar.HTMLCalendar ([firstweekday])
     This class can be used to generate HTML calendars.

     New in version 2.5.

     *note HTMLCalendar: b23. instances have the following methods:

      -- Method: formatmonth (theyear, themonth[, withyear])
          Return a month's calendar as an HTML table. If _withyear_ is
          true the year will be included in the header, otherwise just
          the month name will be used.

      -- Method: formatyear (theyear[, width])
          Return a year's calendar as an HTML table. _width_
          (defaulting to 3) specifies the number of months per row.

      -- Method: formatyearpage (theyear[, width[, css[, encoding]]])
          Return a year's calendar as a complete HTML page. _width_
          (defaulting to 3) specifies the number of months per row.
          _css_ is the name for the cascading style sheet to be used.
          *note None: 393. can be passed if no style sheet should be
          used. _encoding_ specifies the encoding to be used for the
          output (defaulting to the system default encoding).

 -- Class: calendar.LocaleTextCalendar ([firstweekday[, locale]])
     This subclass of *note TextCalendar: b1e. can be passed a locale
     name in the constructor and will return month and weekday names in
     the specified locale.  If this locale includes an encoding all
     strings containing month and weekday names will be returned as
     unicode.

     New in version 2.5.

 -- Class: calendar.LocaleHTMLCalendar ([firstweekday[, locale]])
     This subclass of *note HTMLCalendar: b23. can be passed a locale
     name in the constructor and will return month and weekday names in
     the specified locale. If this locale includes an encoding all
     strings containing month and weekday names will be returned as
     unicode.

     New in version 2.5.

     Note: The `formatweekday()' and `formatmonthname()' methods of
     these two classes temporarily change the current locale to the
     given _locale_.  Because the current locale is a process-wide
     setting, they are not thread-safe.

  For simple text calendars this module provides the following
functions.

 -- Function: calendar.setfirstweekday (weekday)
     Sets the weekday (`0' is Monday, `6' is Sunday) to start each
     week. The values `MONDAY', `TUESDAY', `WEDNESDAY', `THURSDAY',
     `FRIDAY', `SATURDAY', and `SUNDAY' are provided for convenience.
     For example, to set the first weekday to Sunday:

         import calendar
         calendar.setfirstweekday(calendar.SUNDAY)

     New in version 2.0.

 -- Function: calendar.firstweekday ()
     Returns the current setting for the weekday to start each week.

     New in version 2.0.

 -- Function: calendar.isleap (year)
     Returns *note True: 3a9. if _year_ is a leap year, otherwise *note
     False: 3aa.

 -- Function: calendar.leapdays (y1, y2)
     Returns the number of leap years in the range from _y1_ to _y2_
     (exclusive), where _y1_ and _y2_ are years.

     Changed in version 2.0: This function didn't work for ranges
     spanning a century change in Python 1.5.2.

 -- Function: calendar.weekday (year, month, day)
     Returns the day of the week (`0' is Monday) for _year_
     (`1970'-...), _month_ (`1'-`12'), _day_ (`1'-`31').

 -- Function: calendar.weekheader (n)
     Return a header containing abbreviated weekday names. _n_
     specifies the width in characters for one weekday.

 -- Function: calendar.monthrange (year, month)
     Returns weekday of first day of the month and number of days in
     month,  for the specified _year_ and _month_.

 -- Function: calendar.monthcalendar (year, month)
     Returns a matrix representing a month's calendar.  Each row
     represents a week; days outside of the month a represented by
     zeros. Each week begins with Monday unless set by *note
     setfirstweekday(): b11.

 -- Function: calendar.prmonth (theyear, themonth[, w[, l]])
     Prints a month's calendar as returned by *note month(): b30.

 -- Function: calendar.month (theyear, themonth[, w[, l]])
     Returns a month's calendar in a multi-line string using the
     `formatmonth()' of the *note TextCalendar: b1e. class.

     New in version 2.0.

 -- Function: calendar.prcal (year[, w[, l[c]]])
     Prints the calendar for an entire year as returned by  *note
     calendar(): 1f.

 -- Function: calendar.calendar (year[, w[, l[c]]])
     Returns a 3-column calendar for an entire year as a multi-line
     string using the `formatyear()' of the *note TextCalendar: b1e.
     class.

     New in version 2.0.

 -- Function: calendar.timegm (tuple)
     An unrelated but handy function that takes a time tuple such as
     returned by the `gmtime()' function in the *note time: 17a.
     module, and returns the corresponding Unix timestamp value,
     assuming an epoch of 1970, and the POSIX encoding.  In fact, *note
     time.gmtime(): b34. and *note timegm(): b33. are each others'
     inverse.

     New in version 2.0.

  The *note calendar: 1f. module exports the following data attributes:

 -- Data: calendar.day_name
     An array that represents the days of the week in the current
     locale.

 -- Data: calendar.day_abbr
     An array that represents the abbreviated days of the week in the
     current locale.

 -- Data: calendar.month_name
     An array that represents the months of the year in the current
     locale.  This follows normal convention of January being month
     number 1, so it has a length of 13 and  `month_name[0]' is the
     empty string.

 -- Data: calendar.month_abbr
     An array that represents the abbreviated months of the year in the
     current locale.  This follows normal convention of January being
     month number 1, so it has a length of 13 and  `month_abbr[0]' is
     the empty string.

See also
........

Module *note datetime: 7d.
     Object-oriented interface to dates and times with similar
     functionality to the *note time: 17a. module.

Module *note time: 17a.
     Low-level time related functions.

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/calendar.py


File: python.info,  Node: collections --- High-performance container datatypes,  Next: heapq --- Heap queue algorithm,  Prev: calendar --- General calendar-related functions,  Up: Data Types

5.8.3 `collections' -- High-performance container datatypes
-----------------------------------------------------------

New in version 2.4.

  *Source code:* Lib/collections.py(1) and Lib/_abcoll.py(2)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, *note
dict: 2fe, *note list: 3b5, *note set: 363, and *note tuple: 401.

*note namedtuple(): 1cc.  factory function for creating tuple subclasses with named fields         New in version 2.6.
*note deque: 206.         list-like container with fast appends and pops on either end             New in version 2.4.
*note Counter: 1b6.       dict subclass for counting hashable objects                              New in version 2.7.
*note OrderedDict: 1b5.   dict subclass that remembers the order entries were added                New in version 2.7.
*note defaultdict: 8e1.   dict subclass that calls a factory function to supply missing values     New in version 2.5.

  In addition to the concrete container classes, the collections module
provides *note abstract base classes: b3b. that can be used to test
whether a class provides a particular interface, for example, whether
it is hashable or a mapping.

* Menu:

* Counter objects::
* deque objects::
* defaultdict objects::
* namedtuple() Factory Function for Tuples with Named Fields: namedtuple Factory Function for Tuples with Named Fields.
* OrderedDict objects::
* Collections Abstract Base Classes::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/collections.py

  (2) http://hg.python.org/cpython/file/2.7/Lib/_abcoll.py


File: python.info,  Node: Counter objects,  Next: deque objects,  Up: collections --- High-performance container datatypes

5.8.3.1 `Counter' objects
.........................

A counter tool is provided to support convenient and rapid tallies.
For example:

    >>> # Tally occurrences of words in a list
    >>> cnt = Counter()
    >>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
    ...     cnt[word] += 1
    >>> cnt
    Counter({'blue': 3, 'red': 2, 'green': 1})

    >>> # Find the ten most common words in Hamlet
    >>> import re
    >>> words = re.findall(r'\w+', open('hamlet.txt').read().lower())
    >>> Counter(words).most_common(10)
    [('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),
     ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]


 -- Class: collections.Counter ([iterable-or-mapping])
     A *note Counter: 1b6. is a *note dict: 2fe. subclass for counting
     hashable objects.  It is an unordered collection where elements
     are stored as dictionary keys and their counts are stored as
     dictionary values.  Counts are allowed to be any integer value
     including zero or negative counts.  The *note Counter: 1b6.  class
     is similar to bags or multisets in other languages.

     Elements are counted from an _iterable_ or initialized from another
     _mapping_ (or counter):

         >>> c = Counter()                           # a new, empty counter
         >>> c = Counter('gallahad')                 # a new counter from an iterable
         >>> c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping
         >>> c = Counter(cats=4, dogs=8)             # a new counter from keyword args

     Counter objects have a dictionary interface except that they
     return a zero count for missing items instead of raising a *note
     KeyError: 202.:

         >>> c = Counter(['eggs', 'ham'])
         >>> c['bacon']                              # count of a missing element is zero
         0

     Setting a count to zero does not remove an element from a counter.
     Use `del' to remove it entirely:

         >>> c['sausage'] = 0                        # counter entry with a zero count
         >>> del c['sausage']                        # del actually removes the entry

     New in version 2.7.

     Counter objects support three methods beyond those available for
     all dictionaries:

      -- Method: elements ()
          Return an iterator over elements repeating each as many times
          as its count.  Elements are returned in arbitrary order.  If
          an element's count is less than one, *note elements(): 204.
          will ignore it.

              >>> c = Counter(a=4, b=2, c=0, d=-2)
              >>> list(c.elements())
              ['a', 'a', 'a', 'a', 'b', 'b']



      -- Method: most_common ([n])
          Return a list of the _n_ most common elements and their
          counts from the most common to the least.  If _n_ is not
          specified, *note most_common(): 203.  returns _all_ elements
          in the counter.  Elements with equal counts are ordered
          arbitrarily:

              >>> Counter('abracadabra').most_common(3)
              [('a', 5), ('r', 2), ('b', 2)]



      -- Method: subtract ([iterable-or-mapping])
          Elements are subtracted from an _iterable_ or from another
          _mapping_ (or counter).  Like *note dict.update(): 3fb. but
          subtracts counts instead of replacing them.  Both inputs and
          outputs may be zero or negative.

              >>> c = Counter(a=4, b=2, c=0, d=-2)
              >>> d = Counter(a=1, b=2, c=3, d=4)
              >>> c.subtract(d)
              >>> c
              Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})



     The usual dictionary methods are available for *note Counter: 1b6.
     objects except for two which work differently for counters.

      -- Method: fromkeys (iterable)
          This class method is not implemented for *note Counter: 1b6.
          objects.

      -- Method: update ([iterable-or-mapping])
          Elements are counted from an _iterable_ or added-in from
          another _mapping_ (or counter).  Like *note dict.update():
          3fb. but adds counts instead of replacing them.  Also, the
          _iterable_ is expected to be a sequence of elements, not a
          sequence of `(key, value)' pairs.

  Common patterns for working with *note Counter: 1b6. objects:

    sum(c.values())                 # total of all counts
    c.clear()                       # reset all counts
    list(c)                         # list unique elements
    set(c)                          # convert to a set
    dict(c)                         # convert to a regular dictionary
    c.items()                       # convert to a list of (elem, cnt) pairs
    Counter(dict(list_of_pairs))    # convert from a list of (elem, cnt) pairs
    c.most_common()[:-n:-1]         # n least common elements
    c += Counter()                  # remove zero and negative counts

Several mathematical operations are provided for combining *note
Counter: 1b6.  objects to produce multisets (counters that have counts
greater than zero).  Addition and subtraction combine counters by
adding or subtracting the counts of corresponding elements.
Intersection and union return the minimum and maximum of corresponding
counts.  Each operation can accept inputs with signed counts, but the
output will exclude results with counts of zero or less.

    >>> c = Counter(a=3, b=1)
    >>> d = Counter(a=1, b=2)
    >>> c + d                       # add two counters together:  c[x] + d[x]
    Counter({'a': 4, 'b': 3})
    >>> c - d                       # subtract (keeping only positive counts)
    Counter({'a': 2})
    >>> c & d                       # intersection:  min(c[x], d[x])
    Counter({'a': 1, 'b': 1})
    >>> c | d                       # union:  max(c[x], d[x])
    Counter({'a': 3, 'b': 2})


     Note: Counters were primarily designed to work with positive
     integers to represent running counts; however, care was taken to
     not unnecessarily preclude use cases needing other types or
     negative values.  To help with those use cases, this section
     documents the minimum range and type restrictions.

        * The *note Counter: 1b6. class itself is a dictionary subclass
          with no restrictions on its keys and values.  The values are
          intended to be numbers representing counts, but you _could_
          store anything in the value field.

        * The `most_common()' method requires only that the values be
          orderable.

        * For in-place operations such as `c[key] += 1', the value type
          need only support addition and subtraction.  So fractions,
          floats, and decimals would work and negative values are
          supported.  The same is also true for `update()' and
          `subtract()' which allow negative and zero values for both
          inputs and outputs.

        * The multiset methods are designed only for use cases with
          positive values.  The inputs may be negative or zero, but
          only outputs with positive values are created.  There are no
          type restrictions, but the value type needs to support
          addition, subtraction, and comparison.

        * The `elements()' method requires integer counts.  It ignores
          zero and negative counts.

See also
........

   * Counter class(1) adapted for Python 2.5 and an early Bag recipe(2)
     for Python 2.4.

   * Bag class(3) in Smalltalk.

   * Wikipedia entry for Multisets(4).

   * C++ multisets(5) tutorial with examples.

   * For mathematical operations on multisets and their use cases, see
     _Knuth, Donald. The Art of Computer Programming Volume II, Section
     4.6.3, Exercise 19_.

   * To enumerate all distinct multisets of a given size over a given
     set of elements, see *note
     itertools.combinations_with_replacement(): b3f.

          map(Counter, combinations_with_replacement('ABC', 2)) -> AA
          AB AC BB BC CC

---------- Footnotes ----------

  (1) http://code.activestate.com/recipes/576611/

  (2) http://code.activestate.com/recipes/259174/

  (3)
http://www.gnu.org/software/smalltalk/manual-base/html_node/Bag.html

  (4) http://en.wikipedia.org/wiki/Multiset

  (5)
http://www.demo2s.com/Tutorial/Cpp/0380__set-multiset/Catalog0380__set-multiset.htm


File: python.info,  Node: deque objects,  Next: defaultdict objects,  Prev: Counter objects,  Up: collections --- High-performance container datatypes

5.8.3.2 `deque' objects
.......................

 -- Class: collections.deque ([iterable[, maxlen]])
     Returns a new deque object initialized left-to-right (using *note
     append(): b41.) with data from _iterable_.  If _iterable_ is not
     specified, the new deque is empty.

     Deques are a generalization of stacks and queues (the name is
     pronounced "deck" and is short for "double-ended queue").  Deques
     support thread-safe, memory efficient appends and pops from either
     side of the deque with approximately the same O(1) performance in
     either direction.

     Though *note list: 3b5. objects support similar operations, they
     are optimized for fast fixed-length operations and incur O(n)
     memory movement costs for `pop(0)' and `insert(0, v)' operations
     which change both the size and position of the underlying data
     representation.

     New in version 2.4.

     If _maxlen_ is not specified or is _None_, deques may grow to an
     arbitrary length.  Otherwise, the deque is bounded to the
     specified maximum length.  Once a bounded length deque is full,
     when new items are added, a corresponding number of items are
     discarded from the opposite end.  Bounded length deques provide
     functionality similar to the `tail' filter in Unix. They are also
     useful for tracking transactions and other pools of data where
     only the most recent activity is of interest.

     Changed in version 2.6: Added _maxlen_ parameter.

     Deque objects support the following methods:

      -- Method: append (x)
          Add _x_ to the right side of the deque.

      -- Method: appendleft (x)
          Add _x_ to the left side of the deque.

      -- Method: clear ()
          Remove all elements from the deque leaving it with length 0.

      -- Method: count (x)
          Count the number of deque elements equal to _x_.

          New in version 2.7.

      -- Method: extend (iterable)
          Extend the right side of the deque by appending elements from
          the iterable argument.

      -- Method: extendleft (iterable)
          Extend the left side of the deque by appending elements from
          _iterable_.  Note, the series of left appends results in
          reversing the order of elements in the iterable argument.

      -- Method: pop ()
          Remove and return an element from the right side of the
          deque. If no elements are present, raises an *note
          IndexError: 4d8.

      -- Method: popleft ()
          Remove and return an element from the left side of the deque.
          If no elements are present, raises an *note IndexError: 4d8.

      -- Method: remove (value)
          Removed the first occurrence of _value_.  If not found,
          raises a *note ValueError: 233.

          New in version 2.5.

      -- Method: reverse ()
          Reverse the elements of the deque in-place and then return
          `None'.

          New in version 2.7.

      -- Method: rotate (n)
          Rotate the deque _n_ steps to the right.  If _n_ is negative,
          rotate to the left.  Rotating one step to the right is
          equivalent to: `d.appendleft(d.pop())'.

     Deque objects also provide one read-only attribute:

      -- Attribute: maxlen
          Maximum size of a deque or _None_ if unbounded.

          New in version 2.7.

In addition to the above, deques support iteration, pickling, `len(d)',
`reversed(d)', `copy.copy(d)', `copy.deepcopy(d)', membership testing
with the *note in: 421. operator, and subscript references such as
`d[-1]'.  Indexed access is O(1) at both ends but slows to O(n) in the
middle.  For fast random access, use lists instead.

  Example:

    >>> from collections import deque
    >>> d = deque('ghi')                 # make a new deque with three items
    >>> for elem in d:                   # iterate over the deque's elements
    ...     print elem.upper()
    G
    H
    I

    >>> d.append('j')                    # add a new entry to the right side
    >>> d.appendleft('f')                # add a new entry to the left side
    >>> d                                # show the representation of the deque
    deque(['f', 'g', 'h', 'i', 'j'])

    >>> d.pop()                          # return and remove the rightmost item
    'j'
    >>> d.popleft()                      # return and remove the leftmost item
    'f'
    >>> list(d)                          # list the contents of the deque
    ['g', 'h', 'i']
    >>> d[0]                             # peek at leftmost item
    'g'
    >>> d[-1]                            # peek at rightmost item
    'i'

    >>> list(reversed(d))                # list the contents of a deque in reverse
    ['i', 'h', 'g']
    >>> 'h' in d                         # search the deque
    True
    >>> d.extend('jkl')                  # add multiple elements at once
    >>> d
    deque(['g', 'h', 'i', 'j', 'k', 'l'])
    >>> d.rotate(1)                      # right rotation
    >>> d
    deque(['l', 'g', 'h', 'i', 'j', 'k'])
    >>> d.rotate(-1)                     # left rotation
    >>> d
    deque(['g', 'h', 'i', 'j', 'k', 'l'])

    >>> deque(reversed(d))               # make a new deque in reverse order
    deque(['l', 'k', 'j', 'i', 'h', 'g'])
    >>> d.clear()                        # empty the deque
    >>> d.pop()                          # cannot pop from an empty deque
    Traceback (most recent call last):
      File "<pyshell#6>", line 1, in -toplevel-
        d.pop()
    IndexError: pop from an empty deque

    >>> d.extendleft('abc')              # extendleft() reverses the input order
    >>> d
    deque(['c', 'b', 'a'])


* Menu:

* deque Recipes::


File: python.info,  Node: deque Recipes,  Up: deque objects

5.8.3.3 `deque' Recipes
.......................

This section shows various approaches to working with deques.

  Bounded length deques provide functionality similar to the `tail'
filter in Unix:

    def tail(filename, n=10):
        'Return the last n lines of a file'
        return deque(open(filename), n)

Another approach to using deques is to maintain a sequence of recently
added elements by appending to the right and popping to the left:

    def moving_average(iterable, n=3):
        # moving_average([40, 30, 50, 46, 39, 44]) --> 40.0 42.0 45.0 43.0
        # http://en.wikipedia.org/wiki/Moving_average
        it = iter(iterable)
        d = deque(itertools.islice(it, n-1))
        d.appendleft(0)
        s = sum(d)
        for elem in it:
            s += elem - d.popleft()
            d.append(elem)
            yield s / float(n)

The `rotate()' method provides a way to implement *note deque: 206.
slicing and deletion.  For example, a pure Python implementation of
`del d[n]' relies on the `rotate()' method to position elements to be
popped:

    def delete_nth(d, n):
        d.rotate(-n)
        d.popleft()
        d.rotate(n)

To implement *note deque: 206. slicing, use a similar approach applying
`rotate()' to bring a target element to the left side of the deque.
Remove old entries with `popleft()', add new entries with `extend()',
and then reverse the rotation.  With minor variations on that approach,
it is easy to implement Forth style stack manipulations such as `dup',
`drop', `swap', `over', `pick', `rot', and `roll'.


File: python.info,  Node: defaultdict objects,  Next: namedtuple Factory Function for Tuples with Named Fields,  Prev: deque objects,  Up: collections --- High-performance container datatypes

5.8.3.4 `defaultdict' objects
.............................

 -- Class: collections.defaultdict ([default_factory[, ...]])
     Returns a new dictionary-like object.  *note defaultdict: 8e1. is
     a subclass of the built-in *note dict: 2fe. class.  It overrides
     one method and adds one writable instance variable.  The remaining
     functionality is the same as for the *note dict: 2fe. class and is
     not documented here.

     The first argument provides the initial value for the *note
     default_factory: b4c.  attribute; it defaults to `None'. All
     remaining arguments are treated the same as if they were passed to
     the *note dict: 2fe. constructor, including keyword arguments.

     New in version 2.5.

     *note defaultdict: 8e1. objects support the following method in
     addition to the standard *note dict: 2fe. operations:

      -- Method: __missing__ (key)
          If the *note default_factory: b4c. attribute is `None', this
          raises a *note KeyError: 202. exception with the _key_ as
          argument.

          If *note default_factory: b4c. is not `None', it is called
          without arguments to provide a default value for the given
          _key_, this value is inserted in the dictionary for the
          _key_, and returned.

          If calling *note default_factory: b4c. raises an exception
          this exception is propagated unchanged.

          This method is called by the *note __getitem__(): 448. method
          of the *note dict: 2fe. class when the requested key is not
          found; whatever it returns or raises is then returned or
          raised by *note __getitem__(): 448.

          Note that *note __missing__(): b4d. is _not_ called for any
          operations besides *note __getitem__(): 448. This means that
          `get()' will, like normal dictionaries, return `None' as a
          default rather than using *note default_factory: b4c.

     *note defaultdict: 8e1. objects support the following instance
     variable:

      -- Attribute: default_factory
          This attribute is used by the *note __missing__(): b4d.
          method; it is initialized from the first argument to the
          constructor, if present, or to `None', if absent.

* Menu:

* defaultdict Examples::


File: python.info,  Node: defaultdict Examples,  Up: defaultdict objects

5.8.3.5 `defaultdict' Examples
..............................

Using *note list: 3b5. as the `default_factory', it is easy to group a
sequence of key-value pairs into a dictionary of lists:

    >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
    >>> d = defaultdict(list)
    >>> for k, v in s:
    ...     d[k].append(v)
    ...
    >>> d.items()
    [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

When each key is encountered for the first time, it is not already in
the mapping; so an entry is automatically created using the
`default_factory' function which returns an empty *note list: 3b5.  The
`list.append()' operation then attaches the value to the new list.
When keys are encountered again, the look-up proceeds normally
(returning the list for that key) and the `list.append()' operation
adds another value to the list. This technique is simpler and faster
than an equivalent technique using *note dict.setdefault(): 8eb.:

    >>> d = {}
    >>> for k, v in s:
    ...     d.setdefault(k, []).append(v)
    ...
    >>> d.items()
    [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

Setting the `default_factory' to *note int: 1ef. makes the *note
defaultdict: 8e1. useful for counting (like a bag or multiset in other
languages):

    >>> s = 'mississippi'
    >>> d = defaultdict(int)
    >>> for k in s:
    ...     d[k] += 1
    ...
    >>> d.items()
    [('i', 4), ('p', 2), ('s', 4), ('m', 1)]

When a letter is first encountered, it is missing from the mapping, so
the `default_factory' function calls *note int(): 1ef. to supply a
default count of zero.  The increment operation then builds up the
count for each letter.

  The function *note int(): 1ef. which always returns zero is just a
special case of constant functions.  A faster and more flexible way to
create constant functions is to use *note itertools.repeat(): b4f.
which can supply any constant value (not just zero):

    >>> def constant_factory(value):
    ...     return itertools.repeat(value).next
    >>> d = defaultdict(constant_factory('<missing>'))
    >>> d.update(name='John', action='ran')
    >>> '%(name)s %(action)s to %(object)s' % d
    'John ran to <missing>'

Setting the `default_factory' to *note set: 363. makes the *note
defaultdict: 8e1. useful for building a dictionary of sets:

    >>> s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]
    >>> d = defaultdict(set)
    >>> for k, v in s:
    ...     d[k].add(v)
    ...
    >>> d.items()
    [('blue', set([2, 4])), ('red', set([1, 3]))]



File: python.info,  Node: namedtuple Factory Function for Tuples with Named Fields,  Next: OrderedDict objects,  Prev: defaultdict objects,  Up: collections --- High-performance container datatypes

5.8.3.6 `namedtuple()' Factory Function for Tuples with Named Fields
....................................................................

Named tuples assign meaning to each position in a tuple and allow for
more readable, self-documenting code.  They can be used wherever
regular tuples are used, and they add the ability to access fields by
name instead of position index.

 -- Function: collections.namedtuple (typename, field_names[,
          verbose=False][, rename=False])
     Returns a new tuple subclass named _typename_.  The new subclass
     is used to create tuple-like objects that have fields accessible
     by attribute lookup as well as being indexable and iterable.
     Instances of the subclass also have a helpful docstring (with
     typename and field_names) and a helpful *note __repr__(): 47f.
     method which lists the tuple contents in a `name=value' format.

     The _field_names_ are a sequence of strings such as `['x', 'y']'.
     Alternatively, _field_names_ can be a single string with each
     fieldname separated by whitespace and/or commas, for example `'x
     y'' or `'x, y''.

     Any valid Python identifier may be used for a fieldname except for
     names starting with an underscore.  Valid identifiers consist of
     letters, digits, and underscores but do not start with a digit or
     underscore and cannot be a *note keyword: fd. such as _class_,
     _for_, _return_, _global_, _pass_, _print_, or _raise_.

     If _rename_ is true, invalid fieldnames are automatically replaced
     with positional names.  For example, `['abc', 'def', 'ghi',
     'abc']' is converted to `['abc', '_1', 'ghi', '_3']', eliminating
     the keyword `def' and the duplicate fieldname `abc'.

     If _verbose_ is true, the class definition is printed just before
     being built.

     Named tuple instances do not have per-instance dictionaries, so
     they are lightweight and require no more memory than regular
     tuples.

     New in version 2.6.

     Changed in version 2.7: added support for _rename_.

  Example:

    >>> Point = namedtuple('Point', ['x', 'y'], verbose=True)
    class Point(tuple):
        'Point(x, y)'

        __slots__ = ()

        _fields = ('x', 'y')

        def __new__(_cls, x, y):
            'Create a new instance of Point(x, y)'
            return _tuple.__new__(_cls, (x, y))

        @classmethod
        def _make(cls, iterable, new=tuple.__new__, len=len):
            'Make a new Point object from a sequence or iterable'
            result = new(cls, iterable)
            if len(result) != 2:
                raise TypeError('Expected 2 arguments, got %d' % len(result))
            return result

        def __repr__(self):
            'Return a nicely formatted representation string'
            return 'Point(x=%r, y=%r)' % self

        def _asdict(self):
            'Return a new OrderedDict which maps field names to their values'
            return OrderedDict(zip(self._fields, self))

        def _replace(_self, **kwds):
            'Return a new Point object replacing specified fields with new values'
            result = _self._make(map(kwds.pop, ('x', 'y'), _self))
            if kwds:
                raise ValueError('Got unexpected field names: %r' % kwds.keys())
            return result

        def __getnewargs__(self):
            'Return self as a plain tuple.   Used by copy and pickle.'
            return tuple(self)

        x = _property(_itemgetter(0), doc='Alias for field number 0')

        y = _property(_itemgetter(1), doc='Alias for field number 1')


    >>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
    >>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
    33
    >>> x, y = p                # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y               # fields also accessible by name
    33
    >>> p                       # readable __repr__ with a name=value style
    Point(x=11, y=22)

Named tuples are especially useful for assigning field names to result
tuples returned by the *note csv: 77. or *note sqlite3: 15f. modules:

    EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')

    import csv
    for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
        print emp.name, emp.title

    import sqlite3
    conn = sqlite3.connect('/companydata')
    cursor = conn.cursor()
    cursor.execute('SELECT name, age, title, department, paygrade FROM employees')
    for emp in map(EmployeeRecord._make, cursor.fetchall()):
        print emp.name, emp.title

In addition to the methods inherited from tuples, named tuples support
three additional methods and one attribute.  To prevent conflicts with
field names, the method and attribute names start with an underscore.

 -- Class Method: somenamedtuple._make (iterable)
     Class method that makes a new instance from an existing sequence
     or iterable.

         >>> t = [11, 22]
         >>> Point._make(t)
         Point(x=11, y=22)



 -- Method: somenamedtuple._asdict ()
     Return a new *note OrderedDict: 1b5. which maps field names to
     their corresponding values:

         >>> p._asdict()
         OrderedDict([('x', 11), ('y', 22)])

     Changed in version 2.7: Returns an *note OrderedDict: 1b5. instead
     of a regular *note dict: 2fe.

 -- Method: somenamedtuple._replace (kwargs)
     Return a new instance of the named tuple replacing specified
     fields with new values:

         >>> p = Point(x=11, y=22)
         >>> p._replace(x=33)
         Point(x=33, y=22)

         >>> for partnum, record in inventory.items():
                 inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())



 -- Attribute: somenamedtuple._fields
     Tuple of strings listing the field names.  Useful for introspection
     and for creating new named tuple types from existing named tuples.

         >>> p._fields            # view the field names
         ('x', 'y')

         >>> Color = namedtuple('Color', 'red green blue')
         >>> Pixel = namedtuple('Pixel', Point._fields + Color._fields)
         >>> Pixel(11, 22, 128, 255, 0)
         Pixel(x=11, y=22, red=128, green=255, blue=0)



  To retrieve a field whose name is stored in a string, use the *note
getattr(): 85f.  function:

    >>> getattr(p, 'x')
    11

To convert a dictionary to a named tuple, use the double-star-operator
(as described in *note Unpacking Argument Lists: 547.):

    >>> d = {'x': 11, 'y': 22}
    >>> Point(**d)
    Point(x=11, y=22)

Since a named tuple is a regular Python class, it is easy to add or
change functionality with a subclass.  Here is how to add a calculated
field and a fixed-width print format:

    >>> class Point(namedtuple('Point', 'x y')):
            __slots__ = ()
            @property
            def hypot(self):
                return (self.x ** 2 + self.y ** 2) ** 0.5
            def __str__(self):
                return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)


    >>> for p in Point(3, 4), Point(14, 5/7.):
            print p
    Point: x= 3.000  y= 4.000  hypot= 5.000
    Point: x=14.000  y= 0.714  hypot=14.018

The subclass shown above sets `__slots__' to an empty tuple.  This helps
keep memory requirements low by preventing the creation of instance
dictionaries.

  Subclassing is not useful for adding new, stored fields.  Instead,
simply create a new named tuple type from the `_fields' attribute:

    >>> Point3D = namedtuple('Point3D', Point._fields + ('z',))

Default values can be implemented by using `_replace()' to customize a
prototype instance:

    >>> Account = namedtuple('Account', 'owner balance transaction_count')
    >>> default_account = Account('<owner name>', 0.0, 0)
    >>> johns_account = default_account._replace(owner='John')

Enumerated constants can be implemented with named tuples, but it is
simpler and more efficient to use a simple class declaration:

    >>> Status = namedtuple('Status', 'open pending closed')._make(range(3))
    >>> Status.open, Status.pending, Status.closed
    (0, 1, 2)
    >>> class Status:
            open, pending, closed = range(3)


See also
........

Named tuple recipe(1) adapted for Python 2.4.

  ---------- Footnotes ----------

  (1) http://code.activestate.com/recipes/500261/


File: python.info,  Node: OrderedDict objects,  Next: Collections Abstract Base Classes,  Prev: namedtuple Factory Function for Tuples with Named Fields,  Up: collections --- High-performance container datatypes

5.8.3.7 `OrderedDict' objects
.............................

Ordered dictionaries are just like regular dictionaries but they
remember the order that items were inserted.  When iterating over an
ordered dictionary, the items are returned in the order their keys were
first added.

 -- Class: collections.OrderedDict ([items])
     Return an instance of a dict subclass, supporting the usual *note
     dict: 2fe.  methods.  An _OrderedDict_ is a dict that remembers
     the order that keys were first inserted. If a new entry overwrites
     an existing entry, the original insertion position is left
     unchanged.  Deleting an entry and reinserting it will move it to
     the end.

     New in version 2.7.

 -- Method: OrderedDict.popitem (last=True)
     The *note popitem(): 1ca. method for ordered dictionaries returns
     and removes a (key, value) pair.  The pairs are returned in LIFO
     order if _last_ is true or FIFO order if false.

  In addition to the usual mapping methods, ordered dictionaries also
support reverse iteration using *note reversed(): 3f1.

  Equality tests between *note OrderedDict: 1b5. objects are
order-sensitive and are implemented as
`list(od1.items())==list(od2.items())'.  Equality tests between *note
OrderedDict: 1b5. objects and other *note Mapping: 20a. objects are
order-insensitive like regular dictionaries.  This allows *note
OrderedDict: 1b5. objects to be substituted anywhere a regular
dictionary is used.

  The *note OrderedDict: 1b5. constructor and `update()' method both
accept keyword arguments, but their order is lost because Python's
function call semantics pass-in keyword arguments using a regular
unordered dictionary.

See also
........

Equivalent OrderedDict recipe(1) that runs on Python 2.4 or later.

* Menu:

* OrderedDict Examples and Recipes::

  ---------- Footnotes ----------

  (1) http://code.activestate.com/recipes/576693/


File: python.info,  Node: OrderedDict Examples and Recipes,  Up: OrderedDict objects

5.8.3.8 `OrderedDict' Examples and Recipes
..........................................

Since an ordered dictionary remembers its insertion order, it can be
used in conjuction with sorting to make a sorted dictionary:

    >>> # regular unsorted dictionary
    >>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

    >>> # dictionary sorted by key
    >>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
    OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

    >>> # dictionary sorted by value
    >>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
    OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

    >>> # dictionary sorted by length of the key string
    >>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
    OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])

The new sorted dictionaries maintain their sort order when entries are
deleted.  But when new keys are added, the keys are appended to the end
and the sort is not maintained.

  It is also straight-forward to create an ordered dictionary variant
that remembers the order the keys were _last_ inserted.  If a new entry
overwrites an existing entry, the original insertion position is
changed and moved to the end:

    class LastUpdatedOrderedDict(OrderedDict):
        'Store items in the order the keys were last added'

        def __setitem__(self, key, value):
            if key in self:
                del self[key]
            OrderedDict.__setitem__(self, key, value)

An ordered dictionary can be combined with the *note Counter: 1b6. class
so that the counter remembers the order elements are first encountered:

    class OrderedCounter(Counter, OrderedDict):
         'Counter that remembers the order elements are first encountered'

         def __repr__(self):
             return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))

         def __reduce__(self):
             return self.__class__, (OrderedDict(self),)



File: python.info,  Node: Collections Abstract Base Classes,  Prev: OrderedDict objects,  Up: collections --- High-performance container datatypes

5.8.3.9 Collections Abstract Base Classes
.........................................

The collections module offers the following *note ABCs: 870.:

ABC                           Inherits from             Abstract Methods           Mixin Methods
-------------------------------------------------------------------------------------------------------------------------------------------- 
*note Container: b57.                                   `__contains__'             
*note Hashable: b58.                                    `__hash__'                 
*note Iterable: b59.                                    `__iter__'                 
*note Iterator: b5a.          *note Iterable: b59.      `next'                     `__iter__'
*note Sized: b5b.                                       `__len__'                  
*note Callable: b5c.                                    `__call__'                 
*note Sequence: b5d.          *note Sized: b5b, *note   `__getitem__', `__len__'   `__contains__', `__iter__', `__reversed__', `index',
                              Iterable: b59, *note                                 and `count'
                              Container: b57.                                      
*note MutableSequence: b5e.   *note Sequence: b5d.      `__getitem__',             Inherited *note Sequence: b5d. methods and `append',
                                                        `__setitem__',             `reverse', `extend', `pop', `remove', and `__iadd__'
                                                        `__delitem__', `__len__',  
                                                        `insert'                   
*note Set: b5f.               *note Sized: b5b, *note   `__contains__',            `__le__', `__lt__', `__eq__', `__ne__', `__gt__',
                              Iterable: b59, *note      `__iter__', `__len__'      `__ge__', `__and__', `__or__', `__sub__', `__xor__',
                              Container: b57.                                      and `isdisjoint'
*note MutableSet: b60.        *note Set: b5f.           `__contains__',            Inherited *note Set: b5f. methods and `clear', `pop',
                                                        `__iter__', `__len__',     `remove', `__ior__', `__iand__', `__ixor__', and
                                                        `add', `discard'           `__isub__'
*note Mapping: 20a.           *note Sized: b5b, *note   `__getitem__', `__iter__', `__contains__', `keys', `items', `values', `get',
                              Iterable: b59, *note      `__len__'                  `__eq__', and `__ne__'
                              Container: b57.                                      
*note MutableMapping: b61.    *note Mapping: 20a.       `__getitem__',             Inherited *note Mapping: 20a. methods and `pop',
                                                        `__setitem__',             `popitem', `clear', `update', and `setdefault'
                                                        `__delitem__', `__iter__', 
                                                        `__len__'                  
*note MappingView: b62.       *note Sized: b5b.                                    `__len__'
*note ItemsView: b63.         *note MappingView: b62,                              `__contains__', `__iter__'
                              *note Set: b5f.                                      
*note KeysView: b64.          *note MappingView: b62,                              `__contains__', `__iter__'
                              *note Set: b5f.                                      
*note ValuesView: b65.        *note MappingView: b62.                              `__contains__', `__iter__'

 -- Class: collections.Container
 -- Class: collections.Hashable
 -- Class: collections.Sized
 -- Class: collections.Callable
     ABCs for classes that provide respectively the methods *note
     __contains__(): 31b, *note __hash__(): 32e, *note __len__(): 403,
     and *note __call__(): 6ea.

 -- Class: collections.Iterable
     ABC for classes that provide the *note __iter__(): 31a. method.
     See also the definition of *note iterable: 8b4.

 -- Class: collections.Iterator
     ABC for classes that provide the *note __iter__(): 31a. and *note
     next(): 392. methods.  See also the definition of *note iterator:
     869.

 -- Class: collections.Sequence
 -- Class: collections.MutableSequence
     ABCs for read-only and mutable *note sequences: b66.

 -- Class: collections.Set
 -- Class: collections.MutableSet
     ABCs for read-only and mutable sets.

 -- Class: collections.Mapping
 -- Class: collections.MutableMapping
     ABCs for read-only and mutable *note mappings: 8e0.

 -- Class: collections.MappingView
 -- Class: collections.ItemsView
 -- Class: collections.KeysView
 -- Class: collections.ValuesView
     ABCs for mapping, items, keys, and values *note views: b67.

  These ABCs allow us to ask classes or instances if they provide
particular functionality, for example:

    size = None
    if isinstance(myvar, collections.Sized):
        size = len(myvar)

Several of the ABCs are also useful as mixins that make it easier to
develop classes supporting container APIs.  For example, to write a
class supporting the full *note Set: b5f. API, it only necessary to
supply the three underlying abstract methods: *note __contains__():
31b, *note __iter__(): 31a, and *note __len__(): 403.  The ABC supplies
the remaining methods such as *note __and__(): 727. and `isdisjoint()'

    class ListBasedSet(collections.Set):
         ''' Alternate set implementation favoring space over speed
             and not requiring the set elements to be hashable. '''
         def __init__(self, iterable):
             self.elements = lst = []
             for value in iterable:
                 if value not in lst:
                     lst.append(value)
         def __iter__(self):
             return iter(self.elements)
         def __contains__(self, value):
             return value in self.elements
         def __len__(self):
             return len(self.elements)

    s1 = ListBasedSet('abcdef')
    s2 = ListBasedSet('defghi')
    overlap = s1 & s2            # The __and__() method is supported automatically

Notes on using *note Set: b5f. and *note MutableSet: b60. as a mixin:

  1. Since some set operations create new sets, the default mixin
     methods need a way to create new instances from an iterable. The
     class constructor is assumed to have a signature in the form
     `ClassName(iterable)'.  That assumption is factored-out to an
     internal classmethod called `_from_iterable()' which calls
     `cls(iterable)' to produce a new set.  If the *note Set: b5f.
     mixin is being used in a class with a different constructor
     signature, you will need to override `_from_iterable()' with a
     classmethod that can construct new instances from an iterable
     argument.

  2. To override the comparisons (presumably for speed, as the
     semantics are fixed), redefine *note __le__(): 21b. and then the
     other operations will automatically follow suit.

  3. The *note Set: b5f. mixin provides a `_hash()' method to compute a
     hash value for the set; however, *note __hash__(): 32e. is not
     defined because not all sets are hashable or immutable.  To add
     set hashabilty using mixins, inherit from both *note Set(): b5f.
     and *note Hashable(): b58, then define `__hash__ = Set._hash'.

See also
........

   * OrderedSet recipe(1) for an example built on *note MutableSet: b60.

   * For more about ABCs, see the *note abc: 4. module and PEP 3119(2).

  ---------- Footnotes ----------

  (1) http://code.activestate.com/recipes/576694/

  (2) http://www.python.org/dev/peps/pep-3119


File: python.info,  Node: heapq --- Heap queue algorithm,  Next: bisect --- Array bisection algorithm,  Prev: collections --- High-performance container datatypes,  Up: Data Types

5.8.4 `heapq' -- Heap queue algorithm
-------------------------------------

New in version 2.3.

  *Source code:* Lib/heapq.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  This module provides an implementation of the heap queue algorithm,
also known as the priority queue algorithm.

  Heaps are binary trees for which every parent node has a value less
than or equal to any of its children.  This implementation uses arrays
for which `heap[k] <= heap[2*k+1]' and `heap[k] <= heap[2*k+2]' for all
_k_, counting elements from zero.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that its smallest element is always the root,
`heap[0]'.

  The API below differs from textbook heap algorithms in two aspects:
(a) We use zero-based indexing.  This makes the relationship between
the index for a node and the indexes for its children slightly less
obvious, but is more suitable since Python uses zero-based indexing.
(b) Our pop method returns the smallest item, not the largest (called a
"min heap" in textbooks; a "max heap" is more common in texts because
of its suitability for in-place sorting).

  These two make it possible to view the heap as a regular Python list
without surprises: `heap[0]' is the smallest item, and `heap.sort()'
maintains the heap invariant!

  To create a heap, use a list initialized to `[]', or you can
transform a populated list into a heap via function *note heapify():
b6a.

  The following functions are provided:

 -- Function: heapq.heappush (heap, item)
     Push the value _item_ onto the _heap_, maintaining the heap
     invariant.

 -- Function: heapq.heappop (heap)
     Pop and return the smallest item from the _heap_, maintaining the
     heap invariant.  If the heap is empty, *note IndexError: 4d8. is
     raised.

 -- Function: heapq.heappushpop (heap, item)
     Push _item_ on the heap, then pop and return the smallest item
     from the _heap_.  The combined action runs more efficiently than
     *note heappush(): b6b.  followed by a separate call to *note
     heappop(): b6c.

     New in version 2.6.

 -- Function: heapq.heapify (x)
     Transform list _x_ into a heap, in-place, in linear time.

 -- Function: heapq.heapreplace (heap, item)
     Pop and return the smallest item from the _heap_, and also push
     the new _item_.  The heap size doesn't change. If the heap is
     empty, *note IndexError: 4d8. is raised.

     This one step operation is more efficient than a *note heappop():
     b6c. followed by *note heappush(): b6b. and can be more
     appropriate when using a fixed-size heap.  The pop/push
     combination always returns an element from the heap and replaces
     it with _item_.

     The value returned may be larger than the _item_ added.  If that
     isn't desired, consider using *note heappushpop(): b6d. instead.
     Its push/pop combination returns the smaller of the two values,
     leaving the larger value on the heap.

  The module also offers three general purpose functions based on heaps.

 -- Function: heapq.merge (*iterables)
     Merge multiple sorted inputs into a single sorted output (for
     example, merge timestamped entries from multiple log files).
     Returns an *note iterator: 869.  over the sorted values.

     Similar to `sorted(itertools.chain(*iterables))' but returns an
     iterable, does not pull the data into memory all at once, and
     assumes that each of the input streams is already sorted (smallest
     to largest).

     New in version 2.6.

 -- Function: heapq.nlargest (n, iterable[, key])
     Return a list with the _n_ largest elements from the dataset
     defined by _iterable_.  _key_, if provided, specifies a function
     of one argument that is used to extract a comparison key from each
     element in the iterable: `key=str.lower' Equivalent to:
     `sorted(iterable, key=key, reverse=True)[:n]'

     New in version 2.4.

     Changed in version 2.5: Added the optional _key_ argument.

 -- Function: heapq.nsmallest (n, iterable[, key])
     Return a list with the _n_ smallest elements from the dataset
     defined by _iterable_.  _key_, if provided, specifies a function
     of one argument that is used to extract a comparison key from each
     element in the iterable: `key=str.lower' Equivalent to:
     `sorted(iterable, key=key)[:n]'

     New in version 2.4.

     Changed in version 2.5: Added the optional _key_ argument.

  The latter two functions perform best for smaller values of _n_.  For
larger values, it is more efficient to use the *note sorted(): 220.
function.  Also, when `n==1', it is more efficient to use the built-in
*note min(): 221. and *note max(): 222.  functions.

* Menu:

* Basic Examples::
* Priority Queue Implementation Notes::
* Theory::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/heapq.py


File: python.info,  Node: Basic Examples,  Next: Priority Queue Implementation Notes,  Up: heapq --- Heap queue algorithm

5.8.4.1 Basic Examples
......................

A heapsort(1) can be implemented by pushing all values onto a heap and
then popping off the smallest values one at a time:

    >>> def heapsort(iterable):
    ...     'Equivalent to sorted(iterable)'
    ...     h = []
    ...     for value in iterable:
    ...         heappush(h, value)
    ...     return [heappop(h) for i in range(len(h))]
    ...
    >>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Heap elements can be tuples.  This is useful for assigning comparison
values (such as task priorities) alongside the main record being
tracked:

    >>> h = []
    >>> heappush(h, (5, 'write code'))
    >>> heappush(h, (7, 'release product'))
    >>> heappush(h, (1, 'write spec'))
    >>> heappush(h, (3, 'create tests'))
    >>> heappop(h)
    (1, 'write spec')


  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Heapsort


File: python.info,  Node: Priority Queue Implementation Notes,  Next: Theory,  Prev: Basic Examples,  Up: heapq --- Heap queue algorithm

5.8.4.2 Priority Queue Implementation Notes
...........................................

A priority queue(1) is common use for a heap, and it presents several
implementation challenges:

   * Sort stability:  how do you get two tasks with equal priorities to
     be returned in the order they were originally added?

   * In the future with Python 3, tuple comparison breaks for
     (priority, task) pairs if the priorities are equal and the tasks
     do not have a default comparison order.

   * If the priority of a task changes, how do you move it to a new
     position in the heap?

   * Or if a pending task needs to be deleted, how do you find it and
     remove it from the queue?

  A solution to the first two challenges is to store entries as
3-element list including the priority, an entry count, and the task.
The entry count serves as a tie-breaker so that two tasks with the same
priority are returned in the order they were added. And since no two
entry counts are the same, the tuple comparison will never attempt to
directly compare two tasks.

  The remaining challenges revolve around finding a pending task and
making changes to its priority or removing it entirely.  Finding a task
can be done with a dictionary pointing to an entry in the queue.

  Removing the entry or changing its priority is more difficult because
it would break the heap structure invariants.  So, a possible solution
is to mark the existing entry as removed and add a new entry with the
revised priority:

    pq = []                         # list of entries arranged in a heap
    entry_finder = {}               # mapping of tasks to entries
    REMOVED = '<removed-task>'      # placeholder for a removed task
    counter = itertools.count()     # unique sequence count

    def add_task(task, priority=0):
        'Add a new task or update the priority of an existing task'
        if task in entry_finder:
            remove_task(task)
        count = next(counter)
        entry = [priority, count, task]
        entry_finder[task] = entry
        heappush(pq, entry)

    def remove_task(task):
        'Mark an existing task as REMOVED.  Raise KeyError if not found.'
        entry = entry_finder.pop(task)
        entry[-1] = REMOVED

    def pop_task():
        'Remove and return the lowest priority task. Raise KeyError if empty.'
        while pq:
            priority, count, task = heappop(pq)
            if task is not REMOVED:
                del entry_finder[task]
                return task
        raise KeyError('pop from an empty priority queue')


  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Priority_queue


File: python.info,  Node: Theory,  Prev: Priority Queue Implementation Notes,  Up: heapq --- Heap queue algorithm

5.8.4.3 Theory
..............

Heaps are arrays for which `a[k] <= a[2*k+1]' and `a[k] <= a[2*k+2]'
for all _k_, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that `a[0]' is always its smallest element.

  The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are _k_, not `a[k]':

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30

In the tree above, each cell _k_ is topping `2*k+1' and `2*k+2'. In an
usual binary tournament we see in sports, each cell is the winner over
the two cells it tops, and we can trace the winner down the tree to see
all opponents s/he had.  However, in many computer applications of such
tournaments, we do not need to trace the history of a winner. To be
more memory efficient, when a winner is promoted, we try to replace it
by something else at a lower level, and the rule becomes that a cell
and the two cells it tops contain three different items, but the top
cell "wins" over the two topped cells.

  If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and find
the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n log n) sort.

  A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

  Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

  Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised (1). It is very important that the initial sort
produces the longest runs possible.  Tournaments are a good way to
that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

  Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

  In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a 'heap' module
around. :-)

  ---------- Footnotes ----------

  (1) The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big tape
drives, the story was quite different, and one had to be very clever to
ensure (far in advance) that each tape movement will be the most
effective possible (that is, will best participate at "progressing" the
merge).  Some tapes were even able to read backwards, and this was also
used to avoid the rewinding time. Believe me, real good tape sorts were
quite spectacular to watch! From all times, sorting has always been a
Great Art! :-)


File: python.info,  Node: bisect --- Array bisection algorithm,  Next: array --- Efficient arrays of numeric values,  Prev: heapq --- Heap queue algorithm,  Up: Data Types

5.8.5 `bisect' -- Array bisection algorithm
-------------------------------------------

New in version 2.1.

  *Source code:* Lib/bisect.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  This module provides support for maintaining a list in sorted order
without having to sort the list after each insertion.  For long lists
of items with expensive comparison operations, this can be an
improvement over the more common approach.  The module is called *note
bisect: 1b. because it uses a basic bisection algorithm to do its work.
The source code may be most useful as a working example of the
algorithm (the boundary conditions are already right!).

  The following functions are provided:

 -- Function: bisect.bisect_left (a, x, lo=0, hi=len(a))
     Locate the insertion point for _x_ in _a_ to maintain sorted order.
     The parameters _lo_ and _hi_ may be used to specify a subset of
     the list which should be considered; by default the entire list is
     used.  If _x_ is already present in _a_, the insertion point will
     be before (to the left of) any existing entries.  The return value
     is suitable for use as the first parameter to `list.insert()'
     assuming that _a_ is already sorted.

     The returned insertion point _i_ partitions the array _a_ into two
     halves so that `all(val < x for val in a[lo:i])' for the left side
     and `all(val >= x for val in a[i:hi])' for the right side.

 -- Function: bisect.bisect_right (a, x, lo=0, hi=len(a))
 -- Function: bisect.bisect (a, x, lo=0, hi=len(a))
     Similar to *note bisect_left(): b77, but returns an insertion
     point which comes after (to the right of) any existing entries of
     _x_ in _a_.

     The returned insertion point _i_ partitions the array _a_ into two
     halves so that `all(val <= x for val in a[lo:i])' for the left
     side and `all(val > x for val in a[i:hi])' for the right side.

 -- Function: bisect.insort_left (a, x, lo=0, hi=len(a))
     Insert _x_ in _a_ in sorted order.  This is equivalent to
     `a.insert(bisect.bisect_left(a, x, lo, hi), x)' assuming that _a_
     is already sorted.  Keep in mind that the O(log n) search is
     dominated by the slow O(n) insertion step.

 -- Function: bisect.insort_right (a, x, lo=0, hi=len(a))
 -- Function: bisect.insort (a, x, lo=0, hi=len(a))
     Similar to *note insort_left(): b7a, but inserting _x_ in _a_
     after any existing entries of _x_.

See also
........

SortedCollection recipe(2) that uses bisect to build a full-featured
collection class with straight-forward search methods and support for a
key-function.  The keys are precomputed to save unnecessary calls to
the key function during searches.

* Menu:

* Searching Sorted Lists::
* Other Examples::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/bisect.py

  (2) http://code.activestate.com/recipes/577197-sortedcollection/


File: python.info,  Node: Searching Sorted Lists,  Next: Other Examples,  Up: bisect --- Array bisection algorithm

5.8.5.1 Searching Sorted Lists
..............................

The above *note bisect(): 1b. functions are useful for finding
insertion points but can be tricky or awkward to use for common
searching tasks. The following five functions show how to transform
them into the standard lookups for sorted lists:

    def index(a, x):
        'Locate the leftmost value exactly equal to x'
        i = bisect_left(a, x)
        if i != len(a) and a[i] == x:
            return i
        raise ValueError

    def find_lt(a, x):
        'Find rightmost value less than x'
        i = bisect_left(a, x)
        if i:
            return a[i-1]
        raise ValueError

    def find_le(a, x):
        'Find rightmost value less than or equal to x'
        i = bisect_right(a, x)
        if i:
            return a[i-1]
        raise ValueError

    def find_gt(a, x):
        'Find leftmost value greater than x'
        i = bisect_right(a, x)
        if i != len(a):
            return a[i]
        raise ValueError

    def find_ge(a, x):
        'Find leftmost item greater than or equal to x'
        i = bisect_left(a, x)
        if i != len(a):
            return a[i]
        raise ValueError



File: python.info,  Node: Other Examples,  Prev: Searching Sorted Lists,  Up: bisect --- Array bisection algorithm

5.8.5.2 Other Examples
......................

The *note bisect(): 1b. function can be useful for numeric table
lookups. This example uses *note bisect(): 1b. to look up a letter
grade for an exam score (say) based on a set of ordered numeric
breakpoints: 90 and up is an 'A', 80 to 89 is a 'B', and so on:

    >>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
            i = bisect(breakpoints, score)
            return grades[i]

    >>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
    ['F', 'A', 'C', 'C', 'B', 'A', 'A']

Unlike the *note sorted(): 220. function, it does not make sense for
the *note bisect(): 1b.  functions to have _key_ or _reversed_
arguments because that would lead to an inefficient design (successive
calls to bisect functions would not "remember" all of the previous key
lookups).

  Instead, it is better to search a list of precomputed keys to find
the index of the record in question:

    >>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
    >>> data.sort(key=lambda r: r[1])
    >>> keys = [r[1] for r in data]         # precomputed list of keys
    >>> data[bisect_left(keys, 0)]
    ('black', 0)
    >>> data[bisect_left(keys, 1)]
    ('blue', 1)
    >>> data[bisect_left(keys, 5)]
    ('red', 5)
    >>> data[bisect_left(keys, 8)]
    ('yellow', 8)



File: python.info,  Node: array --- Efficient arrays of numeric values,  Next: sets --- Unordered collections of unique elements,  Prev: bisect --- Array bisection algorithm,  Up: Data Types

5.8.6 `array' -- Efficient arrays of numeric values
---------------------------------------------------

This module defines an object type which can compactly represent an
array of basic values: characters, integers, floating point numbers.
Arrays are sequence types and behave very much like lists, except that
the type of objects stored in them is constrained.  The type is
specified at object creation time by using a _type code_, which is a
single character.  The following type codes are defined:

Type code       C Type               Python Type             Minimum size in bytes
----------------------------------------------------------------------------------------- 
`'c''           char                 character               1
`'b''           signed char          int                     1
`'B''           unsigned char        int                     1
`'u''           Py_UNICODE           Unicode character       2 (see note)
`'h''           signed short         int                     2
`'H''           unsigned short       int                     2
`'i''           signed int           int                     2
`'I''           unsigned int         long                    2
`'l''           signed long          int                     4
`'L''           unsigned long        long                    4
`'f''           float                float                   4
`'d''           double               float                   8

     Note: The `'u'' typecode corresponds to Python's unicode
     character.  On narrow Unicode builds this is 2-bytes, on wide
     builds this is 4-bytes.

  The actual representation of values is determined by the machine
architecture (strictly speaking, by the C implementation).  The actual
size can be accessed through the `itemsize' attribute.  The values
stored  for `'L'' and `'I'' items will be represented as Python long
integers when retrieved, because Python's plain integer type cannot
represent the full range of C's unsigned (long) integers.

  The module defines the following type:

 -- Class: array.array (typecode[, initializer])
     A new array whose items are restricted by _typecode_, and
     initialized from the optional _initializer_ value, which must be a
     list, string, or iterable over elements of the appropriate type.

     Changed in version 2.4: Formerly, only lists or strings were
     accepted.

     If given a list or string, the initializer is passed to the new
     array's *note fromlist(): b83, *note fromstring(): b84, or *note
     fromunicode(): b85. method (see below) to add initial items to the
     array.  Otherwise, the iterable initializer is passed to the *note
     extend(): b86. method.

 -- Data: array.ArrayType
     Obsolete alias for *note array: e.

  Array objects support the ordinary sequence operations of indexing,
slicing, concatenation, and multiplication.  When using slice
assignment, the assigned value must be an array object with the same
type code; in all other cases, *note TypeError: 215. is raised. Array
objects also implement the buffer interface, and may be used wherever
buffer objects are supported.

  The following data items and methods are also supported:

 -- Attribute: array.typecode
     The typecode character used to create the array.

 -- Attribute: array.itemsize
     The length in bytes of one array item in the internal
     representation.

 -- Method: array.append (x)
     Append a new item with value _x_ to the end of the array.

 -- Method: array.buffer_info ()
     Return a tuple `(address, length)' giving the current memory
     address and the length in elements of the buffer used to hold
     array's contents.  The size of the memory buffer in bytes can be
     computed as `array.buffer_info()[1] * array.itemsize'.  This is
     occasionally useful when working with low-level (and inherently
     unsafe) I/O interfaces that require memory addresses, such as
     certain `ioctl()' operations.  The returned numbers are valid as
     long as the array exists and no length-changing operations are
     applied to it.

          Note: When using array objects from code written in C or C++
          (the only way to effectively make use of this information),
          it makes more sense to use the buffer interface supported by
          array objects.  This method is maintained for backward
          compatibility and should be avoided in new code.  The buffer
          interface is documented in *note Buffers and Memoryview
          Objects: 937.

 -- Method: array.byteswap ()
     "Byteswap" all items of the array.  This is only supported for
     values which are 1, 2, 4, or 8 bytes in size; for other types of
     values, *note RuntimeError: 394. is raised.  It is useful when
     reading data from a file written on a machine with a different
     byte order.

 -- Method: array.count (x)
     Return the number of occurrences of _x_ in the array.

 -- Method: array.extend (iterable)
     Append items from _iterable_ to the end of the array.  If
     _iterable_ is another array, it must have _exactly_ the same type
     code; if not, *note TypeError: 215. will be raised.  If _iterable_
     is not an array, it must be iterable and its elements must be the
     right type to be appended to the array.

     Changed in version 2.4: Formerly, the argument could only be
     another array.

 -- Method: array.fromfile (f, n)
     Read _n_ items (as machine values) from the file object _f_ and
     append them to the end of the array.  If less than _n_ items are
     available, *note EOFError: 874. is raised, but the items that were
     available are still inserted into the array.  _f_ must be a real
     built-in file object; something else with a *note read(): b8f.
     method won't do.

 -- Method: array.fromlist (list)
     Append items from the list.  This is equivalent to `for x in list:
     a.append(x)' except that if there is a type error, the array is
     unchanged.

 -- Method: array.fromstring (s)
     Appends items from the string, interpreting the string as an array
     of machine values (as if it had been read from a file using the
     *note fromfile(): b8e. method).

 -- Method: array.fromunicode (s)
     Extends this array with data from the given unicode string.  The
     array must be a type `'u'' array; otherwise a *note ValueError:
     233. is raised.  Use `array.fromstring(unicodestring.encode(enc))'
     to append Unicode data to an array of some other type.

 -- Method: array.index (x)
     Return the smallest _i_ such that _i_ is the index of the first
     occurrence of _x_ in the array.

 -- Method: array.insert (i, x)
     Insert a new item with value _x_ in the array before position _i_.
     Negative values are treated as being relative to the end of the
     array.

 -- Method: array.pop ([i])
     Removes the item with the index _i_ from the array and returns it.
     The optional argument defaults to `-1', so that by default the
     last item is removed and returned.

 -- Method: array.read (f, n)
     Deprecated since version 1.5.1: Use the *note fromfile(): b8e.
     method.

     Read _n_ items (as machine values) from the file object _f_ and
     append them to the end of the array.  If less than _n_ items are
     available, *note EOFError: 874. is raised, but the items that were
     available are still inserted into the array.  _f_ must be a real
     built-in file object; something else with a *note read(): b8f.
     method won't do.

 -- Method: array.remove (x)
     Remove the first occurrence of _x_ from the array.

 -- Method: array.reverse ()
     Reverse the order of the items in the array.

 -- Method: array.tofile (f)
     Write all items (as machine values) to the file object _f_.

 -- Method: array.tolist ()
     Convert the array to an ordinary list with the same items.

 -- Method: array.tostring ()
     Convert the array to an array of machine values and return the
     string representation (the same sequence of bytes that would be
     written to a file by the *note tofile(): b95. method.)

 -- Method: array.tounicode ()
     Convert the array to a unicode string.  The array must be a type
     `'u'' array; otherwise a *note ValueError: 233. is raised. Use
     `array.tostring().decode(enc)' to obtain a unicode string from an
     array of some other type.

 -- Method: array.write (f)
     Deprecated since version 1.5.1: Use the *note tofile(): b95.
     method.

     Write all items (as machine values) to the file object _f_.

  When an array object is printed or converted to a string, it is
represented as `array(typecode, initializer)'.  The _initializer_ is
omitted if the array is empty, otherwise it is a string if the
_typecode_ is `'c'', otherwise it is a list of numbers.  The string is
guaranteed to be able to be converted back to an array with the same
type and value using *note eval(): 359, so long as the *note array():
e. function has been imported using `from array import array'.
Examples:

    array('l')
    array('c', 'hello world')
    array('u', u'hello \u2641')
    array('l', [1, 2, 3, 4, 5])
    array('d', [1.0, 2.0, 3.14])


See also
........

Module *note struct: 166.
     Packing and unpacking of heterogeneous binary data.

Module *note xdrlib: 19f.
     Packing and unpacking of External Data Representation (XDR) data
     as used in some remote procedure call systems.

The Numerical Python Manual(1)
     The Numeric Python extension (NumPy) defines another array type;
     see <http://numpy.sourceforge.net/> for further information about
     Numerical Python.  (A PDF version of the NumPy manual is available
     at <http://numpy.sourceforge.net/numdoc/numdoc.pdf>).

  ---------- Footnotes ----------

  (1) http://numpy.sourceforge.net/numdoc/HTML/numdoc.htm


File: python.info,  Node: sets --- Unordered collections of unique elements,  Next: sched --- Event scheduler,  Prev: array --- Efficient arrays of numeric values,  Up: Data Types

5.8.7 `sets' -- Unordered collections of unique elements
--------------------------------------------------------

New in version 2.3.

  Deprecated since version 2.6: The built-in *note set: 363./*note
frozenset: 364. types replace this module.

  The *note sets: 14f. module provides classes for constructing and
manipulating unordered collections of unique elements.  Common uses
include membership testing, removing duplicates from a sequence, and
computing standard math operations on sets such as intersection, union,
difference, and symmetric difference.

  Like other collections, sets support `x in set', `len(set)', and `for
x in set'.  Being an unordered collection, sets do not record element
position or order of insertion.  Accordingly, sets do not support
indexing, slicing, or other sequence-like behavior.

  Most set applications use the *note Set: b9c. class which provides
every set method except for *note __hash__(): 32e. For advanced
applications requiring a hash method, the *note ImmutableSet: b9d.
class adds a *note __hash__(): 32e. method but omits methods which
alter the contents of the set. Both *note Set: b9c. and *note
ImmutableSet: b9d.  derive from `BaseSet', an abstract class useful for
determining whether something is a set: `isinstance(obj, BaseSet)'.

  The set classes are implemented using dictionaries.  Accordingly, the
requirements for set elements are the same as those for dictionary
keys; namely, that the element defines both *note __eq__(): 219. and
*note __hash__(): 32e. As a result, sets cannot contain mutable
elements such as lists or dictionaries. However, they can contain
immutable collections such as tuples or instances of *note
ImmutableSet: b9d.  For convenience in implementing sets of sets, inner
sets are automatically converted to immutable form, for example,
`Set([Set(['dog'])])' is transformed to `Set([ImmutableSet(['dog'])])'.

 -- Class: sets.Set ([iterable])
     Constructs a new empty *note Set: b9c. object.  If the optional
     _iterable_ parameter is supplied, updates the set with elements
     obtained from iteration.  All of the elements in _iterable_ should
     be immutable or be transformable to an immutable using the
     protocol described in section *note Protocol for automatic
     conversion to immutable: b9e.

 -- Class: sets.ImmutableSet ([iterable])
     Constructs a new empty *note ImmutableSet: b9d. object.  If the
     optional _iterable_ parameter is supplied, updates the set with
     elements obtained from iteration.  All of the elements in
     _iterable_ should be immutable or be transformable to an immutable
     using the protocol described in section *note Protocol for
     automatic conversion to immutable: b9e.

     Because *note ImmutableSet: b9d. objects provide a *note
     __hash__(): 32e. method, they can be used as set elements or as
     dictionary keys.  *note ImmutableSet: b9d.  objects do not have
     methods for adding or removing elements, so all of the elements
     must be known when the constructor is called.

* Menu:

* Set Objects::
* Example::
* Protocol for automatic conversion to immutable::
* Comparison to the built-in set types::


File: python.info,  Node: Set Objects,  Next: Example,  Up: sets --- Unordered collections of unique elements

5.8.7.1 Set Objects
...................

Instances of *note Set: b9c. and *note ImmutableSet: b9d. both provide
the following operations:

Operation                           Equivalent       Result
------------------------------------------------------------------------------------------- 
`len(s)'                                             cardinality of set _s_
`x in s'                                             test _x_ for membership in _s_
`x not in s'                                         test _x_ for non-membership in _s_
`s.issubset(t)'                     `s <= t'         test whether every element in _s_ is
                                                     in _t_
`s.issuperset(t)'                   `s >= t'         test whether every element in _t_ is
                                                     in _s_
`s.union(t)'                        `s | t'          new set with elements from both _s_
                                                     and _t_
`s.intersection(t)'                 `s & t'          new set with elements common to _s_
                                                     and _t_
`s.difference(t)'                   `s - t'          new set with elements in _s_ but not
                                                     in _t_
`s.symmetric_difference(t)'         `s ^ t'          new set with elements in either _s_
                                                     or _t_ but not both
`s.copy()'                                           new set with a shallow copy of _s_

  Note, the non-operator versions of `union()', `intersection()',
`difference()', and `symmetric_difference()' will accept any iterable as
an argument. In contrast, their operator based counterparts require
their arguments to be sets.  This precludes error-prone constructions
like `Set('abc') & 'cbs'' in favor of the more readable
`Set('abc').intersection('cbs')'.

  Changed in version 2.3.1: Formerly all arguments were required to be
sets.

  In addition, both *note Set: b9c. and *note ImmutableSet: b9d.
support set to set comparisons.  Two sets are equal if and only if
every element of each set is contained in the other (each is a subset
of the other). A set is less than another set if and only if the first
set is a proper subset of the second set (is a subset, but is not
equal). A set is greater than another set if and only if the first set
is a proper superset of the second set (is a superset, but is not
equal).

  The subset and equality comparisons do not generalize to a complete
ordering function.  For example, any two disjoint sets are not equal
and are not subsets of each other, so _all_ of the following return
`False':  `a<b', `a==b', or `a>b'. Accordingly, sets do not implement
the *note __cmp__(): 21e. method.

  Since sets only define partial ordering (subset relationships), the
output of the `list.sort()' method is undefined for lists of sets.

  The following table lists operations available in *note ImmutableSet:
b9d. but not found in *note Set: b9c.:

Operation         Result
----------------------------------------------------- 
`hash(s)'         returns a hash value for _s_

  The following table lists operations available in *note Set: b9c. but
not found in *note ImmutableSet: b9d.:

Operation                                  Equivalent        Result
--------------------------------------------------------------------------------------------------- 
`s.update(t)'                              _s_ |= _t_        return set _s_ with elements added
                                                             from _t_
`s.intersection_update(t)'                 _s_ &= _t_        return set _s_ keeping only elements
                                                             also found in _t_
`s.difference_update(t)'                   _s_ -= _t_        return set _s_ after removing
                                                             elements found in _t_
`s.symmetric_difference_update(t)'         _s_ ^= _t_        return set _s_ with elements from
                                                             _s_ or _t_ but not both
`s.add(x)'                                                   add element _x_ to set _s_
`s.remove(x)'                                                remove _x_ from set _s_; raises
                                                             *note KeyError: 202. if not present
`s.discard(x)'                                               removes _x_ from set _s_ if present
`s.pop()'                                                    remove and return an arbitrary
                                                             element from _s_; raises *note
                                                             KeyError: 202. if empty
`s.clear()'                                                  remove all elements from set _s_

  Note, the non-operator versions of `update()',
`intersection_update()', `difference_update()', and
`symmetric_difference_update()' will accept any iterable as an argument.

  Changed in version 2.3.1: Formerly all arguments were required to be
sets.

  Also note, the module also includes a `union_update()' method which
is an alias for `update()'.  The method is included for backwards
compatibility.  Programmers should prefer the `update()' method because
it is supported by the built-in *note set(): 363. and *note
frozenset(): 364. types.


File: python.info,  Node: Example,  Next: Protocol for automatic conversion to immutable,  Prev: Set Objects,  Up: sets --- Unordered collections of unique elements

5.8.7.2 Example
...............

    >>> from sets import Set
    >>> engineers = Set(['John', 'Jane', 'Jack', 'Janice'])
    >>> programmers = Set(['Jack', 'Sam', 'Susan', 'Janice'])
    >>> managers = Set(['Jane', 'Jack', 'Susan', 'Zack'])
    >>> employees = engineers | programmers | managers           # union
    >>> engineering_management = engineers & managers            # intersection
    >>> fulltime_management = managers - engineers - programmers # difference
    >>> engineers.add('Marvin')                                  # add element
    >>> print engineers # doctest: +SKIP
    Set(['Jane', 'Marvin', 'Janice', 'John', 'Jack'])
    >>> employees.issuperset(engineers)     # superset test
    False
    >>> employees.update(engineers)         # update from another set
    >>> employees.issuperset(engineers)
    True
    >>> for group in [engineers, programmers, managers, employees]: # doctest: +SKIP
    ...     group.discard('Susan')          # unconditionally remove element
    ...     print group
    ...
    Set(['Jane', 'Marvin', 'Janice', 'John', 'Jack'])
    Set(['Janice', 'Jack', 'Sam'])
    Set(['Jane', 'Zack', 'Jack'])
    Set(['Jack', 'Sam', 'Jane', 'Marvin', 'Janice', 'John', 'Zack'])



File: python.info,  Node: Protocol for automatic conversion to immutable,  Next: Comparison to the built-in set types,  Prev: Example,  Up: sets --- Unordered collections of unique elements

5.8.7.3 Protocol for automatic conversion to immutable
......................................................

Sets can only contain immutable elements.  For convenience, mutable
*note Set: b9c.  objects are automatically copied to an *note
ImmutableSet: b9d. before being added as a set element.

  The mechanism is to always add a *note hashable: 6e5. element, or if
it is not hashable, the element is checked to see if it has an
`__as_immutable__()' method which returns an immutable equivalent.

  Since *note Set: b9c. objects have a `__as_immutable__()' method
returning an instance of *note ImmutableSet: b9d, it is possible to
construct sets of sets.

  A similar mechanism is needed by the *note __contains__(): 31b. and
`remove()' methods which need to hash an element to check for
membership in a set.  Those methods check an element for hashability
and, if not, check for a `__as_temporarily_immutable__()' method which
returns the element wrapped by a class that provides temporary methods
for *note __hash__(): 32e, *note __eq__(): 219, and *note __ne__(): 4b4.

  The alternate mechanism spares the need to build a separate copy of
the original mutable object.

  *note Set: b9c. objects implement the
`__as_temporarily_immutable__()' method which returns the *note Set:
b9c. object wrapped by a new class `_TemporarilyImmutableSet'.

  The two mechanisms for adding hashability are normally invisible to
the user; however, a conflict can arise in a multi-threaded environment
where one thread is updating a set while another has temporarily
wrapped it in `_TemporarilyImmutableSet'.  In other words, sets of
mutable sets are not thread-safe.


File: python.info,  Node: Comparison to the built-in set types,  Prev: Protocol for automatic conversion to immutable,  Up: sets --- Unordered collections of unique elements

5.8.7.4 Comparison to the built-in `set' types
..............................................

The built-in *note set: 363. and *note frozenset: 364. types were
designed based on lessons learned from the *note sets: 14f. module.
The key differences are:

   * *note Set: b9c. and *note ImmutableSet: b9d. were renamed to *note
     set: 363. and *note frozenset: 364.

   * There is no equivalent to `BaseSet'.  Instead, use `isinstance(x,
     (set, frozenset))'.

   * The hash algorithm for the built-ins performs significantly better
     (fewer collisions) for most datasets.

   * The built-in versions have more space efficient pickles.

   * The built-in versions do not have a `union_update()' method.
     Instead, use the `update()' method which is equivalent.

   * The built-in versions do not have a `_repr(sorted=True)' method.
     Instead, use the built-in *note repr(): 145. and *note sorted():
     220. functions: `repr(sorted(s))'.

   * The built-in version does not have a protocol for automatic
     conversion to immutable.  Many found this feature to be confusing
     and no one in the community reported having found real uses for it.


File: python.info,  Node: sched --- Event scheduler,  Next: mutex --- Mutual exclusion support,  Prev: sets --- Unordered collections of unique elements,  Up: Data Types

5.8.8 `sched' -- Event scheduler
--------------------------------

*Source code:* Lib/sched.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  The *note sched: 14c. module defines a class which implements a
general purpose event scheduler:

 -- Class: sched.scheduler (timefunc, delayfunc)
     The *note scheduler: ba7. class defines a generic interface to
     scheduling events.  It needs two functions to actually deal with
     the "outside world" -- _timefunc_ should be callable without
     arguments, and return  a number (the "time", in any units
     whatsoever).  The _delayfunc_ function should be callable with one
     argument, compatible with the output of _timefunc_, and should
     delay that many time units. _delayfunc_ will also be called with
     the argument `0' after each event is run to allow other threads an
     opportunity to run in multi-threaded applications.

  Example:

    >>> import sched, time
    >>> s = sched.scheduler(time.time, time.sleep)
    >>> def print_time(): print "From print_time", time.time()
    ...
    >>> def print_some_times():
    ...     print time.time()
    ...     s.enter(5, 1, print_time, ())
    ...     s.enter(10, 1, print_time, ())
    ...     s.run()
    ...     print time.time()
    ...
    >>> print_some_times()
    930343690.257
    From print_time 930343695.274
    From print_time 930343700.273
    930343700.276

In multi-threaded environments, the *note scheduler: ba7. class has
limitations with respect to thread-safety, inability to insert a new
task before the one currently pending in a running scheduler, and
holding up the main thread until the event queue is empty.  Instead,
the preferred approach is to use the *note threading.Timer: ba8. class
instead.

  Example:

    >>> import time
    >>> from threading import Timer
    >>> def print_time():
    ...     print "From print_time", time.time()
    ...
    >>> def print_some_times():
    ...     print time.time()
    ...     Timer(5, print_time, ()).start()
    ...     Timer(10, print_time, ()).start()
    ...     time.sleep(11)  # sleep while time-delay events execute
    ...     print time.time()
    ...
    >>> print_some_times()
    930343690.257
    From print_time 930343695.274
    From print_time 930343700.273
    930343701.301


* Menu:

* Scheduler Objects::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/sched.py


File: python.info,  Node: Scheduler Objects,  Up: sched --- Event scheduler

5.8.8.1 Scheduler Objects
.........................

*note scheduler: ba7. instances have the following methods and
attributes:

 -- Method: scheduler.enterabs (time, priority, action, argument)
     Schedule a new event. The _time_ argument should be a numeric type
     compatible with the return value of the _timefunc_ function passed
     to the constructor.  Events scheduled for the same _time_ will be
     executed in the order of their _priority_.

     Executing the event means executing `action(*argument)'.
     _argument_ must be a sequence holding the parameters for _action_.

     Return value is an event which may be used for later cancellation
     of the event (see *note cancel(): bac.).

 -- Method: scheduler.enter (delay, priority, action, argument)
     Schedule an event for _delay_ more time units. Other than the
     relative time, the other arguments, the effect and the return
     value are the same as those for *note enterabs(): bab.

 -- Method: scheduler.cancel (event)
     Remove the event from the queue. If _event_ is not an event
     currently in the queue, this method will raise a *note ValueError:
     233.

 -- Method: scheduler.empty ()
     Return true if the event queue is empty.

 -- Method: scheduler.run ()
     Run all scheduled events. This function will wait  (using the
     `delayfunc()' function passed to the constructor) for the next
     event, then execute it and so on until there are no more scheduled
     events.

     Either _action_ or _delayfunc_ can raise an exception.  In either
     case, the scheduler will maintain a consistent state and propagate
     the exception.  If an exception is raised by _action_, the event
     will not be attempted in future calls to *note run(): baf.

     If a sequence of events takes longer to run than the time
     available before the next event, the scheduler will simply fall
     behind.  No events will be dropped; the calling code is
     responsible for canceling  events which are no longer pertinent.

 -- Attribute: scheduler.queue
     Read-only attribute returning a list of upcoming events in the
     order they will be run.  Each event is shown as a *note named
     tuple: a0f. with the following fields:  time, priority, action,
     argument.

     New in version 2.6.


File: python.info,  Node: mutex --- Mutual exclusion support,  Next: Queue --- A synchronized queue class,  Prev: sched --- Event scheduler,  Up: Data Types

5.8.9 `mutex' -- Mutual exclusion support
-----------------------------------------

Deprecated since version 2.6: The *note mutex: 11f. module has been
removed in Python 3.

  The *note mutex: 11f. module defines a class that allows
mutual-exclusion via acquiring and releasing locks. It does not require
(or imply) *note threading: 179. or multi-tasking, though it could be
useful for those purposes.

  The *note mutex: 11f. module defines the following class:

 -- Class: mutex.mutex
     Create a new (unlocked) mutex.

     A mutex has two pieces of state -- a "locked" bit and a queue.
     When the mutex is not locked, the queue is empty. Otherwise, the
     queue contains zero or more `(function, argument)' pairs
     representing functions (or methods) waiting to acquire the lock.
     When the mutex is unlocked while the queue is not empty, the first
     queue entry is removed and its  `function(argument)' pair called,
     implying it now has the lock.

     Of course, no multi-threading is implied - hence the funny
     interface for *note lock(): bb4, where a function is called once
     the lock is acquired.

* Menu:

* Mutex Objects::


File: python.info,  Node: Mutex Objects,  Up: mutex --- Mutual exclusion support

5.8.9.1 Mutex Objects
.....................

*note mutex: 11f. objects have following methods:

 -- Method: mutex.test ()
     Check whether the mutex is locked.

 -- Method: mutex.testandset ()
     "Atomic" test-and-set, grab the lock if it is not set, and return
     `True', otherwise, return `False'.

 -- Method: mutex.lock (function, argument)
     Execute `function(argument)', unless the mutex is locked. In the
     case it is locked, place the function and argument on the queue.
     See *note unlock(): bb9. for explanation of when
     `function(argument)' is executed in that case.

 -- Method: mutex.unlock ()
     Unlock the mutex if queue is empty, otherwise execute the first
     element in the queue.


File: python.info,  Node: Queue --- A synchronized queue class,  Next: weakref --- Weak references,  Prev: mutex --- Mutual exclusion support,  Up: Data Types

5.8.10 `Queue' -- A synchronized queue class
--------------------------------------------

     Note: The *note Queue: 140. module has been renamed to `queue' in
     Python 3.  The *note 2to3: bbc. tool will automatically adapt
     imports when converting your sources to Python 3.

*Source code:* Lib/Queue.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  The *note Queue: 140. module implements multi-producer,
multi-consumer queues.  It is especially useful in threaded programming
when information must be exchanged safely between multiple threads.
The *note Queue: 140. class in this module implements all the required
locking semantics.  It depends on the availability of thread support in
Python; see the *note threading: 179.  module.

  The module implements three types of queue, which differ only in the
order in which the entries are retrieved.  In a FIFO queue, the first
tasks added are the first retrieved. In a LIFO queue, the most recently
added entry is the first retrieved (operating like a stack).  With a
priority queue, the entries are kept sorted (using the *note heapq: e7.
module) and the lowest valued entry is retrieved first.

  The *note Queue: 140. module defines the following classes and
exceptions:

 -- Class: Queue.Queue (maxsize=0)
     Constructor for a FIFO queue.  _maxsize_ is an integer that sets
     the upperbound limit on the number of items that can be placed in
     the queue.  Insertion will block once this size has been reached,
     until queue items are consumed.  If _maxsize_ is less than or
     equal to zero, the queue size is infinite.

 -- Class: Queue.LifoQueue (maxsize=0)
     Constructor for a LIFO queue.  _maxsize_ is an integer that sets
     the upperbound limit on the number of items that can be placed in
     the queue.  Insertion will block once this size has been reached,
     until queue items are consumed.  If _maxsize_ is less than or
     equal to zero, the queue size is infinite.

     New in version 2.6.

 -- Class: Queue.PriorityQueue (maxsize=0)
     Constructor for a priority queue.  _maxsize_ is an integer that
     sets the upperbound limit on the number of items that can be
     placed in the queue.  Insertion will block once this size has been
     reached, until queue items are consumed.  If _maxsize_ is less
     than or equal to zero, the queue size is infinite.

     The lowest valued entries are retrieved first (the lowest valued
     entry is the one returned by `sorted(list(entries))[0]').  A
     typical pattern for entries is a tuple in the form:
     `(priority_number, data)'.

     New in version 2.6.

 -- Exception: Queue.Empty
     Exception raised when non-blocking `get()' (or `get_nowait()') is
     called on a *note Queue: 140. object which is empty.

 -- Exception: Queue.Full
     Exception raised when non-blocking `put()' (or `put_nowait()') is
     called on a *note Queue: 140. object which is full.

See also
........

*note collections.deque: 206. is an alternative implementation of
unbounded queues with fast atomic `append()' and `popleft()' operations
that do not require locking.

* Menu:

* Queue Objects::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/Queue.py


File: python.info,  Node: Queue Objects,  Up: Queue --- A synchronized queue class

5.8.10.1 Queue Objects
......................

Queue objects (*note Queue: 140, *note LifoQueue: bbd, or *note
PriorityQueue: bbe.)  provide the public methods described below.

 -- Method: Queue.qsize ()
     Return the approximate size of the queue.  Note, qsize() > 0
     doesn't guarantee that a subsequent get() will not block, nor will
     qsize() < maxsize guarantee that put() will not block.

 -- Method: Queue.empty ()
     Return `True' if the queue is empty, `False' otherwise.  If empty()
     returns `True' it doesn't guarantee that a subsequent call to put()
     will not block.  Similarly, if empty() returns `False' it doesn't
     guarantee that a subsequent call to get() will not block.

 -- Method: Queue.full ()
     Return `True' if the queue is full, `False' otherwise.  If full()
     returns `True' it doesn't guarantee that a subsequent call to get()
     will not block.  Similarly, if full() returns `False' it doesn't
     guarantee that a subsequent call to put() will not block.

 -- Method: Queue.put (item[, block[, timeout]])
     Put _item_ into the queue. If optional args _block_ is true and
     _timeout_ is None (the default), block if necessary until a free
     slot is available. If _timeout_ is a positive number, it blocks at
     most _timeout_ seconds and raises the *note Full: bbf. exception
     if no free slot was available within that time.  Otherwise
     (_block_ is false), put an item on the queue if a free slot is
     immediately available, else raise the *note Full: bbf. exception
     (_timeout_ is ignored in that case).

     New in version 2.3: The _timeout_ parameter.

 -- Method: Queue.put_nowait (item)
     Equivalent to `put(item, False)'.

 -- Method: Queue.get ([block[, timeout]])
     Remove and return an item from the queue. If optional args _block_
     is true and _timeout_ is None (the default), block if necessary
     until an item is available.  If _timeout_ is a positive number, it
     blocks at most _timeout_ seconds and raises the *note Empty: 804.
     exception if no item was available within that time.  Otherwise
     (_block_ is false), return an item if one is immediately available,
     else raise the *note Empty: 804. exception (_timeout_ is ignored
     in that case).

     New in version 2.3: The _timeout_ parameter.

 -- Method: Queue.get_nowait ()
     Equivalent to `get(False)'.

  Two methods are offered to support tracking whether enqueued tasks
have been fully processed by daemon consumer threads.

 -- Method: Queue.task_done ()
     Indicate that a formerly enqueued task is complete.  Used by queue
     consumer threads.  For each *note get(): bc7. used to fetch a
     task, a subsequent call to *note task_done(): bc9. tells the queue
     that the processing on the task is complete.

     If a *note join(): bca. is currently blocking, it will resume when
     all items have been processed (meaning that a *note task_done():
     bc9. call was received for every item that had been *note put():
     bc5. into the queue).

     Raises a *note ValueError: 233. if called more times than there
     were items placed in the queue.

     New in version 2.5.

 -- Method: Queue.join ()
     Blocks until all items in the queue have been gotten and processed.

     The count of unfinished tasks goes up whenever an item is added to
     the queue.  The count goes down whenever a consumer thread calls
     *note task_done(): bc9. to indicate that the item was retrieved
     and all work on it is complete. When the count of unfinished tasks
     drops to zero, *note join(): bca. unblocks.

     New in version 2.5.

  Example of how to wait for enqueued tasks to be completed:

    def worker():
        while True:
            item = q.get()
            do_work(item)
            q.task_done()

    q = Queue()
    for i in range(num_worker_threads):
         t = Thread(target=worker)
         t.daemon = True
         t.start()

    for item in source():
        q.put(item)

    q.join()       # block until all tasks are done



File: python.info,  Node: weakref --- Weak references,  Next: UserDict --- Class wrapper for dictionary objects,  Prev: Queue --- A synchronized queue class,  Up: Data Types

5.8.11 `weakref' -- Weak references
-----------------------------------

New in version 2.1.

  *Source code:* Lib/weakref.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  The *note weakref: 195. module allows the Python programmer to create
_weak references_ to objects.

  In the following, the term _referent_ means the object which is
referred to by a weak reference.

  A weak reference to an object is not enough to keep the object alive:
when the only remaining references to a referent are weak references,
*note garbage collection: 5fc. is free to destroy the referent and
reuse its memory for something else.  A primary use for weak references
is to implement caches or mappings holding large objects, where it's
desired that a large object not be kept alive solely because it appears
in a cache or mapping.

  For example, if you have a number of large binary image objects, you
may wish to associate a name with each.  If you used a Python
dictionary to map names to images, or images to names, the image
objects would remain alive just because they appeared as values or keys
in the dictionaries.  The *note WeakKeyDictionary: bcd. and *note
WeakValueDictionary: bce. classes supplied by the *note weakref: 195.
module are an alternative, using weak references to construct mappings
that don't keep objects alive solely because they appear in the mapping
objects.  If, for example, an image object is a value in a *note
WeakValueDictionary: bce, then when the last remaining references to
that image object are the weak references held by weak mappings,
garbage collection can reclaim the object, and its corresponding
entries in weak mappings are simply deleted.

  *note WeakKeyDictionary: bcd. and *note WeakValueDictionary: bce. use
weak references in their implementation, setting up callback functions
on the weak references that notify the weak dictionaries when a key or
value has been reclaimed by garbage collection.  Most programs should
find that using one of these weak dictionary types is all they need -
it's not usually necessary to create your own weak references directly.
The low-level machinery used by the weak dictionary implementations is
exposed by the *note weakref: 195. module for the benefit of advanced
uses.

  Not all objects can be weakly referenced; those objects which can
include class instances, functions written in Python (but not in C),
methods (both bound and unbound), sets, frozensets, file objects, *note
generator: 5cd.s, type objects, `DBcursor' objects from the *note
bsddb: 1c. module, sockets, arrays, deques, regular expression pattern
objects, and code objects.

  Changed in version 2.4: Added support for files, sockets, arrays, and
patterns.

  Changed in version 2.7: Added support for thread.lock,
threading.Lock, and code objects.

  Several built-in types such as *note list: 3b5. and *note dict: 2fe.
do not directly support weak references but can add support through
subclassing:

    class Dict(dict):
        pass

    obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable

*CPython implementation detail:* Other built-in types such as *note
tuple: 401. and *note long: 1f0. do not support weak references even
when subclassed.

  Extension types can easily be made to support weak references; see
*note Weak Reference Support: bcf.

 -- Class: weakref.ref (object[, callback])
     Return a weak reference to _object_.  The original object can be
     retrieved by calling the reference object if the referent is still
     alive; if the referent is no longer alive, calling the reference
     object will cause *note None: 393. to be returned.  If _callback_
     is provided and not *note None: 393, and the returned weakref
     object is still alive, the callback will be called when the object
     is about to be finalized; the weak reference object will be passed
     as the only parameter to the callback; the referent will no longer
     be available.

     It is allowable for many weak references to be constructed for the
     same object.  Callbacks registered for each weak reference will be
     called from the most recently registered callback to the oldest
     registered callback.

     Exceptions raised by the callback will be noted on the standard
     error output, but cannot be propagated; they are handled in
     exactly the same way as exceptions raised from an object's *note
     __del__(): 6f6. method.

     Weak references are *note hashable: 6e5. if the _object_ is
     hashable.  They will maintain their hash value even after the
     _object_ was deleted.  If *note hash(): 6f8. is called the first
     time only after the _object_ was deleted, the call will raise
     *note TypeError: 215.

     Weak references support tests for equality, but not ordering.  If
     the referents are still alive, two references have the same
     equality relationship as their referents (regardless of the
     _callback_).  If either referent has been deleted, the references
     are equal only if the reference objects are the same object.

     Changed in version 2.4: This is now a subclassable type rather
     than a factory function; it derives from *note object: 1ee.

 -- Function: weakref.proxy (object[, callback])
     Return a proxy to _object_ which uses a weak reference.  This
     supports use of the proxy in most contexts instead of requiring
     the explicit dereferencing used with weak reference objects.  The
     returned object will have a type of either `ProxyType' or
     `CallableProxyType', depending on whether _object_ is callable.
     Proxy objects are not *note hashable: 6e5. regardless of the
     referent; this avoids a number of problems related to their
     fundamentally mutable nature, and prevent their use as dictionary
     keys.  _callback_ is the same as the parameter of the same name to
     the *note ref(): bd0. function.

 -- Function: weakref.getweakrefcount (object)
     Return the number of weak references and proxies which refer to
     _object_.

 -- Function: weakref.getweakrefs (object)
     Return a list of all weak reference and proxy objects which refer
     to _object_.

 -- Class: weakref.WeakKeyDictionary ([dict])
     Mapping class that references keys weakly.  Entries in the
     dictionary will be discarded when there is no longer a strong
     reference to the key.  This can be used to associate additional
     data with an object owned by other parts of an application without
     adding attributes to those objects.  This can be especially useful
     with objects that override attribute accesses.

          Note: Caution: Because a *note WeakKeyDictionary: bcd. is
          built on top of a Python dictionary, it must not change size
          when iterating over it.  This can be difficult to ensure for
          a *note WeakKeyDictionary: bcd. because actions performed by
          the program during iteration may cause items in the
          dictionary to vanish "by magic" (as a side effect of garbage
          collection).

  *note WeakKeyDictionary: bcd. objects have the following additional
methods.  These expose the internal references directly.  The
references are not guaranteed to be "live" at the time they are used,
so the result of calling the references needs to be checked before
being used.  This can be used to avoid creating references that will
cause the garbage collector to keep the keys around longer than needed.

 -- Method: WeakKeyDictionary.iterkeyrefs ()
     Return an *note iterator: 869. that yields the weak references to
     the keys.

     New in version 2.5.

 -- Method: WeakKeyDictionary.keyrefs ()
     Return a list of weak references to the keys.

     New in version 2.5.

 -- Class: weakref.WeakValueDictionary ([dict])
     Mapping class that references values weakly.  Entries in the
     dictionary will be discarded when no strong reference to the value
     exists any more.

          Note: Caution:  Because a *note WeakValueDictionary: bce. is
          built on top of a Python dictionary, it must not change size
          when iterating over it.  This can be difficult to ensure for
          a *note WeakValueDictionary: bce. because actions performed
          by the program during iteration may cause items in the
          dictionary to vanish "by magic" (as a side effect of garbage
          collection).

  *note WeakValueDictionary: bce. objects have the following additional
methods.  These method have the same issues as the `iterkeyrefs()' and
`keyrefs()' methods of *note WeakKeyDictionary: bcd. objects.

 -- Method: WeakValueDictionary.itervaluerefs ()
     Return an *note iterator: 869. that yields the weak references to
     the values.

     New in version 2.5.

 -- Method: WeakValueDictionary.valuerefs ()
     Return a list of weak references to the values.

     New in version 2.5.

 -- Class: weakref.WeakSet ([elements])
     Set class that keeps weak references to its elements.  An element
     will be discarded when no strong reference to it exists any more.

     New in version 2.7.

 -- Data: weakref.ReferenceType
     The type object for weak references objects.

 -- Data: weakref.ProxyType
     The type object for proxies of objects which are not callable.

 -- Data: weakref.CallableProxyType
     The type object for proxies of callable objects.

 -- Data: weakref.ProxyTypes
     Sequence containing all the type objects for proxies.  This can
     make it simpler to test if an object is a proxy without being
     dependent on naming both proxy types.

 -- Exception: weakref.ReferenceError
     Exception raised when a proxy object is used but the underlying
     object has been collected.  This is the same as the standard *note
     ReferenceError: 4ba. exception.

See also
........

PEP 0205(2) - Weak References
     The proposal and rationale for this feature, including links to
     earlier implementations and information about similar features in
     other languages.

* Menu:

* Weak Reference Objects::
* Example: Example<2>.

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/weakref.py

  (2) http://www.python.org/dev/peps/pep-0205


File: python.info,  Node: Weak Reference Objects,  Next: Example<2>,  Up: weakref --- Weak references

5.8.11.1 Weak Reference Objects
...............................

Weak reference objects have no attributes or methods, but do allow the
referent to be obtained, if it still exists, by calling it:

    >>> import weakref
    >>> class Object:
    ...     pass
    ...
    >>> o = Object()
    >>> r = weakref.ref(o)
    >>> o2 = r()
    >>> o is o2
    True

If the referent no longer exists, calling the reference object returns
*note None: 393.:

    >>> del o, o2
    >>> print r()
    None

Testing that a weak reference object is still live should be done using
the expression `ref() is not None'.  Normally, application code that
needs to use a reference object should follow this pattern:

    # r is a weak reference object
    o = r()
    if o is None:
        # referent has been garbage collected
        print "Object has been deallocated; can't frobnicate."
    else:
        print "Object is still live!"
        o.do_something_useful()

Using a separate test for "liveness" creates race conditions in threaded
applications; another thread can cause a weak reference to become
invalidated before the weak reference is called; the idiom shown above
is safe in threaded applications as well as single-threaded
applications.

  Specialized versions of *note ref: bd0. objects can be created
through subclassing.  This is used in the implementation of the *note
WeakValueDictionary: bce. to reduce the memory overhead for each entry
in the mapping.  This may be most useful to associate additional
information with a reference, but could also be used to insert
additional processing on calls to retrieve the referent.

  This example shows how a subclass of *note ref: bd0. can be used to
store additional information about an object and affect the value
that's returned when the referent is accessed:

    import weakref

    class ExtendedRef(weakref.ref):
        def __init__(self, ob, callback=None, **annotations):
            super(ExtendedRef, self).__init__(ob, callback)
            self.__counter = 0
            for k, v in annotations.iteritems():
                setattr(self, k, v)

        def __call__(self):
            """Return a pair containing the referent and the number of
            times the reference has been called.
            """
            ob = super(ExtendedRef, self).__call__()
            if ob is not None:
                self.__counter += 1
                ob = (ob, self.__counter)
            return ob



File: python.info,  Node: Example<2>,  Prev: Weak Reference Objects,  Up: weakref --- Weak references

5.8.11.2 Example
................

This simple example shows how an application can use objects IDs to
retrieve objects that it has seen before.  The IDs of the objects can
then be used in other data structures without forcing the objects to
remain alive, but the objects can still be retrieved by ID if they do.

    import weakref

    _id2obj_dict = weakref.WeakValueDictionary()

    def remember(obj):
        oid = id(obj)
        _id2obj_dict[oid] = obj
        return oid

    def id2obj(oid):
        return _id2obj_dict[oid]



File: python.info,  Node: UserDict --- Class wrapper for dictionary objects,  Next: UserList --- Class wrapper for list objects,  Prev: weakref --- Weak references,  Up: Data Types

5.8.12 `UserDict' -- Class wrapper for dictionary objects
---------------------------------------------------------

*Source code:* Lib/UserDict.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  The module defines a mixin,  *note DictMixin: be1, defining all
dictionary methods for classes that already have a minimum mapping
interface.  This greatly simplifies writing classes that need to be
substitutable for dictionaries (such as the shelve module).

  This module also defines a class, *note UserDict: 18c, that acts as a
wrapper around dictionary objects.  The need for this class has been
largely supplanted by the ability to subclass directly from *note dict:
2fe. (a feature that became available starting with Python version
2.2).  Prior to the introduction of *note dict: 2fe, the *note
UserDict: 18c. class was used to create dictionary-like sub-classes
that obtained new behaviors by overriding existing methods or adding
new ones.

  The *note UserDict: 18c. module defines the *note UserDict: 18c.
class and *note DictMixin: be1.:

 -- Class: UserDict.UserDict ([initialdata])
     Class that simulates a dictionary.  The instance's contents are
     kept in a regular dictionary, which is accessible via the `data'
     attribute of *note UserDict: 18c. instances.  If _initialdata_ is
     provided, `data' is initialized with its contents; note that a
     reference to _initialdata_ will not be kept, allowing it be used
     for other purposes.

          Note: For backward compatibility, instances of *note
          UserDict: 18c. are not iterable.

 -- Class: UserDict.IterableUserDict ([initialdata])
     Subclass of *note UserDict: 18c. that supports direct iteration
     (e.g.  `for key in myDict').

  In addition to supporting the methods and operations of mappings (see
section *note Mapping Types -- dict: 543.), *note UserDict: 18c. and
*note IterableUserDict: be3. instances provide the following attribute:

 -- Attribute: IterableUserDict.data
     A real dictionary used to store the contents of the *note
     UserDict: 18c. class.

 -- Class: UserDict.DictMixin
     Mixin defining all dictionary methods for classes that already
     have a minimum dictionary interface including *note __getitem__():
     448, *note __setitem__(): 45e, *note __delitem__(): 45f, and
     `keys()'.

     This mixin should be used as a superclass.  Adding each of the
     above methods adds progressively more functionality.  For
     instance, defining all but *note __delitem__(): 45f. will preclude
     only `pop()' and `popitem()' from the full interface.

     In addition to the four base methods, progressively more
     efficiency comes with defining *note __contains__(): 31b, *note
     __iter__(): 31a, and `iteritems()'.

     Since the mixin has no knowledge of the subclass constructor, it
     does not define *note __init__(): 375. or *note copy(): 71.

     Starting with Python version 2.6, it is recommended to use *note
     collections.MutableMapping: b61. instead of *note DictMixin: be1.

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/UserDict.py


File: python.info,  Node: UserList --- Class wrapper for list objects,  Next: UserString --- Class wrapper for string objects,  Prev: UserDict --- Class wrapper for dictionary objects,  Up: Data Types

5.8.13 `UserList' -- Class wrapper for list objects
---------------------------------------------------

     Note: When Python 2.2 was released, many of the use cases for this
     class were subsumed by the ability to subclass *note list: 3b5.
     directly.  However, a handful of use cases remain.

     This module provides a list-interface around an underlying data
     store.  By default, that data store is a *note list: 3b5.;
     however, it can be used to wrap a list-like interface around other
     objects (such as persistent storage).

     In addition, this class can be mixed-in with built-in classes
     using multiple inheritance.  This can sometimes be useful.  For
     example, you can inherit from *note UserList: 18d. and *note str:
     1e7. at the same time.  That would not be possible with both a
     real *note list: 3b5. and a real *note str: 1e7.

This module defines a class that acts as a wrapper around list objects.
It is a useful base class for your own list-like classes, which can
inherit from them and override existing methods or add new ones.  In
this way one can add new behaviors to lists.

  The *note UserList: 18d. module defines the *note UserList: 18d.
class:

 -- Class: UserList.UserList ([list])
     Class that simulates a list.  The instance's contents are kept in
     a regular list, which is accessible via the *note data: be7.
     attribute of *note UserList: 18d.  instances.  The instance's
     contents are initially set to a copy of _list_, defaulting to the
     empty list `[]'.  _list_ can be any iterable, e.g. a real Python
     list or a *note UserList: 18d. object.

          Note: The *note UserList: 18d. class has been moved to the
          *note collections: 65.  module in Python 3. The *note 2to3:
          bbc. tool will automatically adapt imports when converting
          your sources to Python 3.

  In addition to supporting the methods and operations of mutable
sequences (see section *note Sequence Types -- str, unicode, list,
tuple, bytearray, buffer, xrange: 518.), *note UserList: 18d. instances
provide the following attribute:

 -- Attribute: UserList.data
     A real Python list object used to store the contents of the *note
     UserList: 18d.  class.

  *Subclassing requirements:* Subclasses of *note UserList: 18d. are
expect to offer a constructor which can be called with either no
arguments or one argument.  List operations which return a new sequence
attempt to create an instance of the actual implementation class.  To
do so, it assumes that the constructor can be called with a single
parameter, which is a sequence object used as a data source.

  If a derived class does not wish to comply with this requirement, all
of the special methods supported by this class will need to be
overridden; please consult the sources for information about the
methods which need to be provided in that case.

  Changed in version 2.0: Python versions 1.5.2 and 1.6 also required
that the constructor be callable with no parameters, and offer a
mutable `data' attribute.  Earlier versions of Python did not attempt
to create instances of the derived class.


File: python.info,  Node: UserString --- Class wrapper for string objects,  Next: types --- Names for built-in types,  Prev: UserList --- Class wrapper for list objects,  Up: Data Types

5.8.14 `UserString' -- Class wrapper for string objects
-------------------------------------------------------

     Note: This *note UserString: 18e. class from this module is
     available for backward compatibility only.  If you are writing
     code that does not need to work with versions of Python earlier
     than Python 2.2, please consider subclassing directly from the
     built-in *note str: 1e7. type instead of using *note UserString:
     18e. (there is no built-in equivalent to *note MutableString:
     be9.).

This module defines a class that acts as a wrapper around string
objects.  It is a useful base class for your own string-like classes,
which can inherit from them and override existing methods or add new
ones.  In this way one can add new behaviors to strings.

  It should be noted that these classes are highly inefficient compared
to real string or Unicode objects; this is especially the case for
*note MutableString: be9.

  The *note UserString: 18e. module defines the following classes:

 -- Class: UserString.UserString ([sequence])
     Class that simulates a string or a Unicode string object.  The
     instance's content is kept in a regular string or Unicode string
     object, which is accessible via the `data' attribute of *note
     UserString: 18e. instances.  The instance's contents are initially
     set to a copy of _sequence_.  _sequence_ can be either a regular
     Python string or Unicode string, an instance of *note UserString:
     18e. (or a subclass) or an arbitrary sequence which can be
     converted into a string using the built-in *note str(): 1e7.
     function.

          Note: The *note UserString: 18e. class has been moved to the
          *note collections: 65.  module in Python 3. The *note 2to3:
          bbc. tool will automatically adapt imports when converting
          your sources to Python 3.

 -- Class: UserString.MutableString ([sequence])
     This class is derived from the *note UserString: 18e. above and
     redefines strings to be _mutable_.  Mutable strings can't be used
     as dictionary keys, because dictionaries require _immutable_
     objects as keys.  The main intention of this class is to serve as
     an educational example for inheritance and necessity to remove
     (override) the *note __hash__(): 32e. method in order to trap
     attempts to use a mutable object as dictionary key, which would be
     otherwise very error prone and hard to track down.

     Deprecated since version 2.6: The *note MutableString: be9. class
     has been removed in Python 3.

  In addition to supporting the methods and operations of string and
Unicode objects (see section *note String Methods: 519.), *note
UserString: 18e. instances provide the following attribute:

 -- Attribute: MutableString.data
     A real Python string or Unicode object used to store the content
     of the *note UserString: 18e. class.


File: python.info,  Node: types --- Names for built-in types,  Next: new --- Creation of runtime internal objects,  Prev: UserString --- Class wrapper for string objects,  Up: Data Types

5.8.15 `types' -- Names for built-in types
------------------------------------------

*Source code:* Lib/types.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  This module defines names for some object types that are used by the
standard Python interpreter, but not for the types defined by various
extension modules.  Also, it does not include some of the types that
arise during processing such as the `listiterator' type. It is safe to
use `from types import *' -- the module does not export any names
besides the ones listed here. New names exported by future versions of
this module will all end in `Type'.

  Typical use is for functions that do different things depending on
their argument types, like the following:

    from types import *
    def delete(mylist, item):
        if type(item) is IntType:
           del mylist[item]
        else:
           mylist.remove(item)

Starting in Python 2.2, built-in factory functions such as *note int():
1ef. and *note str(): 1e7. are also names for the corresponding types.
This is now the preferred way to access the type instead of using the
*note types: 185. module.  Accordingly, the example above should be
written as follows:

    def delete(mylist, item):
        if isinstance(item, int):
           del mylist[item]
        else:
           mylist.remove(item)

The module defines the following names:

 -- Data: types.NoneType
     The type of `None'.

 -- Data: types.TypeType
     The type of type objects (such as returned by *note type(): 487.);
     alias of the built-in *note type: 487.

 -- Data: types.BooleanType
     The type of the *note bool: 435. values `True' and `False'; alias
     of the built-in *note bool: 435.

     New in version 2.3.

 -- Data: types.IntType
     The type of integers (e.g. `1'); alias of the built-in *note int:
     1ef.

 -- Data: types.LongType
     The type of long integers (e.g. `1L'); alias of the built-in *note
     long: 1f0.

 -- Data: types.FloatType
     The type of floating point numbers (e.g. `1.0'); alias of the
     built-in *note float: 1e8.

 -- Data: types.ComplexType
     The type of complex numbers (e.g. `1.0j').  This is not defined if
     Python was built without complex number support.

 -- Data: types.StringType
     The type of character strings (e.g. `'Spam''); alias of the
     built-in *note str: 1e7.

 -- Data: types.UnicodeType
     The type of Unicode character strings (e.g. `u'Spam'').  This is
     not defined if Python was built without Unicode support.  It's an
     alias of the built-in *note unicode: 1f2.

 -- Data: types.TupleType
     The type of tuples (e.g. `(1, 2, 3, 'Spam')'); alias of the
     built-in *note tuple: 401.

 -- Data: types.ListType
     The type of lists (e.g. `[0, 1, 2, 3]'); alias of the built-in
     *note list: 3b5.

 -- Data: types.DictType
     The type of dictionaries (e.g. `{'Bacon': 1, 'Ham': 0}'); alias of
     the built-in *note dict: 2fe.

 -- Data: types.DictionaryType
     An alternate name for `DictType'.

 -- Data: types.FunctionType
 -- Data: types.LambdaType
     The type of user-defined functions and functions created by *note
     lambda: 3fc.  expressions.

 -- Data: types.GeneratorType
     The type of *note generator: 5cd.-iterator objects, produced by
     calling a generator function.

     New in version 2.2.

 -- Data: types.CodeType
     The type for code objects such as returned by *note compile(): 1f8.

 -- Data: types.ClassType
     The type of user-defined old-style classes.

 -- Data: types.InstanceType
     The type of instances of user-defined classes.

 -- Data: types.MethodType
     The type of methods of user-defined class instances.

 -- Data: types.UnboundMethodType
     An alternate name for `MethodType'.

 -- Data: types.BuiltinFunctionType
 -- Data: types.BuiltinMethodType
     The type of built-in functions like *note len(): 517. or *note
     sys.exit(): 2a4, and methods of built-in classes.  (Here, the term
     "built-in" means "written in C".)

 -- Data: types.ModuleType
     The type of modules.

 -- Data: types.FileType
     The type of open file objects such as `sys.stdout'; alias of the
     built-in *note file: 1f6.

 -- Data: types.XRangeType
     The type of range objects returned by *note xrange(): 454.; alias
     of the built-in *note xrange: 454.

 -- Data: types.SliceType
     The type of objects returned by *note slice(): 449.; alias of the
     built-in *note slice: 449.

 -- Data: types.EllipsisType
     The type of `Ellipsis'.

 -- Data: types.TracebackType
     The type of traceback objects such as found in `sys.exc_traceback'.

 -- Data: types.FrameType
     The type of frame objects such as found in `tb.tb_frame' if `tb'
     is a traceback object.

 -- Data: types.BufferType
     The type of buffer objects created by the *note buffer(): 30f.
     function.

 -- Data: types.DictProxyType
     The type of dict proxies, such as `TypeType.__dict__'.

 -- Data: types.NotImplementedType
     The type of `NotImplemented'

 -- Data: types.GetSetDescriptorType
     The type of objects defined in extension modules with
     `PyGetSetDef', such as `FrameType.f_locals' or
     `array.array.typecode'.  This type is used as descriptor for
     object attributes; it has the same purpose as the *note property:
     480. type, but for classes defined in extension modules.

     New in version 2.5.

 -- Data: types.MemberDescriptorType
     The type of objects defined in extension modules with
     `PyMemberDef', such as `datetime.timedelta.days'.  This type is
     used as descriptor for simple C data members which use standard
     conversion functions; it has the same purpose as the *note
     property: 480. type, but for classes defined in extension modules.

     *CPython implementation detail:* In other implementations of
     Python, this type may be identical to `GetSetDescriptorType'.

     New in version 2.5.

 -- Data: types.StringTypes
     A sequence containing `StringType' and `UnicodeType' used to
     facilitate easier checking for any string object.  Using this is
     more portable than using a sequence of the two string types
     constructed elsewhere since it only contains `UnicodeType' if it
     has been built in the running version of Python.  For example:
     `isinstance(s, types.StringTypes)'.

     New in version 2.2.

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/types.py


File: python.info,  Node: new --- Creation of runtime internal objects,  Next: copy --- Shallow and deep copy operations,  Prev: types --- Names for built-in types,  Up: Data Types

5.8.16 `new' -- Creation of runtime internal objects
----------------------------------------------------

Deprecated since version 2.6: The *note new: 122. module has been
removed in Python 3.  Use the *note types: 185.  module's classes
instead.

  The *note new: 122. module allows an interface to the interpreter
object creation functions. This is for use primarily in marshal-type
functions, when a new object needs to be created "magically" and not by
using the regular creation functions. This module provides a low-level
interface to the interpreter, so care must be exercised when using this
module. It is possible to supply non-sensical arguments which crash the
interpreter when the object is used.

  The *note new: 122. module defines the following functions:

 -- Function: new.instance (class[, dict])
     This function creates an instance of _class_ with dictionary
     _dict_ without calling the *note __init__(): 375. constructor.  If
     _dict_ is omitted or `None', a new, empty dictionary is created
     for the new instance.  Note that there are no guarantees that the
     object will be in a consistent state.

 -- Function: new.instancemethod (function, instance, class)
     This function will return a method object, bound to _instance_, or
     unbound if _instance_ is `None'.  _function_ must be callable.

 -- Function: new.function (code, globals[, name[, argdefs[, closure]]])
     Returns a (Python) function with the given code and globals. If
     _name_ is given, it must be a string or `None'.  If it is a
     string, the function will have the given name, otherwise the
     function name will be taken from `code.co_name'.  If _argdefs_ is
     given, it must be a tuple and will be used to determine the default
     values of parameters.  If _closure_ is given, it must be `None' or
     a tuple of cell objects containing objects to bind to the names in
     `code.co_freevars'.

 -- Function: new.code (argcount, nlocals, stacksize, flags,
          codestring, constants, names, varnames, filename, name,
          firstlineno, lnotab)
     This function is an interface to the *note PyCode_New(): 2b5. C
     function.


 -- Function: new.module (name[, doc])
     This function returns a new module object with name _name_. _name_
     must be a string. The optional _doc_ argument can have any type.

 -- Function: new.classobj (name, baseclasses, dict)
     This function returns a new class object, with name _name_,
     derived from _baseclasses_ (which should be a tuple of classes)
     and with namespace _dict_.


File: python.info,  Node: copy --- Shallow and deep copy operations,  Next: pprint --- Data pretty printer,  Prev: new --- Creation of runtime internal objects,  Up: Data Types

5.8.17 `copy' -- Shallow and deep copy operations
-------------------------------------------------

Assignment statements in Python do not copy objects, they create
bindings between a target and an object. For collections that are
mutable or contain mutable items, a copy is sometimes needed so one can
change one copy without changing the other. This module provides
generic shallow and deep copy operations (explained below).

  Interface summary:

 -- Function: copy.copy (x)
     Return a shallow copy of _x_.

 -- Function: copy.deepcopy (x)
     Return a deep copy of _x_.

 -- Exception: copy.error
     Raised for module specific errors.

  The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances):

   * A _shallow copy_ constructs a new compound object and then (to the
     extent possible) inserts _references_ into it to the objects found
     in the original.

   * A _deep copy_ constructs a new compound object and then,
     recursively, inserts _copies_ into it of the objects found in the
     original.

  Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

   * Recursive objects (compound objects that, directly or indirectly,
     contain a reference to themselves) may cause a recursive loop.

   * Because deep copy copies _everything_ it may copy too much, e.g.,
     administrative data structures that should be shared even between
     copies.

  The *note deepcopy(): 20c. function avoids these problems by:

   * keeping a "memo" dictionary of objects already copied during the
     current copying pass; and

   * letting user-defined classes override the copying operation or the
     set of components copied.

  This module does not copy types like module, method, stack trace,
stack frame, file, socket, window, array, or any similar types.  It
does "copy" functions and classes (shallow and deeply), by returning
the original object unchanged; this is compatible with the way these
are treated by the *note pickle: 12d. module.

  Shallow copies of dictionaries can be made using *note dict.copy():
8e4, and of lists by assigning a slice of the entire list, for example,
`copied_list = original_list[:]'.

  Changed in version 2.5: Added copying functions.

  Classes can use the same interfaces to control copying that they use
to control pickling.  See the description of module *note pickle: 12d.
for information on these methods.  The *note copy: 71. module does not
use the *note copy_reg: 72. registration module.

  In order for a class to define its own copy implementation, it can
define special methods `__copy__()' and `__deepcopy__()'.  The former
is called to implement the shallow copy operation; no additional
arguments are passed.  The latter is called to implement the deep copy
operation; it is passed one argument, the memo dictionary.  If the
`__deepcopy__()' implementation needs to make a deep copy of a
component, it should call the *note deepcopy(): 20c. function with the
component as first argument and the memo dictionary as second argument.

See also
........

Module *note pickle: 12d.
     Discussion of the special methods used to support object state
     retrieval and restoration.


File: python.info,  Node: pprint --- Data pretty printer,  Next: repr --- Alternate repr implementation,  Prev: copy --- Shallow and deep copy operations,  Up: Data Types

5.8.18 `pprint' -- Data pretty printer
--------------------------------------

*Source code:* Lib/pprint.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  The *note pprint: 138. module provides a capability to "pretty-print"
arbitrary Python data structures in a form which can be used as input
to the interpreter.  If the formatted structures include objects which
are not fundamental Python types, the representation may not be
loadable.  This may be the case if objects such as files, sockets,
classes, or instances are included, as well as many other built-in
objects which are not representable as Python constants.

  The formatted representation keeps objects on a single line if it
can, and breaks them onto multiple lines if they don't fit within the
allowed width.  Construct *note PrettyPrinter: c1f. objects explicitly
if you need to adjust the width constraint.

  Changed in version 2.5: Dictionaries are sorted by key before the
display is computed; before 2.5, a dictionary was sorted only if its
display required more than one line, although that wasn't documented.

  Changed in version 2.6: Added support for *note set: 363. and *note
frozenset: 364.

  The *note pprint: 138. module defines one class:

 -- Class: pprint.PrettyPrinter (indent=1, width=80, depth=None,
          stream=None)
     Construct a *note PrettyPrinter: c1f. instance.  This constructor
     understands several keyword parameters.  An output stream may be
     set using the _stream_ keyword; the only method used on the stream
     object is the file protocol's `write()' method.  If not specified,
     the *note PrettyPrinter: c1f. adopts `sys.stdout'.  Three
     additional parameters may be used to control the formatted
     representation.  The keywords are _indent_, _depth_, and _width_.
     The amount of indentation added for each recursive level is
     specified by _indent_; the default is one.  Other values can cause
     output to look a little odd, but can make nesting easier to spot.
     The number of levels which may be printed is controlled by
     _depth_; if the data structure being printed is too deep, the next
     contained level is replaced by `...'.  By default, there is no
     constraint on the depth of the objects being formatted.  The
     desired output width is constrained using the _width_ parameter;
     the default is 80 characters.  If a structure cannot be formatted
     within the constrained width, a best effort will be made.

         >>> import pprint
         >>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
         >>> stuff.insert(0, stuff[:])
         >>> pp = pprint.PrettyPrinter(indent=4)
         >>> pp.pprint(stuff)
         [   ['spam', 'eggs', 'lumberjack', 'knights', 'ni'],
             'spam',
             'eggs',
             'lumberjack',
             'knights',
             'ni']
         >>> tup = ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead',
         ... ('parrot', ('fresh fruit',))))))))
         >>> pp = pprint.PrettyPrinter(depth=6)
         >>> pp.pprint(tup)
         ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead', (...)))))))



  The *note PrettyPrinter: c1f. class supports several derivative
functions:

 -- Function: pprint.pformat (object, indent=1, width=80, depth=None)
     Return the formatted representation of _object_ as a string.
     _indent_, _width_ and _depth_ will be passed to the *note
     PrettyPrinter: c1f. constructor as formatting parameters.

     Changed in version 2.4: The parameters _indent_, _width_ and
     _depth_ were added.

 -- Function: pprint.pprint (object, stream=None, indent=1, width=80,
          depth=None)
     Prints the formatted representation of _object_ on _stream_,
     followed by a newline.  If _stream_ is `None', `sys.stdout' is
     used.  This may be used in the interactive interpreter instead of
     a *note print: 4d7. statement for inspecting values.    _indent_,
     _width_ and _depth_ will be passed to the *note PrettyPrinter:
     c1f. constructor as formatting parameters.

         >>> import pprint
         >>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
         >>> stuff.insert(0, stuff)
         >>> pprint.pprint(stuff)
         [<Recursion on list with id=...>,
          'spam',
          'eggs',
          'lumberjack',
          'knights',
          'ni']

     Changed in version 2.4: The parameters _indent_, _width_ and
     _depth_ were added.

 -- Function: pprint.isreadable (object)
     Determine if the formatted representation of _object_ is
     "readable," or can be used to reconstruct the value using *note
     eval(): 359.  This always returns `False' for recursive objects.

         >>> pprint.isreadable(stuff)
         False



 -- Function: pprint.isrecursive (object)
     Determine if _object_ requires a recursive representation.

  One more support function is also defined:

 -- Function: pprint.saferepr (object)
     Return a string representation of _object_, protected against
     recursive data structures.  If the representation of _object_
     exposes a recursive entry, the recursive reference will be
     represented as `<Recursion on typename with id=number>'.  The
     representation is not otherwise formatted.

         >>> pprint.saferepr(stuff)
         "[<Recursion on list with id=...>, 'spam', 'eggs', 'lumberjack', 'knights', 'ni']"



* Menu:

* PrettyPrinter Objects::
* pprint Example::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/pprint.py


File: python.info,  Node: PrettyPrinter Objects,  Next: pprint Example,  Up: pprint --- Data pretty printer

5.8.18.1 PrettyPrinter Objects
..............................

*note PrettyPrinter: c1f. instances have the following methods:

 -- Method: PrettyPrinter.pformat (object)
     Return the formatted representation of _object_.  This takes into
     account the options passed to the *note PrettyPrinter: c1f.
     constructor.

 -- Method: PrettyPrinter.pprint (object)
     Print the formatted representation of _object_ on the configured
     stream, followed by a newline.

  The following methods provide the implementations for the
corresponding functions of the same names.  Using these methods on an
instance is slightly more efficient since new *note PrettyPrinter: c1f.
objects don't need to be created.

 -- Method: PrettyPrinter.isreadable (object)
     Determine if the formatted representation of the object is
     "readable," or can be used to reconstruct the value using *note
     eval(): 359.  Note that this returns `False' for recursive
     objects.  If the _depth_ parameter of the *note PrettyPrinter:
     c1f. is set and the object is deeper than allowed, this returns
     `False'.

 -- Method: PrettyPrinter.isrecursive (object)
     Determine if the object requires a recursive representation.

  This method is provided as a hook to allow subclasses to modify the
way objects are converted to strings.  The default implementation uses
the internals of the *note saferepr(): c24. implementation.

 -- Method: PrettyPrinter.format (object, context, maxlevels, level)
     Returns three values: the formatted version of _object_ as a
     string, a flag indicating whether the result is readable, and a
     flag indicating whether recursion was detected.  The first
     argument is the object to be presented.  The second is a
     dictionary which contains the *note id(): 3ab. of objects that are
     part of the current presentation context (direct and indirect
     containers for _object_ that are affecting the presentation) as
     the keys; if an object needs to be presented which is already
     represented in _context_, the third return value should be `True'.
     Recursive calls to the *note format(): 1ec. method should add
     additional entries for containers to this dictionary.  The third
     argument, _maxlevels_, gives the requested limit to recursion;
     this will be `0' if there is no requested limit.  This argument
     should be passed unmodified to recursive calls. The fourth
     argument, _level_, gives the current level; recursive calls should
     be passed a value less than that of the current call.

     New in version 2.3.


File: python.info,  Node: pprint Example,  Prev: PrettyPrinter Objects,  Up: pprint --- Data pretty printer

5.8.18.2 pprint Example
.......................

This example demonstrates several uses of the *note pprint(): 138.
function and its parameters.

    >>> import pprint
    >>> tup = ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead',
    ... ('parrot', ('fresh fruit',))))))))
    >>> stuff = ['a' * 10, tup, ['a' * 30, 'b' * 30], ['c' * 20, 'd' * 20]]
    >>> pprint.pprint(stuff)
    ['aaaaaaaaaa',
     ('spam',
      ('eggs',
       ('lumberjack',
        ('knights', ('ni', ('dead', ('parrot', ('fresh fruit',)))))))),
     ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
     ['cccccccccccccccccccc', 'dddddddddddddddddddd']]
    >>> pprint.pprint(stuff, depth=3)
    ['aaaaaaaaaa',
     ('spam', ('eggs', (...))),
     ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
     ['cccccccccccccccccccc', 'dddddddddddddddddddd']]
    >>> pprint.pprint(stuff, width=60)
    ['aaaaaaaaaa',
     ('spam',
      ('eggs',
       ('lumberjack',
        ('knights',
         ('ni', ('dead', ('parrot', ('fresh fruit',)))))))),
     ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],
     ['cccccccccccccccccccc', 'dddddddddddddddddddd']]



File: python.info,  Node: repr --- Alternate repr implementation,  Prev: pprint --- Data pretty printer,  Up: Data Types

5.8.19 `repr' -- Alternate `repr()' implementation
--------------------------------------------------

     Note: The *note repr: 145. module has been renamed to `reprlib' in
     Python 3.  The *note 2to3: bbc. tool will automatically adapt
     imports when converting your sources to Python 3.

*Source code:* Lib/repr.py(1)

      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


  The *note repr: 145. module provides a means for producing object
representations with limits on the size of the resulting strings. This
is used in the Python debugger and may be useful in other contexts as
well.

  This module provides a class, an instance, and a function:

 -- Class: repr.Repr
     Class which provides formatting services useful in implementing
     functions similar to the built-in *note repr(): 145.; size limits
     for  different object types are added to avoid the generation of
     representations which are excessively long.

 -- Data: repr.aRepr
     This is an instance of *note Repr: c30. which is used to provide
     the *note repr(): c32.  function described below.  Changing the
     attributes of this object will affect the size limits used by
     *note repr(): c32. and the Python debugger.

 -- Function: repr.repr (obj)
     This is the *note repr(): c33. method of `aRepr'.  It returns a
     string similar to that returned by the built-in function of the
     same name, but with limits on most sizes.

* Menu:

* Repr Objects::
* Subclassing Repr Objects::

  ---------- Footnotes ----------

  (1) http://hg.python.org/cpython/file/2.7/Lib/repr.py


File: python.info,  Node: Repr Objects,  Next: Subclassing Repr Objects,  Up: repr --- Alternate repr implementation

5.8.19.1 Repr Objects
.....................

*note Repr: c30. instances provide several attributes which can be used
to provide size limits for the representations of different object
types,  and methods which format specific object types.

 -- Attribute: Repr.maxlevel
     Depth limit on the creation of recursive representations.  The
     default is `6'.

 -- Attribute: Repr.maxdict
 -- Attribute: Repr.maxlist
 -- Attribute: Repr.maxtuple
 -- Attribute: Repr.maxset
 -- Attribute: Repr.maxfrozenset
 -- Attribute: Repr.maxdeque
 -- Attribute: Repr.maxarray
     Limits on the number of entries represented for the named object
     type.  The default is `4' for *note maxdict: c37, `5' for *note
     maxarray: c3d, and  `6' for the others.

     New in version 2.4: *note maxset: c3a, *note maxfrozenset: c3b,
     and *note set: 363.

 -- Attribute: Repr.maxlong
     Maximum number of characters in the representation for a long
     integer.  Digits are dropped from the middle.  The default is `40'.

 -- Attribute: Repr.maxstring
     Limit on the number of characters in the representation of the
     string.  Note that the "normal" representation of the string is
     used as the character source: if escape sequences are needed in
     the representation, these may be mangled when the representation
     is shortened.  The default is `30'.

 -- Attribute: Repr.maxother
     This limit is used to control the size of object types for which
     no specific formatting method is available on the *note Repr: c30.
     object. It is applied in a similar manner as *note maxstring: c3f.
     The default is `20'.

 -- Method: Repr.repr (obj)
     The equivalent to the built-in *note repr(): 145. that uses the
     formatting imposed by the instance.

 -- Method: Repr.repr1 (obj, level)
     Recursive implementation used by *note repr(): c33.  This uses the
     type of _obj_ to determine which formatting method to call,
     passing it _obj_ and _level_.  The type-specific methods should
     call *note repr1(): c41. to perform recursive formatting, with
     `level - 1' for the value of _level_ in the recursive  call.

 -- Method: Repr.repr_TYPE (obj, level)
     Formatting methods for specific types are implemented as methods
     with a name based on the type name.  In the method name, *TYPE* is
     replaced by `string.join(string.split(type(obj).__name__, '_'))'.
     Dispatch to these methods is handled by `repr1()'. Type-specific
     methods which need to recursively format a value should call
     `self.repr1(subobj, level - 1)'.


File: python.info,  Node: Subclassing Repr Objects,  Prev: Repr Objects,  Up: repr --- Alternate repr implementation

5.8.19.2 Subclassing Repr Objects
.................................

The use of dynamic dispatching by *note Repr.repr1(): c41. allows
subclasses of *note Repr: c30. to add support for additional built-in
object types or to modify the handling of types already supported. This
example shows how special support for file objects could be added:

    import repr as reprlib
    import sys

    class MyRepr(reprlib.Repr):
        def repr_file(self, obj, level):
            if obj.name in ['<stdin>', '<stdout>', '<stderr>']:
                return obj.name
            else:
                return repr(obj)

    aRepr = MyRepr()
    print aRepr.repr(sys.stdin)          # prints '<stdin>'



File: python.info,  Node: Numeric and Mathematical Modules,  Next: File and Directory Access,  Prev: Data Types,  Up: The Python Standard Library

5.9 Numeric and Mathematical Modules
====================================

The modules described in this chapter provide numeric and math-related
functions and data types. The *note numbers: 125. module defines an
abstract hierarchy of numeric types. The *note math: 10c. and *note
cmath: 60. modules contain various mathematical functions for
floating-point and complex numbers. For users more interested in
decimal accuracy than in speed, the *note decimal: 80. module supports
exact representations of decimal numbers.

  The following modules are documented in this chapter:

* Menu:

* numbers: numbers --- Numeric abstract base classes. Numeric abstract base classes
* math: math --- Mathematical functions. Mathematical functions
* cmath: cmath --- Mathematical functions for complex numbers. Mathematical functions for complex numbers
* decimal: decimal --- Decimal fixed point and floating point arithmetic. Decimal fixed point and floating point arithmetic
* fractions: fractions --- Rational numbers. Rational numbers
* random: random --- Generate pseudo-random numbers. Generate pseudo-random numbers
* itertools: itertools --- Functions creating iterators for efficient looping. Functions creating iterators for efficient looping
* functools: functools --- Higher-order functions and operations on callable objects. Higher-order functions and operations on callable
                        objects
* operator: operator --- Standard operators as functions. Standard operators as functions

numbers --- Numeric abstract base classes

* The numeric tower::
* Notes for type implementors::

Notes for type implementors

* Adding More Numeric ABCs::
* Implementing the arithmetic operations::

math --- Mathematical functions

* Number-theoretic and representation functions::
* Power and logarithmic functions::
* Trigonometric functions::
* Angular conversion::
* Hyperbolic functions::
* Special functions::
* Constants::

cmath --- Mathematical functions for complex numbers

* Conversions to and from polar coordinates::
* Power and logarithmic functions: Power and logarithmic functions<2>.
* Trigonometric functions: Trigonometric functions<2>.
* Hyperbolic functions: Hyperbolic functions<2>.
* Classification functions::
* Constants: Constants<2>.

decimal --- Decimal fixed point and floating point arithmetic

* Quick-start Tutorial::
* Decimal objects::
* Context objects::
* Signals::
* Floating Point Notes::
* Working with threads::
* Recipes::
* Decimal FAQ::

Decimal objects

* Logical operands::

Floating Point Notes

* Mitigating round-off error with increased precision::
* Special values::

itertools --- Functions creating iterators for efficient looping

* Itertool functions::
* Recipes: Recipes<2>.

functools --- Higher-order functions and operations on callable objects

* partial Objects::

operator --- Standard operators as functions

* Mapping Operators to Functions::


File: python.info,  Node: numbers --- Numeric abstract base classes,  Next: math --- Mathematical functions,  Up: Numeric and Mathematical Modules

5.9.1 `numbers' -- Numeric abstract base classes
------------------------------------------------

New in version 2.6.

  The *note numbers: 125. module ( PEP 3141(1)) defines a hierarchy of
numeric *note abstract base classes: 870. which progressively define
more operations.  None of the types defined in this module can be
instantiated.

 -- Class: numbers.Number
     The root of the numeric hierarchy. If you just want to check if an
     argument _x_ is a number, without caring what kind, use
     `isinstance(x, Number)'.

* Menu:

* The numeric tower::
* Notes for type implementors::

  ---------- Footnotes ----------

  (1) http://www.python.org/dev/peps/pep-3141



Local Variables:
coding: utf-8
End:
