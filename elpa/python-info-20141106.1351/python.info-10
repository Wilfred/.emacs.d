This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: zipfile --- Work with ZIP archives,  Next: tarfile --- Read and write tar archive files,  Prev: bz2 --- Compression compatible with bzip2,  Up: Data Compression and Archiving

5.12.4 ‘zipfile’ — Work with ZIP archives
-----------------------------------------

New in version 1.6.

  *Source code:* Lib/zipfile.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The ZIP file format is a common archive and compression standard.
This module provides tools to create, read, write, append, and list a
ZIP file.  Any advanced use of this module will require an understanding
of the format, as defined in PKZIP Application Note(2).

  This module does not currently handle multi-disk ZIP files.  It can
handle ZIP files that use the ZIP64 extensions (that is ZIP files that
are more than 4 GByte in size).  It supports decryption of encrypted
files in ZIP archives, but it currently cannot create an encrypted file.
Decryption is extremely slow as it is implemented in native Python
rather than C.

  The module defines the following items:

 -- Exception: zipfile.BadZipfile

     The error raised for bad ZIP files (old name: ‘zipfile.error’).

 -- Exception: zipfile.LargeZipFile

     The error raised when a ZIP file would require ZIP64 functionality
     but that has not been enabled.

 -- Class: zipfile.ZipFile

     The class for reading and writing ZIP files.  See section *note
     ZipFile Objects: fa6. for constructor details.

 -- Class: zipfile.PyZipFile

     Class for creating ZIP archives containing Python libraries.

 -- Class: zipfile.ZipInfo ([filename[, date_time]])

     Class used to represent information about a member of an archive.
     Instances of this class are returned by the *note getinfo(): fa9.
     and *note infolist(): faa. methods of *note ZipFile: 26c. objects.
     Most users of the *note zipfile: 1ab. module will not need to
     create these, but only use those created by this module.
     _filename_ should be the full name of the archive member, and
     _date_time_ should be a tuple containing six fields which describe
     the time of the last modification to the file; the fields are
     described in section *note ZipInfo Objects: fab.

 -- Function: zipfile.is_zipfile (filename)

     Returns ‘True’ if _filename_ is a valid ZIP file based on its magic
     number, otherwise returns ‘False’.  _filename_ may be a file or
     file-like object too.

     Changed in version 2.7: Support for file and file-like objects.

 -- Data: zipfile.ZIP_STORED

     The numeric constant for an uncompressed archive member.

 -- Data: zipfile.ZIP_DEFLATED

     The numeric constant for the usual ZIP compression method.  This
     requires the *note zlib: 1ad. module.  No other compression methods
     are currently supported.

See also
........

PKZIP Application Note(3)

     Documentation on the ZIP file format by Phil Katz, the creator of
     the format and algorithms used.

Info-ZIP Home Page(4)

     Information about the Info-ZIP project’s ZIP archive programs and
     development libraries.

* Menu:

* ZipFile Objects:: 
* PyZipFile Objects:: 
* ZipInfo Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/zipfile.py

   (2) http://www.pkware.com/documents/casestudies/APPNOTE.TXT

   (3) http://www.pkware.com/documents/casestudies/APPNOTE.TXT

   (4) http://www.info-zip.org/


File: python.info,  Node: ZipFile Objects,  Next: PyZipFile Objects,  Up: zipfile --- Work with ZIP archives

5.12.4.1 ZipFile Objects
........................

 -- Class: zipfile.ZipFile (file[, mode[, compression[, allowZip64]]])

     Open a ZIP file, where _file_ can be either a path to a file (a
     string) or a file-like object.  The _mode_ parameter should be
     ‘'r'’ to read an existing file, ‘'w'’ to truncate and write a new
     file, or ‘'a'’ to append to an existing file.  If _mode_ is ‘'a'’
     and _file_ refers to an existing ZIP file, then additional files
     are added to it.  If _file_ does not refer to a ZIP file, then a
     new ZIP archive is appended to the file.  This is meant for adding
     a ZIP archive to another file (such as ‘python.exe’).

     Changed in version 2.6: If _mode_ is ‘a’ and the file does not
     exist at all, it is created.

     _compression_ is the ZIP compression method to use when writing the
     archive, and should be *note ZIP_STORED: fac. or *note
     ZIP_DEFLATED: fad.; unrecognized values will cause *note
     RuntimeError: 39b. to be raised.  If *note ZIP_DEFLATED: fad. is
     specified but the *note zlib: 1ad. module is not available, *note
     RuntimeError: 39b. is also raised.  The default is *note
     ZIP_STORED: fac.  If _allowZip64_ is ‘True’ zipfile will create ZIP
     files that use the ZIP64 extensions when the zipfile is larger than
     2 GB. If it is false (the default) *note zipfile: 1ab. will raise
     an exception when the ZIP file would require ZIP64 extensions.
     ZIP64 extensions are disabled by default because the default *zip*
     and *unzip* commands on Unix (the InfoZIP utilities) don’t support
     these extensions.

     Changed in version 2.7.1: If the file is created with mode ‘'a'’ or
     ‘'w'’ and then *note closed: faf. without adding any files to the
     archive, the appropriate ZIP structures for an empty archive will
     be written to the file.

     ZipFile is also a context manager and therefore supports the *note
     with: 1c0. statement.  In the example, _myzip_ is closed after the
     *note with: 1c0. statement’s suite is finished—even if an exception
     occurs:

          with ZipFile('spam.zip', 'w') as myzip:
              myzip.write('eggs.txt')

     New in version 2.7: Added the ability to use *note ZipFile: 26c. as
     a context manager.

 -- Method: ZipFile.close ()

     Close the archive file.  You must call *note close(): faf. before
     exiting your program or essential records will not be written.

 -- Method: ZipFile.getinfo (name)

     Return a *note ZipInfo: fa8. object with information about the
     archive member _name_.  Calling *note getinfo(): fa9. for a name
     not currently contained in the archive will raise a *note KeyError:
     205.

 -- Method: ZipFile.infolist ()

     Return a list containing a *note ZipInfo: fa8. object for each
     member of the archive.  The objects are in the same order as their
     entries in the actual ZIP file on disk if an existing archive was
     opened.

 -- Method: ZipFile.namelist ()

     Return a list of archive members by name.

 -- Method: ZipFile.open (name[, mode[, pwd]])

     Extract a member from the archive as a file-like object
     (ZipExtFile).  _name_ is the name of the file in the archive, or a
     *note ZipInfo: fa8. object.  The _mode_ parameter, if included,
     must be one of the following: ‘'r'’ (the default), ‘'U'’, or
     ‘'rU'’.  Choosing ‘'U'’ or ‘'rU'’ will enable *note universal
     newline: 315. support in the read-only object.  _pwd_ is the
     password used for encrypted files.  Calling *note open(): fb1. on a
     closed ZipFile will raise a *note RuntimeError: 39b.

          Note: The file-like object is read-only and provides the
          following methods: *note read(): 90f, *note readline(): 644,
          *note readlines(): 642, *note __iter__(): 321, ‘next()’.

          Note: If the ZipFile was created by passing in a file-like
          object as the first argument to the constructor, then the
          object returned by *note open(): fb1. shares the ZipFile’s
          file pointer.  Under these circumstances, the object returned
          by *note open(): fb1. should not be used after any additional
          operations are performed on the ZipFile object.  If the
          ZipFile was created by passing in a string (the filename) as
          the first argument to the constructor, then *note open(): fb1.
          will create a new file object that will be held by the
          ZipExtFile, allowing it to operate independently of the
          ZipFile.

          Note: The *note open(): fb1, *note read(): 26d. and *note
          extract(): fb2. methods can take a filename or a *note
          ZipInfo: fa8. object.  You will appreciate this when trying to
          read a ZIP file that contains members with duplicate names.

     New in version 2.6.

 -- Method: ZipFile.extract (member[, path[, pwd]])

     Extract a member from the archive to the current working directory;
     _member_ must be its full name or a *note ZipInfo: fa8. object).
     Its file information is extracted as accurately as possible.
     _path_ specifies a different directory to extract to.  _member_ can
     be a filename or a *note ZipInfo: fa8. object.  _pwd_ is the
     password used for encrypted files.

     New in version 2.6.

          Note: If a member filename is an absolute path, a drive/UNC
          sharepoint and leading (back)slashes will be stripped, e.g.:
          ‘///foo/bar’ becomes ‘foo/bar’ on Unix, and ‘C:\foo\bar’
          becomes ‘foo\bar’ on Windows.  And all ‘".."’ components in a
          member filename will be removed, e.g.: ‘../../foo../../ba..r’
          becomes ‘foo../ba..r’.  On Windows illegal characters (‘:’,
          ‘<’, ‘>’, ‘|’, ‘"’, ‘?’, and ‘*’) replaced by underscore
          (‘_’).

 -- Method: ZipFile.extractall ([path[, members[, pwd]]])

     Extract all members from the archive to the current working
     directory.  _path_ specifies a different directory to extract to.
     _members_ is optional and must be a subset of the list returned by
     *note namelist(): fb0.  _pwd_ is the password used for encrypted
     files.

          Warning: Never extract archives from untrusted sources without
          prior inspection.  It is possible that files are created
          outside of _path_, e.g.  members that have absolute filenames
          starting with ‘"/"’ or filenames with two dots ‘".."’.

     Changed in version 2.7.4: The zipfile module attempts to prevent
     that.  See *note extract(): fb2. note.

     New in version 2.6.

 -- Method: ZipFile.printdir ()

     Print a table of contents for the archive to ‘sys.stdout’.

 -- Method: ZipFile.setpassword (pwd)

     Set _pwd_ as default password to extract encrypted files.

     New in version 2.6.

 -- Method: ZipFile.read (name[, pwd])

     Return the bytes of the file _name_ in the archive.  _name_ is the
     name of the file in the archive, or a *note ZipInfo: fa8. object.
     The archive must be open for read or append.  _pwd_ is the password
     used for encrypted files and, if specified, it will override the
     default password set with *note setpassword(): fb5.  Calling *note
     read(): 26d. on a closed ZipFile will raise a *note RuntimeError:
     39b.

     Changed in version 2.6: _pwd_ was added, and _name_ can now be a
     *note ZipInfo: fa8. object.

 -- Method: ZipFile.testzip ()

     Read all the files in the archive and check their CRC’s and file
     headers.  Return the name of the first bad file, or else return
     ‘None’.  Calling *note testzip(): fb6. on a closed ZipFile will
     raise a *note RuntimeError: 39b.

 -- Method: ZipFile.write (filename[, arcname[, compress_type]])

     Write the file named _filename_ to the archive, giving it the
     archive name _arcname_ (by default, this will be the same as
     _filename_, but without a drive letter and with leading path
     separators removed).  If given, _compress_type_ overrides the value
     given for the _compression_ parameter to the constructor for the
     new entry.  The archive must be open with mode ‘'w'’ or ‘'a'’ –
     calling *note write(): fb7. on a ZipFile created with mode ‘'r'’
     will raise a *note RuntimeError: 39b.  Calling *note write(): fb7.
     on a closed ZipFile will raise a *note RuntimeError: 39b.

          Note: There is no official file name encoding for ZIP files.
          If you have unicode file names, you must convert them to byte
          strings in your desired encoding before passing them to *note
          write(): fb7.  WinZip interprets all file names as encoded in
          CP437, also known as DOS Latin.

          Note: Archive names should be relative to the archive root,
          that is, they should not start with a path separator.

          Note: If ‘arcname’ (or ‘filename’, if ‘arcname’ is not given)
          contains a null byte, the name of the file in the archive will
          be truncated at the null byte.

 -- Method: ZipFile.writestr (zinfo_or_arcname, bytes[, compress_type])

     Write the string _bytes_ to the archive; _zinfo_or_arcname_ is
     either the file name it will be given in the archive, or a *note
     ZipInfo: fa8. instance.  If it’s an instance, at least the
     filename, date, and time must be given.  If it’s a name, the date
     and time is set to the current date and time.  The archive must be
     opened with mode ‘'w'’ or ‘'a'’ – calling *note writestr(): 26f. on
     a ZipFile created with mode ‘'r'’ will raise a *note RuntimeError:
     39b.  Calling *note writestr(): 26f. on a closed ZipFile will raise
     a *note RuntimeError: 39b.

     If given, _compress_type_ overrides the value given for the
     _compression_ parameter to the constructor for the new entry, or in
     the _zinfo_or_arcname_ (if that is a *note ZipInfo: fa8. instance).

          Note: When passing a *note ZipInfo: fa8. instance as the
          _zinfo_or_arcname_ parameter, the compression method used will
          be that specified in the _compress_type_ member of the given
          *note ZipInfo: fa8. instance.  By default, the *note ZipInfo:
          fa8. constructor sets this member to *note ZIP_STORED: fac.

     Changed in version 2.7: The _compress_type_ argument.

  The following data attributes are also available:

 -- Attribute: ZipFile.debug

     The level of debug output to use.  This may be set from ‘0’ (the
     default, no output) to ‘3’ (the most output).  Debugging
     information is written to ‘sys.stdout’.

 -- Attribute: ZipFile.comment

     The comment text associated with the ZIP file.  If assigning a
     comment to a *note ZipFile: 26c. instance created with mode ’a’ or
     ’w’, this should be a string no longer than 65535 bytes.  Comments
     longer than this will be truncated in the written archive when
     *note close(): faf. is called.


File: python.info,  Node: PyZipFile Objects,  Next: ZipInfo Objects,  Prev: ZipFile Objects,  Up: zipfile --- Work with ZIP archives

5.12.4.2 PyZipFile Objects
..........................

The *note PyZipFile: fa7. constructor takes the same parameters as the
*note ZipFile: 26c. constructor.  Instances have one method in addition
to those of *note ZipFile: 26c. objects.

 -- Method: PyZipFile.writepy (pathname[, basename])

     Search for files ‘*.py’ and add the corresponding file to the
     archive.  The corresponding file is a ‘*.pyo’ file if available,
     else a ‘*.pyc’ file, compiling if necessary.  If the pathname is a
     file, the filename must end with ‘.py’, and just the (corresponding
     ‘*.py[co]’) file is added at the top level (no path information).
     If the pathname is a file that does not end with ‘.py’, a *note
     RuntimeError: 39b. will be raised.  If it is a directory, and the
     directory is not a package directory, then all the files ‘*.py[co]’
     are added at the top level.  If the directory is a package
     directory, then all ‘*.py[co]’ are added under the package name as
     a file path, and if any subdirectories are package directories, all
     of these are added recursively.  _basename_ is intended for
     internal use only.  The *note writepy(): fbc. method makes archives
     with file names like this:

          string.pyc                                # Top level name
          test/__init__.pyc                         # Package directory
          test/test_support.pyc                          # Module test.test_support
          test/bogus/__init__.pyc                   # Subpackage directory
          test/bogus/myfile.pyc                     # Submodule test.bogus.myfile


File: python.info,  Node: ZipInfo Objects,  Prev: PyZipFile Objects,  Up: zipfile --- Work with ZIP archives

5.12.4.3 ZipInfo Objects
........................

Instances of the *note ZipInfo: fa8. class are returned by the *note
getinfo(): fa9. and *note infolist(): faa. methods of *note ZipFile:
26c. objects.  Each object stores information about a single member of
the ZIP archive.

  Instances have the following attributes:

 -- Attribute: ZipInfo.filename

     Name of the file in the archive.

 -- Attribute: ZipInfo.date_time

     The time and date of the last modification to the archive member.
     This is a tuple of six values:

     Index       Value
                 
     -------------------------------------------
                 
     ‘0’         Year (>= 1980)
                 
                 
     ‘1’         Month (one-based)
                 
                 
     ‘2’         Day of month (one-based)
                 
                 
     ‘3’         Hours (zero-based)
                 
                 
     ‘4’         Minutes (zero-based)
                 
                 
     ‘5’         Seconds (zero-based)
                 

          Note: The ZIP file format does not support timestamps before
          1980.

 -- Attribute: ZipInfo.compress_type

     Type of compression for the archive member.

 -- Attribute: ZipInfo.comment

     Comment for the individual archive member.

 -- Attribute: ZipInfo.extra

     Expansion field data.  The PKZIP Application Note(1) contains some
     comments on the internal structure of the data contained in this
     string.

 -- Attribute: ZipInfo.create_system

     System which created ZIP archive.

 -- Attribute: ZipInfo.create_version

     PKZIP version which created ZIP archive.

 -- Attribute: ZipInfo.extract_version

     PKZIP version needed to extract archive.

 -- Attribute: ZipInfo.reserved

     Must be zero.

 -- Attribute: ZipInfo.flag_bits

     ZIP flag bits.

 -- Attribute: ZipInfo.volume

     Volume number of file header.

 -- Attribute: ZipInfo.internal_attr

     Internal attributes.

 -- Attribute: ZipInfo.external_attr

     External file attributes.

 -- Attribute: ZipInfo.header_offset

     Byte offset to the file header.

 -- Attribute: ZipInfo.CRC

     CRC-32 of the uncompressed file.

 -- Attribute: ZipInfo.compress_size

     Size of the compressed data.

 -- Attribute: ZipInfo.file_size

     Size of the uncompressed file.

   ---------- Footnotes ----------

   (1) http://www.pkware.com/documents/casestudies/APPNOTE.TXT


File: python.info,  Node: tarfile --- Read and write tar archive files,  Prev: zipfile --- Work with ZIP archives,  Up: Data Compression and Archiving

5.12.5 ‘tarfile’ — Read and write tar archive files
---------------------------------------------------

New in version 2.3.

  *Source code:* Lib/tarfile.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note tarfile: 171. module makes it possible to read and write tar
archives, including those using gzip or bz2 compression.  Use the *note
zipfile: 1ab. module to read or write ‘.zip’ files, or the higher-level
functions in *note shutil: eb2.

  Some facts and figures:

   * reads and writes *note gzip: e5. and *note bz2: 1e. compressed
     archives.

   * read/write support for the POSIX.1-1988 (ustar) format.

   * read/write support for the GNU tar format including _longname_ and
     _longlink_ extensions, read-only support for the _sparse_
     extension.

   * read/write support for the POSIX.1-2001 (pax) format.

     New in version 2.6.

   * handles directories, regular files, hardlinks, symbolic links,
     fifos, character devices and block devices and is able to acquire
     and restore file information like timestamp, access permissions and
     owner.

 -- Function: tarfile.open (name=None, mode='r', fileobj=None,
          bufsize=10240, **kwargs)

     Return a *note TarFile: 267. object for the pathname _name_.  For
     detailed information on *note TarFile: 267. objects and the keyword
     arguments that are allowed, see *note TarFile Objects: fd2.

     _mode_ has to be a string of the form ‘'filemode[:compression]'’,
     it defaults to ‘'r'’.  Here is a full list of mode combinations:

     mode                   action
                            
     -------------------------------------------------------------------------
                            
     ‘'r' or 'r:*'’         Open for reading with transparent compression
                            (recommended).
                            
                            
     ‘'r:'’                 Open for reading exclusively without
                            compression.
                            
                            
     ‘'r:gz'’               Open for reading with gzip compression.
                            
                            
     ‘'r:bz2'’              Open for reading with bzip2 compression.
                            
                            
     ‘'a' or 'a:'’          Open for appending with no compression.  The
                            file is created if it does not exist.
                            
                            
     ‘'w' or 'w:'’          Open for uncompressed writing.
                            
                            
     ‘'w:gz'’               Open for gzip compressed writing.
                            
                            
     ‘'w:bz2'’              Open for bzip2 compressed writing.
                            

     Note that ‘'a:gz'’ or ‘'a:bz2'’ is not possible.  If _mode_ is not
     suitable to open a certain (compressed) file for reading, *note
     ReadError: fd3. is raised.  Use _mode_ ‘'r'’ to avoid this.  If a
     compression method is not supported, *note CompressionError: fd4.
     is raised.

     If _fileobj_ is specified, it is used as an alternative to a file
     object opened for _name_.  It is supposed to be at position 0.

     For modes ‘'w:gz'’, ‘'r:gz'’, ‘'w:bz2'’, ‘'r:bz2'’, *note
     tarfile.open(): fd1. accepts the keyword argument _compresslevel_
     to specify the compression level of the file.

     For special purposes, there is a second format for _mode_:
     ‘'filemode|[compression]'’.  *note tarfile.open(): fd1. will return
     a *note TarFile: 267. object that processes its data as a stream of
     blocks.  No random seeking will be done on the file.  If given,
     _fileobj_ may be any object that has a ‘read()’ or ‘write()’ method
     (depending on the _mode_).  _bufsize_ specifies the blocksize and
     defaults to ‘20 * 512’ bytes.  Use this variant in combination with
     e.g.  ‘sys.stdin’, a socket file object or a tape device.  However,
     such a *note TarFile: 267. object is limited in that it does not
     allow to be accessed randomly, see *note Examples: fd5.  The
     currently possible modes:

     Mode              Action
                       
     -------------------------------------------------------------------
                       
     ‘'r|*'’           Open a _stream_ of tar blocks for reading with
                       transparent compression.
                       
                       
     ‘'r|'’            Open a _stream_ of uncompressed tar blocks for
                       reading.
                       
                       
     ‘'r|gz'’          Open a gzip compressed _stream_ for reading.
                       
                       
     ‘'r|bz2'’         Open a bzip2 compressed _stream_ for reading.
                       
                       
     ‘'w|'’            Open an uncompressed _stream_ for writing.
                       
                       
     ‘'w|gz'’          Open an gzip compressed _stream_ for writing.
                       
                       
     ‘'w|bz2'’         Open an bzip2 compressed _stream_ for writing.
                       

 -- Class: tarfile.TarFile

     Class for reading and writing tar archives.  Do not use this class
     directly, better use *note tarfile.open(): fd1. instead.  See *note
     TarFile Objects: fd2.

 -- Function: tarfile.is_tarfile (name)

     Return *note True: 3b0. if _name_ is a tar archive file, that the
     *note tarfile: 171. module can read.

 -- Class: tarfile.TarFileCompat (filename, mode='r',
          compression=TAR_PLAIN)

     Class for limited access to tar archives with a *note zipfile:
     1ab.-like interface.  Please consult the documentation of the *note
     zipfile: 1ab. module for more details.  _compression_ must be one
     of the following constants:

      -- Data: TAR_PLAIN

          Constant for an uncompressed tar archive.

      -- Data: TAR_GZIPPED

          Constant for a *note gzip: e5. compressed tar archive.

     Deprecated since version 2.6: The *note TarFileCompat: fd7. class
     has been removed in Python 3.

 -- Exception: tarfile.TarError

     Base class for all *note tarfile: 171. exceptions.

 -- Exception: tarfile.ReadError

     Is raised when a tar archive is opened, that either cannot be
     handled by the *note tarfile: 171. module or is somehow invalid.

 -- Exception: tarfile.CompressionError

     Is raised when a compression method is not supported or when the
     data cannot be decoded properly.

 -- Exception: tarfile.StreamError

     Is raised for the limitations that are typical for stream-like
     *note TarFile: 267. objects.

 -- Exception: tarfile.ExtractError

     Is raised for _non-fatal_ errors when using *note
     TarFile.extract(): fdd, but only if ‘TarFile.errorlevel’‘== 2’.

 -- Exception: tarfile.HeaderError

     Is raised by *note TarInfo.frombuf(): fdf. if the buffer it gets is
     invalid.

     New in version 2.6.

  Each of the following constants defines a tar archive format that the
*note tarfile: 171. module is able to create.  See section *note
Supported tar formats: fe0. for details.

 -- Data: tarfile.USTAR_FORMAT

     POSIX.1-1988 (ustar) format.

 -- Data: tarfile.GNU_FORMAT

     GNU tar format.

 -- Data: tarfile.PAX_FORMAT

     POSIX.1-2001 (pax) format.

 -- Data: tarfile.DEFAULT_FORMAT

     The default format for creating archives.  This is currently *note
     GNU_FORMAT: fe2.

  The following variables are available on module level:

 -- Data: tarfile.ENCODING

     The default character encoding i.e.  the value from either *note
     sys.getfilesystemencoding(): fe6. or *note
     sys.getdefaultencoding(): fe7.

See also
........

Module *note zipfile: 1ab.

     Documentation of the *note zipfile: 1ab. standard module.

GNU tar manual, Basic Tar Format(2)

     Documentation for tar archive files, including GNU tar extensions.

* Menu:

* TarFile Objects:: 
* TarInfo Objects:: 
* Examples: Examples<3>. 
* Supported tar formats:: 
* Unicode issues:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/tarfile.py

   (2) http://www.gnu.org/software/tar/manual/html_node/Standard.html


File: python.info,  Node: TarFile Objects,  Next: TarInfo Objects,  Up: tarfile --- Read and write tar archive files

5.12.5.1 TarFile Objects
........................

The *note TarFile: 267. object provides an interface to a tar archive.
A tar archive is a sequence of blocks.  An archive member (a stored
file) is made up of a header block followed by data blocks.  It is
possible to store a file in a tar archive several times.  Each archive
member is represented by a *note TarInfo: 265. object, see *note TarInfo
Objects: fe9. for details.

  A *note TarFile: 267. object can be used as a context manager in a
*note with: 1c0. statement.  It will automatically be closed when the
block is completed.  Please note that in the event of an exception an
archive opened for writing will not be finalized; only the internally
used file object will be closed.  See the *note Examples: fd5. section
for a use case.

  New in version 2.7: Added support for the context manager protocol.

 -- Class: tarfile.TarFile (name=None, mode='r', fileobj=None,
          format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False,
          ignore_zeros=False, encoding=ENCODING, errors=None,
          pax_headers=None, debug=0, errorlevel=0)

     All following arguments are optional and can be accessed as
     instance attributes as well.

     _name_ is the pathname of the archive.  It can be omitted if
     _fileobj_ is given.  In this case, the file object’s ‘name’
     attribute is used if it exists.

     _mode_ is either ‘'r'’ to read from an existing archive, ‘'a'’ to
     append data to an existing file or ‘'w'’ to create a new file
     overwriting an existing one.

     If _fileobj_ is given, it is used for reading or writing data.  If
     it can be determined, _mode_ is overridden by _fileobj_’s mode.
     _fileobj_ will be used from position 0.

          Note: _fileobj_ is not closed, when *note TarFile: 267. is
          closed.

     _format_ controls the archive format.  It must be one of the
     constants *note USTAR_FORMAT: fe1, *note GNU_FORMAT: fe2. or *note
     PAX_FORMAT: fe3. that are defined at module level.

     New in version 2.6.

     The _tarinfo_ argument can be used to replace the default *note
     TarInfo: 265. class with a different one.

     New in version 2.6.

     If _dereference_ is *note False: 3b1, add symbolic and hard links
     to the archive.  If it is *note True: 3b0, add the content of the
     target files to the archive.  This has no effect on systems that do
     not support symbolic links.

     If _ignore_zeros_ is *note False: 3b1, treat an empty block as the
     end of the archive.  If it is *note True: 3b0, skip empty (and
     invalid) blocks and try to get as many members as possible.  This
     is only useful for reading concatenated or damaged archives.

     _debug_ can be set from ‘0’ (no debug messages) up to ‘3’ (all
     debug messages).  The messages are written to ‘sys.stderr’.

     If _errorlevel_ is ‘0’, all errors are ignored when using *note
     TarFile.extract(): fdd.  Nevertheless, they appear as error
     messages in the debug output, when debugging is enabled.  If ‘1’,
     all _fatal_ errors are raised as *note OSError: 231. or *note
     IOError: 1fa. exceptions.  If ‘2’, all _non-fatal_ errors are
     raised as *note TarError: fda. exceptions as well.

     The _encoding_ and _errors_ arguments control the way strings are
     converted to unicode objects and vice versa.  The default settings
     will work for most users.  See section *note Unicode issues: fea.
     for in-depth information.

     New in version 2.6.

     The _pax_headers_ argument is an optional dictionary of unicode
     strings which will be added as a pax global header if _format_ is
     *note PAX_FORMAT: fe3.

     New in version 2.6.

 -- Class Method: TarFile.open (...)

     Alternative constructor.  The *note tarfile.open(): fd1. function
     is actually a shortcut to this classmethod.

 -- Method: TarFile.getmember (name)

     Return a *note TarInfo: 265. object for member _name_.  If _name_
     can not be found in the archive, *note KeyError: 205. is raised.

          Note: If a member occurs more than once in the archive, its
          last occurrence is assumed to be the most up-to-date version.

 -- Method: TarFile.getmembers ()

     Return the members of the archive as a list of *note TarInfo: 265.
     objects.  The list has the same order as the members in the
     archive.

 -- Method: TarFile.getnames ()

     Return the members as a list of their names.  It has the same order
     as the list returned by *note getmembers(): fed.

 -- Method: TarFile.list (verbose=True)

     Print a table of contents to ‘sys.stdout’.  If _verbose_ is *note
     False: 3b1, only the names of the members are printed.  If it is
     *note True: 3b0, output similar to that of *ls -l* is produced.

 -- Method: TarFile.next ()

     Return the next member of the archive as a *note TarInfo: 265.
     object, when *note TarFile: 267. is opened for reading.  Return
     *note None: 39a. if there is no more available.

 -- Method: TarFile.extractall (path=".", members=None)

     Extract all members from the archive to the current working
     directory or directory _path_.  If optional _members_ is given, it
     must be a subset of the list returned by *note getmembers(): fed.
     Directory information like owner, modification time and permissions
     are set after all members have been extracted.  This is done to
     work around two problems: A directory’s modification time is reset
     each time a file is created in it.  And, if a directory’s
     permissions do not allow writing, extracting files to it will fail.

          Warning: Never extract archives from untrusted sources without
          prior inspection.  It is possible that files are created
          outside of _path_, e.g.  members that have absolute filenames
          starting with ‘"/"’ or filenames with two dots ‘".."’.

     New in version 2.5.

 -- Method: TarFile.extract (member, path="")

     Extract a member from the archive to the current working directory,
     using its full name.  Its file information is extracted as
     accurately as possible.  _member_ may be a filename or a *note
     TarInfo: 265. object.  You can specify a different directory using
     _path_.

          Note: The *note extract(): fdd. method does not take care of
          several extraction issues.  In most cases you should consider
          using the *note extractall(): ff1. method.

          Warning: See the warning for *note extractall(): ff1.

 -- Method: TarFile.extractfile (member)

     Extract a member from the archive as a file object.  _member_ may
     be a filename or a *note TarInfo: 265. object.  If _member_ is a
     regular file, a file-like object is returned.  If _member_ is a
     link, a file-like object is constructed from the link’s target.  If
     _member_ is none of the above, *note None: 39a. is returned.

          Note: The file-like object is read-only.  It provides the
          methods ‘read()’, *note readline(): 144, ‘readlines()’,
          ‘seek()’, ‘tell()’, and *note close(): ff3, and also supports
          iteration over its lines.

 -- Method: TarFile.add (name, arcname=None, recursive=True,
          exclude=None, filter=None)

     Add the file _name_ to the archive.  _name_ may be any type of file
     (directory, fifo, symbolic link, etc.).  If given, _arcname_
     specifies an alternative name for the file in the archive.
     Directories are added recursively by default.  This can be avoided
     by setting _recursive_ to *note False: 3b1.  If _exclude_ is given
     it must be a function that takes one filename argument and returns
     a boolean value.  Depending on this value the respective file is
     either excluded (*note True: 3b0.) or added (*note False: 3b1.).
     If _filter_ is specified it must be a function that takes a *note
     TarInfo: 265. object argument and returns the changed *note
     TarInfo: 265. object.  If it instead returns *note None: 39a. the
     *note TarInfo: 265. object will be excluded from the archive.  See
     *note Examples: fd5. for an example.

     Changed in version 2.6: Added the _exclude_ parameter.

     Changed in version 2.7: Added the _filter_ parameter.

     Deprecated since version 2.7: The _exclude_ parameter is
     deprecated, please use the _filter_ parameter instead.  For maximum
     portability, _filter_ should be used as a keyword argument rather
     than as a positional argument so that code won’t be affected when
     _exclude_ is ultimately removed.

 -- Method: TarFile.addfile (tarinfo, fileobj=None)

     Add the *note TarInfo: 265. object _tarinfo_ to the archive.  If
     _fileobj_ is given, ‘tarinfo.size’ bytes are read from it and added
     to the archive.  You can create *note TarInfo: 265. objects using
     *note gettarinfo(): ff5.

          Note: On Windows platforms, _fileobj_ should always be opened
          with mode ‘'rb'’ to avoid irritation about the file size.

 -- Method: TarFile.gettarinfo (name=None, arcname=None, fileobj=None)

     Create a *note TarInfo: 265. object for either the file _name_ or
     the file object _fileobj_ (using *note os.fstat(): e12. on its file
     descriptor).  You can modify some of the *note TarInfo: 265.’s
     attributes before you add it using *note addfile(): ff4.  If given,
     _arcname_ specifies an alternative name for the file in the
     archive.

 -- Method: TarFile.close ()

     Close the *note TarFile: 267.  In write mode, two finishing zero
     blocks are appended to the archive.

 -- Attribute: TarFile.posix

     Setting this to *note True: 3b0. is equivalent to setting the *note
     format: 1ef. attribute to *note USTAR_FORMAT: fe1, *note False:
     3b1. is equivalent to *note GNU_FORMAT: fe2.

     Changed in version 2.4: _posix_ defaults to *note False: 3b1.

     Deprecated since version 2.6: Use the *note format: 1ef. attribute
     instead.

 -- Attribute: TarFile.pax_headers

     A dictionary containing key-value pairs of pax global headers.

     New in version 2.6.


File: python.info,  Node: TarInfo Objects,  Next: Examples<3>,  Prev: TarFile Objects,  Up: tarfile --- Read and write tar archive files

5.12.5.2 TarInfo Objects
........................

A *note TarInfo: 265. object represents one member in a *note TarFile:
267.  Aside from storing all required attributes of a file (like file
type, size, time, permissions, owner etc.), it provides some useful
methods to determine its type.  It does _not_ contain the file’s data
itself.

  *note TarInfo: 265. objects are returned by *note TarFile: 267.’s
methods ‘getmember()’, ‘getmembers()’ and ‘gettarinfo()’.

 -- Class: tarfile.TarInfo (name="")

     Create a *note TarInfo: 265. object.

 -- Method: TarInfo.frombuf (buf)

     Create and return a *note TarInfo: 265. object from string buffer
     _buf_.

     New in version 2.6: Raises *note HeaderError: fde. if the buffer is
     invalid..

 -- Method: TarInfo.fromtarfile (tarfile)

     Read the next member from the *note TarFile: 267. object _tarfile_
     and return it as a *note TarInfo: 265. object.

     New in version 2.6.

 -- Method: TarInfo.tobuf (format=DEFAULT_FORMAT, encoding=ENCODING,
          errors='strict')

     Create a string buffer from a *note TarInfo: 265. object.  For
     information on the arguments see the constructor of the *note
     TarFile: 267. class.

     Changed in version 2.6: The arguments were added.

  A ‘TarInfo’ object has the following public data attributes:

 -- Attribute: TarInfo.name

     Name of the archive member.

 -- Attribute: TarInfo.size

     Size in bytes.

 -- Attribute: TarInfo.mtime

     Time of last modification.

 -- Attribute: TarInfo.mode

     Permission bits.

 -- Attribute: TarInfo.type

     File type.  _type_ is usually one of these constants: ‘REGTYPE’,
     ‘AREGTYPE’, ‘LNKTYPE’, ‘SYMTYPE’, ‘DIRTYPE’, ‘FIFOTYPE’,
     ‘CONTTYPE’, ‘CHRTYPE’, ‘BLKTYPE’, ‘GNUTYPE_SPARSE’.  To determine
     the type of a *note TarInfo: 265. object more conveniently, use the
     ‘is*()’ methods below.

 -- Attribute: TarInfo.linkname

     Name of the target file name, which is only present in *note
     TarInfo: 265. objects of type ‘LNKTYPE’ and ‘SYMTYPE’.

 -- Attribute: TarInfo.uid

     User ID of the user who originally stored this member.

 -- Attribute: TarInfo.gid

     Group ID of the user who originally stored this member.

 -- Attribute: TarInfo.uname

     User name.

 -- Attribute: TarInfo.gname

     Group name.

 -- Attribute: TarInfo.pax_headers

     A dictionary containing key-value pairs of an associated pax
     extended header.

     New in version 2.6.

  A *note TarInfo: 265. object also provides some convenient query
methods:

 -- Method: TarInfo.isfile ()

     Return *note True: 3b0. if the ‘Tarinfo’ object is a regular file.

 -- Method: TarInfo.isreg ()

     Same as *note isfile(): 1006.

 -- Method: TarInfo.isdir ()

     Return *note True: 3b0. if it is a directory.

 -- Method: TarInfo.issym ()

     Return *note True: 3b0. if it is a symbolic link.

 -- Method: TarInfo.islnk ()

     Return *note True: 3b0. if it is a hard link.

 -- Method: TarInfo.ischr ()

     Return *note True: 3b0. if it is a character device.

 -- Method: TarInfo.isblk ()

     Return *note True: 3b0. if it is a block device.

 -- Method: TarInfo.isfifo ()

     Return *note True: 3b0. if it is a FIFO.

 -- Method: TarInfo.isdev ()

     Return *note True: 3b0. if it is one of character device, block
     device or FIFO.


File: python.info,  Node: Examples<3>,  Next: Supported tar formats,  Prev: TarInfo Objects,  Up: tarfile --- Read and write tar archive files

5.12.5.3 Examples
.................

How to extract an entire tar archive to the current working directory:

     import tarfile
     tar = tarfile.open("sample.tar.gz")
     tar.extractall()
     tar.close()

  How to extract a subset of a tar archive with *note
TarFile.extractall(): ff1. using a generator function instead of a list:

     import os
     import tarfile

     def py_files(members):
         for tarinfo in members:
             if os.path.splitext(tarinfo.name)[1] == ".py":
                 yield tarinfo

     tar = tarfile.open("sample.tar.gz")
     tar.extractall(members=py_files(tar))
     tar.close()

  How to create an uncompressed tar archive from a list of filenames:

     import tarfile
     tar = tarfile.open("sample.tar", "w")
     for name in ["foo", "bar", "quux"]:
         tar.add(name)
     tar.close()

  The same example using the *note with: 1c0. statement:

     import tarfile
     with tarfile.open("sample.tar", "w") as tar:
         for name in ["foo", "bar", "quux"]:
             tar.add(name)

  How to read a gzip compressed tar archive and display some member
information:

     import tarfile
     tar = tarfile.open("sample.tar.gz", "r:gz")
     for tarinfo in tar:
         print tarinfo.name, "is", tarinfo.size, "bytes in size and is",
         if tarinfo.isreg():
             print "a regular file."
         elif tarinfo.isdir():
             print "a directory."
         else:
             print "something else."
     tar.close()

  How to create an archive and reset the user information using the
_filter_ parameter in *note TarFile.add(): 266.:

     import tarfile
     def reset(tarinfo):
         tarinfo.uid = tarinfo.gid = 0
         tarinfo.uname = tarinfo.gname = "root"
         return tarinfo
     tar = tarfile.open("sample.tar.gz", "w:gz")
     tar.add("foo", filter=reset)
     tar.close()


File: python.info,  Node: Supported tar formats,  Next: Unicode issues,  Prev: Examples<3>,  Up: tarfile --- Read and write tar archive files

5.12.5.4 Supported tar formats
..............................

There are three tar formats that can be created with the *note tarfile:
171. module:

   * The POSIX.1-1988 ustar format (*note USTAR_FORMAT: fe1.).  It
     supports filenames up to a length of at best 256 characters and
     linknames up to 100 characters.  The maximum file size is 8
     gigabytes.  This is an old and limited but widely supported format.

   * The GNU tar format (*note GNU_FORMAT: fe2.).  It supports long
     filenames and linknames, files bigger than 8 gigabytes and sparse
     files.  It is the de facto standard on GNU/Linux systems.  *note
     tarfile: 171. fully supports the GNU tar extensions for long names,
     sparse file support is read-only.

   * The POSIX.1-2001 pax format (*note PAX_FORMAT: fe3.).  It is the
     most flexible format with virtually no limits.  It supports long
     filenames and linknames, large files and stores pathnames in a
     portable way.  However, not all tar implementations today are able
     to handle pax archives properly.

     The _pax_ format is an extension to the existing _ustar_ format.
     It uses extra headers for information that cannot be stored
     otherwise.  There are two flavours of pax headers: Extended headers
     only affect the subsequent file header, global headers are valid
     for the complete archive and affect all following files.  All the
     data in a pax header is encoded in _UTF-8_ for portability reasons.

  There are some more variants of the tar format which can be read, but
not created:

   * The ancient V7 format.  This is the first tar format from Unix
     Seventh Edition, storing only regular files and directories.  Names
     must not be longer than 100 characters, there is no user/group name
     information.  Some archives have miscalculated header checksums in
     case of fields with non-ASCII characters.

   * The SunOS tar extended format.  This format is a variant of the
     POSIX.1-2001 pax format, but is not compatible.


File: python.info,  Node: Unicode issues,  Prev: Supported tar formats,  Up: tarfile --- Read and write tar archive files

5.12.5.5 Unicode issues
.......................

The tar format was originally conceived to make backups on tape drives
with the main focus on preserving file system information.  Nowadays tar
archives are commonly used for file distribution and exchanging archives
over networks.  One problem of the original format (that all other
formats are merely variants of) is that there is no concept of
supporting different character encodings.  For example, an ordinary tar
archive created on a _UTF-8_ system cannot be read correctly on a
_Latin-1_ system if it contains non-ASCII characters.  Names (i.e.
filenames, linknames, user/group names) containing these characters will
appear damaged.  Unfortunately, there is no way to autodetect the
encoding of an archive.

  The pax format was designed to solve this problem.  It stores
non-ASCII names using the universal character encoding _UTF-8_.  When a
pax archive is read, these _UTF-8_ names are converted to the encoding
of the local file system.

  The details of unicode conversion are controlled by the _encoding_ and
_errors_ keyword arguments of the *note TarFile: 267. class.

  The default value for _encoding_ is the local character encoding.  It
is deduced from *note sys.getfilesystemencoding(): fe6. and *note
sys.getdefaultencoding(): fe7.  In read mode, _encoding_ is used
exclusively to convert unicode names from a pax archive to strings in
the local character encoding.  In write mode, the use of _encoding_
depends on the chosen archive format.  In case of *note PAX_FORMAT: fe3,
input names that contain non-ASCII characters need to be decoded before
being stored as _UTF-8_ strings.  The other formats do not make use of
_encoding_ unless unicode objects are used as input names.  These are
converted to 8-bit character strings before they are added to the
archive.

  The _errors_ argument defines how characters are treated that cannot
be converted to or from _encoding_.  Possible values are listed in
section *note Codec Base Classes: 8bf.  In read mode, there is an
additional scheme ‘'utf-8'’ which means that bad characters are replaced
by their _UTF-8_ representation.  This is the default scheme.  In write
mode the default value for _errors_ is ‘'strict'’ to ensure that name
information is not altered unnoticed.


File: python.info,  Node: File Formats,  Next: Cryptographic Services,  Prev: Data Compression and Archiving,  Up: The Python Standard Library

5.13 File Formats
=================

The modules described in this chapter parse various miscellaneous file
formats that aren’t markup languages or are related to e-mail.

* Menu:

* csv: csv --- CSV File Reading and Writing. CSV File Reading and Writing
* ConfigParser: ConfigParser --- Configuration file parser. Configuration file parser
* robotparser: robotparser --- Parser for robots txt. Parser for robots.txt
* netrc: netrc --- netrc file processing. netrc file processing
* xdrlib: xdrlib --- Encode and decode XDR data. Encode and decode XDR data
* plistlib: plistlib --- Generate and parse Mac OS X plist files. Generate and parse Mac OS X .plist files

csv — CSV File Reading and Writing

* Module Contents: Module Contents<2>. 
* Dialects and Formatting Parameters:: 
* Reader Objects:: 
* Writer Objects:: 
* Examples: Examples<4>. 

ConfigParser — Configuration file parser

* RawConfigParser Objects:: 
* ConfigParser Objects:: 
* SafeConfigParser Objects:: 
* Examples: Examples<5>. 

netrc — netrc file processing

* netrc Objects:: 

xdrlib — Encode and decode XDR data

* Packer Objects:: 
* Unpacker Objects:: 
* Exceptions: Exceptions<3>. 

plistlib — Generate and parse Mac OS X .plist files

* Examples: Examples<6>. 


File: python.info,  Node: csv --- CSV File Reading and Writing,  Next: ConfigParser --- Configuration file parser,  Up: File Formats

5.13.1 ‘csv’ — CSV File Reading and Writing
-------------------------------------------

New in version 2.3.

  The so-called CSV (Comma Separated Values) format is the most common
import and export format for spreadsheets and databases.  There is no
"CSV standard", so the format is operationally defined by the many
applications which read and write it.  The lack of a standard means that
subtle differences often exist in the data produced and consumed by
different applications.  These differences can make it annoying to
process CSV files from multiple sources.  Still, while the delimiters
and quoting characters vary, the overall format is similar enough that
it is possible to write a single module which can efficiently manipulate
such data, hiding the details of reading and writing the data from the
programmer.

  The *note csv: 77. module implements classes to read and write tabular
data in CSV format.  It allows programmers to say, "write this data in
the format preferred by Excel," or "read data from this file which was
generated by Excel," without knowing the precise details of the CSV
format used by Excel.  Programmers can also describe the CSV formats
understood by other applications or define their own special-purpose CSV
formats.

  The *note csv: 77. module’s *note reader: 1017. and *note writer: 445.
objects read and write sequences.  Programmers can also read and write
data in dictionary form using the *note DictReader: 1018. and *note
DictWriter: 1019. classes.

     Note: This version of the *note csv: 77. module doesn’t support
     Unicode input.  Also, there are currently some issues regarding
     ASCII NUL characters.  Accordingly, all input should be UTF-8 or
     printable ASCII to be safe; see the examples in section *note
     Examples: 101a.

See also
........

PEP 305(1) - CSV File API

     The Python Enhancement Proposal which proposed this addition to
     Python.

* Menu:

* Module Contents: Module Contents<2>. 
* Dialects and Formatting Parameters:: 
* Reader Objects:: 
* Writer Objects:: 
* Examples: Examples<4>. 

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0305


File: python.info,  Node: Module Contents<2>,  Next: Dialects and Formatting Parameters,  Up: csv --- CSV File Reading and Writing

5.13.1.1 Module Contents
........................

The *note csv: 77. module defines the following functions:

 -- Function: csv.reader (csvfile, dialect='excel', **fmtparams)

     Return a reader object which will iterate over lines in the given
     _csvfile_.  _csvfile_ can be any object which supports the *note
     iterator: 87f. protocol and returns a string each time its ‘next()’
     method is called — file objects and list objects are both suitable.
     If _csvfile_ is a file object, it must be opened with the ’b’ flag
     on platforms where that makes a difference.  An optional _dialect_
     parameter can be given which is used to define a set of parameters
     specific to a particular CSV dialect.  It may be an instance of a
     subclass of the *note Dialect: 101d. class or one of the strings
     returned by the *note list_dialects(): 101e. function.  The other
     optional _fmtparams_ keyword arguments can be given to override
     individual formatting parameters in the current dialect.  For full
     details about the dialect and formatting parameters, see section
     *note Dialects and Formatting Parameters: 101f.

     Each row read from the csv file is returned as a list of strings.
     No automatic data type conversion is performed.

     A short usage example:

          >>> import csv
          >>> with open('eggs.csv', 'rb') as csvfile:
          ...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
          ...     for row in spamreader:
          ...         print ', '.join(row)
          Spam, Spam, Spam, Spam, Spam, Baked Beans
          Spam, Lovely Spam, Wonderful Spam

     Changed in version 2.5: The parser is now stricter with respect to
     multi-line quoted fields.  Previously, if a line ended within a
     quoted field without a terminating newline character, a newline
     would be inserted into the returned field.  This behavior caused
     problems when reading files which contained carriage return
     characters within fields.  The behavior was changed to return the
     field without inserting newlines.  As a consequence, if newlines
     embedded within fields are important, the input should be split
     into lines in a manner which preserves the newline characters.

 -- Function: csv.writer (csvfile, dialect='excel', **fmtparams)

     Return a writer object responsible for converting the user’s data
     into delimited strings on the given file-like object.  _csvfile_
     can be any object with a ‘write()’ method.  If _csvfile_ is a file
     object, it must be opened with the ’b’ flag on platforms where that
     makes a difference.  An optional _dialect_ parameter can be given
     which is used to define a set of parameters specific to a
     particular CSV dialect.  It may be an instance of a subclass of the
     *note Dialect: 101d. class or one of the strings returned by the
     *note list_dialects(): 101e. function.  The other optional
     _fmtparams_ keyword arguments can be given to override individual
     formatting parameters in the current dialect.  For full details
     about the dialect and formatting parameters, see section *note
     Dialects and Formatting Parameters: 101f.  To make it as easy as
     possible to interface with modules which implement the DB API, the
     value *note None: 39a. is written as the empty string.  While this
     isn’t a reversible transformation, it makes it easier to dump SQL
     NULL data values to CSV files without preprocessing the data
     returned from a ‘cursor.fetch*’ call.  All other non-string data
     are stringified with *note str(): 1ea. before being written.

     A short usage example:

          import csv
          with open('eggs.csv', 'wb') as csvfile:
              spamwriter = csv.writer(csvfile, delimiter=' ',
                                      quotechar='|', quoting=csv.QUOTE_MINIMAL)
              spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
              spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])

 -- Function: csv.register_dialect (name[, dialect], **fmtparams)

     Associate _dialect_ with _name_.  _name_ must be a string or
     Unicode object.  The dialect can be specified either by passing a
     sub-class of *note Dialect: 101d, or by _fmtparams_ keyword
     arguments, or both, with keyword arguments overriding parameters of
     the dialect.  For full details about the dialect and formatting
     parameters, see section *note Dialects and Formatting Parameters:
     101f.

 -- Function: csv.unregister_dialect (name)

     Delete the dialect associated with _name_ from the dialect
     registry.  An *note Error: 1022. is raised if _name_ is not a
     registered dialect name.

 -- Function: csv.get_dialect (name)

     Return the dialect associated with _name_.  An *note Error: 1022.
     is raised if _name_ is not a registered dialect name.

     Changed in version 2.5: This function now returns an immutable
     *note Dialect: 101d.  Previously an instance of the requested
     dialect was returned.  Users could modify the underlying class,
     changing the behavior of active readers and writers.

 -- Function: csv.list_dialects ()

     Return the names of all registered dialects.

 -- Function: csv.field_size_limit ([new_limit])

     Returns the current maximum field size allowed by the parser.  If
     _new_limit_ is given, this becomes the new limit.

     New in version 2.5.

  The *note csv: 77. module defines the following classes:

 -- Class: csv.DictReader (csvfile, fieldnames=None, restkey=None,
          restval=None, dialect='excel', *args, **kwds)

     Create an object which operates like a regular reader but maps the
     information read into a dict whose keys are given by the optional
     _fieldnames_ parameter.  The _fieldnames_ parameter is a *note
     sequence: b5b. whose elements are associated with the fields of the
     input data in order.  These elements become the keys of the
     resulting dictionary.  If the _fieldnames_ parameter is omitted,
     the values in the first row of the _csvfile_ will be used as the
     fieldnames.  If the row read has more fields than the fieldnames
     sequence, the remaining data is added as a sequence keyed by the
     value of _restkey_.  If the row read has fewer fields than the
     fieldnames sequence, the remaining keys take the value of the
     optional _restval_ parameter.  Any other optional or keyword
     arguments are passed to the underlying *note reader: 1017.
     instance.

 -- Class: csv.DictWriter (csvfile, fieldnames, restval='',
          extrasaction='raise', dialect='excel', *args, **kwds)

     Create an object which operates like a regular writer but maps
     dictionaries onto output rows.  The _fieldnames_ parameter is a
     *note sequence: b5b. of keys that identify the order in which
     values in the dictionary passed to the ‘writerow()’ method are
     written to the _csvfile_.  The optional _restval_ parameter
     specifies the value to be written if the dictionary is missing a
     key in _fieldnames_.  If the dictionary passed to the ‘writerow()’
     method contains a key not found in _fieldnames_, the optional
     _extrasaction_ parameter indicates what action to take.  If it is
     set to ‘'raise'’ a *note ValueError: 236. is raised.  If it is set
     to ‘'ignore'’, extra values in the dictionary are ignored.  Any
     other optional or keyword arguments are passed to the underlying
     *note writer: 445. instance.

     Note that unlike the *note DictReader: 1018. class, the
     _fieldnames_ parameter of the *note DictWriter: 1019. is not
     optional.  Since Python’s *note dict: 305. objects are not ordered,
     there is not enough information available to deduce the order in
     which the row should be written to the _csvfile_.

 -- Class: csv.Dialect

     The *note Dialect: 101d. class is a container class relied on
     primarily for its attributes, which are used to define the
     parameters for a specific *note reader: 1017. or *note writer: 445.
     instance.

 -- Class: csv.excel

     The *note excel: 1025. class defines the usual properties of an
     Excel-generated CSV file.  It is registered with the dialect name
     ‘'excel'’.

 -- Class: csv.excel_tab

     The *note excel_tab: 1026. class defines the usual properties of an
     Excel-generated TAB-delimited file.  It is registered with the
     dialect name ‘'excel-tab'’.

 -- Class: csv.Sniffer

     The *note Sniffer: 1027. class is used to deduce the format of a
     CSV file.

     The *note Sniffer: 1027. class provides two methods:

      -- Method: sniff (sample, delimiters=None)

          Analyze the given _sample_ and return a *note Dialect: 101d.
          subclass reflecting the parameters found.  If the optional
          _delimiters_ parameter is given, it is interpreted as a string
          containing possible valid delimiter characters.

      -- Method: has_header (sample)

          Analyze the sample text (presumed to be in CSV format) and
          return *note True: 3b0. if the first row appears to be a
          series of column headers.

  An example for *note Sniffer: 1027. use:

     with open('example.csv', 'rb') as csvfile:
         dialect = csv.Sniffer().sniff(csvfile.read(1024))
         csvfile.seek(0)
         reader = csv.reader(csvfile, dialect)
         # ... process CSV file contents here ...

  The *note csv: 77. module defines the following constants:

 -- Data: csv.QUOTE_ALL

     Instructs *note writer: 445. objects to quote all fields.

 -- Data: csv.QUOTE_MINIMAL

     Instructs *note writer: 445. objects to only quote those fields
     which contain special characters such as _delimiter_, _quotechar_
     or any of the characters in _lineterminator_.

 -- Data: csv.QUOTE_NONNUMERIC

     Instructs *note writer: 445. objects to quote all non-numeric
     fields.

     Instructs the reader to convert all non-quoted fields to type
     _float_.

 -- Data: csv.QUOTE_NONE

     Instructs *note writer: 445. objects to never quote fields.  When
     the current _delimiter_ occurs in output data it is preceded by the
     current _escapechar_ character.  If _escapechar_ is not set, the
     writer will raise *note Error: 1022. if any characters that require
     escaping are encountered.

     Instructs *note reader: 1017. to perform no special processing of
     quote characters.

  The *note csv: 77. module defines the following exception:

 -- Exception: csv.Error

     Raised by any of the functions when an error is detected.


File: python.info,  Node: Dialects and Formatting Parameters,  Next: Reader Objects,  Prev: Module Contents<2>,  Up: csv --- CSV File Reading and Writing

5.13.1.2 Dialects and Formatting Parameters
...........................................

To make it easier to specify the format of input and output records,
specific formatting parameters are grouped together into dialects.  A
dialect is a subclass of the *note Dialect: 101d. class having a set of
specific methods and a single ‘validate()’ method.  When creating *note
reader: 1017. or *note writer: 445. objects, the programmer can specify
a string or a subclass of the *note Dialect: 101d. class as the dialect
parameter.  In addition to, or instead of, the _dialect_ parameter, the
programmer can also specify individual formatting parameters, which have
the same names as the attributes defined below for the *note Dialect:
101d. class.

  Dialects support the following attributes:

 -- Attribute: Dialect.delimiter

     A one-character string used to separate fields.  It defaults to
     ‘','’.

 -- Attribute: Dialect.doublequote

     Controls how instances of _quotechar_ appearing inside a field
     should be themselves be quoted.  When *note True: 3b0, the
     character is doubled.  When *note False: 3b1, the _escapechar_ is
     used as a prefix to the _quotechar_.  It defaults to *note True:
     3b0.

     On output, if _doublequote_ is *note False: 3b1. and no
     _escapechar_ is set, *note Error: 1022. is raised if a _quotechar_
     is found in a field.

 -- Attribute: Dialect.escapechar

     A one-character string used by the writer to escape the _delimiter_
     if _quoting_ is set to *note QUOTE_NONE: 102d. and the _quotechar_
     if _doublequote_ is *note False: 3b1.  On reading, the _escapechar_
     removes any special meaning from the following character.  It
     defaults to *note None: 39a, which disables escaping.

 -- Attribute: Dialect.lineterminator

     The string used to terminate lines produced by the *note writer:
     445.  It defaults to ‘'\r\n'’.

          Note: The *note reader: 1017. is hard-coded to recognise
          either ‘'\r'’ or ‘'\n'’ as end-of-line, and ignores
          _lineterminator_.  This behavior may change in the future.

 -- Attribute: Dialect.quotechar

     A one-character string used to quote fields containing special
     characters, such as the _delimiter_ or _quotechar_, or which
     contain new-line characters.  It defaults to ‘'"'’.

 -- Attribute: Dialect.quoting

     Controls when quotes should be generated by the writer and
     recognised by the reader.  It can take on any of the ‘QUOTE_*’
     constants (see section *note Module Contents: 101c.) and defaults
     to *note QUOTE_MINIMAL: 102b.

 -- Attribute: Dialect.skipinitialspace

     When *note True: 3b0, whitespace immediately following the
     _delimiter_ is ignored.  The default is *note False: 3b1.

 -- Attribute: Dialect.strict

     When ‘True’, raise exception *note Error: 1022. on bad CSV input.
     The default is ‘False’.


File: python.info,  Node: Reader Objects,  Next: Writer Objects,  Prev: Dialects and Formatting Parameters,  Up: csv --- CSV File Reading and Writing

5.13.1.3 Reader Objects
.......................

Reader objects (*note DictReader: 1018. instances and objects returned
by the *note reader(): 1017. function) have the following public
methods:

 -- Method: csvreader.next ()

     Return the next row of the reader’s iterable object as a list,
     parsed according to the current dialect.

  Reader objects have the following public attributes:

 -- Attribute: csvreader.dialect

     A read-only description of the dialect in use by the parser.

 -- Attribute: csvreader.line_num

     The number of lines read from the source iterator.  This is not the
     same as the number of records returned, as records can span
     multiple lines.

     New in version 2.5.

  DictReader objects have the following public attribute:

 -- Attribute: csvreader.fieldnames

     If not passed as a parameter when creating the object, this
     attribute is initialized upon first access or when the first record
     is read from the file.

     Changed in version 2.6.


File: python.info,  Node: Writer Objects,  Next: Examples<4>,  Prev: Reader Objects,  Up: csv --- CSV File Reading and Writing

5.13.1.4 Writer Objects
.......................

‘Writer’ objects (*note DictWriter: 1019. instances and objects returned
by the *note writer(): 445. function) have the following public methods.
A _row_ must be a sequence of strings or numbers for ‘Writer’ objects
and a dictionary mapping fieldnames to strings or numbers (by passing
them through *note str(): 1ea. first) for *note DictWriter: 1019.
objects.  Note that complex numbers are written out surrounded by
parens.  This may cause some problems for other programs which read CSV
files (assuming they support complex numbers at all).

 -- Method: csvwriter.writerow (row)

     Write the _row_ parameter to the writer’s file object, formatted
     according to the current dialect.

 -- Method: csvwriter.writerows (rows)

     Write all the _rows_ parameters (a list of _row_ objects as
     described above) to the writer’s file object, formatted according
     to the current dialect.

  Writer objects have the following public attribute:

 -- Attribute: csvwriter.dialect

     A read-only description of the dialect in use by the writer.

  DictWriter objects have the following public method:

 -- Method: DictWriter.writeheader ()

     Write a row with the field names (as specified in the constructor).

     New in version 2.7.


File: python.info,  Node: Examples<4>,  Prev: Writer Objects,  Up: csv --- CSV File Reading and Writing

5.13.1.5 Examples
.................

The simplest example of reading a CSV file:

     import csv
     with open('some.csv', 'rb') as f:
         reader = csv.reader(f)
         for row in reader:
             print row

  Reading a file with an alternate format:

     import csv
     with open('passwd', 'rb') as f:
         reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)
         for row in reader:
             print row

  The corresponding simplest possible writing example is:

     import csv
     with open('some.csv', 'wb') as f:
         writer = csv.writer(f)
         writer.writerows(someiterable)

  Registering a new dialect:

     import csv
     csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)
     with open('passwd', 'rb') as f:
         reader = csv.reader(f, 'unixpwd')

  A slightly more advanced use of the reader — catching and reporting
errors:

     import csv, sys
     filename = 'some.csv'
     with open(filename, 'rb') as f:
         reader = csv.reader(f)
         try:
             for row in reader:
                 print row
         except csv.Error as e:
             sys.exit('file %s, line %d: %s' % (filename, reader.line_num, e))

  And while the module doesn’t directly support parsing strings, it can
easily be done:

     import csv
     for row in csv.reader(['one,two,three']):
         print row

  The *note csv: 77. module doesn’t directly support reading and writing
Unicode, but it is 8-bit-clean save for some problems with ASCII NUL
characters.  So you can write functions or classes that handle the
encoding and decoding for you as long as you avoid encodings like UTF-16
that use NULs.  UTF-8 is recommended.

  ‘unicode_csv_reader()’ below is a *note generator: 5dc. that wraps
*note csv.reader: 1017. to handle Unicode CSV data (a list of Unicode
strings).  ‘utf_8_encoder()’ is a *note generator: 5dc. that encodes the
Unicode strings as UTF-8, one string (or row) at a time.  The encoded
strings are parsed by the CSV reader, and ‘unicode_csv_reader()’ decodes
the UTF-8-encoded cells back into Unicode:

     import csv

     def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):
         # csv.py doesn't do Unicode; encode temporarily as UTF-8:
         csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),
                                 dialect=dialect, **kwargs)
         for row in csv_reader:
             # decode UTF-8 back to Unicode, cell by cell:
             yield [unicode(cell, 'utf-8') for cell in row]

     def utf_8_encoder(unicode_csv_data):
         for line in unicode_csv_data:
             yield line.encode('utf-8')

  For all other encodings the following ‘UnicodeReader’ and
‘UnicodeWriter’ classes can be used.  They take an additional _encoding_
parameter in their constructor and make sure that the data passes the
real reader or writer encoded as UTF-8:

     import csv, codecs, cStringIO

     class UTF8Recoder:
         """
         Iterator that reads an encoded stream and reencodes the input to UTF-8
         """
         def __init__(self, f, encoding):
             self.reader = codecs.getreader(encoding)(f)

         def __iter__(self):
             return self

         def next(self):
             return self.reader.next().encode("utf-8")

     class UnicodeReader:
         """
         A CSV reader which will iterate over lines in the CSV file "f",
         which is encoded in the given encoding.
         """

         def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
             f = UTF8Recoder(f, encoding)
             self.reader = csv.reader(f, dialect=dialect, **kwds)

         def next(self):
             row = self.reader.next()
             return [unicode(s, "utf-8") for s in row]

         def __iter__(self):
             return self

     class UnicodeWriter:
         """
         A CSV writer which will write rows to CSV file "f",
         which is encoded in the given encoding.
         """

         def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
             # Redirect output to a queue
             self.queue = cStringIO.StringIO()
             self.writer = csv.writer(self.queue, dialect=dialect, **kwds)
             self.stream = f
             self.encoder = codecs.getincrementalencoder(encoding)()

         def writerow(self, row):
             self.writer.writerow([s.encode("utf-8") for s in row])
             # Fetch UTF-8 output from the queue ...
             data = self.queue.getvalue()
             data = data.decode("utf-8")
             # ... and reencode it into the target encoding
             data = self.encoder.encode(data)
             # write to the target stream
             self.stream.write(data)
             # empty queue
             self.queue.truncate(0)

         def writerows(self, rows):
             for row in rows:
                 self.writerow(row)


File: python.info,  Node: ConfigParser --- Configuration file parser,  Next: robotparser --- Parser for robots txt,  Prev: csv --- CSV File Reading and Writing,  Up: File Formats

5.13.2 ‘ConfigParser’ — Configuration file parser
-------------------------------------------------

     Note: The *note ConfigParser: 6d. module has been renamed to
     ‘configparser’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  This module defines the class *note ConfigParser: 6d.  The *note
ConfigParser: 6d. class implements a basic configuration file parser
language which provides a structure similar to what you would find on
Microsoft Windows INI files.  You can use this to write Python programs
which can be customized by end users easily.

     Note: This library does _not_ interpret or write the value-type
     prefixes used in the Windows Registry extended version of INI
     syntax.

See also
........

Module *note shlex: 153.

     Support for a creating Unix shell-like mini-languages which can be
     used as an alternate format for application configuration files.

Module *note json: fc.

     The json module implements a subset of JavaScript syntax which can
     also be used for this purpose.

  The configuration file consists of sections, led by a ‘[section]’
header and followed by ‘name: value’ entries, with continuations in the
style of RFC 822(1) (see section 3.1.1, "LONG HEADER FIELDS");
‘name=value’ is also accepted.  Note that leading whitespace is removed
from values.  The optional values can contain format strings which refer
to other values in the same section, or values in a special ‘DEFAULT’
section.  Additional defaults can be provided on initialization and
retrieval.  Lines beginning with ‘'#'’ or ‘';'’ are ignored and may be
used to provide comments.

  Configuration files may include comments, prefixed by specific
characters (‘#’ and ‘;’).  Comments may appear on their own in an
otherwise empty line, or may be entered in lines holding values or
section names.  In the latter case, they need to be preceded by a
whitespace character to be recognized as a comment.  (For backwards
compatibility, only ‘;’ starts an inline comment, while ‘#’ does not.)

  On top of the core functionality, *note SafeConfigParser: 1044.
supports interpolation.  This means values can contain format strings
which refer to other values in the same section, or values in a special
‘DEFAULT’ section.  Additional defaults can be provided on
initialization.

  For example:

     [My Section]
     foodir: %(dir)s/whatever
     dir=frob
     long: this value continues
        in the next line

  would resolve the ‘%(dir)s’ to the value of ‘dir’ (‘frob’ in this
case).  All reference expansions are done on demand.

  Default values can be specified by passing them into the *note
ConfigParser: 6d. constructor as a dictionary.  Additional defaults may
be passed into the ‘get()’ method which will override all others.

  Sections are normally stored in a built-in dictionary.  An alternative
dictionary type can be passed to the *note ConfigParser: 6d.
constructor.  For example, if a dictionary type is passed that sorts its
keys, the sections will be sorted on write-back, as will be the keys
within each section.

 -- Class: ConfigParser.RawConfigParser ([defaults[, dict_type[,
          allow_no_value]]])

     The basic configuration object.  When _defaults_ is given, it is
     initialized into the dictionary of intrinsic defaults.  When
     _dict_type_ is given, it will be used to create the dictionary
     objects for the list of sections, for the options within a section,
     and for the default values.  When _allow_no_value_ is true
     (default: ‘False’), options without values are accepted; the value
     presented for these is ‘None’.

     This class does not support the magical interpolation behavior.

     All option names are passed through the *note optionxform(): 1046.
     method.  Its default implementation converts option names to lower
     case.

     New in version 2.3.

     Changed in version 2.6: _dict_type_ was added.

     Changed in version 2.7: The default _dict_type_ is *note
     collections.OrderedDict: 1b5.  _allow_no_value_ was added.

 -- Class: ConfigParser.ConfigParser ([defaults[, dict_type[,
          allow_no_value]]])

     Derived class of *note RawConfigParser: 1045. that implements the
     magical interpolation feature and adds optional arguments to the
     *note get(): 1048. and *note items(): 1049. methods.  The values in
     _defaults_ must be appropriate for the ‘%()s’ string interpolation.
     Note that ___name___ is an intrinsic default; its value is the
     section name, and will override any value provided in _defaults_.

     All option names used in interpolation will be passed through the
     ‘optionxform()’ method just like any other option name reference.
     Using the default implementation of ‘optionxform()’, the values
     ‘foo %(bar)s’ and ‘foo %(BAR)s’ are equivalent.

     New in version 2.3.

     Changed in version 2.6: _dict_type_ was added.

     Changed in version 2.7: The default _dict_type_ is *note
     collections.OrderedDict: 1b5.  _allow_no_value_ was added.

 -- Class: ConfigParser.SafeConfigParser ([defaults[, dict_type[,
          allow_no_value]]])

     Derived class of *note ConfigParser: 6d. that implements a
     more-sane variant of the magical interpolation feature.  This
     implementation is more predictable as well.  New applications
     should prefer this version if they don’t need to be compatible with
     older versions of Python.

     New in version 2.3.

     Changed in version 2.6: _dict_type_ was added.

     Changed in version 2.7: The default _dict_type_ is *note
     collections.OrderedDict: 1b5.  _allow_no_value_ was added.

 -- Exception: ConfigParser.Error

     Base class for all other configparser exceptions.

 -- Exception: ConfigParser.NoSectionError

     Exception raised when a specified section is not found.

 -- Exception: ConfigParser.DuplicateSectionError

     Exception raised if ‘add_section()’ is called with the name of a
     section that is already present.

 -- Exception: ConfigParser.NoOptionError

     Exception raised when a specified option is not found in the
     specified section.

 -- Exception: ConfigParser.InterpolationError

     Base class for exceptions raised when problems occur performing
     string interpolation.

 -- Exception: ConfigParser.InterpolationDepthError

     Exception raised when string interpolation cannot be completed
     because the number of iterations exceeds *note
     MAX_INTERPOLATION_DEPTH: 1050.  Subclass of *note
     InterpolationError: 104e.

 -- Exception: ConfigParser.InterpolationMissingOptionError

     Exception raised when an option referenced from a value does not
     exist.  Subclass of *note InterpolationError: 104e.

     New in version 2.3.

 -- Exception: ConfigParser.InterpolationSyntaxError

     Exception raised when the source text into which substitutions are
     made does not conform to the required syntax.  Subclass of *note
     InterpolationError: 104e.

     New in version 2.3.

 -- Exception: ConfigParser.MissingSectionHeaderError

     Exception raised when attempting to parse a file which has no
     section headers.

 -- Exception: ConfigParser.ParsingError

     Exception raised when errors occur attempting to parse a file.

 -- Data: ConfigParser.MAX_INTERPOLATION_DEPTH

     The maximum depth for recursive interpolation for ‘get()’ when the
     _raw_ parameter is false.  This is relevant only for the *note
     ConfigParser: 6d. class.

See also
........

Module *note shlex: 153.

     Support for a creating Unix shell-like mini-languages which can be
     used as an alternate format for application configuration files.

* Menu:

* RawConfigParser Objects:: 
* ConfigParser Objects:: 
* SafeConfigParser Objects:: 
* Examples: Examples<5>. 

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: RawConfigParser Objects,  Next: ConfigParser Objects,  Up: ConfigParser --- Configuration file parser

5.13.2.1 RawConfigParser Objects
................................

*note RawConfigParser: 1045. instances have the following methods:

 -- Method: RawConfigParser.defaults ()

     Return a dictionary containing the instance-wide defaults.

 -- Method: RawConfigParser.sections ()

     Return a list of the sections available; ‘DEFAULT’ is not included
     in the list.

 -- Method: RawConfigParser.add_section (section)

     Add a section named _section_ to the instance.  If a section by the
     given name already exists, *note DuplicateSectionError: 104c. is
     raised.  If the name ‘DEFAULT’ (or any of it’s case-insensitive
     variants) is passed, *note ValueError: 236. is raised.

 -- Method: RawConfigParser.has_section (section)

     Indicates whether the named section is present in the
     configuration.  The ‘DEFAULT’ section is not acknowledged.

 -- Method: RawConfigParser.options (section)

     Returns a list of options available in the specified _section_.

 -- Method: RawConfigParser.has_option (section, option)

     If the given section exists, and contains the given option, return
     *note True: 3b0.; otherwise return *note False: 3b1.

     New in version 1.6.

 -- Method: RawConfigParser.read (filenames)

     Attempt to read and parse a list of filenames, returning a list of
     filenames which were successfully parsed.  If _filenames_ is a
     string or Unicode string, it is treated as a single filename.  If a
     file named in _filenames_ cannot be opened, that file will be
     ignored.  This is designed so that you can specify a list of
     potential configuration file locations (for example, the current
     directory, the user’s home directory, and some system-wide
     directory), and all existing configuration files in the list will
     be read.  If none of the named files exist, the *note ConfigParser:
     6d. instance will contain an empty dataset.  An application which
     requires initial values to be loaded from a file should load the
     required file or files using *note readfp(): 105e. before calling
     *note read(): 105d. for any optional files:

          import ConfigParser, os

          config = ConfigParser.ConfigParser()
          config.readfp(open('defaults.cfg'))
          config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')])

     Changed in version 2.4: Returns list of successfully parsed
     filenames.

 -- Method: RawConfigParser.readfp (fp[, filename])

     Read and parse configuration data from the file or file-like object
     in _fp_ (only the *note readline(): 144. method is used).  If
     _filename_ is omitted and _fp_ has a ‘name’ attribute, that is used
     for _filename_; the default is ‘<???>’.

 -- Method: RawConfigParser.get (section, option)

     Get an _option_ value for the named _section_.

 -- Method: RawConfigParser.getint (section, option)

     A convenience method which coerces the _option_ in the specified
     _section_ to an integer.

 -- Method: RawConfigParser.getfloat (section, option)

     A convenience method which coerces the _option_ in the specified
     _section_ to a floating point number.

 -- Method: RawConfigParser.getboolean (section, option)

     A convenience method which coerces the _option_ in the specified
     _section_ to a Boolean value.  Note that the accepted values for
     the option are ‘"1"’, ‘"yes"’, ‘"true"’, and ‘"on"’, which cause
     this method to return ‘True’, and ‘"0"’, ‘"no"’, ‘"false"’, and
     ‘"off"’, which cause it to return ‘False’.  These string values are
     checked in a case-insensitive manner.  Any other value will cause
     it to raise *note ValueError: 236.

 -- Method: RawConfigParser.items (section)

     Return a list of ‘(name, value)’ pairs for each option in the given
     _section_.

 -- Method: RawConfigParser.set (section, option, value)

     If the given section exists, set the given option to the specified
     value; otherwise raise *note NoSectionError: 104b.  While it is
     possible to use *note RawConfigParser: 1045. (or *note
     ConfigParser: 6d. with _raw_ parameters set to true) for _internal_
     storage of non-string values, full functionality (including
     interpolation and output to files) can only be achieved using
     string values.

     New in version 1.6.

 -- Method: RawConfigParser.write (fileobject)

     Write a representation of the configuration to the specified file
     object.  This representation can be parsed by a future *note
     read(): 105d. call.

     New in version 1.6.

 -- Method: RawConfigParser.remove_option (section, option)

     Remove the specified _option_ from the specified _section_.  If the
     section does not exist, raise *note NoSectionError: 104b.  If the
     option existed to be removed, return *note True: 3b0.; otherwise
     return *note False: 3b1.

     New in version 1.6.

 -- Method: RawConfigParser.remove_section (section)

     Remove the specified _section_ from the configuration.  If the
     section in fact existed, return ‘True’.  Otherwise return ‘False’.

 -- Method: RawConfigParser.optionxform (option)

     Transforms the option name _option_ as found in an input file or as
     passed in by client code to the form that should be used in the
     internal structures.  The default implementation returns a
     lower-case version of _option_; subclasses may override this or
     client code can set an attribute of this name on instances to
     affect this behavior.

     You don’t necessarily need to subclass a ConfigParser to use this
     method, you can also re-set it on an instance, to a function that
     takes a string argument.  Setting it to ‘str’, for example, would
     make option names case sensitive:

          cfgparser = ConfigParser()
          ...
          cfgparser.optionxform = str

     Note that when reading configuration files, whitespace around the
     option names are stripped before *note optionxform(): 1046. is
     called.


File: python.info,  Node: ConfigParser Objects,  Next: SafeConfigParser Objects,  Prev: RawConfigParser Objects,  Up: ConfigParser --- Configuration file parser

5.13.2.2 ConfigParser Objects
.............................

The *note ConfigParser: 6d. class extends some methods of the *note
RawConfigParser: 1045. interface, adding some optional arguments.

 -- Method: ConfigParser.get (section, option[, raw[, vars]])

     Get an _option_ value for the named _section_.  If _vars_ is
     provided, it must be a dictionary.  The _option_ is looked up in
     _vars_ (if provided), _section_, and in _defaults_ in that order.

     All the ‘'%'’ interpolations are expanded in the return values,
     unless the _raw_ argument is true.  Values for interpolation keys
     are looked up in the same manner as the option.

 -- Method: ConfigParser.items (section[, raw[, vars]])

     Return a list of ‘(name, value)’ pairs for each option in the given
     _section_.  Optional arguments have the same meaning as for the
     *note get(): 1048. method.

     New in version 2.3.


File: python.info,  Node: SafeConfigParser Objects,  Next: Examples<5>,  Prev: ConfigParser Objects,  Up: ConfigParser --- Configuration file parser

5.13.2.3 SafeConfigParser Objects
.................................

The *note SafeConfigParser: 1044. class implements the same extended
interface as *note ConfigParser: 6d, with the following addition:

 -- Method: SafeConfigParser.set (section, option, value)

     If the given section exists, set the given option to the specified
     value; otherwise raise *note NoSectionError: 104b.  _value_ must be
     a string (*note str: 1ea. or *note unicode: 1f5.); if not, *note
     TypeError: 218. is raised.

     New in version 2.4.


File: python.info,  Node: Examples<5>,  Prev: SafeConfigParser Objects,  Up: ConfigParser --- Configuration file parser

5.13.2.4 Examples
.................

An example of writing to a configuration file:

     import ConfigParser

     config = ConfigParser.RawConfigParser()

     # When adding sections or items, add them in the reverse order of
     # how you want them to be displayed in the actual file.
     # In addition, please note that using RawConfigParser's and the raw
     # mode of ConfigParser's respective set functions, you can assign
     # non-string values to keys internally, but will receive an error
     # when attempting to write to a file or when you get it in non-raw
     # mode. SafeConfigParser does not allow such assignments to take place.
     config.add_section('Section1')
     config.set('Section1', 'an_int', '15')
     config.set('Section1', 'a_bool', 'true')
     config.set('Section1', 'a_float', '3.1415')
     config.set('Section1', 'baz', 'fun')
     config.set('Section1', 'bar', 'Python')
     config.set('Section1', 'foo', '%(bar)s is %(baz)s!')

     # Writing our configuration file to 'example.cfg'
     with open('example.cfg', 'wb') as configfile:
         config.write(configfile)

  An example of reading the configuration file again:

     import ConfigParser

     config = ConfigParser.RawConfigParser()
     config.read('example.cfg')

     # getfloat() raises an exception if the value is not a float
     # getint() and getboolean() also do this for their respective types
     a_float = config.getfloat('Section1', 'a_float')
     an_int = config.getint('Section1', 'an_int')
     print a_float + an_int

     # Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'.
     # This is because we are using a RawConfigParser().
     if config.getboolean('Section1', 'a_bool'):
         print config.get('Section1', 'foo')

  To get interpolation, you will need to use a *note ConfigParser: 6d.
or *note SafeConfigParser: 1044.:

     import ConfigParser

     config = ConfigParser.ConfigParser()
     config.read('example.cfg')

     # Set the third, optional argument of get to 1 if you wish to use raw mode.
     print config.get('Section1', 'foo', 0) # -> "Python is fun!"
     print config.get('Section1', 'foo', 1) # -> "%(bar)s is %(baz)s!"

     # The optional fourth argument is a dict with members that will take
     # precedence in interpolation.
     print config.get('Section1', 'foo', 0, {'bar': 'Documentation',
                                             'baz': 'evil'})

  Defaults are available in all three types of ConfigParsers.  They are
used in interpolation if an option used is not defined elsewhere.

     import ConfigParser

     # New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each
     config = ConfigParser.SafeConfigParser({'bar': 'Life', 'baz': 'hard'})
     config.read('example.cfg')

     print config.get('Section1', 'foo') # -> "Python is fun!"
     config.remove_option('Section1', 'bar')
     config.remove_option('Section1', 'baz')
     print config.get('Section1', 'foo') # -> "Life is hard!"

  The function ‘opt_move’ below can be used to move options between
sections:

     def opt_move(config, section1, section2, option):
         try:
             config.set(section2, option, config.get(section1, option, 1))
         except ConfigParser.NoSectionError:
             # Create non-existent section
             config.add_section(section2)
             opt_move(config, section1, section2, option)
         else:
             config.remove_option(section1, option)

  Some configuration files are known to include settings without values,
but which otherwise conform to the syntax supported by *note
ConfigParser: 6d.  The _allow_no_value_ parameter to the constructor can
be used to indicate that such values should be accepted:

     >>> import ConfigParser
     >>> import io

     >>> sample_config = """
     ... [mysqld]
     ... user = mysql
     ... pid-file = /var/run/mysqld/mysqld.pid
     ... skip-external-locking
     ... old_passwords = 1
     ... skip-bdb
     ... skip-innodb
     ... """
     >>> config = ConfigParser.RawConfigParser(allow_no_value=True)
     >>> config.readfp(io.BytesIO(sample_config))

     >>> # Settings with values are treated as before:
     >>> config.get("mysqld", "user")
     'mysql'

     >>> # Settings without values provide None:
     >>> config.get("mysqld", "skip-bdb")

     >>> # Settings which aren't specified still raise an error:
     >>> config.get("mysqld", "does-not-exist")
     Traceback (most recent call last):
       ...
     ConfigParser.NoOptionError: No option 'does-not-exist' in section: 'mysqld'


File: python.info,  Node: robotparser --- Parser for robots txt,  Next: netrc --- netrc file processing,  Prev: ConfigParser --- Configuration file parser,  Up: File Formats

5.13.3 ‘robotparser’ — Parser for robots.txt
--------------------------------------------

     Note: The *note robotparser: 14a. module has been renamed
     ‘urllib.robotparser’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  This module provides a single class, *note RobotFileParser: 1070,
which answers questions about whether or not a particular user agent can
fetch a URL on the Web site that published the ‘robots.txt’ file.  For
more details on the structure of ‘robots.txt’ files, see
‘http://www.robotstxt.org/orig.html’.

 -- Class: robotparser.RobotFileParser (url='')

     This class provides methods to read, parse and answer questions
     about the ‘robots.txt’ file at _url_.

      -- Method: set_url (url)

          Sets the URL referring to a ‘robots.txt’ file.

      -- Method: read ()

          Reads the ‘robots.txt’ URL and feeds it to the parser.

      -- Method: parse (lines)

          Parses the lines argument.

      -- Method: can_fetch (useragent, url)

          Returns ‘True’ if the _useragent_ is allowed to fetch the
          _url_ according to the rules contained in the parsed
          ‘robots.txt’ file.

      -- Method: mtime ()

          Returns the time the ‘robots.txt’ file was last fetched.  This
          is useful for long-running web spiders that need to check for
          new ‘robots.txt’ files periodically.

      -- Method: modified ()

          Sets the time the ‘robots.txt’ file was last fetched to the
          current time.

  The following example demonstrates basic use of the RobotFileParser
class.

     >>> import robotparser
     >>> rp = robotparser.RobotFileParser()
     >>> rp.set_url("http://www.musi-cal.com/robots.txt")
     >>> rp.read()
     >>> rp.can_fetch("*", "http://www.musi-cal.com/cgi-bin/search?city=San+Francisco")
     False
     >>> rp.can_fetch("*", "http://www.musi-cal.com/")
     True


File: python.info,  Node: netrc --- netrc file processing,  Next: xdrlib --- Encode and decode XDR data,  Prev: robotparser --- Parser for robots txt,  Up: File Formats

5.13.4 ‘netrc’ — netrc file processing
--------------------------------------

New in version 1.5.2.

  *Source code:* Lib/netrc.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note netrc: 121. class parses and encapsulates the netrc file
format used by the Unix *ftp* program and other FTP clients.

 -- Class: netrc.netrc ([file])

     A *note netrc: 121. instance or subclass instance encapsulates data
     from a netrc file.  The initialization argument, if present,
     specifies the file to parse.  If no argument is given, the file
     ‘.netrc’ in the user’s home directory will be read.  Parse errors
     will raise *note NetrcParseError: 107a. with diagnostic information
     including the file name, line number, and terminating token.  If no
     argument is specified on a POSIX system, the presence of passwords
     in the ‘.netrc’ file will raise a *note NetrcParseError: 107a. if
     the file ownership or permissions are insecure (owned by a user
     other than the user running the process, or accessible for read or
     write by any other user).  This implements security behavior
     equivalent to that of ftp and other programs that use ‘.netrc’.

     Changed in version 2.7.6: Added the POSIX permissions check.

 -- Exception: netrc.NetrcParseError

     Exception raised by the *note netrc: 121. class when syntactical
     errors are encountered in source text.  Instances of this exception
     provide three interesting attributes: ‘msg’ is a textual
     explanation of the error, ‘filename’ is the name of the source
     file, and ‘lineno’ gives the line number on which the error was
     found.

* Menu:

* netrc Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/netrc.py


File: python.info,  Node: netrc Objects,  Up: netrc --- netrc file processing

5.13.4.1 netrc Objects
......................

A *note netrc: 121. instance has the following methods:

 -- Method: netrc.authenticators (host)

     Return a 3-tuple ‘(login, account, password)’ of authenticators for
     _host_.  If the netrc file did not contain an entry for the given
     host, return the tuple associated with the ’default’ entry.  If
     neither matching host nor default entry is available, return
     ‘None’.

 -- Method: netrc.__repr__ ()

     Dump the class data as a string in the format of a netrc file.
     (This discards comments and may reorder the entries.)

  Instances of *note netrc: 121. have public instance variables:

 -- Attribute: netrc.hosts

     Dictionary mapping host names to ‘(login, account, password)’
     tuples.  The ’default’ entry, if any, is represented as a
     pseudo-host by that name.

 -- Attribute: netrc.macros

     Dictionary mapping macro names to string lists.

     Note: Passwords are limited to a subset of the ASCII character set.
     Versions of this module prior to 2.3 were extremely limited.
     Starting with 2.3, all ASCII punctuation is allowed in passwords.
     However, note that whitespace and non-printable characters are not
     allowed in passwords.  This is a limitation of the way the .netrc
     file is parsed and may be removed in the future.


File: python.info,  Node: xdrlib --- Encode and decode XDR data,  Next: plistlib --- Generate and parse Mac OS X plist files,  Prev: netrc --- netrc file processing,  Up: File Formats

5.13.5 ‘xdrlib’ — Encode and decode XDR data
--------------------------------------------

*Source code:* Lib/xdrlib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note xdrlib: 19f. module supports the External Data
Representation Standard as described in RFC 1014(2), written by Sun
Microsystems, Inc.  June 1987.  It supports most of the data types
described in the RFC.

  The *note xdrlib: 19f. module defines two classes, one for packing
variables into XDR representation, and another for unpacking from XDR
representation.  There are also two exception classes.

 -- Class: xdrlib.Packer

     *note Packer: 1083. is the class for packing data into XDR
     representation.  The *note Packer: 1083. class is instantiated with
     no arguments.

 -- Class: xdrlib.Unpacker (data)

     ‘Unpacker’ is the complementary class which unpacks XDR data values
     from a string buffer.  The input buffer is given as _data_.

See also
........

RFC 1014(3) - XDR: External Data Representation Standard

     This RFC defined the encoding of data which was XDR at the time
     this module was originally written.  It has apparently been
     obsoleted by RFC 1832(4).

RFC 1832(5) - XDR: External Data Representation Standard

     Newer RFC that provides a revised definition of XDR.

* Menu:

* Packer Objects:: 
* Unpacker Objects:: 
* Exceptions: Exceptions<3>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/xdrlib.py

   (2) http://tools.ietf.org/html/rfc1014.html

   (3) http://tools.ietf.org/html/rfc1014.html

   (4) http://tools.ietf.org/html/rfc1832.html

   (5) http://tools.ietf.org/html/rfc1832.html


File: python.info,  Node: Packer Objects,  Next: Unpacker Objects,  Up: xdrlib --- Encode and decode XDR data

5.13.5.1 Packer Objects
.......................

*note Packer: 1083. instances have the following methods:

 -- Method: Packer.get_buffer ()

     Returns the current pack buffer as a string.

 -- Method: Packer.reset ()

     Resets the pack buffer to the empty string.

  In general, you can pack any of the most common XDR data types by
calling the appropriate ‘pack_type()’ method.  Each method takes a
single argument, the value to pack.  The following simple data type
packing methods are supported: ‘pack_uint()’, ‘pack_int()’,
‘pack_enum()’, ‘pack_bool()’, ‘pack_uhyper()’, and ‘pack_hyper()’.

 -- Method: Packer.pack_float (value)

     Packs the single-precision floating point number _value_.

 -- Method: Packer.pack_double (value)

     Packs the double-precision floating point number _value_.

  The following methods support packing strings, bytes, and opaque data:

 -- Method: Packer.pack_fstring (n, s)

     Packs a fixed length string, _s_.  _n_ is the length of the string
     but it is _not_ packed into the data buffer.  The string is padded
     with null bytes if necessary to guaranteed 4 byte alignment.

 -- Method: Packer.pack_fopaque (n, data)

     Packs a fixed length opaque data stream, similarly to *note
     pack_fstring(): 108b.

 -- Method: Packer.pack_string (s)

     Packs a variable length string, _s_.  The length of the string is
     first packed as an unsigned integer, then the string data is packed
     with *note pack_fstring(): 108b.

 -- Method: Packer.pack_opaque (data)

     Packs a variable length opaque data string, similarly to *note
     pack_string(): 108d.

 -- Method: Packer.pack_bytes (bytes)

     Packs a variable length byte stream, similarly to *note
     pack_string(): 108d.

  The following methods support packing arrays and lists:

 -- Method: Packer.pack_list (list, pack_item)

     Packs a _list_ of homogeneous items.  This method is useful for
     lists with an indeterminate size; i.e.  the size is not available
     until the entire list has been walked.  For each item in the list,
     an unsigned integer ‘1’ is packed first, followed by the data value
     from the list.  _pack_item_ is the function that is called to pack
     the individual item.  At the end of the list, an unsigned integer
     ‘0’ is packed.

     For example, to pack a list of integers, the code might appear like
     this:

          import xdrlib
          p = xdrlib.Packer()
          p.pack_list([1, 2, 3], p.pack_int)

 -- Method: Packer.pack_farray (n, array, pack_item)

     Packs a fixed length list (_array_) of homogeneous items.  _n_ is
     the length of the list; it is _not_ packed into the buffer, but a
     *note ValueError: 236. exception is raised if ‘len(array)’ is not
     equal to _n_.  As above, _pack_item_ is the function used to pack
     each element.

 -- Method: Packer.pack_array (list, pack_item)

     Packs a variable length _list_ of homogeneous items.  First, the
     length of the list is packed as an unsigned integer, then each
     element is packed as in *note pack_farray(): 1091. above.


File: python.info,  Node: Unpacker Objects,  Next: Exceptions<3>,  Prev: Packer Objects,  Up: xdrlib --- Encode and decode XDR data

5.13.5.2 Unpacker Objects
.........................

The *note Unpacker: 1084. class offers the following methods:

 -- Method: Unpacker.reset (data)

     Resets the string buffer with the given _data_.

 -- Method: Unpacker.get_position ()

     Returns the current unpack position in the data buffer.

 -- Method: Unpacker.set_position (position)

     Sets the data buffer unpack position to _position_.  You should be
     careful about using *note get_position(): 1096. and *note
     set_position(): 1097.

 -- Method: Unpacker.get_buffer ()

     Returns the current unpack data buffer as a string.

 -- Method: Unpacker.done ()

     Indicates unpack completion.  Raises an *note Error: 109a.
     exception if all of the data has not been unpacked.

  In addition, every data type that can be packed with a *note Packer:
1083, can be unpacked with an *note Unpacker: 1084.  Unpacking methods
are of the form ‘unpack_type()’, and take no arguments.  They return the
unpacked object.

 -- Method: Unpacker.unpack_float ()

     Unpacks a single-precision floating point number.

 -- Method: Unpacker.unpack_double ()

     Unpacks a double-precision floating point number, similarly to
     *note unpack_float(): 109b.

  In addition, the following methods unpack strings, bytes, and opaque
data:

 -- Method: Unpacker.unpack_fstring (n)

     Unpacks and returns a fixed length string.  _n_ is the number of
     characters expected.  Padding with null bytes to guaranteed 4 byte
     alignment is assumed.

 -- Method: Unpacker.unpack_fopaque (n)

     Unpacks and returns a fixed length opaque data stream, similarly to
     *note unpack_fstring(): 109d.

 -- Method: Unpacker.unpack_string ()

     Unpacks and returns a variable length string.  The length of the
     string is first unpacked as an unsigned integer, then the string
     data is unpacked with *note unpack_fstring(): 109d.

 -- Method: Unpacker.unpack_opaque ()

     Unpacks and returns a variable length opaque data string, similarly
     to *note unpack_string(): 109f.

 -- Method: Unpacker.unpack_bytes ()

     Unpacks and returns a variable length byte stream, similarly to
     *note unpack_string(): 109f.

  The following methods support unpacking arrays and lists:

 -- Method: Unpacker.unpack_list (unpack_item)

     Unpacks and returns a list of homogeneous items.  The list is
     unpacked one element at a time by first unpacking an unsigned
     integer flag.  If the flag is ‘1’, then the item is unpacked and
     appended to the list.  A flag of ‘0’ indicates the end of the list.
     _unpack_item_ is the function that is called to unpack the items.

 -- Method: Unpacker.unpack_farray (n, unpack_item)

     Unpacks and returns (as a list) a fixed length array of homogeneous
     items.  _n_ is number of list elements to expect in the buffer.  As
     above, _unpack_item_ is the function used to unpack each element.

 -- Method: Unpacker.unpack_array (unpack_item)

     Unpacks and returns a variable length _list_ of homogeneous items.
     First, the length of the list is unpacked as an unsigned integer,
     then each element is unpacked as in *note unpack_farray(): 10a3.
     above.


File: python.info,  Node: Exceptions<3>,  Prev: Unpacker Objects,  Up: xdrlib --- Encode and decode XDR data

5.13.5.3 Exceptions
...................

Exceptions in this module are coded as class instances:

 -- Exception: xdrlib.Error

     The base exception class.  *note Error: 109a. has a single public
     attribute ‘msg’ containing the description of the error.

 -- Exception: xdrlib.ConversionError

     Class derived from *note Error: 109a.  Contains no additional
     instance variables.

  Here is an example of how you would catch one of these exceptions:

     import xdrlib
     p = xdrlib.Packer()
     try:
         p.pack_double(8.01)
     except xdrlib.ConversionError as instance:
         print 'packing the double failed:', instance.msg


File: python.info,  Node: plistlib --- Generate and parse Mac OS X plist files,  Prev: xdrlib --- Encode and decode XDR data,  Up: File Formats

5.13.6 ‘plistlib’ — Generate and parse Mac OS X ‘.plist’ files
--------------------------------------------------------------

Changed in version 2.6: This module was previously only available in the
Mac-specific library, it is now available for all platforms.

  *Source code:* Lib/plistlib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides an interface for reading and writing the
"property list" XML files used mainly by Mac OS X.

  The property list (‘.plist’) file format is a simple XML pickle
supporting basic object types, like dictionaries, lists, numbers and
strings.  Usually the top level object is a dictionary.

  Values can be strings, integers, floats, booleans, tuples, lists,
dictionaries (but only with string keys), *note Data: 10aa. or *note
datetime.datetime: 2da. objects.  String values (including dictionary
keys) may be unicode strings – they will be written out as UTF-8.

  The ‘<data>’ plist type is supported through the *note Data: 10aa.
class.  This is a thin wrapper around a Python string.  Use *note Data:
10aa. if your strings contain control characters.

See also
........

PList manual page(2)

     Apple’s documentation of the file format.

  This module defines the following functions:

 -- Function: plistlib.readPlist (pathOrFile)

     Read a plist file.  _pathOrFile_ may either be a file name or a
     (readable) file object.  Return the unpacked root object (which
     usually is a dictionary).

     The XML data is parsed using the Expat parser from *note
     xml.parsers.expat: 1a5. – see its documentation for possible
     exceptions on ill-formed XML. Unknown elements will simply be
     ignored by the plist parser.

 -- Function: plistlib.writePlist (rootObject, pathOrFile)

     Write _rootObject_ to a plist file.  _pathOrFile_ may either be a
     file name or a (writable) file object.

     A *note TypeError: 218. will be raised if the object is of an
     unsupported type or a container that contains objects of
     unsupported types.

 -- Function: plistlib.readPlistFromString (data)

     Read a plist from a string.  Return the root object.

 -- Function: plistlib.writePlistToString (rootObject)

     Return _rootObject_ as a plist-formatted string.

 -- Function: plistlib.readPlistFromResource (path, restype='plst',
          resid=0)

     Read a plist from the resource with type _restype_ from the
     resource fork of _path_.  Availability: Mac OS X.

          Note: In Python 3.x, this function has been removed.

 -- Function: plistlib.writePlistToResource (rootObject, path,
          restype='plst', resid=0)

     Write _rootObject_ as a resource with type _restype_ to the
     resource fork of _path_.  Availability: Mac OS X.

          Note: In Python 3.x, this function has been removed.

  The following class is available:

 -- Class: plistlib.Data (data)

     Return a "data" wrapper object around the string _data_.  This is
     used in functions converting from/to plists to represent the
     ‘<data>’ type available in plists.

     It has one attribute, ‘data’, that can be used to retrieve the
     Python string stored in it.

* Menu:

* Examples: Examples<6>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/plistlib.py

   (2) 
http://developer.apple.com/documentation/Darwin/Reference/ManPages/man5/plist.5.html


File: python.info,  Node: Examples<6>,  Up: plistlib --- Generate and parse Mac OS X plist files

5.13.6.1 Examples
.................

Generating a plist:

     pl = dict(
         aString="Doodah",
         aList=["A", "B", 12, 32.1, [1, 2, 3]],
         aFloat = 0.1,
         anInt = 728,
         aDict=dict(
             anotherString="<hello & hi there!>",
             aUnicodeValue=u'M\xe4ssig, Ma\xdf',
             aTrueValue=True,
             aFalseValue=False,
         ),
         someData = Data("<binary gunk>"),
         someMoreData = Data("<lots of binary gunk>" * 10),
         aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),
     )
     # unicode keys are possible, but a little awkward to use:
     pl[u'\xc5benraa'] = "That was a unicode key."
     writePlist(pl, fileName)

  Parsing a plist:

     pl = readPlist(pathOrFile)
     print pl["aKey"]


File: python.info,  Node: Cryptographic Services,  Next: Generic Operating System Services,  Prev: File Formats,  Up: The Python Standard Library

5.14 Cryptographic Services
===========================

The modules described in this chapter implement various algorithms of a
cryptographic nature.  They are available at the discretion of the
installation.  Here’s an overview:

* Menu:

* hashlib: hashlib --- Secure hashes and message digests. Secure hashes and message digests
* hmac: hmac --- Keyed-Hashing for Message Authentication. Keyed-Hashing for Message Authentication
* md5: md5 --- MD5 message digest algorithm. MD5 message digest algorithm
* sha: sha --- SHA-1 message digest algorithm. SHA-1 message digest algorithm

hashlib — Secure hashes and message digests

* Key Derivation Function:: 


File: python.info,  Node: hashlib --- Secure hashes and message digests,  Next: hmac --- Keyed-Hashing for Message Authentication,  Up: Cryptographic Services

5.14.1 ‘hashlib’ — Secure hashes and message digests
----------------------------------------------------

New in version 2.5.

  *Source code:* Lib/hashlib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module implements a common interface to many different secure
hash and message digest algorithms.  Included are the FIPS secure hash
algorithms SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS
180-2) as well as RSA’s MD5 algorithm (defined in Internet RFC 1321(2)).
The terms secure hash and message digest are interchangeable.  Older
algorithms were called message digests.  The modern term is secure hash.

     Note: If you want the adler32 or crc32 hash functions, they are
     available in the *note zlib: 1ad. module.

     Warning: Some algorithms have known hash collision weaknesses,
     refer to the "See also" section at the end.

  There is one constructor method named for each type of _hash_.  All
return a hash object with the same simple interface.  For example: use
‘sha1()’ to create a SHA1 hash object.  You can now feed this object
with arbitrary strings using the ‘update()’ method.  At any point you
can ask it for the _digest_ of the concatenation of the strings fed to
it so far using the ‘digest()’ or ‘hexdigest()’ methods.

  Constructors for hash algorithms that are always present in this
module are *note md5(): 10d, ‘sha1()’, ‘sha224()’, ‘sha256()’,
‘sha384()’, and ‘sha512()’.  Additional algorithms may also be available
depending upon the OpenSSL library that Python uses on your platform.

  For example, to obtain the digest of the string ‘'Nobody inspects the
spammish repetition'’:

     >>> import hashlib
     >>> m = hashlib.md5()
     >>> m.update("Nobody inspects")
     >>> m.update(" the spammish repetition")
     >>> m.digest()
     '\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'
     >>> m.digest_size
     16
     >>> m.block_size
     64

  More condensed:

     >>> hashlib.sha224("Nobody inspects the spammish repetition").hexdigest()
     'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'

  A generic *note new(): 122. constructor that takes the string name of
the desired algorithm as its first parameter also exists to allow access
to the above listed hashes as well as any other algorithms that your
OpenSSL library may offer.  The named constructors are much faster than
*note new(): 122. and should be preferred.

  Using *note new(): 122. with an algorithm provided by OpenSSL:

     >>> h = hashlib.new('ripemd160')
     >>> h.update("Nobody inspects the spammish repetition")
     >>> h.hexdigest()
     'cc4a5ce1b3df48aec5d22d1f16b894a0b894eccc'

  This module provides the following constant attribute:

 -- Data: hashlib.algorithms

     A tuple providing the names of the hash algorithms guaranteed to be
     supported by this module.

     New in version 2.7.

  The following values are provided as constant attributes of the hash
objects returned by the constructors:

 -- Data: hash.digest_size

     The size of the resulting hash in bytes.

 -- Data: hash.block_size

     The internal block size of the hash algorithm in bytes.

  A hash object has the following methods:

 -- Method: hash.update (arg)

     Update the hash object with the string _arg_.  Repeated calls are
     equivalent to a single call with the concatenation of all the
     arguments: ‘m.update(a); m.update(b)’ is equivalent to
     ‘m.update(a+b)’.

     Changed in version 2.7: The Python GIL is released to allow other
     threads to run while hash updates on data larger than 2048 bytes is
     taking place when using hash algorithms supplied by OpenSSL.

 -- Method: hash.digest ()

     Return the digest of the strings passed to the *note update():
     10b9. method so far.  This is a string of *note digest_size: 10b7.
     bytes which may contain non-ASCII characters, including null bytes.

 -- Method: hash.hexdigest ()

     Like *note digest(): 10ba. except the digest is returned as a
     string of double length, containing only hexadecimal digits.  This
     may be used to exchange the value safely in email or other
     non-binary environments.

 -- Method: hash.copy ()

     Return a copy ("clone") of the hash object.  This can be used to
     efficiently compute the digests of strings that share a common
     initial substring.

* Menu:

* Key Derivation Function:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/hashlib.py

   (2) http://tools.ietf.org/html/rfc1321.html


File: python.info,  Node: Key Derivation Function,  Up: hashlib --- Secure hashes and message digests

5.14.1.1 Key Derivation Function
................................

Key derivation and key stretching algorithms are designed for secure
password hashing.  Naive algorithms such as ‘sha1(password)’ are not
resistant against brute-force attacks.  A good password hashing function
must be tunable, slow, and include a salt(1).

 -- Function: hashlib.pbkdf2_hmac (name, password, salt, rounds,
          dklen=None)

     The function provides PKCS#5 password-based key derivation function
     2.  It uses HMAC as pseudorandom function.

     The string _name_ is the desired name of the hash digest algorithm
     for HMAC, e.g.  ’sha1’ or ’sha256’.  _password_ and _salt_ are
     interpreted as buffers of bytes.  Applications and libraries should
     limit _password_ to a sensible value (e.g.  1024).  _salt_ should
     be about 16 or more bytes from a proper source, e.g.  *note
     os.urandom(): d52.

     The number of _rounds_ should be chosen based on the hash algorithm
     and computing power.  As of 2013, at least 100,000 rounds of
     SHA-256 is suggested.

     _dklen_ is the length of the derived key.  If _dklen_ is ‘None’
     then the digest size of the hash algorithm _name_ is used, e.g.  64
     for SHA-512.

          >>> import hashlib, binascii
          >>> dk = hashlib.pbkdf2_hmac('sha256', b'password', b'salt', 100000)
          >>> binascii.hexlify(dk)
          b'0394a2ede332c9a13eb82e9b24631604c31df978b4e2f0fbd2c549944f9d79a5'

     New in version 2.7.8.

          Note: A fast implementation of _pbkdf2_hmac_ is available with
          OpenSSL. The Python implementation uses an inline version of
          *note hmac: e8.  It is about three times slower and doesn’t
          release the GIL.

See also
........

Module *note hmac: e8.

     A module to generate message authentication codes using hashes.

Module *note base64: 15.

     Another way to encode binary hashes for non-binary environments.

‘http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf’

     The FIPS 180-2 publication on Secure Hash Algorithms.

‘http://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms’

     Wikipedia article with information on which algorithms have known
     issues and what that means regarding their use.

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Salt_%28cryptography%29


File: python.info,  Node: hmac --- Keyed-Hashing for Message Authentication,  Next: md5 --- MD5 message digest algorithm,  Prev: hashlib --- Secure hashes and message digests,  Up: Cryptographic Services

5.14.2 ‘hmac’ — Keyed-Hashing for Message Authentication
--------------------------------------------------------

New in version 2.2.

  *Source code:* Lib/hmac.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module implements the HMAC algorithm as described by RFC 2104(2).

 -- Function: hmac.new (key[, msg[, digestmod]])

     Return a new hmac object.  If _msg_ is present, the method call
     ‘update(msg)’ is made.  _digestmod_ is the digest constructor or
     module for the HMAC object to use.  It defaults to the
     ‘hashlib.md5’ constructor.

  An HMAC object has the following methods:

 -- Method: HMAC.update (msg)

     Update the hmac object with the string _msg_.  Repeated calls are
     equivalent to a single call with the concatenation of all the
     arguments: ‘m.update(a); m.update(b)’ is equivalent to ‘m.update(a
     + b)’.

 -- Method: HMAC.digest ()

     Return the digest of the strings passed to the *note update():
     10c2. method so far.  This string will be the same length as the
     _digest_size_ of the digest given to the constructor.  It may
     contain non-ASCII characters, including NUL bytes.

          Warning: When comparing the output of *note digest(): 10c3. to
          an externally-supplied digest during a verification routine,
          it is recommended to use the *note compare_digest(): 2e1.
          function instead of the ‘==’ operator to reduce the
          vulnerability to timing attacks.

 -- Method: HMAC.hexdigest ()

     Like *note digest(): 10c3. except the digest is returned as a
     string twice the length containing only hexadecimal digits.  This
     may be used to exchange the value safely in email or other
     non-binary environments.

          Warning: When comparing the output of *note hexdigest(): 10c4.
          to an externally-supplied digest during a verification
          routine, it is recommended to use the *note compare_digest():
          2e1. function instead of the ‘==’ operator to reduce the
          vulnerability to timing attacks.

 -- Method: HMAC.copy ()

     Return a copy ("clone") of the hmac object.  This can be used to
     efficiently compute the digests of strings that share a common
     initial substring.

  This module also provides the following helper function:

 -- Function: hmac.compare_digest (a, b)

     Return ‘a == b’.  This function uses an approach designed to
     prevent timing analysis by avoiding content-based short circuiting
     behaviour, making it appropriate for cryptography.  _a_ and _b_
     must both be of the same type: either *note unicode: 1f5. or a
     *note bytes-like object: 10c6.

          Note: If _a_ and _b_ are of different lengths, or if an error
          occurs, a timing attack could theoretically reveal information
          about the types and lengths of _a_ and _b_–but not their
          values.

     New in version 2.7.7.

See also
........

Module *note hashlib: e6.

     The Python module providing secure hash functions.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/hmac.py

   (2) http://tools.ietf.org/html/rfc2104.html


File: python.info,  Node: md5 --- MD5 message digest algorithm,  Next: sha --- SHA-1 message digest algorithm,  Prev: hmac --- Keyed-Hashing for Message Authentication,  Up: Cryptographic Services

5.14.3 ‘md5’ — MD5 message digest algorithm
-------------------------------------------

Deprecated since version 2.5: Use the *note hashlib: e6. module instead.

  This module implements the interface to RSA’s MD5 message digest
algorithm (see also Internet RFC 1321(1)).  Its use is quite
straightforward: use *note new(): 122. to create an md5 object.  You can
now feed this object with arbitrary strings using the ‘update()’ method,
and at any point you can ask it for the _digest_ (a strong kind of
128-bit checksum, a.k.a.  "fingerprint") of the concatenation of the
strings fed to it so far using the ‘digest()’ method.

  For example, to obtain the digest of the string ‘'Nobody inspects the
spammish repetition'’:

     >>> import md5
     >>> m = md5.new()
     >>> m.update("Nobody inspects")
     >>> m.update(" the spammish repetition")
     >>> m.digest()
     '\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'

  More condensed:

     >>> md5.new("Nobody inspects the spammish repetition").digest()
     '\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'

  The following values are provided as constants in the module and as
attributes of the md5 objects returned by *note new(): 122.:

 -- Data: md5.digest_size

     The size of the resulting digest in bytes.  This is always ‘16’.

  The md5 module provides the following functions:

 -- Function: md5.new ([arg])

     Return a new md5 object.  If _arg_ is present, the method call
     ‘update(arg)’ is made.

 -- Function: md5.md5 ([arg])

     For backward compatibility reasons, this is an alternative name for
     the *note new(): 122. function.

  An md5 object has the following methods:

 -- Method: md5.update (arg)

     Update the md5 object with the string _arg_.  Repeated calls are
     equivalent to a single call with the concatenation of all the
     arguments: ‘m.update(a); m.update(b)’ is equivalent to
     ‘m.update(a+b)’.

 -- Method: md5.digest ()

     Return the digest of the strings passed to the *note update():
     10cc. method so far.  This is a 16-byte string which may contain
     non-ASCII characters, including null bytes.

 -- Method: md5.hexdigest ()

     Like *note digest(): 10cd. except the digest is returned as a
     string of length 32, containing only hexadecimal digits.  This may
     be used to exchange the value safely in email or other non-binary
     environments.

 -- Method: md5.copy ()

     Return a copy ("clone") of the md5 object.  This can be used to
     efficiently compute the digests of strings that share a common
     initial substring.

See also
........

Module *note sha: 151.

     Similar module implementing the Secure Hash Algorithm (SHA). The
     SHA algorithm is considered a more secure hash.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc1321.html


File: python.info,  Node: sha --- SHA-1 message digest algorithm,  Prev: md5 --- MD5 message digest algorithm,  Up: Cryptographic Services

5.14.4 ‘sha’ — SHA-1 message digest algorithm
---------------------------------------------

Deprecated since version 2.5: Use the *note hashlib: e6. module instead.

  This module implements the interface to NIST’s secure hash algorithm,
known as SHA-1.  SHA-1 is an improved version of the original SHA hash
algorithm.  It is used in the same way as the *note md5: 10d. module:
use *note new(): 122. to create an sha object, then feed this object
with arbitrary strings using the ‘update()’ method, and at any point you
can ask it for the _digest_ of the concatenation of the strings fed to
it so far.  SHA-1 digests are 160 bits instead of MD5’s 128 bits.

 -- Function: sha.new ([string])

     Return a new sha object.  If _string_ is present, the method call
     ‘update(string)’ is made.

  The following values are provided as constants in the module and as
attributes of the sha objects returned by *note new(): 122.:

 -- Data: sha.blocksize

     Size of the blocks fed into the hash function; this is always ‘1’.
     This size is used to allow an arbitrary string to be hashed.

 -- Data: sha.digest_size

     The size of the resulting digest in bytes.  This is always ‘20’.

  An sha object has the same methods as md5 objects:

 -- Method: sha.update (arg)

     Update the sha object with the string _arg_.  Repeated calls are
     equivalent to a single call with the concatenation of all the
     arguments: ‘m.update(a); m.update(b)’ is equivalent to
     ‘m.update(a+b)’.

 -- Method: sha.digest ()

     Return the digest of the strings passed to the *note update():
     10d5. method so far.  This is a 20-byte string which may contain
     non-ASCII characters, including null bytes.

 -- Method: sha.hexdigest ()

     Like *note digest(): 10d6. except the digest is returned as a
     string of length 40, containing only hexadecimal digits.  This may
     be used to exchange the value safely in email or other non-binary
     environments.

 -- Method: sha.copy ()

     Return a copy ("clone") of the sha object.  This can be used to
     efficiently compute the digests of strings that share a common
     initial substring.

See also
........

Secure Hash Standard(1)

     The Secure Hash Algorithm is defined by NIST document FIPS PUB
     180-2: Secure Hash Standard(2), published in August 2002.

Cryptographic Toolkit (Secure Hashing)(3)

     Links from NIST to various information on secure hashing.

  Hardcore cypherpunks will probably find the cryptographic modules
written by A.M. Kuchling of further interest; the package contains
modules for various encryption algorithms, most notably AES. These
modules are not distributed with Python but available separately.  See
the URL ‘http://www.pycrypto.org’ for more information.

   ---------- Footnotes ----------

   (1) 
http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf

   (2) 
http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf

   (3) http://csrc.nist.gov/CryptoToolkit/tkhash.html


File: python.info,  Node: Generic Operating System Services,  Next: Optional Operating System Services,  Prev: Cryptographic Services,  Up: The Python Standard Library

5.15 Generic Operating System Services
======================================

The modules described in this chapter provide interfaces to operating
system features that are available on (almost) all operating systems,
such as files and a clock.  The interfaces are generally modeled after
the Unix or C interfaces, but they are available on most other systems
as well.  Here’s an overview:

* Menu:

* os: os --- Miscellaneous operating system interfaces. Miscellaneous operating system interfaces
* io: io --- Core tools for working with streams. Core tools for working with streams
* time: time --- Time access and conversions. Time access and conversions
* argparse: argparse --- Parser for command-line options arguments and sub-commands. Parser for command-line options, arguments and sub-
                        commands
* optparse: optparse --- Parser for command line options. Parser for command line options
* getopt: getopt --- C-style parser for command line options. C-style parser for command line options
* logging: logging --- Logging facility for Python. Logging facility for Python
* logging.config: logging config --- Logging configuration. Logging configuration
* logging.handlers: logging handlers --- Logging handlers. Logging handlers
* getpass: getpass --- Portable password input. Portable password input
* curses: curses --- Terminal handling for character-cell displays. Terminal handling for character-cell displays
* curses.textpad: curses textpad --- Text input widget for curses programs. Text input widget for curses programs
* curses.ascii: curses ascii --- Utilities for ASCII characters. Utilities for ASCII characters
* curses.panel: curses panel --- A panel stack extension for curses. A panel stack extension for curses
* platform: platform --- Access to underlying platform's identifying data. Access to underlying platform’s identifying data
* errno: errno --- Standard errno system symbols. Standard errno system symbols
* ctypes: ctypes --- A foreign function library for Python. A foreign function library for Python

os — Miscellaneous operating system interfaces

* Process Parameters:: 
* File Object Creation:: 
* File Descriptor Operations:: 
* Files and Directories:: 
* Process Management:: 
* Miscellaneous System Information:: 
* Miscellaneous Functions:: 

File Descriptor Operations

* open() flag constants: open flag constants. 

io — Core tools for working with streams

* Module Interface:: 
* I/O Base Classes:: 
* Raw File I/O:: 
* Buffered Streams:: 
* Text I/O:: 
* Advanced topics:: 

Advanced topics

* Performance:: 
* Multi-threading: Multi-threading<2>. 
* Reentrancy:: 

Performance

* Binary I/O:: 
* Text I/O: Text I/O<2>. 

argparse — Parser for command-line options, arguments and sub-commands

* Example: Example<6>. 
* ArgumentParser objects:: 
* The add_argument() method: The add_argument method. 
* The parse_args() method: The parse_args method. 
* Other utilities:: 
* Upgrading optparse code:: 

Example

* Creating a parser:: 
* Adding arguments:: 
* Parsing arguments:: 

ArgumentParser objects

* prog:: 
* usage:: 
* description:: 
* epilog:: 
* parents:: 
* formatter_class:: 
* prefix_chars:: 
* fromfile_prefix_chars:: 
* argument_default:: 
* conflict_handler:: 
* add_help:: 

The add_argument() method

* name or flags:: 
* action:: 
* nargs:: 
* const:: 
* default:: 
* type:: 
* choices:: 
* required:: 
* help:: 
* metavar:: 
* dest:: 

The parse_args() method

* Option value syntax:: 
* Invalid arguments:: 
* Arguments containing -:: 
* Argument abbreviations (prefix matching): Argument abbreviations prefix matching. 
* Beyond sys.argv: Beyond sys argv. 
* The Namespace object:: 

Other utilities

* Sub-commands:: 
* FileType objects:: 
* Argument groups:: 
* Mutual exclusion:: 
* Parser defaults:: 
* Printing help:: 
* Partial parsing:: 
* Customizing file parsing:: 
* Exiting methods:: 

optparse — Parser for command line options

* Background:: 
* Tutorial:: 
* Reference Guide:: 
* Option Callbacks:: 
* Extending optparse:: 

Background

* Terminology:: 
* What are options for?:: 
* What are positional arguments for?:: 

Tutorial

* Understanding option actions:: 
* The store action:: 
* Handling boolean (flag) options: Handling boolean flag options. 
* Other actions:: 
* Default values:: 
* Generating help:: 
* Printing a version string:: 
* How optparse handles errors:: 
* Putting it all together:: 

Generating help

* Grouping Options:: 

Reference Guide

* Creating the parser:: 
* Populating the parser:: 
* Defining options:: 
* Option attributes:: 
* Standard option actions:: 
* Standard option types:: 
* Parsing arguments: Parsing arguments<2>. 
* Querying and manipulating your option parser:: 
* Conflicts between options:: 
* Cleanup:: 
* Other methods:: 

Option Callbacks

* Defining a callback option:: 
* How callbacks are called:: 
* Raising errors in a callback:: 
* Callback example 1; trivial callback: Callback example 1 trivial callback. 
* Callback example 2; check option order: Callback example 2 check option order. 
* Callback example 3; check option order (generalized): Callback example 3 check option order generalized. 
* Callback example 4; check arbitrary condition: Callback example 4 check arbitrary condition. 
* Callback example 5; fixed arguments: Callback example 5 fixed arguments. 
* Callback example 6; variable arguments: Callback example 6 variable arguments. 

Extending optparse

* Adding new types:: 
* Adding new actions:: 

logging — Logging facility for Python

* Logger Objects:: 
* Logging Levels:: 
* Handler Objects:: 
* Formatter Objects:: 
* Filter Objects:: 
* LogRecord Objects:: 
* LogRecord attributes:: 
* LoggerAdapter Objects:: 
* Thread Safety:: 
* Module-Level Functions:: 
* Integration with the warnings module:: 

logging.config — Logging configuration

* Configuration functions:: 
* Configuration dictionary schema:: 
* Configuration file format:: 

Configuration dictionary schema

* Dictionary Schema Details:: 
* Incremental Configuration:: 
* Object connections:: 
* User-defined objects:: 
* Access to external objects:: 
* Access to internal objects:: 
* Import resolution and custom importers:: 

logging.handlers — Logging handlers

* StreamHandler:: 
* FileHandler:: 
* NullHandler:: 
* WatchedFileHandler:: 
* RotatingFileHandler:: 
* TimedRotatingFileHandler:: 
* SocketHandler:: 
* DatagramHandler:: 
* SysLogHandler:: 
* NTEventLogHandler:: 
* SMTPHandler:: 
* MemoryHandler:: 
* HTTPHandler:: 

curses — Terminal handling for character-cell displays

* Functions: Functions<2>. 
* Window Objects:: 
* Constants: Constants<3>. 

curses.textpad — Text input widget for curses programs

* Textbox objects:: 

curses.panel — A panel stack extension for curses

* Functions: Functions<3>. 
* Panel Objects:: 

platform —  Access to underlying platform’s identifying data

* Cross Platform:: 
* Java Platform:: 
* Windows Platform:: 
* Mac OS Platform:: 
* Unix Platforms:: 

Windows Platform

* Win95/98 specific:: 

ctypes — A foreign function library for Python

* ctypes tutorial:: 
* ctypes reference:: 

ctypes tutorial

* Loading dynamic link libraries:: 
* Accessing functions from loaded dlls:: 
* Calling functions:: 
* Fundamental data types:: 
* Calling functions, continued: Calling functions continued. 
* Calling functions with your own custom data types:: 
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes. 
* Return types:: 
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference. 
* Structures and unions:: 
* Structure/union alignment and byte order:: 
* Bit fields in structures and unions:: 
* Arrays:: 
* Pointers:: 
* Type conversions:: 
* Incomplete Types:: 
* Callback functions:: 
* Accessing values exported from dlls:: 
* Surprises:: 
* Variable-sized data types:: 

ctypes reference

* Finding shared libraries:: 
* Loading shared libraries:: 
* Foreign functions:: 
* Function prototypes:: 
* Utility functions:: 
* Data types:: 
* Fundamental data types: Fundamental data types<2>. 
* Structured data types:: 
* Arrays and pointers:: 


File: python.info,  Node: os --- Miscellaneous operating system interfaces,  Next: io --- Core tools for working with streams,  Up: Generic Operating System Services

5.15.1 ‘os’ — Miscellaneous operating system interfaces
-------------------------------------------------------

This module provides a portable way of using operating system dependent
functionality.  If you just want to read or write a file see *note
open(): 2d6, if you want to manipulate paths, see the *note os.path:
129. module, and if you want to read all the lines in all the files on
the command line see the *note fileinput: cc. module.  For creating
temporary files and directories see the *note tempfile: 173. module, and
for high-level file and directory handling see the *note shutil: 154.
module.

  Notes on the availability of these functions:

   * The design of all built-in operating system dependent modules of
     Python is such that as long as the same functionality is available,
     it uses the same interface; for example, the function
     ‘os.stat(path)’ returns stat information about _path_ in the same
     format (which happens to have originated with the POSIX interface).

   * Extensions peculiar to a particular operating system are also
     available through the *note os: 128. module, but using them is of
     course a threat to portability.

   * An "Availability: Unix" note means that this function is commonly
     found on Unix systems.  It does not make any claims about its
     existence on a specific operating system.

   * If not separately noted, all functions that claim "Availability:
     Unix" are supported on Mac OS X, which builds on a Unix core.

     Note: All functions in this module raise *note OSError: 231. in the
     case of invalid or inaccessible file names and paths, or other
     arguments that have the correct type, but are not accepted by the
     operating system.

 -- Exception: os.error

     An alias for the built-in *note OSError: 231. exception.

 -- Data: os.name

     The name of the operating system dependent module imported.  The
     following names have currently been registered: ‘'posix'’, ‘'nt'’,
     ‘'os2'’, ‘'ce'’, ‘'java'’, ‘'riscos'’.

     See also
.............

     *note sys.platform: 10df. has a finer granularity.  *note
     os.uname(): 10e0. gives system-dependent version information.

     The *note platform: 132. module provides detailed checks for the
     system’s identity.

* Menu:

* Process Parameters:: 
* File Object Creation:: 
* File Descriptor Operations:: 
* Files and Directories:: 
* Process Management:: 
* Miscellaneous System Information:: 
* Miscellaneous Functions:: 


File: python.info,  Node: Process Parameters,  Next: File Object Creation,  Up: os --- Miscellaneous operating system interfaces

5.15.1.1 Process Parameters
...........................

These functions and data items provide information and operate on the
current process and user.

 -- Data: os.environ

     A *note mapping: 8f7. object representing the string environment.
     For example, ‘environ['HOME']’ is the pathname of your home
     directory (on some platforms), and is equivalent to
     ‘getenv("HOME")’ in C.

     This mapping is captured the first time the *note os: 128. module
     is imported, typically during Python startup as part of processing
     ‘site.py’.  Changes to the environment made after this time are not
     reflected in ‘os.environ’, except for changes made by modifying
     ‘os.environ’ directly.

     If the platform supports the *note putenv(): 10e3. function, this
     mapping may be used to modify the environment as well as query the
     environment.  *note putenv(): 10e3. will be called automatically
     when the mapping is modified.

          Note: Calling *note putenv(): 10e3. directly does not change
          ‘os.environ’, so it’s better to modify ‘os.environ’.

          Note: On some platforms, including FreeBSD and Mac OS X,
          setting ‘environ’ may cause memory leaks.  Refer to the system
          documentation for ‘putenv()’.

     If *note putenv(): 10e3. is not provided, a modified copy of this
     mapping may be passed to the appropriate process-creation functions
     to cause child processes to use a modified environment.

     If the platform supports the *note unsetenv(): 352. function, you
     can delete items in this mapping to unset environment variables.
     *note unsetenv(): 352. will be called automatically when an item is
     deleted from ‘os.environ’, and when one of the ‘pop()’ or ‘clear()’
     methods is called.

     Changed in version 2.6: Also unset environment variables when
     calling ‘os.environ.clear()’ and ‘os.environ.pop()’.

 -- Function: os.chdir (path)

 -- Function: os.fchdir (fd)

 -- Function: os.getcwd ()

     These functions are described in *note Files and Directories: 10e4.

 -- Function: os.ctermid ()

     Return the filename corresponding to the controlling terminal of
     the process.

     Availability: Unix.

 -- Function: os.getegid ()

     Return the effective group id of the current process.  This
     corresponds to the "set id" bit on the file being executed in the
     current process.

     Availability: Unix.

 -- Function: os.geteuid ()

     Return the current process’s effective user id.

     Availability: Unix.

 -- Function: os.getgid ()

     Return the real group id of the current process.

     Availability: Unix.

 -- Function: os.getgroups ()

     Return list of supplemental group ids associated with the current
     process.

     Availability: Unix.

          Note: On Mac OS X, *note getgroups(): 10e9. behavior differs
          somewhat from other Unix platforms.  If the Python interpreter
          was built with a deployment target of ‘10.5’ or earlier, *note
          getgroups(): 10e9. returns the list of effective group ids
          associated with the current user process; this list is limited
          to a system-defined number of entries, typically 16, and may
          be modified by calls to *note setgroups(): 10ea. if suitably
          privileged.  If built with a deployment target greater than
          ‘10.5’, *note getgroups(): 10e9. returns the current group
          access list for the user associated with the effective user id
          of the process; the group access list may change over the
          lifetime of the process, it is not affected by calls to *note
          setgroups(): 10ea, and its length is not limited to 16.  The
          deployment target value, ‘MACOSX_DEPLOYMENT_TARGET’, can be
          obtained with *note sysconfig.get_config_var(): 273.

 -- Function: os.initgroups (username, gid)

     Call the system initgroups() to initialize the group access list
     with all of the groups of which the specified username is a member,
     plus the specified group id.

     Availability: Unix.

     New in version 2.7.

 -- Function: os.getlogin ()

     Return the name of the user logged in on the controlling terminal
     of the process.  For most purposes, it is more useful to use the
     environment variable ‘LOGNAME’ to find out who the user is, or
     ‘pwd.getpwuid(os.getuid())[0]’ to get the login name of the
     currently effective user id.

     Availability: Unix.

 -- Function: os.getpgid (pid)

     Return the process group id of the process with process id _pid_.
     If _pid_ is 0, the process group id of the current process is
     returned.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.getpgrp ()

     Return the id of the current process group.

     Availability: Unix.

 -- Function: os.getpid ()

     Return the current process id.

     Availability: Unix, Windows.

 -- Function: os.getppid ()

     Return the parent’s process id.

     Availability: Unix.

 -- Function: os.getresuid ()

     Return a tuple (ruid, euid, suid) denoting the current process’s
     real, effective, and saved user ids.

     Availability: Unix.

     New in version 2.7.

 -- Function: os.getresgid ()

     Return a tuple (rgid, egid, sgid) denoting the current process’s
     real, effective, and saved group ids.

     Availability: Unix.

     New in version 2.7.

 -- Function: os.getuid ()

     Return the current process’s real user id.

     Availability: Unix.

 -- Function: os.getenv (varname[, value])

     Return the value of the environment variable _varname_ if it
     exists, or _value_ if it doesn’t.  _value_ defaults to ‘None’.

     Availability: most flavors of Unix, Windows.

 -- Function: os.putenv (varname, value)

     Set the environment variable named _varname_ to the string _value_.
     Such changes to the environment affect subprocesses started with
     *note os.system(): 3fa, *note popen(): 700. or *note fork(): 244.
     and *note execv(): 10f2.

     Availability: most flavors of Unix, Windows.

          Note: On some platforms, including FreeBSD and Mac OS X,
          setting ‘environ’ may cause memory leaks.  Refer to the system
          documentation for putenv.

     When *note putenv(): 10e3. is supported, assignments to items in
     ‘os.environ’ are automatically translated into corresponding calls
     to *note putenv(): 10e3.; however, calls to *note putenv(): 10e3.
     don’t update ‘os.environ’, so it is actually preferable to assign
     to items of ‘os.environ’.

 -- Function: os.setegid (egid)

     Set the current process’s effective group id.

     Availability: Unix.

 -- Function: os.seteuid (euid)

     Set the current process’s effective user id.

     Availability: Unix.

 -- Function: os.setgid (gid)

     Set the current process’ group id.

     Availability: Unix.

 -- Function: os.setgroups (groups)

     Set the list of supplemental group ids associated with the current
     process to _groups_.  _groups_ must be a sequence, and each element
     must be an integer identifying a group.  This operation is
     typically available only to the superuser.

     Availability: Unix.

     New in version 2.2.

          Note: On Mac OS X, the length of _groups_ may not exceed the
          system-defined maximum number of effective group ids,
          typically 16.  See the documentation for *note getgroups():
          10e9. for cases where it may not return the same group list
          set by calling setgroups().

 -- Function: os.setpgrp ()

     Call the system call ‘setpgrp()’ or ‘setpgrp(0, 0)()’ depending on
     which version is implemented (if any).  See the Unix manual for the
     semantics.

     Availability: Unix.

 -- Function: os.setpgid (pid, pgrp)

     Call the system call ‘setpgid()’ to set the process group id of the
     process with id _pid_ to the process group with id _pgrp_.  See the
     Unix manual for the semantics.

     Availability: Unix.

 -- Function: os.setregid (rgid, egid)

     Set the current process’s real and effective group ids.

     Availability: Unix.

 -- Function: os.setresgid (rgid, egid, sgid)

     Set the current process’s real, effective, and saved group ids.

     Availability: Unix.

     New in version 2.7.

 -- Function: os.setresuid (ruid, euid, suid)

     Set the current process’s real, effective, and saved user ids.

     Availability: Unix.

     New in version 2.7.

 -- Function: os.setreuid (ruid, euid)

     Set the current process’s real and effective user ids.

     Availability: Unix.

 -- Function: os.getsid (pid)

     Call the system call ‘getsid()’.  See the Unix manual for the
     semantics.

     Availability: Unix.

     New in version 2.4.

 -- Function: os.setsid ()

     Call the system call ‘setsid()’.  See the Unix manual for the
     semantics.

     Availability: Unix.

 -- Function: os.setuid (uid)

     Set the current process’s user id.

     Availability: Unix.

 -- Function: os.strerror (code)

     Return the error message corresponding to the error code in _code_.
     On platforms where ‘strerror()’ returns ‘NULL’ when given an
     unknown error number, *note ValueError: 236. is raised.

     Availability: Unix, Windows.

 -- Function: os.umask (mask)

     Set the current numeric umask and return the previous umask.

     Availability: Unix, Windows.

 -- Function: os.uname ()

     Return a 5-tuple containing information identifying the current
     operating system.  The tuple contains 5 strings: ‘(sysname,
     nodename, release, version, machine)’.  Some systems truncate the
     nodename to 8 characters or to the leading component; a better way
     to get the hostname is *note socket.gethostname(): 10ff. or even
     ‘socket.gethostbyaddr(socket.gethostname())’.

     Availability: recent flavors of Unix.

 -- Function: os.unsetenv (varname)

     Unset (delete) the environment variable named _varname_.  Such
     changes to the environment affect subprocesses started with *note
     os.system(): 3fa, *note popen(): 700. or *note fork(): 244. and
     *note execv(): 10f2.

     When *note unsetenv(): 352. is supported, deletion of items in
     ‘os.environ’ is automatically translated into a corresponding call
     to *note unsetenv(): 352.; however, calls to *note unsetenv(): 352.
     don’t update ‘os.environ’, so it is actually preferable to delete
     items of ‘os.environ’.

     Availability: most flavors of Unix, Windows.


File: python.info,  Node: File Object Creation,  Next: File Descriptor Operations,  Prev: Process Parameters,  Up: os --- Miscellaneous operating system interfaces

5.15.1.2 File Object Creation
.............................

These functions create new file objects.  (See also *note open(): 2d6.)

 -- Function: os.fdopen (fd[, mode[, bufsize]])

     Return an open file object connected to the file descriptor _fd_.
     The _mode_ and _bufsize_ arguments have the same meaning as the
     corresponding arguments to the built-in *note open(): 2d6.
     function.  If *note fdopen(): 701. raises an exception, it leaves
     _fd_ untouched (unclosed).

     Availability: Unix, Windows.

     Changed in version 2.3: When specified, the _mode_ argument must
     now start with one of the letters ‘'r'’, ‘'w'’, or ‘'a'’, otherwise
     a *note ValueError: 236. is raised.

     Changed in version 2.5: On Unix, when the _mode_ argument starts
     with ‘'a'’, the _O_APPEND_ flag is set on the file descriptor
     (which the ‘fdopen()’ implementation already does on most
     platforms).

 -- Function: os.popen (command[, mode[, bufsize]])

     Open a pipe to or from _command_.  The return value is an open file
     object connected to the pipe, which can be read or written
     depending on whether _mode_ is ‘'r'’ (default) or ‘'w'’.  The
     _bufsize_ argument has the same meaning as the corresponding
     argument to the built-in *note open(): 2d6. function.  The exit
     status of the command (encoded in the format specified for *note
     wait(): 1102.) is available as the return value of the *note
     close(): 907. method of the file object, except that when the exit
     status is zero (termination without errors), ‘None’ is returned.

     Availability: Unix, Windows.

     Deprecated since version 2.6: This function is obsolete.  Use the
     *note subprocess: 167. module.  Check especially the *note
     Replacing Older Functions with the subprocess Module: 1103.
     section.

     Changed in version 2.0: This function worked unreliably under
     Windows in earlier versions of Python.  This was due to the use of
     the ‘_popen()’ function from the libraries provided with Windows.
     Newer versions of Python do not use the broken implementation from
     the Windows libraries.

 -- Function: os.tmpfile ()

     Return a new file object opened in update mode (‘w+b’).  The file
     has no directory entries associated with it and will be
     automatically deleted once there are no file descriptors for the
     file.

     Availability: Unix, Windows.

  There are a number of different ‘popen*()’ functions that provide
slightly different ways to create subprocesses.

  Deprecated since version 2.6: All of the ‘popen*()’ functions are
obsolete.  Use the *note subprocess: 167. module.

  For each of the ‘popen*()’ variants, if _bufsize_ is specified, it
specifies the buffer size for the I/O pipes.  _mode_, if provided,
should be the string ‘'b'’ or ‘'t'’; on Windows this is needed to
determine whether the file objects should be opened in binary or text
mode.  The default value for _mode_ is ‘'t'’.

  Also, for each of these variants, on Unix, _cmd_ may be a sequence, in
which case arguments will be passed directly to the program without
shell intervention (as with *note os.spawnv(): 1105.).  If _cmd_ is a
string it will be passed to the shell (as with *note os.system(): 3fa.).

  These methods do not make it possible to retrieve the exit status from
the child processes.  The only way to control the input and output
streams and also retrieve the return codes is to use the *note
subprocess: 167. module; these are only available on Unix.

  For a discussion of possible deadlock conditions related to the use of
these functions, see *note Flow Control Issues: 1106.

 -- Function: os.popen2 (cmd[, mode[, bufsize]])

     Execute _cmd_ as a sub-process and return the file objects
     ‘(child_stdin, child_stdout)’.

     Deprecated since version 2.6: This function is obsolete.  Use the
     *note subprocess: 167. module.  Check especially the *note
     Replacing Older Functions with the subprocess Module: 1103.
     section.

     Availability: Unix, Windows.

     New in version 2.0.

 -- Function: os.popen3 (cmd[, mode[, bufsize]])

     Execute _cmd_ as a sub-process and return the file objects
     ‘(child_stdin, child_stdout, child_stderr)’.

     Deprecated since version 2.6: This function is obsolete.  Use the
     *note subprocess: 167. module.  Check especially the *note
     Replacing Older Functions with the subprocess Module: 1103.
     section.

     Availability: Unix, Windows.

     New in version 2.0.

 -- Function: os.popen4 (cmd[, mode[, bufsize]])

     Execute _cmd_ as a sub-process and return the file objects
     ‘(child_stdin, child_stdout_and_stderr)’.

     Deprecated since version 2.6: This function is obsolete.  Use the
     *note subprocess: 167. module.  Check especially the *note
     Replacing Older Functions with the subprocess Module: 1103.
     section.

     Availability: Unix, Windows.

     New in version 2.0.

  (Note that ‘child_stdin, child_stdout, and child_stderr’ are named
from the point of view of the child process, so _child_stdin_ is the
child’s standard input.)

  This functionality is also available in the *note popen2: 134. module
using functions of the same names, but the return values of those
functions have a different order.


File: python.info,  Node: File Descriptor Operations,  Next: Files and Directories,  Prev: File Object Creation,  Up: os --- Miscellaneous operating system interfaces

5.15.1.3 File Descriptor Operations
...................................

These functions operate on I/O streams referenced using file
descriptors.

  File descriptors are small integers corresponding to a file that has
been opened by the current process.  For example, standard input is
usually file descriptor 0, standard output is 1, and standard error is
2.  Further files opened by a process will then be assigned 3, 4, 5, and
so forth.  The name "file descriptor" is slightly deceptive; on Unix
platforms, sockets and pipes are also referenced by file descriptors.

  The *note fileno(): 90b. method can be used to obtain the file
descriptor associated with a file object when required.  Note that using
the file descriptor directly will bypass the file object methods,
ignoring aspects such as internal buffering of data.

 -- Function: os.close (fd)

     Close file descriptor _fd_.

     Availability: Unix, Windows.

          Note: This function is intended for low-level I/O and must be
          applied to a file descriptor as returned by *note os.open():
          5e4. or *note pipe(): 110d.  To close a "file object" returned
          by the built-in function *note open(): 2d6. or by *note
          popen(): 700. or *note fdopen(): 701, use its *note close():
          110e. method.

 -- Function: os.closerange (fd_low, fd_high)

     Close all file descriptors from _fd_low_ (inclusive) to _fd_high_
     (exclusive), ignoring errors.  Equivalent to:

          for fd in xrange(fd_low, fd_high):
              try:
                  os.close(fd)
              except OSError:
                  pass

     Availability: Unix, Windows.

     New in version 2.6.

 -- Function: os.dup (fd)

     Return a duplicate of file descriptor _fd_.

     Availability: Unix, Windows.

 -- Function: os.dup2 (fd, fd2)

     Duplicate file descriptor _fd_ to _fd2_, closing the latter first
     if necessary.

     Availability: Unix, Windows.

 -- Function: os.fchmod (fd, mode)

     Change the mode of the file given by _fd_ to the numeric _mode_.
     See the docs for *note chmod(): e2e. for possible values of _mode_.

     Availability: Unix.

     New in version 2.6.

 -- Function: os.fchown (fd, uid, gid)

     Change the owner and group id of the file given by _fd_ to the
     numeric _uid_ and _gid_.  To leave one of the ids unchanged, set it
     to -1.

     Availability: Unix.

     New in version 2.6.

 -- Function: os.fdatasync (fd)

     Force write of file with filedescriptor _fd_ to disk.  Does not
     force update of metadata.

     Availability: Unix.

          Note: This function is not available on MacOS.

 -- Function: os.fpathconf (fd, name)

     Return system configuration information relevant to an open file.
     _name_ specifies the configuration value to retrieve; it may be a
     string which is the name of a defined system value; these names are
     specified in a number of standards (POSIX.1, Unix 95, Unix 98, and
     others).  Some platforms define additional names as well.  The
     names known to the host operating system are given in the
     ‘pathconf_names’ dictionary.  For configuration variables not
     included in that mapping, passing an integer for _name_ is also
     accepted.

     If _name_ is a string and is not known, *note ValueError: 236. is
     raised.  If a specific value for _name_ is not supported by the
     host system, even if it is included in ‘pathconf_names’, an *note
     OSError: 231. is raised with *note errno.EINVAL: 1116. for the
     error number.

     Availability: Unix.

 -- Function: os.fstat (fd)

     Return status for file descriptor _fd_, like *note stat(): 3c4.

     Availability: Unix, Windows.

 -- Function: os.fstatvfs (fd)

     Return information about the filesystem containing the file
     associated with file descriptor _fd_, like *note statvfs(): 162.

     Availability: Unix.

 -- Function: os.fsync (fd)

     Force write of file with filedescriptor _fd_ to disk.  On Unix,
     this calls the native ‘fsync()’ function; on Windows, the MS
     ‘_commit()’ function.

     If you’re starting with a Python file object _f_, first do
     ‘f.flush()’, and then do ‘os.fsync(f.fileno())’, to ensure that all
     internal buffers associated with _f_ are written to disk.

     Availability: Unix, and Windows starting in 2.2.3.

 -- Function: os.ftruncate (fd, length)

     Truncate the file corresponding to file descriptor _fd_, so that it
     is at most _length_ bytes in size.

     Availability: Unix.

 -- Function: os.isatty (fd)

     Return ‘True’ if the file descriptor _fd_ is open and connected to
     a tty(-like) device, else ‘False’.

 -- Function: os.lseek (fd, pos, how)

     Set the current position of file descriptor _fd_ to position _pos_,
     modified by _how_: *note SEEK_SET: 3c5. or ‘0’ to set the position
     relative to the beginning of the file; *note SEEK_CUR: 3c6. or ‘1’
     to set it relative to the current position; *note SEEK_END: 3c7. or
     ‘2’ to set it relative to the end of the file.  Return the new
     cursor position in bytes, starting from the beginning.

     Availability: Unix, Windows.

 -- Data: os.SEEK_SET
 -- Data: os.SEEK_CUR
 -- Data: os.SEEK_END

     Parameters to the *note lseek(): 3c8. function.  Their values are
     0, 1, and 2, respectively.

     Availability: Windows, Unix.

     New in version 2.5.

 -- Function: os.open (file, flags[, mode])

     Open the file _file_ and set various flags according to _flags_ and
     possibly its mode according to _mode_.  The default _mode_ is
     ‘0777’ (octal), and the current umask value is first masked out.
     Return the file descriptor for the newly opened file.

     For a description of the flag and mode values, see the C run-time
     documentation; flag constants (like *note O_RDONLY: 111a. and *note
     O_WRONLY: 111b.) are defined in this module too (see *note open()
     flag constants: 111c.).  In particular, on Windows adding *note
     O_BINARY: 111d. is needed to open files in binary mode.

     Availability: Unix, Windows.

          Note: This function is intended for low-level I/O. For normal
          usage, use the built-in function *note open(): 2d6, which
          returns a "file object" with *note read(): 90f. and *note
          write(): 912. methods (and many more).  To wrap a file
          descriptor in a "file object", use *note fdopen(): 701.

 -- Function: os.openpty ()

     Open a new pseudo-terminal pair.  Return a pair of file descriptors
     ‘(master, slave)’ for the pty and the tty, respectively.  For a
     (slightly) more portable approach, use the *note pty: 13b. module.

     Availability: some flavors of Unix.

 -- Function: os.pipe ()

     Create a pipe.  Return a pair of file descriptors ‘(r, w)’ usable
     for reading and writing, respectively.

     Availability: Unix, Windows.

 -- Function: os.read (fd, n)

     Read at most _n_ bytes from file descriptor _fd_.  Return a string
     containing the bytes read.  If the end of the file referred to by
     _fd_ has been reached, an empty string is returned.

     Availability: Unix, Windows.

          Note: This function is intended for low-level I/O and must be
          applied to a file descriptor as returned by *note os.open():
          5e4. or *note pipe(): 110d.  To read a "file object" returned
          by the built-in function *note open(): 2d6. or by *note
          popen(): 700. or *note fdopen(): 701, or *note sys.stdin: 636,
          use its *note read(): 90f. or *note readline(): 644. methods.

 -- Function: os.tcgetpgrp (fd)

     Return the process group associated with the terminal given by _fd_
     (an open file descriptor as returned by *note os.open(): 5e4.).

     Availability: Unix.

 -- Function: os.tcsetpgrp (fd, pg)

     Set the process group associated with the terminal given by _fd_
     (an open file descriptor as returned by *note os.open(): 5e4.) to
     _pg_.

     Availability: Unix.

 -- Function: os.ttyname (fd)

     Return a string which specifies the terminal device associated with
     file descriptor _fd_.  If _fd_ is not associated with a terminal
     device, an exception is raised.

     Availability: Unix.

 -- Function: os.write (fd, str)

     Write the string _str_ to file descriptor _fd_.  Return the number
     of bytes actually written.

     Availability: Unix, Windows.

          Note: This function is intended for low-level I/O and must be
          applied to a file descriptor as returned by *note os.open():
          5e4. or *note pipe(): 110d.  To write a "file object" returned
          by the built-in function *note open(): 2d6. or by *note
          popen(): 700. or *note fdopen(): 701, or *note sys.stdout:
          889. or *note sys.stderr: 647, use its *note write(): 912.
          method.

* Menu:

* open() flag constants: open flag constants. 


File: python.info,  Node: open flag constants,  Up: File Descriptor Operations

5.15.1.4 ‘open()’ flag constants
................................

The following constants are options for the _flags_ parameter to the
*note open(): 5e4. function.  They can be combined using the bitwise OR
operator ‘|’.  Some of them are not available on all platforms.  For
descriptions of their availability and use, consult the ‘open(2)’ manual
page on Unix or the MSDN(1) on Windows.

 -- Data: os.O_RDONLY
 -- Data: os.O_WRONLY
 -- Data: os.O_RDWR
 -- Data: os.O_APPEND
 -- Data: os.O_CREAT
 -- Data: os.O_EXCL
 -- Data: os.O_TRUNC

     These constants are available on Unix and Windows.

 -- Data: os.O_DSYNC
 -- Data: os.O_RSYNC
 -- Data: os.O_SYNC
 -- Data: os.O_NDELAY
 -- Data: os.O_NONBLOCK
 -- Data: os.O_NOCTTY
 -- Data: os.O_SHLOCK
 -- Data: os.O_EXLOCK

     These constants are only available on Unix.

 -- Data: os.O_BINARY
 -- Data: os.O_NOINHERIT
 -- Data: os.O_SHORT_LIVED
 -- Data: os.O_TEMPORARY
 -- Data: os.O_RANDOM
 -- Data: os.O_SEQUENTIAL
 -- Data: os.O_TEXT

     These constants are only available on Windows.

 -- Data: os.O_ASYNC
 -- Data: os.O_DIRECT
 -- Data: os.O_DIRECTORY
 -- Data: os.O_NOFOLLOW
 -- Data: os.O_NOATIME

     These constants are GNU extensions and not present if they are not
     defined by the C library.

   ---------- Footnotes ----------

   (1) http://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx


File: python.info,  Node: Files and Directories,  Next: Process Management,  Prev: File Descriptor Operations,  Up: os --- Miscellaneous operating system interfaces

5.15.1.5 Files and Directories
..............................

 -- Function: os.access (path, mode)

     Use the real uid/gid to test for access to _path_.  Note that most
     operations will use the effective uid/gid, therefore this routine
     can be used in a suid/sgid environment to test if the invoking user
     has the specified access to _path_.  _mode_ should be *note F_OK:
     113b. to test the existence of _path_, or it can be the inclusive
     OR of one or more of *note R_OK: 113c, *note W_OK: 113d, and *note
     X_OK: 113e. to test permissions.  Return *note True: 3b0. if access
     is allowed, *note False: 3b1. if not.  See the Unix man page
     ‘access(2)’ for more information.

     Availability: Unix, Windows.

          Note: Using *note access(): 113a. to check if a user is
          authorized to e.g.  open a file before actually doing so using
          *note open(): 2d6. creates a security hole, because the user
          might exploit the short time interval between checking and
          opening the file to manipulate it.  It’s preferable to use
          *note EAFP: 113f. techniques.  For example:

               if os.access("myfile", os.R_OK):
                   with open("myfile") as fp:
                       return fp.read()
               return "some default data"

          is better written as:

               try:
                   fp = open("myfile")
               except IOError as e:
                   if e.errno == errno.EACCES:
                       return "some default data"
                   # Not a permission error.
                   raise
               else:
                   with fp:
                       return fp.read()

          Note: I/O operations may fail even when *note access(): 113a.
          indicates that they would succeed, particularly for operations
          on network filesystems which may have permissions semantics
          beyond the usual POSIX permission-bit model.

 -- Data: os.F_OK

     Value to pass as the _mode_ parameter of *note access(): 113a. to
     test the existence of _path_.

 -- Data: os.R_OK

     Value to include in the _mode_ parameter of *note access(): 113a.
     to test the readability of _path_.

 -- Data: os.W_OK

     Value to include in the _mode_ parameter of *note access(): 113a.
     to test the writability of _path_.

 -- Data: os.X_OK

     Value to include in the _mode_ parameter of *note access(): 113a.
     to determine if _path_ can be executed.

 -- Function: os.chdir (path)

     Change the current working directory to _path_.

     Availability: Unix, Windows.

 -- Function: os.fchdir (fd)

     Change the current working directory to the directory represented
     by the file descriptor _fd_.  The descriptor must refer to an
     opened directory, not an open file.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.getcwd ()

     Return a string representing the current working directory.

     Availability: Unix, Windows.

 -- Function: os.getcwdu ()

     Return a Unicode object representing the current working directory.

     Availability: Unix, Windows.

     New in version 2.3.

 -- Function: os.chflags (path, flags)

     Set the flags of _path_ to the numeric _flags_.  _flags_ may take a
     combination (bitwise OR) of the following values (as defined in the
     *note stat: 161. module):

        * *note stat.UF_NODUMP: e55.

        * *note stat.UF_IMMUTABLE: e56.

        * *note stat.UF_APPEND: e57.

        * *note stat.UF_OPAQUE: e58.

        * *note stat.UF_NOUNLINK: e59.

        * *note stat.UF_COMPRESSED: e5a.

        * *note stat.UF_HIDDEN: e5b.

        * *note stat.SF_ARCHIVED: e5c.

        * *note stat.SF_IMMUTABLE: e5d.

        * *note stat.SF_APPEND: e5e.

        * *note stat.SF_NOUNLINK: e5f.

        * *note stat.SF_SNAPSHOT: e60.

     Availability: Unix.

     New in version 2.6.

 -- Function: os.chroot (path)

     Change the root directory of the current process to _path_.
     Availability: Unix.

     New in version 2.2.

 -- Function: os.chmod (path, mode)

     Change the mode of _path_ to the numeric _mode_.  _mode_ may take
     one of the following values (as defined in the *note stat: 161.
     module) or bitwise ORed combinations of them:

        * *note stat.S_ISUID: e41.

        * *note stat.S_ISGID: e42.

        * *note stat.S_ENFMT: e44.

        * *note stat.S_ISVTX: e45.

        * *note stat.S_IREAD: e51.

        * *note stat.S_IWRITE: e52.

        * *note stat.S_IEXEC: e53.

        * *note stat.S_IRWXU: e46.

        * *note stat.S_IRUSR: e47.

        * *note stat.S_IWUSR: e48.

        * *note stat.S_IXUSR: e49.

        * *note stat.S_IRWXG: e4a.

        * *note stat.S_IRGRP: e4b.

        * *note stat.S_IWGRP: e4c.

        * *note stat.S_IXGRP: e43.

        * *note stat.S_IRWXO: e4d.

        * *note stat.S_IROTH: e4e.

        * *note stat.S_IWOTH: e4f.

        * *note stat.S_IXOTH: e50.

     Availability: Unix, Windows.

          Note: Although Windows supports *note chmod(): e2e, you can
          only set the file’s read-only flag with it (via the
          ‘stat.S_IWRITE’ and ‘stat.S_IREAD’ constants or a
          corresponding integer value).  All other bits are ignored.

 -- Function: os.chown (path, uid, gid)

     Change the owner and group id of _path_ to the numeric _uid_ and
     _gid_.  To leave one of the ids unchanged, set it to -1.

     Availability: Unix.

 -- Function: os.lchflags (path, flags)

     Set the flags of _path_ to the numeric _flags_, like *note
     chflags(): e54, but do not follow symbolic links.

     Availability: Unix.

     New in version 2.6.

 -- Function: os.lchmod (path, mode)

     Change the mode of _path_ to the numeric _mode_.  If path is a
     symlink, this affects the symlink rather than the target.  See the
     docs for *note chmod(): e2e. for possible values of _mode_.

     Availability: Unix.

     New in version 2.6.

 -- Function: os.lchown (path, uid, gid)

     Change the owner and group id of _path_ to the numeric _uid_ and
     _gid_.  This function will not follow symbolic links.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.link (source, link_name)

     Create a hard link pointing to _source_ named _link_name_.

     Availability: Unix.

 -- Function: os.listdir (path)

     Return a list containing the names of the entries in the directory
     given by _path_.  The list is in arbitrary order.  It does not
     include the special entries ‘'.'’ and ‘'..'’ even if they are
     present in the directory.

     Availability: Unix, Windows.

     Changed in version 2.3: On Windows NT/2k/XP and Unix, if _path_ is
     a Unicode object, the result will be a list of Unicode objects.
     Undecodable filenames will still be returned as string objects.

 -- Function: os.lstat (path)

     Perform the equivalent of an ‘lstat()’ system call on the given
     path.  Similar to *note stat(): 3c4, but does not follow symbolic
     links.  On platforms that do not support symbolic links, this is an
     alias for *note stat(): 3c4.

 -- Function: os.mkfifo (path[, mode])

     Create a FIFO (a named pipe) named _path_ with numeric mode _mode_.
     The default _mode_ is ‘0666’ (octal).  The current umask value is
     first masked out from the mode.

     Availability: Unix.

     FIFOs are pipes that can be accessed like regular files.  FIFOs
     exist until they are deleted (for example with *note os.unlink():
     114a.).  Generally, FIFOs are used as rendezvous between "client"
     and "server" type processes: the server opens the FIFO for reading,
     and the client opens it for writing.  Note that *note mkfifo():
     1149. doesn’t open the FIFO — it just creates the rendezvous point.

 -- Function: os.mknod (filename[, mode=0600[, device=0]])

     Create a filesystem node (file, device special file or named pipe)
     named _filename_.  _mode_ specifies both the permissions to use and
     the type of node to be created, being combined (bitwise OR) with
     one of ‘stat.S_IFREG’, ‘stat.S_IFCHR’, ‘stat.S_IFBLK’, and
     ‘stat.S_IFIFO’ (those constants are available in *note stat: 161.).
     For ‘stat.S_IFCHR’ and ‘stat.S_IFBLK’, _device_ defines the newly
     created device special file (probably using *note os.makedev():
     114c.), otherwise it is ignored.

     New in version 2.3.

 -- Function: os.major (device)

     Extract the device major number from a raw device number (usually
     the ‘st_dev’ or ‘st_rdev’ field from ‘stat’).

     New in version 2.3.

 -- Function: os.minor (device)

     Extract the device minor number from a raw device number (usually
     the ‘st_dev’ or ‘st_rdev’ field from ‘stat’).

     New in version 2.3.

 -- Function: os.makedev (major, minor)

     Compose a raw device number from the major and minor device
     numbers.

     New in version 2.3.

 -- Function: os.mkdir (path[, mode])

     Create a directory named _path_ with numeric mode _mode_.  The
     default _mode_ is ‘0777’ (octal).  On some systems, _mode_ is
     ignored.  Where it is used, the current umask value is first masked
     out.  If the directory already exists, *note OSError: 231. is
     raised.

     It is also possible to create temporary directories; see the *note
     tempfile: 173. module’s *note tempfile.mkdtemp(): e89. function.

     Availability: Unix, Windows.

 -- Function: os.makedirs (path[, mode])

     Recursive directory creation function.  Like *note mkdir(): 114f,
     but makes all intermediate-level directories needed to contain the
     leaf directory.  Raises an *note error: e02. exception if the leaf
     directory already exists or cannot be created.  The default _mode_
     is ‘0777’ (octal).  On some systems, _mode_ is ignored.  Where it
     is used, the current umask value is first masked out.

          Note: *note makedirs(): 1150. will become confused if the path
          elements to create include *note os.pardir: 1151.

     New in version 1.5.2.

     Changed in version 2.3: This function now handles UNC paths
     correctly.

 -- Function: os.pathconf (path, name)

     Return system configuration information relevant to a named file.
     _name_ specifies the configuration value to retrieve; it may be a
     string which is the name of a defined system value; these names are
     specified in a number of standards (POSIX.1, Unix 95, Unix 98, and
     others).  Some platforms define additional names as well.  The
     names known to the host operating system are given in the
     ‘pathconf_names’ dictionary.  For configuration variables not
     included in that mapping, passing an integer for _name_ is also
     accepted.

     If _name_ is a string and is not known, *note ValueError: 236. is
     raised.  If a specific value for _name_ is not supported by the
     host system, even if it is included in ‘pathconf_names’, an *note
     OSError: 231. is raised with *note errno.EINVAL: 1116. for the
     error number.

     Availability: Unix.

 -- Data: os.pathconf_names

     Dictionary mapping names accepted by *note pathconf(): 1152. and
     *note fpathconf(): 1115. to the integer values defined for those
     names by the host operating system.  This can be used to determine
     the set of names known to the system.  Availability: Unix.

 -- Function: os.readlink (path)

     Return a string representing the path to which the symbolic link
     points.  The result may be either an absolute or relative pathname;
     if it is relative, it may be converted to an absolute pathname
     using ‘os.path.join(os.path.dirname(path), result)’.

     Changed in version 2.6: If the _path_ is a Unicode object the
     result will also be a Unicode object.

     Availability: Unix.

 -- Function: os.remove (path)

     Remove (delete) the file _path_.  If _path_ is a directory, *note
     OSError: 231. is raised; see *note rmdir(): ead. below to remove a
     directory.  This is identical to the *note unlink(): 114a. function
     documented below.  On Windows, attempting to remove a file that is
     in use causes an exception to be raised; on Unix, the directory
     entry is removed but the storage allocated to the file is not made
     available until the original file is no longer in use.

     Availability: Unix, Windows.

 -- Function: os.removedirs (path)

     Remove directories recursively.  Works like *note rmdir(): ead.
     except that, if the leaf directory is successfully removed, *note
     removedirs(): 1155. tries to successively remove every parent
     directory mentioned in _path_ until an error is raised (which is
     ignored, because it generally means that a parent directory is not
     empty).  For example, ‘os.removedirs('foo/bar/baz')’ will first
     remove the directory ‘'foo/bar/baz'’, and then remove ‘'foo/bar'’
     and ‘'foo'’ if they are empty.  Raises *note OSError: 231. if the
     leaf directory could not be successfully removed.

     New in version 1.5.2.

 -- Function: os.rename (src, dst)

     Rename the file or directory _src_ to _dst_.  If _dst_ is a
     directory, *note OSError: 231. will be raised.  On Unix, if _dst_
     exists and is a file, it will be replaced silently if the user has
     permission.  The operation may fail on some Unix flavors if _src_
     and _dst_ are on different filesystems.  If successful, the
     renaming will be an atomic operation (this is a POSIX requirement).
     On Windows, if _dst_ already exists, *note OSError: 231. will be
     raised even if it is a file; there may be no way to implement an
     atomic rename when _dst_ names an existing file.

     Availability: Unix, Windows.

 -- Function: os.renames (old, new)

     Recursive directory or file renaming function.  Works like *note
     rename(): eaf, except creation of any intermediate directories
     needed to make the new pathname good is attempted first.  After the
     rename, directories corresponding to rightmost path segments of the
     old name will be pruned away using *note removedirs(): 1155.

     New in version 1.5.2.

          Note: This function can fail with the new directory structure
          made if you lack permissions needed to remove the leaf
          directory or file.

 -- Function: os.rmdir (path)

     Remove (delete) the directory _path_.  Only works when the
     directory is empty, otherwise, *note OSError: 231. is raised.  In
     order to remove whole directory trees, *note shutil.rmtree(): eab.
     can be used.

     Availability: Unix, Windows.

 -- Function: os.stat (path)

     Perform the equivalent of a ‘stat()’ system call on the given path.
     (This function follows symlinks; to stat a symlink use *note
     lstat(): e00.)

     The return value is an object whose attributes correspond to the
     members of the ‘stat’ structure, namely:

        * ‘st_mode’ - protection bits,

        * ‘st_ino’ - inode number,

        * ‘st_dev’ - device,

        * ‘st_nlink’ - number of hard links,

        * ‘st_uid’ - user id of owner,

        * ‘st_gid’ - group id of owner,

        * ‘st_size’ - size of file, in bytes,

        * ‘st_atime’ - time of most recent access,

        * ‘st_mtime’ - time of most recent content modification,

        * ‘st_ctime’ - platform dependent; time of most recent metadata
          change on Unix, or the time of creation on Windows)

     Changed in version 2.3: If *note stat_float_times(): 462. returns
     ‘True’, the time values are floats, measuring seconds.  Fractions
     of a second may be reported if the system supports that.  See *note
     stat_float_times(): 462. for further discussion.

     On some Unix systems (such as Linux), the following attributes may
     also be available:

        * ‘st_blocks’ - number of 512-byte blocks allocated for file

        * ‘st_blksize’ - filesystem blocksize for efficient file system
          I/O

        * ‘st_rdev’ - type of device if an inode device

        * ‘st_flags’ - user defined flags for file

     On other Unix systems (such as FreeBSD), the following attributes
     may be available (but may be only filled out if root tries to use
     them):

        * ‘st_gen’ - file generation number

        * ‘st_birthtime’ - time of file creation

     On RISCOS systems, the following attributes are also available:

        * ‘st_ftype’ (file type)

        * ‘st_attrs’ (attributes)

        * ‘st_obtype’ (object type).

          Note: The exact meaning and resolution of the ‘st_atime’,
          ‘st_mtime’, and ‘st_ctime’ attributes depend on the operating
          system and the file system.  For example, on Windows systems
          using the FAT or FAT32 file systems, ‘st_mtime’ has 2-second
          resolution, and ‘st_atime’ has only 1-day resolution.  See
          your operating system documentation for details.

     For backward compatibility, the return value of *note stat(): 3c4.
     is also accessible as a tuple of at least 10 integers giving the
     most important (and portable) members of the ‘stat’ structure, in
     the order ‘st_mode’, ‘st_ino’, ‘st_dev’, ‘st_nlink’, ‘st_uid’,
     ‘st_gid’, ‘st_size’, ‘st_atime’, ‘st_mtime’, ‘st_ctime’.  More
     items may be added at the end by some implementations.

     The standard module *note stat: 161. defines functions and
     constants that are useful for extracting information from a ‘stat’
     structure.  (On Windows, some items are filled with dummy values.)

     Example:

          >>> import os
          >>> statinfo = os.stat('somefile.txt')
          >>> statinfo
          (33188, 422511, 769, 1, 1032, 100, 926, 1105022698,1105022732, 1105022732)
          >>> statinfo.st_size
          926

     Availability: Unix, Windows.

     Changed in version 2.2: Added access to values as attributes of the
     returned object.

     Changed in version 2.5: Added ‘st_gen’ and ‘st_birthtime’.

 -- Function: os.stat_float_times ([newvalue])

     Determine whether ‘stat_result’ represents time stamps as float
     objects.  If _newvalue_ is ‘True’, future calls to *note stat():
     3c4. return floats, if it is ‘False’, future calls return ints.  If
     _newvalue_ is omitted, return the current setting.

     For compatibility with older Python versions, accessing
     ‘stat_result’ as a tuple always returns integers.

     Changed in version 2.5: Python now returns float values by default.
     Applications which do not work correctly with floating point time
     stamps can use this function to restore the old behaviour.

     The resolution of the timestamps (that is the smallest possible
     fraction) depends on the system.  Some systems only support second
     resolution; on these systems, the fraction will always be zero.

     It is recommended that this setting is only changed at program
     startup time in the ___main___ module; libraries should never
     change this setting.  If an application uses a library that works
     incorrectly if floating point time stamps are processed, this
     application should turn the feature off until the library has been
     corrected.

 -- Function: os.statvfs (path)

     Perform a ‘statvfs()’ system call on the given path.  The return
     value is an object whose attributes describe the filesystem on the
     given path, and correspond to the members of the ‘statvfs’
     structure, namely: ‘f_bsize’, ‘f_frsize’, ‘f_blocks’, ‘f_bfree’,
     ‘f_bavail’, ‘f_files’, ‘f_ffree’, ‘f_favail’, ‘f_flag’,
     ‘f_namemax’.

     For backward compatibility, the return value is also accessible as
     a tuple whose values correspond to the attributes, in the order
     given above.  The standard module *note statvfs: 162. defines
     constants that are useful for extracting information from a
     ‘statvfs’ structure when accessing it as a sequence; this remains
     useful when writing code that needs to work with versions of Python
     that don’t support accessing the fields as attributes.

     Availability: Unix.

     Changed in version 2.2: Added access to values as attributes of the
     returned object.

 -- Function: os.symlink (source, link_name)

     Create a symbolic link pointing to _source_ named _link_name_.

     Availability: Unix.

 -- Function: os.tempnam ([dir[, prefix]])

     Return a unique path name that is reasonable for creating a
     temporary file.  This will be an absolute path that names a
     potential directory entry in the directory _dir_ or a common
     location for temporary files if _dir_ is omitted or ‘None’.  If
     given and not ‘None’, _prefix_ is used to provide a short prefix to
     the filename.  Applications are responsible for properly creating
     and managing files created using paths returned by *note tempnam():
     1158.; no automatic cleanup is provided.  On Unix, the environment
     variable ‘TMPDIR’ overrides _dir_, while on Windows ‘TMP’ is used.
     The specific behavior of this function depends on the C library
     implementation; some aspects are underspecified in system
     documentation.

          Warning: Use of *note tempnam(): 1158. is vulnerable to
          symlink attacks; consider using *note tmpfile(): 1104.
          (section *note File Object Creation: 1101.) instead.

     Availability: Unix, Windows.

 -- Function: os.tmpnam ()

     Return a unique path name that is reasonable for creating a
     temporary file.  This will be an absolute path that names a
     potential directory entry in a common location for temporary files.
     Applications are responsible for properly creating and managing
     files created using paths returned by *note tmpnam(): 1159.; no
     automatic cleanup is provided.

          Warning: Use of *note tmpnam(): 1159. is vulnerable to symlink
          attacks; consider using *note tmpfile(): 1104. (section *note
          File Object Creation: 1101.) instead.

     Availability: Unix, Windows.  This function probably shouldn’t be
     used on Windows, though: Microsoft’s implementation of *note
     tmpnam(): 1159. always creates a name in the root directory of the
     current drive, and that’s generally a poor location for a temp file
     (depending on privileges, you may not even be able to open a file
     using this name).

 -- Data: os.TMP_MAX

     The maximum number of unique names that *note tmpnam(): 1159. will
     generate before reusing names.

 -- Function: os.unlink (path)

     Remove (delete) the file _path_.  This is the same function as
     *note remove(): eac.; the *note unlink(): 114a. name is its
     traditional Unix name.

     Availability: Unix, Windows.

 -- Function: os.utime (path, times)

     Set the access and modified times of the file specified by _path_.
     If _times_ is ‘None’, then the file’s access and modified times are
     set to the current time.  (The effect is similar to running the
     Unix program *touch* on the path.)  Otherwise, _times_ must be a
     2-tuple of numbers, of the form ‘(atime, mtime)’ which is used to
     set the access and modified times, respectively.  Whether a
     directory can be given for _path_ depends on whether the operating
     system implements directories as files (for example, Windows does
     not).  Note that the exact times you set here may not be returned
     by a subsequent *note stat(): 3c4. call, depending on the
     resolution with which your operating system records access and
     modification times; see *note stat(): 3c4.

     Changed in version 2.0: Added support for ‘None’ for _times_.

     Availability: Unix, Windows.

 -- Function: os.walk (top, topdown=True, onerror=None,
          followlinks=False)

     Generate the file names in a directory tree by walking the tree
     either top-down or bottom-up.  For each directory in the tree
     rooted at directory _top_ (including _top_ itself), it yields a
     3-tuple ‘(dirpath, dirnames, filenames)’.

     _dirpath_ is a string, the path to the directory.  _dirnames_ is a
     list of the names of the subdirectories in _dirpath_ (excluding
     ‘'.'’ and ‘'..'’).  _filenames_ is a list of the names of the
     non-directory files in _dirpath_.  Note that the names in the lists
     contain no path components.  To get a full path (which begins with
     _top_) to a file or directory in _dirpath_, do
     ‘os.path.join(dirpath, name)’.

     If optional argument _topdown_ is ‘True’ or not specified, the
     triple for a directory is generated before the triples for any of
     its subdirectories (directories are generated top-down).  If
     _topdown_ is ‘False’, the triple for a directory is generated after
     the triples for all of its subdirectories (directories are
     generated bottom-up).  No matter the value of _topdown_, the list
     of subdirectories is retrieved before the tuples for the directory
     and its subdirectories are generated.

     When _topdown_ is ‘True’, the caller can modify the _dirnames_ list
     in-place (perhaps using *note del: 568. or slice assignment), and
     *note walk(): 353. will only recurse into the subdirectories whose
     names remain in _dirnames_; this can be used to prune the search,
     impose a specific order of visiting, or even to inform *note
     walk(): 353. about directories the caller creates or renames before
     it resumes *note walk(): 353. again.  Modifying _dirnames_ when
     _topdown_ is ‘False’ is ineffective, because in bottom-up mode the
     directories in _dirnames_ are generated before _dirpath_ itself is
     generated.

     By default, errors from the *note listdir(): 2d2. call are ignored.
     If optional argument _onerror_ is specified, it should be a
     function; it will be called with one argument, an *note OSError:
     231. instance.  It can report the error to continue with the walk,
     or raise the exception to abort the walk.  Note that the filename
     is available as the ‘filename’ attribute of the exception object.

     By default, *note walk(): 353. will not walk down into symbolic
     links that resolve to directories.  Set _followlinks_ to ‘True’ to
     visit directories pointed to by symlinks, on systems that support
     them.

     New in version 2.6: The _followlinks_ parameter.

          Note: Be aware that setting _followlinks_ to ‘True’ can lead
          to infinite recursion if a link points to a parent directory
          of itself.  *note walk(): 353. does not keep track of the
          directories it visited already.

          Note: If you pass a relative pathname, don’t change the
          current working directory between resumptions of *note walk():
          353.  *note walk(): 353. never changes the current directory,
          and assumes that its caller doesn’t either.

     This example displays the number of bytes taken by non-directory
     files in each directory under the starting directory, except that
     it doesn’t look under any CVS subdirectory:

          import os
          from os.path import join, getsize
          for root, dirs, files in os.walk('python/Lib/email'):
              print root, "consumes",
              print sum(getsize(join(root, name)) for name in files),
              print "bytes in", len(files), "non-directory files"
              if 'CVS' in dirs:
                  dirs.remove('CVS')  # don't visit CVS directories

     In the next example, walking the tree bottom-up is essential: *note
     rmdir(): ead. doesn’t allow deleting a directory before the
     directory is empty:

          # Delete everything reachable from the directory named in "top",
          # assuming there are no symbolic links.
          # CAUTION:  This is dangerous!  For example, if top == '/', it
          # could delete all your disk files.
          import os
          for root, dirs, files in os.walk(top, topdown=False):
              for name in files:
                  os.remove(os.path.join(root, name))
              for name in dirs:
                  os.rmdir(os.path.join(root, name))

     New in version 2.3.


File: python.info,  Node: Process Management,  Next: Miscellaneous System Information,  Prev: Files and Directories,  Up: os --- Miscellaneous operating system interfaces

5.15.1.6 Process Management
...........................

These functions may be used to create and manage processes.

  The various *note exec*: 115e. functions take a list of arguments for
the new program loaded into the process.  In each case, the first of
these arguments is passed to the new program as its own name rather than
as an argument a user may have typed on a command line.  For the C
programmer, this is the ‘argv[0]’ passed to a program’s ‘main()’.  For
example, ‘os.execv('/bin/echo', ['foo', 'bar'])’ will only print ‘bar’
on standard output; ‘foo’ will seem to be ignored.

 -- Function: os.abort ()

     Generate a ‘SIGABRT’ signal to the current process.  On Unix, the
     default behavior is to produce a core dump; on Windows, the process
     immediately returns an exit code of ‘3’.  Be aware that calling
     this function will not call the Python signal handler registered
     for ‘SIGABRT’ with *note signal.signal(): 40d.

     Availability: Unix, Windows.

 -- Function: os.execl (path, arg0, arg1, ...)
 -- Function: os.execle (path, arg0, arg1, ..., env)
 -- Function: os.execlp (file, arg0, arg1, ...)
 -- Function: os.execlpe (file, arg0, arg1, ..., env)
 -- Function: os.execv (path, args)
 -- Function: os.execve (path, args, env)
 -- Function: os.execvp (file, args)
 -- Function: os.execvpe (file, args, env)

     These functions all execute a new program, replacing the current
     process; they do not return.  On Unix, the new executable is loaded
     into the current process, and will have the same process id as the
     caller.  Errors will be reported as *note OSError: 231. exceptions.

     The current process is replaced immediately.  Open file objects and
     descriptors are not flushed, so if there may be data buffered on
     these open files, you should flush them using ‘sys.stdout.flush()’
     or *note os.fsync(): 90a. before calling an *note exec*: 115e.
     function.

     The "l" and "v" variants of the *note exec*: 115e. functions differ
     in how command-line arguments are passed.  The "l" variants are
     perhaps the easiest to work with if the number of parameters is
     fixed when the code is written; the individual parameters simply
     become additional parameters to the ‘execl*()’ functions.  The "v"
     variants are good when the number of parameters is variable, with
     the arguments being passed in a list or tuple as the _args_
     parameter.  In either case, the arguments to the child process
     should start with the name of the command being run, but this is
     not enforced.

     The variants which include a "p" near the end (*note execlp():
     1161, *note execlpe(): 1162, *note execvp(): 1164, and *note
     execvpe(): 1165.) will use the ‘PATH’ environment variable to
     locate the program _file_.  When the environment is being replaced
     (using one of the *note exec*e: 115e. variants, discussed in the
     next paragraph), the new environment is used as the source of the
     ‘PATH’ variable.  The other variants, *note execl(): 115e, *note
     execle(): 1160, *note execv(): 10f2, and *note execve(): 1163, will
     not use the ‘PATH’ variable to locate the executable; _path_ must
     contain an appropriate absolute or relative path.

     For *note execle(): 1160, *note execlpe(): 1162, *note execve():
     1163, and *note execvpe(): 1165. (note that these all end in "e"),
     the _env_ parameter must be a mapping which is used to define the
     environment variables for the new process (these are used instead
     of the current process’ environment); the functions *note execl():
     115e, *note execlp(): 1161, *note execv(): 10f2, and *note
     execvp(): 1164. all cause the new process to inherit the
     environment of the current process.

     Availability: Unix, Windows.

 -- Function: os._exit (n)

     Exit the process with status _n_, without calling cleanup handlers,
     flushing stdio buffers, etc.

     Availability: Unix, Windows.

          Note: The standard way to exit is ‘sys.exit(n)’.  *note
          _exit(): 951. should normally only be used in the child
          process after a *note fork(): 244.

  The following exit codes are defined and can be used with *note
_exit(): 951, although they are not required.  These are typically used
for system programs written in Python, such as a mail server’s external
command delivery program.

     Note: Some of these may not be available on all Unix platforms,
     since there is some variation.  These constants are defined where
     they are defined by the underlying platform.

 -- Data: os.EX_OK

     Exit code that means no error occurred.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_USAGE

     Exit code that means the command was used incorrectly, such as when
     the wrong number of arguments are given.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_DATAERR

     Exit code that means the input data was incorrect.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_NOINPUT

     Exit code that means an input file did not exist or was not
     readable.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_NOUSER

     Exit code that means a specified user did not exist.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_NOHOST

     Exit code that means a specified host did not exist.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_UNAVAILABLE

     Exit code that means that a required service is unavailable.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_SOFTWARE

     Exit code that means an internal software error was detected.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_OSERR

     Exit code that means an operating system error was detected, such
     as the inability to fork or create a pipe.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_OSFILE

     Exit code that means some system file did not exist, could not be
     opened, or had some other kind of error.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_CANTCREAT

     Exit code that means a user specified output file could not be
     created.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_IOERR

     Exit code that means that an error occurred while doing I/O on some
     file.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_TEMPFAIL

     Exit code that means a temporary failure occurred.  This indicates
     something that may not really be an error, such as a network
     connection that couldn’t be made during a retryable operation.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_PROTOCOL

     Exit code that means that a protocol exchange was illegal, invalid,
     or not understood.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_NOPERM

     Exit code that means that there were insufficient permissions to
     perform the operation (but not intended for file system problems).

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_CONFIG

     Exit code that means that some kind of configuration error
     occurred.

     Availability: Unix.

     New in version 2.3.

 -- Data: os.EX_NOTFOUND

     Exit code that means something like "an entry was not found".

     Availability: Unix.

     New in version 2.3.

 -- Function: os.fork ()

     Fork a child process.  Return ‘0’ in the child and the child’s
     process id in the parent.  If an error occurs *note OSError: 231.
     is raised.

     Note that some platforms including FreeBSD <= 6.3, Cygwin and OS/2
     EMX have known issues when using fork() from a thread.

          Warning: See *note ssl: 160. for applications that use the SSL
          module with fork().

     Availability: Unix.

 -- Function: os.forkpty ()

     Fork a child process, using a new pseudo-terminal as the child’s
     controlling terminal.  Return a pair of ‘(pid, fd)’, where _pid_ is
     ‘0’ in the child, the new child’s process id in the parent, and
     _fd_ is the file descriptor of the master end of the
     pseudo-terminal.  For a more portable approach, use the *note pty:
     13b. module.  If an error occurs *note OSError: 231. is raised.

     Availability: some flavors of Unix.

 -- Function: os.kill (pid, sig)

     Send signal _sig_ to the process _pid_.  Constants for the specific
     signals available on the host platform are defined in the *note
     signal: 155. module.

     Windows: The *note signal.CTRL_C_EVENT: 1178. and *note
     signal.CTRL_BREAK_EVENT: 1179. signals are special signals which
     can only be sent to console processes which share a common console
     window, e.g., some subprocesses.  Any other value for _sig_ will
     cause the process to be unconditionally killed by the
     TerminateProcess API, and the exit code will be set to _sig_.  The
     Windows version of *note kill(): 2d1. additionally takes process
     handles to be killed.

     New in version 2.7: Windows support

 -- Function: os.killpg (pgid, sig)

     Send the signal _sig_ to the process group _pgid_.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.nice (increment)

     Add _increment_ to the process’s "niceness".  Return the new
     niceness.

     Availability: Unix.

 -- Function: os.plock (op)

     Lock program segments into memory.  The value of _op_ (defined in
     ‘<sys/lock.h>’) determines which segments are locked.

     Availability: Unix.

 -- Function: os.popen (...)

 -- Function: os.popen2 (...)

 -- Function: os.popen3 (...)

 -- Function: os.popen4 (...)

     Run child processes, returning opened pipes for communications.
     These functions are described in section *note File Object
     Creation: 1101.

 -- Function: os.spawnl (mode, path, ...)
 -- Function: os.spawnle (mode, path, ..., env)
 -- Function: os.spawnlp (mode, file, ...)
 -- Function: os.spawnlpe (mode, file, ..., env)
 -- Function: os.spawnv (mode, path, args)
 -- Function: os.spawnve (mode, path, args, env)
 -- Function: os.spawnvp (mode, file, args)
 -- Function: os.spawnvpe (mode, file, args, env)

     Execute the program _path_ in a new process.

     (Note that the *note subprocess: 167. module provides more powerful
     facilities for spawning new processes and retrieving their results;
     using that module is preferable to using these functions.  Check
     especially the *note Replacing Older Functions with the subprocess
     Module: 1103. section.)

     If _mode_ is *note P_NOWAIT: 1184, this function returns the
     process id of the new process; if _mode_ is *note P_WAIT: 1185,
     returns the process’s exit code if it exits normally, or ‘-signal’,
     where _signal_ is the signal that killed the process.  On Windows,
     the process id will actually be the process handle, so can be used
     with the *note waitpid(): 1186. function.

     The "l" and "v" variants of the *note spawn*: 117d. functions
     differ in how command-line arguments are passed.  The "l" variants
     are perhaps the easiest to work with if the number of parameters is
     fixed when the code is written; the individual parameters simply
     become additional parameters to the ‘spawnl*()’ functions.  The "v"
     variants are good when the number of parameters is variable, with
     the arguments being passed in a list or tuple as the _args_
     parameter.  In either case, the arguments to the child process must
     start with the name of the command being run.

     The variants which include a second "p" near the end (*note
     spawnlp(): 117f, *note spawnlpe(): 1180, *note spawnvp(): 1182, and
     *note spawnvpe(): 1183.) will use the ‘PATH’ environment variable
     to locate the program _file_.  When the environment is being
     replaced (using one of the *note spawn*e: 117d. variants, discussed
     in the next paragraph), the new environment is used as the source
     of the ‘PATH’ variable.  The other variants, *note spawnl(): 117d,
     *note spawnle(): 117e, *note spawnv(): 1105, and *note spawnve():
     1181, will not use the ‘PATH’ variable to locate the executable;
     _path_ must contain an appropriate absolute or relative path.

     For *note spawnle(): 117e, *note spawnlpe(): 1180, *note spawnve():
     1181, and *note spawnvpe(): 1183. (note that these all end in "e"),
     the _env_ parameter must be a mapping which is used to define the
     environment variables for the new process (they are used instead of
     the current process’ environment); the functions *note spawnl():
     117d, *note spawnlp(): 117f, *note spawnv(): 1105, and *note
     spawnvp(): 1182. all cause the new process to inherit the
     environment of the current process.  Note that keys and values in
     the _env_ dictionary must be strings; invalid keys or values will
     cause the function to fail, with a return value of ‘127’.

     As an example, the following calls to *note spawnlp(): 117f. and
     *note spawnvpe(): 1183. are equivalent:

          import os
          os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')

          L = ['cp', 'index.html', '/dev/null']
          os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)

     Availability: Unix, Windows.  *note spawnlp(): 117f, *note
     spawnlpe(): 1180, *note spawnvp(): 1182. and *note spawnvpe():
     1183. are not available on Windows.  *note spawnle(): 117e. and
     *note spawnve(): 1181. are not thread-safe on Windows; we advise
     you to use the *note subprocess: 167. module instead.

     New in version 1.6.

 -- Data: os.P_NOWAIT
 -- Data: os.P_NOWAITO

     Possible values for the _mode_ parameter to the *note spawn*: 117d.
     family of functions.  If either of these values is given, the
     ‘spawn*()’ functions will return as soon as the new process has
     been created, with the process id as the return value.

     Availability: Unix, Windows.

     New in version 1.6.

 -- Data: os.P_WAIT

     Possible value for the _mode_ parameter to the *note spawn*: 117d.
     family of functions.  If this is given as _mode_, the ‘spawn*()’
     functions will not return until the new process has run to
     completion and will return the exit code of the process the run is
     successful, or ‘-signal’ if a signal kills the process.

     Availability: Unix, Windows.

     New in version 1.6.

 -- Data: os.P_DETACH
 -- Data: os.P_OVERLAY

     Possible values for the _mode_ parameter to the *note spawn*: 117d.
     family of functions.  These are less portable than those listed
     above.  *note P_DETACH: 1188. is similar to *note P_NOWAIT: 1184,
     but the new process is detached from the console of the calling
     process.  If *note P_OVERLAY: 1189. is used, the current process
     will be replaced; the ‘spawn*()’ function will not return.

     Availability: Windows.

     New in version 1.6.

 -- Function: os.startfile (path[, operation])

     Start a file with its associated application.

     When _operation_ is not specified or ‘'open'’, this acts like
     double-clicking the file in Windows Explorer, or giving the file
     name as an argument to the *start* command from the interactive
     command shell: the file is opened with whatever application (if
     any) its extension is associated.

     When another _operation_ is given, it must be a "command verb" that
     specifies what should be done with the file.  Common verbs
     documented by Microsoft are ‘'print'’ and ‘'edit'’ (to be used on
     files) as well as ‘'explore'’ and ‘'find'’ (to be used on
     directories).

     *note startfile(): 118a. returns as soon as the associated
     application is launched.  There is no option to wait for the
     application to close, and no way to retrieve the application’s exit
     status.  The _path_ parameter is relative to the current directory.
     If you want to use an absolute path, make sure the first character
     is not a slash (‘'/'’); the underlying Win32 ‘ShellExecute()’
     function doesn’t work if it is.  Use the *note os.path.normpath():
     245. function to ensure that the path is properly encoded for
     Win32.

     Availability: Windows.

     New in version 2.0.

     New in version 2.5: The _operation_ parameter.

 -- Function: os.system (command)

     Execute the command (a string) in a subshell.  This is implemented
     by calling the Standard C function ‘system()’, and has the same
     limitations.  Changes to *note sys.stdin: 636, etc.  are not
     reflected in the environment of the executed command.

     On Unix, the return value is the exit status of the process encoded
     in the format specified for *note wait(): 1102.  Note that POSIX
     does not specify the meaning of the return value of the C
     ‘system()’ function, so the return value of the Python function is
     system-dependent.

     On Windows, the return value is that returned by the system shell
     after running _command_, given by the Windows environment variable
     ‘COMSPEC’: on *command.com* systems (Windows 95, 98 and ME) this is
     always ‘0’; on *cmd.exe* systems (Windows NT, 2000 and XP) this is
     the exit status of the command run; on systems using a non-native
     shell, consult your shell documentation.

     The *note subprocess: 167. module provides more powerful facilities
     for spawning new processes and retrieving their results; using that
     module is preferable to using this function.  See the *note
     Replacing Older Functions with the subprocess Module: 1103. section
     in the *note subprocess: 167. documentation for some helpful
     recipes.

     Availability: Unix, Windows.

 -- Function: os.times ()

     Return a 5-tuple of floating point numbers indicating accumulated
     (processor or other) times, in seconds.  The items are: user time,
     system time, children’s user time, children’s system time, and
     elapsed real time since a fixed point in the past, in that order.
     See the Unix manual page ‘times(2)’ or the corresponding Windows
     Platform API documentation.  On Windows, only the first two items
     are filled, the others are zero.

     Availability: Unix, Windows

 -- Function: os.wait ()

     Wait for completion of a child process, and return a tuple
     containing its pid and exit status indication: a 16-bit number,
     whose low byte is the signal number that killed the process, and
     whose high byte is the exit status (if the signal number is zero);
     the high bit of the low byte is set if a core file was produced.

     Availability: Unix.

 -- Function: os.waitpid (pid, options)

     The details of this function differ on Unix and Windows.

     On Unix: Wait for completion of a child process given by process id
     _pid_, and return a tuple containing its process id and exit status
     indication (encoded as for *note wait(): 1102.).  The semantics of
     the call are affected by the value of the integer _options_, which
     should be ‘0’ for normal operation.

     If _pid_ is greater than ‘0’, *note waitpid(): 1186. requests
     status information for that specific process.  If _pid_ is ‘0’, the
     request is for the status of any child in the process group of the
     current process.  If _pid_ is ‘-1’, the request pertains to any
     child of the current process.  If _pid_ is less than ‘-1’, status
     is requested for any process in the process group ‘-pid’ (the
     absolute value of _pid_).

     An *note OSError: 231. is raised with the value of errno when the
     syscall returns -1.

     On Windows: Wait for completion of a process given by process
     handle _pid_, and return a tuple containing _pid_, and its exit
     status shifted left by 8 bits (shifting makes cross-platform use of
     the function easier).  A _pid_ less than or equal to ‘0’ has no
     special meaning on Windows, and raises an exception.  The value of
     integer _options_ has no effect.  _pid_ can refer to any process
     whose id is known, not necessarily a child process.  The *note
     spawn*: 117d. functions called with *note P_NOWAIT: 1184. return
     suitable process handles.

 -- Function: os.wait3 (options)

     Similar to *note waitpid(): 1186, except no process id argument is
     given and a 3-element tuple containing the child’s process id, exit
     status indication, and resource usage information is returned.
     Refer to *note resource: 146.*note getrusage(): 3cb. for details on
     resource usage information.  The option argument is the same as
     that provided to *note waitpid(): 1186. and *note wait4(): 118d.

     Availability: Unix.

     New in version 2.5.

 -- Function: os.wait4 (pid, options)

     Similar to *note waitpid(): 1186, except a 3-element tuple,
     containing the child’s process id, exit status indication, and
     resource usage information is returned.  Refer to *note resource:
     146.*note getrusage(): 3cb. for details on resource usage
     information.  The arguments to *note wait4(): 118d. are the same as
     those provided to *note waitpid(): 1186.

     Availability: Unix.

     New in version 2.5.

 -- Data: os.WNOHANG

     The option for *note waitpid(): 1186. to return immediately if no
     child process status is available immediately.  The function
     returns ‘(0, 0)’ in this case.

     Availability: Unix.

 -- Data: os.WCONTINUED

     This option causes child processes to be reported if they have been
     continued from a job control stop since their status was last
     reported.

     Availability: Some Unix systems.

     New in version 2.3.

 -- Data: os.WUNTRACED

     This option causes child processes to be reported if they have been
     stopped but their current state has not been reported since they
     were stopped.

     Availability: Unix.

     New in version 2.3.

  The following functions take a process status code as returned by
*note system(): 3fa, *note wait(): 1102, or *note waitpid(): 1186. as a
parameter.  They may be used to determine the disposition of a process.

 -- Function: os.WCOREDUMP (status)

     Return ‘True’ if a core dump was generated for the process,
     otherwise return ‘False’.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.WIFCONTINUED (status)

     Return ‘True’ if the process has been continued from a job control
     stop, otherwise return ‘False’.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.WIFSTOPPED (status)

     Return ‘True’ if the process has been stopped, otherwise return
     ‘False’.

     Availability: Unix.

 -- Function: os.WIFSIGNALED (status)

     Return ‘True’ if the process exited due to a signal, otherwise
     return ‘False’.

     Availability: Unix.

 -- Function: os.WIFEXITED (status)

     Return ‘True’ if the process exited using the ‘exit(2)’ system
     call, otherwise return ‘False’.

     Availability: Unix.

 -- Function: os.WEXITSTATUS (status)

     If ‘WIFEXITED(status)’ is true, return the integer parameter to the
     ‘exit(2)’ system call.  Otherwise, the return value is meaningless.

     Availability: Unix.

 -- Function: os.WSTOPSIG (status)

     Return the signal which caused the process to stop.

     Availability: Unix.

 -- Function: os.WTERMSIG (status)

     Return the signal which caused the process to exit.

     Availability: Unix.


File: python.info,  Node: Miscellaneous System Information,  Next: Miscellaneous Functions,  Prev: Process Management,  Up: os --- Miscellaneous operating system interfaces

5.15.1.7 Miscellaneous System Information
.........................................

 -- Function: os.confstr (name)

     Return string-valued system configuration values.  _name_ specifies
     the configuration value to retrieve; it may be a string which is
     the name of a defined system value; these names are specified in a
     number of standards (POSIX, Unix 95, Unix 98, and others).  Some
     platforms define additional names as well.  The names known to the
     host operating system are given as the keys of the ‘confstr_names’
     dictionary.  For configuration variables not included in that
     mapping, passing an integer for _name_ is also accepted.

     If the configuration value specified by _name_ isn’t defined,
     ‘None’ is returned.

     If _name_ is a string and is not known, *note ValueError: 236. is
     raised.  If a specific value for _name_ is not supported by the
     host system, even if it is included in ‘confstr_names’, an *note
     OSError: 231. is raised with *note errno.EINVAL: 1116. for the
     error number.

     Availability: Unix

 -- Data: os.confstr_names

     Dictionary mapping names accepted by *note confstr(): 119b. to the
     integer values defined for those names by the host operating
     system.  This can be used to determine the set of names known to
     the system.

     Availability: Unix.

 -- Function: os.getloadavg ()

     Return the number of processes in the system run queue averaged
     over the last 1, 5, and 15 minutes or raises *note OSError: 231. if
     the load average was unobtainable.

     Availability: Unix.

     New in version 2.3.

 -- Function: os.sysconf (name)

     Return integer-valued system configuration values.  If the
     configuration value specified by _name_ isn’t defined, ‘-1’ is
     returned.  The comments regarding the _name_ parameter for *note
     confstr(): 119b. apply here as well; the dictionary that provides
     information on the known names is given by ‘sysconf_names’.

     Availability: Unix.

 -- Data: os.sysconf_names

     Dictionary mapping names accepted by *note sysconf(): 119e. to the
     integer values defined for those names by the host operating
     system.  This can be used to determine the set of names known to
     the system.

     Availability: Unix.

  The following data values are used to support path manipulation
operations.  These are defined for all platforms.

  Higher-level operations on pathnames are defined in the *note os.path:
129. module.

 -- Data: os.curdir

     The constant string used by the operating system to refer to the
     current directory.  This is ‘'.'’ for Windows and POSIX. Also
     available via *note os.path: 129.

 -- Data: os.pardir

     The constant string used by the operating system to refer to the
     parent directory.  This is ‘'..'’ for Windows and POSIX. Also
     available via *note os.path: 129.

 -- Data: os.sep

     The character used by the operating system to separate pathname
     components.  This is ‘'/'’ for POSIX and ‘'\\'’ for Windows.  Note
     that knowing this is not sufficient to be able to parse or
     concatenate pathnames — use *note os.path.split(): dfb. and *note
     os.path.join(): e0a. — but it is occasionally useful.  Also
     available via *note os.path: 129.

 -- Data: os.altsep

     An alternative character used by the operating system to separate
     pathname components, or ‘None’ if only one separator character
     exists.  This is set to ‘'/'’ on Windows systems where ‘sep’ is a
     backslash.  Also available via *note os.path: 129.

 -- Data: os.extsep

     The character which separates the base filename from the extension;
     for example, the ‘'.'’ in ‘os.py’.  Also available via *note
     os.path: 129.

     New in version 2.2.

 -- Data: os.pathsep

     The character conventionally used by the operating system to
     separate search path components (as in ‘PATH’), such as ‘':'’ for
     POSIX or ‘';'’ for Windows.  Also available via *note os.path: 129.

 -- Data: os.defpath

     The default search path used by *note exec*p*: 115e. and *note
     spawn*p*: 117d. if the environment doesn’t have a ‘'PATH'’ key.
     Also available via *note os.path: 129.

 -- Data: os.linesep

     The string used to separate (or, rather, terminate) lines on the
     current platform.  This may be a single character, such as ‘'\n'’
     for POSIX, or multiple characters, for example, ‘'\r\n'’ for
     Windows.  Do not use _os.linesep_ as a line terminator when writing
     files opened in text mode (the default); use a single ‘'\n'’
     instead, on all platforms.

 -- Data: os.devnull

     The file path of the null device.  For example: ‘'/dev/null'’ for
     POSIX, ‘'nul'’ for Windows.  Also available via *note os.path: 129.

     New in version 2.4.


File: python.info,  Node: Miscellaneous Functions,  Prev: Miscellaneous System Information,  Up: os --- Miscellaneous operating system interfaces

5.15.1.8 Miscellaneous Functions
................................

 -- Function: os.urandom (n)

     Return a string of _n_ random bytes suitable for cryptographic use.

     This function returns random bytes from an OS-specific randomness
     source.  The returned data should be unpredictable enough for
     cryptographic applications, though its exact quality depends on the
     OS implementation.  On a UNIX-like system this will query
     ‘/dev/urandom’, and on Windows it will use ‘CryptGenRandom()’.  If
     a randomness source is not found, *note NotImplementedError: 94e.
     will be raised.

     For an easy-to-use interface to the random number generator
     provided by your platform, please see *note random.SystemRandom:
     d51.

     New in version 2.4.


File: python.info,  Node: io --- Core tools for working with streams,  Next: time --- Time access and conversions,  Prev: os --- Miscellaneous operating system interfaces,  Up: Generic Operating System Services

5.15.2 ‘io’ — Core tools for working with streams
-------------------------------------------------

New in version 2.6.

  The *note io: f9. module provides the Python interfaces to stream
handling.  Under Python 2.x, this is proposed as an alternative to the
built-in *note file: 1f9. object, but in Python 3.x it is the default
interface to access files and streams.

     Note: Since this module has been designed primarily for Python 3.x,
     you have to be aware that all uses of "bytes" in this document
     refer to the *note str: 1ea. type (of which ‘bytes’ is an alias),
     and all uses of "text" refer to the *note unicode: 1f5. type.
     Furthermore, those two types are not interchangeable in the *note
     io: f9. APIs.

  At the top of the I/O hierarchy is the abstract base class *note
IOBase: 11aa.  It defines the basic interface to a stream.  Note,
however, that there is no separation between reading and writing to
streams; implementations are allowed to raise an *note IOError: 1fa. if
they do not support a given operation.

  Extending *note IOBase: 11aa. is *note RawIOBase: 11ab. which deals
simply with the reading and writing of raw bytes to a stream.  *note
FileIO: 230. subclasses *note RawIOBase: 11ab. to provide an interface
to files in the machine’s file system.

  *note BufferedIOBase: 228. deals with buffering on a raw byte stream
(*note RawIOBase: 11ab.).  Its subclasses, *note BufferedWriter: 11ac,
*note BufferedReader: 229, and *note BufferedRWPair: 11ad. buffer
streams that are readable, writable, and both readable and writable.
*note BufferedRandom: 11ae. provides a buffered interface to random
access streams.  *note BytesIO: 11af. is a simple stream of in-memory
bytes.

  Another *note IOBase: 11aa. subclass, *note TextIOBase: 22f, deals
with streams whose bytes represent text, and handles encoding and
decoding from and to *note unicode: 1f5. strings.  *note TextIOWrapper:
11b0, which extends it, is a buffered text interface to a buffered raw
stream (*note BufferedIOBase: 228.).  Finally, *note StringIO: 164. is
an in-memory stream for unicode text.

  Argument names are not part of the specification, and only the
arguments of *note open(): 11b1. are intended to be used as keyword
arguments.

* Menu:

* Module Interface:: 
* I/O Base Classes:: 
* Raw File I/O:: 
* Buffered Streams:: 
* Text I/O:: 
* Advanced topics:: 


File: python.info,  Node: Module Interface,  Next: I/O Base Classes,  Up: io --- Core tools for working with streams

5.15.2.1 Module Interface
.........................

 -- Data: io.DEFAULT_BUFFER_SIZE

     An int containing the default buffer size used by the module’s
     buffered I/O classes.  *note open(): 11b1. uses the file’s blksize
     (as obtained by *note os.stat(): 3c4.) if possible.

 -- Function: io.open (file, mode='r', buffering=-1, encoding=None,
          errors=None, newline=None, closefd=True)

     Open _file_ and return a corresponding stream.  If the file cannot
     be opened, an *note IOError: 1fa. is raised.

     _file_ is either a string giving the pathname (absolute or relative
     to the current working directory) of the file to be opened or an
     integer file descriptor of the file to be wrapped.  (If a file
     descriptor is given, it is closed when the returned I/O object is
     closed, unless _closefd_ is set to ‘False’.)

     _mode_ is an optional string that specifies the mode in which the
     file is opened.  It defaults to ‘'r'’ which means open for reading
     in text mode.  Other common values are ‘'w'’ for writing
     (truncating the file if it already exists), and ‘'a'’ for appending
     (which on _some_ Unix systems, means that _all_ writes append to
     the end of the file regardless of the current seek position).  In
     text mode, if _encoding_ is not specified the encoding used is
     platform dependent.  (For reading and writing raw bytes use binary
     mode and leave _encoding_ unspecified.)  The available modes are:

     Character     Meaning
                   
                   
     ‘'r'’         open for reading (default)
                   
                   
     ‘'w'’         open for writing, truncating the file first
                   
                   
     ‘'a'’         open for writing, appending to the end of the file if it exists
                   
                   
     ‘'b'’         binary mode
                   
                   
     ‘'t'’         text mode (default)
                   
                   
     ‘'+'’         open a disk file for updating (reading and writing)
                   
                   
     ‘'U'’         universal newlines mode (for backwards compatibility; should not
                   be used in new code)
                   

     The default mode is ‘'rt'’ (open for reading text).  For binary
     random access, the mode ‘'w+b'’ opens and truncates the file to 0
     bytes, while ‘'r+b'’ opens the file without truncation.

     Python distinguishes between files opened in binary and text modes,
     even when the underlying operating system doesn’t.  Files opened in
     binary mode (including ‘'b'’ in the _mode_ argument) return
     contents as ‘bytes’ objects without any decoding.  In text mode
     (the default, or when ‘'t'’ is included in the _mode_ argument),
     the contents of the file are returned as *note unicode: 1f5.
     strings, the bytes having been first decoded using a
     platform-dependent encoding or using the specified _encoding_ if
     given.

     _buffering_ is an optional integer used to set the buffering
     policy.  Pass 0 to switch buffering off (only allowed in binary
     mode), 1 to select line buffering (only usable in text mode), and
     an integer > 1 to indicate the size of a fixed-size chunk buffer.
     When no _buffering_ argument is given, the default buffering policy
     works as follows:

        * Binary files are buffered in fixed-size chunks; the size of
          the buffer is chosen using a heuristic trying to determine the
          underlying device’s "block size" and falling back on *note
          DEFAULT_BUFFER_SIZE: 11b3.  On many systems, the buffer will
          typically be 4096 or 8192 bytes long.

        * "Interactive" text files (files for which ‘isatty()’ returns
          True) use line buffering.  Other text files use the policy
          described above for binary files.

     _encoding_ is the name of the encoding used to decode or encode the
     file.  This should only be used in text mode.  The default encoding
     is platform dependent (whatever *note
     locale.getpreferredencoding(): 11b4. returns), but any encoding
     supported by Python can be used.  See the *note codecs: 63. module
     for the list of supported encodings.

     _errors_ is an optional string that specifies how encoding and
     decoding errors are to be handled–this cannot be used in binary
     mode.  Pass ‘'strict'’ to raise a *note ValueError: 236. exception
     if there is an encoding error (the default of ‘None’ has the same
     effect), or pass ‘'ignore'’ to ignore errors.  (Note that ignoring
     encoding errors can lead to data loss.)  ‘'replace'’ causes a
     replacement marker (such as ‘'?'’) to be inserted where there is
     malformed data.  When writing, ‘'xmlcharrefreplace'’ (replace with
     the appropriate XML character reference) or ‘'backslashreplace'’
     (replace with backslashed escape sequences) can be used.  Any other
     error handling name that has been registered with *note
     codecs.register_error(): 43e. is also valid.

     _newline_ controls how *note universal newlines: 315. works (it
     only applies to text mode).  It can be ‘None’, ‘''’, ‘'\n'’,
     ‘'\r'’, and ‘'\r\n'’.  It works as follows:

        * On input, if _newline_ is ‘None’, universal newlines mode is
          enabled.  Lines in the input can end in ‘'\n'’, ‘'\r'’, or
          ‘'\r\n'’, and these are translated into ‘'\n'’ before being
          returned to the caller.  If it is ‘''’, universal newlines
          mode is enabled, but line endings are returned to the caller
          untranslated.  If it has any of the other legal values, input
          lines are only terminated by the given string, and the line
          ending is returned to the caller untranslated.

        * On output, if _newline_ is ‘None’, any ‘'\n'’ characters
          written are translated to the system default line separator,
          *note os.linesep: 11a4.  If _newline_ is ‘''’, no translation
          takes place.  If _newline_ is any of the other legal values,
          any ‘'\n'’ characters written are translated to the given
          string.

     If _closefd_ is ‘False’ and a file descriptor rather than a
     filename was given, the underlying file descriptor will be kept
     open when the file is closed.  If a filename is given _closefd_ has
     no effect and must be ‘True’ (the default).

     The type of file object returned by the *note open(): 11b1.
     function depends on the mode.  When *note open(): 11b1. is used to
     open a file in a text mode (‘'w'’, ‘'r'’, ‘'wt'’, ‘'rt'’, etc.), it
     returns a subclass of *note TextIOBase: 22f. (specifically *note
     TextIOWrapper: 11b0.).  When used to open a file in a binary mode
     with buffering, the returned class is a subclass of *note
     BufferedIOBase: 228.  The exact class varies: in read binary mode,
     it returns a *note BufferedReader: 229.; in write binary and append
     binary modes, it returns a *note BufferedWriter: 11ac, and in
     read/write mode, it returns a *note BufferedRandom: 11ae.  When
     buffering is disabled, the raw stream, a subclass of *note
     RawIOBase: 11ab, *note FileIO: 230, is returned.

     It is also possible to use an *note unicode: 1f5. or ‘bytes’ string
     as a file for both reading and writing.  For *note unicode: 1f5.
     strings *note StringIO: 164. can be used like a file opened in text
     mode, and for ‘bytes’ a *note BytesIO: 11af. can be used like a
     file opened in a binary mode.

 -- Exception: io.BlockingIOError

     Error raised when blocking would occur on a non-blocking stream.
     It inherits *note IOError: 1fa.

     In addition to those of *note IOError: 1fa, *note BlockingIOError:
     11b5. has one attribute:

      -- Attribute: characters_written

          An integer containing the number of characters written to the
          stream before it blocked.

 -- Exception: io.UnsupportedOperation

     An exception inheriting *note IOError: 1fa. and *note ValueError:
     236. that is raised when an unsupported operation is called on a
     stream.


File: python.info,  Node: I/O Base Classes,  Next: Raw File I/O,  Prev: Module Interface,  Up: io --- Core tools for working with streams

5.15.2.2 I/O Base Classes
.........................

 -- Class: io.IOBase

     The abstract base class for all I/O classes, acting on streams of
     bytes.  There is no public constructor.

     This class provides empty abstract implementations for many methods
     that derived classes can override selectively; the default
     implementations represent a file that cannot be read, written or
     seeked.

     Even though *note IOBase: 11aa. does not declare ‘read()’,
     ‘readinto()’, or ‘write()’ because their signatures will vary,
     implementations and clients should consider those methods part of
     the interface.  Also, implementations may raise a *note IOError:
     1fa. when operations they do not support are called.

     The basic type used for binary data read from or written to a file
     is ‘bytes’ (also known as *note str: 1ea.).  *note bytearray: 1f7.s
     are accepted too, and in some cases (such as ‘readinto’) required.
     Text I/O classes work with *note unicode: 1f5. data.

     Note that calling any method (even inquiries) on a closed stream is
     undefined.  Implementations may raise *note IOError: 1fa. in this
     case.

     IOBase (and its subclasses) support the iterator protocol, meaning
     that an *note IOBase: 11aa. object can be iterated over yielding
     the lines in a stream.  Lines are defined slightly differently
     depending on whether the stream is a binary stream (yielding
     ‘bytes’), or a text stream (yielding *note unicode: 1f5. strings).
     See *note readline(): 11b9. below.

     IOBase is also a context manager and therefore supports the *note
     with: 1c0. statement.  In this example, _file_ is closed after the
     *note with: 1c0. statement’s suite is finished—even if an exception
     occurs:

          with io.open('spam.txt', 'w') as file:
              file.write(u'Spam and eggs!')

     *note IOBase: 11aa. provides these data attributes and methods:

      -- Method: close ()

          Flush and close this stream.  This method has no effect if the
          file is already closed.  Once the file is closed, any
          operation on the file (e.g.  reading or writing) will raise a
          *note ValueError: 236.

          As a convenience, it is allowed to call this method more than
          once; only the first call, however, will have an effect.

      -- Attribute: closed

          True if the stream is closed.

      -- Method: fileno ()

          Return the underlying file descriptor (an integer) of the
          stream if it exists.  An *note IOError: 1fa. is raised if the
          IO object does not use a file descriptor.

      -- Method: flush ()

          Flush the write buffers of the stream if applicable.  This
          does nothing for read-only and non-blocking streams.

      -- Method: isatty ()

          Return ‘True’ if the stream is interactive (i.e., connected to
          a terminal/tty device).

      -- Method: readable ()

          Return ‘True’ if the stream can be read from.  If ‘False’,
          ‘read()’ will raise *note IOError: 1fa.

      -- Method: readline (limit=-1)

          Read and return one line from the stream.  If _limit_ is
          specified, at most _limit_ bytes will be read.

          The line terminator is always ‘b'\n'’ for binary files; for
          text files, the _newlines_ argument to *note open(): 11b1. can
          be used to select the line terminator(s) recognized.

      -- Method: readlines (hint=-1)

          Read and return a list of lines from the stream.  _hint_ can
          be specified to control the number of lines read: no more
          lines will be read if the total size (in bytes/characters) of
          all lines so far exceeds _hint_.

          Note that it’s already possible to iterate on file objects
          using ‘for line in file: ...’ without calling
          ‘file.readlines()’.

      -- Method: seek (offset, whence=SEEK_SET)

          Change the stream position to the given byte _offset_.
          _offset_ is interpreted relative to the position indicated by
          _whence_.  Values for _whence_ are:

             * ‘SEEK_SET’ or ‘0’ – start of the stream (the default);
               _offset_ should be zero or positive

             * ‘SEEK_CUR’ or ‘1’ – current stream position; _offset_ may
               be negative

             * ‘SEEK_END’ or ‘2’ – end of the stream; _offset_ is
               usually negative

          Return the new absolute position.

          New in version 2.7: The ‘SEEK_*’ constants

      -- Method: seekable ()

          Return ‘True’ if the stream supports random access.  If
          ‘False’, *note seek(): 11c0, *note tell(): 11c2. and *note
          truncate(): 232. will raise *note IOError: 1fa.

      -- Method: tell ()

          Return the current stream position.

      -- Method: truncate (size=None)

          Resize the stream to the given _size_ in bytes (or the current
          position if _size_ is not specified).  The current stream
          position isn’t changed.  This resizing can extend or reduce
          the current file size.  In case of extension, the contents of
          the new file area depend on the platform (on most systems,
          additional bytes are zero-filled, on Windows they’re
          undetermined).  The new file size is returned.

      -- Method: writable ()

          Return ‘True’ if the stream supports writing.  If ‘False’,
          ‘write()’ and *note truncate(): 232. will raise *note IOError:
          1fa.

      -- Method: writelines (lines)

          Write a list of lines to the stream.  Line separators are not
          added, so it is usual for each of the lines provided to have a
          line separator at the end.

      -- Method: __del__ ()

          Prepare for object destruction.  *note IOBase: 11aa. provides
          a default implementation of this method that calls the
          instance’s *note close(): 110e. method.

 -- Class: io.RawIOBase

     Base class for raw binary I/O. It inherits *note IOBase: 11aa.
     There is no public constructor.

     Raw binary I/O typically provides low-level access to an underlying
     OS device or API, and does not try to encapsulate it in high-level
     primitives (this is left to Buffered I/O and Text I/O, described
     later in this page).

     In addition to the attributes and methods from *note IOBase: 11aa,
     RawIOBase provides the following methods:

      -- Method: read (n=-1)

          Read up to _n_ bytes from the object and return them.  As a
          convenience, if _n_ is unspecified or -1, *note readall():
          11c7. is called.  Otherwise, only one system call is ever
          made.  Fewer than _n_ bytes may be returned if the operating
          system call returns fewer than _n_ bytes.

          If 0 bytes are returned, and _n_ was not 0, this indicates end
          of file.  If the object is in non-blocking mode and no bytes
          are available, ‘None’ is returned.

      -- Method: readall ()

          Read and return all the bytes from the stream until EOF, using
          multiple calls to the stream if necessary.

      -- Method: readinto (b)

          Read up to len(b) bytes into bytearray _b_ and return the
          number of bytes read.  If the object is in non-blocking mode
          and no bytes are available, ‘None’ is returned.

      -- Method: write (b)

          Write the given bytes or bytearray object, _b_, to the
          underlying raw stream and return the number of bytes written.
          This can be less than ‘len(b)’, depending on specifics of the
          underlying raw stream, and especially if it is in non-blocking
          mode.  ‘None’ is returned if the raw stream is set not to
          block and no single byte could be readily written to it.

 -- Class: io.BufferedIOBase

     Base class for binary streams that support some kind of buffering.
     It inherits *note IOBase: 11aa.  There is no public constructor.

     The main difference with *note RawIOBase: 11ab. is that methods
     *note read(): 11ca, *note readinto(): 11cb. and *note write():
     11cc. will try (respectively) to read as much input as requested or
     to consume all given output, at the expense of making perhaps more
     than one system call.

     In addition, those methods can raise *note BlockingIOError: 11b5.
     if the underlying raw stream is in non-blocking mode and cannot
     take or give enough data; unlike their *note RawIOBase: 11ab.
     counterparts, they will never return ‘None’.

     Besides, the *note read(): 11ca. method does not have a default
     implementation that defers to *note readinto(): 11cb.

     A typical *note BufferedIOBase: 228. implementation should not
     inherit from a *note RawIOBase: 11ab. implementation, but wrap one,
     like *note BufferedWriter: 11ac. and *note BufferedReader: 229. do.

     *note BufferedIOBase: 228. provides or overrides these methods and
     attribute in addition to those from *note IOBase: 11aa.:

      -- Attribute: raw

          The underlying raw stream (a *note RawIOBase: 11ab. instance)
          that *note BufferedIOBase: 228. deals with.  This is not part
          of the *note BufferedIOBase: 228. API and may not exist on
          some implementations.

      -- Method: detach ()

          Separate the underlying raw stream from the buffer and return
          it.

          After the raw stream has been detached, the buffer is in an
          unusable state.

          Some buffers, like *note BytesIO: 11af, do not have the
          concept of a single raw stream to return from this method.
          They raise *note UnsupportedOperation: 11b7.

          New in version 2.7.

      -- Method: read (n=-1)

          Read and return up to _n_ bytes.  If the argument is omitted,
          ‘None’, or negative, data is read and returned until EOF is
          reached.  An empty bytes object is returned if the stream is
          already at EOF.

          If the argument is positive, and the underlying raw stream is
          not interactive, multiple raw reads may be issued to satisfy
          the byte count (unless EOF is reached first).  But for
          interactive raw streams, at most one raw read will be issued,
          and a short result does not imply that EOF is imminent.

          A *note BlockingIOError: 11b5. is raised if the underlying raw
          stream is in non blocking-mode, and has no data available at
          the moment.

      -- Method: read1 (n=-1)

          Read and return up to _n_ bytes, with at most one call to the
          underlying raw stream’s *note read(): 11c6. method.  This can
          be useful if you are implementing your own buffering on top of
          a *note BufferedIOBase: 228. object.

      -- Method: readinto (b)

          Read up to len(b) bytes into bytearray _b_ and return the
          number of bytes read.

          Like *note read(): 11ca, multiple reads may be issued to the
          underlying raw stream, unless the latter is ’interactive’.

          A *note BlockingIOError: 11b5. is raised if the underlying raw
          stream is in non blocking-mode, and has no data available at
          the moment.

      -- Method: write (b)

          Write the given bytes or bytearray object, _b_ and return the
          number of bytes written (never less than ‘len(b)’, since if
          the write fails an *note IOError: 1fa. will be raised).
          Depending on the actual implementation, these bytes may be
          readily written to the underlying stream, or held in a buffer
          for performance and latency reasons.

          When in non-blocking mode, a *note BlockingIOError: 11b5. is
          raised if the data needed to be written to the raw stream but
          it couldn’t accept all the data without blocking.


File: python.info,  Node: Raw File I/O,  Next: Buffered Streams,  Prev: I/O Base Classes,  Up: io --- Core tools for working with streams

5.15.2.3 Raw File I/O
.....................

 -- Class: io.FileIO (name, mode='r', closefd=True)

     *note FileIO: 230. represents an OS-level file containing bytes
     data.  It implements the *note RawIOBase: 11ab. interface (and
     therefore the *note IOBase: 11aa. interface, too).

     The _name_ can be one of two things:

        * a string representing the path to the file which will be
          opened;

        * an integer representing the number of an existing OS-level
          file descriptor to which the resulting *note FileIO: 230.
          object will give access.

     The _mode_ can be ‘'r'’, ‘'w'’ or ‘'a'’ for reading (default),
     writing, or appending.  The file will be created if it doesn’t
     exist when opened for writing or appending; it will be truncated
     when opened for writing.  Add a ‘'+'’ to the mode to allow
     simultaneous reading and writing.

     The ‘read()’ (when called with a positive argument), ‘readinto()’
     and ‘write()’ methods on this class will only make one system call.

     In addition to the attributes and methods from *note IOBase: 11aa.
     and *note RawIOBase: 11ab, *note FileIO: 230. provides the
     following data attributes and methods:

      -- Attribute: mode

          The mode as given in the constructor.

      -- Attribute: name

          The file name.  This is the file descriptor of the file when
          no name is given in the constructor.


File: python.info,  Node: Buffered Streams,  Next: Text I/O,  Prev: Raw File I/O,  Up: io --- Core tools for working with streams

5.15.2.4 Buffered Streams
.........................

Buffered I/O streams provide a higher-level interface to an I/O device
than raw I/O does.

 -- Class: io.BytesIO ([initial_bytes])

     A stream implementation using an in-memory bytes buffer.  It
     inherits *note BufferedIOBase: 228.

     The argument _initial_bytes_ is an optional initial ‘bytes’.

     *note BytesIO: 11af. provides or overrides these methods in
     addition to those from *note BufferedIOBase: 228. and *note IOBase:
     11aa.:

      -- Method: getvalue ()

          Return ‘bytes’ containing the entire contents of the buffer.

      -- Method: read1 ()

          In *note BytesIO: 11af, this is the same as ‘read()’.

 -- Class: io.BufferedReader (raw, buffer_size=DEFAULT_BUFFER_SIZE)

     A buffer providing higher-level access to a readable, sequential
     *note RawIOBase: 11ab. object.  It inherits *note BufferedIOBase:
     228.  When reading data from this object, a larger amount of data
     may be requested from the underlying raw stream, and kept in an
     internal buffer.  The buffered data can then be returned directly
     on subsequent reads.

     The constructor creates a *note BufferedReader: 229. for the given
     readable _raw_ stream and _buffer_size_.  If _buffer_size_ is
     omitted, *note DEFAULT_BUFFER_SIZE: 11b3. is used.

     *note BufferedReader: 229. provides or overrides these methods in
     addition to those from *note BufferedIOBase: 228. and *note IOBase:
     11aa.:

      -- Method: peek ([n])

          Return bytes from the stream without advancing the position.
          At most one single read on the raw stream is done to satisfy
          the call.  The number of bytes returned may be less or more
          than requested.

      -- Method: read ([n])

          Read and return _n_ bytes, or if _n_ is not given or negative,
          until EOF or if the read call would block in non-blocking
          mode.

      -- Method: read1 (n)

          Read and return up to _n_ bytes with only one call on the raw
          stream.  If at least one byte is buffered, only buffered bytes
          are returned.  Otherwise, one raw stream read call is made.

 -- Class: io.BufferedWriter (raw, buffer_size=DEFAULT_BUFFER_SIZE)

     A buffer providing higher-level access to a writeable, sequential
     *note RawIOBase: 11ab. object.  It inherits *note BufferedIOBase:
     228.  When writing to this object, data is normally held into an
     internal buffer.  The buffer will be written out to the underlying
     *note RawIOBase: 11ab. object under various conditions, including:

        * when the buffer gets too small for all pending data;

        * when *note flush(): 11d9. is called;

        * when a ‘seek()’ is requested (for *note BufferedRandom: 11ae.
          objects);

        * when the *note BufferedWriter: 11ac. object is closed or
          destroyed.

     The constructor creates a *note BufferedWriter: 11ac. for the given
     writeable _raw_ stream.  If the _buffer_size_ is not given, it
     defaults to *note DEFAULT_BUFFER_SIZE: 11b3.

     A third argument, _max_buffer_size_, is supported, but unused and
     deprecated.

     *note BufferedWriter: 11ac. provides or overrides these methods in
     addition to those from *note BufferedIOBase: 228. and *note IOBase:
     11aa.:

      -- Method: flush ()

          Force bytes held in the buffer into the raw stream.  A *note
          BlockingIOError: 11b5. should be raised if the raw stream
          blocks.

      -- Method: write (b)

          Write the bytes or bytearray object, _b_ and return the number
          of bytes written.  When in non-blocking mode, a *note
          BlockingIOError: 11b5. is raised if the buffer needs to be
          written out but the raw stream blocks.

 -- Class: io.BufferedRandom (raw, buffer_size=DEFAULT_BUFFER_SIZE)

     A buffered interface to random access streams.  It inherits *note
     BufferedReader: 229. and *note BufferedWriter: 11ac, and further
     supports ‘seek()’ and ‘tell()’ functionality.

     The constructor creates a reader and writer for a seekable raw
     stream, given in the first argument.  If the _buffer_size_ is
     omitted it defaults to *note DEFAULT_BUFFER_SIZE: 11b3.

     A third argument, _max_buffer_size_, is supported, but unused and
     deprecated.

     *note BufferedRandom: 11ae. is capable of anything *note
     BufferedReader: 229. or *note BufferedWriter: 11ac. can do.

 -- Class: io.BufferedRWPair (reader, writer,
          buffer_size=DEFAULT_BUFFER_SIZE)

     A buffered I/O object combining two unidirectional *note RawIOBase:
     11ab. objects – one readable, the other writeable – into a single
     bidirectional endpoint.  It inherits *note BufferedIOBase: 228.

     _reader_ and _writer_ are *note RawIOBase: 11ab. objects that are
     readable and writeable respectively.  If the _buffer_size_ is
     omitted it defaults to *note DEFAULT_BUFFER_SIZE: 11b3.

     A fourth argument, _max_buffer_size_, is supported, but unused and
     deprecated.

     *note BufferedRWPair: 11ad. implements all of *note BufferedIOBase:
     228.’s methods except for *note detach(): 11ce, which raises *note
     UnsupportedOperation: 11b7.

          Warning: *note BufferedRWPair: 11ad. does not attempt to
          synchronize accesses to its underlying raw streams.  You
          should not pass it the same object as reader and writer; use
          *note BufferedRandom: 11ae. instead.


File: python.info,  Node: Text I/O,  Next: Advanced topics,  Prev: Buffered Streams,  Up: io --- Core tools for working with streams

5.15.2.5 Text I/O
.................

 -- Class: io.TextIOBase

     Base class for text streams.  This class provides an unicode
     character and line based interface to stream I/O. There is no
     ‘readinto()’ method because Python’s *note unicode: 1f5. strings
     are immutable.  It inherits *note IOBase: 11aa.  There is no public
     constructor.

     *note TextIOBase: 22f. provides or overrides these data attributes
     and methods in addition to those from *note IOBase: 11aa.:

      -- Attribute: encoding

          The name of the encoding used to decode the stream’s bytes
          into strings, and to encode strings into bytes.

      -- Attribute: errors

          The error setting of the decoder or encoder.

      -- Attribute: newlines

          A string, a tuple of strings, or ‘None’, indicating the
          newlines translated so far.  Depending on the implementation
          and the initial constructor flags, this may not be available.

      -- Attribute: buffer

          The underlying binary buffer (a *note BufferedIOBase: 228.
          instance) that *note TextIOBase: 22f. deals with.  This is not
          part of the *note TextIOBase: 22f. API and may not exist on
          some implementations.

      -- Method: detach ()

          Separate the underlying binary buffer from the *note
          TextIOBase: 22f. and return it.

          After the underlying buffer has been detached, the *note
          TextIOBase: 22f. is in an unusable state.

          Some *note TextIOBase: 22f. implementations, like *note
          StringIO: 164, may not have the concept of an underlying
          buffer and calling this method will raise *note
          UnsupportedOperation: 11b7.

          New in version 2.7.

      -- Method: read (n)

          Read and return at most _n_ characters from the stream as a
          single *note unicode: 1f5.  If _n_ is negative or ‘None’,
          reads until EOF.

      -- Method: readline (limit=-1)

          Read until newline or EOF and return a single ‘unicode’.  If
          the stream is already at EOF, an empty string is returned.

          If _limit_ is specified, at most _limit_ characters will be
          read.

      -- Method: seek (offset, whence=SEEK_SET)

          Change the stream position to the given _offset_.  Behaviour
          depends on the _whence_ parameter:

             * ‘SEEK_SET’ or ‘0’: seek from the start of the stream (the
               default); _offset_ must either be a number returned by
               *note TextIOBase.tell(): 11e3, or zero.  Any other
               _offset_ value produces undefined behaviour.

             * ‘SEEK_CUR’ or ‘1’: "seek" to the current position;
               _offset_ must be zero, which is a no-operation (all other
               values are unsupported).

             * ‘SEEK_END’ or ‘2’: seek to the end of the stream;
               _offset_ must be zero (all other values are unsupported).

          Return the new absolute position as an opaque number.

          New in version 2.7: The ‘SEEK_*’ constants.

      -- Method: tell ()

          Return the current stream position as an opaque number.  The
          number does not usually represent a number of bytes in the
          underlying binary storage.

      -- Method: write (s)

          Write the *note unicode: 1f5. string _s_ to the stream and
          return the number of characters written.

 -- Class: io.TextIOWrapper (buffer, encoding=None, errors=None,
          newline=None, line_buffering=False)

     A buffered text stream over a *note BufferedIOBase: 228. binary
     stream.  It inherits *note TextIOBase: 22f.

     _encoding_ gives the name of the encoding that the stream will be
     decoded or encoded with.  It defaults to *note
     locale.getpreferredencoding(): 11b4.

     _errors_ is an optional string that specifies how encoding and
     decoding errors are to be handled.  Pass ‘'strict'’ to raise a
     *note ValueError: 236. exception if there is an encoding error (the
     default of ‘None’ has the same effect), or pass ‘'ignore'’ to
     ignore errors.  (Note that ignoring encoding errors can lead to
     data loss.)  ‘'replace'’ causes a replacement marker (such as
     ‘'?'’) to be inserted where there is malformed data.  When writing,
     ‘'xmlcharrefreplace'’ (replace with the appropriate XML character
     reference) or ‘'backslashreplace'’ (replace with backslashed escape
     sequences) can be used.  Any other error handling name that has
     been registered with *note codecs.register_error(): 43e. is also
     valid.

     _newline_ controls how line endings are handled.  It can be ‘None’,
     ‘''’, ‘'\n'’, ‘'\r'’, and ‘'\r\n'’.  It works as follows:

        * On input, if _newline_ is ‘None’, *note universal newlines:
          315. mode is enabled.  Lines in the input can end in ‘'\n'’,
          ‘'\r'’, or ‘'\r\n'’, and these are translated into ‘'\n'’
          before being returned to the caller.  If it is ‘''’, universal
          newlines mode is enabled, but line endings are returned to the
          caller untranslated.  If it has any of the other legal values,
          input lines are only terminated by the given string, and the
          line ending is returned to the caller untranslated.

        * On output, if _newline_ is ‘None’, any ‘'\n'’ characters
          written are translated to the system default line separator,
          *note os.linesep: 11a4.  If _newline_ is ‘''’, no translation
          takes place.  If _newline_ is any of the other legal values,
          any ‘'\n'’ characters written are translated to the given
          string.

     If _line_buffering_ is ‘True’, ‘flush()’ is implied when a call to
     write contains a newline character.

     *note TextIOWrapper: 11b0. provides one attribute in addition to
     those of *note TextIOBase: 22f. and its parents:

      -- Attribute: line_buffering

          Whether line buffering is enabled.

 -- Class: io.StringIO (initial_value=u'', newline=u'\n')

     An in-memory stream for unicode text.  It inherits *note
     TextIOWrapper: 11b0.

     The initial value of the buffer (an empty unicode string by
     default) can be set by providing _initial_value_.  The _newline_
     argument works like that of *note TextIOWrapper: 11b0.  The default
     is to consider only ‘\n’ characters as end of lines and to do no
     newline translation.

     *note StringIO: 164. provides this method in addition to those from
     *note TextIOWrapper: 11b0. and its parents:

      -- Method: getvalue ()

          Return a ‘unicode’ containing the entire contents of the
          buffer at any time before the *note StringIO: 164. object’s
          ‘close()’ method is called.

     Example usage:

          import io

          output = io.StringIO()
          output.write(u'First line.\n')
          output.write(u'Second line.\n')

          # Retrieve file contents -- this will be
          # u'First line.\nSecond line.\n'
          contents = output.getvalue()

          # Close object and discard memory buffer --
          # .getvalue() will now raise an exception.
          output.close()

 -- Class: io.IncrementalNewlineDecoder

     A helper codec that decodes newlines for *note universal newlines:
     315. mode.  It inherits *note codecs.IncrementalDecoder: a4f.


File: python.info,  Node: Advanced topics,  Prev: Text I/O,  Up: io --- Core tools for working with streams

5.15.2.6 Advanced topics
........................

Here we will discuss several advanced topics pertaining to the concrete
I/O implementations described above.

* Menu:

* Performance:: 
* Multi-threading: Multi-threading<2>. 
* Reentrancy:: 

Performance

* Binary I/O:: 
* Text I/O: Text I/O<2>. 


File: python.info,  Node: Performance,  Next: Multi-threading<2>,  Up: Advanced topics

5.15.2.7 Performance
....................

* Menu:

* Binary I/O:: 
* Text I/O: Text I/O<2>. 


File: python.info,  Node: Binary I/O,  Next: Text I/O<2>,  Up: Performance

5.15.2.8 Binary I/O
...................

By reading and writing only large chunks of data even when the user asks
for a single byte, buffered I/O is designed to hide any inefficiency in
calling and executing the operating system’s unbuffered I/O routines.
The gain will vary very much depending on the OS and the kind of I/O
which is performed (for example, on some contemporary OSes such as
Linux, unbuffered disk I/O can be as fast as buffered I/O). The bottom
line, however, is that buffered I/O will offer you predictable
performance regardless of the platform and the backing device.
Therefore, it is most always preferable to use buffered I/O rather than
unbuffered I/O.


File: python.info,  Node: Text I/O<2>,  Prev: Binary I/O,  Up: Performance

5.15.2.9 Text I/O
.................

Text I/O over a binary storage (such as a file) is significantly slower
than binary I/O over the same storage, because it implies conversions
from unicode to binary data using a character codec.  This can become
noticeable if you handle huge amounts of text data (for example very
large log files).  Also, ‘TextIOWrapper.tell()’ and
‘TextIOWrapper.seek()’ are both quite slow due to the reconstruction
algorithm used.

  *note StringIO: 164, however, is a native in-memory unicode container
and will exhibit similar speed to *note BytesIO: 11af.


File: python.info,  Node: Multi-threading<2>,  Next: Reentrancy,  Prev: Performance,  Up: Advanced topics

5.15.2.10 Multi-threading
.........................

*note FileIO: 230. objects are thread-safe to the extent that the
operating system calls (such as ‘read(2)’ under Unix) they are wrapping
are thread-safe too.

  Binary buffered objects (instances of *note BufferedReader: 229, *note
BufferedWriter: 11ac, *note BufferedRandom: 11ae. and *note
BufferedRWPair: 11ad.) protect their internal structures using a lock;
it is therefore safe to call them from multiple threads at once.

  *note TextIOWrapper: 11b0. objects are not thread-safe.


File: python.info,  Node: Reentrancy,  Prev: Multi-threading<2>,  Up: Advanced topics

5.15.2.11 Reentrancy
....................

Binary buffered objects (instances of *note BufferedReader: 229, *note
BufferedWriter: 11ac, *note BufferedRandom: 11ae. and *note
BufferedRWPair: 11ad.) are not reentrant.  While reentrant calls will
not happen in normal situations, they can arise if you are doing I/O in
a *note signal: 155. handler.  If it is attempted to enter a buffered
object again while already being accessed _from the same thread_, then a
*note RuntimeError: 39b. is raised.

  The above implicitly extends to text files, since the *note open():
2d6. function will wrap a buffered object inside a *note TextIOWrapper:
11b0.  This includes standard streams and therefore affects the built-in
function *note print(): 30b. as well.


File: python.info,  Node: time --- Time access and conversions,  Next: argparse --- Parser for command-line options arguments and sub-commands,  Prev: io --- Core tools for working with streams,  Up: Generic Operating System Services

5.15.3 ‘time’ — Time access and conversions
-------------------------------------------

This module provides various time-related functions.  For related
functionality, see also the *note datetime: 7d. and *note calendar: 1f.
modules.

  Although this module is always available, not all functions are
available on all platforms.  Most of the functions defined in this
module call platform C library functions with the same name.  It may
sometimes be helpful to consult the platform documentation, because the
semantics of these functions varies among platforms.

  An explanation of some terminology and conventions is in order.

   * The _epoch_ is the point where the time starts.  On January 1st of
     that year, at 0 hours, the "time since the epoch" is zero.  For
     Unix, the epoch is 1970.  To find out what the epoch is, look at
     ‘gmtime(0)’.

   * The functions in this module do not handle dates and times before
     the epoch or far in the future.  The cut-off point in the future is
     determined by the C library; for Unix, it is typically in 2038.

   * *Year 2000 (Y2K) issues*: Python depends on the platform’s C
     library, which generally doesn’t have year 2000 issues, since all
     dates and times are represented internally as seconds since the
     epoch.  Functions accepting a *note struct_time: ae0. (see below)
     generally require a 4-digit year.  For backward compatibility,
     2-digit years are supported if the module variable ‘accept2dyear’
     is a non-zero integer; this variable is initialized to ‘1’ unless
     the environment variable *note PYTHONY2K: 650. is set to a
     non-empty string, in which case it is initialized to ‘0’.  Thus,
     you can set *note PYTHONY2K: 650. to a non-empty string in the
     environment to require 4-digit years for all year input.  When
     2-digit years are accepted, they are converted according to the
     POSIX or X/Open standard: values 69-99 are mapped to 1969-1999, and
     values 0–68 are mapped to 2000–2068.  Values 100–1899 are always
     illegal.  Note that this is new as of Python 1.5.2(a2); earlier
     versions, up to Python 1.5.1 and 1.5.2a1, would add 1900 to year
     values below 1900.

   * UTC is Coordinated Universal Time (formerly known as Greenwich Mean
     Time, or GMT). The acronym UTC is not a mistake but a compromise
     between English and French.

   * DST is Daylight Saving Time, an adjustment of the timezone by
     (usually) one hour during part of the year.  DST rules are magic
     (determined by local law) and can change from year to year.  The C
     library has a table containing the local rules (often it is read
     from a system file for flexibility) and is the only source of True
     Wisdom in this respect.

   * The precision of the various real-time functions may be less than
     suggested by the units in which their value or argument is
     expressed.  E.g.  on most Unix systems, the clock "ticks" only 50
     or 100 times a second.

   * On the other hand, the precision of *note time(): 461. and *note
     sleep(): 11f1. is better than their Unix equivalents: times are
     expressed as floating point numbers, *note time(): 461. returns the
     most accurate time available (using Unix ‘gettimeofday()’ where
     available), and *note sleep(): 11f1. will accept a time with a
     nonzero fraction (Unix ‘select()’ is used to implement this, where
     available).

   * The time value as returned by *note gmtime(): b54, *note
     localtime(): ae1, and *note strptime(): 3bd, and accepted by *note
     asctime(): 11f2, *note mktime(): 11f3. and *note strftime(): 3be,
     may be considered as a sequence of 9 integers.  The return values
     of *note gmtime(): b54, *note localtime(): ae1, and *note
     strptime(): 3bd. also offer attribute names for individual fields.

     See *note struct_time: ae0. for a description of these objects.

     Changed in version 2.2: The time value sequence was changed from a
     tuple to a *note struct_time: ae0, with the addition of attribute
     names for the fields.

   * Use the following functions to convert between time
     representations:

     From                          To                            Use
                                                                 
     ------------------------------------------------------------------------------------------
                                                                 
     seconds since the epoch       *note struct_time: ae0. in    *note gmtime(): b54.
                                   UTC                           
                                   
                                                                 
     seconds since the epoch       *note struct_time: ae0. in    *note localtime(): ae1.
                                   local time                    
                                   
                                                                 
     *note struct_time: ae0. in    seconds since the epoch       *note calendar.timegm():
     UTC                                                         b53.
                                                                 
                                                                 
     *note struct_time: ae0. in    seconds since the epoch       *note mktime(): 11f3.
     local time                                                  

  The module defines the following functions and data items:

 -- Data: time.accept2dyear

     Boolean value indicating whether two-digit year values will be
     accepted.  This is true by default, but will be set to false if the
     environment variable *note PYTHONY2K: 650. has been set to a
     non-empty string.  It may also be modified at run time.

 -- Data: time.altzone

     The offset of the local DST timezone, in seconds west of UTC, if
     one is defined.  This is negative if the local DST timezone is east
     of UTC (as in Western Europe, including the UK). Only use this if
     ‘daylight’ is nonzero.

 -- Function: time.asctime ([t])

     Convert a tuple or *note struct_time: ae0. representing a time as
     returned by *note gmtime(): b54. or *note localtime(): ae1. to a
     24-character string of the following form: ‘'Sun Jun 20 23:21:05
     1993'’.  If _t_ is not provided, the current time as returned by
     *note localtime(): ae1. is used.  Locale information is not used by
     *note asctime(): 11f2.

          Note: Unlike the C function of the same name, there is no
          trailing newline.

     Changed in version 2.1: Allowed _t_ to be omitted.

 -- Function: time.clock ()

     On Unix, return the current processor time as a floating point
     number expressed in seconds.  The precision, and in fact the very
     definition of the meaning of "processor time", depends on that of
     the C function of the same name, but in any case, this is the
     function to use for benchmarking Python or timing algorithms.

     On Windows, this function returns wall-clock seconds elapsed since
     the first call to this function, as a floating point number, based
     on the Win32 function ‘QueryPerformanceCounter()’.  The resolution
     is typically better than one microsecond.

 -- Function: time.ctime ([secs])

     Convert a time expressed in seconds since the epoch to a string
     representing local time.  If _secs_ is not provided or *note None:
     39a, the current time as returned by *note time(): 461. is used.
     ‘ctime(secs)’ is equivalent to ‘asctime(localtime(secs))’.  Locale
     information is not used by *note ctime(): ae9.

     Changed in version 2.1: Allowed _secs_ to be omitted.

     Changed in version 2.4: If _secs_ is *note None: 39a, the current
     time is used.

 -- Data: time.daylight

     Nonzero if a DST timezone is defined.

 -- Function: time.gmtime ([secs])

     Convert a time expressed in seconds since the epoch to a *note
     struct_time: ae0. in UTC in which the dst flag is always zero.  If
     _secs_ is not provided or *note None: 39a, the current time as
     returned by *note time(): 461. is used.  Fractions of a second are
     ignored.  See above for a description of the *note struct_time:
     ae0. object.  See *note calendar.timegm(): b53. for the inverse of
     this function.

     Changed in version 2.1: Allowed _secs_ to be omitted.

     Changed in version 2.4: If _secs_ is *note None: 39a, the current
     time is used.

 -- Function: time.localtime ([secs])

     Like *note gmtime(): b54. but converts to local time.  If _secs_ is
     not provided or *note None: 39a, the current time as returned by
     *note time(): 461. is used.  The dst flag is set to ‘1’ when DST
     applies to the given time.

     Changed in version 2.1: Allowed _secs_ to be omitted.

     Changed in version 2.4: If _secs_ is *note None: 39a, the current
     time is used.

 -- Function: time.mktime (t)

     This is the inverse function of *note localtime(): ae1.  Its
     argument is the *note struct_time: ae0. or full 9-tuple (since the
     dst flag is needed; use ‘-1’ as the dst flag if it is unknown)
     which expresses the time in _local_ time, not UTC. It returns a
     floating point number, for compatibility with *note time(): 461.
     If the input value cannot be represented as a valid time, either
     *note OverflowError: 2db. or *note ValueError: 236. will be raised
     (which depends on whether the invalid value is caught by Python or
     the underlying C libraries).  The earliest date for which it can
     generate a time is platform-dependent.

 -- Function: time.sleep (secs)

     Suspend execution for the given number of seconds.  The argument
     may be a floating point number to indicate a more precise sleep
     time.  The actual suspension time may be less than that requested
     because any caught signal will terminate the *note sleep(): 11f1.
     following execution of that signal’s catching routine.  Also, the
     suspension time may be longer than requested by an arbitrary amount
     because of the scheduling of other activity in the system.

 -- Function: time.strftime (format[, t])

     Convert a tuple or *note struct_time: ae0. representing a time as
     returned by *note gmtime(): b54. or *note localtime(): ae1. to a
     string as specified by the _format_ argument.  If _t_ is not
     provided, the current time as returned by *note localtime(): ae1.
     is used.  _format_ must be a string.  *note ValueError: 236. is
     raised if any field in _t_ is outside of the allowed range.  *note
     strftime(): 3be. returns a locale depedent byte string; the result
     may be converted to unicode by doing
     ‘strftime(<myformat>).decode(locale.getlocale()[1])’.

     Changed in version 2.1: Allowed _t_ to be omitted.

     Changed in version 2.4: *note ValueError: 236. raised if a field in
     _t_ is out of range.

     Changed in version 2.5: 0 is now a legal argument for any position
     in the time tuple; if it is normally illegal the value is forced to
     a correct one..

     The following directives can be embedded in the _format_ string.
     They are shown without the optional field width and precision
     specification, and are replaced by the indicated characters in the
     *note strftime(): 3be. result:

     Directive       Meaning                              Notes
                                                          
     -----------------------------------------------------------------
                                                          
     ‘%a’            Locale’s abbreviated weekday name.
                     
                                                          
     ‘%A’            Locale’s full weekday name.
                     
                                                          
     ‘%b’            Locale’s abbreviated month name.
                     
                                                          
     ‘%B’            Locale’s full month name.
                     
                                                          
     ‘%c’            Locale’s appropriate date and time
                     representation.
                     
                                                          
     ‘%d’            Day of the month as a decimal
                     number [01,31].
                     
                                                          
     ‘%H’            Hour (24-hour clock) as a decimal
                     number [00,23].
                     
                                                          
     ‘%I’            Hour (12-hour clock) as a decimal
                     number [01,12].
                     
                                                          
     ‘%j’            Day of the year as a decimal
                     number [001,366].
                     
                                                          
     ‘%m’            Month as a decimal number [01,12].
                     
                                                          
     ‘%M’            Minute as a decimal number
                     [00,59].
                     
                                                          
     ‘%p’            Locale’s equivalent of either AM     (1)
                     or PM.                               
                     
                                                          
     ‘%S’            Second as a decimal number           (2)
                     [00,61].                             
                     
                                                          
     ‘%U’            Week number of the year (Sunday as   (3)
                     the first day of the week) as a      
                     decimal number [00,53].  All days
                     in a new year preceding the first
                     Sunday are considered to be in
                     week 0.
                     
                                                          
     ‘%w’            Weekday as a decimal number
                     [0(Sunday),6].
                     
                                                          
     ‘%W’            Week number of the year (Monday as   (3)
                     the first day of the week) as a      
                     decimal number [00,53].  All days
                     in a new year preceding the first
                     Monday are considered to be in
                     week 0.
                     
                                                          
     ‘%x’            Locale’s appropriate date
                     representation.
                     
                                                          
     ‘%X’            Locale’s appropriate time
                     representation.
                     
                                                          
     ‘%y’            Year without century as a decimal
                     number [00,99].
                     
                                                          
     ‘%Y’            Year with century as a decimal
                     number.
                     
                                                          
     ‘%Z’            Time zone name (no characters if
                     no time zone exists).
                     
                                                          
     ‘%%’            A literal ‘'%'’ character.
                     

     Notes:

       1. When used with the *note strptime(): 3bd. function, the ‘%p’
          directive only affects the output hour field if the ‘%I’
          directive is used to parse the hour.

       2. The range really is ‘0’ to ‘61’; this accounts for leap
          seconds and the (very rare) double leap seconds.

       3. When used with the *note strptime(): 3bd. function, ‘%U’ and
          ‘%W’ are only used in calculations when the day of the week
          and the year are specified.

     Here is an example, a format for dates compatible with that
     specified in the RFC 2822(1) Internet email standard.  (2)

          >>> from time import gmtime, strftime
          >>> strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
          'Thu, 28 Jun 2001 14:17:15 +0000'

     Additional directives may be supported on certain platforms, but
     only the ones listed here have a meaning standardized by ANSI C. To
     see the full set of format codes supported on your platform,
     consult the ‘strftime(3)’ documentation.

     On some platforms, an optional field width and precision
     specification can immediately follow the initial ‘'%'’ of a
     directive in the following order; this is also not portable.  The
     field width is normally 2 except for ‘%j’ where it is 3.

 -- Function: time.strptime (string[, format])

     Parse a string representing a time according to a format.  The
     return value is a *note struct_time: ae0. as returned by *note
     gmtime(): b54. or *note localtime(): ae1.

     The _format_ parameter uses the same directives as those used by
     *note strftime(): 3be.; it defaults to ‘"%a %b %d %H:%M:%S %Y"’
     which matches the formatting returned by *note ctime(): ae9.  If
     _string_ cannot be parsed according to _format_, or if it has
     excess data after parsing, *note ValueError: 236. is raised.  The
     default values used to fill in any missing data when more accurate
     values cannot be inferred are ‘(1900, 1, 1, 0, 0, 0, 0, 1, -1)’.

     For example:

          >>> import time
          >>> time.strptime("30 Nov 00", "%d %b %y")   # doctest: +NORMALIZE_WHITESPACE
          time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,
                           tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)

     Support for the ‘%Z’ directive is based on the values contained in
     ‘tzname’ and whether ‘daylight’ is true.  Because of this, it is
     platform-specific except for recognizing UTC and GMT which are
     always known (and are considered to be non-daylight savings
     timezones).

     Only the directives specified in the documentation are supported.
     Because ‘strftime()’ is implemented per platform it can sometimes
     offer more directives than those listed.  But ‘strptime()’ is
     independent of any platform and thus does not necessarily support
     all directives available that are not documented as supported.

 -- Class: time.struct_time

     The type of the time value sequence returned by *note gmtime():
     b54, *note localtime(): ae1, and *note strptime(): 3bd.  It is an
     object with a *note named tuple: a1f. interface: values can be
     accessed by index and by attribute name.  The following values are
     present:

     Index       Attribute               Values
                                         
     --------------------------------------------------------------------------
                                         
     0           ‘tm_year’               (for example, 1993)
                                         
                                         
     1           ‘tm_mon’                range [1, 12]
                                         
                                         
     2           ‘tm_mday’               range [1, 31]
                                         
                                         
     3           ‘tm_hour’               range [0, 23]
                                         
                                         
     4           ‘tm_min’                range [0, 59]
                                         
                                         
     5           ‘tm_sec’                range [0, 61]; see *(2)* in *note
                                         strftime(): 3be. description
                                         
                                         
     6           ‘tm_wday’               range [0, 6], Monday is 0
                                         
                                         
     7           ‘tm_yday’               range [1, 366]
                                         
                                         
     8           ‘tm_isdst’              0, 1 or -1; see below
                                         

     New in version 2.2.

     Note that unlike the C structure, the month value is a range of [1,
     12], not [0, 11].  A year value will be handled as described under
     *note Year 2000 (Y2K) issues: 11f0. above.  A ‘-1’ argument as the
     daylight savings flag, passed to *note mktime(): 11f3. will usually
     result in the correct daylight savings state to be filled in.

     When a tuple with an incorrect length is passed to a function
     expecting a *note struct_time: ae0, or having elements of the wrong
     type, a *note TypeError: 218. is raised.

 -- Function: time.time ()

     Return the time in seconds since the epoch as a floating point
     number.  Note that even though the time is always returned as a
     floating point number, not all systems provide time with a better
     precision than 1 second.  While this function normally returns
     non-decreasing values, it can return a lower value than a previous
     call if the system clock has been set back between the two calls.

 -- Data: time.timezone

     The offset of the local (non-DST) timezone, in seconds west of UTC
     (negative in most of Western Europe, positive in the US, zero in
     the UK).

 -- Data: time.tzname

     A tuple of two strings: the first is the name of the local non-DST
     timezone, the second is the name of the local DST timezone.  If no
     DST timezone is defined, the second string should not be used.

 -- Function: time.tzset ()

     Resets the time conversion rules used by the library routines.  The
     environment variable ‘TZ’ specifies how this is done.

     New in version 2.3.

     Availability: Unix.

          Note: Although in many cases, changing the ‘TZ’ environment
          variable may affect the output of functions like *note
          localtime(): ae1. without calling *note tzset(): 11fa, this
          behavior should not be relied on.

          The ‘TZ’ environment variable should contain no whitespace.

     The standard format of the ‘TZ’ environment variable is (whitespace
     added for clarity):

          std offset [dst [offset [,start[/time], end[/time]]]]

     Where the components are:

     ‘std’ and ‘dst’

          Three or more alphanumerics giving the timezone abbreviations.
          These will be propagated into time.tzname

     ‘offset’

          The offset has the form: ‘± hh[:mm[:ss]]’.  This indicates the
          value added the local time to arrive at UTC. If preceded by a
          ’-’, the timezone is east of the Prime Meridian; otherwise, it
          is west.  If no offset follows dst, summer time is assumed to
          be one hour ahead of standard time.

     ‘start[/time], end[/time]’

          Indicates when to change to and back from DST. The format of
          the start and end dates are one of the following:

          ‘J_n_’

               The Julian day _n_ (1 <= _n_ <= 365).  Leap days are not
               counted, so in all years February 28 is day 59 and March
               1 is day 60.

          ‘_n_’

               The zero-based Julian day (0 <= _n_ <= 365).  Leap days
               are counted, and it is possible to refer to February 29.

          ‘M_m_._n_._d_’

               The _d_’th day (0 <= _d_ <= 6) or week _n_ of month _m_
               of the year (1 <= _n_ <= 5, 1 <= _m_ <= 12, where week 5
               means "the last _d_ day in month _m_" which may occur in
               either the fourth or the fifth week).  Week 1 is the
               first week in which the _d_’th day occurs.  Day zero is
               Sunday.

          ‘time’ has the same format as ‘offset’ except that no leading
          sign (’-’ or ’+’) is allowed.  The default, if time is not
          given, is 02:00:00.

          >>> os.environ['TZ'] = 'EST+05EDT,M4.1.0,M10.5.0'
          >>> time.tzset()
          >>> time.strftime('%X %x %Z')
          '02:07:36 05/08/03 EDT'
          >>> os.environ['TZ'] = 'AEST-10AEDT-11,M10.5.0,M3.5.0'
          >>> time.tzset()
          >>> time.strftime('%X %x %Z')
          '16:08:12 05/08/03 AEST'

     On many Unix systems (including *BSD, Linux, Solaris, and Darwin),
     it is more convenient to use the system’s zoneinfo (‘tzfile(5)’)
     database to specify the timezone rules.  To do this, set the ‘TZ’
     environment variable to the path of the required timezone datafile,
     relative to the root of the systems ’zoneinfo’ timezone database,
     usually located at ‘/usr/share/zoneinfo’.  For example,
     ‘'US/Eastern'’, ‘'Australia/Melbourne'’, ‘'Egypt'’ or
     ‘'Europe/Amsterdam'’.

          >>> os.environ['TZ'] = 'US/Eastern'
          >>> time.tzset()
          >>> time.tzname
          ('EST', 'EDT')
          >>> os.environ['TZ'] = 'Egypt'
          >>> time.tzset()
          >>> time.tzname
          ('EET', 'EEST')

See also
........

Module *note datetime: 7d.

     More object-oriented interface to dates and times.

Module *note locale: 100.

     Internationalization services.  The locale setting affects the
     interpretation of many format specifiers in *note strftime(): 3be.
     and *note strptime(): 3bd.

Module *note calendar: 1f.

     General calendar-related functions.  *note timegm(): b53. is the
     inverse of *note gmtime(): b54. from this module.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2822.html

   (2) The use of ‘%Z’ is now deprecated, but the ‘%z’ escape that
expands to the preferred hour/minute offset is not supported by all ANSI
C libraries.  Also, a strict reading of the original 1982 RFC 822
(http://tools.ietf.org/html/rfc822.html) standard calls for a two-digit
year (%y rather than %Y), but practice moved to 4-digit years long
before the year 2000.  After that, RFC 822
(http://tools.ietf.org/html/rfc822.html) became obsolete and the 4-digit
year has been first recommended by RFC 1123
(http://tools.ietf.org/html/rfc1123.html) and then mandated by RFC 2822
(http://tools.ietf.org/html/rfc2822.html).


File: python.info,  Node: argparse --- Parser for command-line options arguments and sub-commands,  Next: optparse --- Parser for command line options,  Prev: time --- Time access and conversions,  Up: Generic Operating System Services

5.15.4 ‘argparse’ — Parser for command-line options, arguments and sub-commands
-------------------------------------------------------------------------------

New in version 2.7.

  *Source code:* Lib/argparse.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

Tutorial
........

This page contains the API reference information.  For a more gentle
introduction to Python command-line parsing, have a look at the *note
argparse tutorial: 11fd.

  The *note argparse: d. module makes it easy to write user-friendly
command-line interfaces.  The program defines what arguments it
requires, and *note argparse: d. will figure out how to parse those out
of *note sys.argv: 634.  The *note argparse: d. module also
automatically generates help and usage messages and issues errors when
users give the program invalid arguments.

* Menu:

* Example: Example<6>. 
* ArgumentParser objects:: 
* The add_argument() method: The add_argument method. 
* The parse_args() method: The parse_args method. 
* Other utilities:: 
* Upgrading optparse code:: 

Example

* Creating a parser:: 
* Adding arguments:: 
* Parsing arguments:: 

ArgumentParser objects

* prog:: 
* usage:: 
* description:: 
* epilog:: 
* parents:: 
* formatter_class:: 
* prefix_chars:: 
* fromfile_prefix_chars:: 
* argument_default:: 
* conflict_handler:: 
* add_help:: 

The add_argument() method

* name or flags:: 
* action:: 
* nargs:: 
* const:: 
* default:: 
* type:: 
* choices:: 
* required:: 
* help:: 
* metavar:: 
* dest:: 

The parse_args() method

* Option value syntax:: 
* Invalid arguments:: 
* Arguments containing -:: 
* Argument abbreviations (prefix matching): Argument abbreviations prefix matching. 
* Beyond sys.argv: Beyond sys argv. 
* The Namespace object:: 

Other utilities

* Sub-commands:: 
* FileType objects:: 
* Argument groups:: 
* Mutual exclusion:: 
* Parser defaults:: 
* Printing help:: 
* Partial parsing:: 
* Customizing file parsing:: 
* Exiting methods:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/argparse.py

