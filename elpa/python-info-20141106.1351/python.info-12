This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Window Objects,  Next: Constants<3>,  Prev: Functions<2>,  Up: curses --- Terminal handling for character-cell displays

5.15.11.2 Window Objects
........................

Window objects, as returned by *note initscr(): 13a2. and *note
newwin(): 13bb. above, have the following methods:

 -- Method: window.addch (ch[, attr])

 -- Method: window.addch (y, x, ch[, attr])

          Note: A _character_ means a C character (an ASCII code),
          rather than a Python character (a string of length 1).  (This
          note is true whenever the documentation mentions a character.)
          The built-in *note ord(): 6f3. is handy for conveying strings
          to codes.

     Paint character _ch_ at ‘(y, x)’ with attributes _attr_,
     overwriting any character previously painter at that location.  By
     default, the character position and attributes are the current
     settings for the window object.

 -- Method: window.addnstr (str, n[, attr])

 -- Method: window.addnstr (y, x, str, n[, attr])

     Paint at most _n_ characters of the string _str_ at ‘(y, x)’ with
     attributes _attr_, overwriting anything previously on the display.

 -- Method: window.addstr (str[, attr])

 -- Method: window.addstr (y, x, str[, attr])

     Paint the string _str_ at ‘(y, x)’ with attributes _attr_,
     overwriting anything previously on the display.

 -- Method: window.attroff (attr)

     Remove attribute _attr_ from the "background" set applied to all
     writes to the current window.

 -- Method: window.attron (attr)

     Add attribute _attr_ from the "background" set applied to all
     writes to the current window.

 -- Method: window.attrset (attr)

     Set the "background" set of attributes to _attr_.  This set is
     initially 0 (no attributes).

 -- Method: window.bkgd (ch[, attr])

     Set the background property of the window to the character _ch_,
     with attributes _attr_.  The change is then applied to every
     character position in that window:

        * The attribute of every character in the window is changed to
          the new background attribute.

        * Wherever the former background character appears, it is
          changed to the new background character.

 -- Method: window.bkgdset (ch[, attr])

     Set the window’s background.  A window’s background consists of a
     character and any combination of attributes.  The attribute part of
     the background is combined (OR’ed) with all non-blank characters
     that are written into the window.  Both the character and attribute
     parts of the background are combined with the blank characters.
     The background becomes a property of the character and moves with
     the character through any scrolling and insert/delete
     line/character operations.

 -- Method: window.border ([ls[, rs[, ts[, bs[, tl[, tr[, bl[,
          br]]]]]]]])

     Draw a border around the edges of the window.  Each parameter
     specifies the character to use for a specific part of the border;
     see the table below for more details.  The characters can be
     specified as integers or as one-character strings.

          Note: A ‘0’ value for any parameter will cause the default
          character to be used for that parameter.  Keyword parameters
          can _not_ be used.  The defaults are listed in this table:

     Parameter       Description               Default value
                                               
     ----------------------------------------------------------------------
                                               
     _ls_            Left side                 ‘ACS_VLINE’
                                               
                                               
     _rs_            Right side                ‘ACS_VLINE’
                                               
                                               
     _ts_            Top                       ‘ACS_HLINE’
                                               
                                               
     _bs_            Bottom                    ‘ACS_HLINE’
                                               
                                               
     _tl_            Upper-left corner         ‘ACS_ULCORNER’
                                               
                                               
     _tr_            Upper-right corner        ‘ACS_URCORNER’
                                               
                                               
     _bl_            Bottom-left corner        ‘ACS_LLCORNER’
                                               
                                               
     _br_            Bottom-right corner       ‘ACS_LRCORNER’
                                               

 -- Method: window.box ([vertch, horch])

     Similar to *note border(): 13e1, but both _ls_ and _rs_ are
     _vertch_ and both _ts_ and _bs_ are _horch_.  The default corner
     characters are always used by this function.

 -- Method: window.chgat (attr)

 -- Method: window.chgat (num, attr)

 -- Method: window.chgat (y, x, attr)

 -- Method: window.chgat (y, x, num, attr)

     Set the attributes of _num_ characters at the current cursor
     position, or at position ‘(y, x)’ if supplied.  If no value of
     _num_ is given or _num_ = -1, the attribute will be set on all the
     characters to the end of the line.  This function does not move the
     cursor.  The changed line will be touched using the *note
     touchline(): 13e4. method so that the contents will be redisplayed
     by the next window refresh.

 -- Method: window.clear ()

     Like *note erase(): 13e6, but also cause the whole window to be
     repainted upon next call to *note refresh(): 13e7.

 -- Method: window.clearok (yes)

     If _yes_ is 1, the next call to *note refresh(): 13e7. will clear
     the window completely.

 -- Method: window.clrtobot ()

     Erase from cursor to the end of the window: all lines below the
     cursor are deleted, and then the equivalent of *note clrtoeol():
     13ea. is performed.

 -- Method: window.clrtoeol ()

     Erase from cursor to the end of the line.

 -- Method: window.cursyncup ()

     Update the current cursor position of all the ancestors of the
     window to reflect the current cursor position of the window.

 -- Method: window.delch ([y, x])

     Delete any character at ‘(y, x)’.

 -- Method: window.deleteln ()

     Delete the line under the cursor.  All following lines are moved up
     by one line.

 -- Method: window.derwin (begin_y, begin_x)

 -- Method: window.derwin (nlines, ncols, begin_y, begin_x)

     An abbreviation for "derive window", *note derwin(): 13ee. is the
     same as calling *note subwin(): 13ef, except that _begin_y_ and
     _begin_x_ are relative to the origin of the window, rather than
     relative to the entire screen.  Return a window object for the
     derived window.

 -- Method: window.echochar (ch[, attr])

     Add character _ch_ with attribute _attr_, and immediately call
     *note refresh(): 13e7. on the window.

 -- Method: window.enclose (y, x)

     Test whether the given pair of screen-relative character-cell
     coordinates are enclosed by the given window, returning ‘True’ or
     ‘False’.  It is useful for determining what subset of the screen
     windows enclose the location of a mouse event.

 -- Method: window.erase ()

     Clear the window.

 -- Method: window.getbegyx ()

     Return a tuple ‘(y, x)’ of co-ordinates of upper-left corner.

 -- Method: window.getbkgd ()

     Return the given window’s current background character/attribute
     pair.

 -- Method: window.getch ([y, x])

     Get a character.  Note that the integer returned does _not_ have to
     be in ASCII range: function keys, keypad keys and so on return
     numbers higher than 256.  In no-delay mode, -1 is returned if there
     is no input, else *note getch(): 13f4. waits until a key is
     pressed.

 -- Method: window.getkey ([y, x])

     Get a character, returning a string instead of an integer, as *note
     getch(): 13f4. does.  Function keys, keypad keys and so on return a
     multibyte string containing the key name.  In no-delay mode, an
     exception is raised if there is no input.

 -- Method: window.getmaxyx ()

     Return a tuple ‘(y, x)’ of the height and width of the window.

 -- Method: window.getparyx ()

     Return the beginning coordinates of this window relative to its
     parent window into two integer variables y and x.  Return ‘-1, -1’
     if this window has no parent.

 -- Method: window.getstr ([y, x])

     Read a string from the user, with primitive line editing capacity.

 -- Method: window.getyx ()

     Return a tuple ‘(y, x)’ of current cursor position relative to the
     window’s upper-left corner.

 -- Method: window.hline (ch, n)

 -- Method: window.hline (y, x, ch, n)

     Display a horizontal line starting at ‘(y, x)’ with length _n_
     consisting of the character _ch_.

 -- Method: window.idcok (flag)

     If _flag_ is ‘False’, curses no longer considers using the hardware
     insert/delete character feature of the terminal; if _flag_ is
     ‘True’, use of character insertion and deletion is enabled.  When
     curses is first initialized, use of character insert/delete is
     enabled by default.

 -- Method: window.idlok (yes)

     If called with _yes_ equal to 1, *note curses: 79. will try and use
     hardware line editing facilities.  Otherwise, line
     insertion/deletion are disabled.

 -- Method: window.immedok (flag)

     If _flag_ is ‘True’, any change in the window image automatically
     causes the window to be refreshed; you no longer have to call *note
     refresh(): 13e7. yourself.  However, it may degrade performance
     considerably, due to repeated calls to wrefresh.  This option is
     disabled by default.

 -- Method: window.inch ([y, x])

     Return the character at the given position in the window.  The
     bottom 8 bits are the character proper, and upper bits are the
     attributes.

 -- Method: window.insch (ch[, attr])

 -- Method: window.insch (y, x, ch[, attr])

     Paint character _ch_ at ‘(y, x)’ with attributes _attr_, moving the
     line from position _x_ right by one character.

 -- Method: window.insdelln (nlines)

     Insert _nlines_ lines into the specified window above the current
     line.  The _nlines_ bottom lines are lost.  For negative _nlines_,
     delete _nlines_ lines starting with the one under the cursor, and
     move the remaining lines up.  The bottom _nlines_ lines are
     cleared.  The current cursor position remains the same.

 -- Method: window.insertln ()

     Insert a blank line under the cursor.  All following lines are
     moved down by one line.

 -- Method: window.insnstr (str, n[, attr])

 -- Method: window.insnstr (y, x, str, n[, attr])

     Insert a character string (as many characters as will fit on the
     line) before the character under the cursor, up to _n_ characters.
     If _n_ is zero or negative, the entire string is inserted.  All
     characters to the right of the cursor are shifted right, with the
     rightmost characters on the line being lost.  The cursor position
     does not change (after moving to _y_, _x_, if specified).

 -- Method: window.insstr (str[, attr])

 -- Method: window.insstr (y, x, str[, attr])

     Insert a character string (as many characters as will fit on the
     line) before the character under the cursor.  All characters to the
     right of the cursor are shifted right, with the rightmost
     characters on the line being lost.  The cursor position does not
     change (after moving to _y_, _x_, if specified).

 -- Method: window.instr ([n])

 -- Method: window.instr (y, x[, n])

     Return a string of characters, extracted from the window starting
     at the current cursor position, or at _y_, _x_ if specified.
     Attributes are stripped from the characters.  If _n_ is specified,
     *note instr(): 1404. returns a string at most _n_ characters long
     (exclusive of the trailing NUL).

 -- Method: window.is_linetouched (line)

     Return ‘True’ if the specified line was modified since the last
     call to *note refresh(): 13e7.; otherwise return ‘False’.  Raise a
     *note curses.error: 138e. exception if _line_ is not valid for the
     given window.

 -- Method: window.is_wintouched ()

     Return ‘True’ if the specified window was modified since the last
     call to *note refresh(): 13e7.; otherwise return ‘False’.

 -- Method: window.keypad (yes)

     If _yes_ is 1, escape sequences generated by some keys (keypad,
     function keys) will be interpreted by *note curses: 79.  If _yes_
     is 0, escape sequences will be left as is in the input stream.

 -- Method: window.leaveok (yes)

     If _yes_ is 1, cursor is left where it is on update, instead of
     being at "cursor position."  This reduces cursor movement where
     possible.  If possible the cursor will be made invisible.

     If _yes_ is 0, cursor will always be at "cursor position" after an
     update.

 -- Method: window.move (new_y, new_x)

     Move cursor to ‘(new_y, new_x)’.

 -- Method: window.mvderwin (y, x)

     Move the window inside its parent window.  The screen-relative
     parameters of the window are not changed.  This routine is used to
     display different parts of the parent window at the same physical
     position on the screen.

 -- Method: window.mvwin (new_y, new_x)

     Move the window so its upper-left corner is at ‘(new_y, new_x)’.

 -- Method: window.nodelay (yes)

     If _yes_ is ‘1’, *note getch(): 13f4. will be non-blocking.

 -- Method: window.notimeout (yes)

     If _yes_ is ‘1’, escape sequences will not be timed out.

     If _yes_ is ‘0’, after a few milliseconds, an escape sequence will
     not be interpreted, and will be left in the input stream as is.

 -- Method: window.noutrefresh ()

     Mark for refresh but wait.  This function updates the data
     structure representing the desired state of the window, but does
     not force an update of the physical screen.  To accomplish that,
     call *note doupdate(): 139d.

 -- Method: window.overlay (destwin[, sminrow, smincol, dminrow,
          dmincol, dmaxrow, dmaxcol])

     Overlay the window on top of _destwin_.  The windows need not be
     the same size, only the overlapping region is copied.  This copy is
     non-destructive, which means that the current background character
     does not overwrite the old contents of _destwin_.

     To get fine-grained control over the copied region, the second form
     of *note overlay(): 140f. can be used.  _sminrow_ and _smincol_ are
     the upper-left coordinates of the source window, and the other
     variables mark a rectangle in the destination window.

 -- Method: window.overwrite (destwin[, sminrow, smincol, dminrow,
          dmincol, dmaxrow, dmaxcol])

     Overwrite the window on top of _destwin_.  The windows need not be
     the same size, in which case only the overlapping region is copied.
     This copy is destructive, which means that the current background
     character overwrites the old contents of _destwin_.

     To get fine-grained control over the copied region, the second form
     of *note overwrite(): 1410. can be used.  _sminrow_ and _smincol_
     are the upper-left coordinates of the source window, the other
     variables mark a rectangle in the destination window.

 -- Method: window.putwin (file)

     Write all data associated with the window into the provided file
     object.  This information can be later retrieved using the *note
     getwin(): 13a7. function.

 -- Method: window.redrawln (beg, num)

     Indicate that the _num_ screen lines, starting at line _beg_, are
     corrupted and should be completely redrawn on the next *note
     refresh(): 13e7. call.

 -- Method: window.redrawwin ()

     Touch the entire window, causing it to be completely redrawn on the
     next *note refresh(): 13e7. call.

 -- Method: window.refresh ([pminrow, pmincol, sminrow, smincol,
          smaxrow, smaxcol])

     Update the display immediately (sync actual screen with previous
     drawing/deleting methods).

     The 6 optional arguments can only be specified when the window is a
     pad created with *note newpad(): 13ba.  The additional parameters
     are needed to indicate what part of the pad and screen are
     involved.  _pminrow_ and _pmincol_ specify the upper left-hand
     corner of the rectangle to be displayed in the pad.  _sminrow_,
     _smincol_, _smaxrow_, and _smaxcol_ specify the edges of the
     rectangle to be displayed on the screen.  The lower right-hand
     corner of the rectangle to be displayed in the pad is calculated
     from the screen coordinates, since the rectangles must be the same
     size.  Both rectangles must be entirely contained within their
     respective structures.  Negative values of _pminrow_, _pmincol_,
     _sminrow_, or _smincol_ are treated as if they were zero.

 -- Method: window.resize (nlines, ncols)

     Reallocate storage for a curses window to adjust its dimensions to
     the specified values.  If either dimension is larger than the
     current values, the window’s data is filled with blanks that have
     the current background rendition (as set by *note bkgdset(): 13e0.)
     merged into them.

 -- Method: window.scroll ([lines=1])

     Scroll the screen or scrolling region upward by _lines_ lines.

 -- Method: window.scrollok (flag)

     Control what happens when the cursor of a window is moved off the
     edge of the window or scrolling region, either as a result of a
     newline action on the bottom line, or typing the last character of
     the last line.  If _flag_ is false, the cursor is left on the
     bottom line.  If _flag_ is true, the window is scrolled up one
     line.  Note that in order to get the physical scrolling effect on
     the terminal, it is also necessary to call *note idlok(): 13fc.

 -- Method: window.setscrreg (top, bottom)

     Set the scrolling region from line _top_ to line _bottom_.  All
     scrolling actions will take place in this region.

 -- Method: window.standend ()

     Turn off the standout attribute.  On some terminals this has the
     side effect of turning off all attributes.

 -- Method: window.standout ()

     Turn on attribute _A_STANDOUT_.

 -- Method: window.subpad (begin_y, begin_x)

 -- Method: window.subpad (nlines, ncols, begin_y, begin_x)

     Return a sub-window, whose upper-left corner is at ‘(begin_y,
     begin_x)’, and whose width/height is _ncols_/_nlines_.

 -- Method: window.subwin (begin_y, begin_x)

 -- Method: window.subwin (nlines, ncols, begin_y, begin_x)

     Return a sub-window, whose upper-left corner is at ‘(begin_y,
     begin_x)’, and whose width/height is _ncols_/_nlines_.

     By default, the sub-window will extend from the specified position
     to the lower right corner of the window.

 -- Method: window.syncdown ()

     Touch each location in the window that has been touched in any of
     its ancestor windows.  This routine is called by *note refresh():
     13e7, so it should almost never be necessary to call it manually.

 -- Method: window.syncok (flag)

     If called with _flag_ set to ‘True’, then *note syncup(): 141d. is
     called automatically whenever there is a change in the window.

 -- Method: window.syncup ()

     Touch all locations in ancestors of the window that have been
     changed in the window.

 -- Method: window.timeout (delay)

     Set blocking or non-blocking read behavior for the window.  If
     _delay_ is negative, blocking read is used (which will wait
     indefinitely for input).  If _delay_ is zero, then non-blocking
     read is used, and -1 will be returned by *note getch(): 13f4. if no
     input is waiting.  If _delay_ is positive, then *note getch():
     13f4. will block for _delay_ milliseconds, and return -1 if there
     is still no input at the end of that time.

 -- Method: window.touchline (start, count[, changed])

     Pretend _count_ lines have been changed, starting with line
     _start_.  If _changed_ is supplied, it specifies whether the
     affected lines are marked as having been changed (_changed_=1) or
     unchanged (_changed_=0).

 -- Method: window.touchwin ()

     Pretend the whole window has been changed, for purposes of drawing
     optimizations.

 -- Method: window.untouchwin ()

     Mark all lines in the window as unchanged since the last call to
     *note refresh(): 13e7.

 -- Method: window.vline (ch, n)

 -- Method: window.vline (y, x, ch, n)

     Display a vertical line starting at ‘(y, x)’ with length _n_
     consisting of the character _ch_.


File: python.info,  Node: Constants<3>,  Prev: Window Objects,  Up: curses --- Terminal handling for character-cell displays

5.15.11.3 Constants
...................

The *note curses: 79. module defines the following data members:

 -- Data: curses.ERR

     Some curses routines that return an integer, such as ‘getch()’,
     return *note ERR: 1423. upon failure.

 -- Data: curses.OK

     Some curses routines that return an integer, such as *note napms():
     13b9, return *note OK: 1424. upon success.

 -- Data: curses.version

     A string representing the current version of the module.  Also
     available as ‘__version__’.

  Several constants are available to specify character cell attributes:

Attribute              Meaning
                       
-----------------------------------------------------------
                       
‘A_ALTCHARSET’         Alternate character set mode.
                       
                       
‘A_BLINK’              Blink mode.
                       
                       
‘A_BOLD’               Bold mode.
                       
                       
‘A_DIM’                Dim mode.
                       
                       
‘A_NORMAL’             Normal attribute.
                       
                       
‘A_REVERSE’            Reverse background and foreground
                       colors.
                       
                       
‘A_STANDOUT’           Standout mode.
                       
                       
‘A_UNDERLINE’          Underline mode.
                       

  Keys are referred to by integer constants with names starting with
‘KEY_’.  The exact keycaps available are system dependent.

Key constant            Key
                        
-------------------------------------------------------------------------
                        
‘KEY_MIN’               Minimum key value
                        
                        
‘KEY_BREAK’             Break key (unreliable)
                        
                        
‘KEY_DOWN’              Down-arrow
                        
                        
‘KEY_UP’                Up-arrow
                        
                        
‘KEY_LEFT’              Left-arrow
                        
                        
‘KEY_RIGHT’             Right-arrow
                        
                        
‘KEY_HOME’              Home key (upward+left arrow)
                        
                        
‘KEY_BACKSPACE’         Backspace (unreliable)
                        
                        
‘KEY_F0’                Function keys.  Up to 64 function keys are
                        supported.
                        
                        
‘KEY_Fn’                Value of function key _n_
                        
                        
‘KEY_DL’                Delete line
                        
                        
‘KEY_IL’                Insert line
                        
                        
‘KEY_DC’                Delete character
                        
                        
‘KEY_IC’                Insert char or enter insert mode
                        
                        
‘KEY_EIC’               Exit insert char mode
                        
                        
‘KEY_CLEAR’             Clear screen
                        
                        
‘KEY_EOS’               Clear to end of screen
                        
                        
‘KEY_EOL’               Clear to end of line
                        
                        
‘KEY_SF’                Scroll 1 line forward
                        
                        
‘KEY_SR’                Scroll 1 line backward (reverse)
                        
                        
‘KEY_NPAGE’             Next page
                        
                        
‘KEY_PPAGE’             Previous page
                        
                        
‘KEY_STAB’              Set tab
                        
                        
‘KEY_CTAB’              Clear tab
                        
                        
‘KEY_CATAB’             Clear all tabs
                        
                        
‘KEY_ENTER’             Enter or send (unreliable)
                        
                        
‘KEY_SRESET’            Soft (partial) reset (unreliable)
                        
                        
‘KEY_RESET’             Reset or hard reset (unreliable)
                        
                        
‘KEY_PRINT’             Print
                        
                        
‘KEY_LL’                Home down or bottom (lower left)
                        
                        
‘KEY_A1’                Upper left of keypad
                        
                        
‘KEY_A3’                Upper right of keypad
                        
                        
‘KEY_B2’                Center of keypad
                        
                        
‘KEY_C1’                Lower left of keypad
                        
                        
‘KEY_C3’                Lower right of keypad
                        
                        
‘KEY_BTAB’              Back tab
                        
                        
‘KEY_BEG’               Beg (beginning)
                        
                        
‘KEY_CANCEL’            Cancel
                        
                        
‘KEY_CLOSE’             Close
                        
                        
‘KEY_COMMAND’           Cmd (command)
                        
                        
‘KEY_COPY’              Copy
                        
                        
‘KEY_CREATE’            Create
                        
                        
‘KEY_END’               End
                        
                        
‘KEY_EXIT’              Exit
                        
                        
‘KEY_FIND’              Find
                        
                        
‘KEY_HELP’              Help
                        
                        
‘KEY_MARK’              Mark
                        
                        
‘KEY_MESSAGE’           Message
                        
                        
‘KEY_MOVE’              Move
                        
                        
‘KEY_NEXT’              Next
                        
                        
‘KEY_OPEN’              Open
                        
                        
‘KEY_OPTIONS’           Options
                        
                        
‘KEY_PREVIOUS’          Prev (previous)
                        
                        
‘KEY_REDO’              Redo
                        
                        
‘KEY_REFERENCE’         Ref (reference)
                        
                        
‘KEY_REFRESH’           Refresh
                        
                        
‘KEY_REPLACE’           Replace
                        
                        
‘KEY_RESTART’           Restart
                        
                        
‘KEY_RESUME’            Resume
                        
                        
‘KEY_SAVE’              Save
                        
                        
‘KEY_SBEG’              Shifted Beg (beginning)
                        
                        
‘KEY_SCANCEL’           Shifted Cancel
                        
                        
‘KEY_SCOMMAND’          Shifted Command
                        
                        
‘KEY_SCOPY’             Shifted Copy
                        
                        
‘KEY_SCREATE’           Shifted Create
                        
                        
‘KEY_SDC’               Shifted Delete char
                        
                        
‘KEY_SDL’               Shifted Delete line
                        
                        
‘KEY_SELECT’            Select
                        
                        
‘KEY_SEND’              Shifted End
                        
                        
‘KEY_SEOL’              Shifted Clear line
                        
                        
‘KEY_SEXIT’             Shifted Dxit
                        
                        
‘KEY_SFIND’             Shifted Find
                        
                        
‘KEY_SHELP’             Shifted Help
                        
                        
‘KEY_SHOME’             Shifted Home
                        
                        
‘KEY_SIC’               Shifted Input
                        
                        
‘KEY_SLEFT’             Shifted Left arrow
                        
                        
‘KEY_SMESSAGE’          Shifted Message
                        
                        
‘KEY_SMOVE’             Shifted Move
                        
                        
‘KEY_SNEXT’             Shifted Next
                        
                        
‘KEY_SOPTIONS’          Shifted Options
                        
                        
‘KEY_SPREVIOUS’         Shifted Prev
                        
                        
‘KEY_SPRINT’            Shifted Print
                        
                        
‘KEY_SREDO’             Shifted Redo
                        
                        
‘KEY_SREPLACE’          Shifted Replace
                        
                        
‘KEY_SRIGHT’            Shifted Right arrow
                        
                        
‘KEY_SRSUME’            Shifted Resume
                        
                        
‘KEY_SSAVE’             Shifted Save
                        
                        
‘KEY_SSUSPEND’          Shifted Suspend
                        
                        
‘KEY_SUNDO’             Shifted Undo
                        
                        
‘KEY_SUSPEND’           Suspend
                        
                        
‘KEY_UNDO’              Undo
                        
                        
‘KEY_MOUSE’             Mouse event has occurred
                        
                        
‘KEY_RESIZE’            Terminal resize event
                        
                        
‘KEY_MAX’               Maximum key value
                        

  On VT100s and their software emulations, such as X terminal emulators,
there are normally at least four function keys (‘KEY_F1’, ‘KEY_F2’,
‘KEY_F3’, ‘KEY_F4’) available, and the arrow keys mapped to ‘KEY_UP’,
‘KEY_DOWN’, ‘KEY_LEFT’ and ‘KEY_RIGHT’ in the obvious way.  If your
machine has a PC keyboard, it is safe to expect arrow keys and twelve
function keys (older PC keyboards may have only ten function keys);
also, the following keypad mappings are standard:

Keycap                 Constant
                       
---------------------------------------
                       
‘Insert’               KEY_IC
                       
                       
‘Delete’               KEY_DC
                       
                       
‘Home’                 KEY_HOME
                       
                       
‘End’                  KEY_END
                       
                       
‘Page Up’              KEY_NPAGE
                       
                       
‘Page Down’            KEY_PPAGE
                       

  The following table lists characters from the alternate character set.
These are inherited from the VT100 terminal, and will generally be
available on software emulations such as X terminals.  When there is no
graphic available, curses falls back on a crude printable ASCII
approximation.

     Note: These are available only after *note initscr(): 13a2. has
     been called.

ACS code               Meaning
                       
----------------------------------------------------------------------
                       
‘ACS_BBSS’             alternate name for upper right corner
                       
                       
‘ACS_BLOCK’            solid square block
                       
                       
‘ACS_BOARD’            board of squares
                       
                       
‘ACS_BSBS’             alternate name for horizontal line
                       
                       
‘ACS_BSSB’             alternate name for upper left corner
                       
                       
‘ACS_BSSS’             alternate name for top tee
                       
                       
‘ACS_BTEE’             bottom tee
                       
                       
‘ACS_BULLET’           bullet
                       
                       
‘ACS_CKBOARD’          checker board (stipple)
                       
                       
‘ACS_DARROW’           arrow pointing down
                       
                       
‘ACS_DEGREE’           degree symbol
                       
                       
‘ACS_DIAMOND’          diamond
                       
                       
‘ACS_GEQUAL’           greater-than-or-equal-to
                       
                       
‘ACS_HLINE’            horizontal line
                       
                       
‘ACS_LANTERN’          lantern symbol
                       
                       
‘ACS_LARROW’           left arrow
                       
                       
‘ACS_LEQUAL’           less-than-or-equal-to
                       
                       
‘ACS_LLCORNER’         lower left-hand corner
                       
                       
‘ACS_LRCORNER’         lower right-hand corner
                       
                       
‘ACS_LTEE’             left tee
                       
                       
‘ACS_NEQUAL’           not-equal sign
                       
                       
‘ACS_PI’               letter pi
                       
                       
‘ACS_PLMINUS’          plus-or-minus sign
                       
                       
‘ACS_PLUS’             big plus sign
                       
                       
‘ACS_RARROW’           right arrow
                       
                       
‘ACS_RTEE’             right tee
                       
                       
‘ACS_S1’               scan line 1
                       
                       
‘ACS_S3’               scan line 3
                       
                       
‘ACS_S7’               scan line 7
                       
                       
‘ACS_S9’               scan line 9
                       
                       
‘ACS_SBBS’             alternate name for lower right corner
                       
                       
‘ACS_SBSB’             alternate name for vertical line
                       
                       
‘ACS_SBSS’             alternate name for right tee
                       
                       
‘ACS_SSBB’             alternate name for lower left corner
                       
                       
‘ACS_SSBS’             alternate name for bottom tee
                       
                       
‘ACS_SSSB’             alternate name for left tee
                       
                       
‘ACS_SSSS’             alternate name for crossover or big plus
                       
                       
‘ACS_STERLING’         pound sterling
                       
                       
‘ACS_TTEE’             top tee
                       
                       
‘ACS_UARROW’           up arrow
                       
                       
‘ACS_ULCORNER’         upper left corner
                       
                       
‘ACS_URCORNER’         upper right corner
                       
                       
‘ACS_VLINE’            vertical line
                       

  The following table lists the predefined colors:

Constant                Color
                        
---------------------------------------------------------
                        
‘COLOR_BLACK’           Black
                        
                        
‘COLOR_BLUE’            Blue
                        
                        
‘COLOR_CYAN’            Cyan (light greenish blue)
                        
                        
‘COLOR_GREEN’           Green
                        
                        
‘COLOR_MAGENTA’         Magenta (purplish red)
                        
                        
‘COLOR_RED’             Red
                        
                        
‘COLOR_WHITE’           White
                        
                        
‘COLOR_YELLOW’          Yellow
                        


File: python.info,  Node: curses textpad --- Text input widget for curses programs,  Next: curses ascii --- Utilities for ASCII characters,  Prev: curses --- Terminal handling for character-cell displays,  Up: Generic Operating System Services

5.15.12 ‘curses.textpad’ — Text input widget for curses programs
----------------------------------------------------------------

New in version 1.6.

  The *note curses.textpad: 7c. module provides a *note Textbox: 1427.
class that handles elementary text editing in a curses window,
supporting a set of keybindings resembling those of Emacs (thus, also of
Netscape Navigator, BBedit 6.x, FrameMaker, and many other programs).
The module also provides a rectangle-drawing function useful for framing
text boxes or for other purposes.

  The module *note curses.textpad: 7c. defines the following function:

 -- Function: curses.textpad.rectangle (win, uly, ulx, lry, lrx)

     Draw a rectangle.  The first argument must be a window object; the
     remaining arguments are coordinates relative to that window.  The
     second and third arguments are the y and x coordinates of the upper
     left hand corner of the rectangle to be drawn; the fourth and fifth
     arguments are the y and x coordinates of the lower right hand
     corner.  The rectangle will be drawn using VT100/IBM PC forms
     characters on terminals that make this possible (including xterm
     and most other software terminal emulators).  Otherwise it will be
     drawn with ASCII dashes, vertical bars, and plus signs.

* Menu:

* Textbox objects:: 


File: python.info,  Node: Textbox objects,  Up: curses textpad --- Text input widget for curses programs

5.15.12.1 Textbox objects
.........................

You can instantiate a *note Textbox: 1427. object as follows:

 -- Class: curses.textpad.Textbox (win)

     Return a textbox widget object.  The _win_ argument should be a
     curses ‘WindowObject’ in which the textbox is to be contained.  The
     edit cursor of the textbox is initially located at the upper left
     hand corner of the containing window, with coordinates ‘(0, 0)’.
     The instance’s *note stripspaces: 142b. flag is initially on.

     *note Textbox: 1427. objects have the following methods:

      -- Method: edit ([validator])

          This is the entry point you will normally use.  It accepts
          editing keystrokes until one of the termination keystrokes is
          entered.  If _validator_ is supplied, it must be a function.
          It will be called for each keystroke entered with the
          keystroke as a parameter; command dispatch is done on the
          result.  This method returns the window contents as a string;
          whether blanks in the window are included is affected by the
          *note stripspaces: 142b. attribute.

      -- Method: do_command (ch)

          Process a single command keystroke.  Here are the supported
          special keystrokes:

          Keystroke              Action
                                 
          -----------------------------------------------------------------------
                                 
          ‘Control-A’            Go to left edge of window.
                                 
                                 
          ‘Control-B’            Cursor left, wrapping to previous line if
                                 appropriate.
                                 
                                 
          ‘Control-D’            Delete character under cursor.
                                 
                                 
          ‘Control-E’            Go to right edge (stripspaces off) or end of
                                 line (stripspaces on).
                                 
                                 
          ‘Control-F’            Cursor right, wrapping to next line when
                                 appropriate.
                                 
                                 
          ‘Control-G’            Terminate, returning the window contents.
                                 
                                 
          ‘Control-H’            Delete character backward.
                                 
                                 
          ‘Control-J’            Terminate if the window is 1 line, otherwise
                                 insert newline.
                                 
                                 
          ‘Control-K’            If line is blank, delete it, otherwise clear
                                 to end of line.
                                 
                                 
          ‘Control-L’            Refresh screen.
                                 
                                 
          ‘Control-N’            Cursor down; move down one line.
                                 
                                 
          ‘Control-O’            Insert a blank line at cursor location.
                                 
                                 
          ‘Control-P’            Cursor up; move up one line.
                                 

          Move operations do nothing if the cursor is at an edge where
          the movement is not possible.  The following synonyms are
          supported where possible:

          Constant                     Keystroke
                                       
          ----------------------------------------------------
                                       
          ‘KEY_LEFT’                   ‘Control-B’
                                       
                                       
          ‘KEY_RIGHT’                  ‘Control-F’
                                       
                                       
          ‘KEY_UP’                     ‘Control-P’
                                       
                                       
          ‘KEY_DOWN’                   ‘Control-N’
                                       
                                       
          ‘KEY_BACKSPACE’              ‘Control-h’
                                       

          All other keystrokes are treated as a command to insert the
          given character and move right (with line wrapping).

      -- Method: gather ()

          Return the window contents as a string; whether blanks in the
          window are included is affected by the *note stripspaces:
          142b. member.

      -- Attribute: stripspaces

          This attribute is a flag which controls the interpretation of
          blanks in the window.  When it is on, trailing blanks on each
          line are ignored; any cursor motion that would land the cursor
          on a trailing blank goes to the end of that line instead, and
          trailing blanks are stripped when the window contents are
          gathered.


File: python.info,  Node: curses ascii --- Utilities for ASCII characters,  Next: curses panel --- A panel stack extension for curses,  Prev: curses textpad --- Text input widget for curses programs,  Up: Generic Operating System Services

5.15.13 ‘curses.ascii’ — Utilities for ASCII characters
-------------------------------------------------------

New in version 1.6.

  The *note curses.ascii: 7a. module supplies name constants for ASCII
characters and functions to test membership in various ASCII character
classes.  The constants supplied are names for control characters as
follows:

Name               Meaning
                   
----------------------------------------------------------------------
                   
‘NUL’

‘SOH’              Start of heading, console interrupt
                   
                   
‘STX’              Start of text
                   
                   
‘ETX’              End of text
                   
                   
‘EOT’              End of transmission
                   
                   
‘ENQ’              Enquiry, goes with ‘ACK’ flow control
                   
                   
‘ACK’              Acknowledgement
                   
                   
‘BEL’              Bell
                   
                   
‘BS’               Backspace
                   
                   
‘TAB’              Tab
                   
                   
‘HT’               Alias for ‘TAB’: "Horizontal tab"
                   
                   
‘LF’               Line feed
                   
                   
‘NL’               Alias for ‘LF’: "New line"
                   
                   
‘VT’               Vertical tab
                   
                   
‘FF’               Form feed
                   
                   
‘CR’               Carriage return
                   
                   
‘SO’               Shift-out, begin alternate character set
                   
                   
‘SI’               Shift-in, resume default character set
                   
                   
‘DLE’              Data-link escape
                   
                   
‘DC1’              XON, for flow control
                   
                   
‘DC2’              Device control 2, block-mode flow control
                   
                   
‘DC3’              XOFF, for flow control
                   
                   
‘DC4’              Device control 4
                   
                   
‘NAK’              Negative acknowledgement
                   
                   
‘SYN’              Synchronous idle
                   
                   
‘ETB’              End transmission block
                   
                   
‘CAN’              Cancel
                   
                   
‘EM’               End of medium
                   
                   
‘SUB’              Substitute
                   
                   
‘ESC’              Escape
                   
                   
‘FS’               File separator
                   
                   
‘GS’               Group separator
                   
                   
‘RS’               Record separator, block-mode terminator
                   
                   
‘US’               Unit separator
                   
                   
‘SP’               Space
                   
                   
‘DEL’              Delete
                   

  Note that many of these have little practical significance in modern
usage.  The mnemonics derive from teleprinter conventions that predate
digital computers.

  The module supplies the following functions, patterned on those in the
standard C library:

 -- Function: curses.ascii.isalnum (c)

     Checks for an ASCII alphanumeric character; it is equivalent to
     ‘isalpha(c) or isdigit(c)’.

 -- Function: curses.ascii.isalpha (c)

     Checks for an ASCII alphabetic character; it is equivalent to
     ‘isupper(c) or islower(c)’.

 -- Function: curses.ascii.isascii (c)

     Checks for a character value that fits in the 7-bit ASCII set.

 -- Function: curses.ascii.isblank (c)

     Checks for an ASCII whitespace character.

 -- Function: curses.ascii.iscntrl (c)

     Checks for an ASCII control character (in the range 0x00 to 0x1f).

 -- Function: curses.ascii.isdigit (c)

     Checks for an ASCII decimal digit, ‘'0'’ through ‘'9'’.  This is
     equivalent to ‘c in string.digits’.

 -- Function: curses.ascii.isgraph (c)

     Checks for ASCII any printable character except space.

 -- Function: curses.ascii.islower (c)

     Checks for an ASCII lower-case character.

 -- Function: curses.ascii.isprint (c)

     Checks for any ASCII printable character including space.

 -- Function: curses.ascii.ispunct (c)

     Checks for any printable ASCII character which is not a space or an
     alphanumeric character.

 -- Function: curses.ascii.isspace (c)

     Checks for ASCII white-space characters; space, line feed, carriage
     return, form feed, horizontal tab, vertical tab.

 -- Function: curses.ascii.isupper (c)

     Checks for an ASCII uppercase letter.

 -- Function: curses.ascii.isxdigit (c)

     Checks for an ASCII hexadecimal digit.  This is equivalent to ‘c in
     string.hexdigits’.

 -- Function: curses.ascii.isctrl (c)

     Checks for an ASCII control character (ordinal values 0 to 31).

 -- Function: curses.ascii.ismeta (c)

     Checks for a non-ASCII character (ordinal values 0x80 and above).

  These functions accept either integers or strings; when the argument
is a string, it is first converted using the built-in function *note
ord(): 6f3.

  Note that all these functions check ordinal bit values derived from
the first character of the string you pass in; they do not actually know
anything about the host machine’s character encoding.  For functions
that know about the character encoding (and handle internationalization
properly) see the *note string: 163. module.

  The following two functions take either a single-character string or
integer byte value; they return a value of the same type.

 -- Function: curses.ascii.ascii (c)

     Return the ASCII value corresponding to the low 7 bits of _c_.

 -- Function: curses.ascii.ctrl (c)

     Return the control character corresponding to the given character
     (the character bit value is bitwise-anded with 0x1f).

 -- Function: curses.ascii.alt (c)

     Return the 8-bit character corresponding to the given ASCII
     character (the character bit value is bitwise-ored with 0x80).

  The following function takes either a single-character string or
integer value; it returns a string.

 -- Function: curses.ascii.unctrl (c)

     Return a string representation of the ASCII character _c_.  If _c_
     is printable, this string is the character itself.  If the
     character is a control character (0x00-0x1f) the string consists of
     a caret (‘'^'’) followed by the corresponding uppercase letter.  If
     the character is an ASCII delete (0x7f) the string is ‘'^?'’.  If
     the character has its meta bit (0x80) set, the meta bit is
     stripped, the preceding rules applied, and ‘'!'’ prepended to the
     result.

 -- Data: curses.ascii.controlnames

     A 33-element string array that contains the ASCII mnemonics for the
     thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in
     order, plus the mnemonic ‘SP’ for the space character.


File: python.info,  Node: curses panel --- A panel stack extension for curses,  Next: platform --- Access to underlying platform's identifying data,  Prev: curses ascii --- Utilities for ASCII characters,  Up: Generic Operating System Services

5.15.14 ‘curses.panel’ — A panel stack extension for curses
-----------------------------------------------------------

Panels are windows with the added feature of depth, so they can be
stacked on top of each other, and only the visible portions of each
window will be displayed.  Panels can be added, moved up or down in the
stack, and removed.

* Menu:

* Functions: Functions<3>. 
* Panel Objects:: 


File: python.info,  Node: Functions<3>,  Next: Panel Objects,  Up: curses panel --- A panel stack extension for curses

5.15.14.1 Functions
...................

The module *note curses.panel: 7b. defines the following functions:

 -- Function: curses.panel.bottom_panel ()

     Returns the bottom panel in the panel stack.

 -- Function: curses.panel.new_panel (win)

     Returns a panel object, associating it with the given window _win_.
     Be aware that you need to keep the returned panel object referenced
     explicitly.  If you don’t, the panel object is garbage collected
     and removed from the panel stack.

 -- Function: curses.panel.top_panel ()

     Returns the top panel in the panel stack.

 -- Function: curses.panel.update_panels ()

     Updates the virtual screen after changes in the panel stack.  This
     does not call *note curses.doupdate(): 139d, so you’ll have to do
     this yourself.


File: python.info,  Node: Panel Objects,  Prev: Functions<3>,  Up: curses panel --- A panel stack extension for curses

5.15.14.2 Panel Objects
.......................

Panel objects, as returned by *note new_panel(): 144a. above, are
windows with a stacking order.  There’s always a window associated with
a panel which determines the content, while the panel methods are
responsible for the window’s depth in the panel stack.

  Panel objects have the following methods:

 -- Method: Panel.above ()

     Returns the panel above the current panel.

 -- Method: Panel.below ()

     Returns the panel below the current panel.

 -- Method: Panel.bottom ()

     Push the panel to the bottom of the stack.

 -- Method: Panel.hidden ()

     Returns true if the panel is hidden (not visible), false otherwise.

 -- Method: Panel.hide ()

     Hide the panel.  This does not delete the object, it just makes the
     window on screen invisible.

 -- Method: Panel.move (y, x)

     Move the panel to the screen coordinates ‘(y, x)’.

 -- Method: Panel.replace (win)

     Change the window associated with the panel to the window _win_.

 -- Method: Panel.set_userptr (obj)

     Set the panel’s user pointer to _obj_.  This is used to associate
     an arbitrary piece of data with the panel, and can be any Python
     object.

 -- Method: Panel.show ()

     Display the panel (which might have been hidden).

 -- Method: Panel.top ()

     Push panel to the top of the stack.

 -- Method: Panel.userptr ()

     Returns the user pointer for the panel.  This might be any Python
     object.

 -- Method: Panel.window ()

     Returns the window object associated with the panel.


File: python.info,  Node: platform --- Access to underlying platform's identifying data,  Next: errno --- Standard errno system symbols,  Prev: curses panel --- A panel stack extension for curses,  Up: Generic Operating System Services

5.15.15 ‘platform’ — Access to underlying platform’s identifying data
---------------------------------------------------------------------

New in version 2.3.

  *Source code:* Lib/platform.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

     Note: Specific platforms listed alphabetically, with Linux included
     in the Unix section.

* Menu:

* Cross Platform:: 
* Java Platform:: 
* Windows Platform:: 
* Mac OS Platform:: 
* Unix Platforms:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/platform.py


File: python.info,  Node: Cross Platform,  Next: Java Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.1 Cross Platform
........................

 -- Function: platform.architecture (executable=sys.executable, bits='',
          linkage='')

     Queries the given executable (defaults to the Python interpreter
     binary) for various architecture information.

     Returns a tuple ‘(bits, linkage)’ which contain information about
     the bit architecture and the linkage format used for the
     executable.  Both values are returned as strings.

     Values that cannot be determined are returned as given by the
     parameter presets.  If bits is given as ‘''’, the
     ‘sizeof(pointer)()’ (or ‘sizeof(long)()’ on Python version < 1.5.2)
     is used as indicator for the supported pointer size.

     The function relies on the system’s ‘file’ command to do the actual
     work.  This is available on most if not all Unix platforms and some
     non-Unix platforms and then only if the executable points to the
     Python interpreter.  Reasonable defaults are used when the above
     needs are not met.

          Note: On Mac OS X (and perhaps other platforms), executable
          files may be universal files containing multiple
          architectures.

          To get at the "64-bitness" of the current interpreter, it is
          more reliable to query the *note sys.maxsize: 7d6. attribute:

               is_64bits = sys.maxsize > 2**32

 -- Function: platform.machine ()

     Returns the machine type, e.g.  ‘'i386'’.  An empty string is
     returned if the value cannot be determined.

 -- Function: platform.node ()

     Returns the computer’s network name (may not be fully qualified!).
     An empty string is returned if the value cannot be determined.

 -- Function: platform.platform (aliased=0, terse=0)

     Returns a single string identifying the underlying platform with as
     much useful information as possible.

     The output is intended to be _human readable_ rather than machine
     parseable.  It may look different on different platforms and this
     is intended.

     If _aliased_ is true, the function will use aliases for various
     platforms that report system names which differ from their common
     names, for example SunOS will be reported as Solaris.  The *note
     system_alias(): 1462. function is used to implement this.

     Setting _terse_ to true causes the function to return only the
     absolute minimum information needed to identify the platform.

 -- Function: platform.processor ()

     Returns the (real) processor name, e.g.  ‘'amdk6'’.

     An empty string is returned if the value cannot be determined.
     Note that many platforms do not provide this information or simply
     return the same value as for *note machine(): 145f.  NetBSD does
     this.

 -- Function: platform.python_build ()

     Returns a tuple ‘(buildno, builddate)’ stating the Python build
     number and date as strings.

 -- Function: platform.python_compiler ()

     Returns a string identifying the compiler used for compiling
     Python.

 -- Function: platform.python_branch ()

     Returns a string identifying the Python implementation SCM branch.

     New in version 2.6.

 -- Function: platform.python_implementation ()

     Returns a string identifying the Python implementation.  Possible
     return values are: ’CPython’, ’IronPython’, ’Jython’, ’PyPy’.

     New in version 2.6.

 -- Function: platform.python_revision ()

     Returns a string identifying the Python implementation SCM
     revision.

     New in version 2.6.

 -- Function: platform.python_version ()

     Returns the Python version as string ‘'major.minor.patchlevel'’

     Note that unlike the Python ‘sys.version’, the returned value will
     always include the patchlevel (it defaults to 0).

 -- Function: platform.python_version_tuple ()

     Returns the Python version as tuple ‘(major, minor, patchlevel)’ of
     strings.

     Note that unlike the Python ‘sys.version’, the returned value will
     always include the patchlevel (it defaults to ‘'0'’).

 -- Function: platform.release ()

     Returns the system’s release, e.g.  ‘'2.2.0'’ or ‘'NT'’ An empty
     string is returned if the value cannot be determined.

 -- Function: platform.system ()

     Returns the system/OS name, e.g.  ‘'Linux'’, ‘'Windows'’, or
     ‘'Java'’.  An empty string is returned if the value cannot be
     determined.

 -- Function: platform.system_alias (system, release, version)

     Returns ‘(system, release, version)’ aliased to common marketing
     names used for some systems.  It also does some reordering of the
     information in some cases where it would otherwise cause confusion.

 -- Function: platform.version ()

     Returns the system’s release version, e.g.  ‘'#3 on degas'’.  An
     empty string is returned if the value cannot be determined.

 -- Function: platform.uname ()

     Fairly portable uname interface.  Returns a tuple of strings
     ‘(system, node, release, version, machine, processor)’ identifying
     the underlying platform.

     Note that unlike the *note os.uname(): 10e0. function this also
     returns possible processor information as additional tuple entry.

     Entries which cannot be determined are set to ‘''’.


File: python.info,  Node: Java Platform,  Next: Windows Platform,  Prev: Cross Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.2 Java Platform
.......................

 -- Function: platform.java_ver (release='', vendor='', vminfo=('', '',
          ''), osinfo=('', '', ''))

     Version interface for Jython.

     Returns a tuple ‘(release, vendor, vminfo, osinfo)’ with _vminfo_
     being a tuple ‘(vm_name, vm_release, vm_vendor)’ and _osinfo_ being
     a tuple ‘(os_name, os_version, os_arch)’.  Values which cannot be
     determined are set to the defaults given as parameters (which all
     default to ‘''’).


File: python.info,  Node: Windows Platform,  Next: Mac OS Platform,  Prev: Java Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.3 Windows Platform
..........................

 -- Function: platform.win32_ver (release='', version='', csd='',
          ptype='')

     Get additional version information from the Windows Registry and
     return a tuple ‘(release, version, csd, ptype)’ referring to OS
     release, version number, CSD level (service pack) and OS type
     (multi/single processor).

     As a hint: _ptype_ is ‘'Uniprocessor Free'’ on single processor NT
     machines and ‘'Multiprocessor Free'’ on multi processor machines.
     The _’Free’_ refers to the OS version being free of debugging code.
     It could also state _’Checked’_ which means the OS version uses
     debugging code, i.e.  code that checks arguments, ranges, etc.

          Note: This function works best with Mark Hammond’s ‘win32all’
          package installed, but also on Python 2.3 and later (support
          for this was added in Python 2.6).  It obviously only runs on
          Win32 compatible platforms.

* Menu:

* Win95/98 specific:: 


File: python.info,  Node: Win95/98 specific,  Up: Windows Platform

5.15.15.4 Win95/98 specific
...........................

 -- Function: platform.popen (cmd, mode='r', bufsize=None)

     Portable *note popen(): 1474. interface.  Find a working popen
     implementation preferring ‘win32pipe.popen()’.  On Windows NT,
     ‘win32pipe.popen()’ should work; on Windows 9x it hangs due to bugs
     in the MS C library.


File: python.info,  Node: Mac OS Platform,  Next: Unix Platforms,  Prev: Windows Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.5 Mac OS Platform
.........................

 -- Function: platform.mac_ver (release='', versioninfo=('', '', ''),
          machine='')

     Get Mac OS version information and return it as tuple ‘(release,
     versioninfo, machine)’ with _versioninfo_ being a tuple ‘(version,
     dev_stage, non_release_version)’.

     Entries which cannot be determined are set to ‘''’.  All tuple
     entries are strings.


File: python.info,  Node: Unix Platforms,  Prev: Mac OS Platform,  Up: platform --- Access to underlying platform's identifying data

5.15.15.6 Unix Platforms
........................

 -- Function: platform.dist (distname='', version='', id='',
          supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...))

     This is an old version of the functionality now provided by *note
     linux_distribution(): 1479.  For new code, please use the *note
     linux_distribution(): 1479.

     The only difference between the two is that ‘dist()’ always returns
     the short name of the distribution taken from the ‘supported_dists’
     parameter.

     Deprecated since version 2.6.

 -- Function: platform.linux_distribution (distname='', version='',
          id='', supported_dists=('SuSE', 'debian', 'redhat',
          'mandrake', ...), full_distribution_name=1)

     Tries to determine the name of the Linux OS distribution name.

     ‘supported_dists’ may be given to define the set of Linux
     distributions to look for.  It defaults to a list of currently
     supported Linux distributions identified by their release file
     name.

     If ‘full_distribution_name’ is true (default), the full
     distribution read from the OS is returned.  Otherwise the short
     name taken from ‘supported_dists’ is used.

     Returns a tuple ‘(distname,version,id)’ which defaults to the args
     given as parameters.  ‘id’ is the item in parentheses after the
     version number.  It is usually the version codename.

     New in version 2.6.

 -- Function: platform.libc_ver (executable=sys.executable, lib='',
          version='', chunksize=2048)

     Tries to determine the libc version against which the file
     executable (defaults to the Python interpreter) is linked.  Returns
     a tuple of strings ‘(lib, version)’ which default to the given
     parameters in case the lookup fails.

     Note that this function has intimate knowledge of how different
     libc versions add symbols to the executable is probably only usable
     for executables compiled using *gcc*.

     The file is read and scanned in chunks of _chunksize_ bytes.


File: python.info,  Node: errno --- Standard errno system symbols,  Next: ctypes --- A foreign function library for Python,  Prev: platform --- Access to underlying platform's identifying data,  Up: Generic Operating System Services

5.15.16 ‘errno’ — Standard errno system symbols
-----------------------------------------------

This module makes available standard ‘errno’ system symbols.  The value
of each symbol is the corresponding integer value.  The names and
descriptions are borrowed from ‘linux/include/errno.h’, which should be
pretty all-inclusive.

 -- Data: errno.errorcode

     Dictionary providing a mapping from the errno value to the string
     name in the underlying system.  For instance,
     ‘errno.errorcode[errno.EPERM]’ maps to ‘'EPERM'’.

  To translate a numeric error code to an error message, use *note
os.strerror(): 10fd.

  Of the following list, symbols that are not used on the current
platform are not defined by the module.  The specific list of defined
symbols is available as ‘errno.errorcode.keys()’.  Symbols available can
include:

 -- Data: errno.EPERM

     Operation not permitted

 -- Data: errno.ENOENT

     No such file or directory

 -- Data: errno.ESRCH

     No such process

 -- Data: errno.EINTR

     Interrupted system call

 -- Data: errno.EIO

     I/O error

 -- Data: errno.ENXIO

     No such device or address

 -- Data: errno.E2BIG

     Arg list too long

 -- Data: errno.ENOEXEC

     Exec format error

 -- Data: errno.EBADF

     Bad file number

 -- Data: errno.ECHILD

     No child processes

 -- Data: errno.EAGAIN

     Try again

 -- Data: errno.ENOMEM

     Out of memory

 -- Data: errno.EACCES

     Permission denied

 -- Data: errno.EFAULT

     Bad address

 -- Data: errno.ENOTBLK

     Block device required

 -- Data: errno.EBUSY

     Device or resource busy

 -- Data: errno.EEXIST

     File exists

 -- Data: errno.EXDEV

     Cross-device link

 -- Data: errno.ENODEV

     No such device

 -- Data: errno.ENOTDIR

     Not a directory

 -- Data: errno.EISDIR

     Is a directory

 -- Data: errno.EINVAL

     Invalid argument

 -- Data: errno.ENFILE

     File table overflow

 -- Data: errno.EMFILE

     Too many open files

 -- Data: errno.ENOTTY

     Not a typewriter

 -- Data: errno.ETXTBSY

     Text file busy

 -- Data: errno.EFBIG

     File too large

 -- Data: errno.ENOSPC

     No space left on device

 -- Data: errno.ESPIPE

     Illegal seek

 -- Data: errno.EROFS

     Read-only file system

 -- Data: errno.EMLINK

     Too many links

 -- Data: errno.EPIPE

     Broken pipe

 -- Data: errno.EDOM

     Math argument out of domain of func

 -- Data: errno.ERANGE

     Math result not representable

 -- Data: errno.EDEADLK

     Resource deadlock would occur

 -- Data: errno.ENAMETOOLONG

     File name too long

 -- Data: errno.ENOLCK

     No record locks available

 -- Data: errno.ENOSYS

     Function not implemented

 -- Data: errno.ENOTEMPTY

     Directory not empty

 -- Data: errno.ELOOP

     Too many symbolic links encountered

 -- Data: errno.EWOULDBLOCK

     Operation would block

 -- Data: errno.ENOMSG

     No message of desired type

 -- Data: errno.EIDRM

     Identifier removed

 -- Data: errno.ECHRNG

     Channel number out of range

 -- Data: errno.EL2NSYNC

     Level 2 not synchronized

 -- Data: errno.EL3HLT

     Level 3 halted

 -- Data: errno.EL3RST

     Level 3 reset

 -- Data: errno.ELNRNG

     Link number out of range

 -- Data: errno.EUNATCH

     Protocol driver not attached

 -- Data: errno.ENOCSI

     No CSI structure available

 -- Data: errno.EL2HLT

     Level 2 halted

 -- Data: errno.EBADE

     Invalid exchange

 -- Data: errno.EBADR

     Invalid request descriptor

 -- Data: errno.EXFULL

     Exchange full

 -- Data: errno.ENOANO

     No anode

 -- Data: errno.EBADRQC

     Invalid request code

 -- Data: errno.EBADSLT

     Invalid slot

 -- Data: errno.EDEADLOCK

     File locking deadlock error

 -- Data: errno.EBFONT

     Bad font file format

 -- Data: errno.ENOSTR

     Device not a stream

 -- Data: errno.ENODATA

     No data available

 -- Data: errno.ETIME

     Timer expired

 -- Data: errno.ENOSR

     Out of streams resources

 -- Data: errno.ENONET

     Machine is not on the network

 -- Data: errno.ENOPKG

     Package not installed

 -- Data: errno.EREMOTE

     Object is remote

 -- Data: errno.ENOLINK

     Link has been severed

 -- Data: errno.EADV

     Advertise error

 -- Data: errno.ESRMNT

     Srmount error

 -- Data: errno.ECOMM

     Communication error on send

 -- Data: errno.EPROTO

     Protocol error

 -- Data: errno.EMULTIHOP

     Multihop attempted

 -- Data: errno.EDOTDOT

     RFS specific error

 -- Data: errno.EBADMSG

     Not a data message

 -- Data: errno.EOVERFLOW

     Value too large for defined data type

 -- Data: errno.ENOTUNIQ

     Name not unique on network

 -- Data: errno.EBADFD

     File descriptor in bad state

 -- Data: errno.EREMCHG

     Remote address changed

 -- Data: errno.ELIBACC

     Can not access a needed shared library

 -- Data: errno.ELIBBAD

     Accessing a corrupted shared library

 -- Data: errno.ELIBSCN

     .lib section in a.out corrupted

 -- Data: errno.ELIBMAX

     Attempting to link in too many shared libraries

 -- Data: errno.ELIBEXEC

     Cannot exec a shared library directly

 -- Data: errno.EILSEQ

     Illegal byte sequence

 -- Data: errno.ERESTART

     Interrupted system call should be restarted

 -- Data: errno.ESTRPIPE

     Streams pipe error

 -- Data: errno.EUSERS

     Too many users

 -- Data: errno.ENOTSOCK

     Socket operation on non-socket

 -- Data: errno.EDESTADDRREQ

     Destination address required

 -- Data: errno.EMSGSIZE

     Message too long

 -- Data: errno.EPROTOTYPE

     Protocol wrong type for socket

 -- Data: errno.ENOPROTOOPT

     Protocol not available

 -- Data: errno.EPROTONOSUPPORT

     Protocol not supported

 -- Data: errno.ESOCKTNOSUPPORT

     Socket type not supported

 -- Data: errno.EOPNOTSUPP

     Operation not supported on transport endpoint

 -- Data: errno.EPFNOSUPPORT

     Protocol family not supported

 -- Data: errno.EAFNOSUPPORT

     Address family not supported by protocol

 -- Data: errno.EADDRINUSE

     Address already in use

 -- Data: errno.EADDRNOTAVAIL

     Cannot assign requested address

 -- Data: errno.ENETDOWN

     Network is down

 -- Data: errno.ENETUNREACH

     Network is unreachable

 -- Data: errno.ENETRESET

     Network dropped connection because of reset

 -- Data: errno.ECONNABORTED

     Software caused connection abort

 -- Data: errno.ECONNRESET

     Connection reset by peer

 -- Data: errno.ENOBUFS

     No buffer space available

 -- Data: errno.EISCONN

     Transport endpoint is already connected

 -- Data: errno.ENOTCONN

     Transport endpoint is not connected

 -- Data: errno.ESHUTDOWN

     Cannot send after transport endpoint shutdown

 -- Data: errno.ETOOMANYREFS

     Too many references: cannot splice

 -- Data: errno.ETIMEDOUT

     Connection timed out

 -- Data: errno.ECONNREFUSED

     Connection refused

 -- Data: errno.EHOSTDOWN

     Host is down

 -- Data: errno.EHOSTUNREACH

     No route to host

 -- Data: errno.EALREADY

     Operation already in progress

 -- Data: errno.EINPROGRESS

     Operation now in progress

 -- Data: errno.ESTALE

     Stale NFS file handle

 -- Data: errno.EUCLEAN

     Structure needs cleaning

 -- Data: errno.ENOTNAM

     Not a XENIX named type file

 -- Data: errno.ENAVAIL

     No XENIX semaphores available

 -- Data: errno.EISNAM

     Is a named type file

 -- Data: errno.EREMOTEIO

     Remote I/O error

 -- Data: errno.EDQUOT

     Quota exceeded


File: python.info,  Node: ctypes --- A foreign function library for Python,  Prev: errno --- Standard errno system symbols,  Up: Generic Operating System Services

5.15.17 ‘ctypes’ — A foreign function library for Python
--------------------------------------------------------

New in version 2.5.

  *note ctypes: 78. is a foreign function library for Python.  It
provides C compatible data types, and allows calling functions in DLLs
or shared libraries.  It can be used to wrap these libraries in pure
Python.

* Menu:

* ctypes tutorial:: 
* ctypes reference:: 

ctypes tutorial

* Loading dynamic link libraries:: 
* Accessing functions from loaded dlls:: 
* Calling functions:: 
* Fundamental data types:: 
* Calling functions, continued: Calling functions continued. 
* Calling functions with your own custom data types:: 
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes. 
* Return types:: 
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference. 
* Structures and unions:: 
* Structure/union alignment and byte order:: 
* Bit fields in structures and unions:: 
* Arrays:: 
* Pointers:: 
* Type conversions:: 
* Incomplete Types:: 
* Callback functions:: 
* Accessing values exported from dlls:: 
* Surprises:: 
* Variable-sized data types:: 

ctypes reference

* Finding shared libraries:: 
* Loading shared libraries:: 
* Foreign functions:: 
* Function prototypes:: 
* Utility functions:: 
* Data types:: 
* Fundamental data types: Fundamental data types<2>. 
* Structured data types:: 
* Arrays and pointers:: 


File: python.info,  Node: ctypes tutorial,  Next: ctypes reference,  Up: ctypes --- A foreign function library for Python

5.15.17.1 ctypes tutorial
.........................

Note: The code samples in this tutorial use *note doctest: b5. to make
sure that they actually work.  Since some code samples behave
differently under Linux, Windows, or Mac OS X, they contain doctest
directives in comments.

  Note: Some code samples reference the ctypes *note c_int: 14fb. type.
This type is an alias for the *note c_long: 14fc. type on 32-bit
systems.  So, you should not be confused if *note c_long: 14fc. is
printed if you would expect *note c_int: 14fb. — they are actually the
same type.

* Menu:

* Loading dynamic link libraries:: 
* Accessing functions from loaded dlls:: 
* Calling functions:: 
* Fundamental data types:: 
* Calling functions, continued: Calling functions continued. 
* Calling functions with your own custom data types:: 
* Specifying the required argument types (function prototypes): Specifying the required argument types function prototypes. 
* Return types:: 
* Passing pointers (or; passing parameters by reference): Passing pointers or passing parameters by reference. 
* Structures and unions:: 
* Structure/union alignment and byte order:: 
* Bit fields in structures and unions:: 
* Arrays:: 
* Pointers:: 
* Type conversions:: 
* Incomplete Types:: 
* Callback functions:: 
* Accessing values exported from dlls:: 
* Surprises:: 
* Variable-sized data types:: 


File: python.info,  Node: Loading dynamic link libraries,  Next: Accessing functions from loaded dlls,  Up: ctypes tutorial

5.15.17.2 Loading dynamic link libraries
........................................

*note ctypes: 78. exports the _cdll_, and on Windows _windll_ and
_oledll_ objects, for loading dynamic link libraries.

  You load libraries by accessing them as attributes of these objects.
_cdll_ loads libraries which export functions using the standard ‘cdecl’
calling convention, while _windll_ libraries call functions using the
‘stdcall’ calling convention.  _oledll_ also uses the ‘stdcall’ calling
convention, and assumes the functions return a Windows ‘HRESULT’ error
code.  The error code is used to automatically raise a ‘WindowsError’
exception when the function call fails.

  Here are some examples for Windows.  Note that ‘msvcrt’ is the MS
standard C library containing most standard C functions, and uses the
cdecl calling convention:

     >>> from ctypes import *
     >>> print windll.kernel32 # doctest: +WINDOWS
     <WinDLL 'kernel32', handle ... at ...>
     >>> print cdll.msvcrt # doctest: +WINDOWS
     <CDLL 'msvcrt', handle ... at ...>
     >>> libc = cdll.msvcrt # doctest: +WINDOWS
     >>>

  Windows appends the usual ‘.dll’ file suffix automatically.

  On Linux, it is required to specify the filename _including_ the
extension to load a library, so attribute access can not be used to load
libraries.  Either the ‘LoadLibrary()’ method of the dll loaders should
be used, or you should load the library by creating an instance of CDLL
by calling the constructor:

     >>> cdll.LoadLibrary("libc.so.6") # doctest: +LINUX
     <CDLL 'libc.so.6', handle ... at ...>
     >>> libc = CDLL("libc.so.6")     # doctest: +LINUX
     >>> libc                         # doctest: +LINUX
     <CDLL 'libc.so.6', handle ... at ...>
     >>>


File: python.info,  Node: Accessing functions from loaded dlls,  Next: Calling functions,  Prev: Loading dynamic link libraries,  Up: ctypes tutorial

5.15.17.3 Accessing functions from loaded dlls
..............................................

Functions are accessed as attributes of dll objects:

     >>> from ctypes import *
     >>> libc.printf
     <_FuncPtr object at 0x...>
     >>> print windll.kernel32.GetModuleHandleA # doctest: +WINDOWS
     <_FuncPtr object at 0x...>
     >>> print windll.kernel32.MyOwnFunction # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "ctypes.py", line 239, in __getattr__
         func = _StdcallFuncPtr(name, self)
     AttributeError: function 'MyOwnFunction' not found
     >>>

  Note that win32 system dlls like ‘kernel32’ and ‘user32’ often export
ANSI as well as UNICODE versions of a function.  The UNICODE version is
exported with an ‘W’ appended to the name, while the ANSI version is
exported with an ‘A’ appended to the name.  The win32 ‘GetModuleHandle’
function, which returns a _module handle_ for a given module name, has
the following C prototype, and a macro is used to expose one of them as
‘GetModuleHandle’ depending on whether UNICODE is defined or not:

     /* ANSI version */
     HMODULE GetModuleHandleA(LPCSTR lpModuleName);
     /* UNICODE version */
     HMODULE GetModuleHandleW(LPCWSTR lpModuleName);

  _windll_ does not try to select one of them by magic, you must access
the version you need by specifying ‘GetModuleHandleA’ or
‘GetModuleHandleW’ explicitly, and then call it with strings or unicode
strings respectively.

  Sometimes, dlls export functions with names which aren’t valid Python
identifiers, like ‘"??2@YAPAXI@Z"’.  In this case you have to use *note
getattr(): 875. to retrieve the function:

     >>> getattr(cdll.msvcrt, "??2@YAPAXI@Z") # doctest: +WINDOWS
     <_FuncPtr object at 0x...>
     >>>

  On Windows, some dlls export functions not by name but by ordinal.
These functions can be accessed by indexing the dll object with the
ordinal number:

     >>> cdll.kernel32[1] # doctest: +WINDOWS
     <_FuncPtr object at 0x...>
     >>> cdll.kernel32[0] # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "ctypes.py", line 310, in __getitem__
         func = _StdcallFuncPtr(name, self)
     AttributeError: function ordinal 0 not found
     >>>


File: python.info,  Node: Calling functions,  Next: Fundamental data types,  Prev: Accessing functions from loaded dlls,  Up: ctypes tutorial

5.15.17.4 Calling functions
...........................

You can call these functions like any other Python callable.  This
example uses the ‘time()’ function, which returns system time in seconds
since the Unix epoch, and the ‘GetModuleHandleA()’ function, which
returns a win32 module handle.

  This example calls both functions with a NULL pointer (‘None’ should
be used as the NULL pointer):

     >>> print libc.time(None) # doctest: +SKIP
     1150640792
     >>> print hex(windll.kernel32.GetModuleHandleA(None)) # doctest: +WINDOWS
     0x1d000000
     >>>

  *note ctypes: 78. tries to protect you from calling functions with the
wrong number of arguments or the wrong calling convention.
Unfortunately this only works on Windows.  It does this by examining the
stack after the function returns, so although an error is raised the
function _has_ been called:

     >>> windll.kernel32.GetModuleHandleA() # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with not enough arguments (4 bytes missing)
     >>> windll.kernel32.GetModuleHandleA(0, 0) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with too many arguments (4 bytes in excess)
     >>>

  The same exception is raised when you call an ‘stdcall’ function with
the ‘cdecl’ calling convention, or vice versa:

     >>> cdll.kernel32.GetModuleHandleA(None) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with not enough arguments (4 bytes missing)
     >>>

     >>> windll.msvcrt.printf("spam") # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: Procedure probably called with too many arguments (4 bytes in excess)
     >>>

  To find out the correct calling convention you have to look into the C
header file or the documentation for the function you want to call.

  On Windows, *note ctypes: 78. uses win32 structured exception handling
to prevent crashes from general protection faults when functions are
called with invalid argument values:

     >>> windll.kernel32.GetModuleHandleA(32) # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     WindowsError: exception: access violation reading 0x00000020
     >>>

  There are, however, enough ways to crash Python with *note ctypes: 78,
so you should be careful anyway.

  ‘None’, integers, longs, byte strings and unicode strings are the only
native Python objects that can directly be used as parameters in these
function calls.  ‘None’ is passed as a C ‘NULL’ pointer, byte strings
and unicode strings are passed as pointer to the memory block that
contains their data (‘char *’ or ‘wchar_t *’).  Python integers and
Python longs are passed as the platforms default C ‘int’ type, their
value is masked to fit into the C type.

  Before we move on calling functions with other parameter types, we
have to learn more about *note ctypes: 78. data types.


File: python.info,  Node: Fundamental data types,  Next: Calling functions continued,  Prev: Calling functions,  Up: ctypes tutorial

5.15.17.5 Fundamental data types
................................

*note ctypes: 78. defines a number of primitive C compatible data types:

ctypes type                C type                                         Python type
                                                                          
-----------------------------------------------------------------------------------------------------------
                                                                          
*note c_bool: 1505.        ‘_Bool’                                        bool (1)
                                                                          
                                                                          
*note c_char: 1506.        ‘char’                                         1-character string
                                                                          
                                                                          
*note c_wchar: 1507.       ‘wchar_t’                                      1-character unicode string
                                                                          
                                                                          
*note c_byte: 1508.        ‘char’                                         int/long
                                                                          
                                                                          
*note c_ubyte: 1509.       ‘unsigned char’                                int/long
                                                                          
                                                                          
*note c_short: 150a.       ‘short’                                        int/long
                                                                          
                                                                          
*note c_ushort: 150b.      ‘unsigned short’                               int/long
                                                                          
                                                                          
*note c_int: 14fb.         ‘int’                                          int/long
                                                                          
                                                                          
*note c_uint: 150c.        ‘unsigned int’                                 int/long
                                                                          
                                                                          
*note c_long: 14fc.        ‘long’                                         int/long
                                                                          
                                                                          
*note c_ulong: 150d.       ‘unsigned long’                                int/long
                                                                          
                                                                          
*note c_longlong: 150e.    ‘__int64’ or ‘long long’                       int/long
                                                                          
                                                                          
*note c_ulonglong: 150f.   ‘unsigned __int64’ or ‘unsigned long long’     int/long
                                                                          
                                                                          
*note c_float: 1510.       ‘float’                                        float
                                                                          
                                                                          
*note c_double: 1511.      ‘double’                                       float
                                                                          
                                                                          
*note c_longdouble:        ‘long double’                                  float
1512.                                                                     

*note c_char_p: 1513.      ‘char *’ (NUL terminated)                      string or ‘None’
                                                                          
                                                                          
*note c_wchar_p: 1514.     ‘wchar_t *’ (NUL terminated)                   unicode or ‘None’
                                                                          
                                                                          
*note c_void_p: 1515.      ‘void *’                                       int/long or ‘None’
                                                                          

  1. The constructor accepts any object with a truth value.

  All these types can be created by calling them with an optional
initializer of the correct type and value:

     >>> c_int()
     c_long(0)
     >>> c_char_p("Hello, World")
     c_char_p('Hello, World')
     >>> c_ushort(-3)
     c_ushort(65533)
     >>>

  Since these types are mutable, their value can also be changed
afterwards:

     >>> i = c_int(42)
     >>> print i
     c_long(42)
     >>> print i.value
     42
     >>> i.value = -99
     >>> print i.value
     -99
     >>>

  Assigning a new value to instances of the pointer types *note
c_char_p: 1513, *note c_wchar_p: 1514, and *note c_void_p: 1515. changes
the _memory location_ they point to, _not the contents_ of the memory
block (of course not, because Python strings are immutable):

     >>> s = "Hello, World"
     >>> c_s = c_char_p(s)
     >>> print c_s
     c_char_p('Hello, World')
     >>> c_s.value = "Hi, there"
     >>> print c_s
     c_char_p('Hi, there')
     >>> print s                 # first string is unchanged
     Hello, World
     >>>

  You should be careful, however, not to pass them to functions
expecting pointers to mutable memory.  If you need mutable memory
blocks, ctypes has a *note create_string_buffer(): 1516. function which
creates these in various ways.  The current memory block contents can be
accessed (or changed) with the ‘raw’ property; if you want to access it
as NUL terminated string, use the ‘value’ property:

     >>> from ctypes import *
     >>> p = create_string_buffer(3)      # create a 3 byte buffer, initialized to NUL bytes
     >>> print sizeof(p), repr(p.raw)
     3 '\x00\x00\x00'
     >>> p = create_string_buffer("Hello")      # create a buffer containing a NUL terminated string
     >>> print sizeof(p), repr(p.raw)
     6 'Hello\x00'
     >>> print repr(p.value)
     'Hello'
     >>> p = create_string_buffer("Hello", 10)  # create a 10 byte buffer
     >>> print sizeof(p), repr(p.raw)
     10 'Hello\x00\x00\x00\x00\x00'
     >>> p.value = "Hi"
     >>> print sizeof(p), repr(p.raw)
     10 'Hi\x00lo\x00\x00\x00\x00\x00'
     >>>

  The *note create_string_buffer(): 1516. function replaces the
‘c_buffer()’ function (which is still available as an alias), as well as
the ‘c_string()’ function from earlier ctypes releases.  To create a
mutable memory block containing unicode characters of the C type
‘wchar_t’ use the *note create_unicode_buffer(): 1517. function.


File: python.info,  Node: Calling functions continued,  Next: Calling functions with your own custom data types,  Prev: Fundamental data types,  Up: ctypes tutorial

5.15.17.6 Calling functions, continued
......................................

Note that printf prints to the real standard output channel, _not_ to
*note sys.stdout: 889, so these examples will only work at the console
prompt, not from within _IDLE_ or _PythonWin_:

     >>> printf = libc.printf
     >>> printf("Hello, %s\n", "World!")
     Hello, World!
     14
     >>> printf("Hello, %S\n", u"World!")
     Hello, World!
     14
     >>> printf("%d bottles of beer\n", 42)
     42 bottles of beer
     19
     >>> printf("%f bottles of beer\n", 42.5)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2
     >>>

  As has been mentioned before, all Python types except integers,
strings, and unicode strings have to be wrapped in their corresponding
*note ctypes: 78. type, so that they can be converted to the required C
data type:

     >>> printf("An int %d, a double %f\n", 1234, c_double(3.14))
     An int 1234, a double 3.140000
     31
     >>>


File: python.info,  Node: Calling functions with your own custom data types,  Next: Specifying the required argument types function prototypes,  Prev: Calling functions continued,  Up: ctypes tutorial

5.15.17.7 Calling functions with your own custom data types
...........................................................

You can also customize *note ctypes: 78. argument conversion to allow
instances of your own classes be used as function arguments.  *note
ctypes: 78. looks for an ‘_as_parameter_’ attribute and uses this as the
function argument.  Of course, it must be one of integer, string, or
unicode:

     >>> class Bottles(object):
     ...     def __init__(self, number):
     ...         self._as_parameter_ = number
     ...
     >>> bottles = Bottles(42)
     >>> printf("%d bottles of beer\n", bottles)
     42 bottles of beer
     19
     >>>

  If you don’t want to store the instance’s data in the ‘_as_parameter_’
instance variable, you could define a *note property(): 487. which makes
the data available.


File: python.info,  Node: Specifying the required argument types function prototypes,  Next: Return types,  Prev: Calling functions with your own custom data types,  Up: ctypes tutorial

5.15.17.8 Specifying the required argument types (function prototypes)
......................................................................

It is possible to specify the required argument types of functions
exported from DLLs by setting the ‘argtypes’ attribute.

  ‘argtypes’ must be a sequence of C data types (the ‘printf’ function
is probably not a good example here, because it takes a variable number
and different types of parameters depending on the format string, on the
other hand this is quite handy to experiment with this feature):

     >>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double]
     >>> printf("String '%s', Int %d, Double %f\n", "Hi", 10, 2.2)
     String 'Hi', Int 10, Double 2.200000
     37
     >>>

  Specifying a format protects against incompatible argument types (just
as a prototype for a C function), and tries to convert the arguments to
valid types:

     >>> printf("%d %d %d", 1, 2, 3)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ArgumentError: argument 2: exceptions.TypeError: wrong type
     >>> printf("%s %d %f\n", "X", 2, 3)
     X 2 3.000000
     13
     >>>

  If you have defined your own classes which you pass to function calls,
you have to implement a ‘from_param()’ class method for them to be able
to use them in the ‘argtypes’ sequence.  The ‘from_param()’ class method
receives the Python object passed to the function call, it should do a
typecheck or whatever is needed to make sure this object is acceptable,
and then return the object itself, its ‘_as_parameter_’ attribute, or
whatever you want to pass as the C function argument in this case.
Again, the result should be an integer, string, unicode, a *note ctypes:
78. instance, or an object with an ‘_as_parameter_’ attribute.


File: python.info,  Node: Return types,  Next: Passing pointers or passing parameters by reference,  Prev: Specifying the required argument types function prototypes,  Up: ctypes tutorial

5.15.17.9 Return types
......................

By default functions are assumed to return the C ‘int’ type.  Other
return types can be specified by setting the ‘restype’ attribute of the
function object.

  Here is a more advanced example, it uses the ‘strchr’ function, which
expects a string pointer and a char, and returns a pointer to a string:

     >>> strchr = libc.strchr
     >>> strchr("abcdef", ord("d")) # doctest: +SKIP
     8059983
     >>> strchr.restype = c_char_p # c_char_p is a pointer to a string
     >>> strchr("abcdef", ord("d"))
     'def'
     >>> print strchr("abcdef", ord("x"))
     None
     >>>

  If you want to avoid the ‘ord("x")’ calls above, you can set the
‘argtypes’ attribute, and the second argument will be converted from a
single character Python string into a C char:

     >>> strchr.restype = c_char_p
     >>> strchr.argtypes = [c_char_p, c_char]
     >>> strchr("abcdef", "d")
     'def'
     >>> strchr("abcdef", "def")
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ArgumentError: argument 2: exceptions.TypeError: one character string expected
     >>> print strchr("abcdef", "x")
     None
     >>> strchr("abcdef", "d")
     'def'
     >>>

  You can also use a callable Python object (a function or a class for
example) as the ‘restype’ attribute, if the foreign function returns an
integer.  The callable will be called with the _integer_ the C function
returns, and the result of this call will be used as the result of your
function call.  This is useful to check for error return values and
automatically raise an exception:

     >>> GetModuleHandle = windll.kernel32.GetModuleHandleA # doctest: +WINDOWS
     >>> def ValidHandle(value):
     ...     if value == 0:
     ...         raise WinError()
     ...     return value
     ...
     >>>
     >>> GetModuleHandle.restype = ValidHandle # doctest: +WINDOWS
     >>> GetModuleHandle(None) # doctest: +WINDOWS
     486539264
     >>> GetModuleHandle("something silly") # doctest: +WINDOWS
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "<stdin>", line 3, in ValidHandle
     WindowsError: [Errno 126] The specified module could not be found.
     >>>

  ‘WinError’ is a function which will call Windows ‘FormatMessage()’ api
to get the string representation of an error code, and _returns_ an
exception.  ‘WinError’ takes an optional error code parameter, if no one
is used, it calls *note GetLastError(): 1520. to retrieve it.

  Please note that a much more powerful error checking mechanism is
available through the ‘errcheck’ attribute; see the reference manual for
details.


File: python.info,  Node: Passing pointers or passing parameters by reference,  Next: Structures and unions,  Prev: Return types,  Up: ctypes tutorial

5.15.17.10 Passing pointers (or: passing parameters by reference)
.................................................................

Sometimes a C api function expects a _pointer_ to a data type as
parameter, probably to write into the corresponding location, or if the
data is too large to be passed by value.  This is also known as _passing
parameters by reference_.

  *note ctypes: 78. exports the *note byref(): 1523. function which is
used to pass parameters by reference.  The same effect can be achieved
with the *note pointer(): 1524. function, although *note pointer():
1524. does a lot more work since it constructs a real pointer object, so
it is faster to use *note byref(): 1523. if you don’t need the pointer
object in Python itself:

     >>> i = c_int()
     >>> f = c_float()
     >>> s = create_string_buffer('\000' * 32)
     >>> print i.value, f.value, repr(s.value)
     0 0.0 ''
     >>> libc.sscanf("1 3.14 Hello", "%d %f %s",
     ...             byref(i), byref(f), s)
     3
     >>> print i.value, f.value, repr(s.value)
     1 3.1400001049 'Hello'
     >>>


File: python.info,  Node: Structures and unions,  Next: Structure/union alignment and byte order,  Prev: Passing pointers or passing parameters by reference,  Up: ctypes tutorial

5.15.17.11 Structures and unions
................................

Structures and unions must derive from the *note Structure: 1527. and
*note Union: 1528. base classes which are defined in the *note ctypes:
78. module.  Each subclass must define a ‘_fields_’ attribute.
‘_fields_’ must be a list of _2-tuples_, containing a _field name_ and a
_field type_.

  The field type must be a *note ctypes: 78. type like *note c_int:
14fb, or any other derived *note ctypes: 78. type: structure, union,
array, pointer.

  Here is a simple example of a POINT structure, which contains two
integers named _x_ and _y_, and also shows how to initialize a structure
in the constructor:

     >>> from ctypes import *
     >>> class POINT(Structure):
     ...     _fields_ = [("x", c_int),
     ...                 ("y", c_int)]
     ...
     >>> point = POINT(10, 20)
     >>> print point.x, point.y
     10 20
     >>> point = POINT(y=5)
     >>> print point.x, point.y
     0 5
     >>> POINT(1, 2, 3)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     ValueError: too many initializers
     >>>

  You can, however, build much more complicated structures.  A structure
can itself contain other structures by using a structure as a field
type.

  Here is a RECT structure which contains two POINTs named _upperleft_
and _lowerright_:

     >>> class RECT(Structure):
     ...     _fields_ = [("upperleft", POINT),
     ...                 ("lowerright", POINT)]
     ...
     >>> rc = RECT(point)
     >>> print rc.upperleft.x, rc.upperleft.y
     0 5
     >>> print rc.lowerright.x, rc.lowerright.y
     0 0
     >>>

  Nested structures can also be initialized in the constructor in
several ways:

     >>> r = RECT(POINT(1, 2), POINT(3, 4))
     >>> r = RECT((1, 2), (3, 4))

  Field *note descriptor: 1529.s can be retrieved from the _class_, they
are useful for debugging because they can provide useful information:

     >>> print POINT.x
     <Field type=c_long, ofs=0, size=4>
     >>> print POINT.y
     <Field type=c_long, ofs=4, size=4>
     >>>

     Warning: *note ctypes: 78. does not support passing unions or
     structures with bit-fields to functions by value.  While this may
     work on 32-bit x86, it’s not guaranteed by the library to work in
     the general case.  Unions and structures with bit-fields should
     always be passed to functions by pointer.


File: python.info,  Node: Structure/union alignment and byte order,  Next: Bit fields in structures and unions,  Prev: Structures and unions,  Up: ctypes tutorial

5.15.17.12 Structure/union alignment and byte order
...................................................

By default, Structure and Union fields are aligned in the same way the C
compiler does it.  It is possible to override this behavior be
specifying a ‘_pack_’ class attribute in the subclass definition.  This
must be set to a positive integer and specifies the maximum alignment
for the fields.  This is what ‘#pragma pack(n)’ also does in MSVC.

  *note ctypes: 78. uses the native byte order for Structures and
Unions.  To build structures with non-native byte order, you can use one
of the *note BigEndianStructure: 152c, *note LittleEndianStructure:
152d, ‘BigEndianUnion’, and ‘LittleEndianUnion’ base classes.  These
classes cannot contain pointer fields.


File: python.info,  Node: Bit fields in structures and unions,  Next: Arrays,  Prev: Structure/union alignment and byte order,  Up: ctypes tutorial

5.15.17.13 Bit fields in structures and unions
..............................................

It is possible to create structures and unions containing bit fields.
Bit fields are only possible for integer fields, the bit width is
specified as the third item in the ‘_fields_’ tuples:

     >>> class Int(Structure):
     ...     _fields_ = [("first_16", c_int, 16),
     ...                 ("second_16", c_int, 16)]
     ...
     >>> print Int.first_16
     <Field type=c_long, ofs=0:0, bits=16>
     >>> print Int.second_16
     <Field type=c_long, ofs=0:16, bits=16>
     >>>


File: python.info,  Node: Arrays,  Next: Pointers,  Prev: Bit fields in structures and unions,  Up: ctypes tutorial

5.15.17.14 Arrays
.................

Arrays are sequences, containing a fixed number of instances of the same
type.

  The recommended way to create array types is by multiplying a data
type with a positive integer:

     TenPointsArrayType = POINT * 10

  Here is an example of an somewhat artificial data type, a structure
containing 4 POINTs among other stuff:

     >>> from ctypes import *
     >>> class POINT(Structure):
     ...    _fields_ = ("x", c_int), ("y", c_int)
     ...
     >>> class MyStruct(Structure):
     ...    _fields_ = [("a", c_int),
     ...                ("b", c_float),
     ...                ("point_array", POINT * 4)]
     >>>
     >>> print len(MyStruct().point_array)
     4
     >>>

  Instances are created in the usual way, by calling the class:

     arr = TenPointsArrayType()
     for pt in arr:
         print pt.x, pt.y

  The above code print a series of ‘0 0’ lines, because the array
contents is initialized to zeros.

  Initializers of the correct type can also be specified:

     >>> from ctypes import *
     >>> TenIntegers = c_int * 10
     >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
     >>> print ii
     <c_long_Array_10 object at 0x...>
     >>> for i in ii: print i,
     ...
     1 2 3 4 5 6 7 8 9 10
     >>>


File: python.info,  Node: Pointers,  Next: Type conversions,  Prev: Arrays,  Up: ctypes tutorial

5.15.17.15 Pointers
...................

Pointer instances are created by calling the *note pointer(): 1524.
function on a *note ctypes: 78. type:

     >>> from ctypes import *
     >>> i = c_int(42)
     >>> pi = pointer(i)
     >>>

  Pointer instances have a ‘contents’ attribute which returns the object
to which the pointer points, the ‘i’ object above:

     >>> pi.contents
     c_long(42)
     >>>

  Note that *note ctypes: 78. does not have OOR (original object
return), it constructs a new, equivalent object each time you retrieve
an attribute:

     >>> pi.contents is i
     False
     >>> pi.contents is pi.contents
     False
     >>>

  Assigning another *note c_int: 14fb. instance to the pointer’s
contents attribute would cause the pointer to point to the memory
location where this is stored:

     >>> i = c_int(99)
     >>> pi.contents = i
     >>> pi.contents
     c_long(99)
     >>>

  Pointer instances can also be indexed with integers:

     >>> pi[0]
     99
     >>>

  Assigning to an integer index changes the pointed to value:

     >>> print i
     c_long(99)
     >>> pi[0] = 22
     >>> print i
     c_long(22)
     >>>

  It is also possible to use indexes different from 0, but you must know
what you’re doing, just as in C: You can access or change arbitrary
memory locations.  Generally you only use this feature if you receive a
pointer from a C function, and you _know_ that the pointer actually
points to an array instead of a single item.

  Behind the scenes, the *note pointer(): 1524. function does more than
simply create pointer instances, it has to create pointer _types_ first.
This is done with the *note POINTER(): 1534. function, which accepts any
*note ctypes: 78. type, and returns a new type:

     >>> PI = POINTER(c_int)
     >>> PI
     <class 'ctypes.LP_c_long'>
     >>> PI(42)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: expected c_long instead of int
     >>> PI(c_int(42))
     <ctypes.LP_c_long object at 0x...>
     >>>

  Calling the pointer type without an argument creates a ‘NULL’ pointer.
‘NULL’ pointers have a ‘False’ boolean value:

     >>> null_ptr = POINTER(c_int)()
     >>> print bool(null_ptr)
     False
     >>>

  *note ctypes: 78. checks for ‘NULL’ when dereferencing pointers (but
dereferencing invalid non-‘NULL’ pointers would crash Python):

     >>> null_ptr[0]
     Traceback (most recent call last):
         ....
     ValueError: NULL pointer access
     >>>

     >>> null_ptr[0] = 1234
     Traceback (most recent call last):
         ....
     ValueError: NULL pointer access
     >>>


File: python.info,  Node: Type conversions,  Next: Incomplete Types,  Prev: Pointers,  Up: ctypes tutorial

5.15.17.16 Type conversions
...........................

Usually, ctypes does strict type checking.  This means, if you have
‘POINTER(c_int)’ in the ‘argtypes’ list of a function or as the type of
a member field in a structure definition, only instances of exactly the
same type are accepted.  There are some exceptions to this rule, where
ctypes accepts other objects.  For example, you can pass compatible
array instances instead of pointer types.  So, for ‘POINTER(c_int)’,
ctypes accepts an array of c_int:

     >>> class Bar(Structure):
     ...     _fields_ = [("count", c_int), ("values", POINTER(c_int))]
     ...
     >>> bar = Bar()
     >>> bar.values = (c_int * 3)(1, 2, 3)
     >>> bar.count = 3
     >>> for i in range(bar.count):
     ...     print bar.values[i]
     ...
     1
     2
     3
     >>>

  In addition, if a function argument is explicitly declared to be a
pointer type (such as ‘POINTER(c_int)’) in ‘argtypes’, an object of the
pointed type (‘c_int’ in this case) can be passed to the function.
ctypes will apply the required *note byref(): 1523. conversion in this
case automatically.

  To set a POINTER type field to ‘NULL’, you can assign ‘None’:

     >>> bar.values = None
     >>>

  Sometimes you have instances of incompatible types.  In C, you can
cast one type into another type.  *note ctypes: 78. provides a *note
cast(): 1537. function which can be used in the same way.  The ‘Bar’
structure defined above accepts ‘POINTER(c_int)’ pointers or *note
c_int: 14fb. arrays for its ‘values’ field, but not instances of other
types:

     >>> bar.values = (c_byte * 4)()
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance
     >>>

  For these cases, the *note cast(): 1537. function is handy.

  The *note cast(): 1537. function can be used to cast a ctypes instance
into a pointer to a different ctypes data type.  *note cast(): 1537.
takes two parameters, a ctypes object that is or can be converted to a
pointer of some kind, and a ctypes pointer type.  It returns an instance
of the second argument, which references the same memory block as the
first argument:

     >>> a = (c_byte * 4)()
     >>> cast(a, POINTER(c_int))
     <ctypes.LP_c_long object at ...>
     >>>

  So, *note cast(): 1537. can be used to assign to the ‘values’ field of
‘Bar’ the structure:

     >>> bar = Bar()
     >>> bar.values = cast((c_byte * 4)(), POINTER(c_int))
     >>> print bar.values[0]
     0
     >>>


File: python.info,  Node: Incomplete Types,  Next: Callback functions,  Prev: Type conversions,  Up: ctypes tutorial

5.15.17.17 Incomplete Types
...........................

_Incomplete Types_ are structures, unions or arrays whose members are
not yet specified.  In C, they are specified by forward declarations,
which are defined later:

     struct cell; /* forward declaration */

     struct cell {
         char *name;
         struct cell *next;
     };

  The straightforward translation into ctypes code would be this, but it
does not work:

     >>> class cell(Structure):
     ...     _fields_ = [("name", c_char_p),
     ...                 ("next", POINTER(cell))]
     ...
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "<stdin>", line 2, in cell
     NameError: name 'cell' is not defined
     >>>

  because the new ‘class cell’ is not available in the class statement
itself.  In *note ctypes: 78, we can define the ‘cell’ class and set the
‘_fields_’ attribute later, after the class statement:

     >>> from ctypes import *
     >>> class cell(Structure):
     ...     pass
     ...
     >>> cell._fields_ = [("name", c_char_p),
     ...                  ("next", POINTER(cell))]
     >>>

  Lets try it.  We create two instances of ‘cell’, and let them point to
each other, and finally follow the pointer chain a few times:

     >>> c1 = cell()
     >>> c1.name = "foo"
     >>> c2 = cell()
     >>> c2.name = "bar"
     >>> c1.next = pointer(c2)
     >>> c2.next = pointer(c1)
     >>> p = c1
     >>> for i in range(8):
     ...     print p.name,
     ...     p = p.next[0]
     ...
     foo bar foo bar foo bar foo bar
     >>>


File: python.info,  Node: Callback functions,  Next: Accessing values exported from dlls,  Prev: Incomplete Types,  Up: ctypes tutorial

5.15.17.18 Callback functions
.............................

*note ctypes: 78. allows to create C callable function pointers from
Python callables.  These are sometimes called _callback functions_.

  First, you must create a class for the callback function, the class
knows the calling convention, the return type, and the number and types
of arguments this function will receive.

  The CFUNCTYPE factory function creates types for callback functions
using the normal cdecl calling convention, and, on Windows, the
WINFUNCTYPE factory function creates types for callback functions using
the stdcall calling convention.

  Both of these factory functions are called with the result type as
first argument, and the callback functions expected argument types as
the remaining arguments.

  I will present an example here which uses the standard C library’s
‘qsort()’ function, this is used to sort items with the help of a
callback function.  ‘qsort()’ will be used to sort an array of integers:

     >>> IntArray5 = c_int * 5
     >>> ia = IntArray5(5, 1, 7, 33, 99)
     >>> qsort = libc.qsort
     >>> qsort.restype = None
     >>>

  ‘qsort()’ must be called with a pointer to the data to sort, the
number of items in the data array, the size of one item, and a pointer
to the comparison function, the callback.  The callback will then be
called with two pointers to items, and it must return a negative integer
if the first item is smaller than the second, a zero if they are equal,
and a positive integer else.

  So our callback function receives pointers to integers, and must
return an integer.  First we create the ‘type’ for the callback
function:

     >>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
     >>>

  For the first implementation of the callback function, we simply print
the arguments we get, and return 0 (incremental development ;-):

     >>> def py_cmp_func(a, b):
     ...     print "py_cmp_func", a, b
     ...     return 0
     ...
     >>>

  Create the C callable callback:

     >>> cmp_func = CMPFUNC(py_cmp_func)
     >>>

  And we’re ready to go:

     >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>
     >>>

  We know how to access the contents of a pointer, so lets redefine our
callback:

     >>> def py_cmp_func(a, b):
     ...     print "py_cmp_func", a[0], b[0]
     ...     return 0
     ...
     >>> cmp_func = CMPFUNC(py_cmp_func)
     >>>

  Here is what we get on Windows:

     >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS
     py_cmp_func 7 1
     py_cmp_func 33 1
     py_cmp_func 99 1
     py_cmp_func 5 1
     py_cmp_func 7 5
     py_cmp_func 33 5
     py_cmp_func 99 5
     py_cmp_func 7 99
     py_cmp_func 33 99
     py_cmp_func 7 33
     >>>

  It is funny to see that on linux the sort function seems to work much
more efficiently, it is doing less comparisons:

     >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +LINUX
     py_cmp_func 5 1
     py_cmp_func 33 99
     py_cmp_func 7 33
     py_cmp_func 5 7
     py_cmp_func 1 7
     >>>

  Ah, we’re nearly done!  The last step is to actually compare the two
items and return a useful result:

     >>> def py_cmp_func(a, b):
     ...     print "py_cmp_func", a[0], b[0]
     ...     return a[0] - b[0]
     ...
     >>>

  Final run on Windows:

     >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +WINDOWS
     py_cmp_func 33 7
     py_cmp_func 99 33
     py_cmp_func 5 99
     py_cmp_func 1 99
     py_cmp_func 33 7
     py_cmp_func 1 33
     py_cmp_func 5 33
     py_cmp_func 5 7
     py_cmp_func 1 7
     py_cmp_func 5 1
     >>>

  and on Linux:

     >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX
     py_cmp_func 5 1
     py_cmp_func 33 99
     py_cmp_func 7 33
     py_cmp_func 1 7
     py_cmp_func 5 7
     >>>

  It is quite interesting to see that the Windows ‘qsort()’ function
needs more comparisons than the linux version!

  As we can easily check, our array is sorted now:

     >>> for i in ia: print i,
     ...
     1 5 7 33 99
     >>>

     Note: Make sure you keep references to *note CFUNCTYPE(): 153c.
     objects as long as they are used from C code.  *note ctypes: 78.
     doesn’t, and if you don’t, they may be garbage collected, crashing
     your program when a callback is made.

     Also, note that if the callback function is called in a thread
     created outside of Python’s control (e.g.  by the foreign code that
     calls the callback), ctypes creates a new dummy Python thread on
     every invocation.  This behavior is correct for most purposes, but
     it means that values stored with ‘threading.local’ will _not_
     survive across different callbacks, even when those calls are made
     from the same C thread.


File: python.info,  Node: Accessing values exported from dlls,  Next: Surprises,  Prev: Callback functions,  Up: ctypes tutorial

5.15.17.19 Accessing values exported from dlls
..............................................

Some shared libraries not only export functions, they also export
variables.  An example in the Python library itself is the
‘Py_OptimizeFlag’, an integer set to 0, 1, or 2, depending on the *note
-O: 453. or *note -OO: 584. flag given on startup.

  *note ctypes: 78. can access values like this with the ‘in_dll()’
class methods of the type.  _pythonapi_ is a predefined symbol giving
access to the Python C api:

     >>> opt_flag = c_int.in_dll(pythonapi, "Py_OptimizeFlag")
     >>> print opt_flag
     c_long(0)
     >>>

  If the interpreter would have been started with *note -O: 453, the
sample would have printed ‘c_long(1)’, or ‘c_long(2)’ if *note -OO: 584.
would have been specified.

  An extended example which also demonstrates the use of pointers
accesses the ‘PyImport_FrozenModules’ pointer exported by Python.

  Quoting the Python docs: _This pointer is initialized to point to an
array of "struct _frozen" records, terminated by one whose members are
all NULL or zero.  When a frozen module is imported, it is searched in
this table.  Third-party code could play tricks with this to provide a
dynamically created collection of frozen modules._

  So manipulating this pointer could even prove useful.  To restrict the
example size, we show only how this table can be read with *note ctypes:
78.:

     >>> from ctypes import *
     >>>
     >>> class struct_frozen(Structure):
     ...     _fields_ = [("name", c_char_p),
     ...                 ("code", POINTER(c_ubyte)),
     ...                 ("size", c_int)]
     ...
     >>>

  We have defined the ‘struct _frozen’ data type, so we can get the
pointer to the table:

     >>> FrozenTable = POINTER(struct_frozen)
     >>> table = FrozenTable.in_dll(pythonapi, "PyImport_FrozenModules")
     >>>

  Since ‘table’ is a ‘pointer’ to the array of ‘struct_frozen’ records,
we can iterate over it, but we just have to make sure that our loop
terminates, because pointers have no size.  Sooner or later it would
probably crash with an access violation or whatever, so it’s better to
break out of the loop when we hit the NULL entry:

     >>> for item in table:
     ...    print item.name, item.size
     ...    if item.name is None:
     ...        break
     ...
     __hello__ 104
     __phello__ -104
     __phello__.spam 104
     None 0
     >>>

  The fact that standard Python has a frozen module and a frozen package
(indicated by the negative size member) is not well known, it is only
used for testing.  Try it out with ‘import __hello__’ for example.


File: python.info,  Node: Surprises,  Next: Variable-sized data types,  Prev: Accessing values exported from dlls,  Up: ctypes tutorial

5.15.17.20 Surprises
....................

There are some edge cases in *note ctypes: 78. where you might expect
something other than what actually happens.

  Consider the following example:

     >>> from ctypes import *
     >>> class POINT(Structure):
     ...     _fields_ = ("x", c_int), ("y", c_int)
     ...
     >>> class RECT(Structure):
     ...     _fields_ = ("a", POINT), ("b", POINT)
     ...
     >>> p1 = POINT(1, 2)
     >>> p2 = POINT(3, 4)
     >>> rc = RECT(p1, p2)
     >>> print rc.a.x, rc.a.y, rc.b.x, rc.b.y
     1 2 3 4
     >>> # now swap the two points
     >>> rc.a, rc.b = rc.b, rc.a
     >>> print rc.a.x, rc.a.y, rc.b.x, rc.b.y
     3 4 3 4
     >>>

  Hm.  We certainly expected the last statement to print ‘3 4 1 2’.
What happened?  Here are the steps of the ‘rc.a, rc.b = rc.b, rc.a’ line
above:

     >>> temp0, temp1 = rc.b, rc.a
     >>> rc.a = temp0
     >>> rc.b = temp1
     >>>

  Note that ‘temp0’ and ‘temp1’ are objects still using the internal
buffer of the ‘rc’ object above.  So executing ‘rc.a = temp0’ copies the
buffer contents of ‘temp0’ into ‘rc’ ’s buffer.  This, in turn, changes
the contents of ‘temp1’.  So, the last assignment ‘rc.b = temp1’,
doesn’t have the expected effect.

  Keep in mind that retrieving sub-objects from Structure, Unions, and
Arrays doesn’t _copy_ the sub-object, instead it retrieves a wrapper
object accessing the root-object’s underlying buffer.

  Another example that may behave different from what one would expect
is this:

     >>> s = c_char_p()
     >>> s.value = "abc def ghi"
     >>> s.value
     'abc def ghi'
     >>> s.value is s.value
     False
     >>>

  Why is it printing ‘False’?  ctypes instances are objects containing a
memory block plus some *note descriptor: 1529.s accessing the contents
of the memory.  Storing a Python object in the memory block does not
store the object itself, instead the ‘contents’ of the object is stored.
Accessing the contents again constructs a new Python object each time!


File: python.info,  Node: Variable-sized data types,  Prev: Surprises,  Up: ctypes tutorial

5.15.17.21 Variable-sized data types
....................................

*note ctypes: 78. provides some support for variable-sized arrays and
structures.

  The *note resize(): 1543. function can be used to resize the memory
buffer of an existing ctypes object.  The function takes the object as
first argument, and the requested size in bytes as the second argument.
The memory block cannot be made smaller than the natural memory block
specified by the objects type, a *note ValueError: 236. is raised if
this is tried:

     >>> short_array = (c_short * 4)()
     >>> print sizeof(short_array)
     8
     >>> resize(short_array, 4)
     Traceback (most recent call last):
         ...
     ValueError: minimum size is 8
     >>> resize(short_array, 32)
     >>> sizeof(short_array)
     32
     >>> sizeof(type(short_array))
     8
     >>>

  This is nice and fine, but how would one access the additional
elements contained in this array?  Since the type still only knows about
4 elements, we get errors accessing other elements:

     >>> short_array[:]
     [0, 0, 0, 0]
     >>> short_array[7]
     Traceback (most recent call last):
         ...
     IndexError: invalid index
     >>>

  Another way to use variable-sized data types with *note ctypes: 78. is
to use the dynamic nature of Python, and (re-)define the data type after
the required size is already known, on a case by case basis.


File: python.info,  Node: ctypes reference,  Prev: ctypes tutorial,  Up: ctypes --- A foreign function library for Python

5.15.17.22 ctypes reference
...........................

* Menu:

* Finding shared libraries:: 
* Loading shared libraries:: 
* Foreign functions:: 
* Function prototypes:: 
* Utility functions:: 
* Data types:: 
* Fundamental data types: Fundamental data types<2>. 
* Structured data types:: 
* Arrays and pointers:: 


File: python.info,  Node: Finding shared libraries,  Next: Loading shared libraries,  Up: ctypes reference

5.15.17.23 Finding shared libraries
...................................

When programming in a compiled language, shared libraries are accessed
when compiling/linking a program, and when the program is run.

  The purpose of the ‘find_library()’ function is to locate a library in
a way similar to what the compiler does (on platforms with several
versions of a shared library the most recent should be loaded), while
the ctypes library loaders act like when a program is run, and call the
runtime loader directly.

  The ‘ctypes.util’ module provides a function which can help to
determine the library to load.

 -- Data: ctypes.util.find_library (name)

     Try to find a library and return a pathname.  _name_ is the library
     name without any prefix like _lib_, suffix like ‘.so’, ‘.dylib’ or
     version number (this is the form used for the posix linker option
     ‘-l’).  If no library can be found, returns ‘None’.

  The exact functionality is system dependent.

  On Linux, ‘find_library()’ tries to run external programs
(‘/sbin/ldconfig’, ‘gcc’, and ‘objdump’) to find the library file.  It
returns the filename of the library file.  Here are some examples:

     >>> from ctypes.util import find_library
     >>> find_library("m")
     'libm.so.6'
     >>> find_library("c")
     'libc.so.6'
     >>> find_library("bz2")
     'libbz2.so.1.0'
     >>>

  On OS X, ‘find_library()’ tries several predefined naming schemes and
paths to locate the library, and returns a full pathname if successful:

     >>> from ctypes.util import find_library
     >>> find_library("c")
     '/usr/lib/libc.dylib'
     >>> find_library("m")
     '/usr/lib/libm.dylib'
     >>> find_library("bz2")
     '/usr/lib/libbz2.dylib'
     >>> find_library("AGL")
     '/System/Library/Frameworks/AGL.framework/AGL'
     >>>

  On Windows, ‘find_library()’ searches along the system search path,
and returns the full pathname, but since there is no predefined naming
scheme a call like ‘find_library("c")’ will fail and return ‘None’.

  If wrapping a shared library with *note ctypes: 78, it _may_ be better
to determine the shared library name at development time, and hardcode
that into the wrapper module instead of using ‘find_library()’ to locate
the library at runtime.


File: python.info,  Node: Loading shared libraries,  Next: Foreign functions,  Prev: Finding shared libraries,  Up: ctypes reference

5.15.17.24 Loading shared libraries
...................................

There are several ways to loaded shared libraries into the Python
process.  One way is to instantiate one of the following classes:

 -- Class: ctypes.CDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)

     Instances of this class represent loaded shared libraries.
     Functions in these libraries use the standard C calling convention,
     and are assumed to return ‘int’.

 -- Class: ctypes.OleDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)

     Windows only: Instances of this class represent loaded shared
     libraries, functions in these libraries use the ‘stdcall’ calling
     convention, and are assumed to return the windows specific *note
     HRESULT: 154c. code.  *note HRESULT: 154c. values contain
     information specifying whether the function call failed or
     succeeded, together with additional error code.  If the return
     value signals a failure, an ‘WindowsError’ is automatically raised.

 -- Class: ctypes.WinDLL (name, mode=DEFAULT_MODE, handle=None,
          use_errno=False, use_last_error=False)

     Windows only: Instances of this class represent loaded shared
     libraries, functions in these libraries use the ‘stdcall’ calling
     convention, and are assumed to return ‘int’ by default.

     On Windows CE only the standard calling convention is used, for
     convenience the *note WinDLL: 154d. and *note OleDLL: 154b. use the
     standard calling convention on this platform.

  The Python *note global interpreter lock: 154e. is released before
calling any function exported by these libraries, and reacquired
afterwards.

 -- Class: ctypes.PyDLL (name, mode=DEFAULT_MODE, handle=None)

     Instances of this class behave like *note CDLL: 154a. instances,
     except that the Python GIL is _not_ released during the function
     call, and after the function execution the Python error flag is
     checked.  If the error flag is set, a Python exception is raised.

     Thus, this is only useful to call Python C api functions directly.

  All these classes can be instantiated by calling them with at least
one argument, the pathname of the shared library.  If you have an
existing handle to an already loaded shared library, it can be passed as
the ‘handle’ named parameter, otherwise the underlying platforms
‘dlopen’ or ‘LoadLibrary’ function is used to load the library into the
process, and to get a handle to it.

  The _mode_ parameter can be used to specify how the library is loaded.
For details, consult the ‘dlopen(3)’ manpage, on Windows, _mode_ is
ignored.

  The _use_errno_ parameter, when set to True, enables a ctypes
mechanism that allows to access the system *note errno: c8. error number
in a safe way.  *note ctypes: 78. maintains a thread-local copy of the
systems *note errno: c8. variable; if you call foreign functions created
with ‘use_errno=True’ then the *note errno: c8. value before the
function call is swapped with the ctypes private copy, the same happens
immediately after the function call.

  The function *note ctypes.get_errno(): 1550. returns the value of the
ctypes private copy, and the function *note ctypes.set_errno(): 1551.
changes the ctypes private copy to a new value and returns the former
value.

  The _use_last_error_ parameter, when set to True, enables the same
mechanism for the Windows error code which is managed by the *note
GetLastError(): 1520. and ‘SetLastError()’ Windows API functions; *note
ctypes.get_last_error(): 1552. and *note ctypes.set_last_error(): 1553.
are used to request and change the ctypes private copy of the windows
error code.

  New in version 2.6: The _use_last_error_ and _use_errno_ optional
parameters were added.

 -- Data: ctypes.RTLD_GLOBAL

     Flag to use as _mode_ parameter.  On platforms where this flag is
     not available, it is defined as the integer zero.

 -- Data: ctypes.RTLD_LOCAL

     Flag to use as _mode_ parameter.  On platforms where this is not
     available, it is the same as _RTLD_GLOBAL_.

 -- Data: ctypes.DEFAULT_MODE

     The default mode which is used to load shared libraries.  On OSX
     10.3, this is _RTLD_GLOBAL_, otherwise it is the same as
     _RTLD_LOCAL_.

  Instances of these classes have no public methods, however *note
__getattr__(): 331. and *note __getitem__(): 44f. have special behavior:
functions exported by the shared library can be accessed as attributes
of by index.  Please note that both *note __getattr__(): 331. and *note
__getitem__(): 44f. cache their result, so calling them repeatedly
returns the same object each time.

  The following public attributes are available, their name starts with
an underscore to not clash with exported function names:

 -- Attribute: PyDLL._handle

     The system handle used to access the library.

 -- Attribute: PyDLL._name

     The name of the library passed in the constructor.

  Shared libraries can also be loaded by using one of the prefabricated
objects, which are instances of the *note LibraryLoader: 1556. class,
either by calling the ‘LoadLibrary()’ method, or by retrieving the
library as attribute of the loader instance.

 -- Class: ctypes.LibraryLoader (dlltype)

     Class which loads shared libraries.  _dlltype_ should be one of the
     *note CDLL: 154a, *note PyDLL: 154f, *note WinDLL: 154d, or *note
     OleDLL: 154b. types.

     *note __getattr__(): 331. has special behavior: It allows to load a
     shared library by accessing it as attribute of a library loader
     instance.  The result is cached, so repeated attribute accesses
     return the same library each time.

      -- Method: LoadLibrary (name)

          Load a shared library into the process and return it.  This
          method always returns a new instance of the library.

  These prefabricated library loaders are available:

 -- Data: ctypes.cdll

     Creates *note CDLL: 154a. instances.

 -- Data: ctypes.windll

     Windows only: Creates *note WinDLL: 154d. instances.

 -- Data: ctypes.oledll

     Windows only: Creates *note OleDLL: 154b. instances.

 -- Data: ctypes.pydll

     Creates *note PyDLL: 154f. instances.

  For accessing the C Python api directly, a ready-to-use Python shared
library object is available:

 -- Data: ctypes.pythonapi

     An instance of *note PyDLL: 154f. that exposes Python C API
     functions as attributes.  Note that all these functions are assumed
     to return C ‘int’, which is of course not always the truth, so you
     have to assign the correct ‘restype’ attribute to use these
     functions.


File: python.info,  Node: Foreign functions,  Next: Function prototypes,  Prev: Loading shared libraries,  Up: ctypes reference

5.15.17.25 Foreign functions
............................

As explained in the previous section, foreign functions can be accessed
as attributes of loaded shared libraries.  The function objects created
in this way by default accept any number of arguments, accept any ctypes
data instances as arguments, and return the default result type
specified by the library loader.  They are instances of a private class:

 -- Class: ctypes._FuncPtr

     Base class for C callable foreign functions.

     Instances of foreign functions are also C compatible data types;
     they represent C function pointers.

     This behavior can be customized by assigning to special attributes
     of the foreign function object.

      -- Attribute: restype

          Assign a ctypes type to specify the result type of the foreign
          function.  Use ‘None’ for ‘void’, a function not returning
          anything.

          It is possible to assign a callable Python object that is not
          a ctypes type, in this case the function is assumed to return
          a C ‘int’, and the callable will be called with this integer,
          allowing to do further processing or error checking.  Using
          this is deprecated, for more flexible post processing or error
          checking use a ctypes data type as *note restype: 155b. and
          assign a callable to the *note errcheck: 155c. attribute.

      -- Attribute: argtypes

          Assign a tuple of ctypes types to specify the argument types
          that the function accepts.  Functions using the ‘stdcall’
          calling convention can only be called with the same number of
          arguments as the length of this tuple; functions using the C
          calling convention accept additional, unspecified arguments as
          well.

          When a foreign function is called, each actual argument is
          passed to the ‘from_param()’ class method of the items in the
          *note argtypes: 155d. tuple, this method allows to adapt the
          actual argument to an object that the foreign function
          accepts.  For example, a *note c_char_p: 1513. item in the
          *note argtypes: 155d. tuple will convert a unicode string
          passed as argument into an byte string using ctypes conversion
          rules.

          New: It is now possible to put items in argtypes which are not
          ctypes types, but each item must have a ‘from_param()’ method
          which returns a value usable as argument (integer, string,
          ctypes instance).  This allows to define adapters that can
          adapt custom objects as function parameters.

      -- Attribute: errcheck

          Assign a Python function or another callable to this
          attribute.  The callable will be called with three or more
          arguments:

           -- Function: callable (result, func, arguments)

               _result_ is what the foreign function returns, as
               specified by the *note restype: 155b. attribute.

               _func_ is the foreign function object itself, this allows
               to reuse the same callable object to check or post
               process the results of several functions.

               _arguments_ is a tuple containing the parameters
               originally passed to the function call, this allows to
               specialize the behavior on the arguments used.

          The object that this function returns will be returned from
          the foreign function call, but it can also check the result
          value and raise an exception if the foreign function call
          failed.

 -- Exception: ctypes.ArgumentError

     This exception is raised when a foreign function call cannot
     convert one of the passed arguments.


File: python.info,  Node: Function prototypes,  Next: Utility functions,  Prev: Foreign functions,  Up: ctypes reference

5.15.17.26 Function prototypes
..............................

Foreign functions can also be created by instantiating function
prototypes.  Function prototypes are similar to function prototypes in
C; they describe a function (return type, argument types, calling
convention) without defining an implementation.  The factory functions
must be called with the desired result type and the argument types of
the function.

 -- Function: ctypes.CFUNCTYPE (restype, *argtypes, use_errno=False,
          use_last_error=False)

     The returned function prototype creates functions that use the
     standard C calling convention.  The function will release the GIL
     during the call.  If _use_errno_ is set to True, the ctypes private
     copy of the system *note errno: c8. variable is exchanged with the
     real *note errno: c8. value before and after the call;
     _use_last_error_ does the same for the Windows error code.

     Changed in version 2.6: The optional _use_errno_ and
     _use_last_error_ parameters were added.

 -- Function: ctypes.WINFUNCTYPE (restype, *argtypes, use_errno=False,
          use_last_error=False)

     Windows only: The returned function prototype creates functions
     that use the ‘stdcall’ calling convention, except on Windows CE
     where *note WINFUNCTYPE(): 1561. is the same as *note CFUNCTYPE():
     153c.  The function will release the GIL during the call.
     _use_errno_ and _use_last_error_ have the same meaning as above.

 -- Function: ctypes.PYFUNCTYPE (restype, *argtypes)

     The returned function prototype creates functions that use the
     Python calling convention.  The function will _not_ release the GIL
     during the call.

  Function prototypes created by these factory functions can be
instantiated in different ways, depending on the type and number of the
parameters in the call:

      -- Function: prototype (address)

          Returns a foreign function at the specified address which must
          be an integer.

      -- Function: prototype (callable)

          Create a C callable function (a callback function) from a
          Python _callable_.

      -- Function: prototype (func_spec[, paramflags])

          Returns a foreign function exported by a shared library.
          _func_spec_ must be a 2-tuple ‘(name_or_ordinal, library)’.
          The first item is the name of the exported function as string,
          or the ordinal of the exported function as small integer.  The
          second item is the shared library instance.

      -- Function: prototype (vtbl_index, name[, paramflags[, iid]])

          Returns a foreign function that will call a COM method.
          _vtbl_index_ is the index into the virtual function table, a
          small non-negative integer.  _name_ is name of the COM method.
          _iid_ is an optional pointer to the interface identifier which
          is used in extended error reporting.

          COM methods use a special calling convention: They require a
          pointer to the COM interface as first argument, in addition to
          those parameters that are specified in the ‘argtypes’ tuple.

     The optional _paramflags_ parameter creates foreign function
     wrappers with much more functionality than the features described
     above.

     _paramflags_ must be a tuple of the same length as ‘argtypes’.

     Each item in this tuple contains further information about a
     parameter, it must be a tuple containing one, two, or three items.

     The first item is an integer containing a combination of direction
     flags for the parameter:

          1

               Specifies an input parameter to the function.

          2

               Output parameter.  The foreign function fills in a value.

          4

               Input parameter which defaults to the integer zero.

     The optional second item is the parameter name as string.  If this
     is specified, the foreign function can be called with named
     parameters.

     The optional third item is the default value for this parameter.

  This example demonstrates how to wrap the Windows ‘MessageBoxA’
function so that it supports default parameters and named arguments.
The C declaration from the windows header file is this:

     WINUSERAPI int WINAPI
     MessageBoxA(
         HWND hWnd,
         LPCSTR lpText,
         LPCSTR lpCaption,
         UINT uType);

  Here is the wrapping with *note ctypes: 78.:

     >>> from ctypes import c_int, WINFUNCTYPE, windll
     >>> from ctypes.wintypes import HWND, LPCSTR, UINT
     >>> prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
     >>> paramflags = (1, "hwnd", 0), (1, "text", "Hi"), (1, "caption", None), (1, "flags", 0)
     >>> MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)
     >>>

  The MessageBox foreign function can now be called in these ways:

     >>> MessageBox()
     >>> MessageBox(text="Spam, spam, spam")
     >>> MessageBox(flags=2, text="foo bar")
     >>>

  A second example demonstrates output parameters.  The win32
‘GetWindowRect’ function retrieves the dimensions of a specified window
by copying them into ‘RECT’ structure that the caller has to supply.
Here is the C declaration:

     WINUSERAPI BOOL WINAPI
     GetWindowRect(
          HWND hWnd,
          LPRECT lpRect);

  Here is the wrapping with *note ctypes: 78.:

     >>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError
     >>> from ctypes.wintypes import BOOL, HWND, RECT
     >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
     >>> paramflags = (1, "hwnd"), (2, "lprect")
     >>> GetWindowRect = prototype(("GetWindowRect", windll.user32), paramflags)
     >>>

  Functions with output parameters will automatically return the output
parameter value if there is a single one, or a tuple containing the
output parameter values when there are more than one, so the
GetWindowRect function now returns a RECT instance, when called.

  Output parameters can be combined with the ‘errcheck’ protocol to do
further output processing and error checking.  The win32 ‘GetWindowRect’
api function returns a ‘BOOL’ to signal success or failure, so this
function could do the error checking, and raises an exception when the
api call failed:

     >>> def errcheck(result, func, args):
     ...     if not result:
     ...         raise WinError()
     ...     return args
     ...
     >>> GetWindowRect.errcheck = errcheck
     >>>

  If the ‘errcheck’ function returns the argument tuple it receives
unchanged, *note ctypes: 78. continues the normal processing it does on
the output parameters.  If you want to return a tuple of window
coordinates instead of a ‘RECT’ instance, you can retrieve the fields in
the function and return them instead, the normal processing will no
longer take place:

     >>> def errcheck(result, func, args):
     ...     if not result:
     ...         raise WinError()
     ...     rc = args[1]
     ...     return rc.left, rc.top, rc.bottom, rc.right
     ...
     >>> GetWindowRect.errcheck = errcheck
     >>>


File: python.info,  Node: Utility functions,  Next: Data types,  Prev: Function prototypes,  Up: ctypes reference

5.15.17.27 Utility functions
............................

 -- Function: ctypes.addressof (obj)

     Returns the address of the memory buffer as integer.  _obj_ must be
     an instance of a ctypes type.

 -- Function: ctypes.alignment (obj_or_type)

     Returns the alignment requirements of a ctypes type.  _obj_or_type_
     must be a ctypes type or instance.

 -- Function: ctypes.byref (obj[, offset])

     Returns a light-weight pointer to _obj_, which must be an instance
     of a ctypes type.  _offset_ defaults to zero, and must be an
     integer that will be added to the internal pointer value.

     ‘byref(obj, offset)’ corresponds to this C code:

          (((char *)&obj) + offset)

     The returned object can only be used as a foreign function call
     parameter.  It behaves similar to ‘pointer(obj)’, but the
     construction is a lot faster.

     New in version 2.6: The _offset_ optional argument was added.

 -- Function: ctypes.cast (obj, type)

     This function is similar to the cast operator in C. It returns a
     new instance of _type_ which points to the same memory block as
     _obj_.  _type_ must be a pointer type, and _obj_ must be an object
     that can be interpreted as a pointer.

 -- Function: ctypes.create_string_buffer (init_or_size[, size])

     This function creates a mutable character buffer.  The returned
     object is a ctypes array of *note c_char: 1506.

     _init_or_size_ must be an integer which specifies the size of the
     array, or a string which will be used to initialize the array
     items.

     If a string is specified as first argument, the buffer is made one
     item larger than the length of the string so that the last element
     in the array is a NUL termination character.  An integer can be
     passed as second argument which allows to specify the size of the
     array if the length of the string should not be used.

     If the first parameter is a unicode string, it is converted into an
     8-bit string according to ctypes conversion rules.

 -- Function: ctypes.create_unicode_buffer (init_or_size[, size])

     This function creates a mutable unicode character buffer.  The
     returned object is a ctypes array of *note c_wchar: 1507.

     _init_or_size_ must be an integer which specifies the size of the
     array, or a unicode string which will be used to initialize the
     array items.

     If a unicode string is specified as first argument, the buffer is
     made one item larger than the length of the string so that the last
     element in the array is a NUL termination character.  An integer
     can be passed as second argument which allows to specify the size
     of the array if the length of the string should not be used.

     If the first parameter is a 8-bit string, it is converted into an
     unicode string according to ctypes conversion rules.

 -- Function: ctypes.DllCanUnloadNow ()

     Windows only: This function is a hook which allows to implement
     in-process COM servers with ctypes.  It is called from the
     DllCanUnloadNow function that the _ctypes extension dll exports.

 -- Function: ctypes.DllGetClassObject ()

     Windows only: This function is a hook which allows to implement
     in-process COM servers with ctypes.  It is called from the
     DllGetClassObject function that the ‘_ctypes’ extension dll
     exports.

 -- Function: ctypes.util.find_library (name)

     Try to find a library and return a pathname.  _name_ is the library
     name without any prefix like ‘lib’, suffix like ‘.so’, ‘.dylib’ or
     version number (this is the form used for the posix linker option
     ‘-l’).  If no library can be found, returns ‘None’.

     The exact functionality is system dependent.

     Changed in version 2.6: Windows only: ‘find_library("m")’ or
     ‘find_library("c")’ return the result of a call to ‘find_msvcrt()’.

 -- Function: ctypes.util.find_msvcrt ()

     Windows only: return the filename of the VC runtype library used by
     Python, and by the extension modules.  If the name of the library
     cannot be determined, ‘None’ is returned.

     If you need to free memory, for example, allocated by an extension
     module with a call to the ‘free(void *)’, it is important that you
     use the function in the same library that allocated the memory.

     New in version 2.6.

 -- Function: ctypes.FormatError ([code])

     Windows only: Returns a textual description of the error code
     _code_.  If no error code is specified, the last error code is used
     by calling the Windows api function GetLastError.

 -- Function: ctypes.GetLastError ()

     Windows only: Returns the last error code set by Windows in the
     calling thread.  This function calls the Windows ‘GetLastError()’
     function directly, it does not return the ctypes-private copy of
     the error code.

 -- Function: ctypes.get_errno ()

     Returns the current value of the ctypes-private copy of the system
     *note errno: c8. variable in the calling thread.

     New in version 2.6.

 -- Function: ctypes.get_last_error ()

     Windows only: returns the current value of the ctypes-private copy
     of the system ‘LastError’ variable in the calling thread.

     New in version 2.6.

 -- Function: ctypes.memmove (dst, src, count)

     Same as the standard C memmove library function: copies _count_
     bytes from _src_ to _dst_.  _dst_ and _src_ must be integers or
     ctypes instances that can be converted to pointers.

 -- Function: ctypes.memset (dst, c, count)

     Same as the standard C memset library function: fills the memory
     block at address _dst_ with _count_ bytes of value _c_.  _dst_ must
     be an integer specifying an address, or a ctypes instance.

 -- Function: ctypes.POINTER (type)

     This factory function creates and returns a new ctypes pointer
     type.  Pointer types are cached an reused internally, so calling
     this function repeatedly is cheap.  _type_ must be a ctypes type.

 -- Function: ctypes.pointer (obj)

     This function creates a new pointer instance, pointing to _obj_.
     The returned object is of the type ‘POINTER(type(obj))’.

     Note: If you just want to pass a pointer to an object to a foreign
     function call, you should use ‘byref(obj)’ which is much faster.

 -- Function: ctypes.resize (obj, size)

     This function resizes the internal memory buffer of _obj_, which
     must be an instance of a ctypes type.  It is not possible to make
     the buffer smaller than the native size of the objects type, as
     given by ‘sizeof(type(obj))’, but it is possible to enlarge the
     buffer.

 -- Function: ctypes.set_conversion_mode (encoding, errors)

     This function sets the rules that ctypes objects use when
     converting between 8-bit strings and unicode strings.  _encoding_
     must be a string specifying an encoding, like ‘'utf-8'’ or
     ‘'mbcs'’, _errors_ must be a string specifying the error handling
     on encoding/decoding errors.  Examples of possible values are
     ‘"strict"’, ‘"replace"’, or ‘"ignore"’.

     *note set_conversion_mode(): 156e. returns a 2-tuple containing the
     previous conversion rules.  On windows, the initial conversion
     rules are ‘('mbcs', 'ignore')’, on other systems ‘('ascii',
     'strict')’.

 -- Function: ctypes.set_errno (value)

     Set the current value of the ctypes-private copy of the system
     *note errno: c8. variable in the calling thread to _value_ and
     return the previous value.

     New in version 2.6.

 -- Function: ctypes.set_last_error (value)

     Windows only: set the current value of the ctypes-private copy of
     the system ‘LastError’ variable in the calling thread to _value_
     and return the previous value.

     New in version 2.6.

 -- Function: ctypes.sizeof (obj_or_type)

     Returns the size in bytes of a ctypes type or instance memory
     buffer.  Does the same as the C ‘sizeof’ operator.

 -- Function: ctypes.string_at (address[, size])

     This function returns the string starting at memory address
     _address_.  If size is specified, it is used as size, otherwise the
     string is assumed to be zero-terminated.

 -- Function: ctypes.WinError (code=None, descr=None)

     Windows only: this function is probably the worst-named thing in
     ctypes.  It creates an instance of WindowsError.  If _code_ is not
     specified, ‘GetLastError’ is called to determine the error code.
     If ‘descr’ is not specified, *note FormatError(): 156b. is called
     to get a textual description of the error.

 -- Function: ctypes.wstring_at (address[, size])

     This function returns the wide character string starting at memory
     address _address_ as unicode string.  If _size_ is specified, it is
     used as the number of characters of the string, otherwise the
     string is assumed to be zero-terminated.


File: python.info,  Node: Data types,  Next: Fundamental data types<2>,  Prev: Utility functions,  Up: ctypes reference

5.15.17.28 Data types
.....................

 -- Class: ctypes._CData

     This non-public class is the common base class of all ctypes data
     types.  Among other things, all ctypes type instances contain a
     memory block that hold C compatible data; the address of the memory
     block is returned by the *note addressof(): 1565. helper function.
     Another instance variable is exposed as *note _objects: 1576.; this
     contains other Python objects that need to be kept alive in case
     the memory block contains pointers.

     Common methods of ctypes data types, these are all class methods
     (to be exact, they are methods of the *note metaclass: 1577.):

      -- Method: from_buffer (source[, offset])

          This method returns a ctypes instance that shares the buffer
          of the _source_ object.  The _source_ object must support the
          writeable buffer interface.  The optional _offset_ parameter
          specifies an offset into the source buffer in bytes; the
          default is zero.  If the source buffer is not large enough a
          *note ValueError: 236. is raised.

          New in version 2.6.

      -- Method: from_buffer_copy (source[, offset])

          This method creates a ctypes instance, copying the buffer from
          the _source_ object buffer which must be readable.  The
          optional _offset_ parameter specifies an offset into the
          source buffer in bytes; the default is zero.  If the source
          buffer is not large enough a *note ValueError: 236. is raised.

          New in version 2.6.

      -- Method: from_address (address)

          This method returns a ctypes type instance using the memory
          specified by _address_ which must be an integer.

      -- Method: from_param (obj)

          This method adapts _obj_ to a ctypes type.  It is called with
          the actual object used in a foreign function call when the
          type is present in the foreign function’s ‘argtypes’ tuple; it
          must return an object that can be used as a function call
          parameter.

          All ctypes data types have a default implementation of this
          classmethod that normally returns _obj_ if that is an instance
          of the type.  Some types accept other objects as well.

      -- Method: in_dll (library, name)

          This method returns a ctypes type instance exported by a
          shared library.  _name_ is the name of the symbol that exports
          the data, _library_ is the loaded shared library.

     Common instance variables of ctypes data types:

      -- Attribute: _b_base_

          Sometimes ctypes data instances do not own the memory block
          they contain, instead they share part of the memory block of a
          base object.  The *note _b_base_: 157d. read-only member is
          the root ctypes object that owns the memory block.

      -- Attribute: _b_needsfree_

          This read-only variable is true when the ctypes data instance
          has allocated the memory block itself, false otherwise.

      -- Attribute: _objects

          This member is either ‘None’ or a dictionary containing Python
          objects that need to be kept alive so that the memory block
          contents is kept valid.  This object is only exposed for
          debugging; never modify the contents of this dictionary.


File: python.info,  Node: Fundamental data types<2>,  Next: Structured data types,  Prev: Data types,  Up: ctypes reference

5.15.17.29 Fundamental data types
.................................

 -- Class: ctypes._SimpleCData

     This non-public class is the base class of all fundamental ctypes
     data types.  It is mentioned here because it contains the common
     attributes of the fundamental ctypes data types.  *note
     _SimpleCData: 1581. is a subclass of *note _CData: 1575, so it
     inherits their methods and attributes.

     Changed in version 2.6: ctypes data types that are not and do not
     contain pointers can now be pickled.

     Instances have a single attribute:

      -- Attribute: value

          This attribute contains the actual value of the instance.  For
          integer and pointer types, it is an integer, for character
          types, it is a single character string, for character pointer
          types it is a Python string or unicode string.

          When the ‘value’ attribute is retrieved from a ctypes
          instance, usually a new object is returned each time.  *note
          ctypes: 78. does _not_ implement original object return,
          always a new object is constructed.  The same is true for all
          other ctypes object instances.

  Fundamental data types, when returned as foreign function call
results, or, for example, by retrieving structure field members or array
items, are transparently converted to native Python types.  In other
words, if a foreign function has a ‘restype’ of *note c_char_p: 1513,
you will always receive a Python string, _not_ a *note c_char_p: 1513.
instance.

  Subclasses of fundamental data types do _not_ inherit this behavior.
So, if a foreign functions ‘restype’ is a subclass of *note c_void_p:
1515, you will receive an instance of this subclass from the function
call.  Of course, you can get the value of the pointer by accessing the
‘value’ attribute.

  These are the fundamental ctypes data types:

 -- Class: ctypes.c_byte

     Represents the C ‘signed char’ datatype, and interprets the value
     as small integer.  The constructor accepts an optional integer
     initializer; no overflow checking is done.

 -- Class: ctypes.c_char

     Represents the C ‘char’ datatype, and interprets the value as a
     single character.  The constructor accepts an optional string
     initializer, the length of the string must be exactly one
     character.

 -- Class: ctypes.c_char_p

     Represents the C ‘char *’ datatype when it points to a
     zero-terminated string.  For a general character pointer that may
     also point to binary data, ‘POINTER(c_char)’ must be used.  The
     constructor accepts an integer address, or a string.

 -- Class: ctypes.c_double

     Represents the C ‘double’ datatype.  The constructor accepts an
     optional float initializer.

 -- Class: ctypes.c_longdouble

     Represents the C ‘long double’ datatype.  The constructor accepts
     an optional float initializer.  On platforms where ‘sizeof(long
     double) == sizeof(double)’ it is an alias to *note c_double: 1511.

     New in version 2.6.

 -- Class: ctypes.c_float

     Represents the C ‘float’ datatype.  The constructor accepts an
     optional float initializer.

 -- Class: ctypes.c_int

     Represents the C ‘signed int’ datatype.  The constructor accepts an
     optional integer initializer; no overflow checking is done.  On
     platforms where ‘sizeof(int) == sizeof(long)’ it is an alias to
     *note c_long: 14fc.

 -- Class: ctypes.c_int8

     Represents the C 8-bit ‘signed int’ datatype.  Usually an alias for
     *note c_byte: 1508.

 -- Class: ctypes.c_int16

     Represents the C 16-bit ‘signed int’ datatype.  Usually an alias
     for *note c_short: 150a.

 -- Class: ctypes.c_int32

     Represents the C 32-bit ‘signed int’ datatype.  Usually an alias
     for *note c_int: 14fb.

 -- Class: ctypes.c_int64

     Represents the C 64-bit ‘signed int’ datatype.  Usually an alias
     for *note c_longlong: 150e.

 -- Class: ctypes.c_long

     Represents the C ‘signed long’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_longlong

     Represents the C ‘signed long long’ datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_short

     Represents the C ‘signed short’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_size_t

     Represents the C ‘size_t’ datatype.

 -- Class: ctypes.c_ssize_t

     Represents the C ‘ssize_t’ datatype.

     New in version 2.7.

 -- Class: ctypes.c_ubyte

     Represents the C ‘unsigned char’ datatype, it interprets the value
     as small integer.  The constructor accepts an optional integer
     initializer; no overflow checking is done.

 -- Class: ctypes.c_uint

     Represents the C ‘unsigned int’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.  On
     platforms where ‘sizeof(int) == sizeof(long)’ it is an alias for
     *note c_ulong: 150d.

 -- Class: ctypes.c_uint8

     Represents the C 8-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_ubyte: 1509.

 -- Class: ctypes.c_uint16

     Represents the C 16-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_ushort: 150b.

 -- Class: ctypes.c_uint32

     Represents the C 32-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_uint: 150c.

 -- Class: ctypes.c_uint64

     Represents the C 64-bit ‘unsigned int’ datatype.  Usually an alias
     for *note c_ulonglong: 150f.

 -- Class: ctypes.c_ulong

     Represents the C ‘unsigned long’ datatype.  The constructor accepts
     an optional integer initializer; no overflow checking is done.

 -- Class: ctypes.c_ulonglong

     Represents the C ‘unsigned long long’ datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_ushort

     Represents the C ‘unsigned short’ datatype.  The constructor
     accepts an optional integer initializer; no overflow checking is
     done.

 -- Class: ctypes.c_void_p

     Represents the C ‘void *’ type.  The value is represented as
     integer.  The constructor accepts an optional integer initializer.

 -- Class: ctypes.c_wchar

     Represents the C ‘wchar_t’ datatype, and interprets the value as a
     single character unicode string.  The constructor accepts an
     optional string initializer, the length of the string must be
     exactly one character.

 -- Class: ctypes.c_wchar_p

     Represents the C ‘wchar_t *’ datatype, which must be a pointer to a
     zero-terminated wide character string.  The constructor accepts an
     integer address, or a string.

 -- Class: ctypes.c_bool

     Represent the C ‘bool’ datatype (more accurately, ‘_Bool’ from
     C99).  Its value can be ‘True’ or ‘False’, and the constructor
     accepts any object that has a truth value.

     New in version 2.6.

 -- Class: ctypes.HRESULT

     Windows only: Represents a ‘HRESULT’ value, which contains success
     or error information for a function or method call.

 -- Class: ctypes.py_object

     Represents the C *note PyObject *: 3a6. datatype.  Calling this
     without an argument creates a ‘NULL’ *note PyObject *: 3a6.
     pointer.

  The ‘ctypes.wintypes’ module provides quite some other Windows
specific data types, for example ‘HWND’, ‘WPARAM’, or ‘DWORD’.  Some
useful structures like ‘MSG’ or ‘RECT’ are also defined.


File: python.info,  Node: Structured data types,  Next: Arrays and pointers,  Prev: Fundamental data types<2>,  Up: ctypes reference

5.15.17.30 Structured data types
................................

 -- Class: ctypes.Union (*args, **kw)

     Abstract base class for unions in native byte order.

 -- Class: ctypes.BigEndianStructure (*args, **kw)

     Abstract base class for structures in _big endian_ byte order.

 -- Class: ctypes.LittleEndianStructure (*args, **kw)

     Abstract base class for structures in _little endian_ byte order.

  Structures with non-native byte order cannot contain pointer type
fields, or any other data types containing pointer type fields.

 -- Class: ctypes.Structure (*args, **kw)

     Abstract base class for structures in _native_ byte order.

     Concrete structure and union types must be created by subclassing
     one of these types, and at least define a *note _fields_: 1590.
     class variable.  *note ctypes: 78. will create *note descriptor:
     1529.s which allow reading and writing the fields by direct
     attribute accesses.  These are the

      -- Attribute: _fields_

          A sequence defining the structure fields.  The items must be
          2-tuples or 3-tuples.  The first item is the name of the
          field, the second item specifies the type of the field; it can
          be any ctypes data type.

          For integer type fields like *note c_int: 14fb, a third
          optional item can be given.  It must be a small positive
          integer defining the bit width of the field.

          Field names must be unique within one structure or union.
          This is not checked, only one field can be accessed when names
          are repeated.

          It is possible to define the *note _fields_: 1590. class
          variable _after_ the class statement that defines the
          Structure subclass, this allows to create data types that
          directly or indirectly reference themselves:

               class List(Structure):
                   pass
               List._fields_ = [("pnext", POINTER(List)),
                                ...
                               ]

          The *note _fields_: 1590. class variable must, however, be
          defined before the type is first used (an instance is created,
          ‘sizeof()’ is called on it, and so on).  Later assignments to
          the *note _fields_: 1590. class variable will raise an
          AttributeError.

          Structure and union subclass constructors accept both
          positional and named arguments.  Positional arguments are used
          to initialize the fields in the same order as they appear in
          the *note _fields_: 1590. definition, named arguments are used
          to initialize the fields with the corresponding name.

          It is possible to defined sub-subclasses of structure types,
          they inherit the fields of the base class plus the *note
          _fields_: 1590. defined in the sub-subclass, if any.

      -- Attribute: _pack_

          An optional small integer that allows to override the
          alignment of structure fields in the instance.  *note _pack_:
          1591. must already be defined when *note _fields_: 1590. is
          assigned, otherwise it will have no effect.

      -- Attribute: _anonymous_

          An optional sequence that lists the names of unnamed
          (anonymous) fields.  *note _anonymous_: 1592. must be already
          defined when *note _fields_: 1590. is assigned, otherwise it
          will have no effect.

          The fields listed in this variable must be structure or union
          type fields.  *note ctypes: 78. will create descriptors in the
          structure type that allows to access the nested fields
          directly, without the need to create the structure or union
          field.

          Here is an example type (Windows):

               class _U(Union):
                   _fields_ = [("lptdesc", POINTER(TYPEDESC)),
                               ("lpadesc", POINTER(ARRAYDESC)),
                               ("hreftype", HREFTYPE)]

               class TYPEDESC(Structure):
                   _anonymous_ = ("u",)
                   _fields_ = [("u", _U),
                               ("vt", VARTYPE)]

          The ‘TYPEDESC’ structure describes a COM data type, the ‘vt’
          field specifies which one of the union fields is valid.  Since
          the ‘u’ field is defined as anonymous field, it is now
          possible to access the members directly off the TYPEDESC
          instance.  ‘td.lptdesc’ and ‘td.u.lptdesc’ are equivalent, but
          the former is faster since it does not need to create a
          temporary union instance:

               td = TYPEDESC()
               td.vt = VT_PTR
               td.lptdesc = POINTER(some_type)
               td.u.lptdesc = POINTER(some_type)

     It is possible to defined sub-subclasses of structures, they
     inherit the fields of the base class.  If the subclass definition
     has a separate *note _fields_: 1590. variable, the fields specified
     in this are appended to the fields of the base class.

     Structure and union constructors accept both positional and keyword
     arguments.  Positional arguments are used to initialize member
     fields in the same order as they are appear in *note _fields_:
     1590.  Keyword arguments in the constructor are interpreted as
     attribute assignments, so they will initialize *note _fields_:
     1590. with the same name, or create new attributes for names not
     present in *note _fields_: 1590.


File: python.info,  Node: Arrays and pointers,  Prev: Structured data types,  Up: ctypes reference

5.15.17.31 Arrays and pointers
..............................

Not yet written - please see the sections *note Pointers: 1532. and
section *note Arrays: 1531. in the tutorial.


File: python.info,  Node: Optional Operating System Services,  Next: Interprocess Communication and Networking,  Prev: Generic Operating System Services,  Up: The Python Standard Library

5.16 Optional Operating System Services
=======================================

The modules described in this chapter provide interfaces to operating
system features that are available on selected operating systems only.
The interfaces are generally modeled after the Unix or C interfaces but
they are available on some other systems as well (e.g.  Windows or NT).
Here’s an overview:

* Menu:

* select: select --- Waiting for I/O completion. Waiting for I/O completion
* threading: threading --- Higher-level threading interface. Higher-level threading interface
* thread: thread --- Multiple threads of control. Multiple threads of control
* dummy_threading: dummy_threading --- Drop-in replacement for the threading module. Drop-in replacement for the threading module
* dummy_thread: dummy_thread --- Drop-in replacement for the thread module. Drop-in replacement for the thread module
* multiprocessing: multiprocessing --- Process-based "threading" interface. Process-based "threading" interface
* mmap: mmap --- Memory-mapped file support. Memory-mapped file support
* readline: readline --- GNU readline interface. GNU readline interface
* rlcompleter: rlcompleter --- Completion function for GNU readline. Completion function for GNU readline

select — Waiting for I/O completion

* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects. 
* Polling Objects:: 
* Kqueue Objects:: 
* Kevent Objects:: 

threading — Higher-level threading interface

* Thread Objects:: 
* Lock Objects:: 
* RLock Objects:: 
* Condition Objects:: 
* Semaphore Objects:: 
* Event Objects:: 
* Timer Objects:: 
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement. 
* Importing in threaded code:: 

Semaphore Objects

* Semaphore Example:: 

multiprocessing — Process-based "threading" interface

* Introduction: Introduction<7>. 
* Reference:: 
* Programming guidelines:: 
* Examples: Examples<7>. 

Introduction

* The Process class:: 
* Exchanging objects between processes:: 
* Synchronization between processes:: 
* Sharing state between processes:: 
* Using a pool of workers:: 

Reference

* Process and exceptions:: 
* Pipes and Queues:: 
* Miscellaneous: Miscellaneous<2>. 
* Connection Objects: Connection Objects<2>. 
* Synchronization primitives:: 
* Shared ctypes Objects:: 
* Managers:: 
* Proxy Objects:: 
* Process Pools:: 
* Listeners and Clients:: 
* Authentication keys:: 
* Logging: Logging<2>. 
* The multiprocessing.dummy module: The multiprocessing dummy module. 

Shared ctypes Objects

* The multiprocessing.sharedctypes module: The multiprocessing sharedctypes module. 

Managers

* Namespace objects:: 
* Customized managers:: 
* Using a remote manager:: 

Proxy Objects

* Cleanup: Cleanup<2>. 

Listeners and Clients

* Address Formats:: 

Programming guidelines

* All platforms:: 
* Windows:: 

readline — GNU readline interface

* Example: Example<7>. 

rlcompleter — Completion function for GNU readline

* Completer Objects:: 


File: python.info,  Node: select --- Waiting for I/O completion,  Next: threading --- Higher-level threading interface,  Up: Optional Operating System Services

5.16.1 ‘select’ — Waiting for I/O completion
--------------------------------------------

This module provides access to the ‘select()’ and ‘poll()’ functions
available in most operating systems, ‘epoll()’ available on Linux 2.5+
and ‘kqueue()’ available on most BSD. Note that on Windows, it only
works for sockets; on other operating systems, it also works for other
file types (in particular, on Unix, it works on pipes).  It cannot be
used on regular files to determine whether a file has grown since it was
last read.

  The module defines the following:

 -- Exception: select.error

     The exception raised when an error occurs.  The accompanying value
     is a pair containing the numeric error code from ‘errno’ and the
     corresponding string, as would be printed by the C function
     ‘perror()’.

 -- Function: select.epoll ([sizehint=-1])

     (Only supported on Linux 2.5.44 and newer.)  Returns an edge
     polling object, which can be used as Edge or Level Triggered
     interface for I/O events; see section *note Edge and Level Trigger
     Polling (epoll) Objects: 159c. below for the methods supported by
     epolling objects.

     New in version 2.6.

 -- Function: select.poll ()

     (Not supported by all operating systems.)  Returns a polling
     object, which supports registering and unregistering file
     descriptors, and then polling them for I/O events; see section
     *note Polling Objects: 159e. below for the methods supported by
     polling objects.

 -- Function: select.kqueue ()

     (Only supported on BSD.) Returns a kernel queue object; see section
     *note Kqueue Objects: 15a0. below for the methods supported by
     kqueue objects.

     New in version 2.6.

 -- Function: select.kevent (ident, filter=KQ_FILTER_READ,
          flags=KQ_EV_ADD, fflags=0, data=0, udata=0)

     (Only supported on BSD.) Returns a kernel event object; see section
     *note Kevent Objects: 15a2. below for the methods supported by
     kevent objects.

     New in version 2.6.

 -- Function: select.select (rlist, wlist, xlist[, timeout])

     This is a straightforward interface to the Unix ‘select()’ system
     call.  The first three arguments are sequences of ’waitable
     objects’: either integers representing file descriptors or objects
     with a parameterless method named *note fileno(): 11bb. returning
     such an integer:

        * _rlist_: wait until ready for reading

        * _wlist_: wait until ready for writing

        * _xlist_: wait for an "exceptional condition" (see the manual
          page for what your system considers such a condition)

     Empty sequences are allowed, but acceptance of three empty
     sequences is platform-dependent.  (It is known to work on Unix but
     not on Windows.)  The optional _timeout_ argument specifies a
     time-out as a floating point number in seconds.  When the _timeout_
     argument is omitted the function blocks until at least one file
     descriptor is ready.  A time-out value of zero specifies a poll and
     never blocks.

     The return value is a triple of lists of objects that are ready:
     subsets of the first three arguments.  When the time-out is reached
     without a file descriptor becoming ready, three empty lists are
     returned.

     Among the acceptable object types in the sequences are Python file
     objects (e.g.  ‘sys.stdin’, or objects returned by *note open():
     2d6. or *note os.popen(): 700.), socket objects returned by *note
     socket.socket(): 15a4.  You may also define a _wrapper_ class
     yourself, as long as it has an appropriate *note fileno(): 11bb.
     method (that really returns a file descriptor, not just a random
     integer).

          Note: 
          File objects on Windows are not acceptable, but sockets are.
          On Windows, the underlying ‘select()’ function is provided by
          the WinSock library, and does not handle file descriptors that
          don’t originate from WinSock.

 -- Attribute: select.PIPE_BUF

     Files reported as ready for writing by *note select(): 14e, *note
     poll(): 159d. or similar interfaces in this module are guaranteed
     to not block on a write of up to *note PIPE_BUF: 15a5. bytes.  This
     value is guaranteed by POSIX to be at least 512.  Availability:
     Unix.

     New in version 2.7.

* Menu:

* Edge and Level Trigger Polling (epoll) Objects: Edge and Level Trigger Polling epoll Objects. 
* Polling Objects:: 
* Kqueue Objects:: 
* Kevent Objects:: 


File: python.info,  Node: Edge and Level Trigger Polling epoll Objects,  Next: Polling Objects,  Up: select --- Waiting for I/O completion

5.16.1.1 Edge and Level Trigger Polling (epoll) Objects
.......................................................

     ‘http://linux.die.net/man/4/epoll’

     _eventmask_

     Constant                    Meaning
                                 
     --------------------------------------------------------------------------------
                                 
     ‘EPOLLIN’                   Available for read
                                 
                                 
     ‘EPOLLOUT’                  Available for write
                                 
                                 
     ‘EPOLLPRI’                  Urgent data for read
                                 
                                 
     ‘EPOLLERR’                  Error condition happened on the assoc.  fd
                                 
                                 
     ‘EPOLLHUP’                  Hang up happened on the assoc.  fd
                                 
                                 
     ‘EPOLLET’                   Set Edge Trigger behavior, the default is Level
                                 Trigger behavior
                                 
                                 
     ‘EPOLLONESHOT’              Set one-shot behavior.  After one event is pulled
                                 out, the fd is internally disabled
                                 
                                 
     ‘EPOLLRDNORM’               Equivalent to ‘EPOLLIN’
                                 
                                 
     ‘EPOLLRDBAND’               Priority data band can be read.
                                 
                                 
     ‘EPOLLWRNORM’               Equivalent to ‘EPOLLOUT’
                                 
                                 
     ‘EPOLLWRBAND’               Priority data may be written.
                                 
                                 
     ‘EPOLLMSG’                  Ignored.
                                 

 -- Method: epoll.close ()

     Close the control file descriptor of the epoll object.

 -- Method: epoll.fileno ()

     Return the file descriptor number of the control fd.

 -- Method: epoll.fromfd (fd)

     Create an epoll object from a given file descriptor.

 -- Method: epoll.register (fd[, eventmask])

     Register a fd descriptor with the epoll object.

          Note: Registering a file descriptor that’s already registered
          raises an IOError – contrary to *note Polling Objects: 159e.’s
          register.

 -- Method: epoll.modify (fd, eventmask)

     Modify a register file descriptor.

 -- Method: epoll.unregister (fd)

     Remove a registered file descriptor from the epoll object.

 -- Method: epoll.poll ([timeout=-1[, maxevents=-1]])

     Wait for events.  timeout in seconds (float)


File: python.info,  Node: Polling Objects,  Next: Kqueue Objects,  Prev: Edge and Level Trigger Polling epoll Objects,  Up: select --- Waiting for I/O completion

5.16.1.2 Polling Objects
........................

The ‘poll()’ system call, supported on most Unix systems, provides
better scalability for network servers that service many, many clients
at the same time.  ‘poll()’ scales better because the system call only
requires listing the file descriptors of interest, while ‘select()’
builds a bitmap, turns on bits for the fds of interest, and then
afterward the whole bitmap has to be linearly scanned again.  ‘select()’
is O(highest file descriptor), while ‘poll()’ is O(number of file
descriptors).

 -- Method: poll.register (fd[, eventmask])

     Register a file descriptor with the polling object.  Future calls
     to the *note poll(): 159d. method will then check whether the file
     descriptor has any pending I/O events.  _fd_ can be either an
     integer, or an object with a *note fileno(): 11bb. method that
     returns an integer.  File objects implement ‘fileno()’, so they can
     also be used as the argument.

     _eventmask_ is an optional bitmask describing the type of events
     you want to check for, and can be a combination of the constants
     ‘POLLIN’, ‘POLLPRI’, and ‘POLLOUT’, described in the table below.
     If not specified, the default value used will check for all 3 types
     of events.

     Constant                Meaning
                             
     -----------------------------------------------------------------------
                             
     ‘POLLIN’                There is data to read
                             
                             
     ‘POLLPRI’               There is urgent data to read
                             
                             
     ‘POLLOUT’               Ready for output: writing will not block
                             
                             
     ‘POLLERR’               Error condition of some sort
                             
                             
     ‘POLLHUP’               Hung up
                             
                             
     ‘POLLNVAL’              Invalid request: descriptor not open
                             

     Registering a file descriptor that’s already registered is not an
     error, and has the same effect as registering the descriptor
     exactly once.

 -- Method: poll.modify (fd, eventmask)

     Modifies an already registered fd.  This has the same effect as
     ‘register(fd, eventmask)’.  Attempting to modify a file descriptor
     that was never registered causes an *note IOError: 1fa. exception
     with errno ‘ENOENT’ to be raised.

     New in version 2.6.

 -- Method: poll.unregister (fd)

     Remove a file descriptor being tracked by a polling object.  Just
     like the *note register(): 15af. method, _fd_ can be an integer or
     an object with a *note fileno(): 11bb. method that returns an
     integer.

     Attempting to remove a file descriptor that was never registered
     causes a *note KeyError: 205. exception to be raised.

 -- Method: poll.poll ([timeout])

     Polls the set of registered file descriptors, and returns a
     possibly-empty list containing ‘(fd, event)’ 2-tuples for the
     descriptors that have events or errors to report.  _fd_ is the file
     descriptor, and _event_ is a bitmask with bits set for the reported
     events for that descriptor — ‘POLLIN’ for waiting input, ‘POLLOUT’
     to indicate that the descriptor can be written to, and so forth.
     An empty list indicates that the call timed out and no file
     descriptors had any events to report.  If _timeout_ is given, it
     specifies the length of time in milliseconds which the system will
     wait for events before returning.  If _timeout_ is omitted,
     negative, or *note None: 39a, the call will block until there is an
     event for this poll object.


File: python.info,  Node: Kqueue Objects,  Next: Kevent Objects,  Prev: Polling Objects,  Up: select --- Waiting for I/O completion

5.16.1.3 Kqueue Objects
.......................

 -- Method: kqueue.close ()

     Close the control file descriptor of the kqueue object.

 -- Method: kqueue.fileno ()

     Return the file descriptor number of the control fd.

 -- Method: kqueue.fromfd (fd)

     Create a kqueue object from a given file descriptor.

 -- Method: kqueue.control (changelist, max_events[, timeout=None]) ->
          eventlist

     Low level interface to kevent

        - changelist must be an iterable of kevent object or None

        - max_events must be 0 or a positive integer

        - timeout in seconds (floats possible)


File: python.info,  Node: Kevent Objects,  Prev: Kqueue Objects,  Up: select --- Waiting for I/O completion

5.16.1.4 Kevent Objects
.......................

‘http://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2’

 -- Attribute: kevent.ident

     Value used to identify the event.  The interpretation depends on
     the filter but it’s usually the file descriptor.  In the
     constructor ident can either be an int or an object with a fileno()
     function.  kevent stores the integer internally.

 -- Attribute: kevent.filter

     Name of the kernel filter.

     Constant                        Meaning
                                     
     ----------------------------------------------------------------------------------
                                     
     ‘KQ_FILTER_READ’                Takes a descriptor and returns whenever there
                                     is data available to read
                                     
                                     
     ‘KQ_FILTER_WRITE’               Takes a descriptor and returns whenever there
                                     is data available to write
                                     
                                     
     ‘KQ_FILTER_AIO’                 AIO requests
                                     
                                     
     ‘KQ_FILTER_VNODE’               Returns when one or more of the requested
                                     events watched in _fflag_ occurs
                                     
                                     
     ‘KQ_FILTER_PROC’                Watch for events on a process id
                                     
                                     
     ‘KQ_FILTER_NETDEV’              Watch for events on a network device [not
                                     available on Mac OS X]
                                     
                                     
     ‘KQ_FILTER_SIGNAL’              Returns whenever the watched signal is
                                     delivered to the process
                                     
                                     
     ‘KQ_FILTER_TIMER’               Establishes an arbitrary timer
                                     

 -- Attribute: kevent.flags

     Filter action.

     Constant                        Meaning
                                     
     ----------------------------------------------------------------------------------
                                     
     ‘KQ_EV_ADD’                     Adds or modifies an event
                                     
                                     
     ‘KQ_EV_DELETE’                  Removes an event from the queue
                                     
                                     
     ‘KQ_EV_ENABLE’                  Permitscontrol() to returns the event
                                     
                                     
     ‘KQ_EV_DISABLE’                 Disablesevent
                                     
                                     
     ‘KQ_EV_ONESHOT’                 Removes event after first occurrence
                                     
                                     
     ‘KQ_EV_CLEAR’                   Reset the state after an event is retrieved
                                     
                                     
     ‘KQ_EV_SYSFLAGS’                internal event
                                     
                                     
     ‘KQ_EV_FLAG1’                   internal event
                                     
                                     
     ‘KQ_EV_EOF’                     Filter specific EOF condition
                                     
                                     
     ‘KQ_EV_ERROR’                   See return values
                                     

 -- Attribute: kevent.fflags

     Filter specific flags.

     ‘KQ_FILTER_READ’ and ‘KQ_FILTER_WRITE’ filter flags:

     Constant                         Meaning
                                      
     ----------------------------------------------------------------------------------
                                      
     ‘KQ_NOTE_LOWAT’                  low water mark of a socket buffer
                                      

     ‘KQ_FILTER_VNODE’ filter flags:

     Constant                         Meaning
                                      
     ----------------------------------------------------------------------------------
                                      
     ‘KQ_NOTE_DELETE’                 _unlink()_ was called
                                      
                                      
     ‘KQ_NOTE_WRITE’                  a write occurred
                                      
                                      
     ‘KQ_NOTE_EXTEND’                 the file was extended
                                      
                                      
     ‘KQ_NOTE_ATTRIB’                 an attribute was changed
                                      
                                      
     ‘KQ_NOTE_LINK’                   the link count has changed
                                      
                                      
     ‘KQ_NOTE_RENAME’                 the file was renamed
                                      
                                      
     ‘KQ_NOTE_REVOKE’                 access to the file was revoked
                                      

     ‘KQ_FILTER_PROC’ filter flags:

     Constant                         Meaning
                                      
     ----------------------------------------------------------------------------------
                                      
     ‘KQ_NOTE_EXIT’                   the process has exited
                                      
                                      
     ‘KQ_NOTE_FORK’                   the process has called _fork()_
                                      
                                      
     ‘KQ_NOTE_EXEC’                   the process has executed a new process
                                      
                                      
     ‘KQ_NOTE_PCTRLMASK’              internal filter flag
                                      
                                      
     ‘KQ_NOTE_PDATAMASK’              internal filter flag
                                      
                                      
     ‘KQ_NOTE_TRACK’                  follow a process across _fork()_
                                      
                                      
     ‘KQ_NOTE_CHILD’                  returned on the child process for _NOTE_TRACK_
                                      
                                      
     ‘KQ_NOTE_TRACKERR’               unable to attach to a child
                                      

     ‘KQ_FILTER_NETDEV’ filter flags (not available on Mac OS X):

     Constant                         Meaning
                                      
     ----------------------------------------------------------------------------------
                                      
     ‘KQ_NOTE_LINKUP’                 link is up
                                      
                                      
     ‘KQ_NOTE_LINKDOWN’               link is down
                                      
                                      
     ‘KQ_NOTE_LINKINV’                link state is invalid
                                      

 -- Attribute: kevent.data

     Filter specific data.

 -- Attribute: kevent.udata

     User defined value.


File: python.info,  Node: threading --- Higher-level threading interface,  Next: thread --- Multiple threads of control,  Prev: select --- Waiting for I/O completion,  Up: Optional Operating System Services

5.16.2 ‘threading’ — Higher-level threading interface
-----------------------------------------------------

*Source code:* Lib/threading.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module constructs higher-level threading interfaces on top of the
lower level *note thread: 178. module.  See also the *note mutex: 11f.
and *note Queue: 140. modules.

  The *note dummy_threading: b9. module is provided for situations where
*note threading: 179. cannot be used because *note thread: 178. is
missing.

     Note: Starting with Python 2.6, this module provides PEP 8(2)
     compliant aliases and properties to replace the ‘camelCase’ names
     that were inspired by Java’s threading API. This updated API is
     compatible with that of the *note multiprocessing: 119. module.
     However, no schedule has been set for the deprecation of the
     ‘camelCase’ names and they remain fully supported in both Python
     2.x and 3.x.

     Note: Starting with Python 2.5, several Thread methods raise *note
     RuntimeError: 39b. instead of *note AssertionError: 80c. if called
     erroneously.

*CPython implementation detail:* In CPython, due to the *note Global
Interpreter Lock: 154e, only one thread can execute Python code at once
(even though certain performance-oriented libraries might overcome this
limitation).  If you want your application to make better use of the
computational resources of multi-core machines, you are advised to use
*note multiprocessing: 119.  However, threading is still an appropriate
model if you want to run multiple I/O-bound tasks simultaneously.

  This module defines the following functions and objects:

 -- Function: threading.active_count ()
 -- Function: threading.activeCount ()

     Return the number of *note Thread: 131c. objects currently alive.
     The returned count is equal to the length of the list returned by
     *note enumerate(): 15c3.

     Changed in version 2.6: Added ‘active_count()’ spelling.

 -- Function: threading.Condition ()

     A factory function that returns a new condition variable object.  A
     condition variable allows one or more threads to wait until they
     are notified by another thread.

     See *note Condition Objects: 15c4.

 -- Function: threading.current_thread ()
 -- Function: threading.currentThread ()

     Return the current *note Thread: 131c. object, corresponding to the
     caller’s thread of control.  If the caller’s thread of control was
     not created through the *note threading: 179. module, a dummy
     thread object with limited functionality is returned.

     Changed in version 2.6: Added ‘current_thread()’ spelling.

 -- Function: threading.enumerate ()

     Return a list of all *note Thread: 131c. objects currently alive.
     The list includes daemonic threads, dummy thread objects created by
     *note current_thread(): 15c5, and the main thread.  It excludes
     terminated threads and threads that have not yet been started.

 -- Function: threading.Event ()

     A factory function that returns a new event object.  An event
     manages a flag that can be set to true with the *note set(): 15c7.
     method and reset to false with the ‘clear()’ method.  The ‘wait()’
     method blocks until the flag is true.

     See *note Event Objects: 15c8.

 -- Class: threading.local

     A class that represents thread-local data.  Thread-local data are
     data whose values are thread specific.  To manage thread-local
     data, just create an instance of *note local: 15c9. (or a subclass)
     and store attributes on it:

          mydata = threading.local()
          mydata.x = 1

     The instance’s values will be different for separate threads.

     For more details and extensive examples, see the documentation
     string of the ‘_threading_local’ module.

     New in version 2.4.

 -- Function: threading.Lock ()

     A factory function that returns a new primitive lock object.  Once
     a thread has acquired it, subsequent attempts to acquire it block,
     until it is released; any thread may release it.

     See *note Lock Objects: 15cb.

 -- Function: threading.RLock ()

     A factory function that returns a new reentrant lock object.  A
     reentrant lock must be released by the thread that acquired it.
     Once a thread has acquired a reentrant lock, the same thread may
     acquire it again without blocking; the thread must release it once
     for each time it has acquired it.

     See *note RLock Objects: 15cd.

 -- Function: threading.Semaphore ([value])

     A factory function that returns a new semaphore object.  A
     semaphore manages a counter representing the number of ‘release()’
     calls minus the number of ‘acquire()’ calls, plus an initial value.
     The ‘acquire()’ method blocks if necessary until it can return
     without making the counter negative.  If not given, _value_
     defaults to 1.

     See *note Semaphore Objects: 15ce.

 -- Function: threading.BoundedSemaphore ([value])

     A factory function that returns a new bounded semaphore object.  A
     bounded semaphore checks to make sure its current value doesn’t
     exceed its initial value.  If it does, *note ValueError: 236. is
     raised.  In most situations semaphores are used to guard resources
     with limited capacity.  If the semaphore is released too many times
     it’s a sign of a bug.  If not given, _value_ defaults to 1.

 -- Class: threading.Thread

     A class that represents a thread of control.  This class can be
     safely subclassed in a limited fashion.

     See *note Thread Objects: 15d0.

 -- Class: threading.Timer

     A thread that executes a function after a specified interval has
     passed.

     See *note Timer Objects: 15d1.

 -- Function: threading.settrace (func)

     Set a trace function for all threads started from the *note
     threading: 179. module.  The _func_ will be passed to *note
     sys.settrace(): 4a0. for each thread, before its *note run(): 15d3.
     method is called.

     New in version 2.3.

 -- Function: threading.setprofile (func)

     Set a profile function for all threads started from the *note
     threading: 179. module.  The _func_ will be passed to *note
     sys.setprofile(): 49f. for each thread, before its *note run():
     15d3. method is called.

     New in version 2.3.

 -- Function: threading.stack_size ([size])

     Return the thread stack size used when creating new threads.  The
     optional _size_ argument specifies the stack size to be used for
     subsequently created threads, and must be 0 (use platform or
     configured default) or a positive integer value of at least 32,768
     (32kB). If changing the thread stack size is unsupported, a *note
     ThreadError: 15d6. is raised.  If the specified stack size is
     invalid, a *note ValueError: 236. is raised and the stack size is
     unmodified.  32kB is currently the minimum supported stack size
     value to guarantee sufficient stack space for the interpreter
     itself.  Note that some platforms may have particular restrictions
     on values for the stack size, such as requiring a minimum stack
     size > 32kB or requiring allocation in multiples of the system
     memory page size - platform documentation should be referred to for
     more information (4kB pages are common; using multiples of 4096 for
     the stack size is the suggested approach in the absence of more
     specific information).  Availability: Windows, systems with POSIX
     threads.

     New in version 2.5.

 -- Exception: threading.ThreadError

     Raised for various threading-related errors as described below.
     Note that many interfaces use *note RuntimeError: 39b. instead of
     *note ThreadError: 15d6.

  Detailed interfaces for the objects are documented below.

  The design of this module is loosely based on Java’s threading model.
However, where Java makes locks and condition variables basic behavior
of every object, they are separate objects in Python.  Python’s *note
Thread: 131c. class supports a subset of the behavior of Java’s Thread
class; currently, there are no priorities, no thread groups, and threads
cannot be destroyed, stopped, suspended, resumed, or interrupted.  The
static methods of Java’s Thread class, when implemented, are mapped to
module-level functions.

  All of the methods described below are executed atomically.

* Menu:

* Thread Objects:: 
* Lock Objects:: 
* RLock Objects:: 
* Condition Objects:: 
* Semaphore Objects:: 
* Event Objects:: 
* Timer Objects:: 
* Using locks, conditions, and semaphores in the with statement: Using locks conditions and semaphores in the with statement. 
* Importing in threaded code:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/threading.py

   (2) http://www.python.org/dev/peps/pep-0008


File: python.info,  Node: Thread Objects,  Next: Lock Objects,  Up: threading --- Higher-level threading interface

5.16.2.1 Thread Objects
.......................

This class represents an activity that is run in a separate thread of
control.  There are two ways to specify the activity: by passing a
callable object to the constructor, or by overriding the ‘run()’ method
in a subclass.  No other methods (except for the constructor) should be
overridden in a subclass.  In other words, _only_ override the *note
__init__(): 37c. and ‘run()’ methods of this class.

  Once a thread object is created, its activity must be started by
calling the thread’s ‘start()’ method.  This invokes the ‘run()’ method
in a separate thread of control.

  Once the thread’s activity is started, the thread is considered
’alive’.  It stops being alive when its ‘run()’ method terminates –
either normally, or by raising an unhandled exception.  The ‘is_alive()’
method tests whether the thread is alive.

  Other threads can call a thread’s ‘join()’ method.  This blocks the
calling thread until the thread whose ‘join()’ method is called is
terminated.

  A thread has a name.  The name can be passed to the constructor, and
read or changed through the ‘name’ attribute.

  A thread can be flagged as a "daemon thread".  The significance of
this flag is that the entire Python program exits when only daemon
threads are left.  The initial value is inherited from the creating
thread.  The flag can be set through the ‘daemon’ property.

     Note: Daemon threads are abruptly stopped at shutdown.  Their
     resources (such as open files, database transactions, etc.)  may
     not be released properly.  If you want your threads to stop
     gracefully, make them non-daemonic and use a suitable signalling
     mechanism such as an *note Event: 269.

  There is a "main thread" object; this corresponds to the initial
thread of control in the Python program.  It is not a daemon thread.

  There is the possibility that "dummy thread objects" are created.
These are thread objects corresponding to "alien threads", which are
threads of control started outside the threading module, such as
directly from C code.  Dummy thread objects have limited functionality;
they are always considered alive and daemonic, and cannot be ‘join()’ed.
They are never deleted, since it is impossible to detect the termination
of alien threads.

 -- Class: threading.Thread (group=None, target=None, name=None,
          args=(), kwargs={})

     This constructor should always be called with keyword arguments.
     Arguments are:

     _group_ should be ‘None’; reserved for future extension when a
     ‘ThreadGroup’ class is implemented.

     _target_ is the callable object to be invoked by the *note run():
     15d3. method.  Defaults to ‘None’, meaning nothing is called.

     _name_ is the thread name.  By default, a unique name is
     constructed of the form "Thread-_N_" where _N_ is a small decimal
     number.

     _args_ is the argument tuple for the target invocation.  Defaults
     to ‘()’.

     _kwargs_ is a dictionary of keyword arguments for the target
     invocation.  Defaults to ‘{}’.

     If the subclass overrides the constructor, it must make sure to
     invoke the base class constructor (‘Thread.__init__()’) before
     doing anything else to the thread.

      -- Method: start ()

          Start the thread’s activity.

          It must be called at most once per thread object.  It arranges
          for the object’s *note run(): 15d3. method to be invoked in a
          separate thread of control.

          This method will raise a *note RuntimeError: 39b. if called
          more than once on the same thread object.

      -- Method: run ()

          Method representing the thread’s activity.

          You may override this method in a subclass.  The standard
          *note run(): 15d3. method invokes the callable object passed
          to the object’s constructor as the _target_ argument, if any,
          with sequential and keyword arguments taken from the _args_
          and _kwargs_ arguments, respectively.

      -- Method: join ([timeout])

          Wait until the thread terminates.  This blocks the calling
          thread until the thread whose *note join(): 131e. method is
          called terminates – either normally or through an unhandled
          exception – or until the optional timeout occurs.

          When the _timeout_ argument is present and not ‘None’, it
          should be a floating point number specifying a timeout for the
          operation in seconds (or fractions thereof).  As *note join():
          131e. always returns ‘None’, you must call *note isAlive():
          15d8. after *note join(): 131e. to decide whether a timeout
          happened – if the thread is still alive, the *note join():
          131e. call timed out.

          When the _timeout_ argument is not present or ‘None’, the
          operation will block until the thread terminates.

          A thread can be *note join(): 131e.ed many times.

          *note join(): 131e. raises a *note RuntimeError: 39b. if an
          attempt is made to join the current thread as that would cause
          a deadlock.  It is also an error to *note join(): 131e. a
          thread before it has been started and attempts to do so raises
          the same exception.

      -- Attribute: name

          A string used for identification purposes only.  It has no
          semantics.  Multiple threads may be given the same name.  The
          initial name is set by the constructor.

          New in version 2.6.

      -- Method: getName ()
      -- Method: setName ()

          Pre-2.6 API for *note name: 15d9.

      -- Attribute: ident

          The ’thread identifier’ of this thread or ‘None’ if the thread
          has not been started.  This is a nonzero integer.  See the
          *note thread.get_ident(): 15dd. function.  Thread identifiers
          may be recycled when a thread exits and another thread is
          created.  The identifier is available even after the thread
          has exited.

          New in version 2.6.

      -- Method: is_alive ()
      -- Method: isAlive ()

          Return whether the thread is alive.

          This method returns ‘True’ just before the *note run(): 15d3.
          method starts until just after the *note run(): 15d3. method
          terminates.  The module function *note enumerate(): 15c3.
          returns a list of all alive threads.

          Changed in version 2.6: Added ‘is_alive()’ spelling.

      -- Attribute: daemon

          A boolean value indicating whether this thread is a daemon
          thread (True) or not (False).  This must be set before *note
          start(): 131d. is called, otherwise *note RuntimeError: 39b.
          is raised.  Its initial value is inherited from the creating
          thread; the main thread is not a daemon thread and therefore
          all threads created in the main thread default to *note
          daemon: 15df. = ‘False’.

          The entire Python program exits when no alive non-daemon
          threads are left.

          New in version 2.6.

      -- Method: isDaemon ()
      -- Method: setDaemon ()

          Pre-2.6 API for *note daemon: 15df.


File: python.info,  Node: Lock Objects,  Next: RLock Objects,  Prev: Thread Objects,  Up: threading --- Higher-level threading interface

5.16.2.2 Lock Objects
.....................

A primitive lock is a synchronization primitive that is not owned by a
particular thread when locked.  In Python, it is currently the lowest
level synchronization primitive available, implemented directly by the
*note thread: 178. extension module.

  A primitive lock is in one of two states, "locked" or "unlocked".  It
is created in the unlocked state.  It has two basic methods, ‘acquire()’
and ‘release()’.  When the state is unlocked, ‘acquire()’ changes the
state to locked and returns immediately.  When the state is locked,
‘acquire()’ blocks until a call to ‘release()’ in another thread changes
it to unlocked, then the ‘acquire()’ call resets it to locked and
returns.  The ‘release()’ method should only be called in the locked
state; it changes the state to unlocked and returns immediately.  If an
attempt is made to release an unlocked lock, a *note ThreadError: 15d6.
will be raised.

  When more than one thread is blocked in ‘acquire()’ waiting for the
state to turn to unlocked, only one thread proceeds when a ‘release()’
call resets the state to unlocked; which one of the waiting threads
proceeds is not defined, and may vary across implementations.

  All methods are executed atomically.

 -- Method: Lock.acquire ([blocking])

     Acquire a lock, blocking or non-blocking.

     When invoked with the _blocking_ argument set to ‘True’ (the
     default), block until the lock is unlocked, then set it to locked
     and return ‘True’.

     When invoked with the _blocking_ argument set to ‘False’, do not
     block.  If a call with _blocking_ set to ‘True’ would block, return
     ‘False’ immediately; otherwise, set the lock to locked and return
     ‘True’.

 -- Method: Lock.release ()

     Release a lock.

     When the lock is locked, reset it to unlocked, and return.  If any
     other threads are blocked waiting for the lock to become unlocked,
     allow exactly one of them to proceed.

     When invoked on an unlocked lock, a *note ThreadError: 15d6. is
     raised.

     There is no return value.


File: python.info,  Node: RLock Objects,  Next: Condition Objects,  Prev: Lock Objects,  Up: threading --- Higher-level threading interface

5.16.2.3 RLock Objects
......................

A reentrant lock is a synchronization primitive that may be acquired
multiple times by the same thread.  Internally, it uses the concepts of
"owning thread" and "recursion level" in addition to the locked/unlocked
state used by primitive locks.  In the locked state, some thread owns
the lock; in the unlocked state, no thread owns it.

  To lock the lock, a thread calls its ‘acquire()’ method; this returns
once the thread owns the lock.  To unlock the lock, a thread calls its
‘release()’ method.  ‘acquire()’/‘release()’ call pairs may be nested;
only the final ‘release()’ (the ‘release()’ of the outermost pair)
resets the lock to unlocked and allows another thread blocked in
‘acquire()’ to proceed.

 -- Method: RLock.acquire ([blocking=1])

     Acquire a lock, blocking or non-blocking.

     When invoked without arguments: if this thread already owns the
     lock, increment the recursion level by one, and return immediately.
     Otherwise, if another thread owns the lock, block until the lock is
     unlocked.  Once the lock is unlocked (not owned by any thread),
     then grab ownership, set the recursion level to one, and return.
     If more than one thread is blocked waiting until the lock is
     unlocked, only one at a time will be able to grab ownership of the
     lock.  There is no return value in this case.

     When invoked with the _blocking_ argument set to true, do the same
     thing as when called without arguments, and return true.

     When invoked with the _blocking_ argument set to false, do not
     block.  If a call without an argument would block, return false
     immediately; otherwise, do the same thing as when called without
     arguments, and return true.

 -- Method: RLock.release ()

     Release a lock, decrementing the recursion level.  If after the
     decrement it is zero, reset the lock to unlocked (not owned by any
     thread), and if any other threads are blocked waiting for the lock
     to become unlocked, allow exactly one of them to proceed.  If after
     the decrement the recursion level is still nonzero, the lock
     remains locked and owned by the calling thread.

     Only call this method when the calling thread owns the lock.  A
     *note RuntimeError: 39b. is raised if this method is called when
     the lock is unlocked.

     There is no return value.


File: python.info,  Node: Condition Objects,  Next: Semaphore Objects,  Prev: RLock Objects,  Up: threading --- Higher-level threading interface

5.16.2.4 Condition Objects
..........................

A condition variable is always associated with some kind of lock; this
can be passed in or one will be created by default.  (Passing one in is
useful when several condition variables must share the same lock.)

  A condition variable has ‘acquire()’ and ‘release()’ methods that call
the corresponding methods of the associated lock.  It also has a
‘wait()’ method, and ‘notify()’ and ‘notifyAll()’ methods.  These three
must only be called when the calling thread has acquired the lock,
otherwise a *note RuntimeError: 39b. is raised.

  The ‘wait()’ method releases the lock, and then blocks until it is
awakened by a ‘notify()’ or ‘notifyAll()’ call for the same condition
variable in another thread.  Once awakened, it re-acquires the lock and
returns.  It is also possible to specify a timeout.

  The ‘notify()’ method wakes up one of the threads waiting for the
condition variable, if any are waiting.  The ‘notifyAll()’ method wakes
up all threads waiting for the condition variable.

  Note: the ‘notify()’ and ‘notifyAll()’ methods don’t release the lock;
this means that the thread or threads awakened will not return from
their ‘wait()’ call immediately, but only when the thread that called
‘notify()’ or ‘notifyAll()’ finally relinquishes ownership of the lock.

  Tip: the typical programming style using condition variables uses the
lock to synchronize access to some shared state; threads that are
interested in a particular change of state call ‘wait()’ repeatedly
until they see the desired state, while threads that modify the state
call ‘notify()’ or ‘notifyAll()’ when they change the state in such a
way that it could possibly be a desired state for one of the waiters.
For example, the following code is a generic producer-consumer situation
with unlimited buffer capacity:

     # Consume one item
     cv.acquire()
     while not an_item_is_available():
         cv.wait()
     get_an_available_item()
     cv.release()

     # Produce one item
     cv.acquire()
     make_an_item_available()
     cv.notify()
     cv.release()

  To choose between ‘notify()’ and ‘notifyAll()’, consider whether one
state change can be interesting for only one or several waiting threads.
E.g.  in a typical producer-consumer situation, adding one item to the
buffer only needs to wake up one consumer thread.

 -- Class: threading.Condition ([lock])

     If the _lock_ argument is given and not ‘None’, it must be a *note
     Lock: 15ca. or *note RLock: 15cc. object, and it is used as the
     underlying lock.  Otherwise, a new *note RLock: 15cc. object is
     created and used as the underlying lock.

      -- Method: acquire (*args)

          Acquire the underlying lock.  This method calls the
          corresponding method on the underlying lock; the return value
          is whatever that method returns.

      -- Method: release ()

          Release the underlying lock.  This method calls the
          corresponding method on the underlying lock; there is no
          return value.

      -- Method: wait ([timeout])

          Wait until notified or until a timeout occurs.  If the calling
          thread has not acquired the lock when this method is called, a
          *note RuntimeError: 39b. is raised.

          This method releases the underlying lock, and then blocks
          until it is awakened by a *note notify(): 15ed. or *note
          notifyAll(): 15ee. call for the same condition variable in
          another thread, or until the optional timeout occurs.  Once
          awakened or timed out, it re-acquires the lock and returns.

          When the _timeout_ argument is present and not ‘None’, it
          should be a floating point number specifying a timeout for the
          operation in seconds (or fractions thereof).

          When the underlying lock is an *note RLock: 15cc, it is not
          released using its *note release(): 15eb. method, since this
          may not actually unlock the lock when it was acquired multiple
          times recursively.  Instead, an internal interface of the
          *note RLock: 15cc. class is used, which really unlocks it even
          when it has been recursively acquired several times.  Another
          internal interface is then used to restore the recursion level
          when the lock is reacquired.

      -- Method: notify (n=1)

          By default, wake up one thread waiting on this condition, if
          any.  If the calling thread has not acquired the lock when
          this method is called, a *note RuntimeError: 39b. is raised.

          This method wakes up at most _n_ of the threads waiting for
          the condition variable; it is a no-op if no threads are
          waiting.

          The current implementation wakes up exactly _n_ threads, if at
          least _n_ threads are waiting.  However, it’s not safe to rely
          on this behavior.  A future, optimized implementation may
          occasionally wake up more than _n_ threads.

          Note: an awakened thread does not actually return from its
          *note wait(): 15ec. call until it can reacquire the lock.
          Since *note notify(): 15ed. does not release the lock, its
          caller should.

      -- Method: notify_all ()
      -- Method: notifyAll ()

          Wake up all threads waiting on this condition.  This method
          acts like *note notify(): 15ed, but wakes up all waiting
          threads instead of one.  If the calling thread has not
          acquired the lock when this method is called, a *note
          RuntimeError: 39b. is raised.

          Changed in version 2.6: Added ‘notify_all()’ spelling.


File: python.info,  Node: Semaphore Objects,  Next: Event Objects,  Prev: Condition Objects,  Up: threading --- Higher-level threading interface

5.16.2.5 Semaphore Objects
..........................

This is one of the oldest synchronization primitives in the history of
computer science, invented by the early Dutch computer scientist Edsger
W. Dijkstra (he used ‘P()’ and ‘V()’ instead of ‘acquire()’ and
‘release()’).

  A semaphore manages an internal counter which is decremented by each
‘acquire()’ call and incremented by each ‘release()’ call.  The counter
can never go below zero; when ‘acquire()’ finds that it is zero, it
blocks, waiting until some other thread calls ‘release()’.

 -- Class: threading.Semaphore ([value])

     The optional argument gives the initial _value_ for the internal
     counter; it defaults to ‘1’.  If the _value_ given is less than 0,
     *note ValueError: 236. is raised.

      -- Method: acquire ([blocking])

          Acquire a semaphore.

          When invoked without arguments: if the internal counter is
          larger than zero on entry, decrement it by one and return
          immediately.  If it is zero on entry, block, waiting until
          some other thread has called *note release(): 15f3. to make it
          larger than zero.  This is done with proper interlocking so
          that if multiple *note acquire(): 15f2. calls are blocked,
          *note release(): 15f3. will wake exactly one of them up.  The
          implementation may pick one at random, so the order in which
          blocked threads are awakened should not be relied on.  There
          is no return value in this case.

          When invoked with _blocking_ set to true, do the same thing as
          when called without arguments, and return true.

          When invoked with _blocking_ set to false, do not block.  If a
          call without an argument would block, return false
          immediately; otherwise, do the same thing as when called
          without arguments, and return true.

      -- Method: release ()

          Release a semaphore, incrementing the internal counter by one.
          When it was zero on entry and another thread is waiting for it
          to become larger than zero again, wake up that thread.

* Menu:

* Semaphore Example:: 


File: python.info,  Node: Semaphore Example,  Up: Semaphore Objects

5.16.2.6 ‘Semaphore’ Example
............................

Semaphores are often used to guard resources with limited capacity, for
example, a database server.  In any situation where the size of the
resource is fixed, you should use a bounded semaphore.  Before spawning
any worker threads, your main thread would initialize the semaphore:

     maxconnections = 5
     ...
     pool_sema = BoundedSemaphore(value=maxconnections)

  Once spawned, worker threads call the semaphore’s acquire and release
methods when they need to connect to the server:

     pool_sema.acquire()
     conn = connectdb()
     ... use connection ...
     conn.close()
     pool_sema.release()

  The use of a bounded semaphore reduces the chance that a programming
error which causes the semaphore to be released more than it’s acquired
will go undetected.


File: python.info,  Node: Event Objects,  Next: Timer Objects,  Prev: Semaphore Objects,  Up: threading --- Higher-level threading interface

5.16.2.7 Event Objects
......................

This is one of the simplest mechanisms for communication between
threads: one thread signals an event and other threads wait for it.

  An event object manages an internal flag that can be set to true with
the *note set(): 15c7. method and reset to false with the ‘clear()’
method.  The ‘wait()’ method blocks until the flag is true.

 -- Class: threading.Event

     The internal flag is initially false.

      -- Method: is_set ()
      -- Method: isSet ()

          Return true if and only if the internal flag is true.

          Changed in version 2.6: Added ‘is_set()’ spelling.

      -- Method: set ()

          Set the internal flag to true.  All threads waiting for it to
          become true are awakened.  Threads that call *note wait():
          268. once the flag is true will not block at all.

      -- Method: clear ()

          Reset the internal flag to false.  Subsequently, threads
          calling *note wait(): 268. will block until *note set(): 15c7.
          is called to set the internal flag to true again.

      -- Method: wait ([timeout])

          Block until the internal flag is true.  If the internal flag
          is true on entry, return immediately.  Otherwise, block until
          another thread calls *note set(): 15c7. to set the flag to
          true, or until the optional timeout occurs.

          When the timeout argument is present and not ‘None’, it should
          be a floating point number specifying a timeout for the
          operation in seconds (or fractions thereof).

          This method returns the internal flag on exit, so it will
          always return ‘True’ except if a timeout is given and the
          operation times out.

          Changed in version 2.7: Previously, the method always returned
          ‘None’.


File: python.info,  Node: Timer Objects,  Next: Using locks conditions and semaphores in the with statement,  Prev: Event Objects,  Up: threading --- Higher-level threading interface

5.16.2.8 Timer Objects
......................

This class represents an action that should be run only after a certain
amount of time has passed — a timer.  *note Timer: bc7. is a subclass of
*note Thread: 131c. and as such also functions as an example of creating
custom threads.

  Timers are started, as with threads, by calling their ‘start()’
method.  The timer can be stopped (before its action has begun) by
calling the *note cancel(): 15fb. method.  The interval the timer will
wait before executing its action may not be exactly the same as the
interval specified by the user.

  For example:

     def hello():
         print "hello, world"

     t = Timer(30.0, hello)
     t.start() # after 30 seconds, "hello, world" will be printed

 -- Class: threading.Timer (interval, function, args=[], kwargs={})

     Create a timer that will run _function_ with arguments _args_ and
     keyword arguments _kwargs_, after _interval_ seconds have passed.

      -- Method: cancel ()

          Stop the timer, and cancel the execution of the timer’s
          action.  This will only work if the timer is still in its
          waiting stage.


File: python.info,  Node: Using locks conditions and semaphores in the with statement,  Next: Importing in threaded code,  Prev: Timer Objects,  Up: threading --- Higher-level threading interface

5.16.2.9 Using locks, conditions, and semaphores in the ‘with’ statement
........................................................................

All of the objects provided by this module that have ‘acquire()’ and
‘release()’ methods can be used as context managers for a *note with:
1c0. statement.  The ‘acquire()’ method will be called when the block is
entered, and ‘release()’ will be called when the block is exited.

  Currently, *note Lock: 15ca, *note RLock: 15cc, *note Condition: 15e9,
*note Semaphore: 15f1, and *note BoundedSemaphore: 15cf. objects may be
used as *note with: 1c0. statement context managers.  For example:

     import threading

     some_rlock = threading.RLock()

     with some_rlock:
         print "some_rlock is locked while this executes"


File: python.info,  Node: Importing in threaded code,  Prev: Using locks conditions and semaphores in the with statement,  Up: threading --- Higher-level threading interface

5.16.2.10 Importing in threaded code
....................................

While the import machinery is thread-safe, there are two key
restrictions on threaded imports due to inherent limitations in the way
that thread-safety is provided:

   * Firstly, other than in the main module, an import should not have
     the side effect of spawning a new thread and then waiting for that
     thread in any way.  Failing to abide by this restriction can lead
     to a deadlock if the spawned thread directly or indirectly attempts
     to import a module.

   * Secondly, all import attempts must be completed before the
     interpreter starts shutting itself down.  This can be most easily
     achieved by only performing imports from non-daemon threads created
     through the threading module.  Daemon threads and threads created
     directly with the thread module will require some other form of
     synchronization to ensure they do not attempt imports after system
     shutdown has commenced.  Failure to abide by this restriction will
     lead to intermittent exceptions and crashes during interpreter
     shutdown (as the late imports attempt to access machinery which is
     no longer in a valid state).


File: python.info,  Node: thread --- Multiple threads of control,  Next: dummy_threading --- Drop-in replacement for the threading module,  Prev: threading --- Higher-level threading interface,  Up: Optional Operating System Services

5.16.3 ‘thread’ — Multiple threads of control
---------------------------------------------

     Note: The *note thread: 178. module has been renamed to ‘_thread’
     in Python 3.  The *note 2to3: bdb. tool will automatically adapt
     imports when converting your sources to Python 3; however, you
     should consider using the high-level *note threading: 179. module
     instead.

  This module provides low-level primitives for working with multiple
threads (also called _light-weight processes_ or _tasks_) — multiple
threads of control sharing their global data space.  For
synchronization, simple locks (also called _mutexes_ or _binary
semaphores_) are provided.  The *note threading: 179. module provides an
easier to use and higher-level threading API built on top of this
module.

  The module is optional.  It is supported on Windows, Linux, SGI IRIX,
Solaris 2.x, as well as on systems that have a POSIX thread (a.k.a.
"pthread") implementation.  For systems lacking the *note thread: 178.
module, the *note dummy_thread: b8. module is available.  It duplicates
this module’s interface and can be used as a drop-in replacement.

  It defines the following constant and functions:

 -- Exception: thread.error

     Raised on thread-specific errors.

 -- Data: thread.LockType

     This is the type of lock objects.

 -- Function: thread.start_new_thread (function, args[, kwargs])

     Start a new thread and return its identifier.  The thread executes
     the function _function_ with the argument list _args_ (which must
     be a tuple).  The optional _kwargs_ argument specifies a dictionary
     of keyword arguments.  When the function returns, the thread
     silently exits.  When the function terminates with an unhandled
     exception, a stack trace is printed and then the thread exits (but
     other threads continue to run).

 -- Function: thread.interrupt_main ()

     Raise a *note KeyboardInterrupt: 251. exception in the main thread.
     A subthread can use this function to interrupt the main thread.

     New in version 2.3.

 -- Function: thread.exit ()

     Raise the *note SystemExit: 332. exception.  When not caught, this
     will cause the thread to exit silently.

 -- Function: thread.allocate_lock ()

     Return a new lock object.  Methods of locks are described below.
     The lock is initially unlocked.

 -- Function: thread.get_ident ()

     Return the ’thread identifier’ of the current thread.  This is a
     nonzero integer.  Its value has no direct meaning; it is intended
     as a magic cookie to be used e.g.  to index a dictionary of
     thread-specific data.  Thread identifiers may be recycled when a
     thread exits and another thread is created.

 -- Function: thread.stack_size ([size])

     Return the thread stack size used when creating new threads.  The
     optional _size_ argument specifies the stack size to be used for
     subsequently created threads, and must be 0 (use platform or
     configured default) or a positive integer value of at least 32,768
     (32kB). If changing the thread stack size is unsupported, the *note
     error: 1602. exception is raised.  If the specified stack size is
     invalid, a *note ValueError: 236. is raised and the stack size is
     unmodified.  32kB is currently the minimum supported stack size
     value to guarantee sufficient stack space for the interpreter
     itself.  Note that some platforms may have particular restrictions
     on values for the stack size, such as requiring a minimum stack
     size > 32kB or requiring allocation in multiples of the system
     memory page size - platform documentation should be referred to for
     more information (4kB pages are common; using multiples of 4096 for
     the stack size is the suggested approach in the absence of more
     specific information).  Availability: Windows, systems with POSIX
     threads.

     New in version 2.5.

  Lock objects have the following methods:

 -- Method: lock.acquire ([waitflag])

     Without the optional argument, this method acquires the lock
     unconditionally, if necessary waiting until it is released by
     another thread (only one thread at a time can acquire a lock —
     that’s their reason for existence).  If the integer _waitflag_
     argument is present, the action depends on its value: if it is
     zero, the lock is only acquired if it can be acquired immediately
     without waiting, while if it is nonzero, the lock is acquired
     unconditionally as before.  The return value is ‘True’ if the lock
     is acquired successfully, ‘False’ if not.

 -- Method: lock.release ()

     Releases the lock.  The lock must have been acquired earlier, but
     not necessarily by the same thread.

 -- Method: lock.locked ()

     Return the status of the lock: ‘True’ if it has been acquired by
     some thread, ‘False’ if not.

  In addition to these methods, lock objects can also be used via the
*note with: 1c0. statement, e.g.:

     import thread

     a_lock = thread.allocate_lock()

     with a_lock:
         print "a_lock is locked while this executes"

  *Caveats:*

   * Threads interact strangely with interrupts: the *note
     KeyboardInterrupt: 251. exception will be received by an arbitrary
     thread.  (When the *note signal: 155. module is available,
     interrupts always go to the main thread.)

   * Calling *note sys.exit(): 2a7. or raising the *note SystemExit:
     332. exception is equivalent to calling *note thread.exit(): 1606.

   * Not all built-in functions that may block waiting for I/O allow
     other threads to run.  (The most popular ones (*note time.sleep():
     11f1, *note file.read(): 90f, *note select.select(): 15a3.) work as
     expected.)

   * It is not possible to interrupt the ‘acquire()’ method on a lock —
     the *note KeyboardInterrupt: 251. exception will happen after the
     lock has been acquired.

   * When the main thread exits, it is system defined whether the other
     threads survive.  On SGI IRIX using the native thread
     implementation, they survive.  On most other systems, they are
     killed without executing *note try: 395. ...  *note finally: 396.
     clauses or executing object destructors.

   * When the main thread exits, it does not do any of its usual cleanup
     (except that *note try: 395. ...  *note finally: 396. clauses are
     honored), and the standard I/O files are not flushed.


File: python.info,  Node: dummy_threading --- Drop-in replacement for the threading module,  Next: dummy_thread --- Drop-in replacement for the thread module,  Prev: thread --- Multiple threads of control,  Up: Optional Operating System Services

5.16.4 ‘dummy_threading’ — Drop-in replacement for the ‘threading’ module
-------------------------------------------------------------------------

*Source code:* Lib/dummy_threading.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides a duplicate interface to the *note threading:
179. module.  It is meant to be imported when the *note thread: 178.
module is not provided on a platform.

  Suggested usage is:

     try:
         import threading as _threading
     except ImportError:
         import dummy_threading as _threading

  Be careful to not use this module where deadlock might occur from a
thread being created that blocks waiting for another thread to be
created.  This often occurs with blocking I/O.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/dummy_threading.py


File: python.info,  Node: dummy_thread --- Drop-in replacement for the thread module,  Next: multiprocessing --- Process-based "threading" interface,  Prev: dummy_threading --- Drop-in replacement for the threading module,  Up: Optional Operating System Services

5.16.5 ‘dummy_thread’ — Drop-in replacement for the ‘thread’ module
-------------------------------------------------------------------

     Note: The *note dummy_thread: b8. module has been renamed to
     ‘_dummy_thread’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3; however, you should consider using the high-lever *note
     dummy_threading: b9. module instead.

  *Source code:* Lib/dummy_thread.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides a duplicate interface to the *note thread: 178.
module.  It is meant to be imported when the *note thread: 178. module
is not provided on a platform.

  Suggested usage is:

     try:
         import thread as _thread
     except ImportError:
         import dummy_thread as _thread

  Be careful to not use this module where deadlock might occur from a
thread being created that blocks waiting for another thread to be
created.  This often occurs with blocking I/O.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/dummy_thread.py


File: python.info,  Node: multiprocessing --- Process-based "threading" interface,  Next: mmap --- Memory-mapped file support,  Prev: dummy_thread --- Drop-in replacement for the thread module,  Up: Optional Operating System Services

5.16.6 ‘multiprocessing’ — Process-based "threading" interface
--------------------------------------------------------------

New in version 2.6.

* Menu:

* Introduction: Introduction<7>. 
* Reference:: 
* Programming guidelines:: 
* Examples: Examples<7>. 

Introduction

* The Process class:: 
* Exchanging objects between processes:: 
* Synchronization between processes:: 
* Sharing state between processes:: 
* Using a pool of workers:: 

Reference

* Process and exceptions:: 
* Pipes and Queues:: 
* Miscellaneous: Miscellaneous<2>. 
* Connection Objects: Connection Objects<2>. 
* Synchronization primitives:: 
* Shared ctypes Objects:: 
* Managers:: 
* Proxy Objects:: 
* Process Pools:: 
* Listeners and Clients:: 
* Authentication keys:: 
* Logging: Logging<2>. 
* The multiprocessing.dummy module: The multiprocessing dummy module. 

Shared ctypes Objects

* The multiprocessing.sharedctypes module: The multiprocessing sharedctypes module. 

Managers

* Namespace objects:: 
* Customized managers:: 
* Using a remote manager:: 

Proxy Objects

* Cleanup: Cleanup<2>. 

Listeners and Clients

* Address Formats:: 

Programming guidelines

* All platforms:: 
* Windows:: 


File: python.info,  Node: Introduction<7>,  Next: Reference,  Up: multiprocessing --- Process-based "threading" interface

5.16.6.1 Introduction
.....................

*note multiprocessing: 119. is a package that supports spawning
processes using an API similar to the *note threading: 179. module.  The
*note multiprocessing: 119. package offers both local and remote
concurrency, effectively side-stepping the *note Global Interpreter
Lock: 154e. by using subprocesses instead of threads.  Due to this, the
*note multiprocessing: 119. module allows the programmer to fully
leverage multiple processors on a given machine.  It runs on both Unix
and Windows.

     Warning: Some of this package’s functionality requires a
     functioning shared semaphore implementation on the host operating
     system.  Without one, the ‘multiprocessing.synchronize’ module will
     be disabled, and attempts to import it will result in an *note
     ImportError: 370.  See issue 3770(1) for additional information.

     Note: Functionality within this package requires that the
     ‘__main__’ module be importable by the children.  This is covered
     in *note Programming guidelines: 1613. however it is worth pointing
     out here.  This means that some examples, such as the
     ‘multiprocessing.Pool’ examples will not work in the interactive
     interpreter.  For example:

          >>> from multiprocessing import Pool
          >>> p = Pool(5)
          >>> def f(x):
          ...     return x*x
          ...
          >>> p.map(f, [1,2,3])
          Process PoolWorker-1:
          Process PoolWorker-2:
          Process PoolWorker-3:
          Traceback (most recent call last):
          Traceback (most recent call last):
          Traceback (most recent call last):
          AttributeError: 'module' object has no attribute 'f'
          AttributeError: 'module' object has no attribute 'f'
          AttributeError: 'module' object has no attribute 'f'

     (If you try this it will actually output three full tracebacks
     interleaved in a semi-random fashion, and then you may have to stop
     the master process somehow.)

* Menu:

* The Process class:: 
* Exchanging objects between processes:: 
* Synchronization between processes:: 
* Sharing state between processes:: 
* Using a pool of workers:: 

   ---------- Footnotes ----------

   (1) http://bugs.python.org/issue3770


File: python.info,  Node: The Process class,  Next: Exchanging objects between processes,  Up: Introduction<7>

5.16.6.2 The ‘Process’ class
............................

In *note multiprocessing: 119, processes are spawned by creating a *note
Process: 1615. object and then calling its *note start(): 1616. method.
*note Process: 1615. follows the API of *note threading.Thread: 131c.  A
trivial example of a multiprocess program is

     from multiprocessing import Process

     def f(name):
         print 'hello', name

     if __name__ == '__main__':
         p = Process(target=f, args=('bob',))
         p.start()
         p.join()

  To show the individual process IDs involved, here is an expanded
example:

     from multiprocessing import Process
     import os

     def info(title):
         print title
         print 'module name:', __name__
         if hasattr(os, 'getppid'):  # only available on Unix
             print 'parent process:', os.getppid()
         print 'process id:', os.getpid()

     def f(name):
         info('function f')
         print 'hello', name

     if __name__ == '__main__':
         info('main line')
         p = Process(target=f, args=('bob',))
         p.start()
         p.join()

  For an explanation of why (on Windows) the ‘if __name__ == '__main__'’
part is necessary, see *note Programming guidelines: 1613.


File: python.info,  Node: Exchanging objects between processes,  Next: Synchronization between processes,  Prev: The Process class,  Up: Introduction<7>

5.16.6.3 Exchanging objects between processes
.............................................

*note multiprocessing: 119. supports two types of communication channel
between processes:

  *Queues*

     The *note Queue: 1618. class is a near clone of *note Queue.Queue:
     609.  For example:

          from multiprocessing import Process, Queue

          def f(q):
              q.put([42, None, 'hello'])

          if __name__ == '__main__':
              q = Queue()
              p = Process(target=f, args=(q,))
              p.start()
              print q.get()    # prints "[42, None, 'hello']"
              p.join()

     Queues are thread and process safe.

  *Pipes*

     The *note Pipe(): 1619. function returns a pair of connection
     objects connected by a pipe which by default is duplex (two-way).
     For example:

          from multiprocessing import Process, Pipe

          def f(conn):
              conn.send([42, None, 'hello'])
              conn.close()

          if __name__ == '__main__':
              parent_conn, child_conn = Pipe()
              p = Process(target=f, args=(child_conn,))
              p.start()
              print parent_conn.recv()   # prints "[42, None, 'hello']"
              p.join()

     The two connection objects returned by *note Pipe(): 1619.
     represent the two ends of the pipe.  Each connection object has
     *note send(): 161a. and *note recv(): 161b. methods (among others).
     Note that data in a pipe may become corrupted if two processes (or
     threads) try to read from or write to the _same_ end of the pipe at
     the same time.  Of course there is no risk of corruption from
     processes using different ends of the pipe at the same time.


File: python.info,  Node: Synchronization between processes,  Next: Sharing state between processes,  Prev: Exchanging objects between processes,  Up: Introduction<7>

5.16.6.4 Synchronization between processes
..........................................

*note multiprocessing: 119. contains equivalents of all the
synchronization primitives from *note threading: 179.  For instance one
can use a lock to ensure that only one process prints to standard output
at a time:

     from multiprocessing import Process, Lock

     def f(l, i):
         l.acquire()
         print 'hello world', i
         l.release()

     if __name__ == '__main__':
         lock = Lock()

         for num in range(10):
             Process(target=f, args=(lock, num)).start()

  Without using the lock output from the different processes is liable
to get all mixed up.


File: python.info,  Node: Sharing state between processes,  Next: Using a pool of workers,  Prev: Synchronization between processes,  Up: Introduction<7>

5.16.6.5 Sharing state between processes
........................................

As mentioned above, when doing concurrent programming it is usually best
to avoid using shared state as far as possible.  This is particularly
true when using multiple processes.

  However, if you really do need to use some shared data then *note
multiprocessing: 119. provides a couple of ways of doing so.

  *Shared memory*

     Data can be stored in a shared memory map using *note Value: 161e.
     or *note Array: 161f.  For example, the following code

          from multiprocessing import Process, Value, Array

          def f(n, a):
              n.value = 3.1415927
              for i in range(len(a)):
                  a[i] = -a[i]

          if __name__ == '__main__':
              num = Value('d', 0.0)
              arr = Array('i', range(10))

              p = Process(target=f, args=(num, arr))
              p.start()
              p.join()

              print num.value
              print arr[:]

     will print

          3.1415927
          [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]

     The ‘'d'’ and ‘'i'’ arguments used when creating ‘num’ and ‘arr’
     are typecodes of the kind used by the *note array: e. module: ‘'d'’
     indicates a double precision float and ‘'i'’ indicates a signed
     integer.  These shared objects will be process and thread-safe.

     For more flexibility in using shared memory one can use the *note
     multiprocessing.sharedctypes: 11e. module which supports the
     creation of arbitrary ctypes objects allocated from shared memory.

  *Server process*

     A manager object returned by ‘Manager()’ controls a server process
     which holds Python objects and allows other processes to manipulate
     them using proxies.

     A manager returned by ‘Manager()’ will support types *note list:
     3bc, *note dict: 305, ‘Namespace’, *note Lock: 1620, *note RLock:
     1621, *note Semaphore: 1622, *note BoundedSemaphore: 1623, *note
     Condition: 1624, *note Event: 1625, *note Queue: 1618, *note Value:
     161e. and *note Array: 161f.  For example,

          from multiprocessing import Process, Manager

          def f(d, l):
              d[1] = '1'
              d['2'] = 2
              d[0.25] = None
              l.reverse()

          if __name__ == '__main__':
              manager = Manager()

              d = manager.dict()
              l = manager.list(range(10))

              p = Process(target=f, args=(d, l))
              p.start()
              p.join()

              print d
              print l

     will print

          {0.25: None, 1: '1', '2': 2}
          [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

     Server process managers are more flexible than using shared memory
     objects because they can be made to support arbitrary object types.
     Also, a single manager can be shared by processes on different
     computers over a network.  They are, however, slower than using
     shared memory.


File: python.info,  Node: Using a pool of workers,  Prev: Sharing state between processes,  Up: Introduction<7>

5.16.6.6 Using a pool of workers
................................

The ‘Pool’ class represents a pool of worker processes.  It has methods
which allows tasks to be offloaded to the worker processes in a few
different ways.

  For example:

     from multiprocessing import Pool

     def f(x):
         return x*x

     if __name__ == '__main__':
         pool = Pool(processes=4)              # start 4 worker processes
         result = pool.apply_async(f, [10])    # evaluate "f(10)" asynchronously
         print result.get(timeout=1)           # prints "100" unless your computer is *very* slow
         print pool.map(f, range(10))          # prints "[0, 1, 4,..., 81]"

  Note that the methods of a pool should only ever be used by the
process which created it.


File: python.info,  Node: Reference,  Next: Programming guidelines,  Prev: Introduction<7>,  Up: multiprocessing --- Process-based "threading" interface

5.16.6.7 Reference
..................

The *note multiprocessing: 119. package mostly replicates the API of the
*note threading: 179. module.

* Menu:

* Process and exceptions:: 
* Pipes and Queues:: 
* Miscellaneous: Miscellaneous<2>. 
* Connection Objects: Connection Objects<2>. 
* Synchronization primitives:: 
* Shared ctypes Objects:: 
* Managers:: 
* Proxy Objects:: 
* Process Pools:: 
* Listeners and Clients:: 
* Authentication keys:: 
* Logging: Logging<2>. 
* The multiprocessing.dummy module: The multiprocessing dummy module. 


File: python.info,  Node: Process and exceptions,  Next: Pipes and Queues,  Up: Reference

5.16.6.8 ‘Process’ and exceptions
.................................

 -- Class: multiprocessing.Process (group=None, target=None, name=None,
          args=(), kwargs={})

     Process objects represent activity that is run in a separate
     process.  The *note Process: 1615. class has equivalents of all the
     methods of *note threading.Thread: 131c.

     The constructor should always be called with keyword arguments.
     _group_ should always be ‘None’; it exists solely for compatibility
     with *note threading.Thread: 131c.  _target_ is the callable object
     to be invoked by the *note run(): 1629. method.  It defaults to
     ‘None’, meaning nothing is called.  _name_ is the process name.  By
     default, a unique name is constructed of the form
     ’Process-N[1]:N[2]:...:N[k]’ where N[1],N[2],...,N[k] is a sequence
     of integers whose length is determined by the _generation_ of the
     process.  _args_ is the argument tuple for the target invocation.
     _kwargs_ is a dictionary of keyword arguments for the target
     invocation.  By default, no arguments are passed to _target_.

     If a subclass overrides the constructor, it must make sure it
     invokes the base class constructor (‘Process.__init__()’) before
     doing anything else to the process.

      -- Method: run ()

          Method representing the process’s activity.

          You may override this method in a subclass.  The standard
          *note run(): 1629. method invokes the callable object passed
          to the object’s constructor as the target argument, if any,
          with sequential and keyword arguments taken from the _args_
          and _kwargs_ arguments, respectively.

      -- Method: start ()

          Start the process’s activity.

          This must be called at most once per process object.  It
          arranges for the object’s *note run(): 1629. method to be
          invoked in a separate process.

      -- Method: join ([timeout])

          Block the calling thread until the process whose *note join():
          162a. method is called terminates or until the optional
          timeout occurs.

          If _timeout_ is ‘None’ then there is no timeout.

          A process can be joined many times.

          A process cannot join itself because this would cause a
          deadlock.  It is an error to attempt to join a process before
          it has been started.

      -- Attribute: name

          The process’s name.

          The name is a string used for identification purposes only.
          It has no semantics.  Multiple processes may be given the same
          name.  The initial name is set by the constructor.

      -- Method: is_alive ()

          Return whether the process is alive.

          Roughly, a process object is alive from the moment the *note
          start(): 1616. method returns until the child process
          terminates.

      -- Attribute: daemon

          The process’s daemon flag, a Boolean value.  This must be set
          before *note start(): 1616. is called.

          The initial value is inherited from the creating process.

          When a process exits, it attempts to terminate all of its
          daemonic child processes.

          Note that a daemonic process is not allowed to create child
          processes.  Otherwise a daemonic process would leave its
          children orphaned if it gets terminated when its parent
          process exits.  Additionally, these are *not* Unix daemons or
          services, they are normal processes that will be terminated
          (and not joined) if non-daemonic processes have exited.

     In addition to the *note threading.Thread: 131c. API, *note
     Process: 1615. objects also support the following attributes and
     methods:

      -- Attribute: pid

          Return the process ID. Before the process is spawned, this
          will be ‘None’.

      -- Attribute: exitcode

          The child’s exit code.  This will be ‘None’ if the process has
          not yet terminated.  A negative value _-N_ indicates that the
          child was terminated by signal _N_.

      -- Attribute: authkey

          The process’s authentication key (a byte string).

          When *note multiprocessing: 119. is initialized the main
          process is assigned a random string using *note os.urandom():
          d52.

          When a *note Process: 1615. object is created, it will inherit
          the authentication key of its parent process, although this
          may be changed by setting *note authkey: 1630. to another byte
          string.

          See *note Authentication keys: 1631.

      -- Method: terminate ()

          Terminate the process.  On Unix this is done using the
          ‘SIGTERM’ signal; on Windows ‘TerminateProcess()’ is used.
          Note that exit handlers and finally clauses, etc., will not be
          executed.

          Note that descendant processes of the process will _not_ be
          terminated – they will simply become orphaned.

               Warning: If this method is used when the associated
               process is using a pipe or queue then the pipe or queue
               is liable to become corrupted and may become unusable by
               other process.  Similarly, if the process has acquired a
               lock or semaphore etc.  then terminating it is liable to
               cause other processes to deadlock.

     Note that the *note start(): 1616, *note join(): 162a, *note
     is_alive(): 162c, *note terminate(): 1632. and *note exitcode:
     162f. methods should only be called by the process that created the
     process object.

     Example usage of some of the methods of *note Process: 1615.:

          >>> import multiprocessing, time, signal
          >>> p = multiprocessing.Process(target=time.sleep, args=(1000,))
          >>> print p, p.is_alive()
          <Process(Process-1, initial)> False
          >>> p.start()
          >>> print p, p.is_alive()
          <Process(Process-1, started)> True
          >>> p.terminate()
          >>> time.sleep(0.1)
          >>> print p, p.is_alive()
          <Process(Process-1, stopped[SIGTERM])> False
          >>> p.exitcode == -signal.SIGTERM
          True

 -- Exception: multiprocessing.BufferTooShort

     Exception raised by *note Connection.recv_bytes_into(): 1634. when
     the supplied buffer object is too small for the message read.

     If ‘e’ is an instance of *note BufferTooShort: 1633. then
     ‘e.args[0]’ will give the message as a byte string.


File: python.info,  Node: Pipes and Queues,  Next: Miscellaneous<2>,  Prev: Process and exceptions,  Up: Reference

5.16.6.9 Pipes and Queues
.........................

When using multiple processes, one generally uses message passing for
communication between processes and avoids having to use any
synchronization primitives like locks.

  For passing messages one can use *note Pipe(): 1619. (for a connection
between two processes) or a queue (which allows multiple producers and
consumers).

  The *note Queue: 1618, *note multiprocessing.queues.SimpleQueue: 1636.
and *note JoinableQueue: 1637. types are multi-producer, multi-consumer
FIFO queues modelled on the *note Queue.Queue: 609. class in the
standard library.  They differ in that *note Queue: 1618. lacks the
*note task_done(): be8. and *note join(): be9. methods introduced into
Python 2.5’s *note Queue.Queue: 609. class.

  If you use *note JoinableQueue: 1637. then you *must* call *note
JoinableQueue.task_done(): 1638. for each task removed from the queue or
else the semaphore used to count the number of unfinished tasks may
eventually overflow, raising an exception.

  Note that one can also create a shared queue by using a manager object
– see *note Managers: 1639.

     Note: *note multiprocessing: 119. uses the usual *note Queue.Empty:
     819. and *note Queue.Full: be0. exceptions to signal a timeout.
     They are not available in the *note multiprocessing: 119. namespace
     so you need to import them from *note Queue: 140.

     Note: When an object is put on a queue, the object is pickled and a
     background thread later flushes the pickled data to an underlying
     pipe.  This has some consequences which are a little surprising,
     but should not cause any practical difficulties – if they really
     bother you then you can instead use a queue created with a *note
     manager: 1639.

       1. After putting an object on an empty queue there may be an
          infinitesimal delay before the queue’s *note empty(): 163a.
          method returns *note False: 3b1. and *note get_nowait(): 163b.
          can return without raising *note Queue.Empty: 819.

       2. If multiple processes are enqueuing objects, it is possible
          for the objects to be received at the other end out-of-order.
          However, objects enqueued by the same process will always be
          in the expected order with respect to each other.

     Warning: If a process is killed using *note Process.terminate():
     1632. or *note os.kill(): 2d1. while it is trying to use a *note
     Queue: 1618, then the data in the queue is likely to become
     corrupted.  This may cause any other process to get an exception
     when it tries to use the queue later on.

     Warning: As mentioned above, if a child process has put items on a
     queue (and it has not used *note JoinableQueue.cancel_join_thread:
     163c.), then that process will not terminate until all buffered
     items have been flushed to the pipe.

     This means that if you try joining that process you may get a
     deadlock unless you are sure that all items which have been put on
     the queue have been consumed.  Similarly, if the child process is
     non-daemonic then the parent process may hang on exit when it tries
     to join all its non-daemonic children.

     Note that a queue created using a manager does not have this issue.
     See *note Programming guidelines: 1613.

  For an example of the usage of queues for interprocess communication
see *note Examples: 163d.

 -- Function: multiprocessing.Pipe ([duplex])

     Returns a pair ‘(conn1, conn2)’ of *note Connection: 163e. objects
     representing the ends of a pipe.

     If _duplex_ is ‘True’ (the default) then the pipe is bidirectional.
     If _duplex_ is ‘False’ then the pipe is unidirectional: ‘conn1’ can
     only be used for receiving messages and ‘conn2’ can only be used
     for sending messages.

 -- Class: multiprocessing.Queue ([maxsize])

     Returns a process shared queue implemented using a pipe and a few
     locks/semaphores.  When a process first puts an item on the queue a
     feeder thread is started which transfers objects from a buffer into
     the pipe.

     The usual *note Queue.Empty: 819. and *note Queue.Full: be0.
     exceptions from the standard library’s *note Queue: 140. module are
     raised to signal timeouts.

     *note Queue: 1618. implements all the methods of *note Queue.Queue:
     609. except for *note task_done(): be8. and *note join(): be9.

      -- Method: qsize ()

          Return the approximate size of the queue.  Because of
          multithreading/multiprocessing semantics, this number is not
          reliable.

          Note that this may raise *note NotImplementedError: 94e. on
          Unix platforms like Mac OS X where ‘sem_getvalue()’ is not
          implemented.

      -- Method: empty ()

          Return ‘True’ if the queue is empty, ‘False’ otherwise.
          Because of multithreading/multiprocessing semantics, this is
          not reliable.

      -- Method: full ()

          Return ‘True’ if the queue is full, ‘False’ otherwise.
          Because of multithreading/multiprocessing semantics, this is
          not reliable.

      -- Method: put (obj[, block[, timeout]])

          Put obj into the queue.  If the optional argument _block_ is
          ‘True’ (the default) and _timeout_ is ‘None’ (the default),
          block if necessary until a free slot is available.  If
          _timeout_ is a positive number, it blocks at most _timeout_
          seconds and raises the *note Queue.Full: be0. exception if no
          free slot was available within that time.  Otherwise (_block_
          is ‘False’), put an item on the queue if a free slot is
          immediately available, else raise the *note Queue.Full: be0.
          exception (_timeout_ is ignored in that case).

      -- Method: put_nowait (obj)

          Equivalent to ‘put(obj, False)’.

      -- Method: get ([block[, timeout]])

          Remove and return an item from the queue.  If optional args
          _block_ is ‘True’ (the default) and _timeout_ is ‘None’ (the
          default), block if necessary until an item is available.  If
          _timeout_ is a positive number, it blocks at most _timeout_
          seconds and raises the *note Queue.Empty: 819. exception if no
          item was available within that time.  Otherwise (block is
          ‘False’), return an item if one is immediately available, else
          raise the *note Queue.Empty: 819. exception (_timeout_ is
          ignored in that case).

      -- Method: get_nowait ()

          Equivalent to ‘get(False)’.

     *note Queue: 1618. has a few additional methods not found in *note
     Queue.Queue: 609.  These methods are usually unnecessary for most
     code:

      -- Method: close ()

          Indicate that no more data will be put on this queue by the
          current process.  The background thread will quit once it has
          flushed all buffered data to the pipe.  This is called
          automatically when the queue is garbage collected.

      -- Method: join_thread ()

          Join the background thread.  This can only be used after *note
          close(): 1644. has been called.  It blocks until the
          background thread exits, ensuring that all data in the buffer
          has been flushed to the pipe.

          By default if a process is not the creator of the queue then
          on exit it will attempt to join the queue’s background thread.
          The process can call *note cancel_join_thread(): 163c. to make
          *note join_thread(): 1645. do nothing.

      -- Method: cancel_join_thread ()

          Prevent *note join_thread(): 1645. from blocking.  In
          particular, this prevents the background thread from being
          joined automatically when the process exits – see *note
          join_thread(): 1645.

          A better name for this method might be
          ‘allow_exit_without_flush()’.  It is likely to cause enqueued
          data to lost, and you almost certainly will not need to use
          it.  It is really only there if you need the current process
          to exit immediately without waiting to flush enqueued data to
          the underlying pipe, and you don’t care about lost data.

 -- Class: multiprocessing.queues.SimpleQueue

     It is a simplified *note Queue: 1618. type, very close to a locked
     *note Pipe: 1619.

      -- Method: empty ()

          Return ‘True’ if the queue is empty, ‘False’ otherwise.

      -- Method: get ()

          Remove and return an item from the queue.

      -- Method: put (item)

          Put _item_ into the queue.

 -- Class: multiprocessing.JoinableQueue ([maxsize])

     *note JoinableQueue: 1637, a *note Queue: 1618. subclass, is a
     queue which additionally has *note task_done(): 1638. and *note
     join(): 1649. methods.

      -- Method: task_done ()

          Indicate that a formerly enqueued task is complete.  Used by
          queue consumer threads.  For each *note get(): 1643. used to
          fetch a task, a subsequent call to *note task_done(): 1638.
          tells the queue that the processing on the task is complete.

          If a *note join(): be9. is currently blocking, it will resume
          when all items have been processed (meaning that a *note
          task_done(): 1638. call was received for every item that had
          been *note put(): 1641. into the queue).

          Raises a *note ValueError: 236. if called more times than
          there were items placed in the queue.

      -- Method: join ()

          Block until all items in the queue have been gotten and
          processed.

          The count of unfinished tasks goes up whenever an item is
          added to the queue.  The count goes down whenever a consumer
          thread calls *note task_done(): 1638. to indicate that the
          item was retrieved and all work on it is complete.  When the
          count of unfinished tasks drops to zero, *note join(): be9.
          unblocks.


File: python.info,  Node: Miscellaneous<2>,  Next: Connection Objects<2>,  Prev: Pipes and Queues,  Up: Reference

5.16.6.10 Miscellaneous
.......................

 -- Function: multiprocessing.active_children ()

     Return list of all live children of the current process.

     Calling this has the side affect of "joining" any processes which
     have already finished.

 -- Function: multiprocessing.cpu_count ()

     Return the number of CPUs in the system.  May raise *note
     NotImplementedError: 94e.

 -- Function: multiprocessing.current_process ()

     Return the *note Process: 1615. object corresponding to the current
     process.

     An analogue of *note threading.current_thread(): 15c5.

 -- Function: multiprocessing.freeze_support ()

     Add support for when a program which uses *note multiprocessing:
     119. has been frozen to produce a Windows executable.  (Has been
     tested with *py2exe*, *PyInstaller* and *cx_Freeze*.)

     One needs to call this function straight after the ‘if __name__ ==
     '__main__'’ line of the main module.  For example:

          from multiprocessing import Process, freeze_support

          def f():
              print 'hello world!'

          if __name__ == '__main__':
              freeze_support()
              Process(target=f).start()

     If the ‘freeze_support()’ line is omitted then trying to run the
     frozen executable will raise *note RuntimeError: 39b.

     If the module is being run normally by the Python interpreter then
     *note freeze_support(): 164e. has no effect.

 -- Function: multiprocessing.set_executable ()

     Sets the path of the Python interpreter to use when starting a
     child process.  (By default *note sys.executable: 1650. is used).
     Embedders will probably need to do some thing like

          set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))

     before they can create child processes.  (Windows only)

     Note: *note multiprocessing: 119. contains no analogues of *note
     threading.active_count(): 15c1, *note threading.enumerate(): 15c3,
     *note threading.settrace(): 15d2, *note threading.setprofile():
     15d4, *note threading.Timer: bc7, or *note threading.local: 15c9.


File: python.info,  Node: Connection Objects<2>,  Next: Synchronization primitives,  Prev: Miscellaneous<2>,  Up: Reference

5.16.6.11 Connection Objects
............................

Connection objects allow the sending and receiving of picklable objects
or strings.  They can be thought of as message oriented connected
sockets.

  Connection objects are usually created using *note Pipe(): 1619. – see
also *note Listeners and Clients: 1652.

 -- Class: multiprocessing.Connection

      -- Method: send (obj)

          Send an object to the other end of the connection which should
          be read using *note recv(): 161b.

          The object must be picklable.  Very large pickles
          (approximately 32 MB+, though it depends on the OS) may raise
          a *note ValueError: 236. exception.

      -- Method: recv ()

          Return an object sent from the other end of the connection
          using *note send(): 161a.  Blocks until there its something to
          receive.  Raises *note EOFError: 88a. if there is nothing left
          to receive and the other end was closed.

      -- Method: fileno ()

          Return the file descriptor or handle used by the connection.

      -- Method: close ()

          Close the connection.

          This is called automatically when the connection is garbage
          collected.

      -- Method: poll ([timeout])

          Return whether there is any data available to be read.

          If _timeout_ is not specified then it will return immediately.
          If _timeout_ is a number then this specifies the maximum time
          in seconds to block.  If _timeout_ is ‘None’ then an infinite
          timeout is used.

      -- Method: send_bytes (buffer[, offset[, size]])

          Send byte data from an object supporting the buffer interface
          as a complete message.

          If _offset_ is given then data is read from that position in
          _buffer_.  If _size_ is given then that many bytes will be
          read from buffer.  Very large buffers (approximately 32 MB+,
          though it depends on the OS) may raise a *note ValueError:
          236. exception

      -- Method: recv_bytes ([maxlength])

          Return a complete message of byte data sent from the other end
          of the connection as a string.  Blocks until there is
          something to receive.  Raises *note EOFError: 88a. if there is
          nothing left to receive and the other end has closed.

          If _maxlength_ is specified and the message is longer than
          _maxlength_ then *note IOError: 1fa. is raised and the
          connection will no longer be readable.

      -- Method: recv_bytes_into (buffer[, offset])

          Read into _buffer_ a complete message of byte data sent from
          the other end of the connection and return the number of bytes
          in the message.  Blocks until there is something to receive.
          Raises *note EOFError: 88a. if there is nothing left to
          receive and the other end was closed.

          _buffer_ must be an object satisfying the writable buffer
          interface.  If _offset_ is given then the message will be
          written into the buffer from that position.  Offset must be a
          non-negative integer less than the length of _buffer_ (in
          bytes).

          If the buffer is too short then a *note BufferTooShort: 1633.
          exception is raised and the complete message is available as
          ‘e.args[0]’ where ‘e’ is the exception instance.

  For example:

     >>> from multiprocessing import Pipe
     >>> a, b = Pipe()
     >>> a.send([1, 'hello', None])
     >>> b.recv()
     [1, 'hello', None]
     >>> b.send_bytes('thank you')
     >>> a.recv_bytes()
     'thank you'
     >>> import array
     >>> arr1 = array.array('i', range(5))
     >>> arr2 = array.array('i', [0] * 10)
     >>> a.send_bytes(arr1)
     >>> count = b.recv_bytes_into(arr2)
     >>> assert count == len(arr1) * arr1.itemsize
     >>> arr2
     array('i', [0, 1, 2, 3, 4, 0, 0, 0, 0, 0])

     Warning: The *note Connection.recv(): 161b. method automatically
     unpickles the data it receives, which can be a security risk unless
     you can trust the process which sent the message.

     Therefore, unless the connection object was produced using *note
     Pipe(): 1619. you should only use the *note recv(): 161b. and *note
     send(): 161a. methods after performing some sort of authentication.
     See *note Authentication keys: 1631.

     Warning: If a process is killed while it is trying to read or write
     to a pipe then the data in the pipe is likely to become corrupted,
     because it may become impossible to be sure where the message
     boundaries lie.

