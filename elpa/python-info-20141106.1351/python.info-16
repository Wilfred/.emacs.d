This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Request Objects,  Next: OpenerDirector Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.1 Request Objects
........................

The following methods describe all of *note Request: 1c54.’s public
interface, and so all must be overridden in subclasses.

 -- Method: Request.add_data (data)

     Set the *note Request: 1c54. data to _data_.  This is ignored by
     all handlers except HTTP handlers — and there it should be a byte
     string, and will change the request to be ‘POST’ rather than ‘GET’.

 -- Method: Request.get_method ()

     Return a string indicating the HTTP request method.  This is only
     meaningful for HTTP requests, and currently always returns ‘'GET'’
     or ‘'POST'’.

 -- Method: Request.has_data ()

     Return whether the instance has a non-‘None’ data.

 -- Method: Request.get_data ()

     Return the instance’s data.

 -- Method: Request.add_header (key, val)

     Add another header to the request.  Headers are currently ignored
     by all handlers except HTTP handlers, where they are added to the
     list of headers sent to the server.  Note that there cannot be more
     than one header with the same name, and later calls will overwrite
     previous calls in case the _key_ collides.  Currently, this is no
     loss of HTTP functionality, since all headers which have meaning
     when used more than once have a (header-specific) way of gaining
     the same functionality using only one header.

 -- Method: Request.add_unredirected_header (key, header)

     Add a header that will not be added to a redirected request.

     New in version 2.4.

 -- Method: Request.has_header (header)

     Return whether the instance has the named header (checks both
     regular and unredirected).

     New in version 2.4.

 -- Method: Request.get_full_url ()

     Return the URL given in the constructor.

 -- Method: Request.get_type ()

     Return the type of the URL — also known as the scheme.

 -- Method: Request.get_host ()

     Return the host to which a connection will be made.

 -- Method: Request.get_selector ()

     Return the selector — the part of the URL that is sent to the
     server.

 -- Method: Request.get_header (header_name, default=None)

     Return the value of the given header.  If the header is not
     present, return the default value.

 -- Method: Request.header_items ()

     Return a list of tuples (header_name, header_value) of the Request
     headers.

 -- Method: Request.set_proxy (host, type)

     Prepare the request by connecting to a proxy server.  The _host_
     and _type_ will replace those of the instance, and the instance’s
     selector will be the original URL given in the constructor.

 -- Method: Request.get_origin_req_host ()

     Return the request-host of the origin transaction, as defined by
     RFC 2965(1).  See the documentation for the *note Request: 1c54.
     constructor.

 -- Method: Request.is_unverifiable ()

     Return whether the request is unverifiable, as defined by RFC 2965.
     See the documentation for the *note Request: 1c54. constructor.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2965.html


File: python.info,  Node: OpenerDirector Objects,  Next: BaseHandler Objects,  Prev: Request Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.2 OpenerDirector Objects
...............................

*note OpenerDirector: 1c56. instances have the following methods:

 -- Method: OpenerDirector.add_handler (handler)

     _handler_ should be an instance of *note BaseHandler: 1c5c.  The
     following methods are searched, and added to the possible chains
     (note that HTTP errors are a special case).

        * ‘_protocol__open’ — signal that the handler knows how to open
          _protocol_ URLs.

        * ‘http_error__type_’ — signal that the handler knows how to
          handle HTTP errors with HTTP error code _type_.

        * ‘_protocol__error’ — signal that the handler knows how to
          handle errors from (non-‘http’) _protocol_.

        * ‘_protocol__request’ — signal that the handler knows how to
          pre-process _protocol_ requests.

        * ‘_protocol__response’ — signal that the handler knows how to
          post-process _protocol_ responses.

 -- Method: OpenerDirector.open (url[, data][, timeout])

     Open the given _url_ (which can be a request object or a string),
     optionally passing the given _data_.  Arguments, return values and
     exceptions raised are the same as those of *note urlopen(): 35c.
     (which simply calls the *note open(): 2d6. method on the currently
     installed global *note OpenerDirector: 1c56.).  The optional
     _timeout_ parameter specifies a timeout in seconds for blocking
     operations like the connection attempt (if not specified, the
     global default timeout setting will be used).  The timeout feature
     actually works only for HTTP, HTTPS and FTP connections).

     Changed in version 2.6: _timeout_ was added.

 -- Method: OpenerDirector.error (proto[, arg[, ...]])

     Handle an error of the given protocol.  This will call the
     registered error handlers for the given protocol with the given
     arguments (which are protocol specific).  The HTTP protocol is a
     special case which uses the HTTP response code to determine the
     specific error handler; refer to the ‘http_error_*()’ methods of
     the handler classes.

     Return values and exceptions raised are the same as those of *note
     urlopen(): 35c.

  OpenerDirector objects open URLs in three stages:

  The order in which these methods are called within each stage is
determined by sorting the handler instances.

  1. Every handler with a method named like ‘_protocol__request’ has
     that method called to pre-process the request.

  2. Handlers with a method named like ‘_protocol__open’ are called to
     handle the request.  This stage ends when a handler either returns
     a non-*note None: 39a. value (ie.  a response), or raises an
     exception (usually *note URLError: 1c55.).  Exceptions are allowed
     to propagate.

     In fact, the above algorithm is first tried for methods named
     ‘default_open()’.  If all such methods return *note None: 39a, the
     algorithm is repeated for methods named like ‘_protocol__open’.  If
     all such methods return *note None: 39a, the algorithm is repeated
     for methods named ‘unknown_open()’.

     Note that the implementation of these methods may involve calls of
     the parent *note OpenerDirector: 1c56. instance’s *note open():
     1c5a. and *note error(): 1c89. methods.

  3. Every handler with a method named like ‘_protocol__response’ has
     that method called to post-process the response.


File: python.info,  Node: BaseHandler Objects,  Next: HTTPRedirectHandler Objects,  Prev: OpenerDirector Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.3 BaseHandler Objects
............................

*note BaseHandler: 1c5c. objects provide a couple of methods that are
directly useful, and others that are meant to be used by derived
classes.  These are intended for direct use:

 -- Method: BaseHandler.add_parent (director)

     Add a director as parent.

 -- Method: BaseHandler.close ()

     Remove any parents.

  The following attributes and methods should only be used by classes
derived from *note BaseHandler: 1c5c.

     Note: The convention has been adopted that subclasses defining
     ‘protocol_request()’ or ‘protocol_response()’ methods are named
     ‘*Processor’; all others are named ‘*Handler’.

 -- Attribute: BaseHandler.parent

     A valid *note OpenerDirector: 1c56, which can be used to open using
     a different protocol, or handle errors.

 -- Method: BaseHandler.default_open (req)

     This method is _not_ defined in *note BaseHandler: 1c5c, but
     subclasses should define it if they want to catch all URLs.

     This method, if implemented, will be called by the parent *note
     OpenerDirector: 1c56.  It should return a file-like object as
     described in the return value of the *note open(): 2d6. of *note
     OpenerDirector: 1c56, or ‘None’.  It should raise *note URLError:
     1c55, unless a truly exceptional thing happens (for example, *note
     MemoryError: 94d. should not be mapped to *note URLError: 1c55.).

     This method will be called before any protocol-specific open
     method.

 -- Method: BaseHandler.protocol_open (req)

     ("protocol" is to be replaced by the protocol name.)

     This method is _not_ defined in *note BaseHandler: 1c5c, but
     subclasses should define it if they want to handle URLs with the
     given _protocol_.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 1c56.  Return values should be the same as for
     ‘default_open()’.

 -- Method: BaseHandler.unknown_open (req)

     This method is _not_ defined in *note BaseHandler: 1c5c, but
     subclasses should define it if they want to catch all URLs with no
     specific registered handler to open it.

     This method, if implemented, will be called by the *note parent:
     1c8e. *note OpenerDirector: 1c56.  Return values should be the same
     as for *note default_open(): 1c8f.

 -- Method: BaseHandler.http_error_default (req, fp, code, msg, hdrs)

     This method is _not_ defined in *note BaseHandler: 1c5c, but
     subclasses should override it if they intend to provide a catch-all
     for otherwise unhandled HTTP errors.  It will be called
     automatically by the *note OpenerDirector: 1c56. getting the error,
     and should not normally be called in other circumstances.

     _req_ will be a *note Request: 1c54. object, _fp_ will be a
     file-like object with the HTTP error body, _code_ will be the
     three-digit code of the error, _msg_ will be the user-visible
     explanation of the code and _hdrs_ will be a mapping object with
     the headers of the error.

     Return values and exceptions raised should be the same as those of
     *note urlopen(): 35c.

 -- Method: BaseHandler.http_error_nnn (req, fp, code, msg, hdrs)

     _nnn_ should be a three-digit HTTP error code.  This method is also
     not defined in *note BaseHandler: 1c5c, but will be called, if it
     exists, on an instance of a subclass, when an HTTP error with code
     _nnn_ occurs.

     Subclasses should override this method to handle specific HTTP
     errors.

     Arguments, return values and exceptions raised should be the same
     as for *note http_error_default(): 1c91.

 -- Method: BaseHandler.protocol_request (req)

     ("protocol" is to be replaced by the protocol name.)

     This method is _not_ defined in *note BaseHandler: 1c5c, but
     subclasses should define it if they want to pre-process requests of
     the given _protocol_.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 1c56.  _req_ will be a *note Request: 1c54. object.
     The return value should be a *note Request: 1c54. object.

 -- Method: BaseHandler.protocol_response (req, response)

     ("protocol" is to be replaced by the protocol name.)

     This method is _not_ defined in *note BaseHandler: 1c5c, but
     subclasses should define it if they want to post-process responses
     of the given _protocol_.

     This method, if defined, will be called by the parent *note
     OpenerDirector: 1c56.  _req_ will be a *note Request: 1c54. object.
     _response_ will be an object implementing the same interface as the
     return value of *note urlopen(): 35c.  The return value should
     implement the same interface as the return value of *note
     urlopen(): 35c.


File: python.info,  Node: HTTPRedirectHandler Objects,  Next: HTTPCookieProcessor Objects,  Prev: BaseHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.4 HTTPRedirectHandler Objects
....................................

     Note: Some HTTP redirections require action from this module’s
     client code.  If this is the case, *note HTTPError: 1c65. is
     raised.  See RFC 2616(1) for details of the precise meanings of the
     various redirection codes.

 -- Method: HTTPRedirectHandler.redirect_request (req, fp, code, msg,
          hdrs, newurl)

     Return a *note Request: 1c54. or ‘None’ in response to a redirect.
     This is called by the default implementations of the
     ‘http_error_30*()’ methods when a redirection is received from the
     server.  If a redirection should take place, return a new *note
     Request: 1c54. to allow ‘http_error_30*()’ to perform the redirect
     to _newurl_.  Otherwise, raise *note HTTPError: 1c65. if no other
     handler should try to handle this URL, or return ‘None’ if you
     can’t but another handler might.

          Note: The default implementation of this method does not
          strictly follow RFC 2616(2), which says that 301 and 302
          responses to ‘POST’ requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a ‘GET’, and the default implementation
          reproduces this behavior.

 -- Method: HTTPRedirectHandler.http_error_301 (req, fp, code, msg,
          hdrs)

     Redirect to the ‘Location:’ or ‘URI:’ URL. This method is called by
     the parent *note OpenerDirector: 1c56. when getting an HTTP ’moved
     permanently’ response.

 -- Method: HTTPRedirectHandler.http_error_302 (req, fp, code, msg,
          hdrs)

     The same as *note http_error_301(): 1c96, but called for the
     ’found’ response.

 -- Method: HTTPRedirectHandler.http_error_303 (req, fp, code, msg,
          hdrs)

     The same as *note http_error_301(): 1c96, but called for the ’see
     other’ response.

 -- Method: HTTPRedirectHandler.http_error_307 (req, fp, code, msg,
          hdrs)

     The same as *note http_error_301(): 1c96, but called for the
     ’temporary redirect’ response.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2616.html

   (2) http://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: HTTPCookieProcessor Objects,  Next: ProxyHandler Objects,  Prev: HTTPRedirectHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.5 HTTPCookieProcessor Objects
....................................

New in version 2.4.

  *note HTTPCookieProcessor: 1c6a. instances have one attribute:

 -- Attribute: HTTPCookieProcessor.cookiejar

     The *note cookielib.CookieJar: 1c9d. in which cookies are stored.


File: python.info,  Node: ProxyHandler Objects,  Next: HTTPPasswordMgr Objects,  Prev: HTTPCookieProcessor Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.6 ProxyHandler Objects
.............................

 -- Method: ProxyHandler.protocol_open (request)

     ("protocol" is to be replaced by the protocol name.)

     The *note ProxyHandler: 1c58. will have a method ‘_protocol__open’
     for every _protocol_ which has a proxy in the _proxies_ dictionary
     given in the constructor.  The method will modify requests to go
     through the proxy, by calling ‘request.set_proxy()’, and call the
     next handler in the chain to actually execute the protocol.


File: python.info,  Node: HTTPPasswordMgr Objects,  Next: AbstractBasicAuthHandler Objects,  Prev: ProxyHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.7 HTTPPasswordMgr Objects
................................

These methods are available on *note HTTPPasswordMgr: 1c6b. and *note
HTTPPasswordMgrWithDefaultRealm: 1c6c. objects.

 -- Method: HTTPPasswordMgr.add_password (realm, uri, user, passwd)

     _uri_ can be either a single URI, or a sequence of URIs.  _realm_,
     _user_ and _passwd_ must be strings.  This causes ‘(user, passwd)’
     to be used as authentication tokens when authentication for _realm_
     and a super-URI of any of the given URIs is given.

 -- Method: HTTPPasswordMgr.find_user_password (realm, authuri)

     Get user/password for given realm and URI, if any.  This method
     will return ‘(None, None)’ if there is no matching user/password.

     For *note HTTPPasswordMgrWithDefaultRealm: 1c6c. objects, the realm
     ‘None’ will be searched if the given _realm_ has no matching
     user/password.


File: python.info,  Node: AbstractBasicAuthHandler Objects,  Next: HTTPBasicAuthHandler Objects,  Prev: HTTPPasswordMgr Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.8 AbstractBasicAuthHandler Objects
.........................................

 -- Method: AbstractBasicAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)

     Handle an authentication request by getting a user/password pair,
     and re-trying the request.  _authreq_ should be the name of the
     header where the information about the realm is included in the
     request, _host_ specifies the URL and path to authenticate for,
     _req_ should be the (failed) *note Request: 1c54. object, and
     _headers_ should be the error headers.

     _host_ is either an authority (e.g.  ‘"python.org"’) or a URL
     containing an authority component (e.g.  ‘"http://python.org/"’).
     In either case, the authority must not contain a userinfo component
     (so, ‘"python.org"’ and ‘"python.org:80"’ are fine,
     ‘"joe:password@python.org"’ is not).


File: python.info,  Node: HTTPBasicAuthHandler Objects,  Next: ProxyBasicAuthHandler Objects,  Prev: AbstractBasicAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.9 HTTPBasicAuthHandler Objects
.....................................

 -- Method: HTTPBasicAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyBasicAuthHandler Objects,  Next: AbstractDigestAuthHandler Objects,  Prev: HTTPBasicAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.10 ProxyBasicAuthHandler Objects
.......................................

 -- Method: ProxyBasicAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: AbstractDigestAuthHandler Objects,  Next: HTTPDigestAuthHandler Objects,  Prev: ProxyBasicAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.11 AbstractDigestAuthHandler Objects
...........................................

 -- Method: AbstractDigestAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)

     _authreq_ should be the name of the header where the information
     about the realm is included in the request, _host_ should be the
     host to authenticate to, _req_ should be the (failed) *note
     Request: 1c54. object, and _headers_ should be the error headers.


File: python.info,  Node: HTTPDigestAuthHandler Objects,  Next: ProxyDigestAuthHandler Objects,  Prev: AbstractDigestAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.12 HTTPDigestAuthHandler Objects
.......................................

 -- Method: HTTPDigestAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyDigestAuthHandler Objects,  Next: HTTPHandler Objects,  Prev: HTTPDigestAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.13 ProxyDigestAuthHandler Objects
........................................

 -- Method: ProxyDigestAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)

     Retry the request with authentication information, if available.


File: python.info,  Node: HTTPHandler Objects,  Next: HTTPSHandler Objects,  Prev: ProxyDigestAuthHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.14 HTTPHandler Objects
.............................

 -- Method: HTTPHandler.http_open (req)

     Send an HTTP request, which can be either GET or POST, depending on
     ‘req.has_data()’.


File: python.info,  Node: HTTPSHandler Objects,  Next: FileHandler Objects,  Prev: HTTPHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.15 HTTPSHandler Objects
..............................

 -- Method: HTTPSHandler.https_open (req)

     Send an HTTPS request, which can be either GET or POST, depending
     on ‘req.has_data()’.


File: python.info,  Node: FileHandler Objects,  Next: FTPHandler Objects,  Prev: HTTPSHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.16 FileHandler Objects
.............................

 -- Method: FileHandler.file_open (req)

     Open the file locally, if there is no host name, or the host name
     is ‘'localhost'’.  Change the protocol to ‘ftp’ otherwise, and
     retry opening it using ‘parent’.


File: python.info,  Node: FTPHandler Objects,  Next: CacheFTPHandler Objects,  Prev: FileHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.17 FTPHandler Objects
............................

 -- Method: FTPHandler.ftp_open (req)

     Open the FTP file indicated by _req_.  The login is always done
     with empty username and password.


File: python.info,  Node: CacheFTPHandler Objects,  Next: UnknownHandler Objects,  Prev: FTPHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.18 CacheFTPHandler Objects
.................................

*note CacheFTPHandler: 1c74. objects are *note FTPHandler: 1c60. objects
with the following additional methods:

 -- Method: CacheFTPHandler.setTimeout (t)

     Set timeout of connections to _t_ seconds.

 -- Method: CacheFTPHandler.setMaxConns (m)

     Set maximum number of cached connections to _m_.


File: python.info,  Node: UnknownHandler Objects,  Next: HTTPErrorProcessor Objects,  Prev: CacheFTPHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.19 UnknownHandler Objects
................................

 -- Method: UnknownHandler.unknown_open ()

     Raise a *note URLError: 1c55. exception.


File: python.info,  Node: HTTPErrorProcessor Objects,  Next: Examples<13>,  Prev: UnknownHandler Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.20 HTTPErrorProcessor Objects
....................................

New in version 2.4.

 -- Method: HTTPErrorProcessor.http_response ()

     Process HTTP error responses.

     For 200 error codes, the response object is returned immediately.

     For non-200 error codes, this simply passes the job on to the
     ‘_protocol__error_code’ handler methods, via *note
     OpenerDirector.error(): 1c89.  Eventually, *note
     urllib2.HTTPDefaultErrorHandler: 1c5e. will raise an *note
     HTTPError: 1c65. if no other handler handles the error.

 -- Method: HTTPErrorProcessor.https_response ()

     Process HTTPS error responses.

     The behavior is same as *note http_response(): 1cca.


File: python.info,  Node: Examples<13>,  Prev: HTTPErrorProcessor Objects,  Up: urllib2 --- extensible library for opening URLs

5.20.6.21 Examples
..................

This example gets the python.org main page and displays the first 100
bytes of it:

     >>> import urllib2
     >>> f = urllib2.urlopen('http://www.python.org/')
     >>> print f.read(100)
     <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
     <?xml-stylesheet href="./css/ht2html

  Here we are sending a data-stream to the stdin of a CGI and reading
the data it returns to us.  Note that this example will only work when
the Python installation supports SSL.

     >>> import urllib2
     >>> req = urllib2.Request(url='https://localhost/cgi-bin/test.cgi',
     ...                       data='This data is passed to stdin of the CGI')
     >>> f = urllib2.urlopen(req)
     >>> print f.read()
     Got Data: "This data is passed to stdin of the CGI"

  The code for the sample CGI used in the above example is:

     #!/usr/bin/env python
     import sys
     data = sys.stdin.read()
     print 'Content-type: text-plain\n\nGot Data: "%s"' % data

  Use of Basic HTTP Authentication:

     import urllib2
     # Create an OpenerDirector with support for Basic HTTP Authentication...
     auth_handler = urllib2.HTTPBasicAuthHandler()
     auth_handler.add_password(realm='PDQ Application',
                               uri='https://mahler:8092/site-updates.py',
                               user='klem',
                               passwd='kadidd!ehopper')
     opener = urllib2.build_opener(auth_handler)
     # ...and install it globally so it can be used with urlopen.
     urllib2.install_opener(opener)
     urllib2.urlopen('http://www.example.com/login.html')

  *note build_opener(): 1c5b. provides many handlers by default,
including a *note ProxyHandler: 1c58.  By default, *note ProxyHandler:
1c58. uses the environment variables named ‘<scheme>_proxy’, where
‘<scheme>’ is the URL scheme involved.  For example, the ‘http_proxy’
environment variable is read to obtain the HTTP proxy’s URL.

  This example replaces the default *note ProxyHandler: 1c58. with one
that uses programmatically-supplied proxy URLs, and adds proxy
authorization support with *note ProxyBasicAuthHandler: 1c70.

     proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
     proxy_auth_handler = urllib2.ProxyBasicAuthHandler()
     proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

     opener = urllib2.build_opener(proxy_handler, proxy_auth_handler)
     # This time, rather than install the OpenerDirector, we use it directly:
     opener.open('http://www.example.com/login.html')

  Adding HTTP headers:

  Use the _headers_ argument to the *note Request: 1c54. constructor,
or:

     import urllib2
     req = urllib2.Request('http://www.example.com/')
     req.add_header('Referer', 'http://www.python.org/')
     r = urllib2.urlopen(req)

  *note OpenerDirector: 1c56. automatically adds a ‘User-Agent’ header
to every *note Request: 1c54.  To change this:

     import urllib2
     opener = urllib2.build_opener()
     opener.addheaders = [('User-agent', 'Mozilla/5.0')]
     opener.open('http://www.example.com/')

  Also, remember that a few standard headers (‘Content-Length’,
‘Content-Type’ and ‘Host’) are added when the *note Request: 1c54. is
passed to *note urlopen(): 35c. (or *note OpenerDirector.open(): 1c5a.).


File: python.info,  Node: httplib --- HTTP protocol client,  Next: ftplib --- FTP protocol client,  Prev: urllib2 --- extensible library for opening URLs,  Up: Internet Protocols and Support

5.20.7 ‘httplib’ — HTTP protocol client
---------------------------------------

     Note: The *note httplib: ee. module has been renamed to
     ‘http.client’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  *Source code:* Lib/httplib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines classes which implement the client side of the
HTTP and HTTPS protocols.  It is normally not used directly — the module
*note urllib: 188. uses it to handle URLs that use HTTP and HTTPS.

     Note: HTTPS support is only available if the *note socket: 15c.
     module was compiled with SSL support.

     Note: The public interface for this module changed substantially in
     Python 2.0.  The ‘HTTP’ class is retained only for backward
     compatibility with 1.5.2.  It should not be used in new code.
     Refer to the online docstrings for usage.

  The module provides the following classes:

 -- Class: httplib.HTTPConnection (host[, port[, strict[, timeout[,
          source_address]]]])

     An *note HTTPConnection: 22c. instance represents one transaction
     with an HTTP server.  It should be instantiated passing it a host
     and optional port number.  If no port number is passed, the port is
     extracted from the host string if it has the form ‘host:port’, else
     the default HTTP port (80) is used.  When True, the optional
     parameter _strict_ (which defaults to a false value) causes
     ‘BadStatusLine’ to be raised if the status line can’t be parsed as
     a valid HTTP/1.0 or 1.1 status line.  If the optional _timeout_
     parameter is given, blocking operations (like connection attempts)
     will timeout after that many seconds (if it is not given, the
     global default timeout setting is used).  The optional
     _source_address_ parameter may be a tuple of a (host, port) to use
     as the source address the HTTP connection is made from.

     For example, the following calls all create instances that connect
     to the server at the same host and port:

          >>> h1 = httplib.HTTPConnection('www.cwi.nl')
          >>> h2 = httplib.HTTPConnection('www.cwi.nl:80')
          >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80)
          >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80, timeout=10)

     New in version 2.0.

     Changed in version 2.6: _timeout_ was added.

     Changed in version 2.7: _source_address_ was added.

 -- Class: httplib.HTTPSConnection (host[, port[, key_file[, cert_file[,
          strict[, timeout[, source_address]]]]]])

     A subclass of *note HTTPConnection: 22c. that uses SSL for
     communication with secure servers.  Default port is ‘443’.
     _key_file_ is the name of a PEM formatted file that contains your
     private key.  _cert_file_ is a PEM formatted certificate chain
     file.

          Warning: This does not do any verification of the server’s
          certificate.

     New in version 2.0.

     Changed in version 2.6: _timeout_ was added.

     Changed in version 2.7: _source_address_ was added.

 -- Class: httplib.HTTPResponse (sock, debuglevel=0, strict=0)

     Class whose instances are returned upon successful connection.  Not
     instantiated directly by user.

     New in version 2.0.

 -- Class: httplib.HTTPMessage

     An *note HTTPMessage: 1cd0. instance is used to hold the headers
     from an HTTP response.  It is implemented using the *note
     mimetools.Message: 1915. class and provides utility functions to
     deal with HTTP Headers.  It is not directly instantiated by the
     users.

  The following exceptions are raised as appropriate:

 -- Exception: httplib.HTTPException

     The base class of the other exceptions in this module.  It is a
     subclass of *note Exception: 339.

     New in version 2.0.

 -- Exception: httplib.NotConnected

     A subclass of *note HTTPException: 1cd1.

     New in version 2.0.

 -- Exception: httplib.InvalidURL

     A subclass of *note HTTPException: 1cd1, raised if a port is given
     and is either non-numeric or empty.

     New in version 2.3.

 -- Exception: httplib.UnknownProtocol

     A subclass of *note HTTPException: 1cd1.

     New in version 2.0.

 -- Exception: httplib.UnknownTransferEncoding

     A subclass of *note HTTPException: 1cd1.

     New in version 2.0.

 -- Exception: httplib.UnimplementedFileMode

     A subclass of *note HTTPException: 1cd1.

     New in version 2.0.

 -- Exception: httplib.IncompleteRead

     A subclass of *note HTTPException: 1cd1.

     New in version 2.0.

 -- Exception: httplib.ImproperConnectionState

     A subclass of *note HTTPException: 1cd1.

     New in version 2.0.

 -- Exception: httplib.CannotSendRequest

     A subclass of *note ImproperConnectionState: 1cd8.

     New in version 2.0.

 -- Exception: httplib.CannotSendHeader

     A subclass of *note ImproperConnectionState: 1cd8.

     New in version 2.0.

 -- Exception: httplib.ResponseNotReady

     A subclass of *note ImproperConnectionState: 1cd8.

     New in version 2.0.

 -- Exception: httplib.BadStatusLine

     A subclass of *note HTTPException: 1cd1.  Raised if a server
     responds with a HTTP status code that we don’t understand.

     New in version 2.0.

  The constants defined in this module are:

 -- Data: httplib.HTTP_PORT

     The default port for the HTTP protocol (always ‘80’).

 -- Data: httplib.HTTPS_PORT

     The default port for the HTTPS protocol (always ‘443’).

  and also the following constants for integer status codes:

Constant                                       Value         Definition
                                                             
-----------------------------------------------------------------------------------------------------------------------------------------
                                                             
‘CONTINUE’                                     ‘100’         HTTP/1.1, RFC 2616, Section 10.1.1(2)
                                                             
                                                             
‘SWITCHING_PROTOCOLS’                          ‘101’         HTTP/1.1, RFC 2616, Section 10.1.2(3)
                                                             
                                                             
‘PROCESSING’                                   ‘102’         WEBDAV, RFC 2518, Section 10.1(4)
                                                             
                                                             
‘OK’                                           ‘200’         HTTP/1.1, RFC 2616, Section 10.2.1(5)
                                                             
                                                             
‘CREATED’                                      ‘201’         HTTP/1.1, RFC 2616, Section 10.2.2(6)
                                                             
                                                             
‘ACCEPTED’                                     ‘202’         HTTP/1.1, RFC 2616, Section 10.2.3(7)
                                                             
                                                             
‘NON_AUTHORITATIVE_INFORMATION’                ‘203’         HTTP/1.1, RFC 2616, Section 10.2.4(8)
                                                             
                                                             
‘NO_CONTENT’                                   ‘204’         HTTP/1.1, RFC 2616, Section 10.2.5(9)
                                                             
                                                             
‘RESET_CONTENT’                                ‘205’         HTTP/1.1, RFC 2616, Section 10.2.6(10)
                                                             
                                                             
‘PARTIAL_CONTENT’                              ‘206’         HTTP/1.1, RFC 2616, Section 10.2.7(11)
                                                             
                                                             
‘MULTI_STATUS’                                 ‘207’         WEBDAV RFC 2518, Section 10.2(12)
                                                             
                                                             
‘IM_USED’                                      ‘226’         Delta encoding in HTTP, RFC 3229(13), Section 10.4.1
                                                             
                                                             
‘MULTIPLE_CHOICES’                             ‘300’         HTTP/1.1, RFC 2616, Section 10.3.1(14)
                                                             
                                                             
‘MOVED_PERMANENTLY’                            ‘301’         HTTP/1.1, RFC 2616, Section 10.3.2(15)
                                                             
                                                             
‘FOUND’                                        ‘302’         HTTP/1.1, RFC 2616, Section 10.3.3(16)
                                                             
                                                             
‘SEE_OTHER’                                    ‘303’         HTTP/1.1, RFC 2616, Section 10.3.4(17)
                                                             
                                                             
‘NOT_MODIFIED’                                 ‘304’         HTTP/1.1, RFC 2616, Section 10.3.5(18)
                                                             
                                                             
‘USE_PROXY’                                    ‘305’         HTTP/1.1, RFC 2616, Section 10.3.6(19)
                                                             
                                                             
‘TEMPORARY_REDIRECT’                           ‘307’         HTTP/1.1, RFC 2616, Section 10.3.8(20)
                                                             
                                                             
‘BAD_REQUEST’                                  ‘400’         HTTP/1.1, RFC 2616, Section 10.4.1(21)
                                                             
                                                             
‘UNAUTHORIZED’                                 ‘401’         HTTP/1.1, RFC 2616, Section 10.4.2(22)
                                                             
                                                             
‘PAYMENT_REQUIRED’                             ‘402’         HTTP/1.1, RFC 2616, Section 10.4.3(23)
                                                             
                                                             
‘FORBIDDEN’                                    ‘403’         HTTP/1.1, RFC 2616, Section 10.4.4(24)
                                                             
                                                             
‘NOT_FOUND’                                    ‘404’         HTTP/1.1, RFC 2616, Section 10.4.5(25)
                                                             
                                                             
‘METHOD_NOT_ALLOWED’                           ‘405’         HTTP/1.1, RFC 2616, Section 10.4.6(26)
                                                             
                                                             
‘NOT_ACCEPTABLE’                               ‘406’         HTTP/1.1, RFC 2616, Section 10.4.7(27)
                                                             
                                                             
‘PROXY_AUTHENTICATION_REQUIRED’                ‘407’         HTTP/1.1, RFC 2616, Section 10.4.8(28)
                                                             
                                                             
‘REQUEST_TIMEOUT’                              ‘408’         HTTP/1.1, RFC 2616, Section 10.4.9(29)
                                                             
                                                             
‘CONFLICT’                                     ‘409’         HTTP/1.1, RFC 2616, Section 10.4.10(30)
                                                             
                                                             
‘GONE’                                         ‘410’         HTTP/1.1, RFC 2616, Section 10.4.11(31)
                                                             
                                                             
‘LENGTH_REQUIRED’                              ‘411’         HTTP/1.1, RFC 2616, Section 10.4.12(32)
                                                             
                                                             
‘PRECONDITION_FAILED’                          ‘412’         HTTP/1.1, RFC 2616, Section 10.4.13(33)
                                                             
                                                             
‘REQUEST_ENTITY_TOO_LARGE’                     ‘413’         HTTP/1.1, RFC 2616, Section 10.4.14(34)
                                                             
                                                             
‘REQUEST_URI_TOO_LONG’                         ‘414’         HTTP/1.1, RFC 2616, Section 10.4.15(35)
                                                             
                                                             
‘UNSUPPORTED_MEDIA_TYPE’                       ‘415’         HTTP/1.1, RFC 2616, Section 10.4.16(36)
                                                             
                                                             
‘REQUESTED_RANGE_NOT_SATISFIABLE’              ‘416’         HTTP/1.1, RFC 2616, Section 10.4.17(37)
                                                             
                                                             
‘EXPECTATION_FAILED’                           ‘417’         HTTP/1.1, RFC 2616, Section 10.4.18(38)
                                                             
                                                             
‘UNPROCESSABLE_ENTITY’                         ‘422’         WEBDAV, RFC 2518, Section 10.3(39)
                                                             
                                                             
‘LOCKED’                                       ‘423’         WEBDAV RFC 2518, Section 10.4(40)
                                                             
                                                             
‘FAILED_DEPENDENCY’                            ‘424’         WEBDAV, RFC 2518, Section 10.5(41)
                                                             
                                                             
‘UPGRADE_REQUIRED’                             ‘426’         HTTP Upgrade to TLS, RFC 2817(42), Section 6
                                                             
                                                             
‘INTERNAL_SERVER_ERROR’                        ‘500’         HTTP/1.1, RFC 2616, Section 10.5.1(43)
                                                             
                                                             
‘NOT_IMPLEMENTED’                              ‘501’         HTTP/1.1, RFC 2616, Section 10.5.2(44)
                                                             
                                                             
‘BAD_GATEWAY’                                  ‘502’         HTTP/1.1 RFC 2616, Section 10.5.3(45)
                                                             
                                                             
‘SERVICE_UNAVAILABLE’                          ‘503’         HTTP/1.1, RFC 2616, Section 10.5.4(46)
                                                             
                                                             
‘GATEWAY_TIMEOUT’                              ‘504’         HTTP/1.1 RFC 2616, Section 10.5.5(47)
                                                             
                                                             
‘HTTP_VERSION_NOT_SUPPORTED’                   ‘505’         HTTP/1.1, RFC 2616, Section 10.5.6(48)
                                                             
                                                             
‘INSUFFICIENT_STORAGE’                         ‘507’         WEBDAV, RFC 2518, Section 10.6(49)
                                                             
                                                             
‘NOT_EXTENDED’                                 ‘510’         An HTTP Extension Framework, RFC 2774(50), Section 7
                                                             

 -- Data: httplib.responses

     This dictionary maps the HTTP 1.1 status codes to the W3C names.

     Example: ‘httplib.responses[httplib.NOT_FOUND]’ is ‘'Not Found'’.

     New in version 2.5.

* Menu:

* HTTPConnection Objects:: 
* HTTPResponse Objects:: 
* Examples: Examples<14>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/httplib.py

   (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.1

   (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.2

   (4) http://www.webdav.org/specs/rfc2518.html#STATUS_102

   (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

   (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

   (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

   (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.4

   (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5

   (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.6

   (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.7

   (12) http://www.webdav.org/specs/rfc2518.html#STATUS_207

   (13) http://tools.ietf.org/html/rfc3229.html

   (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.1

   (15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2

   (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3

   (17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4

   (18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

   (19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.6

   (20) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.8

   (21) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

   (22) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

   (23) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.3

   (24) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4

   (25) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

   (26) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6

   (27) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7

   (28) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.8

   (29) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.9

   (30) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

   (31) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.11

   (32) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.12

   (33) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.13

   (34) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.14

   (35) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.15

   (36) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

   (37) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.17

   (38) 
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.18

   (39) http://www.webdav.org/specs/rfc2518.html#STATUS_422

   (40) http://www.webdav.org/specs/rfc2518.html#STATUS_423

   (41) http://www.webdav.org/specs/rfc2518.html#STATUS_424

   (42) http://tools.ietf.org/html/rfc2817.html

   (43) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1

   (44) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.2

   (45) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.3

   (46) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4

   (47) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5

   (48) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.6

   (49) http://www.webdav.org/specs/rfc2518.html#STATUS_507

   (50) http://tools.ietf.org/html/rfc2774.html


File: python.info,  Node: HTTPConnection Objects,  Next: HTTPResponse Objects,  Up: httplib --- HTTP protocol client

5.20.7.1 HTTPConnection Objects
...............................

*note HTTPConnection: 22c. instances have the following methods:

 -- Method: HTTPConnection.request (method, url[, body[, headers]])

     This will send a request to the server using the HTTP request
     method _method_ and the selector _url_.  If the _body_ argument is
     present, it should be a string of data to send after the headers
     are finished.  Alternatively, it may be an open file object, in
     which case the contents of the file is sent; this file object
     should support ‘fileno()’ and ‘read()’ methods.  The header
     Content-Length is automatically set to the correct value.  The
     _headers_ argument should be a mapping of extra HTTP headers to
     send with the request.

     Changed in version 2.6: _body_ can be a file object.

 -- Method: HTTPConnection.getresponse ()

     Should be called after a request is sent to get the response from
     the server.  Returns an *note HTTPResponse: 22b. instance.

          Note: Note that you must have read the whole response before
          you can send a new request to the server.

 -- Method: HTTPConnection.set_debuglevel (level)

     Set the debugging level (the amount of debugging output printed).
     The default debug level is ‘0’, meaning no debugging output is
     printed.

 -- Method: HTTPConnection.set_tunnel (host, port=None, headers=None)

     Set the host and the port for HTTP Connect Tunnelling.  Normally
     used when it is required to do HTTPS Conection through a proxy
     server.

     The headers argument should be a mapping of extra HTTP headers to
     send with the CONNECT request.

     New in version 2.7.

 -- Method: HTTPConnection.connect ()

     Connect to the server specified when the object was created.

 -- Method: HTTPConnection.close ()

     Close the connection to the server.

  As an alternative to using the ‘request()’ method described above, you
can also send your request step by step, by using the four functions
below.

 -- Method: HTTPConnection.putrequest (request, selector[, skip_host[,
          skip_accept_encoding]])

     This should be the first call after the connection to the server
     has been made.  It sends a line to the server consisting of the
     _request_ string, the _selector_ string, and the HTTP version
     (‘HTTP/1.1’).  To disable automatic sending of ‘Host:’ or
     ‘Accept-Encoding:’ headers (for example to accept additional
     content encodings), specify _skip_host_ or _skip_accept_encoding_
     with non-False values.

     Changed in version 2.4: _skip_accept_encoding_ argument added.

 -- Method: HTTPConnection.putheader (header, argument[, ...])

     Send an RFC 822(1)-style header to the server.  It sends a line to
     the server consisting of the header, a colon and a space, and the
     first argument.  If more arguments are given, continuation lines
     are sent, each consisting of a tab and an argument.

 -- Method: HTTPConnection.endheaders (message_body=None)

     Send a blank line to the server, signalling the end of the headers.
     The optional _message_body_ argument can be used to pass a message
     body associated with the request.  The message body will be sent in
     the same packet as the message headers if it is string, otherwise
     it is sent in a separate packet.

     Changed in version 2.7: _message_body_ was added.

 -- Method: HTTPConnection.send (data)

     Send data to the server.  This should be used directly only after
     the *note endheaders(): 1cea. method has been called and before
     *note getresponse(): 1ce3. is called.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: HTTPResponse Objects,  Next: Examples<14>,  Prev: HTTPConnection Objects,  Up: httplib --- HTTP protocol client

5.20.7.2 HTTPResponse Objects
.............................

*note HTTPResponse: 22b. instances have the following methods and
attributes:

 -- Method: HTTPResponse.read ([amt])

     Reads and returns the response body, or up to the next _amt_ bytes.

 -- Method: HTTPResponse.getheader (name[, default])

     Get the contents of the header _name_, or _default_ if there is no
     matching header.

 -- Method: HTTPResponse.getheaders ()

     Return a list of (header, value) tuples.

     New in version 2.4.

 -- Method: HTTPResponse.fileno ()

     Returns the ‘fileno’ of the underlying socket.

 -- Attribute: HTTPResponse.msg

     A *note mimetools.Message: 1915. instance containing the response
     headers.

 -- Attribute: HTTPResponse.version

     HTTP protocol version used by server.  10 for HTTP/1.0, 11 for
     HTTP/1.1.

 -- Attribute: HTTPResponse.status

     Status code returned by server.

 -- Attribute: HTTPResponse.reason

     Reason phrase returned by server.


File: python.info,  Node: Examples<14>,  Prev: HTTPResponse Objects,  Up: httplib --- HTTP protocol client

5.20.7.3 Examples
.................

Here is an example session that uses the ‘GET’ method:

     >>> import httplib
     >>> conn = httplib.HTTPConnection("www.python.org")
     >>> conn.request("GET", "/index.html")
     >>> r1 = conn.getresponse()
     >>> print r1.status, r1.reason
     200 OK
     >>> data1 = r1.read()
     >>> conn.request("GET", "/parrot.spam")
     >>> r2 = conn.getresponse()
     >>> print r2.status, r2.reason
     404 Not Found
     >>> data2 = r2.read()
     >>> conn.close()

  Here is an example session that uses the ‘HEAD’ method.  Note that the
‘HEAD’ method never returns any data.

     >>> import httplib
     >>> conn = httplib.HTTPConnection("www.python.org")
     >>> conn.request("HEAD","/index.html")
     >>> res = conn.getresponse()
     >>> print res.status, res.reason
     200 OK
     >>> data = res.read()
     >>> print len(data)
     0
     >>> data == ''
     True

  Here is an example session that shows how to ‘POST’ requests:

     >>> import httplib, urllib
     >>> params = urllib.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})
     >>> headers = {"Content-type": "application/x-www-form-urlencoded",
     ...            "Accept": "text/plain"}
     >>> conn = httplib.HTTPConnection("bugs.python.org")
     >>> conn.request("POST", "", params, headers)
     >>> response = conn.getresponse()
     >>> print response.status, response.reason
     302 Found
     >>> data = response.read()
     >>> data
     'Redirecting to <a href="http://bugs.python.org/issue12524">http://bugs.python.org/issue12524</a>'
     >>> conn.close()

  Client side ‘HTTP PUT’ requests are very similar to ‘POST’ requests.
The difference lies only the server side where HTTP server will allow
resources to be created via ‘PUT’ request.  Here is an example session
that shows how to do ‘PUT’ request using httplib:

     >>> # This creates an HTTP message
     >>> # with the content of BODY as the enclosed representation
     >>> # for the resource http://localhost:8080/foobar
     ...
     >>> import httplib
     >>> BODY = "***filecontents***"
     >>> conn = httplib.HTTPConnection("localhost", 8080)
     >>> conn.request("PUT", "/file", BODY)
     >>> response = conn.getresponse()
     >>> print response.status, response.reason
     200, OK


File: python.info,  Node: ftplib --- FTP protocol client,  Next: poplib --- POP3 protocol client,  Prev: httplib --- HTTP protocol client,  Up: Internet Protocols and Support

5.20.8 ‘ftplib’ — FTP protocol client
-------------------------------------

*Source code:* Lib/ftplib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines the class *note FTP: 347. and a few related items.
The *note FTP: 347. class implements the client side of the FTP
protocol.  You can use this to write Python programs that perform a
variety of automated FTP jobs, such as mirroring other ftp servers.  It
is also used by the module *note urllib: 188. to handle URLs that use
FTP. For more information on FTP (File Transfer Protocol), see Internet
RFC 959(2).

  Here’s a sample session using the *note ftplib: d8. module:

     >>> from ftplib import FTP
     >>> ftp = FTP('ftp.debian.org')     # connect to host, default port
     >>> ftp.login()                     # user anonymous, passwd anonymous@
     '230 Login successful.'
     >>> ftp.cwd('debian')               # change into "debian" directory
     >>> ftp.retrlines('LIST')           # list directory contents
     -rw-rw-r--    1 1176     1176         1063 Jun 15 10:18 README
     ...
     drwxr-sr-x    5 1176     1176         4096 Dec 19  2000 pool
     drwxr-sr-x    4 1176     1176         4096 Nov 17  2008 project
     drwxr-xr-x    3 1176     1176         4096 Oct 10  2012 tools
     '226 Directory send OK.'
     >>> ftp.retrbinary('RETR README', open('README', 'wb').write)
     '226 Transfer complete.'
     >>> ftp.quit()

  The module defines the following items:

 -- Class: ftplib.FTP ([host[, user[, passwd[, acct[, timeout]]]]])

     Return a new instance of the *note FTP: 347. class.  When _host_ is
     given, the method call ‘connect(host)’ is made.  When _user_ is
     given, additionally the method call ‘login(user, passwd, acct)’ is
     made (where _passwd_ and _acct_ default to the empty string when
     not given).  The optional _timeout_ parameter specifies a timeout
     in seconds for blocking operations like the connection attempt (if
     is not specified, the global default timeout setting will be used).

     Changed in version 2.6: _timeout_ was added.

 -- Class: ftplib.FTP_TLS ([host[, user[, passwd[, acct[, keyfile[,
          certfile[, timeout]]]]]]])

     A *note FTP: 347. subclass which adds TLS support to FTP as
     described in RFC 4217(3).  Connect as usual to port 21 implicitly
     securing the FTP control connection before authenticating.
     Securing the data connection requires the user to explicitly ask
     for it by calling the *note prot_p(): 1cfa. method.  _keyfile_ and
     _certfile_ are optional – they can contain a PEM formatted private
     key and certificate chain file name for the SSL connection.

     New in version 2.7.

     Here’s a sample session using the *note FTP_TLS: 219. class:

          >>> from ftplib import FTP_TLS
          >>> ftps = FTP_TLS('ftp.python.org')
          >>> ftps.login()           # login anonymously before securing control channel
          >>> ftps.prot_p()          # switch to secure data connection
          >>> ftps.retrlines('LIST') # list directory content securely
          total 9
          drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .
          drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..
          drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin
          drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc
          d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming
          drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib
          drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub
          drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr
          -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg
          '226 Transfer complete.'
          >>> ftps.quit()
          >>>

 -- Exception: ftplib.error_reply

     Exception raised when an unexpected reply is received from the
     server.

 -- Exception: ftplib.error_temp

     Exception raised when an error code signifying a temporary error
     (response codes in the range 400–499) is received.

 -- Exception: ftplib.error_perm

     Exception raised when an error code signifying a permanent error
     (response codes in the range 500–599) is received.

 -- Exception: ftplib.error_proto

     Exception raised when a reply is received from the server that does
     not fit the response specifications of the File Transfer Protocol,
     i.e.  begin with a digit in the range 1–5.

 -- Data: ftplib.all_errors

     The set of all exceptions (as a tuple) that methods of *note FTP:
     347. instances may raise as a result of problems with the FTP
     connection (as opposed to programming errors made by the caller).
     This set includes the four exceptions listed above as well as *note
     socket.error: 381. and *note IOError: 1fa.

See also
........

Module *note netrc: 121.

     Parser for the ‘.netrc’ file format.  The file ‘.netrc’ is
     typically used by FTP clients to load user authentication
     information before prompting the user.

  The file ‘Tools/scripts/ftpmirror.py’ in the Python source
distribution is a script that can mirror FTP sites, or portions thereof,
using the *note ftplib: d8. module.  It can be used as an extended
example that applies this module.

* Menu:

* FTP Objects:: 
* FTP_TLS Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/ftplib.py

   (2) http://tools.ietf.org/html/rfc959.html

   (3) http://tools.ietf.org/html/rfc4217.html


File: python.info,  Node: FTP Objects,  Next: FTP_TLS Objects,  Up: ftplib --- FTP protocol client

5.20.8.1 FTP Objects
....................

Several methods are available in two flavors: one for handling text
files and another for binary files.  These are named for the command
which is used followed by ‘lines’ for the text version or ‘binary’ for
the binary version.

  *note FTP: 347. instances have the following methods:

 -- Method: FTP.set_debuglevel (level)

     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, ‘0’, produces no debugging
     output.  A value of ‘1’ produces a moderate amount of debugging
     output, generally a single line per request.  A value of ‘2’ or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: FTP.connect (host[, port[, timeout]])

     Connect to the given host and port.  The default port number is
     ‘21’, as specified by the FTP protocol specification.  It is rarely
     needed to specify a different port number.  This function should be
     called only once for each instance; it should not be called at all
     if a host was given when the instance was created.  All other
     methods can only be used after a connection has been made.

     The optional _timeout_ parameter specifies a timeout in seconds for
     the connection attempt.  If no _timeout_ is passed, the global
     default timeout setting will be used.

     Changed in version 2.6: _timeout_ was added.

 -- Method: FTP.getwelcome ()

     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: FTP.login ([user[, passwd[, acct]]])

     Log in as the given _user_.  The _passwd_ and _acct_ parameters are
     optional and default to the empty string.  If no _user_ is
     specified, it defaults to ‘'anonymous'’.  If _user_ is
     ‘'anonymous'’, the default _passwd_ is ‘'anonymous@'’.  This
     function should be called only once for each instance, after a
     connection has been established; it should not be called at all if
     a host and user were given when the instance was created.  Most FTP
     commands are only allowed after the client has logged in.  The
     _acct_ parameter supplies "accounting information"; few systems
     implement this.

 -- Method: FTP.abort ()

     Abort a file transfer that is in progress.  Using this does not
     always work, but it’s worth a try.

 -- Method: FTP.sendcmd (command)

     Send a simple command string to the server and return the response
     string.

 -- Method: FTP.voidcmd (command)

     Send a simple command string to the server and handle the response.
     Return nothing if a response code corresponding to success (codes
     in the range 200–299) is received.  Raise *note error_reply: 1cfb.
     otherwise.

 -- Method: FTP.retrbinary (command, callback[, maxblocksize[, rest]])

     Retrieve a file in binary transfer mode.  _command_ should be an
     appropriate ‘RETR’ command: ‘'RETR filename'’.  The _callback_
     function is called for each block of data received, with a single
     string argument giving the data block.  The optional _maxblocksize_
     argument specifies the maximum chunk size to read on the low-level
     socket object created to do the actual transfer (which will also be
     the largest size of the data blocks passed to _callback_).  A
     reasonable default is chosen.  _rest_ means the same thing as in
     the *note transfercmd(): 1d0a. method.

 -- Method: FTP.retrlines (command[, callback])

     Retrieve a file or directory listing in ASCII transfer mode.
     _command_ should be an appropriate ‘RETR’ command (see *note
     retrbinary(): 1d09.) or a command such as ‘LIST’, ‘NLST’ or ‘MLSD’
     (usually just the string ‘'LIST'’).  ‘LIST’ retrieves a list of
     files and information about those files.  ‘NLST’ retrieves a list
     of file names.  On some servers, ‘MLSD’ retrieves a machine
     readable list of files and information about those files.  The
     _callback_ function is called for each line with a string argument
     containing the line with the trailing CRLF stripped.  The default
     _callback_ prints the line to ‘sys.stdout’.

 -- Method: FTP.set_pasv (boolean)

     Enable "passive" mode if _boolean_ is true, other disable passive
     mode.  (In Python 2.0 and before, passive mode was off by default;
     in Python 2.1 and later, it is on by default.)

 -- Method: FTP.storbinary (command, file[, blocksize, callback, rest])

     Store a file in binary transfer mode.  _command_ should be an
     appropriate ‘STOR’ command: ‘"STOR filename"’.  _file_ is an open
     file object which is read until EOF using its ‘read()’ method in
     blocks of size _blocksize_ to provide the data to be stored.  The
     _blocksize_ argument defaults to 8192.  _callback_ is an optional
     single parameter callable that is called on each block of data
     after it is sent.  _rest_ means the same thing as in the *note
     transfercmd(): 1d0a. method.

     Changed in version 2.1: default for _blocksize_ added.

     Changed in version 2.6: _callback_ parameter added.

     Changed in version 2.7: _rest_ parameter added.

 -- Method: FTP.storlines (command, file[, callback])

     Store a file in ASCII transfer mode.  _command_ should be an
     appropriate ‘STOR’ command (see *note storbinary(): 21a.).  Lines
     are read until EOF from the open file object _file_ using its *note
     readline(): 644. method to provide the data to be stored.
     _callback_ is an optional single parameter callable that is called
     on each line after it is sent.

     Changed in version 2.6: _callback_ parameter added.

 -- Method: FTP.transfercmd (cmd[, rest])

     Initiate a transfer over the data connection.  If the transfer is
     active, send a ‘EPRT’ or ‘PORT’ command and the transfer command
     specified by _cmd_, and accept the connection.  If the server is
     passive, send a ‘EPSV’ or ‘PASV’ command, connect to it, and start
     the transfer command.  Either way, return the socket for the
     connection.

     If optional _rest_ is given, a ‘REST’ command is sent to the
     server, passing _rest_ as an argument.  _rest_ is usually a byte
     offset into the requested file, telling the server to restart
     sending the file’s bytes at the requested offset, skipping over the
     initial bytes.  Note however that RFC 959 requires only that _rest_
     be a string containing characters in the printable range from ASCII
     code 33 to ASCII code 126.  The *note transfercmd(): 1d0a. method,
     therefore, converts _rest_ to a string, but no check is performed
     on the string’s contents.  If the server does not recognize the
     ‘REST’ command, an *note error_reply: 1cfb. exception will be
     raised.  If this happens, simply call *note transfercmd(): 1d0a.
     without a _rest_ argument.

 -- Method: FTP.ntransfercmd (cmd[, rest])

     Like *note transfercmd(): 1d0a, but returns a tuple of the data
     connection and the expected size of the data.  If the expected size
     could not be computed, ‘None’ will be returned as the expected
     size.  _cmd_ and _rest_ means the same thing as in *note
     transfercmd(): 1d0a.

 -- Method: FTP.nlst (argument[, ...])

     Return a list of file names as returned by the ‘NLST’ command.  The
     optional _argument_ is a directory to list (default is the current
     server directory).  Multiple arguments can be used to pass
     non-standard options to the ‘NLST’ command.

 -- Method: FTP.dir (argument[, ...])

     Produce a directory listing as returned by the ‘LIST’ command,
     printing it to standard output.  The optional _argument_ is a
     directory to list (default is the current server directory).
     Multiple arguments can be used to pass non-standard options to the
     ‘LIST’ command.  If the last argument is a function, it is used as
     a _callback_ function as for *note retrlines(): 1d0b.; the default
     prints to ‘sys.stdout’.  This method returns ‘None’.

 -- Method: FTP.rename (fromname, toname)

     Rename file _fromname_ on the server to _toname_.

 -- Method: FTP.delete (filename)

     Remove the file named _filename_ from the server.  If successful,
     returns the text of the response, otherwise raises *note
     error_perm: 1cfd. on permission errors or *note error_reply: 1cfb.
     on other errors.

 -- Method: FTP.cwd (pathname)

     Set the current directory on the server.

 -- Method: FTP.mkd (pathname)

     Create a new directory on the server.

 -- Method: FTP.pwd ()

     Return the pathname of the current directory on the server.

 -- Method: FTP.rmd (dirname)

     Remove the directory named _dirname_ on the server.

 -- Method: FTP.size (filename)

     Request the size of the file named _filename_ on the server.  On
     success, the size of the file is returned as an integer, otherwise
     ‘None’ is returned.  Note that the ‘SIZE’ command is not
     standardized, but is supported by many common server
     implementations.

 -- Method: FTP.quit ()

     Send a ‘QUIT’ command to the server and close the connection.  This
     is the "polite" way to close a connection, but it may raise an
     exception if the server responds with an error to the ‘QUIT’
     command.  This implies a call to the *note close(): 1d19. method
     which renders the *note FTP: 347. instance useless for subsequent
     calls (see below).

 -- Method: FTP.close ()

     Close the connection unilaterally.  This should not be applied to
     an already closed connection such as after a successful call to
     *note quit(): 1d18.  After this call the *note FTP: 347. instance
     should not be used any more (after a call to *note close(): 1d19.
     or *note quit(): 1d18. you cannot reopen the connection by issuing
     another *note login(): 1d05. method).


File: python.info,  Node: FTP_TLS Objects,  Prev: FTP Objects,  Up: ftplib --- FTP protocol client

5.20.8.2 FTP_TLS Objects
........................

*note FTP_TLS: 219. class inherits from *note FTP: 347, defining these
additional objects:

 -- Attribute: FTP_TLS.ssl_version

     The SSL version to use (defaults to _TLSv1_).

 -- Method: FTP_TLS.auth ()

     Set up secure control connection by using TLS or SSL, depending on
     what specified in *note ssl_version(): 1d1b. attribute.

 -- Method: FTP_TLS.prot_p ()

     Set up secure data connection.

 -- Method: FTP_TLS.prot_c ()

     Set up clear text data connection.


File: python.info,  Node: poplib --- POP3 protocol client,  Next: imaplib --- IMAP4 protocol client,  Prev: ftplib --- FTP protocol client,  Up: Internet Protocols and Support

5.20.9 ‘poplib’ — POP3 protocol client
--------------------------------------

*Source code:* Lib/poplib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines a class, *note POP3: 1d20, which encapsulates a
connection to a POP3 server and implements the protocol as defined in
RFC 1725(2).  The *note POP3: 1d20. class supports both the minimal and
optional command sets.  Additionally, this module provides a class *note
POP3_SSL: 1d21, which provides support for connecting to POP3 servers
that use SSL as an underlying protocol layer.

  Note that POP3, though widely supported, is obsolescent.  The
implementation quality of POP3 servers varies widely, and too many are
quite poor.  If your mailserver supports IMAP, you would be better off
using the *note imaplib.IMAP4: 1d22. class, as IMAP servers tend to be
better implemented.

  The *note poplib: 135. module provides two classes:

 -- Class: poplib.POP3 (host[, port[, timeout]])

     This class implements the actual POP3 protocol.  The connection is
     created when the instance is initialized.  If _port_ is omitted,
     the standard POP3 port (110) is used.  The optional _timeout_
     parameter specifies a timeout in seconds for the connection attempt
     (if not specified, the global default timeout setting will be
     used).

     Changed in version 2.6: _timeout_ was added.

 -- Class: poplib.POP3_SSL (host[, port[, keyfile[, certfile]]])

     This is a subclass of *note POP3: 1d20. that connects to the server
     over an SSL encrypted socket.  If _port_ is not specified, 995, the
     standard POP3-over-SSL port is used.  _keyfile_ and _certfile_ are
     also optional - they can contain a PEM formatted private key and
     certificate chain file for the SSL connection.

     New in version 2.4.

  One exception is defined as an attribute of the *note poplib: 135.
module:

 -- Exception: poplib.error_proto

     Exception raised on any errors from this module (errors from *note
     socket: 15c. module are not caught).  The reason for the exception
     is passed to the constructor as a string.

See also
........

Module *note imaplib: f2.

     The standard Python IMAP module.

Frequently Asked Questions About Fetchmail(3)

     The FAQ for the *fetchmail* POP/IMAP client collects information on
     POP3 server variations and RFC noncompliance that may be useful if
     you need to write an application based on the POP protocol.

* Menu:

* POP3 Objects:: 
* POP3 Example:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/poplib.py

   (2) http://tools.ietf.org/html/rfc1725.html

   (3) http://www.catb.org/~esr/fetchmail/fetchmail-FAQ.html


File: python.info,  Node: POP3 Objects,  Next: POP3 Example,  Up: poplib --- POP3 protocol client

5.20.9.1 POP3 Objects
.....................

All POP3 commands are represented by methods of the same name, in
lower-case; most return the response text sent by the server.

  An *note POP3: 1d20. instance has the following methods:

 -- Method: POP3.set_debuglevel (level)

     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, ‘0’, produces no debugging
     output.  A value of ‘1’ produces a moderate amount of debugging
     output, generally a single line per request.  A value of ‘2’ or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: POP3.getwelcome ()

     Returns the greeting string sent by the POP3 server.

 -- Method: POP3.user (username)

     Send user command, response should indicate that a password is
     required.

 -- Method: POP3.pass_ (password)

     Send password, response includes message count and mailbox size.
     Note: the mailbox on the server is locked until ‘quit()’ is called.

 -- Method: POP3.apop (user, secret)

     Use the more secure APOP authentication to log into the POP3
     server.

 -- Method: POP3.rpop (user)

     Use RPOP authentication (similar to UNIX r-commands) to log into
     POP3 server.

 -- Method: POP3.stat ()

     Get mailbox status.  The result is a tuple of 2 integers: ‘(message
     count, mailbox size)’.

 -- Method: POP3.list ([which])

     Request message list, result is in the form ‘(response, ['mesg_num
     octets', ...], octets)’.  If _which_ is set, it is the message to
     list.

 -- Method: POP3.retr (which)

     Retrieve whole message number _which_, and set its seen flag.
     Result is in form ‘(response, ['line', ...], octets)’.

 -- Method: POP3.dele (which)

     Flag message number _which_ for deletion.  On most servers
     deletions are not actually performed until QUIT (the major
     exception is Eudora QPOP, which deliberately violates the RFCs by
     doing pending deletes on any disconnect).

 -- Method: POP3.rset ()

     Remove any deletion marks for the mailbox.

 -- Method: POP3.noop ()

     Do nothing.  Might be used as a keep-alive.

 -- Method: POP3.quit ()

     Signoff: commit changes, unlock mailbox, drop connection.

 -- Method: POP3.top (which, howmuch)

     Retrieves the message header plus _howmuch_ lines of the message
     after the header of message number _which_.  Result is in form
     ‘(response, ['line', ...], octets)’.

     The POP3 TOP command this method uses, unlike the RETR command,
     doesn’t set the message’s seen flag; unfortunately, TOP is poorly
     specified in the RFCs and is frequently broken in off-brand
     servers.  Test this method by hand against the POP3 servers you
     will use before trusting it.

 -- Method: POP3.uidl ([which])

     Return message digest (unique id) list.  If _which_ is specified,
     result contains the unique id for that message in the form
     ‘'response mesgnum uid’, otherwise result is list ‘(response,
     ['mesgnum uid', ...], octets)’.

  Instances of *note POP3_SSL: 1d21. have no additional methods.  The
interface of this subclass is identical to its parent.


File: python.info,  Node: POP3 Example,  Prev: POP3 Objects,  Up: poplib --- POP3 protocol client

5.20.9.2 POP3 Example
.....................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

     import getpass, poplib

     M = poplib.POP3('localhost')
     M.user(getpass.getuser())
     M.pass_(getpass.getpass())
     numMessages = len(M.list()[1])
     for i in range(numMessages):
         for j in M.retr(i+1)[1]:
             print j

  At the end of the module, there is a test section that contains a more
extensive example of usage.


File: python.info,  Node: imaplib --- IMAP4 protocol client,  Next: nntplib --- NNTP protocol client,  Prev: poplib --- POP3 protocol client,  Up: Internet Protocols and Support

5.20.10 ‘imaplib’ — IMAP4 protocol client
-----------------------------------------

*Source code:* Lib/imaplib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines three classes, *note IMAP4: 1d22, *note IMAP4_SSL:
1d39. and *note IMAP4_stream: 1d3a, which encapsulate a connection to an
IMAP4 server and implement a large subset of the IMAP4rev1 client
protocol as defined in RFC 2060(2).  It is backward compatible with
IMAP4 ( RFC 1730(3)) servers, but note that the ‘STATUS’ command is not
supported in IMAP4.

  Three classes are provided by the *note imaplib: f2. module, *note
IMAP4: 1d22. is the base class:

 -- Class: imaplib.IMAP4 ([host[, port]])

     This class implements the actual IMAP4 protocol.  The connection is
     created and protocol version (IMAP4 or IMAP4rev1) is determined
     when the instance is initialized.  If _host_ is not specified, ‘''’
     (the local host) is used.  If _port_ is omitted, the standard IMAP4
     port (143) is used.

  Three exceptions are defined as attributes of the *note IMAP4: 1d22.
class:

 -- Exception: IMAP4.error

     Exception raised on any errors.  The reason for the exception is
     passed to the constructor as a string.

 -- Exception: IMAP4.abort

     IMAP4 server errors cause this exception to be raised.  This is a
     sub-class of *note IMAP4.error: 1d3b.  Note that closing the
     instance and instantiating a new one will usually allow recovery
     from this exception.

 -- Exception: IMAP4.readonly

     This exception is raised when a writable mailbox has its status
     changed by the server.  This is a sub-class of *note IMAP4.error:
     1d3b.  Some other client now has write permission, and the mailbox
     will need to be re-opened to re-obtain write permission.

  There’s also a subclass for secure connections:

 -- Class: imaplib.IMAP4_SSL ([host[, port[, keyfile[, certfile]]]])

     This is a subclass derived from *note IMAP4: 1d22. that connects
     over an SSL encrypted socket (to use this class you need a socket
     module that was compiled with SSL support).  If _host_ is not
     specified, ‘''’ (the local host) is used.  If _port_ is omitted,
     the standard IMAP4-over-SSL port (993) is used.  _keyfile_ and
     _certfile_ are also optional - they can contain a PEM formatted
     private key and certificate chain file for the SSL connection.

  The second subclass allows for connections created by a child process:

 -- Class: imaplib.IMAP4_stream (command)

     This is a subclass derived from *note IMAP4: 1d22. that connects to
     the ‘stdin/stdout’ file descriptors created by passing _command_ to
     ‘os.popen2()’.

     New in version 2.3.

  The following utility functions are defined:

 -- Function: imaplib.Internaldate2tuple (datestr)

     Parse an IMAP4 ‘INTERNALDATE’ string and return corresponding local
     time.  The return value is a *note time.struct_time: ae0. instance
     or None if the string has wrong format.

 -- Function: imaplib.Int2AP (num)

     Converts an integer into a string representation using characters
     from the set [‘A’ ..  ‘P’].

 -- Function: imaplib.ParseFlags (flagstr)

     Converts an IMAP4 ‘FLAGS’ response to a tuple of individual flags.

 -- Function: imaplib.Time2Internaldate (date_time)

     Convert _date_time_ to an IMAP4 ‘INTERNALDATE’ representation.  The
     return value is a string in the form: ‘"DD-Mmm-YYYY HH:MM:SS
     +HHMM"’ (including double-quotes).  The _date_time_ argument can be
     a number (int or float) representing seconds since epoch (as
     returned by *note time.time(): 461.), a 9-tuple representing local
     time (as returned by *note time.localtime(): ae1.), or a
     double-quoted string.  In the last case, it is assumed to already
     be in the correct format.

  Note that IMAP4 message numbers change as the mailbox changes; in
particular, after an ‘EXPUNGE’ command performs deletions the remaining
messages are renumbered.  So it is highly advisable to use UIDs instead,
with the UID command.

  At the end of the module, there is a test section that contains a more
extensive example of usage.

See also
........

Documents describing the protocol, and sources and binaries for servers
implementing it, can all be found at the University of Washington’s
_IMAP Information Center_ (‘http://www.washington.edu/imap/’).

* Menu:

* IMAP4 Objects:: 
* IMAP4 Example:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/imaplib.py

   (2) http://tools.ietf.org/html/rfc2060.html

   (3) http://tools.ietf.org/html/rfc1730.html


File: python.info,  Node: IMAP4 Objects,  Next: IMAP4 Example,  Up: imaplib --- IMAP4 protocol client

5.20.10.1 IMAP4 Objects
.......................

All IMAP4rev1 commands are represented by methods of the same name,
either upper-case or lower-case.

  All arguments to commands are converted to strings, except for
‘AUTHENTICATE’, and the last argument to ‘APPEND’ which is passed as an
IMAP4 literal.  If necessary (the string contains IMAP4
protocol-sensitive characters and isn’t enclosed with either parentheses
or double quotes) each string is quoted.  However, the _password_
argument to the ‘LOGIN’ command is always quoted.  If you want to avoid
having an argument string quoted (eg: the _flags_ argument to ‘STORE’)
then enclose the string in parentheses (eg: ‘r'(\Deleted)'’).

  Each command returns a tuple: ‘(type, [data, ...])’ where _type_ is
usually ‘'OK'’ or ‘'NO'’, and _data_ is either the text from the command
response, or mandated results from the command.  Each _data_ is either a
string, or a tuple.  If a tuple, then the first part is the header of
the response, and the second part contains the data (ie: ’literal’
value).

  The _message_set_ options to commands below is a string specifying one
or more messages to be acted upon.  It may be a simple message number
(‘'1'’), a range of message numbers (‘'2:4'’), or a group of
non-contiguous ranges separated by commas (‘'1:3,6:9'’).  A range can
contain an asterisk to indicate an infinite upper bound (‘'3:*'’).

  An *note IMAP4: 1d22. instance has the following methods:

 -- Method: IMAP4.append (mailbox, flags, date_time, message)

     Append _message_ to named mailbox.

 -- Method: IMAP4.authenticate (mechanism, authobject)

     Authenticate command — requires response processing.

     _mechanism_ specifies which authentication mechanism is to be used
     - it should appear in the instance variable ‘capabilities’ in the
     form ‘AUTH=mechanism’.

     _authobject_ must be a callable object:

          data = authobject(response)

     It will be called to process server continuation responses.  It
     should return ‘data’ that will be encoded and sent to server.  It
     should return ‘None’ if the client abort response ‘*’ should be
     sent instead.

 -- Method: IMAP4.check ()

     Checkpoint mailbox on server.

 -- Method: IMAP4.close ()

     Close currently selected mailbox.  Deleted messages are removed
     from writable mailbox.  This is the recommended command before
     ‘LOGOUT’.

 -- Method: IMAP4.copy (message_set, new_mailbox)

     Copy _message_set_ messages onto end of _new_mailbox_.

 -- Method: IMAP4.create (mailbox)

     Create new mailbox named _mailbox_.

 -- Method: IMAP4.delete (mailbox)

     Delete old mailbox named _mailbox_.

 -- Method: IMAP4.deleteacl (mailbox, who)

     Delete the ACLs (remove any rights) set for who on mailbox.

     New in version 2.4.

 -- Method: IMAP4.expunge ()

     Permanently remove deleted items from selected mailbox.  Generates
     an ‘EXPUNGE’ response for each deleted message.  Returned data
     contains a list of ‘EXPUNGE’ message numbers in order received.

 -- Method: IMAP4.fetch (message_set, message_parts)

     Fetch (parts of) messages.  _message_parts_ should be a string of
     message part names enclosed within parentheses, eg: ‘"(UID
     BODY[TEXT])"’.  Returned data are tuples of message part envelope
     and data.

 -- Method: IMAP4.getacl (mailbox)

     Get the ‘ACL’s for _mailbox_.  The method is non-standard, but is
     supported by the ‘Cyrus’ server.

 -- Method: IMAP4.getannotation (mailbox, entry, attribute)

     Retrieve the specified ‘ANNOTATION’s for _mailbox_.  The method is
     non-standard, but is supported by the ‘Cyrus’ server.

     New in version 2.5.

 -- Method: IMAP4.getquota (root)

     Get the ‘quota’ _root_’s resource usage and limits.  This method is
     part of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.

 -- Method: IMAP4.getquotaroot (mailbox)

     Get the list of ‘quota’ ‘roots’ for the named _mailbox_.  This
     method is part of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.

 -- Method: IMAP4.list ([directory[, pattern]])

     List mailbox names in _directory_ matching _pattern_.  _directory_
     defaults to the top-level mail folder, and _pattern_ defaults to
     match anything.  Returned data contains a list of ‘LIST’ responses.

 -- Method: IMAP4.login (user, password)

     Identify the client using a plaintext password.  The _password_
     will be quoted.

 -- Method: IMAP4.login_cram_md5 (user, password)

     Force use of ‘CRAM-MD5’ authentication when identifying the client
     to protect the password.  Will only work if the server ‘CAPABILITY’
     response includes the phrase ‘AUTH=CRAM-MD5’.

     New in version 2.3.

 -- Method: IMAP4.logout ()

     Shutdown connection to server.  Returns server ‘BYE’ response.

 -- Method: IMAP4.lsub ([directory[, pattern]])

     List subscribed mailbox names in directory matching pattern.
     _directory_ defaults to the top level directory and _pattern_
     defaults to match any mailbox.  Returned data are tuples of message
     part envelope and data.

 -- Method: IMAP4.myrights (mailbox)

     Show my ACLs for a mailbox (i.e.  the rights that I have on
     mailbox).

     New in version 2.4.

 -- Method: IMAP4.namespace ()

     Returns IMAP namespaces as defined in RFC2342.

     New in version 2.3.

 -- Method: IMAP4.noop ()

     Send ‘NOOP’ to server.

 -- Method: IMAP4.open (host, port)

     Opens socket to _port_ at _host_.  This method is implicitly called
     by the *note IMAP4: 1d22. constructor.  The connection objects
     established by this method will be used in the *note IMAP4.read():
     1d5b, *note IMAP4.readline(): 1d5c, *note IMAP4.send(): 1d5d, and
     *note IMAP4.shutdown(): 1d5e. methods.  You may override this
     method.

 -- Method: IMAP4.partial (message_num, message_part, start, length)

     Fetch truncated part of a message.  Returned data is a tuple of
     message part envelope and data.

 -- Method: IMAP4.proxyauth (user)

     Assume authentication as _user_.  Allows an authorised
     administrator to proxy into any user’s mailbox.

     New in version 2.3.

 -- Method: IMAP4.read (size)

     Reads _size_ bytes from the remote server.  You may override this
     method.

 -- Method: IMAP4.readline ()

     Reads one line from the remote server.  You may override this
     method.

 -- Method: IMAP4.recent ()

     Prompt server for an update.  Returned data is ‘None’ if no new
     messages, else value of ‘RECENT’ response.

 -- Method: IMAP4.rename (oldmailbox, newmailbox)

     Rename mailbox named _oldmailbox_ to _newmailbox_.

 -- Method: IMAP4.response (code)

     Return data for response _code_ if received, or ‘None’.  Returns
     the given code, instead of the usual type.

 -- Method: IMAP4.search (charset, criterion[, ...])

     Search mailbox for matching messages.  _charset_ may be ‘None’, in
     which case no ‘CHARSET’ will be specified in the request to the
     server.  The IMAP protocol requires that at least one criterion be
     specified; an exception will be raised when the server returns an
     error.

     Example:

          # M is a connected IMAP4 instance...
          typ, msgnums = M.search(None, 'FROM', '"LDJ"')

          # or:
          typ, msgnums = M.search(None, '(FROM "LDJ")')

 -- Method: IMAP4.select ([mailbox[, readonly]])

     Select a mailbox.  Returned data is the count of messages in
     _mailbox_ (‘EXISTS’ response).  The default _mailbox_ is ‘'INBOX'’.
     If the _readonly_ flag is set, modifications to the mailbox are not
     allowed.

 -- Method: IMAP4.send (data)

     Sends ‘data’ to the remote server.  You may override this method.

 -- Method: IMAP4.setacl (mailbox, who, what)

     Set an ‘ACL’ for _mailbox_.  The method is non-standard, but is
     supported by the ‘Cyrus’ server.

 -- Method: IMAP4.setannotation (mailbox, entry, attribute[, ...])

     Set ‘ANNOTATION’s for _mailbox_.  The method is non-standard, but
     is supported by the ‘Cyrus’ server.

     New in version 2.5.

 -- Method: IMAP4.setquota (root, limits)

     Set the ‘quota’ _root_’s resource _limits_.  This method is part of
     the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.

 -- Method: IMAP4.shutdown ()

     Close connection established in ‘open’.  This method is implicitly
     called by *note IMAP4.logout(): 1d55.  You may override this
     method.

 -- Method: IMAP4.socket ()

     Returns socket instance used to connect to server.

 -- Method: IMAP4.sort (sort_criteria, charset, search_criterion[, ...])

     The ‘sort’ command is a variant of ‘search’ with sorting semantics
     for the results.  Returned data contains a space separated list of
     matching message numbers.

     Sort has two arguments before the _search_criterion_ argument(s); a
     parenthesized list of _sort_criteria_, and the searching _charset_.
     Note that unlike ‘search’, the searching _charset_ argument is
     mandatory.  There is also a ‘uid sort’ command which corresponds to
     ‘sort’ the way that ‘uid search’ corresponds to ‘search’.  The
     ‘sort’ command first searches the mailbox for messages that match
     the given searching criteria using the charset argument for the
     interpretation of strings in the searching criteria.  It then
     returns the numbers of matching messages.

     This is an ‘IMAP4rev1’ extension command.

 -- Method: IMAP4.status (mailbox, names)

     Request named status conditions for _mailbox_.

 -- Method: IMAP4.store (message_set, command, flag_list)

     Alters flag dispositions for messages in mailbox.  _command_ is
     specified by section 6.4.6 of RFC 2060(1) as being one of "FLAGS",
     "+FLAGS", or "-FLAGS", optionally with a suffix of ".SILENT".

     For example, to set the delete flag on all messages:

          typ, data = M.search(None, 'ALL')
          for num in data[0].split():
             M.store(num, '+FLAGS', '\\Deleted')
          M.expunge()

 -- Method: IMAP4.subscribe (mailbox)

     Subscribe to new mailbox.

 -- Method: IMAP4.thread (threading_algorithm, charset,
          search_criterion[, ...])

     The ‘thread’ command is a variant of ‘search’ with threading
     semantics for the results.  Returned data contains a space
     separated list of thread members.

     Thread members consist of zero or more messages numbers, delimited
     by spaces, indicating successive parent and child.

     Thread has two arguments before the _search_criterion_ argument(s);
     a _threading_algorithm_, and the searching _charset_.  Note that
     unlike ‘search’, the searching _charset_ argument is mandatory.
     There is also a ‘uid thread’ command which corresponds to ‘thread’
     the way that ‘uid search’ corresponds to ‘search’.  The ‘thread’
     command first searches the mailbox for messages that match the
     given searching criteria using the charset argument for the
     interpretation of strings in the searching criteria.  It then
     returns the matching messages threaded according to the specified
     threading algorithm.

     This is an ‘IMAP4rev1’ extension command.

     New in version 2.4.

 -- Method: IMAP4.uid (command, arg[, ...])

     Execute command args with messages identified by UID, rather than
     message number.  Returns response appropriate to command.  At least
     one argument must be supplied; if none are provided, the server
     will return an error and an exception will be raised.

 -- Method: IMAP4.unsubscribe (mailbox)

     Unsubscribe from old mailbox.

 -- Method: IMAP4.xatom (name[, arg[, ...]])

     Allow simple extension commands notified by server in ‘CAPABILITY’
     response.

  Instances of *note IMAP4_SSL: 1d39. have just one additional method:

 -- Method: IMAP4_SSL.ssl ()

     Returns SSLObject instance used for the secure connection with the
     server.

  The following attributes are defined on instances of *note IMAP4:
1d22.:

 -- Attribute: IMAP4.PROTOCOL_VERSION

     The most recent supported protocol in the ‘CAPABILITY’ response
     from the server.

 -- Attribute: IMAP4.debug

     Integer value to control debugging output.  The initialize value is
     taken from the module variable ‘Debug’.  Values greater than three
     trace each command.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2060.html


File: python.info,  Node: IMAP4 Example,  Prev: IMAP4 Objects,  Up: imaplib --- IMAP4 protocol client

5.20.10.2 IMAP4 Example
.......................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

     import getpass, imaplib

     M = imaplib.IMAP4()
     M.login(getpass.getuser(), getpass.getpass())
     M.select()
     typ, data = M.search(None, 'ALL')
     for num in data[0].split():
         typ, data = M.fetch(num, '(RFC822)')
         print 'Message %s\n%s\n' % (num, data[0][1])
     M.close()
     M.logout()


File: python.info,  Node: nntplib --- NNTP protocol client,  Next: smtplib --- SMTP protocol client,  Prev: imaplib --- IMAP4 protocol client,  Up: Internet Protocols and Support

5.20.11 ‘nntplib’ — NNTP protocol client
----------------------------------------

*Source code:* Lib/nntplib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines the class *note NNTP: 1d79. which implements the
client side of the NNTP protocol.  It can be used to implement a news
reader or poster, or automated news processors.  For more information on
NNTP (Network News Transfer Protocol), see Internet RFC 977(2).

  Here are two small examples of how it can be used.  To list some
statistics about a newsgroup and print the subjects of the last 10
articles:

     >>> s = NNTP('news.gmane.org')
     >>> resp, count, first, last, name = s.group('gmane.comp.python.committers')
     >>> print 'Group', name, 'has', count, 'articles, range', first, 'to', last
     Group gmane.comp.python.committers has 1071 articles, range 1 to 1071
     >>> resp, subs = s.xhdr('subject', first + '-' + last)
     >>> for id, sub in subs[-10:]: print id, sub
     ...
     1062 Re: Mercurial Status?
     1063 Re: [python-committers]  (Windows) buildbots on 3.x
     1064 Re: Mercurial Status?
     1065 Re: Mercurial Status?
     1066 Python 2.6.6 status
     1067 Commit Privileges for Ask Solem
     1068 Re: Commit Privileges for Ask Solem
     1069 Re: Commit Privileges for Ask Solem
     1070 Re: Commit Privileges for Ask Solem
     1071 2.6.6 rc 2
     >>> s.quit()
     '205 Bye!'

  To post an article from a file (this assumes that the article has
valid headers, and that you have right to post on the particular
newsgroup):

     >>> s = NNTP('news.gmane.org')
     >>> f = open('articlefile')
     >>> s.post(f)
     '240 Article posted successfully.'
     >>> s.quit()
     '205 Bye!'

  The module itself defines the following items:

 -- Class: nntplib.NNTP (host[, port [, user[, password [, readermode]
          [, usenetrc]]]])

     Return a new instance of the *note NNTP: 1d79. class, representing
     a connection to the NNTP server running on host _host_, listening
     at port _port_.  The default _port_ is 119.  If the optional _user_
     and _password_ are provided, or if suitable credentials are present
     in ‘/.netrc’ and the optional flag _usenetrc_ is true (the
     default), the ‘AUTHINFO USER’ and ‘AUTHINFO PASS’ commands are used
     to identify and authenticate the user to the server.  If the
     optional flag _readermode_ is true, then a ‘mode reader’ command is
     sent before authentication is performed.  Reader mode is sometimes
     necessary if you are connecting to an NNTP server on the local
     machine and intend to call reader-specific commands, such as
     ‘group’.  If you get unexpected *note NNTPPermanentError: 1d7a.s,
     you might need to set _readermode_.  _readermode_ defaults to
     ‘None’.  _usenetrc_ defaults to ‘True’.

     Changed in version 2.4: _usenetrc_ argument added.

 -- Exception: nntplib.NNTPError

     Derived from the standard exception *note Exception: 339, this is
     the base class for all exceptions raised by the *note nntplib: 124.
     module.

 -- Exception: nntplib.NNTPReplyError

     Exception raised when an unexpected reply is received from the
     server.  For backwards compatibility, the exception ‘error_reply’
     is equivalent to this class.

 -- Exception: nntplib.NNTPTemporaryError

     Exception raised when an error code in the range 400–499 is
     received.  For backwards compatibility, the exception ‘error_temp’
     is equivalent to this class.

 -- Exception: nntplib.NNTPPermanentError

     Exception raised when an error code in the range 500–599 is
     received.  For backwards compatibility, the exception ‘error_perm’
     is equivalent to this class.

 -- Exception: nntplib.NNTPProtocolError

     Exception raised when a reply is received from the server that does
     not begin with a digit in the range 1–5.  For backwards
     compatibility, the exception ‘error_proto’ is equivalent to this
     class.

 -- Exception: nntplib.NNTPDataError

     Exception raised when there is some error in the response data.
     For backwards compatibility, the exception ‘error_data’ is
     equivalent to this class.

* Menu:

* NNTP Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/nntplib.py

   (2) http://tools.ietf.org/html/rfc977.html


File: python.info,  Node: NNTP Objects,  Up: nntplib --- NNTP protocol client

5.20.11.1 NNTP Objects
......................

NNTP instances have the following methods.  The _response_ that is
returned as the first item in the return tuple of almost all methods is
the server’s response: a string beginning with a three-digit code.  If
the server’s response indicates an error, the method raises one of the
above exceptions.

 -- Method: NNTP.getwelcome ()

     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: NNTP.set_debuglevel (level)

     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, ‘0’, produces no debugging
     output.  A value of ‘1’ produces a moderate amount of debugging
     output, generally a single line per request or response.  A value
     of ‘2’ or higher produces the maximum amount of debugging output,
     logging each line sent and received on the connection (including
     message text).

 -- Method: NNTP.newgroups (date, time[, file])

     Send a ‘NEWGROUPS’ command.  The _date_ argument should be a string
     of the form ‘'yymmdd'’ indicating the date, and _time_ should be a
     string of the form ‘'hhmmss'’ indicating the time.  Return a pair
     ‘(response, groups)’ where _groups_ is a list of group names that
     are new since the given date and time.  If the _file_ parameter is
     supplied, then the output of the ‘NEWGROUPS’ command is stored in a
     file.  If _file_ is a string, then the method will open a file
     object with that name, write to it then close it.  If _file_ is a
     file object, then it will start calling ‘write()’ on it to store
     the lines of the command output.  If _file_ is supplied, then the
     returned _list_ is an empty list.

 -- Method: NNTP.newnews (group, date, time[, file])

     Send a ‘NEWNEWS’ command.  Here, _group_ is a group name or ‘'*'’,
     and _date_ and _time_ have the same meaning as for *note
     newgroups(): 1d84.  Return a pair ‘(response, articles)’ where
     _articles_ is a list of message ids.  If the _file_ parameter is
     supplied, then the output of the ‘NEWNEWS’ command is stored in a
     file.  If _file_ is a string, then the method will open a file
     object with that name, write to it then close it.  If _file_ is a
     file object, then it will start calling ‘write()’ on it to store
     the lines of the command output.  If _file_ is supplied, then the
     returned _list_ is an empty list.

 -- Method: NNTP.list ([file])

     Send a ‘LIST’ command.  Return a pair ‘(response, list)’ where
     _list_ is a list of tuples.  Each tuple has the form ‘(group, last,
     first, flag)’, where _group_ is a group name, _last_ and _first_
     are the last and first article numbers (as strings), and _flag_ is
     ‘'y'’ if posting is allowed, ‘'n'’ if not, and ‘'m'’ if the
     newsgroup is moderated.  (Note the ordering: _last_, _first_.)  If
     the _file_ parameter is supplied, then the output of the ‘LIST’
     command is stored in a file.  If _file_ is a string, then the
     method will open a file object with that name, write to it then
     close it.  If _file_ is a file object, then it will start calling
     ‘write()’ on it to store the lines of the command output.  If
     _file_ is supplied, then the returned _list_ is an empty list.

 -- Method: NNTP.descriptions (grouppattern)

     Send a ‘LIST NEWSGROUPS’ command, where _grouppattern_ is a wildmat
     string as specified in RFC2980 (it’s essentially the same as DOS or
     UNIX shell wildcard strings).  Return a pair ‘(response, list)’,
     where _list_ is a list of tuples containing ‘(name, title)’.

     New in version 2.4.

 -- Method: NNTP.description (group)

     Get a description for a single group _group_.  If more than one
     group matches (if ’group’ is a real wildmat string), return the
     first match.  If no group matches, return an empty string.

     This elides the response code from the server.  If the response
     code is needed, use *note descriptions(): 1d87.

     New in version 2.4.

 -- Method: NNTP.group (name)

     Send a ‘GROUP’ command, where _name_ is the group name.  Return a
     tuple ‘(response, count, first, last, name)’ where _count_ is the
     (estimated) number of articles in the group, _first_ is the first
     article number in the group, _last_ is the last article number in
     the group, and _name_ is the group name.  The numbers are returned
     as strings.

 -- Method: NNTP.help ([file])

     Send a ‘HELP’ command.  Return a pair ‘(response, list)’ where
     _list_ is a list of help strings.  If the _file_ parameter is
     supplied, then the output of the ‘HELP’ command is stored in a
     file.  If _file_ is a string, then the method will open a file
     object with that name, write to it then close it.  If _file_ is a
     file object, then it will start calling ‘write()’ on it to store
     the lines of the command output.  If _file_ is supplied, then the
     returned _list_ is an empty list.

 -- Method: NNTP.stat (id)

     Send a ‘STAT’ command, where _id_ is the message id (enclosed in
     ‘'<'’ and ‘'>'’) or an article number (as a string).  Return a
     triple ‘(response, number, id)’ where _number_ is the article
     number (as a string) and _id_ is the message id (enclosed in ‘'<'’
     and ‘'>'’).

 -- Method: NNTP.next ()

     Send a ‘NEXT’ command.  Return as for *note stat(): 1d8b.

 -- Method: NNTP.last ()

     Send a ‘LAST’ command.  Return as for *note stat(): 1d8b.

 -- Method: NNTP.head (id)

     Send a ‘HEAD’ command, where _id_ has the same meaning as for *note
     stat(): 1d8b.  Return a tuple ‘(response, number, id, list)’ where
     the first three are the same as for *note stat(): 1d8b, and _list_
     is a list of the article’s headers (an uninterpreted list of lines,
     without trailing newlines).

 -- Method: NNTP.body (id[, file])

     Send a ‘BODY’ command, where _id_ has the same meaning as for *note
     stat(): 1d8b.  If the _file_ parameter is supplied, then the body
     is stored in a file.  If _file_ is a string, then the method will
     open a file object with that name, write to it then close it.  If
     _file_ is a file object, then it will start calling ‘write()’ on it
     to store the lines of the body.  Return as for *note head(): 1d8e.
     If _file_ is supplied, then the returned _list_ is an empty list.

 -- Method: NNTP.article (id)

     Send an ‘ARTICLE’ command, where _id_ has the same meaning as for
     *note stat(): 1d8b.  Return as for *note head(): 1d8e.

 -- Method: NNTP.slave ()

     Send a ‘SLAVE’ command.  Return the server’s _response_.

 -- Method: NNTP.xhdr (header, string[, file])

     Send an ‘XHDR’ command.  This command is not defined in the RFC but
     is a common extension.  The _header_ argument is a header keyword,
     e.g.  ‘'subject'’.  The _string_ argument should have the form
     ‘'first-last'’ where _first_ and _last_ are the first and last
     article numbers to search.  Return a pair ‘(response, list)’, where
     _list_ is a list of pairs ‘(id, text)’, where _id_ is an article
     number (as a string) and _text_ is the text of the requested header
     for that article.  If the _file_ parameter is supplied, then the
     output of the ‘XHDR’ command is stored in a file.  If _file_ is a
     string, then the method will open a file object with that name,
     write to it then close it.  If _file_ is a file object, then it
     will start calling ‘write()’ on it to store the lines of the
     command output.  If _file_ is supplied, then the returned _list_ is
     an empty list.

 -- Method: NNTP.post (file)

     Post an article using the ‘POST’ command.  The _file_ argument is
     an open file object which is read until EOF using its *note
     readline(): 644. method.  It should be a well-formed news article,
     including the required headers.  The *note post(): 1d93. method
     automatically escapes lines beginning with ‘.’.

 -- Method: NNTP.ihave (id, file)

     Send an ‘IHAVE’ command.  _id_ is a message id (enclosed in ‘'<'’
     and ‘'>'’).  If the response is not an error, treat _file_ exactly
     as for the *note post(): 1d93. method.

 -- Method: NNTP.date ()

     Return a triple ‘(response, date, time)’, containing the current
     date and time in a form suitable for the *note newnews(): 1d85. and
     *note newgroups(): 1d84. methods.  This is an optional NNTP
     extension, and may not be supported by all servers.

 -- Method: NNTP.xgtitle (name[, file])

     Process an ‘XGTITLE’ command, returning a pair ‘(response, list)’,
     where _list_ is a list of tuples containing ‘(name, title)’.  If
     the _file_ parameter is supplied, then the output of the ‘XGTITLE’
     command is stored in a file.  If _file_ is a string, then the
     method will open a file object with that name, write to it then
     close it.  If _file_ is a file object, then it will start calling
     ‘write()’ on it to store the lines of the command output.  If
     _file_ is supplied, then the returned _list_ is an empty list.
     This is an optional NNTP extension, and may not be supported by all
     servers.

     RFC2980 says "It is suggested that this extension be deprecated".
     Use *note descriptions(): 1d87. or *note description(): 1d88.
     instead.

 -- Method: NNTP.xover (start, end[, file])

     Return a pair ‘(resp, list)’.  _list_ is a list of tuples, one for
     each article in the range delimited by the _start_ and _end_
     article numbers.  Each tuple is of the form ‘(article number,
     subject, poster, date, id, references, size, lines)’.  If the
     _file_ parameter is supplied, then the output of the ‘XOVER’
     command is stored in a file.  If _file_ is a string, then the
     method will open a file object with that name, write to it then
     close it.  If _file_ is a file object, then it will start calling
     ‘write()’ on it to store the lines of the command output.  If
     _file_ is supplied, then the returned _list_ is an empty list.
     This is an optional NNTP extension, and may not be supported by all
     servers.

 -- Method: NNTP.xpath (id)

     Return a pair ‘(resp, path)’, where _path_ is the directory path to
     the article with message ID _id_.  This is an optional NNTP
     extension, and may not be supported by all servers.

 -- Method: NNTP.quit ()

     Send a ‘QUIT’ command and close the connection.  Once this method
     has been called, no other methods of the NNTP object should be
     called.


File: python.info,  Node: smtplib --- SMTP protocol client,  Next: smtpd --- SMTP Server,  Prev: nntplib --- NNTP protocol client,  Up: Internet Protocols and Support

5.20.12 ‘smtplib’ — SMTP protocol client
----------------------------------------

*Source code:* Lib/smtplib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note smtplib: 15a. module defines an SMTP client session object
that can be used to send mail to any Internet machine with an SMTP or
ESMTP listener daemon.  For details of SMTP and ESMTP operation, consult
RFC 821(2) (Simple Mail Transfer Protocol) and RFC 1869(3) (SMTP Service
Extensions).

 -- Class: smtplib.SMTP ([host[, port[, local_hostname[, timeout]]]])

     A *note SMTP: 1d9c. instance encapsulates an SMTP connection.  It
     has methods that support a full repertoire of SMTP and ESMTP
     operations.  If the optional host and port parameters are given,
     the SMTP *note connect(): 1d9d. method is called with those
     parameters during initialization.  If specified, _local_hostname_
     is used as the FQDN of the local host in the HELO/EHLO command.
     Otherwise, the local hostname is found using *note
     socket.getfqdn(): 172e.  If the *note connect(): 1d9d. call returns
     anything other than a success code, an *note SMTPConnectError:
     1d9e. is raised.  The optional _timeout_ parameter specifies a
     timeout in seconds for blocking operations like the connection
     attempt (if not specified, the global default timeout setting will
     be used).  If the timeout expires, *note socket.timeout: 463. is
     raised.

     For normal use, you should only require the initialization/connect,
     *note sendmail(): 1d9f, and ‘quit()’ methods.  An example is
     included below.

     Changed in version 2.6: _timeout_ was added.

 -- Class: smtplib.SMTP_SSL ([host[, port[, local_hostname[, keyfile[,
          certfile[, timeout]]]]]])

     A *note SMTP_SSL: 1da0. instance behaves exactly the same as
     instances of *note SMTP: 1d9c.  *note SMTP_SSL: 1da0. should be
     used for situations where SSL is required from the beginning of the
     connection and using ‘starttls()’ is not appropriate.  If _host_ is
     not specified, the local host is used.  If _port_ is omitted, the
     standard SMTP-over-SSL port (465) is used.  _local_hostname_ has
     the same meaning as it does for the *note SMTP: 1d9c. class.
     _keyfile_ and _certfile_ are also optional, and can contain a PEM
     formatted private key and certificate chain file for the SSL
     connection.  The optional _timeout_ parameter specifies a timeout
     in seconds for blocking operations like the connection attempt (if
     not specified, the global default timeout setting will be used).
     If the timeout expires, *note socket.timeout: 463. is raised.

     New in version 2.6.

 -- Class: smtplib.LMTP ([host[, port[, local_hostname]]])

     The LMTP protocol, which is very similar to ESMTP, is heavily based
     on the standard SMTP client.  It’s common to use Unix sockets for
     LMTP, so our ‘connect()’ method must support that as well as a
     regular host:port server.  _local_hostname_ has the same meaning as
     it does for the *note SMTP: 1d9c. class.  To specify a Unix socket,
     you must use an absolute path for _host_, starting with a ’/’.

     Authentication is supported, using the regular SMTP mechanism.
     When using a Unix socket, LMTP generally don’t support or require
     any authentication, but your mileage might vary.

     New in version 2.6.

  A nice selection of exceptions is defined as well:

 -- Exception: smtplib.SMTPException

     The base exception class for all the other exceptions provided by
     this module.

 -- Exception: smtplib.SMTPServerDisconnected

     This exception is raised when the server unexpectedly disconnects,
     or when an attempt is made to use the *note SMTP: 1d9c. instance
     before connecting it to a server.

 -- Exception: smtplib.SMTPResponseException

     Base class for all exceptions that include an SMTP error code.
     These exceptions are generated in some instances when the SMTP
     server returns an error code.  The error code is stored in the
     ‘smtp_code’ attribute of the error, and the ‘smtp_error’ attribute
     is set to the error message.

 -- Exception: smtplib.SMTPSenderRefused

     Sender address refused.  In addition to the attributes set by on
     all *note SMTPResponseException: 1da4. exceptions, this sets
     ’sender’ to the string that the SMTP server refused.

 -- Exception: smtplib.SMTPRecipientsRefused

     All recipient addresses refused.  The errors for each recipient are
     accessible through the attribute ‘recipients’, which is a
     dictionary of exactly the same sort as *note SMTP.sendmail(): 1d9f.
     returns.

 -- Exception: smtplib.SMTPDataError

     The SMTP server refused to accept the message data.

 -- Exception: smtplib.SMTPConnectError

     Error occurred during establishment of a connection with the
     server.

 -- Exception: smtplib.SMTPHeloError

     The server refused our ‘HELO’ message.

 -- Exception: smtplib.SMTPAuthenticationError

     SMTP authentication went wrong.  Most probably the server didn’t
     accept the username/password combination provided.

See also
........

RFC 821(4) - Simple Mail Transfer Protocol

     Protocol definition for SMTP. This document covers the model,
     operating procedure, and protocol details for SMTP.

RFC 1869(5) - SMTP Service Extensions

     Definition of the ESMTP extensions for SMTP. This describes a
     framework for extending SMTP with new commands, supporting dynamic
     discovery of the commands provided by the server, and defines a few
     additional commands.

* Menu:

* SMTP Objects:: 
* SMTP Example:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/smtplib.py

   (2) http://tools.ietf.org/html/rfc821.html

   (3) http://tools.ietf.org/html/rfc1869.html

   (4) http://tools.ietf.org/html/rfc821.html

   (5) http://tools.ietf.org/html/rfc1869.html


File: python.info,  Node: SMTP Objects,  Next: SMTP Example,  Up: smtplib --- SMTP protocol client

5.20.12.1 SMTP Objects
......................

An *note SMTP: 1d9c. instance has the following methods:

 -- Method: SMTP.set_debuglevel (level)

     Set the debug output level.  A true value for _level_ results in
     debug messages for connection and for all messages sent to and
     received from the server.

 -- Method: SMTP.docmd (cmd[, argstring])

     Send a command _cmd_ to the server.  The optional argument
     _argstring_ is simply concatenated to the command, separated by a
     space.

     This returns a 2-tuple composed of a numeric response code and the
     actual response line (multiline responses are joined into one long
     line.)

     In normal operation it should not be necessary to call this method
     explicitly.  It is used to implement other methods and may be
     useful for testing private extensions.

     If the connection to the server is lost while waiting for the
     reply, *note SMTPServerDisconnected: 1da3. will be raised.

 -- Method: SMTP.connect ([host[, port]])

     Connect to a host on a given port.  The defaults are to connect to
     the local host at the standard SMTP port (25).  If the hostname
     ends with a colon (‘':'’) followed by a number, that suffix will be
     stripped off and the number interpreted as the port number to use.
     This method is automatically invoked by the constructor if a host
     is specified during instantiation.  Returns a 2-tuple of the
     response code and message sent by the server in its connection
     response.

 -- Method: SMTP.helo ([hostname])

     Identify yourself to the SMTP server using ‘HELO’.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  The message returned by the server is stored as the
     ‘helo_resp’ attribute of the object.

     In normal operation it should not be necessary to call this method
     explicitly.  It will be implicitly called by the *note sendmail():
     1d9f. when necessary.

 -- Method: SMTP.ehlo ([hostname])

     Identify yourself to an ESMTP server using ‘EHLO’.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  Examine the response for ESMTP option and store them for use
     by *note has_extn(): 1db0.  Also sets several informational
     attributes: the message returned by the server is stored as the
     ‘ehlo_resp’ attribute, ‘does_esmtp’ is set to true or false
     depending on whether the server supports ESMTP, and
     ‘esmtp_features’ will be a dictionary containing the names of the
     SMTP service extensions this server supports, and their parameters
     (if any).

     Unless you wish to use *note has_extn(): 1db0. before sending mail,
     it should not be necessary to call this method explicitly.  It will
     be implicitly called by *note sendmail(): 1d9f. when necessary.

 -- Method: SMTP.ehlo_or_helo_if_needed ()

     This method call *note ehlo(): 1daf. and or *note helo(): 1dae. if
     there has been no previous ‘EHLO’ or ‘HELO’ command this session.
     It tries ESMTP ‘EHLO’ first.

     *note SMTPHeloError: 1da8.

          The server didn’t reply properly to the ‘HELO’ greeting.

     New in version 2.6.

 -- Method: SMTP.has_extn (name)

     Return *note True: 3b0. if _name_ is in the set of SMTP service
     extensions returned by the server, *note False: 3b1. otherwise.
     Case is ignored.

 -- Method: SMTP.verify (address)

     Check the validity of an address on this server using SMTP ‘VRFY’.
     Returns a tuple consisting of code 250 and a full RFC 822(1)
     address (including human name) if the user address is valid.
     Otherwise returns an SMTP error code of 400 or greater and an error
     string.

          Note: Many sites disable SMTP ‘VRFY’ in order to foil
          spammers.

 -- Method: SMTP.login (user, password)

     Log in on an SMTP server that requires authentication.  The
     arguments are the username and the password to authenticate with.
     If there has been no previous ‘EHLO’ or ‘HELO’ command this
     session, this method tries ESMTP ‘EHLO’ first.  This method will
     return normally if the authentication was successful, or may raise
     the following exceptions:

     *note SMTPHeloError: 1da8.

          The server didn’t reply properly to the ‘HELO’ greeting.

     *note SMTPAuthenticationError: 1da9.

          The server didn’t accept the username/password combination.

     *note SMTPException: 1da2.

          No suitable authentication method was found.

 -- Method: SMTP.starttls ([keyfile[, certfile]])

     Put the SMTP connection in TLS (Transport Layer Security) mode.
     All SMTP commands that follow will be encrypted.  You should then
     call *note ehlo(): 1daf. again.

     If _keyfile_ and _certfile_ are provided, these are passed to the
     *note socket: 15c. module’s *note ssl(): 160. function.

     If there has been no previous ‘EHLO’ or ‘HELO’ command this
     session, this method tries ESMTP ‘EHLO’ first.

     Changed in version 2.6.

     *note SMTPHeloError: 1da8.

          The server didn’t reply properly to the ‘HELO’ greeting.

     *note SMTPException: 1da2.

          The server does not support the STARTTLS extension.

     Changed in version 2.6.

     *note RuntimeError: 39b.

          SSL/TLS support is not available to your Python interpreter.

 -- Method: SMTP.sendmail (from_addr, to_addrs, msg[, mail_options,
          rcpt_options])

     Send mail.  The required arguments are an RFC 822(2) from-address
     string, a list of RFC 822(3) to-address strings (a bare string will
     be treated as a list with 1 address), and a message string.  The
     caller may pass a list of ESMTP options (such as ‘8bitmime’) to be
     used in ‘MAIL FROM’ commands as _mail_options_.  ESMTP options
     (such as ‘DSN’ commands) that should be used with all ‘RCPT’
     commands can be passed as _rcpt_options_.  (If you need to use
     different ESMTP options to different recipients you have to use the
     low-level methods such as ‘mail()’, ‘rcpt()’ and ‘data()’ to send
     the message.)

          Note: The _from_addr_ and _to_addrs_ parameters are used to
          construct the message envelope used by the transport agents.
          The *note SMTP: 1d9c. does not modify the message headers in
          any way.

     If there has been no previous ‘EHLO’ or ‘HELO’ command this
     session, this method tries ESMTP ‘EHLO’ first.  If the server does
     ESMTP, message size and each of the specified options will be
     passed to it (if the option is in the feature set the server
     advertises).  If ‘EHLO’ fails, ‘HELO’ will be tried and ESMTP
     options suppressed.

     This method will return normally if the mail is accepted for at
     least one recipient.  Otherwise it will raise an exception.  That
     is, if this method does not raise an exception, then someone should
     get your mail.  If this method does not raise an exception, it
     returns a dictionary, with one entry for each recipient that was
     refused.  Each entry contains a tuple of the SMTP error code and
     the accompanying error message sent by the server.

     This method may raise the following exceptions:

     *note SMTPRecipientsRefused: 1da6.

          All recipients were refused.  Nobody got the mail.  The
          ‘recipients’ attribute of the exception object is a dictionary
          with information about the refused recipients (like the one
          returned when at least one recipient was accepted).

     *note SMTPHeloError: 1da8.

          The server didn’t reply properly to the ‘HELO’ greeting.

     *note SMTPSenderRefused: 1da5.

          The server didn’t accept the _from_addr_.

     *note SMTPDataError: 1da7.

          The server replied with an unexpected error code (other than a
          refusal of a recipient).

     Unless otherwise noted, the connection will be open even after an
     exception is raised.

 -- Method: SMTP.quit ()

     Terminate the SMTP session and close the connection.  Return the
     result of the SMTP ‘QUIT’ command.

     Changed in version 2.6: Return a value.

  Low-level methods corresponding to the standard SMTP/ESMTP commands
‘HELP’, ‘RSET’, ‘NOOP’, ‘MAIL’, ‘RCPT’, and ‘DATA’ are also supported.
Normally these do not need to be called directly, so they are not
documented here.  For details, consult the module code.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc822.html

   (2) http://tools.ietf.org/html/rfc822.html

   (3) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: SMTP Example,  Prev: SMTP Objects,  Up: smtplib --- SMTP protocol client

5.20.12.2 SMTP Example
......................

This example prompts the user for addresses needed in the message
envelope (’To’ and ’From’ addresses), and the message to be delivered.
Note that the headers to be included with the message must be included
in the message as entered; this example doesn’t do any processing of the
RFC 822(1) headers.  In particular, the ’To’ and ’From’ addresses must
be included in the message headers explicitly.

     import smtplib

     def prompt(prompt):
         return raw_input(prompt).strip()

     fromaddr = prompt("From: ")
     toaddrs  = prompt("To: ").split()
     print "Enter message, end with ^D (Unix) or ^Z (Windows):"

     # Add the From: and To: headers at the start!
     msg = ("From: %s\r\nTo: %s\r\n\r\n"
            % (fromaddr, ", ".join(toaddrs)))
     while 1:
         try:
             line = raw_input()
         except EOFError:
             break
         if not line:
             break
         msg = msg + line

     print "Message length is " + repr(len(msg))

     server = smtplib.SMTP('localhost')
     server.set_debuglevel(1)
     server.sendmail(fromaddr, toaddrs, msg)
     server.quit()

     Note: In general, you will want to use the *note email: bb.
     package’s features to construct an email message, which you can
     then convert to a string and send via ‘sendmail()’; see *note
     email; Examples: 185a.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: smtpd --- SMTP Server,  Next: telnetlib --- Telnet client,  Prev: smtplib --- SMTP protocol client,  Up: Internet Protocols and Support

5.20.13 ‘smtpd’ — SMTP Server
-----------------------------

*Source code:* Lib/smtpd.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module offers several classes to implement SMTP servers.  One is
a generic do-nothing implementation, which can be overridden, while the
other two offer specific mail-sending strategies.

* Menu:

* SMTPServer Objects:: 
* DebuggingServer Objects:: 
* PureProxy Objects:: 
* MailmanProxy Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/smtpd.py


File: python.info,  Node: SMTPServer Objects,  Next: DebuggingServer Objects,  Up: smtpd --- SMTP Server

5.20.13.1 SMTPServer Objects
............................

 -- Class: smtpd.SMTPServer (localaddr, remoteaddr)

     Create a new *note SMTPServer: 1dba. object, which binds to local
     address _localaddr_.  It will treat _remoteaddr_ as an upstream
     SMTP relayer.  It inherits from *note asyncore.dispatcher: 1798,
     and so will insert itself into *note asyncore: 11.’s event loop on
     instantiation.

      -- Method: process_message (peer, mailfrom, rcpttos, data)

          Raise *note NotImplementedError: 94e. exception.  Override
          this in subclasses to do something useful with this message.
          Whatever was passed in the constructor as _remoteaddr_ will be
          available as the ‘_remoteaddr’ attribute.  _peer_ is the
          remote host’s address, _mailfrom_ is the envelope originator,
          _rcpttos_ are the envelope recipients and _data_ is a string
          containing the contents of the e-mail (which should be in RFC
          2822(1) format).

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2822.html


File: python.info,  Node: DebuggingServer Objects,  Next: PureProxy Objects,  Prev: SMTPServer Objects,  Up: smtpd --- SMTP Server

5.20.13.2 DebuggingServer Objects
.................................

 -- Class: smtpd.DebuggingServer (localaddr, remoteaddr)

     Create a new debugging server.  Arguments are as per *note
     SMTPServer: 1dba.  Messages will be discarded, and printed on
     stdout.


File: python.info,  Node: PureProxy Objects,  Next: MailmanProxy Objects,  Prev: DebuggingServer Objects,  Up: smtpd --- SMTP Server

5.20.13.3 PureProxy Objects
...........................

 -- Class: smtpd.PureProxy (localaddr, remoteaddr)

     Create a new pure proxy server.  Arguments are as per *note
     SMTPServer: 1dba.  Everything will be relayed to _remoteaddr_.
     Note that running this has a good chance to make you into an open
     relay, so please be careful.


File: python.info,  Node: MailmanProxy Objects,  Prev: PureProxy Objects,  Up: smtpd --- SMTP Server

5.20.13.4 MailmanProxy Objects
..............................

 -- Class: smtpd.MailmanProxy (localaddr, remoteaddr)

     Create a new pure proxy server.  Arguments are as per *note
     SMTPServer: 1dba.  Everything will be relayed to _remoteaddr_,
     unless local mailman configurations knows about an address, in
     which case it will be handled via mailman.  Note that running this
     has a good chance to make you into an open relay, so please be
     careful.


File: python.info,  Node: telnetlib --- Telnet client,  Next: uuid --- UUID objects according to RFC 4122,  Prev: smtpd --- SMTP Server,  Up: Internet Protocols and Support

5.20.14 ‘telnetlib’ — Telnet client
-----------------------------------

*Source code:* Lib/telnetlib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note telnetlib: 172. module provides a *note Telnet: 359. class
that implements the Telnet protocol.  See RFC 854(2) for details about
the protocol.  In addition, it provides symbolic constants for the
protocol characters (see below), and for the telnet options.  The
symbolic names of the telnet options follow the definitions in
‘arpa/telnet.h’, with the leading ‘TELOPT_’ removed.  For symbolic names
of options which are traditionally not included in ‘arpa/telnet.h’, see
the module source itself.

  The symbolic constants for the telnet commands are: IAC, DONT, DO,
WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data Mark),
BRK (Break), IP (Interrupt process), AO (Abort output), AYT (Are You
There), EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB
(Subnegotiation Begin).

 -- Class: telnetlib.Telnet ([host[, port[, timeout]]])

     *note Telnet: 359. represents a connection to a Telnet server.  The
     instance is initially not connected by default; the *note open():
     2d6. method must be used to establish a connection.  Alternatively,
     the host name and optional port number can be passed to the
     constructor, to, in which case the connection to the server will be
     established before the constructor returns.  The optional _timeout_
     parameter specifies a timeout in seconds for blocking operations
     like the connection attempt (if not specified, the global default
     timeout setting will be used).

     Do not reopen an already connected instance.

     This class has many ‘read_*()’ methods.  Note that some of them
     raise *note EOFError: 88a. when the end of the connection is read,
     because they can return an empty string for other reasons.  See the
     individual descriptions below.

     Changed in version 2.6: _timeout_ was added.

See also
........

RFC 854(3) - Telnet Protocol Specification

     Definition of the Telnet protocol.

* Menu:

* Telnet Objects:: 
* Telnet Example:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/telnetlib.py

   (2) http://tools.ietf.org/html/rfc854.html

   (3) http://tools.ietf.org/html/rfc854.html


File: python.info,  Node: Telnet Objects,  Next: Telnet Example,  Up: telnetlib --- Telnet client

5.20.14.1 Telnet Objects
........................

*note Telnet: 359. instances have the following methods:

 -- Method: Telnet.read_until (expected[, timeout])

     Read until a given string, _expected_, is encountered or until
     _timeout_ seconds have passed.

     When no match is found, return whatever is available instead,
     possibly the empty string.  Raise *note EOFError: 88a. if the
     connection is closed and no cooked data is available.

 -- Method: Telnet.read_all ()

     Read all data until EOF; block until connection closed.

 -- Method: Telnet.read_some ()

     Read at least one byte of cooked data unless EOF is hit.  Return
     ‘''’ if EOF is hit.  Block if no data is immediately available.

 -- Method: Telnet.read_very_eager ()

     Read everything that can be without blocking in I/O (eager).

     Raise *note EOFError: 88a. if connection closed and no cooked data
     available.  Return ‘''’ if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_eager ()

     Read readily available data.

     Raise *note EOFError: 88a. if connection closed and no cooked data
     available.  Return ‘''’ if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_lazy ()

     Process and return data already in the queues (lazy).

     Raise *note EOFError: 88a. if connection closed and no data
     available.  Return ‘''’ if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_very_lazy ()

     Return any data available in the cooked queue (very lazy).

     Raise *note EOFError: 88a. if connection closed and no data
     available.  Return ‘''’ if no cooked data available otherwise.
     This method never blocks.

 -- Method: Telnet.read_sb_data ()

     Return the data collected between a SB/SE pair (suboption
     begin/end).  The callback should access these data when it was
     invoked with a ‘SE’ command.  This method never blocks.

     New in version 2.3.

 -- Method: Telnet.open (host[, port[, timeout]])

     Connect to a host.  The optional second argument is the port
     number, which defaults to the standard Telnet port (23).  The
     optional _timeout_ parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     Do not try to reopen an already connected instance.

     Changed in version 2.6: _timeout_ was added.

 -- Method: Telnet.msg (msg[, *args])

     Print a debug message when the debug level is ‘>’ 0.  If extra
     arguments are present, they are substituted in the message using
     the standard string formatting operator.

 -- Method: Telnet.set_debuglevel (debuglevel)

     Set the debug level.  The higher the value of _debuglevel_, the
     more debug output you get (on ‘sys.stdout’).

 -- Method: Telnet.close ()

     Close the connection.

 -- Method: Telnet.get_socket ()

     Return the socket object used internally.

 -- Method: Telnet.fileno ()

     Return the file descriptor of the socket object used internally.

 -- Method: Telnet.write (buffer)

     Write a string to the socket, doubling any IAC characters.  This
     can block if the connection is blocked.  May raise *note
     socket.error: 381. if the connection is closed.

 -- Method: Telnet.interact ()

     Interaction function, emulates a very dumb Telnet client.

 -- Method: Telnet.mt_interact ()

     Multithreaded version of *note interact(): 1dd5.

 -- Method: Telnet.expect (list[, timeout])

     Read until one from a list of a regular expressions matches.

     The first argument is a list of regular expressions, either
     compiled (‘regex objects’) or uncompiled (strings).  The optional
     second argument is a timeout, in seconds; the default is to block
     indefinitely.

     Return a tuple of three items: the index in the list of the first
     regular expression that matches; the match object returned; and the
     text read up till and including the match.

     If end of file is found and no text was read, raise *note EOFError:
     88a.  Otherwise, when nothing matches, return ‘(-1, None, text)’
     where _text_ is the text received so far (may be the empty string
     if a timeout happened).

     If a regular expression ends with a greedy match (such as ‘.*’) or
     if more than one expression can match the same input, the results
     are non-deterministic, and may depend on the I/O timing.

 -- Method: Telnet.set_option_negotiation_callback (callback)

     Each time a telnet option is read on the input flow, this
     _callback_ (if set) is called with the following parameters:
     callback(telnet socket, command (DO/DONT/WILL/WONT), option).  No
     other action is done afterwards by telnetlib.


File: python.info,  Node: Telnet Example,  Prev: Telnet Objects,  Up: telnetlib --- Telnet client

5.20.14.2 Telnet Example
........................

A simple example illustrating typical use:

     import getpass
     import sys
     import telnetlib

     HOST = "localhost"
     user = raw_input("Enter your remote account: ")
     password = getpass.getpass()

     tn = telnetlib.Telnet(HOST)

     tn.read_until("login: ")
     tn.write(user + "\n")
     if password:
         tn.read_until("Password: ")
         tn.write(password + "\n")

     tn.write("ls\n")
     tn.write("exit\n")

     print tn.read_all()


File: python.info,  Node: uuid --- UUID objects according to RFC 4122,  Next: urlparse --- Parse URLs into components,  Prev: telnetlib --- Telnet client,  Up: Internet Protocols and Support

5.20.15 ‘uuid’ — UUID objects according to RFC 4122
---------------------------------------------------

New in version 2.5.

  This module provides immutable *note UUID: 1ddd. objects (the *note
UUID: 1ddd. class) and the functions *note uuid1(): 1dde, *note uuid3():
1ddf, *note uuid4(): 1de0, *note uuid5(): 1de1. for generating version
1, 3, 4, and 5 UUIDs as specified in RFC 4122(1).

  If all you want is a unique ID, you should probably call *note
uuid1(): 1dde. or *note uuid4(): 1de0.  Note that *note uuid1(): 1dde.
may compromise privacy since it creates a UUID containing the computer’s
network address.  *note uuid4(): 1de0. creates a random UUID.

 -- Class: uuid.UUID ([hex[, bytes[, bytes_le[, fields[, int[,
          version]]]]]])

     Create a UUID from either a string of 32 hexadecimal digits, a
     string of 16 bytes as the _bytes_ argument, a string of 16 bytes in
     little-endian order as the _bytes_le_ argument, a tuple of six
     integers (32-bit _time_low_, 16-bit _time_mid_, 16-bit
     _time_hi_version_, 8-bit _clock_seq_hi_variant_, 8-bit
     _clock_seq_low_, 48-bit _node_) as the _fields_ argument, or a
     single 128-bit integer as the _int_ argument.  When a string of hex
     digits is given, curly braces, hyphens, and a URN prefix are all
     optional.  For example, these expressions all yield the same UUID:

          UUID('{12345678-1234-5678-1234-567812345678}')
          UUID('12345678123456781234567812345678')
          UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
          UUID(bytes='\x12\x34\x56\x78'*4)
          UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                        '\x12\x34\x56\x78\x12\x34\x56\x78')
          UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
          UUID(int=0x12345678123456781234567812345678)

     Exactly one of _hex_, _bytes_, _bytes_le_, _fields_, or _int_ must
     be given.  The _version_ argument is optional; if given, the
     resulting UUID will have its variant and version number set
     according to RFC 4122, overriding bits in the given _hex_, _bytes_,
     _bytes_le_, _fields_, or _int_.

  *note UUID: 1ddd. instances have these read-only attributes:

 -- Attribute: UUID.bytes

     The UUID as a 16-byte string (containing the six integer fields in
     big-endian byte order).

 -- Attribute: UUID.bytes_le

     The UUID as a 16-byte string (with _time_low_, _time_mid_, and
     _time_hi_version_ in little-endian byte order).

 -- Attribute: UUID.fields

     A tuple of the six integer fields of the UUID, which are also
     available as six individual attributes and two derived attributes:

     Field                              Meaning
                                        
     -----------------------------------------------------------------------
                                        
     ‘time_low’                         the first 32 bits of the UUID
                                        
                                        
     ‘time_mid’                         the next 16 bits of the UUID
                                        
                                        
     ‘time_hi_version’                  the next 16 bits of the UUID
                                        
                                        
     ‘clock_seq_hi_variant’             the next 8 bits of the UUID
                                        
                                        
     ‘clock_seq_low’                    the next 8 bits of the UUID
                                        
                                        
     ‘node’                             the last 48 bits of the UUID
                                        
                                        
     *note time: 17a.                   the 60-bit timestamp
                                        
                                        
     ‘clock_seq’                        the 14-bit sequence number
                                        

 -- Attribute: UUID.hex

     The UUID as a 32-character hexadecimal string.

 -- Attribute: UUID.int

     The UUID as a 128-bit integer.

 -- Attribute: UUID.urn

     The UUID as a URN as specified in RFC 4122.

 -- Attribute: UUID.variant

     The UUID variant, which determines the internal layout of the UUID.
     This will be one of the integer constants *note RESERVED_NCS: 1de9,
     *note RFC_4122: 1dea, *note RESERVED_MICROSOFT: 1deb, or *note
     RESERVED_FUTURE: 1dec.

 -- Attribute: UUID.version

     The UUID version number (1 through 5, meaningful only when the
     variant is *note RFC_4122: 1dea.).

  The *note uuid: 190. module defines the following functions:

 -- Function: uuid.getnode ()

     Get the hardware address as a 48-bit positive integer.  The first
     time this runs, it may launch a separate program, which could be
     quite slow.  If all attempts to obtain the hardware address fail,
     we choose a random 48-bit number with its eighth bit set to 1 as
     recommended in RFC 4122.  "Hardware address" means the MAC address
     of a network interface, and on a machine with multiple network
     interfaces the MAC address of any one of them may be returned.

 -- Function: uuid.uuid1 ([node[, clock_seq]])

     Generate a UUID from a host ID, sequence number, and the current
     time.  If _node_ is not given, *note getnode(): 1dee. is used to
     obtain the hardware address.  If _clock_seq_ is given, it is used
     as the sequence number; otherwise a random 14-bit sequence number
     is chosen.

 -- Function: uuid.uuid3 (namespace, name)

     Generate a UUID based on the MD5 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

 -- Function: uuid.uuid4 ()

     Generate a random UUID.

 -- Function: uuid.uuid5 (namespace, name)

     Generate a UUID based on the SHA-1 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

  The *note uuid: 190. module defines the following namespace
identifiers for use with *note uuid3(): 1ddf. or *note uuid5(): 1de1.

 -- Data: uuid.NAMESPACE_DNS

     When this namespace is specified, the _name_ string is a
     fully-qualified domain name.

 -- Data: uuid.NAMESPACE_URL

     When this namespace is specified, the _name_ string is a URL.

 -- Data: uuid.NAMESPACE_OID

     When this namespace is specified, the _name_ string is an ISO OID.

 -- Data: uuid.NAMESPACE_X500

     When this namespace is specified, the _name_ string is an X.500 DN
     in DER or a text output format.

  The *note uuid: 190. module defines the following constants for the
possible values of the ‘variant’ attribute:

 -- Data: uuid.RESERVED_NCS

     Reserved for NCS compatibility.

 -- Data: uuid.RFC_4122

     Specifies the UUID layout given in RFC 4122(2).

 -- Data: uuid.RESERVED_MICROSOFT

     Reserved for Microsoft compatibility.

 -- Data: uuid.RESERVED_FUTURE

     Reserved for future definition.

See also
........

RFC 4122(3) - A Universally Unique IDentifier (UUID) URN Namespace

     This specification defines a Uniform Resource Name namespace for
     UUIDs, the internal format of UUIDs, and methods of generating
     UUIDs.

* Menu:

* Example: Example<12>. 

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc4122.html

   (2) http://tools.ietf.org/html/rfc4122.html

   (3) http://tools.ietf.org/html/rfc4122.html


File: python.info,  Node: Example<12>,  Up: uuid --- UUID objects according to RFC 4122

5.20.15.1 Example
.................

Here are some examples of typical usage of the *note uuid: 190. module:

     >>> import uuid

     >>> # make a UUID based on the host ID and current time
     >>> uuid.uuid1()
     UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

     >>> # make a UUID using an MD5 hash of a namespace UUID and a name
     >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
     UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

     >>> # make a random UUID
     >>> uuid.uuid4()
     UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

     >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
     >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
     UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

     >>> # make a UUID from a string of hex digits (braces and hyphens ignored)
     >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

     >>> # convert a UUID to a string of hex digits in standard form
     >>> str(x)
     '00010203-0405-0607-0809-0a0b0c0d0e0f'

     >>> # get the raw 16 bytes of the UUID
     >>> x.bytes
     '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

     >>> # make a UUID from a 16-byte string
     >>> uuid.UUID(bytes=x.bytes)
     UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')


File: python.info,  Node: urlparse --- Parse URLs into components,  Next: SocketServer --- A framework for network servers,  Prev: uuid --- UUID objects according to RFC 4122,  Up: Internet Protocols and Support

5.20.16 ‘urlparse’ — Parse URLs into components
-----------------------------------------------

     Note: The *note urlparse: 18a. module is renamed to ‘urllib.parse’
     in Python 3.  The *note 2to3: bdb. tool will automatically adapt
     imports when converting your sources to Python 3.

  *Source code:* Lib/urlparse.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines a standard interface to break Uniform Resource
Locator (URL) strings up in components (addressing scheme, network
location, path etc.), to combine the components back into a URL string,
and to convert a "relative URL" to an absolute URL given a "base URL."

  The module has been designed to match the Internet RFC on Relative
Uniform Resource Locators.  It supports the following URL schemes:
‘file’, ‘ftp’, ‘gopher’, ‘hdl’, ‘http’, ‘https’, ‘imap’, ‘mailto’,
‘mms’, ‘news’, ‘nntp’, ‘prospero’, ‘rsync’, ‘rtsp’, ‘rtspu’, ‘sftp’,
‘shttp’, ‘sip’, ‘sips’, ‘snews’, ‘svn’, ‘svn+ssh’, ‘telnet’, ‘wais’.

  New in version 2.5: Support for the ‘sftp’ and ‘sips’ schemes.

  The *note urlparse: 18a. module defines the following functions:

 -- Function: urlparse.urlparse (urlstring[, scheme[, allow_fragments]])

     Parse a URL into six components, returning a 6-tuple.  This
     corresponds to the general structure of a URL:
     ‘scheme://netloc/path;parameters?query#fragment’.  Each tuple item
     is a string, possibly empty.  The components are not broken up in
     smaller parts (for example, the network location is a single
     string), and % escapes are not expanded.  The delimiters as shown
     above are not part of the result, except for a leading slash in the
     _path_ component, which is retained if present.  For example:

          >>> from urlparse import urlparse
          >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
          >>> o   # doctest: +NORMALIZE_WHITESPACE
          ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                      params='', query='', fragment='')
          >>> o.scheme
          'http'
          >>> o.port
          80
          >>> o.geturl()
          'http://www.cwi.nl:80/%7Eguido/Python.html'

     Following the syntax specifications in RFC 1808(2), urlparse
     recognizes a netloc only if it is properly introduced by ’//’.
     Otherwise the input is presumed to be a relative URL and thus to
     start with a path component.

          >>> from urlparse import urlparse
          >>> urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
          ParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                     params='', query='', fragment='')
          >>> urlparse('www.cwi.nl/%7Eguido/Python.html')
          ParseResult(scheme='', netloc='', path='www.cwi.nl/%7Eguido/Python.html',
                     params='', query='', fragment='')
          >>> urlparse('help/Python.html')
          ParseResult(scheme='', netloc='', path='help/Python.html', params='',
                     query='', fragment='')

     If the _scheme_ argument is specified, it gives the default
     addressing scheme, to be used only if the URL does not specify one.
     The default value for this argument is the empty string.

     If the _allow_fragments_ argument is false, fragment identifiers
     are not allowed, even if the URL’s addressing scheme normally does
     support them.  The default value for this argument is *note True:
     3b0.

     The return value is actually an instance of a subclass of *note
     tuple: 408.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                          Value if not present
                                                                       
     ---------------------------------------------------------------------------------------------
                                                                       
     ‘scheme’               0           URL scheme specifier           empty string
                                                                       
                                                                       
     ‘netloc’               1           Network location part          empty string
                                                                       
                                                                       
     ‘path’                 2           Hierarchical path              empty string
                                                                       
                                                                       
     ‘params’               3           Parameters for last path       empty string
                                        element                        
                                        
                                                                       
     ‘query’                4           Query component                empty string
                                                                       
                                                                       
     ‘fragment’             5           Fragment identifier            empty string
                                                                       
                                                                       
     ‘username’                         User name                      *note None: 39a.
                                                                       
                                                                       
     ‘password’                         Password                       *note None: 39a.
                                                                       
                                                                       
     ‘hostname’                         Host name (lower case)         *note None: 39a.
                                                                       
                                                                       
     ‘port’                             Port number as integer, if     *note None: 39a.
                                        present                        
                                        

     See section *note Results of urlparse() and urlsplit(): 1df8. for
     more information on the result object.

     Changed in version 2.5: Added attributes to return value.

     Changed in version 2.7: Added IPv6 URL parsing capabilities.

 -- Function: urlparse.parse_qs (qs[, keep_blank_values[,
          strict_parsing]])

     Parse a query string given as a string argument (data of type
     ‘application/x-www-form-urlencoded’).  Data are returned as a
     dictionary.  The dictionary keys are the unique query variable
     names and the values are lists of values for each name.

     The optional argument _keep_blank_values_ is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.  A true value indicates that blanks should be
     retained as blank strings.  The default false value indicates that
     blank values are to be ignored and treated as if they were not
     included.

     The optional argument _strict_parsing_ is a flag indicating what to
     do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *note ValueError: 236.
     exception.

     Use the *note urllib.urlencode(): 1383. function to convert such
     dictionaries into query strings.

     New in version 2.6: Copied from the *note cgi: 5c. module.

 -- Function: urlparse.parse_qsl (qs[, keep_blank_values[,
          strict_parsing]])

     Parse a query string given as a string argument (data of type
     ‘application/x-www-form-urlencoded’).  Data are returned as a list
     of name, value pairs.

     The optional argument _keep_blank_values_ is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.  A true value indicates that blanks should be
     retained as blank strings.  The default false value indicates that
     blank values are to be ignored and treated as if they were not
     included.

     The optional argument _strict_parsing_ is a flag indicating what to
     do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *note ValueError: 236.
     exception.

     Use the *note urllib.urlencode(): 1383. function to convert such
     lists of pairs into query strings.

     New in version 2.6: Copied from the *note cgi: 5c. module.

 -- Function: urlparse.urlunparse (parts)

     Construct a URL from a tuple as returned by ‘urlparse()’.  The
     _parts_ argument can be any six-item iterable.  This may result in
     a slightly different, but equivalent URL, if the URL that was
     parsed originally had unnecessary delimiters (for example, a ?
     with an empty query; the RFC states that these are equivalent).

 -- Function: urlparse.urlsplit (urlstring[, scheme[, allow_fragments]])

     This is similar to *note urlparse(): 18a, but does not split the
     params from the URL. This should generally be used instead of *note
     urlparse(): 18a. if the more recent URL syntax allowing parameters
     to be applied to each segment of the _path_ portion of the URL (see
     RFC 2396(3)) is wanted.  A separate function is needed to separate
     the path segments and parameters.  This function returns a 5-tuple:
     (addressing scheme, network location, path, query, fragment
     identifier).

     The return value is actually an instance of a subclass of *note
     tuple: 408.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                         Value if not present
                                                                      
     --------------------------------------------------------------------------------------------
                                                                      
     ‘scheme’               0           URL scheme specifier          empty string
                                                                      
                                                                      
     ‘netloc’               1           Network location part         empty string
                                                                      
                                                                      
     ‘path’                 2           Hierarchical path             empty string
                                                                      
                                                                      
     ‘query’                3           Query component               empty string
                                                                      
                                                                      
     ‘fragment’             4           Fragment identifier           empty string
                                                                      
                                                                      
     ‘username’                         User name                     *note None: 39a.
                                                                      
                                                                      
     ‘password’                         Password                      *note None: 39a.
                                                                      
                                                                      
     ‘hostname’                         Host name (lower case)        *note None: 39a.
                                                                      
                                                                      
     ‘port’                             Port number as integer, if    *note None: 39a.
                                        present                       
                                        

     See section *note Results of urlparse() and urlsplit(): 1df8. for
     more information on the result object.

     New in version 2.2.

     Changed in version 2.5: Added attributes to return value.

 -- Function: urlparse.urlunsplit (parts)

     Combine the elements of a tuple as returned by *note urlsplit():
     26a. into a complete URL as a string.  The _parts_ argument can be
     any five-item iterable.  This may result in a slightly different,
     but equivalent URL, if the URL that was parsed originally had
     unnecessary delimiters (for example, a ?  with an empty query; the
     RFC states that these are equivalent).

     New in version 2.2.

 -- Function: urlparse.urljoin (base, url[, allow_fragments])

     Construct a full ("absolute") URL by combining a "base URL"
     (_base_) with another URL (_url_).  Informally, this uses
     components of the base URL, in particular the addressing scheme,
     the network location and (part of) the path, to provide missing
     components in the relative URL. For example:

          >>> from urlparse import urljoin
          >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
          'http://www.cwi.nl/%7Eguido/FAQ.html'

     The _allow_fragments_ argument has the same meaning and default as
     for *note urlparse(): 18a.

          Note: If _url_ is an absolute URL (that is, starting with ‘//’
          or ‘scheme://’), the _url_’s host name and/or scheme will be
          present in the result.  For example:

          >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html',
          ...         '//www.python.org/%7Eguido')
          'http://www.python.org/%7Eguido'

     If you do not want that behavior, preprocess the _url_ with *note
     urlsplit(): 26a. and *note urlunsplit(): 1dfa, removing possible
     _scheme_ and _netloc_ parts.

 -- Function: urlparse.urldefrag (url)

     If _url_ contains a fragment identifier, returns a modified version
     of _url_ with no fragment identifier, and the fragment identifier
     as a separate string.  If there is no fragment identifier in _url_,
     returns _url_ unmodified and an empty string.

See also
........

RFC 3986(4) - Uniform Resource Identifiers

     This is the current standard (STD66).  Any changes to urlparse
     module should conform to this.  Certain deviations could be
     observed, which are mostly due backward compatiblity purposes and
     for certain de-facto parsing requirements as commonly observed in
     major browsers.

RFC 2732(5) - Format for Literal IPv6 Addresses in URL’s.

     This specifies the parsing requirements of IPv6 URLs.

RFC 2396(6) - Uniform Resource Identifiers (URI): Generic Syntax

     Document describing the generic syntactic requirements for both
     Uniform Resource Names (URNs) and Uniform Resource Locators (URLs).

RFC 2368(7) - The mailto URL scheme.

     Parsing requirements for mailto url schemes.

RFC 1808(8) - Relative Uniform Resource Locators

     This Request For Comments includes the rules for joining an
     absolute and a relative URL, including a fair number of "Abnormal
     Examples" which govern the treatment of border cases.

RFC 1738(9) - Uniform Resource Locators (URL)

     This specifies the formal syntax and semantics of absolute URLs.

* Menu:

* Results of urlparse() and urlsplit(): Results of urlparse and urlsplit. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/urlparse.py

   (2) http://tools.ietf.org/html/rfc1808.html

   (3) http://tools.ietf.org/html/rfc2396.html

   (4) http://tools.ietf.org/html/rfc3986.html

   (5) http://tools.ietf.org/html/rfc2732.html

   (6) http://tools.ietf.org/html/rfc2396.html

   (7) http://tools.ietf.org/html/rfc2368.html

   (8) http://tools.ietf.org/html/rfc1808.html

   (9) http://tools.ietf.org/html/rfc1738.html


File: python.info,  Node: Results of urlparse and urlsplit,  Up: urlparse --- Parse URLs into components

5.20.16.1 Results of ‘urlparse()’ and ‘urlsplit()’
..................................................

The result objects from the *note urlparse(): 18a. and *note urlsplit():
26a. functions are subclasses of the *note tuple: 408. type.  These
subclasses add the attributes described in those functions, as well as
provide an additional method:

 -- Method: ParseResult.geturl ()

     Return the re-combined version of the original URL as a string.
     This may differ from the original URL in that the scheme will
     always be normalized to lower case and empty components may be
     dropped.  Specifically, empty parameters, queries, and fragment
     identifiers will be removed.

     The result of this method is a fixpoint if passed back through the
     original parsing function:

          >>> import urlparse
          >>> url = 'HTTP://www.Python.org/doc/#'

          >>> r1 = urlparse.urlsplit(url)
          >>> r1.geturl()
          'http://www.Python.org/doc/'

          >>> r2 = urlparse.urlsplit(r1.geturl())
          >>> r2.geturl()
          'http://www.Python.org/doc/'

     New in version 2.5.

  The following classes provide the implementations of the parse
results:

 -- Class: urlparse.BaseResult

     Base class for the concrete result classes.  This provides most of
     the attribute definitions.  It does not provide a ‘geturl()’
     method.  It is derived from *note tuple: 408, but does not override
     the *note __init__(): 37c. or *note __new__(): 6f9. methods.

 -- Class: urlparse.ParseResult (scheme, netloc, path, params, query,
          fragment)

     Concrete class for *note urlparse(): 18a. results.  The *note
     __new__(): 6f9. method is overridden to support checking that the
     right number of arguments are passed.

 -- Class: urlparse.SplitResult (scheme, netloc, path, query, fragment)

     Concrete class for *note urlsplit(): 26a. results.  The *note
     __new__(): 6f9. method is overridden to support checking that the
     right number of arguments are passed.


File: python.info,  Node: SocketServer --- A framework for network servers,  Next: BaseHTTPServer --- Basic HTTP server,  Prev: urlparse --- Parse URLs into components,  Up: Internet Protocols and Support

5.20.17 ‘SocketServer’ — A framework for network servers
--------------------------------------------------------

     Note: The *note SocketServer: 15d. module has been renamed to
     ‘socketserver’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  *Source code:* Lib/SocketServer.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note SocketServer: 15d. module simplifies the task of writing
network servers.

  There are four basic server classes: ‘TCPServer’ uses the Internet TCP
protocol, which provides for continuous streams of data between the
client and server.  ‘UDPServer’ uses datagrams, which are discrete
packets of information that may arrive out of order or be lost while in
transit.  The more infrequently used ‘UnixStreamServer’ and
‘UnixDatagramServer’ classes are similar, but use Unix domain sockets;
they’re not available on non-Unix platforms.  For more details on
network programming, consult a book such as W. Richard Steven’s UNIX
Network Programming or Ralph Davis’s Win32 Network Programming.

  These four classes process requests _synchronously_; each request must
be completed before the next request can be started.  This isn’t
suitable if each request takes a long time to complete, because it
requires a lot of computation, or because it returns a lot of data which
the client is slow to process.  The solution is to create a separate
process or thread to handle each request; the ‘ForkingMixIn’ and
‘ThreadingMixIn’ mix-in classes can be used to support asynchronous
behaviour.

  Creating a server requires several steps.  First, you must create a
request handler class by subclassing the ‘BaseRequestHandler’ class and
overriding its ‘handle()’ method; this method will process incoming
requests.  Second, you must instantiate one of the server classes,
passing it the server’s address and the request handler class.  Finally,
call the ‘handle_request()’ or ‘serve_forever()’ method of the server
object to process one or many requests.

  When inheriting from ‘ThreadingMixIn’ for threaded connection
behavior, you should explicitly declare how you want your threads to
behave on an abrupt shutdown.  The ‘ThreadingMixIn’ class defines an
attribute _daemon_threads_, which indicates whether or not the server
should wait for thread termination.  You should set the flag explicitly
if you would like threads to behave autonomously; the default is *note
False: 3b1, meaning that Python will not exit until all threads created
by ‘ThreadingMixIn’ have exited.

  Server classes have the same external methods and attributes, no
matter what network protocol they use.

* Menu:

* Server Creation Notes:: 
* Server Objects:: 
* RequestHandler Objects:: 
* Examples: Examples<15>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/SocketServer.py


File: python.info,  Node: Server Creation Notes,  Next: Server Objects,  Up: SocketServer --- A framework for network servers

5.20.17.1 Server Creation Notes
...............................

There are five classes in an inheritance diagram, four of which
represent synchronous servers of four types:

     +------------+
     | BaseServer |
     +------------+
           |
           v
     +-----------+        +------------------+
     | TCPServer |------->| UnixStreamServer |
     +-----------+        +------------------+
           |
           v
     +-----------+        +--------------------+
     | UDPServer |------->| UnixDatagramServer |
     +-----------+        +--------------------+

  Note that ‘UnixDatagramServer’ derives from ‘UDPServer’, not from
‘UnixStreamServer’ — the only difference between an IP and a Unix stream
server is the address family, which is simply repeated in both Unix
server classes.

  Forking and threading versions of each type of server can be created
using the ‘ForkingMixIn’ and ‘ThreadingMixIn’ mix-in classes.  For
instance, a threading UDP server class is created as follows:

     class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass

  The mix-in class must come first, since it overrides a method defined
in ‘UDPServer’.  Setting the various attributes also change the behavior
of the underlying server mechanism.

  To implement a service, you must derive a class from
‘BaseRequestHandler’ and redefine its ‘handle()’ method.  You can then
run various versions of the service by combining one of the server
classes with your request handler class.  The request handler class must
be different for datagram or stream services.  This can be hidden by
using the handler subclasses ‘StreamRequestHandler’ or
‘DatagramRequestHandler’.

  Of course, you still have to use your head!  For instance, it makes no
sense to use a forking server if the service contains state in memory
that can be modified by different requests, since the modifications in
the child process would never reach the initial state kept in the parent
process and passed to each child.  In this case, you can use a threading
server, but you will probably have to use locks to protect the integrity
of the shared data.

  On the other hand, if you are building an HTTP server where all data
is stored externally (for instance, in the file system), a synchronous
class will essentially render the service "deaf" while one request is
being handled – which may be for a very long time if a client is slow to
receive all the data it has requested.  Here a threading or forking
server is appropriate.

  In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data.  This can be implemented by using a synchronous server
and doing an explicit fork in the request handler class ‘handle()’
method.

  Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor *note fork(): 244. (or
where these are too expensive or inappropriate for the service) is to
maintain an explicit table of partially finished requests and to use
*note select(): 15a3. to decide which request to work on next (or
whether to handle a new incoming request).  This is particularly
important for stream services where each client can potentially be
connected for a long time (if threads or subprocesses cannot be used).
See *note asyncore: 11. for another way to manage this.


File: python.info,  Node: Server Objects,  Next: RequestHandler Objects,  Prev: Server Creation Notes,  Up: SocketServer --- A framework for network servers

5.20.17.2 Server Objects
........................

 -- Class: SocketServer.BaseServer

     This is the superclass of all Server objects in the module.  It
     defines the interface, given below, but does not implement most of
     the methods, which is done in subclasses.

 -- Method: BaseServer.fileno ()

     Return an integer file descriptor for the socket on which the
     server is listening.  This function is most commonly passed to
     *note select.select(): 15a3, to allow monitoring multiple servers
     in the same process.

 -- Method: BaseServer.handle_request ()

     Process a single request.  This function calls the following
     methods in order: *note get_request(): 1e08, *note
     verify_request(): 1e09, and *note process_request(): 1e0a.  If the
     user-provided ‘handle()’ method of the handler class raises an
     exception, the server’s *note handle_error(): 1e0b. method will be
     called.  If no request is received within ‘self.timeout’ seconds,
     *note handle_timeout(): 256. will be called and *note
     handle_request(): 257. will return.

 -- Method: BaseServer.serve_forever (poll_interval=0.5)

     Handle requests until an explicit *note shutdown(): 1e0d. request.
     Poll for shutdown every _poll_interval_ seconds.  Ignores
     ‘self.timeout’.  If you need to do periodic tasks, do them in
     another thread.

 -- Method: BaseServer.shutdown ()

     Tell the *note serve_forever(): 1e0c. loop to stop and wait until
     it does.

     New in version 2.6.

 -- Attribute: BaseServer.address_family

     The family of protocols to which the server’s socket belongs.
     Common examples are *note socket.AF_INET: 171c. and *note
     socket.AF_UNIX: 171b.

 -- Attribute: BaseServer.RequestHandlerClass

     The user-provided request handler class; an instance of this class
     is created for each request.

 -- Attribute: BaseServer.server_address

     The address on which the server is listening.  The format of
     addresses varies depending on the protocol family; see the
     documentation for the socket module for details.  For Internet
     protocols, this is a tuple containing a string giving the address,
     and an integer port number: ‘('127.0.0.1', 80)’, for example.

 -- Attribute: BaseServer.socket

     The socket object on which the server will listen for incoming
     requests.

  The server classes support the following class variables:

 -- Attribute: BaseServer.allow_reuse_address

     Whether the server will allow the reuse of an address.  This
     defaults to *note False: 3b1, and can be set in subclasses to
     change the policy.

 -- Attribute: BaseServer.request_queue_size

     The size of the request queue.  If it takes a long time to process
     a single request, any requests that arrive while the server is busy
     are placed into a queue, up to *note request_queue_size: 1e13.
     requests.  Once the queue is full, further requests from clients
     will get a "Connection denied" error.  The default value is usually
     5, but this can be overridden by subclasses.

 -- Attribute: BaseServer.socket_type

     The type of socket used by the server; *note socket.SOCK_STREAM:
     1dc. and *note socket.SOCK_DGRAM: 1db. are two common values.

 -- Attribute: BaseServer.timeout

     Timeout duration, measured in seconds, or *note None: 39a. if no
     timeout is desired.  If *note handle_request(): 257. receives no
     incoming requests within the timeout period, the *note
     handle_timeout(): 256. method is called.

  There are various server methods that can be overridden by subclasses
of base server classes like ‘TCPServer’; these methods aren’t useful to
external users of the server object.

 -- Method: BaseServer.finish_request ()

     Actually processes the request by instantiating *note
     RequestHandlerClass: 1e0f. and calling its ‘handle()’ method.

 -- Method: BaseServer.get_request ()

     Must accept a request from the socket, and return a 2-tuple
     containing the _new_ socket object to be used to communicate with
     the client, and the client’s address.

 -- Method: BaseServer.handle_error (request, client_address)

     This function is called if the *note RequestHandlerClass: 1e0f.’s
     ‘handle()’ method raises an exception.  The default action is to
     print the traceback to standard output and continue handling
     further requests.

 -- Method: BaseServer.handle_timeout ()

     This function is called when the *note timeout: 255. attribute has
     been set to a value other than *note None: 39a. and the timeout
     period has passed with no requests being received.  The default
     action for forking servers is to collect the status of any child
     processes that have exited, while in threading servers this method
     does nothing.

 -- Method: BaseServer.process_request (request, client_address)

     Calls *note finish_request(): 1e15. to create an instance of the
     *note RequestHandlerClass: 1e0f.  If desired, this function can
     create a new process or thread to handle the request; the
     ‘ForkingMixIn’ and ‘ThreadingMixIn’ classes do this.

 -- Method: BaseServer.server_activate ()

     Called by the server’s constructor to activate the server.  The
     default behavior just ‘listen()’s to the server’s socket.  May be
     overridden.

 -- Method: BaseServer.server_bind ()

     Called by the server’s constructor to bind the socket to the
     desired address.  May be overridden.

 -- Method: BaseServer.verify_request (request, client_address)

     Must return a Boolean value; if the value is *note True: 3b0, the
     request will be processed, and if it’s *note False: 3b1, the
     request will be denied.  This function can be overridden to
     implement access controls for a server.  The default implementation
     always returns *note True: 3b0.


File: python.info,  Node: RequestHandler Objects,  Next: Examples<15>,  Prev: Server Objects,  Up: SocketServer --- A framework for network servers

5.20.17.3 RequestHandler Objects
................................

The request handler class must define a new ‘handle()’ method, and can
override any of the following methods.  A new instance is created for
each request.

 -- Method: RequestHandler.finish ()

     Called after the *note handle(): 1e1a. method to perform any
     clean-up actions required.  The default implementation does
     nothing.  If *note setup(): 1e1b. raises an exception, this
     function will not be called.

 -- Method: RequestHandler.handle ()

     This function must do all the work required to service a request.
     The default implementation does nothing.  Several instance
     attributes are available to it; the request is available as
     ‘self.request’; the client address as ‘self.client_address’; and
     the server instance as ‘self.server’, in case it needs access to
     per-server information.

     The type of ‘self.request’ is different for datagram or stream
     services.  For stream services, ‘self.request’ is a socket object;
     for datagram services, ‘self.request’ is a pair of string and
     socket.  However, this can be hidden by using the request handler
     subclasses ‘StreamRequestHandler’ or ‘DatagramRequestHandler’,
     which override the *note setup(): 1e1b. and *note finish(): 1e19.
     methods, and provide ‘self.rfile’ and ‘self.wfile’ attributes.
     ‘self.rfile’ and ‘self.wfile’ can be read or written, respectively,
     to get the request data or return data to the client.

 -- Method: RequestHandler.setup ()

     Called before the *note handle(): 1e1a. method to perform any
     initialization actions required.  The default implementation does
     nothing.


File: python.info,  Node: Examples<15>,  Prev: RequestHandler Objects,  Up: SocketServer --- A framework for network servers

5.20.17.4 Examples
..................

* Menu:

* SocketServer.TCPServer Example: SocketServer TCPServer Example. 
* SocketServer.UDPServer Example: SocketServer UDPServer Example. 
* Asynchronous Mixins:: 


File: python.info,  Node: SocketServer TCPServer Example,  Next: SocketServer UDPServer Example,  Up: Examples<15>

5.20.17.5 ‘SocketServer.TCPServer’ Example
..........................................

This is the server side:

     import SocketServer

     class MyTCPHandler(SocketServer.BaseRequestHandler):
         """
         The RequestHandler class for our server.

         It is instantiated once per connection to the server, and must
         override the handle() method to implement communication to the
         client.
         """

         def handle(self):
             # self.request is the TCP socket connected to the client
             self.data = self.request.recv(1024).strip()
             print "{} wrote:".format(self.client_address[0])
             print self.data
             # just send back the same data, but upper-cased
             self.request.sendall(self.data.upper())

     if __name__ == "__main__":
         HOST, PORT = "localhost", 9999

         # Create the server, binding to localhost on port 9999
         server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

         # Activate the server; this will keep running until you
         # interrupt the program with Ctrl-C
         server.serve_forever()

  An alternative request handler class that makes use of streams
(file-like objects that simplify communication by providing the standard
file interface):

     class MyTCPHandler(SocketServer.StreamRequestHandler):

         def handle(self):
             # self.rfile is a file-like object created by the handler;
             # we can now use e.g. readline() instead of raw recv() calls
             self.data = self.rfile.readline().strip()
             print "{} wrote:".format(self.client_address[0])
             print self.data
             # Likewise, self.wfile is a file-like object used to write back
             # to the client
             self.wfile.write(self.data.upper())

  The difference is that the ‘readline()’ call in the second handler
will call ‘recv()’ multiple times until it encounters a newline
character, while the single ‘recv()’ call in the first handler will just
return what has been sent from the client in one ‘sendall()’ call.

  This is the client side:

     import socket
     import sys

     HOST, PORT = "localhost", 9999
     data = " ".join(sys.argv[1:])

     # Create a socket (SOCK_STREAM means a TCP socket)
     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

     try:
         # Connect to server and send data
         sock.connect((HOST, PORT))
         sock.sendall(data + "\n")

         # Receive data from the server and shut down
         received = sock.recv(1024)
     finally:
         sock.close()

     print "Sent:     {}".format(data)
     print "Received: {}".format(received)

  The output of the example should look something like this:

  Server:

     $ python TCPServer.py
     127.0.0.1 wrote:
     hello world with TCP
     127.0.0.1 wrote:
     python is nice

  Client:

     $ python TCPClient.py hello world with TCP
     Sent:     hello world with TCP
     Received: HELLO WORLD WITH TCP
     $ python TCPClient.py python is nice
     Sent:     python is nice
     Received: PYTHON IS NICE


File: python.info,  Node: SocketServer UDPServer Example,  Next: Asynchronous Mixins,  Prev: SocketServer TCPServer Example,  Up: Examples<15>

5.20.17.6 ‘SocketServer.UDPServer’ Example
..........................................

This is the server side:

     import SocketServer

     class MyUDPHandler(SocketServer.BaseRequestHandler):
         """
         This class works similar to the TCP handler class, except that
         self.request consists of a pair of data and client socket, and since
         there is no connection the client address must be given explicitly
         when sending data back via sendto().
         """

         def handle(self):
             data = self.request[0].strip()
             socket = self.request[1]
             print "{} wrote:".format(self.client_address[0])
             print data
             socket.sendto(data.upper(), self.client_address)

     if __name__ == "__main__":
         HOST, PORT = "localhost", 9999
         server = SocketServer.UDPServer((HOST, PORT), MyUDPHandler)
         server.serve_forever()

  This is the client side:

     import socket
     import sys

     HOST, PORT = "localhost", 9999
     data = " ".join(sys.argv[1:])

     # SOCK_DGRAM is the socket type to use for UDP sockets
     sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

     # As you can see, there is no connect() call; UDP has no connections.
     # Instead, data is directly sent to the recipient via sendto().
     sock.sendto(data + "\n", (HOST, PORT))
     received = sock.recv(1024)

     print "Sent:     {}".format(data)
     print "Received: {}".format(received)

  The output of the example should look exactly like for the TCP server
example.


File: python.info,  Node: Asynchronous Mixins,  Prev: SocketServer UDPServer Example,  Up: Examples<15>

5.20.17.7 Asynchronous Mixins
.............................

To build asynchronous handlers, use the ‘ThreadingMixIn’ and
‘ForkingMixIn’ classes.

  An example for the ‘ThreadingMixIn’ class:

     import socket
     import threading
     import SocketServer

     class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):

         def handle(self):
             data = self.request.recv(1024)
             cur_thread = threading.current_thread()
             response = "{}: {}".format(cur_thread.name, data)
             self.request.sendall(response)

     class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
         pass

     def client(ip, port, message):
         sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         sock.connect((ip, port))
         try:
             sock.sendall(message)
             response = sock.recv(1024)
             print "Received: {}".format(response)
         finally:
             sock.close()

     if __name__ == "__main__":
         # Port 0 means to select an arbitrary unused port
         HOST, PORT = "localhost", 0

         server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
         ip, port = server.server_address

         # Start a thread with the server -- that thread will then start one
         # more thread for each request
         server_thread = threading.Thread(target=server.serve_forever)
         # Exit the server thread when the main thread terminates
         server_thread.daemon = True
         server_thread.start()
         print "Server loop running in thread:", server_thread.name

         client(ip, port, "Hello World 1")
         client(ip, port, "Hello World 2")
         client(ip, port, "Hello World 3")

         server.shutdown()

  The output of the example should look something like this:

     $ python ThreadedTCPServer.py
     Server loop running in thread: Thread-1
     Received: Thread-2: Hello World 1
     Received: Thread-3: Hello World 2
     Received: Thread-4: Hello World 3

  The ‘ForkingMixIn’ class is used in the same way, except that the
server will spawn a new process for each request.


File: python.info,  Node: BaseHTTPServer --- Basic HTTP server,  Next: SimpleHTTPServer --- Simple HTTP request handler,  Prev: SocketServer --- A framework for network servers,  Up: Internet Protocols and Support

5.20.18 ‘BaseHTTPServer’ — Basic HTTP server
--------------------------------------------

     Note: The *note BaseHTTPServer: 16. module has been merged into
     ‘http.server’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  *Source code:* Lib/BaseHTTPServer.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module defines two classes for implementing HTTP servers (Web
servers).  Usually, this module isn’t used directly, but is used as a
basis for building functioning Web servers.  See the *note
SimpleHTTPServer: 156. and *note CGIHTTPServer: 5d. modules.

  The first class, *note HTTPServer: 1c12, is a ‘SocketServer.TCPServer’
subclass, and therefore implements the *note SocketServer.BaseServer:
1e06. interface.  It creates and listens at the HTTP socket, dispatching
the requests to a handler.  Code to create and run the server looks like
this:

     def run(server_class=BaseHTTPServer.HTTPServer,
             handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
         server_address = ('', 8000)
         httpd = server_class(server_address, handler_class)
         httpd.serve_forever()

 -- Class: BaseHTTPServer.HTTPServer (server_address,
          RequestHandlerClass)

     This class builds on the ‘TCPServer’ class by storing the server
     address as instance variables named ‘server_name’ and
     ‘server_port’.  The server is accessible by the handler, typically
     through the handler’s ‘server’ instance variable.

 -- Class: BaseHTTPServer.BaseHTTPRequestHandler (request,
          client_address, server)

     This class is used to handle the HTTP requests that arrive at the
     server.  By itself, it cannot respond to any actual HTTP requests;
     it must be subclassed to handle each request method (e.g.  GET or
     POST). *note BaseHTTPRequestHandler: 1c11. provides a number of
     class and instance variables, and methods for use by subclasses.

     The handler will parse the request and the headers, then call a
     method specific to the request type.  The method name is
     constructed from the request.  For example, for the request method
     ‘SPAM’, the ‘do_SPAM()’ method will be called with no arguments.
     All of the relevant information is stored in instance variables of
     the handler.  Subclasses should not need to override or extend the
     *note __init__(): 37c. method.

     *note BaseHTTPRequestHandler: 1c11. has the following instance
     variables:

      -- Attribute: client_address

          Contains a tuple of the form ‘(host, port)’ referring to the
          client’s address.

      -- Attribute: server

          Contains the server instance.

      -- Attribute: command

          Contains the command (request type).  For example, ‘'GET'’.

      -- Attribute: path

          Contains the request path.

      -- Attribute: request_version

          Contains the version string from the request.  For example,
          ‘'HTTP/1.0'’.

      -- Attribute: headers

          Holds an instance of the class specified by the *note
          MessageClass: 1e28. class variable.  This instance parses and
          manages the headers in the HTTP request.

      -- Attribute: rfile

          Contains an input stream, positioned at the start of the
          optional input data.

      -- Attribute: wfile

          Contains the output stream for writing a response back to the
          client.  Proper adherence to the HTTP protocol must be used
          when writing to this stream.

     *note BaseHTTPRequestHandler: 1c11. has the following class
     variables:

      -- Attribute: server_version

          Specifies the server software version.  You may want to
          override this.  The format is multiple whitespace-separated
          strings, where each string is of the form name[/version].  For
          example, ‘'BaseHTTP/0.2'’.

      -- Attribute: sys_version

          Contains the Python system version, in a form usable by the
          *note version_string: 1e2d. method and the *note
          server_version: 1e2b. class variable.  For example,
          ‘'Python/1.4'’.

      -- Attribute: error_message_format

          Specifies a format string for building an error response to
          the client.  It uses parenthesized, keyed format specifiers,
          so the format operand must be a dictionary.  The _code_ key
          should be an integer, specifying the numeric HTTP error code
          value.  _message_ should be a string containing a (detailed)
          error message of what occurred, and _explain_ should be an
          explanation of the error code number.  Default _message_ and
          _explain_ values can found in the _responses_ class variable.

      -- Attribute: error_content_type

          Specifies the Content-Type HTTP header of error responses sent
          to the client.  The default value is ‘'text/html'’.

          New in version 2.6: Previously, the content type was always
          ‘'text/html'’.

      -- Attribute: protocol_version

          This specifies the HTTP protocol version used in responses.
          If set to ‘'HTTP/1.1'’, the server will permit HTTP persistent
          connections; however, your server _must_ then include an
          accurate ‘Content-Length’ header (using *note send_header():
          1e31.) in all of its responses to clients.  For backwards
          compatibility, the setting defaults to ‘'HTTP/1.0'’.

      -- Attribute: MessageClass

          Specifies a *note rfc822.Message: 189f.-like class to parse
          HTTP headers.  Typically, this is not overridden, and it
          defaults to *note mimetools.Message: 1915.

      -- Attribute: responses

          This variable contains a mapping of error code integers to
          two-element tuples containing a short and long message.  For
          example, ‘{code: (shortmessage, longmessage)}’.  The
          _shortmessage_ is usually used as the _message_ key in an
          error response, and _longmessage_ as the _explain_ key (see
          the *note error_message_format: 1e2e. class variable).

     A *note BaseHTTPRequestHandler: 1c11. instance has the following
     methods:

      -- Method: handle ()

          Calls *note handle_one_request(): 1e33. once (or, if
          persistent connections are enabled, multiple times) to handle
          incoming HTTP requests.  You should never need to override it;
          instead, implement appropriate ‘do_*()’ methods.

      -- Method: handle_one_request ()

          This method will parse and dispatch the request to the
          appropriate ‘do_*()’ method.  You should never need to
          override it.

      -- Method: send_error (code[, message])

          Sends and logs a complete error reply to the client.  The
          numeric _code_ specifies the HTTP error code, with _message_
          as optional, more specific text.  A complete set of headers is
          sent, followed by text composed using the *note
          error_message_format: 1e2e. class variable.

      -- Method: send_response (code[, message])

          Sends a response header and logs the accepted request.  The
          HTTP response line is sent, followed by _Server_ and _Date_
          headers.  The values for these two headers are picked up from
          the *note version_string(): 1e2d. and *note
          date_time_string(): 1e36. methods, respectively.

      -- Method: send_header (keyword, value)

          Writes a specific HTTP header to the output stream.  _keyword_
          should specify the header keyword, with _value_ specifying its
          value.

      -- Method: end_headers ()

          Sends a blank line, indicating the end of the HTTP headers in
          the response.

      -- Method: log_request ([code[, size]])

          Logs an accepted (successful) request.  _code_ should specify
          the numeric HTTP code associated with the response.  If a size
          of the response is available, then it should be passed as the
          _size_ parameter.

      -- Method: log_error (...)

          Logs an error when a request cannot be fulfilled.  By default,
          it passes the message to *note log_message(): 1e3a, so it
          takes the same arguments (_format_ and additional values).

      -- Method: log_message (format, ...)

          Logs an arbitrary message to ‘sys.stderr’.  This is typically
          overridden to create custom error logging mechanisms.  The
          _format_ argument is a standard printf-style format string,
          where the additional arguments to *note log_message(): 1e3a.
          are applied as inputs to the formatting.  The client ip
          address and current date and time are prefixed to every
          message logged.

      -- Method: version_string ()

          Returns the server software’s version string.  This is a
          combination of the *note server_version: 1e2b. and *note
          sys_version: 1e2c. class variables.

      -- Method: date_time_string ([timestamp])

          Returns the date and time given by _timestamp_ (which must be
          in the format returned by *note time.time(): 461.), formatted
          for a message header.  If _timestamp_ is omitted, it uses the
          current date and time.

          The result looks like ‘'Sun, 06 Nov 1994 08:49:37 GMT'’.

          New in version 2.5: The _timestamp_ parameter.

      -- Method: log_date_time_string ()

          Returns the current date and time, formatted for logging.

      -- Method: address_string ()

          Returns the client address, formatted for logging.  A name
          lookup is performed on the client’s IP address.

* Menu:

* More examples:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/BaseHTTPServer.py


File: python.info,  Node: More examples,  Up: BaseHTTPServer --- Basic HTTP server

5.20.18.1 More examples
.......................

To create a server that doesn’t run forever, but until some condition is
fulfilled:

     def run_while_true(server_class=BaseHTTPServer.HTTPServer,
                        handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
         """
         This assumes that keep_running() is a function of no arguments which
         is tested initially and after each request.  If its return value
         is true, the server continues.
         """
         server_address = ('', 8000)
         httpd = server_class(server_address, handler_class)
         while keep_running():
             httpd.handle_request()

See also
........

Module *note CGIHTTPServer: 5d.

     Extended request handler that supports CGI scripts.

Module *note SimpleHTTPServer: 156.

     Basic request handler that limits response to files actually under
     the document root.


File: python.info,  Node: SimpleHTTPServer --- Simple HTTP request handler,  Next: CGIHTTPServer --- CGI-capable HTTP request handler,  Prev: BaseHTTPServer --- Basic HTTP server,  Up: Internet Protocols and Support

5.20.19 ‘SimpleHTTPServer’ — Simple HTTP request handler
--------------------------------------------------------

     Note: The *note SimpleHTTPServer: 156. module has been merged into
     ‘http.server’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  The *note SimpleHTTPServer: 156. module defines a single class, *note
SimpleHTTPRequestHandler: 1e40, which is interface-compatible with *note
BaseHTTPServer.BaseHTTPRequestHandler: 1c11.

  The *note SimpleHTTPServer: 156. module defines the following class:

 -- Class: SimpleHTTPServer.SimpleHTTPRequestHandler (request,
          client_address, server)

     This class serves files from the current directory and below,
     directly mapping the directory structure to HTTP requests.

     A lot of the work, such as parsing the request, is done by the base
     class *note BaseHTTPServer.BaseHTTPRequestHandler: 1c11.  This
     class implements the *note do_GET(): 1e41. and *note do_HEAD():
     1e42. functions.

     The following are defined as class-level attributes of *note
     SimpleHTTPRequestHandler: 1e40.:

      -- Attribute: server_version

     This will be ‘"SimpleHTTP/" + __version__’, where ‘__version__’ is
     defined at the module level.

      -- Attribute: extensions_map

          A dictionary mapping suffixes into MIME types.  The default is
          signified by an empty string, and is considered to be
          ‘application/octet-stream’.  The mapping is used
          case-insensitively, and so should contain only lower-cased
          keys.

     The *note SimpleHTTPRequestHandler: 1e40. class defines the
     following methods:

      -- Method: do_HEAD ()

          This method serves the ‘'HEAD'’ request type: it sends the
          headers it would send for the equivalent ‘GET’ request.  See
          the *note do_GET(): 1e41. method for a more complete
          explanation of the possible headers.

      -- Method: do_GET ()

          The request is mapped to a local file by interpreting the
          request as a path relative to the current working directory.

          If the request was mapped to a directory, the directory is
          checked for a file named ‘index.html’ or ‘index.htm’ (in that
          order).  If found, the file’s contents are returned; otherwise
          a directory listing is generated by calling the
          ‘list_directory()’ method.  This method uses *note
          os.listdir(): 2d2. to scan the directory, and returns a ‘404’
          error response if the ‘listdir()’ fails.

          If the request was mapped to a file, it is opened and the
          contents are returned.  Any *note IOError: 1fa. exception in
          opening the requested file is mapped to a ‘404’, ‘'File not
          found'’ error.  Otherwise, the content type is guessed by
          calling the ‘guess_type()’ method, which in turn uses the
          _extensions_map_ variable.

          A ‘'Content-type:'’ header with the guessed content type is
          output, followed by a ‘'Content-Length:'’ header with the
          file’s size and a ‘'Last-Modified:'’ header with the file’s
          modification time.

          Then follows a blank line signifying the end of the headers,
          and then the contents of the file are output.  If the file’s
          MIME type starts with ‘text/’ the file is opened in text mode;
          otherwise binary mode is used.

          The *note test(): 175. function in the *note SimpleHTTPServer:
          156. module is an example which creates a server using the
          *note SimpleHTTPRequestHandler: 1e40. as the Handler.

          New in version 2.5: The ‘'Last-Modified'’ header.

  The *note SimpleHTTPServer: 156. module can be used in the following
manner in order to set up a very basic web server serving files relative
to the current directory.

     import SimpleHTTPServer
     import SocketServer

     PORT = 8000

     Handler = SimpleHTTPServer.SimpleHTTPRequestHandler

     httpd = SocketServer.TCPServer(("", PORT), Handler)

     print "serving at port", PORT
     httpd.serve_forever()

  The *note SimpleHTTPServer: 156. module can also be invoked directly
using the *note -m: 2fb. switch of the interpreter with a ‘port number’
argument.  Similar to the previous example, this serves the files
relative to the current directory.

     python -m SimpleHTTPServer 8000

See also
........

Module *note BaseHTTPServer: 16.

     Base class implementation for Web server and request handler.


File: python.info,  Node: CGIHTTPServer --- CGI-capable HTTP request handler,  Next: cookielib --- Cookie handling for HTTP clients,  Prev: SimpleHTTPServer --- Simple HTTP request handler,  Up: Internet Protocols and Support

5.20.20 ‘CGIHTTPServer’ — CGI-capable HTTP request handler
----------------------------------------------------------

     Note: The *note CGIHTTPServer: 5d. module has been merged into
     ‘http.server’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  The *note CGIHTTPServer: 5d. module defines a request-handler class,
interface compatible with *note BaseHTTPServer.BaseHTTPRequestHandler:
1c11. and inherits behavior from *note
SimpleHTTPServer.SimpleHTTPRequestHandler: 1e40. but can also run CGI
scripts.

     Note: This module can run CGI scripts on Unix and Windows systems.

     Note: CGI scripts run by the *note CGIHTTPRequestHandler: 1e47.
     class cannot execute redirects (HTTP code 302), because code 200
     (script output follows) is sent prior to execution of the CGI
     script.  This pre-empts the status code.

  The *note CGIHTTPServer: 5d. module defines the following class:

 -- Class: CGIHTTPServer.CGIHTTPRequestHandler (request, client_address,
          server)

     This class is used to serve either files or output of CGI scripts
     from the current directory and below.  Note that mapping HTTP
     hierarchic structure to local directory structure is exactly as in
     *note SimpleHTTPServer.SimpleHTTPRequestHandler: 1e40.

     The class will however, run the CGI script, instead of serving it
     as a file, if it guesses it to be a CGI script.  Only
     directory-based CGI are used — the other common server
     configuration is to treat special extensions as denoting CGI
     scripts.

     The ‘do_GET()’ and ‘do_HEAD()’ functions are modified to run CGI
     scripts and serve the output, instead of serving files, if the
     request leads to somewhere below the ‘cgi_directories’ path.

     The *note CGIHTTPRequestHandler: 1e47. defines the following data
     member:

      -- Attribute: cgi_directories

          This defaults to ‘['/cgi-bin', '/htbin']’ and describes
          directories to treat as containing CGI scripts.

     The *note CGIHTTPRequestHandler: 1e47. defines the following
     methods:

      -- Method: do_POST ()

          This method serves the ‘'POST'’ request type, only allowed for
          CGI scripts.  Error 501, "Can only POST to CGI scripts", is
          output when trying to POST to a non-CGI url.

  Note that CGI scripts will be run with UID of user nobody, for
security reasons.  Problems with the CGI script will be translated to
error 403.

  For example usage, see the implementation of the *note test(): 175.
function.

See also
........

Module *note BaseHTTPServer: 16.

     Base class implementation for Web server and request handler.


File: python.info,  Node: cookielib --- Cookie handling for HTTP clients,  Next: Cookie --- HTTP state management,  Prev: CGIHTTPServer --- CGI-capable HTTP request handler,  Up: Internet Protocols and Support

5.20.21 ‘cookielib’ — Cookie handling for HTTP clients
------------------------------------------------------

     Note: The *note cookielib: 70. module has been renamed to
     ‘http.cookiejar’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  New in version 2.4.

  *Source code:* Lib/cookielib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note cookielib: 70. module defines classes for automatic handling
of HTTP cookies.  It is useful for accessing web sites that require
small pieces of data – _cookies_ – to be set on the client machine by an
HTTP response from a web server, and then returned to the server in
later HTTP requests.

  Both the regular Netscape cookie protocol and the protocol defined by
RFC 2965(2) are handled.  RFC 2965 handling is switched off by default.
RFC 2109(3) cookies are parsed as Netscape cookies and subsequently
treated either as Netscape or RFC 2965 cookies according to the ’policy’
in effect.  Note that the great majority of cookies on the Internet are
Netscape cookies.  *note cookielib: 70. attempts to follow the de-facto
Netscape cookie protocol (which differs substantially from that set out
in the original Netscape specification), including taking note of the
‘max-age’ and ‘port’ cookie-attributes introduced with RFC 2965.

     Note: The various named parameters found in ‘Set-Cookie’ and
     ‘Set-Cookie2’ headers (eg.  ‘domain’ and ‘expires’) are
     conventionally referred to as _attributes_.  To distinguish them
     from Python attributes, the documentation for this module uses the
     term _cookie-attribute_ instead.

  The module defines the following exception:

 -- Exception: cookielib.LoadError

     Instances of *note FileCookieJar: 1e4d. raise this exception on
     failure to load cookies from a file.

          Note: For backwards-compatibility with Python 2.4 (which
          raised an *note IOError: 1fa.), *note LoadError: 1e4c. is a
          subclass of *note IOError: 1fa.

  The following classes are provided:

 -- Class: cookielib.CookieJar (policy=None)

     _policy_ is an object implementing the *note CookiePolicy: 1e4e.
     interface.

     The *note CookieJar: 1c9d. class stores HTTP cookies.  It extracts
     cookies from HTTP requests, and returns them in HTTP responses.
     *note CookieJar: 1c9d. instances automatically expire contained
     cookies when necessary.  Subclasses are also responsible for
     storing and retrieving cookies from a file or database.

 -- Class: cookielib.FileCookieJar (filename, delayload=None,
          policy=None)

     _policy_ is an object implementing the *note CookiePolicy: 1e4e.
     interface.  For the other arguments, see the documentation for the
     corresponding attributes.

     A *note CookieJar: 1c9d. which can load cookies from, and perhaps
     save cookies to, a file on disk.  Cookies are *NOT* loaded from the
     named file until either the *note load(): 1e4f. or *note revert():
     1e50. method is called.  Subclasses of this class are documented in
     section *note FileCookieJar subclasses and co-operation with web
     browsers: 1e51.

 -- Class: cookielib.CookiePolicy

     This class is responsible for deciding whether each cookie should
     be accepted from / returned to the server.

 -- Class: cookielib.DefaultCookiePolicy (blocked_domains=None,
          allowed_domains=None, netscape=True, rfc2965=False,
          rfc2109_as_netscape=None, hide_cookie2=False,
          strict_domain=False, strict_rfc2965_unverifiable=True,
          strict_ns_unverifiable=False,
          strict_ns_domain=DefaultCookiePolicy.DomainLiberal,
          strict_ns_set_initial_dollar=False, strict_ns_set_path=False)

     Constructor arguments should be passed as keyword arguments only.
     _blocked_domains_ is a sequence of domain names that we never
     accept cookies from, nor return cookies to.  _allowed_domains_ if
     not *note None: 39a, this is a sequence of the only domains for
     which we accept and return cookies.  For all other arguments, see
     the documentation for *note CookiePolicy: 1e4e. and *note
     DefaultCookiePolicy: 1e52. objects.

     *note DefaultCookiePolicy: 1e52. implements the standard accept /
     reject rules for Netscape and RFC 2965 cookies.  By default, RFC
     2109 cookies (ie.  cookies received in a ‘Set-Cookie’ header with a
     version cookie-attribute of 1) are treated according to the RFC
     2965 rules.  However, if RFC 2965 handling is turned off or *note
     rfc2109_as_netscape: 1e53. is ‘True’, RFC 2109 cookies are
     ’downgraded’ by the *note CookieJar: 1c9d. instance to Netscape
     cookies, by setting the ‘version’ attribute of the *note Cookie:
     6f. instance to 0.  *note DefaultCookiePolicy: 1e52. also provides
     some parameters to allow some fine-tuning of policy.

 -- Class: cookielib.Cookie

     This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It
     is not expected that users of *note cookielib: 70. construct their
     own *note Cookie: 6f. instances.  Instead, if necessary, call
     ‘make_cookies()’ on a *note CookieJar: 1c9d. instance.

See also
........

Module *note urllib2: 189.

     URL opening with automatic cookie handling.

Module *note Cookie: 6f.

     HTTP cookie classes, principally useful for server-side code.  The
     *note cookielib: 70. and *note Cookie: 6f. modules do not depend on
     each other.

‘http://wp.netscape.com/newsref/std/cookie_spec.html’

     The specification of the original Netscape cookie protocol.  Though
     this is still the dominant protocol, the ’Netscape cookie protocol’
     implemented by all the major browsers (and *note cookielib: 70.)
     only bears a passing resemblance to the one sketched out in
     ‘cookie_spec.html’.

RFC 2109(4) - HTTP State Management Mechanism

     Obsoleted by RFC 2965.  Uses ‘Set-Cookie’ with version=1.

RFC 2965(5) - HTTP State Management Mechanism

     The Netscape protocol with the bugs fixed.  Uses ‘Set-Cookie2’ in
     place of ‘Set-Cookie’.  Not widely used.

‘http://kristol.org/cookie/errata.html’

     Unfinished errata to RFC 2965.

  RFC 2964(6) - Use of HTTP State Management

* Menu:

* CookieJar and FileCookieJar Objects:: 
* FileCookieJar subclasses and co-operation with web browsers:: 
* CookiePolicy Objects:: 
* DefaultCookiePolicy Objects:: 
* Cookie Objects:: 
* Examples: Examples<16>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/cookielib.py

   (2) http://tools.ietf.org/html/rfc2965.html

   (3) http://tools.ietf.org/html/rfc2109.html

   (4) http://tools.ietf.org/html/rfc2109.html

   (5) http://tools.ietf.org/html/rfc2965.html

   (6) http://tools.ietf.org/html/rfc2964.html


File: python.info,  Node: CookieJar and FileCookieJar Objects,  Next: FileCookieJar subclasses and co-operation with web browsers,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.1 CookieJar and FileCookieJar Objects
.............................................

*note CookieJar: 1c9d. objects support the *note iterator: 87f. protocol
for iterating over contained *note Cookie: 6f. objects.

  *note CookieJar: 1c9d. has the following methods:

 -- Method: CookieJar.add_cookie_header (request)

     Add correct ‘Cookie’ header to _request_.

     If policy allows (ie.  the ‘rfc2965’ and ‘hide_cookie2’ attributes
     of the *note CookieJar: 1c9d.’s *note CookiePolicy: 1e4e. instance
     are true and false respectively), the ‘Cookie2’ header is also
     added when appropriate.

     The _request_ object (usually a *note urllib2.Request: 1c54.
     instance) must support the methods ‘get_full_url()’, ‘get_host()’,
     ‘get_type()’, ‘unverifiable()’, ‘get_origin_req_host()’,
     ‘has_header()’, ‘get_header()’, ‘header_items()’, and
     ‘add_unredirected_header()’,as documented by *note urllib2: 189.

 -- Method: CookieJar.extract_cookies (response, request)

     Extract cookies from HTTP _response_ and store them in the *note
     CookieJar: 1c9d, where allowed by policy.

     The *note CookieJar: 1c9d. will look for allowable ‘Set-Cookie’ and
     ‘Set-Cookie2’ headers in the _response_ argument, and store cookies
     as appropriate (subject to the *note CookiePolicy.set_ok(): 1e59.
     method’s approval).

     The _response_ object (usually the result of a call to *note
     urllib2.urlopen(): 35c, or similar) should support an ‘info()’
     method, which returns an object with a ‘getallmatchingheaders()’
     method (usually a *note mimetools.Message: 1915. instance).

     The _request_ object (usually a *note urllib2.Request: 1c54.
     instance) must support the methods ‘get_full_url()’, ‘get_host()’,
     ‘unverifiable()’, and ‘get_origin_req_host()’, as documented by
     *note urllib2: 189.  The request is used to set default values for
     cookie-attributes as well as for checking that the cookie is
     allowed to be set.

 -- Method: CookieJar.set_policy (policy)

     Set the *note CookiePolicy: 1e4e. instance to be used.

 -- Method: CookieJar.make_cookies (response, request)

     Return sequence of *note Cookie: 6f. objects extracted from
     _response_ object.

     See the documentation for *note extract_cookies(): 1e58. for the
     interfaces required of the _response_ and _request_ arguments.

 -- Method: CookieJar.set_cookie_if_ok (cookie, request)

     Set a *note Cookie: 6f. if policy says it’s OK to do so.

 -- Method: CookieJar.set_cookie (cookie)

     Set a *note Cookie: 6f, without checking with policy to see whether
     or not it should be set.

 -- Method: CookieJar.clear ([domain[, path[, name]]])

     Clear some cookies.

     If invoked without arguments, clear all cookies.  If given a single
     argument, only cookies belonging to that _domain_ will be removed.
     If given two arguments, cookies belonging to the specified _domain_
     and URL _path_ are removed.  If given three arguments, then the
     cookie with the specified _domain_, _path_ and _name_ is removed.

     Raises *note KeyError: 205. if no matching cookie exists.

 -- Method: CookieJar.clear_session_cookies ()

     Discard all session cookies.

     Discards all contained cookies that have a true ‘discard’ attribute
     (usually because they had either no ‘max-age’ or ‘expires’
     cookie-attribute, or an explicit ‘discard’ cookie-attribute).  For
     interactive browsers, the end of a session usually corresponds to
     closing the browser window.

     Note that the ‘save()’ method won’t save session cookies anyway,
     unless you ask otherwise by passing a true _ignore_discard_
     argument.

  *note FileCookieJar: 1e4d. implements the following additional
methods:

 -- Method: FileCookieJar.save (filename=None, ignore_discard=False,
          ignore_expires=False)

     Save cookies to a file.

     This base class raises *note NotImplementedError: 94e.  Subclasses
     may leave this method unimplemented.

     _filename_ is the name of file in which to save cookies.  If
     _filename_ is not specified, ‘self.filename’ is used (whose default
     is the value passed to the constructor, if any); if ‘self.filename’
     is *note None: 39a, *note ValueError: 236. is raised.

     _ignore_discard_: save even cookies set to be discarded.
     _ignore_expires_: save even cookies that have expired

     The file is overwritten if it already exists, thus wiping all the
     cookies it contains.  Saved cookies can be restored later using the
     *note load(): 1e4f. or *note revert(): 1e50. methods.

 -- Method: FileCookieJar.load (filename=None, ignore_discard=False,
          ignore_expires=False)

     Load cookies from a file.

     Old cookies are kept unless overwritten by newly loaded ones.

     Arguments are as for *note save(): 1e60.

     The named file must be in the format understood by the class, or
     *note LoadError: 1e4c. will be raised.  Also, *note IOError: 1fa.
     may be raised, for example if the file does not exist.

          Note: For backwards-compatibility with Python 2.4 (which
          raised an *note IOError: 1fa.), *note LoadError: 1e4c. is a
          subclass of *note IOError: 1fa.

 -- Method: FileCookieJar.revert (filename=None, ignore_discard=False,
          ignore_expires=False)

     Clear all cookies and reload cookies from a saved file.

     *note revert(): 1e50. can raise the same exceptions as *note
     load(): 1e4f.  If there is a failure, the object’s state will not
     be altered.

  *note FileCookieJar: 1e4d. instances have the following public
attributes:

 -- Attribute: FileCookieJar.filename

     Filename of default file in which to keep cookies.  This attribute
     may be assigned to.

 -- Attribute: FileCookieJar.delayload

     If true, load cookies lazily from disk.  This attribute should not
     be assigned to.  This is only a hint, since this only affects
     performance, not behaviour (unless the cookies on disk are
     changing).  A *note CookieJar: 1c9d. object may ignore it.  None of
     the *note FileCookieJar: 1e4d. classes included in the standard
     library lazily loads cookies.


File: python.info,  Node: FileCookieJar subclasses and co-operation with web browsers,  Next: CookiePolicy Objects,  Prev: CookieJar and FileCookieJar Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.2 FileCookieJar subclasses and co-operation with web browsers
.....................................................................

The following *note CookieJar: 1c9d. subclasses are provided for reading
and writing.

 -- Class: cookielib.MozillaCookieJar (filename, delayload=None,
          policy=None)

     A *note FileCookieJar: 1e4d. that can load from and save cookies to
     disk in the Mozilla ‘cookies.txt’ file format (which is also used
     by the Lynx and Netscape browsers).

          Note: Version 3 of the Firefox web browser no longer writes
          cookies in the ‘cookies.txt’ file format.

          Note: This loses information about RFC 2965 cookies, and also
          about newer or non-standard cookie-attributes such as ‘port’.

          Warning: Back up your cookies before saving if you have
          cookies whose loss / corruption would be inconvenient (there
          are some subtleties which may lead to slight changes in the
          file over a load / save round-trip).

     Also note that cookies saved while Mozilla is running will get
     clobbered by Mozilla.

 -- Class: cookielib.LWPCookieJar (filename, delayload=None,
          policy=None)

     A *note FileCookieJar: 1e4d. that can load from and save cookies to
     disk in format compatible with the libwww-perl library’s
     ‘Set-Cookie3’ file format.  This is convenient if you want to store
     cookies in a human-readable file.


File: python.info,  Node: CookiePolicy Objects,  Next: DefaultCookiePolicy Objects,  Prev: FileCookieJar subclasses and co-operation with web browsers,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.3 CookiePolicy Objects
..............................

Objects implementing the *note CookiePolicy: 1e4e. interface have the
following methods:

 -- Method: CookiePolicy.set_ok (cookie, request)

     Return boolean value indicating whether cookie should be accepted
     from server.

     _cookie_ is a *note cookielib.Cookie: 1e54. instance.  _request_ is
     an object implementing the interface defined by the documentation
     for *note CookieJar.extract_cookies(): 1e58.

 -- Method: CookiePolicy.return_ok (cookie, request)

     Return boolean value indicating whether cookie should be returned
     to server.

     _cookie_ is a *note cookielib.Cookie: 1e54. instance.  _request_ is
     an object implementing the interface defined by the documentation
     for *note CookieJar.add_cookie_header(): 1e57.

 -- Method: CookiePolicy.domain_return_ok (domain, request)

     Return false if cookies should not be returned, given cookie
     domain.

     This method is an optimization.  It removes the need for checking
     every cookie with a particular domain (which might involve reading
     many files).  Returning true from *note domain_return_ok(): 1e69.
     and *note path_return_ok(): 1e6a. leaves all the work to *note
     return_ok(): 1e68.

     If *note domain_return_ok(): 1e69. returns true for the cookie
     domain, *note path_return_ok(): 1e6a. is called for the cookie
     path.  Otherwise, *note path_return_ok(): 1e6a. and *note
     return_ok(): 1e68. are never called for that cookie domain.  If
     *note path_return_ok(): 1e6a. returns true, *note return_ok():
     1e68. is called with the *note Cookie: 6f. object itself for a full
     check.  Otherwise, *note return_ok(): 1e68. is never called for
     that cookie path.

     Note that *note domain_return_ok(): 1e69. is called for every
     _cookie_ domain, not just for the _request_ domain.  For example,
     the function might be called with both ‘".example.com"’ and
     ‘"www.example.com"’ if the request domain is ‘"www.example.com"’.
     The same goes for *note path_return_ok(): 1e6a.

     The _request_ argument is as documented for *note return_ok():
     1e68.

 -- Method: CookiePolicy.path_return_ok (path, request)

     Return false if cookies should not be returned, given cookie path.

     See the documentation for *note domain_return_ok(): 1e69.

  In addition to implementing the methods above, implementations of the
*note CookiePolicy: 1e4e. interface must also supply the following
attributes, indicating which protocols should be used, and how.  All of
these attributes may be assigned to.

 -- Attribute: CookiePolicy.netscape

     Implement Netscape protocol.

 -- Attribute: CookiePolicy.rfc2965

     Implement RFC 2965 protocol.

 -- Attribute: CookiePolicy.hide_cookie2

     Don’t add ‘Cookie2’ header to requests (the presence of this header
     indicates to the server that we understand RFC 2965 cookies).

  The most useful way to define a *note CookiePolicy: 1e4e. class is by
subclassing from *note DefaultCookiePolicy: 1e52. and overriding some or
all of the methods above.  *note CookiePolicy: 1e4e. itself may be used
as a ’null policy’ to allow setting and receiving any and all cookies
(this is unlikely to be useful).


File: python.info,  Node: DefaultCookiePolicy Objects,  Next: Cookie Objects,  Prev: CookiePolicy Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.4 DefaultCookiePolicy Objects
.....................................

Implements the standard rules for accepting and returning cookies.

  Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is
switched off by default.

  The easiest way to provide your own policy is to override this class
and call its methods in your overridden implementations before adding
your own additional checks:

     import cookielib
     class MyCookiePolicy(cookielib.DefaultCookiePolicy):
         def set_ok(self, cookie, request):
             if not cookielib.DefaultCookiePolicy.set_ok(self, cookie, request):
                 return False
             if i_dont_want_to_store_this_cookie(cookie):
                 return False
             return True

  In addition to the features required to implement the *note
CookiePolicy: 1e4e. interface, this class allows you to block and allow
domains from setting and receiving cookies.  There are also some
strictness switches that allow you to tighten up the rather loose
Netscape protocol rules a little bit (at the cost of blocking some
benign cookies).

  A domain blacklist and whitelist is provided (both off by default).
Only domains not in the blacklist and present in the whitelist (if the
whitelist is active) participate in cookie setting and returning.  Use
the _blocked_domains_ constructor argument, and ‘blocked_domains()’ and
‘set_blocked_domains()’ methods (and the corresponding argument and
methods for _allowed_domains_).  If you set a whitelist, you can turn it
off again by setting it to *note None: 39a.

  Domains in block or allow lists that do not start with a dot must
equal the cookie domain to be matched.  For example, ‘"example.com"’
matches a blacklist entry of ‘"example.com"’, but ‘"www.example.com"’
does not.  Domains that do start with a dot are matched by more specific
domains too.  For example, both ‘"www.example.com"’ and
‘"www.coyote.example.com"’ match ‘".example.com"’ (but ‘"example.com"’
itself does not).  IP addresses are an exception, and must match
exactly.  For example, if blocked_domains contains ‘"192.168.1.2"’ and
‘".168.1.2"’, 192.168.1.2 is blocked, but 193.168.1.2 is not.

  *note DefaultCookiePolicy: 1e52. implements the following additional
methods:

 -- Method: DefaultCookiePolicy.blocked_domains ()

     Return the sequence of blocked domains (as a tuple).

 -- Method: DefaultCookiePolicy.set_blocked_domains (blocked_domains)

     Set the sequence of blocked domains.

 -- Method: DefaultCookiePolicy.is_blocked (domain)

     Return whether _domain_ is on the blacklist for setting or
     receiving cookies.

 -- Method: DefaultCookiePolicy.allowed_domains ()

     Return *note None: 39a, or the sequence of allowed domains (as a
     tuple).

 -- Method: DefaultCookiePolicy.set_allowed_domains (allowed_domains)

     Set the sequence of allowed domains, or *note None: 39a.

 -- Method: DefaultCookiePolicy.is_not_allowed (domain)

     Return whether _domain_ is not on the whitelist for setting or
     receiving cookies.

  *note DefaultCookiePolicy: 1e52. instances have the following
attributes, which are all initialised from the constructor arguments of
the same name, and which may all be assigned to.

 -- Attribute: DefaultCookiePolicy.rfc2109_as_netscape

     If true, request that the *note CookieJar: 1c9d. instance downgrade
     RFC 2109 cookies (ie.  cookies received in a ‘Set-Cookie’ header
     with a version cookie-attribute of 1) to Netscape cookies by
     setting the version attribute of the *note Cookie: 6f. instance to
     0.  The default value is *note None: 39a, in which case RFC 2109
     cookies are downgraded if and only if RFC 2965 handling is turned
     off.  Therefore, RFC 2109 cookies are downgraded by default.

     New in version 2.5.

  General strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_domain

     Don’t allow sites to set two-component domains with country-code
     top-level domains like ‘.co.uk’, ‘.gov.uk’, ‘.co.nz’.etc.  This is
     far from perfect and isn’t guaranteed to work!

  RFC 2965 protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_rfc2965_unverifiable

     Follow RFC 2965 rules on unverifiable transactions (usually, an
     unverifiable transaction is one resulting from a redirect or a
     request for an image hosted on another site).  If this is false,
     cookies are _never_ blocked on the basis of verifiability

  Netscape protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_ns_unverifiable

     apply RFC 2965 rules on unverifiable transactions even to Netscape
     cookies

 -- Attribute: DefaultCookiePolicy.strict_ns_domain

     Flags indicating how strict to be with domain-matching rules for
     Netscape cookies.  See below for acceptable values.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_initial_dollar

     Ignore cookies in Set-Cookie: headers that have names starting with
     ‘'$'’.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_path

     Don’t allow setting cookies whose path doesn’t path-match request
     URI.

  ‘strict_ns_domain’ is a collection of flags.  Its value is constructed
by or-ing together (for example,
‘DomainStrictNoDots|DomainStrictNonDomain’ means both flags are set).

 -- Attribute: DefaultCookiePolicy.DomainStrictNoDots

     When setting cookies, the ’host prefix’ must not contain a dot (eg.
     ‘www.foo.bar.com’ can’t set a cookie for ‘.bar.com’, because
     ‘www.foo’ contains a dot).

 -- Attribute: DefaultCookiePolicy.DomainStrictNonDomain

     Cookies that did not explicitly specify a ‘domain’ cookie-attribute
     can only be returned to a domain equal to the domain that set the
     cookie (eg.  ‘spam.example.com’ won’t be returned cookies from
     ‘example.com’ that had no ‘domain’ cookie-attribute).

 -- Attribute: DefaultCookiePolicy.DomainRFC2965Match

     When setting cookies, require a full RFC 2965 domain-match.

  The following attributes are provided for convenience, and are the
most useful combinations of the above flags:

 -- Attribute: DefaultCookiePolicy.DomainLiberal

     Equivalent to 0 (ie.  all of the above Netscape domain strictness
     flags switched off).

 -- Attribute: DefaultCookiePolicy.DomainStrict

     Equivalent to ‘DomainStrictNoDots|DomainStrictNonDomain’.


File: python.info,  Node: Cookie Objects,  Next: Examples<16>,  Prev: DefaultCookiePolicy Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.5 Cookie Objects
........................

*note Cookie: 6f. instances have Python attributes roughly corresponding
to the standard cookie-attributes specified in the various cookie
standards.  The correspondence is not one-to-one, because there are
complicated rules for assigning default values, because the ‘max-age’
and ‘expires’ cookie-attributes contain equivalent information, and
because RFC 2109 cookies may be ’downgraded’ by *note cookielib: 70.
from version 1 to version 0 (Netscape) cookies.

  Assignment to these attributes should not be necessary other than in
rare circumstances in a *note CookiePolicy: 1e4e. method.  The class
does not enforce internal consistency, so you should know what you’re
doing if you do that.

 -- Attribute: Cookie.version

     Integer or *note None: 39a.  Netscape cookies have *note version:
     1e83. 0.  RFC 2965 and RFC 2109 cookies have a ‘version’
     cookie-attribute of 1.  However, note that *note cookielib: 70. may
     ’downgrade’ RFC 2109 cookies to Netscape cookies, in which case
     *note version: 1e83. is 0.

 -- Attribute: Cookie.name

     Cookie name (a string).

 -- Attribute: Cookie.value

     Cookie value (a string), or *note None: 39a.

 -- Attribute: Cookie.port

     String representing a port or a set of ports (eg.  ’80’, or
     ’80,8080’), or *note None: 39a.

 -- Attribute: Cookie.path

     Cookie path (a string, eg.  ‘'/acme/rocket_launchers'’).

 -- Attribute: Cookie.secure

     ‘True’ if cookie should only be returned over a secure connection.

 -- Attribute: Cookie.expires

     Integer expiry date in seconds since epoch, or *note None: 39a.
     See also the *note is_expired(): 1e8a. method.

 -- Attribute: Cookie.discard

     ‘True’ if this is a session cookie.

 -- Attribute: Cookie.comment

     String comment from the server explaining the function of this
     cookie, or *note None: 39a.

 -- Attribute: Cookie.comment_url

     URL linking to a comment from the server explaining the function of
     this cookie, or *note None: 39a.

 -- Attribute: Cookie.rfc2109

     ‘True’ if this cookie was received as an RFC 2109 cookie (ie.  the
     cookie arrived in a ‘Set-Cookie’ header, and the value of the
     Version cookie-attribute in that header was 1).  This attribute is
     provided because *note cookielib: 70. may ’downgrade’ RFC 2109
     cookies to Netscape cookies, in which case *note version: 1e83. is
     0.

     New in version 2.5.

 -- Attribute: Cookie.port_specified

     ‘True’ if a port or set of ports was explicitly specified by the
     server (in the ‘Set-Cookie’ / ‘Set-Cookie2’ header).

 -- Attribute: Cookie.domain_specified

     ‘True’ if a domain was explicitly specified by the server.

 -- Attribute: Cookie.domain_initial_dot

     ‘True’ if the domain explicitly specified by the server began with
     a dot (‘'.'’).

  Cookies may have additional non-standard cookie-attributes.  These may
be accessed using the following methods:

 -- Method: Cookie.has_nonstandard_attr (name)

     Return true if cookie has the named cookie-attribute.

 -- Method: Cookie.get_nonstandard_attr (name, default=None)

     If cookie has the named cookie-attribute, return its value.
     Otherwise, return _default_.

 -- Method: Cookie.set_nonstandard_attr (name, value)

     Set the value of the named cookie-attribute.

  The *note Cookie: 6f. class also defines the following method:

 -- Method: Cookie.is_expired ([now=None])

     ‘True’ if cookie has passed the time at which the server requested
     it should expire.  If _now_ is given (in seconds since the epoch),
     return whether the cookie has expired at the specified time.


File: python.info,  Node: Examples<16>,  Prev: Cookie Objects,  Up: cookielib --- Cookie handling for HTTP clients

5.20.21.6 Examples
..................

The first example shows the most common usage of *note cookielib: 70.:

     import cookielib, urllib2
     cj = cookielib.CookieJar()
     opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
     r = opener.open("http://example.com/")

  This example illustrates how to open a URL using your Netscape,
Mozilla, or Lynx cookies (assumes Unix/Netscape convention for location
of the cookies file):

     import os, cookielib, urllib2
     cj = cookielib.MozillaCookieJar()
     cj.load(os.path.join(os.path.expanduser("~"), ".netscape", "cookies.txt"))
     opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
     r = opener.open("http://example.com/")

  The next example illustrates the use of *note DefaultCookiePolicy:
1e52.  Turn on RFC 2965 cookies, be more strict about domains when
setting and returning Netscape cookies, and block some domains from
setting cookies or having them returned:

     import urllib2
     from cookielib import CookieJar, DefaultCookiePolicy
     policy = DefaultCookiePolicy(
         rfc2965=True, strict_ns_domain=DefaultCookiePolicy.DomainStrict,
         blocked_domains=["ads.net", ".ads.net"])
     cj = CookieJar(policy)
     opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
     r = opener.open("http://example.com/")


File: python.info,  Node: Cookie --- HTTP state management,  Next: xmlrpclib --- XML-RPC client access,  Prev: cookielib --- Cookie handling for HTTP clients,  Up: Internet Protocols and Support

5.20.22 ‘Cookie’ — HTTP state management
----------------------------------------

     Note: The *note Cookie: 6f. module has been renamed to
     ‘http.cookies’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  *Source code:* Lib/Cookie.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note Cookie: 6f. module defines classes for abstracting the
concept of cookies, an HTTP state management mechanism.  It supports
both simple string-only cookies, and provides an abstraction for having
any serializable data-type as cookie value.

  The module formerly strictly applied the parsing rules described in
the RFC 2109(2) and RFC 2068(3) specifications.  It has since been
discovered that MSIE 3.0x doesn’t follow the character rules outlined in
those specs and also many current day browsers and servers have relaxed
parsing rules when comes to Cookie handling.  As a result, the parsing
rules used are a bit less strict.

  The character set, *note string.ascii_letters: 966, *note
string.digits: 969. and ‘!#$%&'*+-.^_`|~’ denote the set of valid
characters allowed by this module in Cookie name (as *note key: 1e99.).

     Note: On encountering an invalid cookie, *note CookieError: 1e9a.
     is raised, so if your cookie data comes from a browser you should
     always prepare for invalid data and catch *note CookieError: 1e9a.
     on parsing.

 -- Exception: Cookie.CookieError

     Exception failing because of RFC 2109(4) invalidity: incorrect
     attributes, incorrect ‘Set-Cookie’ header, etc.

 -- Class: Cookie.BaseCookie ([input])

     This class is a dictionary-like object whose keys are strings and
     whose values are *note Morsel: 1e9c. instances.  Note that upon
     setting a key to a value, the value is first converted to a *note
     Morsel: 1e9c. containing the key and the value.

     If _input_ is given, it is passed to the *note load(): 1e9d.
     method.

 -- Class: Cookie.SimpleCookie ([input])

     This class derives from *note BaseCookie: 1e9b. and overrides
     ‘value_decode()’ and ‘value_encode()’ to be the identity and *note
     str(): 1ea. respectively.

 -- Class: Cookie.SerialCookie ([input])

     This class derives from *note BaseCookie: 1e9b. and overrides
     ‘value_decode()’ and ‘value_encode()’ to be the *note
     pickle.loads(): ecc. and *note pickle.dumps(): 448.

     Deprecated since version 2.3: Reading pickled values from untrusted
     cookie data is a huge security hole, as pickle strings can be
     crafted to cause arbitrary code to execute on your server.  It is
     supported for backwards compatibility only, and may eventually go
     away.

 -- Class: Cookie.SmartCookie ([input])

     This class derives from *note BaseCookie: 1e9b.  It overrides
     ‘value_decode()’ to be *note pickle.loads(): ecc. if it is a valid
     pickle, and otherwise the value itself.  It overrides
     ‘value_encode()’ to be *note pickle.dumps(): 448. unless it is a
     string, in which case it returns the value itself.

     Deprecated since version 2.3: The same security warning from *note
     SerialCookie: 1e9f. applies here.

  A further security note is warranted.  For backwards compatibility,
the *note Cookie: 6f. module exports a class named *note Cookie: 6f.
which is just an alias for *note SmartCookie: 1ea0.  This is probably a
mistake and will likely be removed in a future version.  You should not
use the *note Cookie: 6f. class in your applications, for the same
reason why you should not use the *note SerialCookie: 1e9f. class.

See also
........

Module *note cookielib: 70.

     HTTP cookie handling for web _clients_.  The *note cookielib: 70.
     and *note Cookie: 6f. modules do not depend on each other.

RFC 2109(5) - HTTP State Management Mechanism

     This is the state management specification implemented by this
     module.

* Menu:

* Cookie Objects: Cookie Objects<2>. 
* Morsel Objects:: 
* Example: Example<13>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/Cookie.py

   (2) http://tools.ietf.org/html/rfc2109.html

   (3) http://tools.ietf.org/html/rfc2068.html

   (4) http://tools.ietf.org/html/rfc2109.html

   (5) http://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Cookie Objects<2>,  Next: Morsel Objects,  Up: Cookie --- HTTP state management

5.20.22.1 Cookie Objects
........................

 -- Method: BaseCookie.value_decode (val)

     Return a decoded value from a string representation.  Return value
     can be any type.  This method does nothing in *note BaseCookie:
     1e9b. — it exists so it can be overridden.

 -- Method: BaseCookie.value_encode (val)

     Return an encoded value.  _val_ can be any type, but return value
     must be a string.  This method does nothing in *note BaseCookie:
     1e9b. — it exists so it can be overridden

     In general, it should be the case that *note value_encode(): 1ea4.
     and *note value_decode(): 1ea3. are inverses on the range of
     _value_decode_.

 -- Method: BaseCookie.output ([attrs[, header[, sep]]])

     Return a string representation suitable to be sent as HTTP headers.
     _attrs_ and _header_ are sent to each *note Morsel: 1e9c.’s *note
     output(): 1ea5. method.  _sep_ is used to join the headers
     together, and is by default the combination ‘'\r\n'’ (CRLF).

     Changed in version 2.5: The default separator has been changed from
     ‘'\n'’ to match the cookie specification.

 -- Method: BaseCookie.js_output ([attrs])

     Return an embeddable JavaScript snippet, which, if run on a browser
     which supports JavaScript, will act the same as if the HTTP headers
     was sent.

     The meaning for _attrs_ is the same as in *note output(): 1ea5.

 -- Method: BaseCookie.load (rawdata)

     If _rawdata_ is a string, parse it as an ‘HTTP_COOKIE’ and add the
     values found there as *note Morsel: 1e9c.s.  If it is a dictionary,
     it is equivalent to:

          for k, v in rawdata.items():
              cookie[k] = v


File: python.info,  Node: Morsel Objects,  Next: Example<13>,  Prev: Cookie Objects<2>,  Up: Cookie --- HTTP state management

5.20.22.2 Morsel Objects
........................

 -- Class: Cookie.Morsel

     Abstract a key/value pair, which has some RFC 2109(1) attributes.

     Morsels are dictionary-like objects, whose set of keys is constant
     — the valid RFC 2109(2) attributes, which are

        * ‘expires’

        * ‘path’

        * ‘comment’

        * ‘domain’

        * ‘max-age’

        * ‘secure’

        * ‘version’

        * ‘httponly’

     The attribute ‘httponly’ specifies that the cookie is only
     transfered in HTTP requests, and is not accessible through
     JavaScript.  This is intended to mitigate some forms of cross-site
     scripting.

     The keys are case-insensitive.

     New in version 2.6: The ‘httponly’ attribute was added.

 -- Attribute: Morsel.value

     The value of the cookie.

 -- Attribute: Morsel.coded_value

     The encoded value of the cookie — this is what should be sent.

 -- Attribute: Morsel.key

     The name of the cookie.

 -- Method: Morsel.set (key, value, coded_value)

     Set the _key_, _value_ and _coded_value_ attributes.

 -- Method: Morsel.isReservedKey (K)

     Whether _K_ is a member of the set of keys of a *note Morsel: 1e9c.

 -- Method: Morsel.output ([attrs[, header]])

     Return a string representation of the Morsel, suitable to be sent
     as an HTTP header.  By default, all the attributes are included,
     unless _attrs_ is given, in which case it should be a list of
     attributes to use.  _header_ is by default ‘"Set-Cookie:"’.

 -- Method: Morsel.js_output ([attrs])

     Return an embeddable JavaScript snippet, which, if run on a browser
     which supports JavaScript, will act the same as if the HTTP header
     was sent.

     The meaning for _attrs_ is the same as in *note output(): 1ead.

 -- Method: Morsel.OutputString ([attrs])

     Return a string representing the Morsel, without any surrounding
     HTTP or JavaScript.

     The meaning for _attrs_ is the same as in *note output(): 1ead.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2109.html

   (2) http://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Example<13>,  Prev: Morsel Objects,  Up: Cookie --- HTTP state management

5.20.22.3 Example
.................

The following example demonstrates how to use the *note Cookie: 6f.
module.

     >>> import Cookie
     >>> C = Cookie.SimpleCookie()
     >>> C["fig"] = "newton"
     >>> C["sugar"] = "wafer"
     >>> print C # generate HTTP headers
     Set-Cookie: fig=newton
     Set-Cookie: sugar=wafer
     >>> print C.output() # same thing
     Set-Cookie: fig=newton
     Set-Cookie: sugar=wafer
     >>> C = Cookie.SimpleCookie()
     >>> C["rocky"] = "road"
     >>> C["rocky"]["path"] = "/cookie"
     >>> print C.output(header="Cookie:")
     Cookie: rocky=road; Path=/cookie
     >>> print C.output(attrs=[], header="Cookie:")
     Cookie: rocky=road
     >>> C = Cookie.SimpleCookie()
     >>> C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)
     >>> print C
     Set-Cookie: chips=ahoy
     Set-Cookie: vienna=finger
     >>> C = Cookie.SimpleCookie()
     >>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
     >>> print C
     Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
     >>> C = Cookie.SimpleCookie()
     >>> C["oreo"] = "doublestuff"
     >>> C["oreo"]["path"] = "/"
     >>> print C
     Set-Cookie: oreo=doublestuff; Path=/
     >>> C["twix"] = "none for you"
     >>> C["twix"].value
     'none for you'
     >>> C = Cookie.SimpleCookie()
     >>> C["number"] = 7 # equivalent to C["number"] = str(7)
     >>> C["string"] = "seven"
     >>> C["number"].value
     '7'
     >>> C["string"].value
     'seven'
     >>> print C
     Set-Cookie: number=7
     Set-Cookie: string=seven
     >>> # SerialCookie and SmartCookie are deprecated
     >>> # using it can cause security loopholes in your code.
     >>> C = Cookie.SerialCookie()
     >>> C["number"] = 7
     >>> C["string"] = "seven"
     >>> C["number"].value
     7
     >>> C["string"].value
     'seven'
     >>> print C
     Set-Cookie: number="I7\012."
     Set-Cookie: string="S'seven'\012p1\012."
     >>> C = Cookie.SmartCookie()
     >>> C["number"] = 7
     >>> C["string"] = "seven"
     >>> C["number"].value
     7
     >>> C["string"].value
     'seven'
     >>> print C
     Set-Cookie: number="I7\012."
     Set-Cookie: string=seven


File: python.info,  Node: xmlrpclib --- XML-RPC client access,  Next: SimpleXMLRPCServer --- Basic XML-RPC server,  Prev: Cookie --- HTTP state management,  Up: Internet Protocols and Support

5.20.23 ‘xmlrpclib’ — XML-RPC client access
-------------------------------------------

     Note: The *note xmlrpclib: 1aa. module has been renamed to
     ‘xmlrpc.client’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  New in version 2.2.

  *Source code:* Lib/xmlrpclib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  XML-RPC is a Remote Procedure Call method that uses XML passed via
HTTP as a transport.  With it, a client can call methods with parameters
on a remote server (the server is named by a URI) and get back
structured data.  This module supports writing XML-RPC client code; it
handles all the details of translating between conformable Python
objects and XML on the wire.

     Warning: The *note xmlrpclib: 1aa. module is not secure against
     maliciously constructed data.  If you need to parse untrusted or
     unauthenticated data see *note XML vulnerabilities: 1a24.

 -- Class: xmlrpclib.ServerProxy (uri[, transport[, encoding[, verbose[,
          allow_none[, use_datetime]]]]])

     A *note ServerProxy: 1eb4. instance is an object that manages
     communication with a remote XML-RPC server.  The required first
     argument is a URI (Uniform Resource Indicator), and will normally
     be the URL of the server.  The optional second argument is a
     transport factory instance; by default it is an internal
     ‘SafeTransport’ instance for https: URLs and an internal HTTP
     ‘Transport’ instance otherwise.  The optional third argument is an
     encoding, by default UTF-8.  The optional fourth argument is a
     debugging flag.  If _allow_none_ is true, the Python constant
     ‘None’ will be translated into XML; the default behaviour is for
     ‘None’ to raise a *note TypeError: 218.  This is a commonly-used
     extension to the XML-RPC specification, but isn’t supported by all
     clients and servers; see
     ‘http://ontosys.com/xml-rpc/extensions.php’ for a description.  The
     _use_datetime_ flag can be used to cause date/time values to be
     presented as *note datetime.datetime: 2da. objects; this is false
     by default.  *note datetime.datetime: 2da. objects may be passed to
     calls.

     Both the HTTP and HTTPS transports support the URL syntax extension
     for HTTP Basic Authentication: ‘http://user:pass@host:port/path’.
     The ‘user:pass’ portion will be base64-encoded as an HTTP
     ’Authorization’ header, and sent to the remote server as part of
     the connection process when invoking an XML-RPC method.  You only
     need to use this if the remote server requires a Basic
     Authentication user and password.

     The returned instance is a proxy object with methods that can be
     used to invoke corresponding RPC calls on the remote server.  If
     the remote server supports the introspection API, the proxy can
     also be used to query the remote server for the methods it supports
     (service discovery) and fetch other server-associated metadata.

     *note ServerProxy: 1eb4. instance methods take Python basic types
     and objects as arguments and return Python basic types and classes.
     Types that are conformable (e.g.  that can be marshalled through
     XML), include the following (and except where noted, they are
     unmarshalled as the same Python type):

     Name                                  Meaning
                                           
     ----------------------------------------------------------------------------------------
                                           
     *note boolean: 1eb5.                  The *note True: 3b0. and *note False: 3b1.
                                           constants
                                           
                                           
     ‘integers’                            Pass in directly
                                           
                                           
     ‘floating-point numbers’              Pass in directly
                                           
                                           
     ‘strings’                             Pass in directly
                                           
                                           
     ‘arrays’                              Any Python sequence type containing conformable
                                           elements.  Arrays are returned as lists
                                           
                                           
     ‘structures’                          A Python dictionary.  Keys must be strings,
                                           values may be any conformable type.  Objects of
                                           user-defined classes can be passed in; only
                                           their ___dict___ attribute is transmitted.
                                           
                                           
     ‘dates’                               in seconds since the epoch (pass in an instance
                                           of the ‘DateTime’ class) or a *note
                                           datetime.datetime: 2da. instance.
                                           
                                           
     ‘binary data’                         pass in an instance of the ‘Binary’ wrapper
                                           class
                                           

     This is the full set of data types supported by XML-RPC. Method
     calls may also raise a special ‘Fault’ instance, used to signal
     XML-RPC server errors, or ‘ProtocolError’ used to signal an error
     in the HTTP/HTTPS transport layer.  Both ‘Fault’ and
     ‘ProtocolError’ derive from a base class called ‘Error’.  Note that
     even though starting with Python 2.2 you can subclass built-in
     types, the xmlrpclib module currently does not marshal instances of
     such subclasses.

     When passing strings, characters special to XML such as ‘<’, ‘>’,
     and ‘&’ will be automatically escaped.  However, it’s the caller’s
     responsibility to ensure that the string is free of characters that
     aren’t allowed in XML, such as the control characters with ASCII
     values between 0 and 31 (except, of course, tab, newline and
     carriage return); failing to do this will result in an XML-RPC
     request that isn’t well-formed XML. If you have to pass arbitrary
     strings via XML-RPC, use the ‘Binary’ wrapper class described
     below.

     ‘Server’ is retained as an alias for *note ServerProxy: 1eb4. for
     backwards compatibility.  New code should use *note ServerProxy:
     1eb4.

     Changed in version 2.5: The _use_datetime_ flag was added.

     Changed in version 2.6: Instances of *note new-style class: 5d1.es
     can be passed in if they have an ___dict___ attribute and don’t
     have a base class that is marshalled in a special way.

See also
........

XML-RPC HOWTO(2)

     A good description of XML-RPC operation and client software in
     several languages.  Contains pretty much everything an XML-RPC
     client developer needs to know.

XML-RPC Introspection(3)

     Describes the XML-RPC protocol extension for introspection.

XML-RPC Specification(4)

     The official specification.

Unofficial XML-RPC Errata(5)

     Fredrik Lundh’s "unofficial errata, intended to clarify certain
     details in the XML-RPC specification, as well as hint at ’best
     practices’ to use when designing your own XML-RPC implementations."

* Menu:

* ServerProxy Objects:: 
* Boolean Objects:: 
* DateTime Objects:: 
* Binary Objects:: 
* Fault Objects:: 
* ProtocolError Objects:: 
* MultiCall Objects:: 
* Convenience Functions:: 
* Example of Client Usage:: 
* Example of Client and Server Usage:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/xmlrpclib.py

   (2) http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html

   (3) http://xmlrpc-c.sourceforge.net/introspection.html

   (4) http://www.xmlrpc.com/spec

   (5) http://effbot.org/zone/xmlrpc-errata.htm


File: python.info,  Node: ServerProxy Objects,  Next: Boolean Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.1 ServerProxy Objects
.............................

A *note ServerProxy: 1eb4. instance has a method corresponding to each
remote procedure call accepted by the XML-RPC server.  Calling the
method performs an RPC, dispatched by both name and argument signature
(e.g.  the same method name can be overloaded with multiple argument
signatures).  The RPC finishes by returning a value, which may be either
returned data in a conformant type or a ‘Fault’ or ‘ProtocolError’
object indicating an error.

  Servers that support the XML introspection API support some common
methods grouped under the reserved ‘system’ attribute:

 -- Method: ServerProxy.system.listMethods ()

     This method returns a list of strings, one for each (non-system)
     method supported by the XML-RPC server.

 -- Method: ServerProxy.system.methodSignature (name)

     This method takes one parameter, the name of a method implemented
     by the XML-RPC server.  It returns an array of possible signatures
     for this method.  A signature is an array of types.  The first of
     these types is the return type of the method, the rest are
     parameters.

     Because multiple signatures (ie.  overloading) is permitted, this
     method returns a list of signatures rather than a singleton.

     Signatures themselves are restricted to the top level parameters
     expected by a method.  For instance if a method expects one array
     of structs as a parameter, and it returns a string, its signature
     is simply "string, array".  If it expects three integers and
     returns a string, its signature is "string, int, int, int".

     If no signature is defined for the method, a non-array value is
     returned.  In Python this means that the type of the returned value
     will be something other than list.

 -- Method: ServerProxy.system.methodHelp (name)

     This method takes one parameter, the name of a method implemented
     by the XML-RPC server.  It returns a documentation string
     describing the use of that method.  If no such string is available,
     an empty string is returned.  The documentation string may contain
     HTML markup.


File: python.info,  Node: Boolean Objects,  Next: DateTime Objects,  Prev: ServerProxy Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.2 Boolean Objects
.........................

This class may be initialized from any Python value; the instance
returned depends only on its truth value.  It supports various Python
operators through *note __cmp__(): 221, *note __repr__(): 486, *note
__int__(): 260, and *note __nonzero__(): 70c. methods, all implemented
in the obvious ways.

  It also has the following method, supported mainly for internal use by
the unmarshalling code:

 -- Method: Boolean.encode (out)

     Write the XML-RPC encoding of this Boolean item to the out stream
     object.

  A working example follows.  The server code:

     import xmlrpclib
     from SimpleXMLRPCServer import SimpleXMLRPCServer

     def is_even(n):
         return n%2 == 0

     server = SimpleXMLRPCServer(("localhost", 8000))
     print "Listening on port 8000..."
     server.register_function(is_even, "is_even")
     server.serve_forever()

  The client code for the preceding server:

     import xmlrpclib

     proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
     print "3 is even: %s" % str(proxy.is_even(3))
     print "100 is even: %s" % str(proxy.is_even(100))


File: python.info,  Node: DateTime Objects,  Next: Binary Objects,  Prev: Boolean Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.3 DateTime Objects
..........................

This class may be initialized with seconds since the epoch, a time
tuple, an ISO 8601 time/date string, or a *note datetime.datetime: 2da.
instance.  It has the following methods, supported mainly for internal
use by the marshalling/unmarshalling code:

 -- Method: DateTime.decode (string)

     Accept a string as the instance’s new time value.

 -- Method: DateTime.encode (out)

     Write the XML-RPC encoding of this ‘DateTime’ item to the _out_
     stream object.

  It also supports certain of Python’s built-in operators through *note
__cmp__(): 221. and *note __repr__(): 486. methods.

  A working example follows.  The server code:

     import datetime
     from SimpleXMLRPCServer import SimpleXMLRPCServer
     import xmlrpclib

     def today():
         today = datetime.datetime.today()
         return xmlrpclib.DateTime(today)

     server = SimpleXMLRPCServer(("localhost", 8000))
     print "Listening on port 8000..."
     server.register_function(today, "today")
     server.serve_forever()

  The client code for the preceding server:

     import xmlrpclib
     import datetime

     proxy = xmlrpclib.ServerProxy("http://localhost:8000/")

     today = proxy.today()
     # convert the ISO8601 string to a datetime object
     converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
     print "Today: %s" % converted.strftime("%d.%m.%Y, %H:%M")


File: python.info,  Node: Binary Objects,  Next: Fault Objects,  Prev: DateTime Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.4 Binary Objects
........................

This class may be initialized from string data (which may include NULs).
The primary access to the content of a ‘Binary’ object is provided by an
attribute:

 -- Attribute: Binary.data

     The binary data encapsulated by the ‘Binary’ instance.  The data is
     provided as an 8-bit string.

  ‘Binary’ objects have the following methods, supported mainly for
internal use by the marshalling/unmarshalling code:

 -- Method: Binary.decode (string)

     Accept a base64 string and decode it as the instance’s new data.

 -- Method: Binary.encode (out)

     Write the XML-RPC base 64 encoding of this binary item to the out
     stream object.

     The encoded data will have newlines every 76 characters as per RFC
     2045 section 6.8(1), which was the de facto standard base64
     specification when the XML-RPC spec was written.

  It also supports certain of Python’s built-in operators through a
*note __cmp__(): 221. method.

  Example usage of the binary objects.  We’re going to transfer an image
over XMLRPC:

     from SimpleXMLRPCServer import SimpleXMLRPCServer
     import xmlrpclib

     def python_logo():
          with open("python_logo.jpg", "rb") as handle:
              return xmlrpclib.Binary(handle.read())

     server = SimpleXMLRPCServer(("localhost", 8000))
     print "Listening on port 8000..."
     server.register_function(python_logo, 'python_logo')

     server.serve_forever()

  The client gets the image and saves it to a file:

     import xmlrpclib

     proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
     with open("fetched_python_logo.jpg", "wb") as handle:
         handle.write(proxy.python_logo().data)

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc2045#section-6.8


File: python.info,  Node: Fault Objects,  Next: ProtocolError Objects,  Prev: Binary Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.5 Fault Objects
.......................

A ‘Fault’ object encapsulates the content of an XML-RPC fault tag.
Fault objects have the following attributes:

 -- Attribute: Fault.faultCode

     A string indicating the fault type.

 -- Attribute: Fault.faultString

     A string containing a diagnostic message associated with the fault.

  In the following example we’re going to intentionally cause a ‘Fault’
by returning a complex type object.  The server code:

     from SimpleXMLRPCServer import SimpleXMLRPCServer

     # A marshalling error is going to occur because we're returning a
     # complex number
     def add(x,y):
         return x+y+0j

     server = SimpleXMLRPCServer(("localhost", 8000))
     print "Listening on port 8000..."
     server.register_function(add, 'add')

     server.serve_forever()

  The client code for the preceding server:

     import xmlrpclib

     proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
     try:
         proxy.add(2, 5)
     except xmlrpclib.Fault as err:
         print "A fault occurred"
         print "Fault code: %d" % err.faultCode
         print "Fault string: %s" % err.faultString


File: python.info,  Node: ProtocolError Objects,  Next: MultiCall Objects,  Prev: Fault Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.6 ProtocolError Objects
...............................

A ‘ProtocolError’ object describes a protocol error in the underlying
transport layer (such as a 404 ’not found’ error if the server named by
the URI does not exist).  It has the following attributes:

 -- Attribute: ProtocolError.url

     The URI or URL that triggered the error.

 -- Attribute: ProtocolError.errcode

     The error code.

 -- Attribute: ProtocolError.errmsg

     The error message or diagnostic string.

 -- Attribute: ProtocolError.headers

     A string containing the headers of the HTTP/HTTPS request that
     triggered the error.

  In the following example we’re going to intentionally cause a
‘ProtocolError’ by providing an URI that doesn’t point to an XMLRPC
server:

     import xmlrpclib

     # create a ServerProxy with an URI that doesn't respond to XMLRPC requests
     proxy = xmlrpclib.ServerProxy("http://www.google.com/")

     try:
         proxy.some_method()
     except xmlrpclib.ProtocolError as err:
         print "A protocol error occurred"
         print "URL: %s" % err.url
         print "HTTP/HTTPS headers: %s" % err.headers
         print "Error code: %d" % err.errcode
         print "Error message: %s" % err.errmsg


File: python.info,  Node: MultiCall Objects,  Next: Convenience Functions,  Prev: ProtocolError Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.7 MultiCall Objects
...........................

New in version 2.4.

  The *note MultiCall: 1ed2. object provides a way to encapsulate
multiple calls to a remote server into a single request (1).

 -- Class: xmlrpclib.MultiCall (server)

     Create an object used to boxcar method calls.  _server_ is the
     eventual target of the call.  Calls can be made to the result
     object, but they will immediately return ‘None’, and only store the
     call name and parameters in the *note MultiCall: 1ed2. object.
     Calling the object itself causes all stored calls to be transmitted
     as a single ‘system.multicall’ request.  The result of this call is
     a *note generator: 5dc.; iterating over this generator yields the
     individual results.

  A usage example of this class follows.  The server code

     from SimpleXMLRPCServer import SimpleXMLRPCServer

     def add(x,y):
         return x+y

     def subtract(x, y):
         return x-y

     def multiply(x, y):
         return x*y

     def divide(x, y):
         return x/y

     # A simple server with simple arithmetic functions
     server = SimpleXMLRPCServer(("localhost", 8000))
     print "Listening on port 8000..."
     server.register_multicall_functions()
     server.register_function(add, 'add')
     server.register_function(subtract, 'subtract')
     server.register_function(multiply, 'multiply')
     server.register_function(divide, 'divide')
     server.serve_forever()

  The client code for the preceding server:

     import xmlrpclib

     proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
     multicall = xmlrpclib.MultiCall(proxy)
     multicall.add(7,3)
     multicall.subtract(7,3)
     multicall.multiply(7,3)
     multicall.divide(7,3)
     result = multicall()

     print "7+3=%d, 7-3=%d, 7*3=%d, 7/3=%d" % tuple(result)

   ---------- Footnotes ----------

   (1) This approach has been first presented in a discussion on
xmlrpc.com
(http://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic).


File: python.info,  Node: Convenience Functions,  Next: Example of Client Usage,  Prev: MultiCall Objects,  Up: xmlrpclib --- XML-RPC client access

5.20.23.8 Convenience Functions
...............................

 -- Function: xmlrpclib.boolean (value)

     Convert any Python value to one of the XML-RPC Boolean constants,
     ‘True’ or ‘False’.

 -- Function: xmlrpclib.dumps (params[, methodname[, methodresponse[,
          encoding[, allow_none]]]])

     Convert _params_ into an XML-RPC request.  or into a response if
     _methodresponse_ is true.  _params_ can be either a tuple of
     arguments or an instance of the ‘Fault’ exception class.  If
     _methodresponse_ is true, only a single value can be returned,
     meaning that _params_ must be of length 1.  _encoding_, if
     supplied, is the encoding to use in the generated XML; the default
     is UTF-8.  Python’s *note None: 39a. value cannot be used in
     standard XML-RPC; to allow using it via an extension, provide a
     true value for _allow_none_.

 -- Function: xmlrpclib.loads (data[, use_datetime])

     Convert an XML-RPC request or response into Python objects, a
     ‘(params, methodname)’.  _params_ is a tuple of argument;
     _methodname_ is a string, or ‘None’ if no method name is present in
     the packet.  If the XML-RPC packet represents a fault condition,
     this function will raise a ‘Fault’ exception.  The _use_datetime_
     flag can be used to cause date/time values to be presented as *note
     datetime.datetime: 2da. objects; this is false by default.

     Changed in version 2.5: The _use_datetime_ flag was added.


File: python.info,  Node: Example of Client Usage,  Next: Example of Client and Server Usage,  Prev: Convenience Functions,  Up: xmlrpclib --- XML-RPC client access

5.20.23.9 Example of Client Usage
.................................

     # simple test program (from the XML-RPC specification)
     from xmlrpclib import ServerProxy, Error

     # server = ServerProxy("http://localhost:8000") # local server
     server = ServerProxy("http://betty.userland.com")

     print server

     try:
         print server.examples.getStateName(41)
     except Error as v:
         print "ERROR", v

  To access an XML-RPC server through a proxy, you need to define a
custom transport.  The following example shows how:

     import xmlrpclib, httplib

     class ProxiedTransport(xmlrpclib.Transport):
         def set_proxy(self, proxy):
             self.proxy = proxy
         def make_connection(self, host):
             self.realhost = host
             h = httplib.HTTP(self.proxy)
             return h
         def send_request(self, connection, handler, request_body):
             connection.putrequest("POST", 'http://%s%s' % (self.realhost, handler))
         def send_host(self, connection, host):
             connection.putheader('Host', self.realhost)

     p = ProxiedTransport()
     p.set_proxy('proxy-server:8080')
     server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2', transport=p)
     print server.currentTime.getCurrentTime()


File: python.info,  Node: Example of Client and Server Usage,  Prev: Example of Client Usage,  Up: xmlrpclib --- XML-RPC client access

5.20.23.10 Example of Client and Server Usage
.............................................

See *note SimpleXMLRPCServer Example: 1ed9.


File: python.info,  Node: SimpleXMLRPCServer --- Basic XML-RPC server,  Next: DocXMLRPCServer --- Self-documenting XML-RPC server,  Prev: xmlrpclib --- XML-RPC client access,  Up: Internet Protocols and Support

5.20.24 ‘SimpleXMLRPCServer’ — Basic XML-RPC server
---------------------------------------------------

     Note: The *note SimpleXMLRPCServer: 157. module has been merged
     into ‘xmlrpc.server’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  New in version 2.2.

  *Source code:* Lib/SimpleXMLRPCServer.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note SimpleXMLRPCServer: 157. module provides a basic server
framework for XML-RPC servers written in Python.  Servers can either be
free standing, using *note SimpleXMLRPCServer: 157, or embedded in a CGI
environment, using *note CGIXMLRPCRequestHandler: 1edc.

 -- Class: SimpleXMLRPCServer.SimpleXMLRPCServer (addr[,
          requestHandler[, logRequests[, allow_none[, encoding[,
          bind_and_activate]]]])

     Create a new server instance.  This class provides methods for
     registration of functions that can be called by the XML-RPC
     protocol.  The _requestHandler_ parameter should be a factory for
     request handler instances; it defaults to *note
     SimpleXMLRPCRequestHandler: 1ede.  The _addr_ and _requestHandler_
     parameters are passed to the ‘SocketServer.TCPServer’ constructor.
     If _logRequests_ is true (the default), requests will be logged;
     setting this parameter to false will turn off logging.  The
     _allow_none_ and _encoding_ parameters are passed on to *note
     xmlrpclib: 1aa. and control the XML-RPC responses that will be
     returned from the server.  The _bind_and_activate_ parameter
     controls whether ‘server_bind()’ and ‘server_activate()’ are called
     immediately by the constructor; it defaults to true.  Setting it to
     false allows code to manipulate the _allow_reuse_address_ class
     variable before the address is bound.

     Changed in version 2.5: The _allow_none_ and _encoding_ parameters
     were added.

     Changed in version 2.6: The _bind_and_activate_ parameter was
     added.

 -- Class: SimpleXMLRPCServer.CGIXMLRPCRequestHandler ([allow_none[,
          encoding]])

     Create a new instance to handle XML-RPC requests in a CGI
     environment.  The _allow_none_ and _encoding_ parameters are passed
     on to *note xmlrpclib: 1aa. and control the XML-RPC responses that
     will be returned from the server.

     New in version 2.3.

     Changed in version 2.5: The _allow_none_ and _encoding_ parameters
     were added.

 -- Class: SimpleXMLRPCServer.SimpleXMLRPCRequestHandler

     Create a new request handler instance.  This request handler
     supports ‘POST’ requests and modifies logging so that the
     _logRequests_ parameter to the *note SimpleXMLRPCServer: 157.
     constructor parameter is honored.

* Menu:

* SimpleXMLRPCServer Objects:: 
* CGIXMLRPCRequestHandler:: 

SimpleXMLRPCServer Objects

* SimpleXMLRPCServer Example:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/SimpleXMLRPCServer.py


File: python.info,  Node: SimpleXMLRPCServer Objects,  Next: CGIXMLRPCRequestHandler,  Up: SimpleXMLRPCServer --- Basic XML-RPC server

5.20.24.1 SimpleXMLRPCServer Objects
....................................

The *note SimpleXMLRPCServer: 157. class is based on
‘SocketServer.TCPServer’ and provides a means of creating simple, stand
alone XML-RPC servers.

 -- Method: SimpleXMLRPCServer.register_function (function[, name])

     Register a function that can respond to XML-RPC requests.  If
     _name_ is given, it will be the method name associated with
     _function_, otherwise ‘function.__name__’ will be used.  _name_ can
     be either a normal or Unicode string, and may contain characters
     not legal in Python identifiers, including the period character.

 -- Method: SimpleXMLRPCServer.register_instance (instance[,
          allow_dotted_names])

     Register an object which is used to expose method names which have
     not been registered using *note register_function(): 1ee1.  If
     _instance_ contains a ‘_dispatch()’ method, it is called with the
     requested method name and the parameters from the request.  Its API
     is ‘def _dispatch(self, method, params)’ (note that _params_ does
     not represent a variable argument list).  If it calls an underlying
     function to perform its task, that function is called as
     ‘func(*params)’, expanding the parameter list.  The return value
     from ‘_dispatch()’ is returned to the client as the result.  If
     _instance_ does not have a ‘_dispatch()’ method, it is searched for
     an attribute matching the name of the requested method.

     If the optional _allow_dotted_names_ argument is true and the
     instance does not have a ‘_dispatch()’ method, then if the
     requested method name contains periods, each component of the
     method name is searched for individually, with the effect that a
     simple hierarchical search is performed.  The value found from this
     search is then called with the parameters from the request, and the
     return value is passed back to the client.

          Warning: Enabling the _allow_dotted_names_ option allows
          intruders to access your module’s global variables and may
          allow intruders to execute arbitrary code on your machine.
          Only use this option on a secure, closed network.

     Changed in version 2.3.5,: 2.4.1 _allow_dotted_names_ was added to
     plug a security hole; prior versions are insecure.

 -- Method: SimpleXMLRPCServer.register_introspection_functions ()

     Registers the XML-RPC introspection functions ‘system.listMethods’,
     ‘system.methodHelp’ and ‘system.methodSignature’.

     New in version 2.3.

 -- Method: SimpleXMLRPCServer.register_multicall_functions ()

     Registers the XML-RPC multicall function system.multicall.

 -- Attribute: SimpleXMLRPCRequestHandler.rpc_paths

     An attribute value that must be a tuple listing valid path portions
     of the URL for receiving XML-RPC requests.  Requests posted to
     other paths will result in a 404 "no such page" HTTP error.  If
     this tuple is empty, all paths will be considered valid.  The
     default value is ‘('/', '/RPC2')’.

     New in version 2.5.

 -- Attribute: SimpleXMLRPCRequestHandler.encode_threshold

     If this attribute is not ‘None’, responses larger than this value
     will be encoded using the _gzip_ transfer encoding, if permitted by
     the client.  The default is ‘1400’ which corresponds roughly to a
     single TCP packet.

     New in version 2.7.

* Menu:

* SimpleXMLRPCServer Example:: 


File: python.info,  Node: SimpleXMLRPCServer Example,  Up: SimpleXMLRPCServer Objects

5.20.24.2 SimpleXMLRPCServer Example
....................................

Server code:

     from SimpleXMLRPCServer import SimpleXMLRPCServer
     from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

     # Restrict to a particular path.
     class RequestHandler(SimpleXMLRPCRequestHandler):
         rpc_paths = ('/RPC2',)

     # Create server
     server = SimpleXMLRPCServer(("localhost", 8000),
                                 requestHandler=RequestHandler)
     server.register_introspection_functions()

     # Register pow() function; this will use the value of
     # pow.__name__ as the name, which is just 'pow'.
     server.register_function(pow)

     # Register a function under a different name
     def adder_function(x,y):
         return x + y
     server.register_function(adder_function, 'add')

     # Register an instance; all the methods of the instance are
     # published as XML-RPC methods (in this case, just 'div').
     class MyFuncs:
         def div(self, x, y):
             return x // y

     server.register_instance(MyFuncs())

     # Run the server's main loop
     server.serve_forever()

  The following client code will call the methods made available by the
preceding server:

     import xmlrpclib

     s = xmlrpclib.ServerProxy('http://localhost:8000')
     print s.pow(2,3)  # Returns 2**3 = 8
     print s.add(2,3)  # Returns 5
     print s.div(5,2)  # Returns 5//2 = 2

     # Print list of available methods
     print s.system.listMethods()

  The following *note SimpleXMLRPCServer: 157. example is included in
the module ‘Lib/SimpleXMLRPCServer.py’:

     server = SimpleXMLRPCServer(("localhost", 8000))
     server.register_function(pow)
     server.register_function(lambda x,y: x+y, 'add')
     server.register_multicall_functions()
     server.serve_forever()

  This demo server can be run from the command line as:

     python -m SimpleXMLRPCServer

  Example client code which talks to the above server is included with
‘Lib/xmlrpclib.py’:

     server = ServerProxy("http://localhost:8000")
     print server
     multi = MultiCall(server)
     multi.pow(2, 9)
     multi.add(5, 1)
     multi.add(24, 11)
     try:
         for response in multi():
             print response
     except Error, v:
         print "ERROR", v

  And the client can be invoked directly using the following command:

     python -m xmlrpclib


File: python.info,  Node: CGIXMLRPCRequestHandler,  Prev: SimpleXMLRPCServer Objects,  Up: SimpleXMLRPCServer --- Basic XML-RPC server

5.20.24.3 CGIXMLRPCRequestHandler
.................................

The *note CGIXMLRPCRequestHandler: 1edc. class can be used to handle
XML-RPC requests sent to Python CGI scripts.

 -- Method: CGIXMLRPCRequestHandler.register_function (function[, name])

     Register a function that can respond to XML-RPC requests.  If
     _name_ is given, it will be the method name associated with
     function, otherwise _function.__name___ will be used.  _name_ can
     be either a normal or Unicode string, and may contain characters
     not legal in Python identifiers, including the period character.

 -- Method: CGIXMLRPCRequestHandler.register_instance (instance)

     Register an object which is used to expose method names which have
     not been registered using *note register_function(): 1ee9.  If
     instance contains a ‘_dispatch()’ method, it is called with the
     requested method name and the parameters from the request; the
     return value is returned to the client as the result.  If instance
     does not have a ‘_dispatch()’ method, it is searched for an
     attribute matching the name of the requested method; if the
     requested method name contains periods, each component of the
     method name is searched for individually, with the effect that a
     simple hierarchical search is performed.  The value found from this
     search is then called with the parameters from the request, and the
     return value is passed back to the client.

 -- Method: CGIXMLRPCRequestHandler.register_introspection_functions ()

     Register the XML-RPC introspection functions ‘system.listMethods’,
     ‘system.methodHelp’ and ‘system.methodSignature’.

 -- Method: CGIXMLRPCRequestHandler.register_multicall_functions ()

     Register the XML-RPC multicall function ‘system.multicall’.

 -- Method: CGIXMLRPCRequestHandler.handle_request ([request_text =
          None])

     Handle a XML-RPC request.  If _request_text_ is given, it should be
     the POST data provided by the HTTP server, otherwise the contents
     of stdin will be used.

  Example:

     class MyFuncs:
         def div(self, x, y): return x // y


     handler = CGIXMLRPCRequestHandler()
     handler.register_function(pow)
     handler.register_function(lambda x,y: x+y, 'add')
     handler.register_introspection_functions()
     handler.register_instance(MyFuncs())
     handler.handle_request()


File: python.info,  Node: DocXMLRPCServer --- Self-documenting XML-RPC server,  Prev: SimpleXMLRPCServer --- Basic XML-RPC server,  Up: Internet Protocols and Support

5.20.25 ‘DocXMLRPCServer’ — Self-documenting XML-RPC server
-----------------------------------------------------------

     Note: The *note DocXMLRPCServer: b6. module has been merged into
     ‘xmlrpc.server’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  New in version 2.3.

  The *note DocXMLRPCServer: b6. module extends the classes found in
*note SimpleXMLRPCServer: 157. to serve HTML documentation in response
to HTTP GET requests.  Servers can either be free standing, using *note
DocXMLRPCServer: b6, or embedded in a CGI environment, using *note
DocCGIXMLRPCRequestHandler: 1ef0.

 -- Class: DocXMLRPCServer.DocXMLRPCServer (addr[, requestHandler[,
          logRequests[, allow_none[, encoding[, bind_and_activate]]]]])

     Create a new server instance.  All parameters have the same meaning
     as for *note SimpleXMLRPCServer.SimpleXMLRPCServer: 1edd.;
     _requestHandler_ defaults to *note DocXMLRPCRequestHandler: 1ef2.

 -- Class: DocXMLRPCServer.DocCGIXMLRPCRequestHandler

     Create a new instance to handle XML-RPC requests in a CGI
     environment.

 -- Class: DocXMLRPCServer.DocXMLRPCRequestHandler

     Create a new request handler instance.  This request handler
     supports XML-RPC POST requests, documentation GET requests, and
     modifies logging so that the _logRequests_ parameter to the *note
     DocXMLRPCServer: b6. constructor parameter is honored.

* Menu:

* DocXMLRPCServer Objects:: 
* DocCGIXMLRPCRequestHandler:: 


File: python.info,  Node: DocXMLRPCServer Objects,  Next: DocCGIXMLRPCRequestHandler,  Up: DocXMLRPCServer --- Self-documenting XML-RPC server

5.20.25.1 DocXMLRPCServer Objects
.................................

The *note DocXMLRPCServer: b6. class is derived from *note
SimpleXMLRPCServer.SimpleXMLRPCServer: 1edd. and provides a means of
creating self-documenting, stand alone XML-RPC servers.  HTTP POST
requests are handled as XML-RPC method calls.  HTTP GET requests are
handled by generating pydoc-style HTML documentation.  This allows a
server to provide its own web-based documentation.

 -- Method: DocXMLRPCServer.set_server_title (server_title)

     Set the title used in the generated HTML documentation.  This title
     will be used inside the HTML "title" element.

 -- Method: DocXMLRPCServer.set_server_name (server_name)

     Set the name used in the generated HTML documentation.  This name
     will appear at the top of the generated documentation inside a "h1"
     element.

 -- Method: DocXMLRPCServer.set_server_documentation
          (server_documentation)

     Set the description used in the generated HTML documentation.  This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: DocCGIXMLRPCRequestHandler,  Prev: DocXMLRPCServer Objects,  Up: DocXMLRPCServer --- Self-documenting XML-RPC server

5.20.25.2 DocCGIXMLRPCRequestHandler
....................................

The *note DocCGIXMLRPCRequestHandler: 1ef0. class is derived from *note
SimpleXMLRPCServer.CGIXMLRPCRequestHandler: 1edc. and provides a means
of creating self-documenting, XML-RPC CGI scripts.  HTTP POST requests
are handled as XML-RPC method calls.  HTTP GET requests are handled by
generating pydoc-style HTML documentation.  This allows a server to
provide its own web-based documentation.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_title (server_title)

     Set the title used in the generated HTML documentation.  This title
     will be used inside the HTML "title" element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_name (server_name)

     Set the name used in the generated HTML documentation.  This name
     will appear at the top of the generated documentation inside a "h1"
     element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_documentation
          (server_documentation)

     Set the description used in the generated HTML documentation.  This
     description will appear as a paragraph, below the server name, in
     the documentation.

