This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Multimedia Services,  Next: Internationalization,  Prev: Internet Protocols and Support,  Up: The Python Standard Library

5.21 Multimedia Services
========================

The modules described in this chapter implement various algorithms or
interfaces that are mainly useful for multimedia applications.  They are
available at the discretion of the installation.  Here’s an overview:

* Menu:

* audioop: audioop --- Manipulate raw audio data. Manipulate raw audio data
* imageop: imageop --- Manipulate raw image data. Manipulate raw image data
* aifc: aifc --- Read and write AIFF and AIFC files. Read and write AIFF and AIFC files
* sunau: sunau --- Read and write Sun AU files. Read and write Sun AU files
* wave: wave --- Read and write WAV files. Read and write WAV files
* chunk: chunk --- Read IFF chunked data. Read IFF chunked data
* colorsys: colorsys --- Conversions between color systems. Conversions between color systems
* imghdr: imghdr --- Determine the type of an image. Determine the type of an image
* sndhdr: sndhdr --- Determine type of sound file. Determine type of sound file
* ossaudiodev: ossaudiodev --- Access to OSS-compatible audio devices. Access to OSS-compatible audio devices


File: python.info,  Node: audioop --- Manipulate raw audio data,  Next: imageop --- Manipulate raw image data,  Up: Multimedia Services

5.21.1 ‘audioop’ — Manipulate raw audio data
--------------------------------------------

The *note audioop: 13. module contains some useful operations on sound
fragments.  It operates on sound fragments consisting of signed integer
samples 8, 16 or 32 bits wide, stored in Python strings.  This is the
same format as used by the *note al: a. and *note sunaudiodev: 169.
modules.  All scalar items are integers, unless specified otherwise.

  This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM
encodings.

  A few of the more complicated operations only take 16-bit samples,
otherwise the sample size (in bytes) is always a parameter of the
operation.

  The module defines the following variables and functions:

 -- Exception: audioop.error

     This exception is raised on all errors, such as unknown number of
     bytes per sample, etc.

 -- Function: audioop.add (fragment1, fragment2, width)

     Return a fragment which is the addition of the two samples passed
     as parameters.  _width_ is the sample width in bytes, either ‘1’,
     ‘2’ or ‘4’.  Both fragments should have the same length.  Samples
     are truncated in case of overflow.

 -- Function: audioop.adpcm2lin (adpcmfragment, width, state)

     Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See
     the description of *note lin2adpcm(): 1f04. for details on ADPCM
     coding.  Return a tuple ‘(sample, newstate)’ where the sample has
     the width specified in _width_.

 -- Function: audioop.alaw2lin (fragment, width)

     Convert sound fragments in a-LAW encoding to linearly encoded sound
     fragments.  a-LAW encoding always uses 8 bits samples, so _width_
     refers only to the sample width of the output fragment here.

     New in version 2.5.

 -- Function: audioop.avg (fragment, width)

     Return the average over all samples in the fragment.

 -- Function: audioop.avgpp (fragment, width)

     Return the average peak-peak value over all samples in the
     fragment.  No filtering is done, so the usefulness of this routine
     is questionable.

 -- Function: audioop.bias (fragment, width, bias)

     Return a fragment that is the original fragment with a bias added
     to each sample.  Samples wrap around in case of overflow.

 -- Function: audioop.cross (fragment, width)

     Return the number of zero crossings in the fragment passed as an
     argument.

 -- Function: audioop.findfactor (fragment, reference)

     Return a factor _F_ such that ‘rms(add(fragment, mul(reference,
     -F)))’ is minimal, i.e., return the factor with which you should
     multiply _reference_ to make it match as well as possible to
     _fragment_.  The fragments should both contain 2-byte samples.

     The time taken by this routine is proportional to ‘len(fragment)’.

 -- Function: audioop.findfit (fragment, reference)

     Try to match _reference_ as well as possible to a portion of
     _fragment_ (which should be the longer fragment).  This is
     (conceptually) done by taking slices out of _fragment_, using *note
     findfactor(): 1f0a. to compute the best match, and minimizing the
     result.  The fragments should both contain 2-byte samples.  Return
     a tuple ‘(offset, factor)’ where _offset_ is the (integer) offset
     into _fragment_ where the optimal match started and _factor_ is the
     (floating-point) factor as per *note findfactor(): 1f0a.

 -- Function: audioop.findmax (fragment, length)

     Search _fragment_ for a slice of length _length_ samples (not
     bytes!)  with maximum energy, i.e., return _i_ for which
     ‘rms(fragment[i*2:(i+length)*2])’ is maximal.  The fragments should
     both contain 2-byte samples.

     The routine takes time proportional to ‘len(fragment)’.

 -- Function: audioop.getsample (fragment, width, index)

     Return the value of sample _index_ from the fragment.

 -- Function: audioop.lin2adpcm (fragment, width, state)

     Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is
     an adaptive coding scheme, whereby each 4 bit number is the
     difference between one sample and the next, divided by a (varying)
     step.  The Intel/DVI ADPCM algorithm has been selected for use by
     the IMA, so it may well become a standard.

     _state_ is a tuple containing the state of the coder.  The coder
     returns a tuple ‘(adpcmfrag, newstate)’, and the _newstate_ should
     be passed to the next call of *note lin2adpcm(): 1f04.  In the
     initial call, ‘None’ can be passed as the state.  _adpcmfrag_ is
     the ADPCM coded fragment packed 2 4-bit values per byte.

 -- Function: audioop.lin2alaw (fragment, width)

     Convert samples in the audio fragment to a-LAW encoding and return
     this as a Python string.  a-LAW is an audio encoding format whereby
     you get a dynamic range of about 13 bits using only 8 bit samples.
     It is used by the Sun audio hardware, among others.

     New in version 2.5.

 -- Function: audioop.lin2lin (fragment, width, newwidth)

     Convert samples between 1-, 2- and 4-byte formats.

          Note: In some audio formats, such as .WAV files, 16 and 32 bit
          samples are signed, but 8 bit samples are unsigned.  So when
          converting to 8 bit wide samples for these formats, you need
          to also add 128 to the result:

               new_frames = audioop.lin2lin(frames, old_width, 1)
               new_frames = audioop.bias(new_frames, 1, 128)

          The same, in reverse, has to be applied when converting from 8
          to 16 or 32 bit width samples.

 -- Function: audioop.lin2ulaw (fragment, width)

     Convert samples in the audio fragment to u-LAW encoding and return
     this as a Python string.  u-LAW is an audio encoding format whereby
     you get a dynamic range of about 14 bits using only 8 bit samples.
     It is used by the Sun audio hardware, among others.

 -- Function: audioop.max (fragment, width)

     Return the maximum of the _absolute value_ of all samples in a
     fragment.

 -- Function: audioop.maxpp (fragment, width)

     Return the maximum peak-peak value in the sound fragment.

 -- Function: audioop.minmax (fragment, width)

     Return a tuple consisting of the minimum and maximum values of all
     samples in the sound fragment.

 -- Function: audioop.mul (fragment, width, factor)

     Return a fragment that has all samples in the original fragment
     multiplied by the floating-point value _factor_.  Samples are
     truncated in case of overflow.

 -- Function: audioop.ratecv (fragment, width, nchannels, inrate,
          outrate, state[, weightA[, weightB]])

     Convert the frame rate of the input fragment.

     _state_ is a tuple containing the state of the converter.  The
     converter returns a tuple ‘(newfragment, newstate)’, and _newstate_
     should be passed to the next call of *note ratecv(): 1f15.  The
     initial call should pass ‘None’ as the state.

     The _weightA_ and _weightB_ arguments are parameters for a simple
     digital filter and default to ‘1’ and ‘0’ respectively.

 -- Function: audioop.reverse (fragment, width)

     Reverse the samples in a fragment and returns the modified
     fragment.

 -- Function: audioop.rms (fragment, width)

     Return the root-mean-square of the fragment, i.e.
     ‘sqrt(sum(S_i^2)/n)’.

     This is a measure of the power in an audio signal.

 -- Function: audioop.tomono (fragment, width, lfactor, rfactor)

     Convert a stereo fragment to a mono fragment.  The left channel is
     multiplied by _lfactor_ and the right channel by _rfactor_ before
     adding the two channels to give a mono signal.

 -- Function: audioop.tostereo (fragment, width, lfactor, rfactor)

     Generate a stereo fragment from a mono fragment.  Each pair of
     samples in the stereo fragment are computed from the mono sample,
     whereby left channel samples are multiplied by _lfactor_ and right
     channel samples by _rfactor_.

 -- Function: audioop.ulaw2lin (fragment, width)

     Convert sound fragments in u-LAW encoding to linearly encoded sound
     fragments.  u-LAW encoding always uses 8 bits samples, so _width_
     refers only to the sample width of the output fragment here.

  Note that operations such as *note mul(): 1f14. or *note max(): 1f11.
make no distinction between mono and stereo fragments, i.e.  all samples
are treated equal.  If this is a problem the stereo fragment should be
split into two mono fragments first and recombined later.  Here is an
example of how to do that:

     def mul_stereo(sample, width, lfactor, rfactor):
         lsample = audioop.tomono(sample, width, 1, 0)
         rsample = audioop.tomono(sample, width, 0, 1)
         lsample = audioop.mul(lsample, width, lfactor)
         rsample = audioop.mul(rsample, width, rfactor)
         lsample = audioop.tostereo(lsample, width, 1, 0)
         rsample = audioop.tostereo(rsample, width, 0, 1)
         return audioop.add(lsample, rsample, width)

  If you use the ADPCM coder to build network packets and you want your
protocol to be stateless (i.e.  to be able to tolerate packet loss) you
should not only transmit the data but also the state.  Note that you
should send the _initial_ state (the one you passed to *note
lin2adpcm(): 1f04.) along to the decoder, not the final state (as
returned by the coder).  If you want to use *note struct.Struct: a01. to
store the state in binary you can code the first element (the predicted
value) in 16 bits and the second (the delta index) in 8.

  The ADPCM coders have never been tried against other ADPCM coders,
only against themselves.  It could well be that I misinterpreted the
standards in which case they will not be interoperable with the
respective standards.

  The ‘find*()’ routines might look a bit funny at first sight.  They
are primarily meant to do echo cancellation.  A reasonably fast way to
do this is to pick the most energetic piece of the output sample, locate
that in the input sample and subtract the whole output sample from the
input sample:

     def echocancel(outputdata, inputdata):
         pos = audioop.findmax(outputdata, 800)    # one tenth second
         out_test = outputdata[pos*2:]
         in_test = inputdata[pos*2:]
         ipos, factor = audioop.findfit(in_test, out_test)
         # Optional (for better cancellation):
         # factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],
         #              out_test)
         prefill = '\0'*(pos+ipos)*2
         postfill = '\0'*(len(inputdata)-len(prefill)-len(outputdata))
         outputdata = prefill + audioop.mul(outputdata,2,-factor) + postfill
         return audioop.add(inputdata, outputdata, 2)


File: python.info,  Node: imageop --- Manipulate raw image data,  Next: aifc --- Read and write AIFF and AIFC files,  Prev: audioop --- Manipulate raw audio data,  Up: Multimedia Services

5.21.2 ‘imageop’ — Manipulate raw image data
--------------------------------------------

Deprecated since version 2.6: The *note imageop: f1. module has been
removed in Python 3.

  The *note imageop: f1. module contains some useful operations on
images.  It operates on images consisting of 8 or 32 bit pixels stored
in Python strings.  This is the same format as used by ‘gl.lrectwrite()’
and the *note imgfile: f3. module.

  The module defines the following variables and functions:

 -- Exception: imageop.error

     This exception is raised on all errors, such as unknown number of
     bits per pixel, etc.

 -- Function: imageop.crop (image, psize, width, height, x0, y0, x1, y1)

     Return the selected part of _image_, which should be _width_ by
     _height_ in size and consist of pixels of _psize_ bytes.  _x0_,
     _y0_, _x1_ and _y1_ are like the ‘gl.lrectread()’ parameters, i.e.
     the boundary is included in the new image.  The new boundaries need
     not be inside the picture.  Pixels that fall outside the old image
     will have their value set to zero.  If _x0_ is bigger than _x1_ the
     new image is mirrored.  The same holds for the y coordinates.

 -- Function: imageop.scale (image, psize, width, height, newwidth,
          newheight)

     Return _image_ scaled to size _newwidth_ by _newheight_.  No
     interpolation is done, scaling is done by simple-minded pixel
     duplication or removal.  Therefore, computer-generated images or
     dithered images will not look nice after scaling.

 -- Function: imageop.tovideo (image, psize, width, height)

     Run a vertical low-pass filter over an image.  It does so by
     computing each destination pixel as the average of two
     vertically-aligned source pixels.  The main use of this routine is
     to forestall excessive flicker if the image is displayed on a video
     device that uses interlacing, hence the name.

 -- Function: imageop.grey2mono (image, width, height, threshold)

     Convert a 8-bit deep greyscale image to a 1-bit deep image by
     thresholding all the pixels.  The resulting image is tightly packed
     and is probably only useful as an argument to *note mono2grey():
     1f22.

 -- Function: imageop.dither2mono (image, width, height)

     Convert an 8-bit greyscale image to a 1-bit monochrome image using
     a (simple-minded) dithering algorithm.

 -- Function: imageop.mono2grey (image, width, height, p0, p1)

     Convert a 1-bit monochrome image to an 8 bit greyscale or color
     image.  All pixels that are zero-valued on input get value _p0_ on
     output and all one-value input pixels get value _p1_ on output.  To
     convert a monochrome black-and-white image to greyscale pass the
     values ‘0’ and ‘255’ respectively.

 -- Function: imageop.grey2grey4 (image, width, height)

     Convert an 8-bit greyscale image to a 4-bit greyscale image without
     dithering.

 -- Function: imageop.grey2grey2 (image, width, height)

     Convert an 8-bit greyscale image to a 2-bit greyscale image without
     dithering.

 -- Function: imageop.dither2grey2 (image, width, height)

     Convert an 8-bit greyscale image to a 2-bit greyscale image with
     dithering.  As for *note dither2mono(): 1f23, the dithering
     algorithm is currently very simple.

 -- Function: imageop.grey42grey (image, width, height)

     Convert a 4-bit greyscale image to an 8-bit greyscale image.

 -- Function: imageop.grey22grey (image, width, height)

     Convert a 2-bit greyscale image to an 8-bit greyscale image.

 -- Data: imageop.backward_compatible

     If set to 0, the functions in this module use a non-backward
     compatible way of representing multi-byte pixels on little-endian
     systems.  The SGI for which this module was originally written is a
     big-endian system, so setting this variable will have no effect.
     However, the code wasn’t originally intended to run on anything
     else, so it made assumptions about byte order which are not
     universal.  Setting this variable to 0 will cause the byte order to
     be reversed on little-endian systems, so that it then is the same
     as on big-endian systems.


File: python.info,  Node: aifc --- Read and write AIFF and AIFC files,  Next: sunau --- Read and write Sun AU files,  Prev: imageop --- Manipulate raw image data,  Up: Multimedia Services

5.21.3 ‘aifc’ — Read and write AIFF and AIFC files
--------------------------------------------------

*Source code:* Lib/aifc.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides support for reading and writing AIFF and AIFF-C
files.  AIFF is Audio Interchange File Format, a format for storing
digital audio samples in a file.  AIFF-C is a newer version of the
format that includes the ability to compress the audio data.

     Note: Some operations may only work under IRIX; these will raise
     *note ImportError: 370. when attempting to import the ‘cl’ module,
     which is only available on IRIX.

  Audio files have a number of parameters that describe the audio data.
The sampling rate or frame rate is the number of times per second the
sound is sampled.  The number of channels indicate if the audio is mono,
stereo, or quadro.  Each frame consists of one sample per channel.  The
sample size is the size in bytes of each sample.  Thus a frame consists
of _nchannels_*_samplesize_ bytes, and a second’s worth of audio
consists of _nchannels_*_samplesize_*_framerate_ bytes.

  For example, CD quality audio has a sample size of two bytes (16
bits), uses two channels (stereo) and has a frame rate of 44,100
frames/second.  This gives a frame size of 4 bytes (2*2), and a second’s
worth occupies 2*2*44100 bytes (176,400 bytes).

  Module *note aifc: 8. defines the following function:

 -- Function: aifc.open (file[, mode])

     Open an AIFF or AIFF-C file and return an object instance with
     methods that are described below.  The argument _file_ is either a
     string naming a file or a file object.  _mode_ must be ‘'r'’ or
     ‘'rb'’ when the file must be opened for reading, or ‘'w'’ or ‘'wb'’
     when the file must be opened for writing.  If omitted, ‘file.mode’
     is used if it exists, otherwise ‘'rb'’ is used.  When used for
     writing, the file object should be seekable, unless you know ahead
     of time how many samples you are going to write in total and use
     ‘writeframesraw()’ and ‘setnframes()’.

  Objects returned by *note open(): 1f2c. when a file is opened for
reading have the following methods:

 -- Method: aifc.getnchannels ()

     Return the number of audio channels (1 for mono, 2 for stereo).

 -- Method: aifc.getsampwidth ()

     Return the size in bytes of individual samples.

 -- Method: aifc.getframerate ()

     Return the sampling rate (number of audio frames per second).

 -- Method: aifc.getnframes ()

     Return the number of audio frames in the file.

 -- Method: aifc.getcomptype ()

     Return a four-character string describing the type of compression
     used in the audio file.  For AIFF files, the returned value is
     ‘'NONE'’.

 -- Method: aifc.getcompname ()

     Return a human-readable description of the type of compression used
     in the audio file.  For AIFF files, the returned value is ‘'not
     compressed'’.

 -- Method: aifc.getparams ()

     Return a tuple consisting of all of the above values in the above
     order.

 -- Method: aifc.getmarkers ()

     Return a list of markers in the audio file.  A marker consists of a
     tuple of three elements.  The first is the mark ID (an integer),
     the second is the mark position in frames from the beginning of the
     data (an integer), the third is the name of the mark (a string).

 -- Method: aifc.getmark (id)

     Return the tuple as described in *note getmarkers(): 1f34. for the
     mark with the given _id_.

 -- Method: aifc.readframes (nframes)

     Read and return the next _nframes_ frames from the audio file.  The
     returned data is a string containing for each frame the
     uncompressed samples of all channels.

 -- Method: aifc.rewind ()

     Rewind the read pointer.  The next *note readframes(): 1f36. will
     start from the beginning.

 -- Method: aifc.setpos (pos)

     Seek to the specified frame number.

 -- Method: aifc.tell ()

     Return the current frame number.

 -- Method: aifc.close ()

     Close the AIFF file.  After calling this method, the object can no
     longer be used.

  Objects returned by *note open(): 1f2c. when a file is opened for
writing have all the above methods, except for ‘readframes()’ and
‘setpos()’.  In addition the following methods exist.  The ‘get*()’
methods can only be called after the corresponding ‘set*()’ methods have
been called.  Before the first ‘writeframes()’ or ‘writeframesraw()’,
all parameters except for the number of frames must be filled in.

 -- Method: aifc.aiff ()

     Create an AIFF file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in ‘'.aiff'’ in which
     case the default is an AIFF file.

 -- Method: aifc.aifc ()

     Create an AIFF-C file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in ‘'.aiff'’ in which
     case the default is an AIFF file.

 -- Method: aifc.setnchannels (nchannels)

     Specify the number of channels in the audio file.

 -- Method: aifc.setsampwidth (width)

     Specify the size in bytes of audio samples.

 -- Method: aifc.setframerate (rate)

     Specify the sampling frequency in frames per second.

 -- Method: aifc.setnframes (nframes)

     Specify the number of frames that are to be written to the audio
     file.  If this parameter is not set, or not set correctly, the file
     needs to support seeking.

 -- Method: aifc.setcomptype (type, name)

     Specify the compression type.  If not specified, the audio data
     will not be compressed.  In AIFF files, compression is not
     possible.  The name parameter should be a human-readable
     description of the compression type, the type parameter should be a
     four-character string.  Currently the following compression types
     are supported: NONE, ULAW, ALAW, G722.

 -- Method: aifc.setparams (nchannels, sampwidth, framerate, comptype,
          compname)

     Set all the above parameters at once.  The argument is a tuple
     consisting of the various parameters.  This means that it is
     possible to use the result of a *note getparams(): 1f33. call as
     argument to *note setparams(): 1f42.

 -- Method: aifc.setmark (id, pos, name)

     Add a mark with the given id (larger than 0), and the given name at
     the given position.  This method can be called at any time before
     *note close(): 1f3a.

 -- Method: aifc.tell ()

     Return the current write position in the output file.  Useful in
     combination with *note setmark(): 1f43.

 -- Method: aifc.writeframes (data)

     Write data to the output file.  This method can only be called
     after the audio file parameters have been set.

 -- Method: aifc.writeframesraw (data)

     Like *note writeframes(): 1f44, except that the header of the audio
     file is not updated.

 -- Method: aifc.close ()

     Close the AIFF file.  The header of the file is updated to reflect
     the actual size of the audio data.  After calling this method, the
     object can no longer be used.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/aifc.py


File: python.info,  Node: sunau --- Read and write Sun AU files,  Next: wave --- Read and write WAV files,  Prev: aifc --- Read and write AIFF and AIFC files,  Up: Multimedia Services

5.21.4 ‘sunau’ — Read and write Sun AU files
--------------------------------------------

*Source code:* Lib/sunau.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note sunau: 168. module provides a convenient interface to the
Sun AU sound format.  Note that this module is interface-compatible with
the modules *note aifc: 8. and *note wave: 194.

  An audio file consists of a header followed by the data.  The fields
of the header are:

Field               Contents
                    
------------------------------------------------------------------------
                    
magic word          The four bytes ‘.snd’.
                    
                    
header size         Size of the header, including info, in bytes.
                    
                    
data size           Physical size of the data, in bytes.
                    
                    
encoding            Indicates how the audio samples are encoded.
                    
                    
sample rate         The sampling rate.
                    
                    
# of channels       The number of channels in the samples.
                    
                    
info                ASCII string giving a description of the audio
                    file (padded with null bytes).
                    

  Apart from the info field, all header fields are 4 bytes in size.
They are all 32-bit unsigned integers encoded in big-endian byte order.

  The *note sunau: 168. module defines the following functions:

 -- Function: sunau.open (file, mode)

     If _file_ is a string, open the file by that name, otherwise treat
     it as a seekable file-like object.  _mode_ can be any of

     ‘'r'’

          Read only mode.

     ‘'w'’

          Write only mode.

     Note that it does not allow read/write files.

     A _mode_ of ‘'r'’ returns a ‘AU_read’ object, while a _mode_ of
     ‘'w'’ or ‘'wb'’ returns a ‘AU_write’ object.

 -- Function: sunau.openfp (file, mode)

     A synonym for *note open(): 1f48, maintained for backwards
     compatibility.

  The *note sunau: 168. module defines the following exception:

 -- Exception: sunau.Error

     An error raised when something is impossible because of Sun AU
     specs or implementation deficiency.

  The *note sunau: 168. module defines the following data items:

 -- Data: sunau.AUDIO_FILE_MAGIC

     An integer every valid Sun AU file begins with, stored in
     big-endian form.  This is the string ‘.snd’ interpreted as an
     integer.

 -- Data: sunau.AUDIO_FILE_ENCODING_MULAW_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_16
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_24
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_32
 -- Data: sunau.AUDIO_FILE_ENCODING_ALAW_8

     Values of the encoding field from the AU header which are supported
     by this module.

 -- Data: sunau.AUDIO_FILE_ENCODING_FLOAT
 -- Data: sunau.AUDIO_FILE_ENCODING_DOUBLE
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G721
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G722
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5

     Additional known values of the encoding field from the AU header,
     but which are not supported by this module.

* Menu:

* AU_read Objects:: 
* AU_write Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/sunau.py


File: python.info,  Node: AU_read Objects,  Next: AU_write Objects,  Up: sunau --- Read and write Sun AU files

5.21.4.1 AU_read Objects
........................

AU_read objects, as returned by *note open(): 1f48. above, have the
following methods:

 -- Method: AU_read.close ()

     Close the stream, and make the instance unusable.  (This is called
     automatically on deletion.)

 -- Method: AU_read.getnchannels ()

     Returns number of audio channels (1 for mone, 2 for stereo).

 -- Method: AU_read.getsampwidth ()

     Returns sample width in bytes.

 -- Method: AU_read.getframerate ()

     Returns sampling frequency.

 -- Method: AU_read.getnframes ()

     Returns number of audio frames.

 -- Method: AU_read.getcomptype ()

     Returns compression type.  Supported compression types are
     ‘'ULAW'’, ‘'ALAW'’ and ‘'NONE'’.

 -- Method: AU_read.getcompname ()

     Human-readable version of *note getcomptype(): 1f5f.  The supported
     types have the respective names ‘'CCITT G.711 u-law'’, ‘'CCITT
     G.711 A-law'’ and ‘'not compressed'’.

 -- Method: AU_read.getparams ()

     Returns a tuple ‘(nchannels, sampwidth, framerate, nframes,
     comptype, compname)’, equivalent to output of the ‘get*()’ methods.

 -- Method: AU_read.readframes (n)

     Reads and returns at most _n_ frames of audio, as a string of
     bytes.  The data will be returned in linear format.  If the
     original data is in u-LAW format, it will be converted.

 -- Method: AU_read.rewind ()

     Rewind the file pointer to the beginning of the audio stream.

  The following two methods define a term "position" which is compatible
between them, and is otherwise implementation dependent.

 -- Method: AU_read.setpos (pos)

     Set the file pointer to the specified position.  Only values
     returned from *note tell(): 1f65. should be used for _pos_.

 -- Method: AU_read.tell ()

     Return current file pointer position.  Note that the returned value
     has nothing to do with the actual position in the file.

  The following two functions are defined for compatibility with the
*note aifc: 8, and don’t do anything interesting.

 -- Method: AU_read.getmarkers ()

     Returns ‘None’.

 -- Method: AU_read.getmark (id)

     Raise an error.


File: python.info,  Node: AU_write Objects,  Prev: AU_read Objects,  Up: sunau --- Read and write Sun AU files

5.21.4.2 AU_write Objects
.........................

AU_write objects, as returned by *note open(): 1f48. above, have the
following methods:

 -- Method: AU_write.setnchannels (n)

     Set the number of channels.

 -- Method: AU_write.setsampwidth (n)

     Set the sample width (in bytes.)

 -- Method: AU_write.setframerate (n)

     Set the frame rate.

 -- Method: AU_write.setnframes (n)

     Set the number of frames.  This can be later changed, when and if
     more frames are written.

 -- Method: AU_write.setcomptype (type, name)

     Set the compression type and description.  Only ‘'NONE'’ and
     ‘'ULAW'’ are supported on output.

 -- Method: AU_write.setparams (tuple)

     The _tuple_ should be ‘(nchannels, sampwidth, framerate, nframes,
     comptype, compname)’, with values valid for the ‘set*()’ methods.
     Set all parameters.

 -- Method: AU_write.tell ()

     Return current position in the file, with the same disclaimer for
     the *note AU_read.tell(): 1f65. and *note AU_read.setpos(): 1f64.
     methods.

 -- Method: AU_write.writeframesraw (data)

     Write audio frames, without correcting _nframes_.

 -- Method: AU_write.writeframes (data)

     Write audio frames and make sure _nframes_ is correct.

 -- Method: AU_write.close ()

     Make sure _nframes_ is correct, and close the file.

     This method is called upon deletion.

  Note that it is invalid to set any parameters after calling
‘writeframes()’ or ‘writeframesraw()’.


File: python.info,  Node: wave --- Read and write WAV files,  Next: chunk --- Read IFF chunked data,  Prev: sunau --- Read and write Sun AU files,  Up: Multimedia Services

5.21.5 ‘wave’ — Read and write WAV files
----------------------------------------

*Source code:* Lib/wave.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note wave: 194. module provides a convenient interface to the WAV
sound format.  It does not support compression/decompression, but it
does support mono/stereo.

  The *note wave: 194. module defines the following function and
exception:

 -- Function: wave.open (file[, mode])

     If _file_ is a string, open the file by that name, otherwise treat
     it as a seekable file-like object.  _mode_ can be any of

     ‘'r'’, ‘'rb'’

          Read only mode.

     ‘'w'’, ‘'wb'’

          Write only mode.

     Note that it does not allow read/write WAV files.

     A _mode_ of ‘'r'’ or ‘'rb'’ returns a ‘Wave_read’ object, while a
     _mode_ of ‘'w'’ or ‘'wb'’ returns a ‘Wave_write’ object.  If _mode_
     is omitted and a file-like object is passed as _file_, ‘file.mode’
     is used as the default value for _mode_ (the ‘'b'’ flag is still
     added if necessary).

     If you pass in a file-like object, the wave object will not close
     it when its ‘close()’ method is called; it is the caller’s
     responsibility to close the file object.

 -- Function: wave.openfp (file, mode)

     A synonym for *note open(): 1f76, maintained for backwards
     compatibility.

 -- Exception: wave.Error

     An error raised when something is impossible because it violates
     the WAV specification or hits an implementation deficiency.

* Menu:

* Wave_read Objects:: 
* Wave_write Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/wave.py


File: python.info,  Node: Wave_read Objects,  Next: Wave_write Objects,  Up: wave --- Read and write WAV files

5.21.5.1 Wave_read Objects
..........................

Wave_read objects, as returned by *note open(): 1f76, have the following
methods:

 -- Method: Wave_read.close ()

     Close the stream if it was opened by *note wave: 194, and make the
     instance unusable.  This is called automatically on object
     collection.

 -- Method: Wave_read.getnchannels ()

     Returns number of audio channels (‘1’ for mono, ‘2’ for stereo).

 -- Method: Wave_read.getsampwidth ()

     Returns sample width in bytes.

 -- Method: Wave_read.getframerate ()

     Returns sampling frequency.

 -- Method: Wave_read.getnframes ()

     Returns number of audio frames.

 -- Method: Wave_read.getcomptype ()

     Returns compression type (‘'NONE'’ is the only supported type).

 -- Method: Wave_read.getcompname ()

     Human-readable version of *note getcomptype(): 1f80.  Usually ‘'not
     compressed'’ parallels ‘'NONE'’.

 -- Method: Wave_read.getparams ()

     Returns a tuple ‘(nchannels, sampwidth, framerate, nframes,
     comptype, compname)’, equivalent to output of the ‘get*()’ methods.

 -- Method: Wave_read.readframes (n)

     Reads and returns at most _n_ frames of audio, as a string of
     bytes.

 -- Method: Wave_read.rewind ()

     Rewind the file pointer to the beginning of the audio stream.

  The following two methods are defined for compatibility with the *note
aifc: 8. module, and don’t do anything interesting.

 -- Method: Wave_read.getmarkers ()

     Returns ‘None’.

 -- Method: Wave_read.getmark (id)

     Raise an error.

  The following two methods define a term "position" which is compatible
between them, and is otherwise implementation dependent.

 -- Method: Wave_read.setpos (pos)

     Set the file pointer to the specified position.

 -- Method: Wave_read.tell ()

     Return current file pointer position.


File: python.info,  Node: Wave_write Objects,  Prev: Wave_read Objects,  Up: wave --- Read and write WAV files

5.21.5.2 Wave_write Objects
...........................

Wave_write objects, as returned by *note open(): 1f76, have the
following methods:

 -- Method: Wave_write.close ()

     Make sure _nframes_ is correct, and close the file if it was opened
     by *note wave: 194.  This method is called upon object collection.

 -- Method: Wave_write.setnchannels (n)

     Set the number of channels.

 -- Method: Wave_write.setsampwidth (n)

     Set the sample width to _n_ bytes.

 -- Method: Wave_write.setframerate (n)

     Set the frame rate to _n_.

 -- Method: Wave_write.setnframes (n)

     Set the number of frames to _n_.  This will be changed later if
     more frames are written.

 -- Method: Wave_write.setcomptype (type, name)

     Set the compression type and description.  At the moment, only
     compression type ‘NONE’ is supported, meaning no compression.

 -- Method: Wave_write.setparams (tuple)

     The _tuple_ should be ‘(nchannels, sampwidth, framerate, nframes,
     comptype, compname)’, with values valid for the ‘set*()’ methods.
     Sets all parameters.

 -- Method: Wave_write.tell ()

     Return current position in the file, with the same disclaimer for
     the *note Wave_read.tell(): 1f88. and *note Wave_read.setpos():
     1f87. methods.

 -- Method: Wave_write.writeframesraw (data)

     Write audio frames, without correcting _nframes_.

 -- Method: Wave_write.writeframes (data)

     Write audio frames and make sure _nframes_ is correct.

  Note that it is invalid to set any parameters after calling
‘writeframes()’ or ‘writeframesraw()’, and any attempt to do so will
raise *note wave.Error: 1f78.


File: python.info,  Node: chunk --- Read IFF chunked data,  Next: colorsys --- Conversions between color systems,  Prev: wave --- Read and write WAV files,  Up: Multimedia Services

5.21.6 ‘chunk’ — Read IFF chunked data
--------------------------------------

This module provides an interface for reading files that use EA IFF 85
chunks.  (1) This format is used in at least the Audio Interchange File
Format (AIFF/AIFF-C) and the Real Media File Format (RMFF). The WAVE
audio file format is closely related and can also be read using this
module.

  A chunk has the following structure:

Offset        Length       Contents
                           
---------------------------------------------------------------
                           
0             4            Chunk ID
                           
                           
4             4            Size of chunk in big-endian byte
                           order, not including the header
                           
                           
8             _n_          Data bytes, where _n_ is the size
                           given in the preceding field
                           
                           
8 + _n_       0 or 1       Pad byte needed if _n_ is odd and
                           chunk alignment is used
                           

  The ID is a 4-byte string which identifies the type of chunk.

  The size field (a 32-bit value, encoded using big-endian byte order)
gives the size of the chunk data, not including the 8-byte header.

  Usually an IFF-type file consists of one or more chunks.  The proposed
usage of the *note Chunk: 1f97. class defined here is to instantiate an
instance at the start of each chunk and read from the instance until it
reaches the end, after which a new instance can be instantiated.  At the
end of the file, creating a new instance will fail with a *note
EOFError: 88a. exception.

 -- Class: chunk.Chunk (file[, align, bigendian, inclheader])

     Class which represents a chunk.  The _file_ argument is expected to
     be a file-like object.  An instance of this class is specifically
     allowed.  The only method that is needed is *note read(): 90f.  If
     the methods *note seek(): 90e. and *note tell(): 911. are present
     and don’t raise an exception, they are also used.  If these methods
     are present and raise an exception, they are expected to not have
     altered the object.  If the optional argument _align_ is true,
     chunks are assumed to be aligned on 2-byte boundaries.  If _align_
     is false, no alignment is assumed.  The default value is true.  If
     the optional argument _bigendian_ is false, the chunk size is
     assumed to be in little-endian order.  This is needed for WAVE
     audio files.  The default value is true.  If the optional argument
     _inclheader_ is true, the size given in the chunk header includes
     the size of the header.  The default value is false.

     A *note Chunk: 1f97. object supports the following methods:

      -- Method: getname ()

          Returns the name (ID) of the chunk.  This is the first 4 bytes
          of the chunk.

      -- Method: getsize ()

          Returns the size of the chunk.

      -- Method: close ()

          Close and skip to the end of the chunk.  This does not close
          the underlying file.

     The remaining methods will raise *note IOError: 1fa. if called
     after the *note close(): 1f9a. method has been called.

      -- Method: isatty ()

          Returns ‘False’.

      -- Method: seek (pos[, whence])

          Set the chunk’s current position.  The _whence_ argument is
          optional and defaults to ‘0’ (absolute file positioning);
          other values are ‘1’ (seek relative to the current position)
          and ‘2’ (seek relative to the file’s end).  There is no return
          value.  If the underlying file does not allow seek, only
          forward seeks are allowed.

      -- Method: tell ()

          Return the current position into the chunk.

      -- Method: read ([size])

          Read at most _size_ bytes from the chunk (less if the read
          hits the end of the chunk before obtaining _size_ bytes).  If
          the _size_ argument is negative or omitted, read all data
          until the end of the chunk.  The bytes are returned as a
          string object.  An empty string is returned when the end of
          the chunk is encountered immediately.

      -- Method: skip ()

          Skip to the end of the chunk.  All further calls to *note
          read(): 1f9e. for the chunk will return ‘''’.  If you are not
          interested in the contents of the chunk, this method should be
          called so that the file points to the start of the next chunk.

   ---------- Footnotes ----------

   (1) "EA IFF 85" Standard for Interchange Format Files, Jerry
Morrison, Electronic Arts, January 1985.


File: python.info,  Node: colorsys --- Conversions between color systems,  Next: imghdr --- Determine the type of an image,  Prev: chunk --- Read IFF chunked data,  Up: Multimedia Services

5.21.7 ‘colorsys’ — Conversions between color systems
-----------------------------------------------------

*Source code:* Lib/colorsys.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note colorsys: 67. module defines bidirectional conversions of
color values between colors expressed in the RGB (Red Green Blue) color
space used in computer monitors and three other coordinate systems: YIQ,
HLS (Hue Lightness Saturation) and HSV (Hue Saturation Value).
Coordinates in all of these color spaces are floating point values.  In
the YIQ space, the Y coordinate is between 0 and 1, but the I and Q
coordinates can be positive or negative.  In all other spaces, the
coordinates are all between 0 and 1.

See also
........

More information about color spaces can be found at
‘http://www.poynton.com/ColorFAQ.html’ and
‘http://www.cambridgeincolour.com/tutorials/color-spaces.htm’.

  The *note colorsys: 67. module defines the following functions:

 -- Function: colorsys.rgb_to_yiq (r, g, b)

     Convert the color from RGB coordinates to YIQ coordinates.

 -- Function: colorsys.yiq_to_rgb (y, i, q)

     Convert the color from YIQ coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hls (r, g, b)

     Convert the color from RGB coordinates to HLS coordinates.

 -- Function: colorsys.hls_to_rgb (h, l, s)

     Convert the color from HLS coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hsv (r, g, b)

     Convert the color from RGB coordinates to HSV coordinates.

 -- Function: colorsys.hsv_to_rgb (h, s, v)

     Convert the color from HSV coordinates to RGB coordinates.

  Example:

     >>> import colorsys
     >>> colorsys.rgb_to_hsv(0.2, 0.4, 0.4)
     (0.5, 0.5, 0.4)
     >>> colorsys.hsv_to_rgb(0.5, 0.5, 0.4)
     (0.2, 0.4, 0.4)

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/colorsys.py


File: python.info,  Node: imghdr --- Determine the type of an image,  Next: sndhdr --- Determine type of sound file,  Prev: colorsys --- Conversions between color systems,  Up: Multimedia Services

5.21.8 ‘imghdr’ — Determine the type of an image
------------------------------------------------

*Source code:* Lib/imghdr.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note imghdr: f4. module determines the type of image contained in
a file or byte stream.

  The *note imghdr: f4. module defines the following function:

 -- Function: imghdr.what (filename[, h])

     Tests the image data contained in the file named by _filename_, and
     returns a string describing the image type.  If optional _h_ is
     provided, the _filename_ is ignored and _h_ is assumed to contain
     the byte stream to test.

  The following image types are recognized, as listed below with the
return value from *note what(): 1faa.:

Value            Image format
                 
---------------------------------------------------------
                 
‘'rgb'’          SGI ImgLib Files
                 
                 
‘'gif'’          GIF 87a and 89a Files
                 
                 
‘'pbm'’          Portable Bitmap Files
                 
                 
‘'pgm'’          Portable Graymap Files
                 
                 
‘'ppm'’          Portable Pixmap Files
                 
                 
‘'tiff'’         TIFF Files
                 
                 
‘'rast'’         Sun Raster Files
                 
                 
‘'xbm'’          X Bitmap Files
                 
                 
‘'jpeg'’         JPEG data in JFIF or Exif formats
                 
                 
‘'bmp'’          BMP files
                 
                 
‘'png'’          Portable Network Graphics
                 

  New in version 2.5: Exif detection.

  You can extend the list of file types *note imghdr: f4. can recognize
by appending to this variable:

 -- Data: imghdr.tests

     A list of functions performing the individual tests.  Each function
     takes two arguments: the byte-stream and an open file-like object.
     When *note what(): 1faa. is called with a byte-stream, the
     file-like object will be ‘None’.

     The test function should return a string describing the image type
     if the test succeeded, or ‘None’ if it failed.

  Example:

     >>> import imghdr
     >>> imghdr.what('bass.gif')
     'gif'

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/imghdr.py


File: python.info,  Node: sndhdr --- Determine type of sound file,  Next: ossaudiodev --- Access to OSS-compatible audio devices,  Prev: imghdr --- Determine the type of an image,  Up: Multimedia Services

5.21.9 ‘sndhdr’ — Determine type of sound file
----------------------------------------------

*Source code:* Lib/sndhdr.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note sndhdr: 15b. provides utility functions which attempt to
determine the type of sound data which is in a file.  When these
functions are able to determine what type of sound data is stored in a
file, they return a tuple ‘(type, sampling_rate, channels, frames,
bits_per_sample)’.  The value for _type_ indicates the data type and
will be one of the strings ‘'aifc'’, ‘'aiff'’, ‘'au'’, ‘'hcom'’,
‘'sndr'’, ‘'sndt'’, ‘'voc'’, ‘'wav'’, ‘'8svx'’, ‘'sb'’, ‘'ub'’, or
‘'ul'’.  The _sampling_rate_ will be either the actual value or ‘0’ if
unknown or difficult to decode.  Similarly, _channels_ will be either
the number of channels or ‘0’ if it cannot be determined or if the value
is difficult to decode.  The value for _frames_ will be either the
number of frames or ‘-1’.  The last item in the tuple,
_bits_per_sample_, will either be the sample size in bits or ‘'A'’ for
A-LAW or ‘'U'’ for u-LAW.

 -- Function: sndhdr.what (filename)

     Determines the type of sound data stored in the file _filename_
     using *note whathdr(): 1faf.  If it succeeds, returns a tuple as
     described above, otherwise ‘None’ is returned.

 -- Function: sndhdr.whathdr (filename)

     Determines the type of sound data stored in a file based on the
     file header.  The name of the file is given by _filename_.  This
     function returns a tuple as described above on success, or ‘None’.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/sndhdr.py


File: python.info,  Node: ossaudiodev --- Access to OSS-compatible audio devices,  Prev: sndhdr --- Determine type of sound file,  Up: Multimedia Services

5.21.10 ‘ossaudiodev’ — Access to OSS-compatible audio devices
--------------------------------------------------------------

New in version 2.3.

  This module allows you to access the OSS (Open Sound System) audio
interface.  OSS is available for a wide range of open-source and
commercial Unices, and is the standard audio interface for Linux and
recent versions of FreeBSD.

See also
........

Open Sound System Programmer’s Guide(1)

     the official documentation for the OSS C API

  The module defines a large number of constants supplied by the OSS
device driver; see ‘<sys/soundcard.h>’ on either Linux or FreeBSD for a
listing.

  *note ossaudiodev: 12a. defines the following variables and functions:

 -- Exception: ossaudiodev.OSSAudioError

     This exception is raised on certain errors.  The argument is a
     string describing what went wrong.

     (If *note ossaudiodev: 12a. receives an error from a system call
     such as ‘open()’, ‘write()’, or ‘ioctl()’, it raises *note IOError:
     1fa.  Errors detected directly by *note ossaudiodev: 12a. result in
     *note OSSAudioError: 1fb2.)

     (For backwards compatibility, the exception class is also available
     as ‘ossaudiodev.error’.)

 -- Function: ossaudiodev.open (mode)

 -- Function: ossaudiodev.open (device, mode)

     Open an audio device and return an OSS audio device object.  This
     object supports many file-like methods, such as ‘read()’,
     ‘write()’, and ‘fileno()’ (although there are subtle differences
     between conventional Unix read/write semantics and those of OSS
     audio devices).  It also supports a number of audio-specific
     methods; see below for the complete list of methods.

     _device_ is the audio device filename to use.  If it is not
     specified, this module first looks in the environment variable
     ‘AUDIODEV’ for a device to use.  If not found, it falls back to
     ‘/dev/dsp’.

     _mode_ is one of ‘'r'’ for read-only (record) access, ‘'w'’ for
     write-only (playback) access and ‘'rw'’ for both.  Since many sound
     cards only allow one process to have the recorder or player open at
     a time, it is a good idea to open the device only for the activity
     needed.  Further, some sound cards are half-duplex: they can be
     opened for reading or writing, but not both at once.

     Note the unusual calling syntax: the _first_ argument is optional,
     and the second is required.  This is a historical artifact for
     compatibility with the older ‘linuxaudiodev’ module which *note
     ossaudiodev: 12a. supersedes.

 -- Function: ossaudiodev.openmixer ([device])

     Open a mixer device and return an OSS mixer device object.
     _device_ is the mixer device filename to use.  If it is not
     specified, this module first looks in the environment variable
     ‘MIXERDEV’ for a device to use.  If not found, it falls back to
     ‘/dev/mixer’.

* Menu:

* Audio Device Objects:: 
* Mixer Device Objects:: 

   ---------- Footnotes ----------

   (1) http://www.opensound.com/pguide/oss.pdf


File: python.info,  Node: Audio Device Objects,  Next: Mixer Device Objects,  Up: ossaudiodev --- Access to OSS-compatible audio devices

5.21.10.1 Audio Device Objects
..............................

Before you can write to or read from an audio device, you must call
three methods in the correct order:

  1. ‘setfmt()’ to set the output format

  2. ‘channels()’ to set the number of channels

  3. ‘speed()’ to set the sample rate

  Alternately, you can use the ‘setparameters()’ method to set all three
audio parameters at once.  This is more convenient, but may not be as
flexible in all cases.

  The audio device objects returned by *note open(): 1fb3. define the
following methods and (read-only) attributes:

 -- Method: oss_audio_device.close ()

     Explicitly close the audio device.  When you are done writing to or
     reading from an audio device, you should explicitly close it.  A
     closed device cannot be used again.

 -- Method: oss_audio_device.fileno ()

     Return the file descriptor associated with the device.

 -- Method: oss_audio_device.read (size)

     Read _size_ bytes from the audio input and return them as a Python
     string.  Unlike most Unix device drivers, OSS audio devices in
     blocking mode (the default) will block *note read(): 1fb9. until
     the entire requested amount of data is available.

 -- Method: oss_audio_device.write (data)

     Write the Python string _data_ to the audio device and return the
     number of bytes written.  If the audio device is in blocking mode
     (the default), the entire string is always written (again, this is
     different from usual Unix device semantics).  If the device is in
     non-blocking mode, some data may not be written —see *note
     writeall(): 1fbb.

 -- Method: oss_audio_device.writeall (data)

     Write the entire Python string _data_ to the audio device: waits
     until the audio device is able to accept data, writes as much data
     as it will accept, and repeats until _data_ has been completely
     written.  If the device is in blocking mode (the default), this has
     the same effect as *note write(): 1fba.; *note writeall(): 1fbb. is
     only useful in non-blocking mode.  Has no return value, since the
     amount of data written is always equal to the amount of data
     supplied.

  The following methods each map to exactly one ‘ioctl()’ system call.
The correspondence is obvious: for example, ‘setfmt()’ corresponds to
the ‘SNDCTL_DSP_SETFMT’ ioctl, and ‘sync()’ to ‘SNDCTL_DSP_SYNC’ (this
can be useful when consulting the OSS documentation).  If the underlying
‘ioctl()’ fails, they all raise *note IOError: 1fa.

 -- Method: oss_audio_device.nonblock ()

     Put the device into non-blocking mode.  Once in non-blocking mode,
     there is no way to return it to blocking mode.

 -- Method: oss_audio_device.getfmts ()

     Return a bitmask of the audio output formats supported by the
     soundcard.  Some of the formats supported by OSS are:

     Format                        Description
                                   
     --------------------------------------------------------------------------------
                                   
     ‘AFMT_MU_LAW’                 a logarithmic encoding (used by Sun ‘.au’ files
                                   and ‘/dev/audio’)
                                   
                                   
     ‘AFMT_A_LAW’                  a logarithmic encoding
                                   
                                   
     ‘AFMT_IMA_ADPCM’              a 4:1 compressed format defined by the
                                   Interactive Multimedia Association
                                   
                                   
     ‘AFMT_U8’                     Unsigned, 8-bit audio
                                   
                                   
     ‘AFMT_S16_LE’                 Signed, 16-bit audio, little-endian byte order
                                   (as used by Intel processors)
                                   
                                   
     ‘AFMT_S16_BE’                 Signed, 16-bit audio, big-endian byte order (as
                                   used by 68k, PowerPC, Sparc)
                                   
                                   
     ‘AFMT_S8’                     Signed, 8 bit audio
                                   
                                   
     ‘AFMT_U16_LE’                 Unsigned, 16-bit little-endian audio
                                   
                                   
     ‘AFMT_U16_BE’                 Unsigned, 16-bit big-endian audio
                                   

     Consult the OSS documentation for a full list of audio formats, and
     note that most devices support only a subset of these formats.
     Some older devices only support ‘AFMT_U8’; the most common format
     used today is ‘AFMT_S16_LE’.

 -- Method: oss_audio_device.setfmt (format)

     Try to set the current audio format to _format_—see *note
     getfmts(): 1fbd. for a list.  Returns the audio format that the
     device was set to, which may not be the requested format.  May also
     be used to return the current audio format—do this by passing an
     "audio format" of ‘AFMT_QUERY’.

 -- Method: oss_audio_device.channels (nchannels)

     Set the number of output channels to _nchannels_.  A value of 1
     indicates monophonic sound, 2 stereophonic.  Some devices may have
     more than 2 channels, and some high-end devices may not support
     mono.  Returns the number of channels the device was set to.

 -- Method: oss_audio_device.speed (samplerate)

     Try to set the audio sampling rate to _samplerate_ samples per
     second.  Returns the rate actually set.  Most sound devices don’t
     support arbitrary sampling rates.  Common rates are:

     Rate        Description
                 
     ------------------------------------------------------------
                 
     8000        default rate for ‘/dev/audio’
                 
                 
     11025       speech recording
                 
                 
     22050

     44100       CD quality audio (at 16 bits/sample and 2
                 channels)
                 
                 
     96000       DVD quality audio (at 24 bits/sample)
                 

 -- Method: oss_audio_device.sync ()

     Wait until the sound device has played every byte in its buffer.
     (This happens implicitly when the device is closed.)  The OSS
     documentation recommends closing and re-opening the device rather
     than using *note sync(): 1fc1.

 -- Method: oss_audio_device.reset ()

     Immediately stop playing or recording and return the device to a
     state where it can accept commands.  The OSS documentation
     recommends closing and re-opening the device after calling *note
     reset(): 1fc2.

 -- Method: oss_audio_device.post ()

     Tell the driver that there is likely to be a pause in the output,
     making it possible for the device to handle the pause more
     intelligently.  You might use this after playing a spot sound
     effect, before waiting for user input, or before doing disk I/O.

  The following convenience methods combine several ioctls, or one ioctl
and some simple calculations.

 -- Method: oss_audio_device.setparameters (format, nchannels,
          samplerate[, strict=False])

     Set the key audio sampling parameters—sample format, number of
     channels, and sampling rate—in one method call.  _format_,
     _nchannels_, and _samplerate_ should be as specified in the *note
     setfmt(): 1fbe, *note channels(): 1fbf, and *note speed(): 1fc0.
     methods.  If _strict_ is true, *note setparameters(): 1fc4. checks
     to see if each parameter was actually set to the requested value,
     and raises *note OSSAudioError: 1fb2. if not.  Returns a tuple
     (_format_, _nchannels_, _samplerate_) indicating the parameter
     values that were actually set by the device driver (i.e., the same
     as the return values of *note setfmt(): 1fbe, *note channels():
     1fbf, and *note speed(): 1fc0.).

     For example,

          (fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)

     is equivalent to

          fmt = dsp.setfmt(fmt)
          channels = dsp.channels(channels)
          rate = dsp.rate(rate)

 -- Method: oss_audio_device.bufsize ()

     Returns the size of the hardware buffer, in samples.

 -- Method: oss_audio_device.obufcount ()

     Returns the number of samples that are in the hardware buffer yet
     to be played.

 -- Method: oss_audio_device.obuffree ()

     Returns the number of samples that could be queued into the
     hardware buffer to be played without blocking.

  Audio device objects also support several read-only attributes:

 -- Attribute: oss_audio_device.closed

     Boolean indicating whether the device has been closed.

 -- Attribute: oss_audio_device.name

     String containing the name of the device file.

 -- Attribute: oss_audio_device.mode

     The I/O mode for the file, either ‘"r"’, ‘"rw"’, or ‘"w"’.


File: python.info,  Node: Mixer Device Objects,  Prev: Audio Device Objects,  Up: ossaudiodev --- Access to OSS-compatible audio devices

5.21.10.2 Mixer Device Objects
..............................

The mixer object provides two file-like methods:

 -- Method: oss_mixer_device.close ()

     This method closes the open mixer device file.  Any further
     attempts to use the mixer after this file is closed will raise an
     *note IOError: 1fa.

 -- Method: oss_mixer_device.fileno ()

     Returns the file handle number of the open mixer device file.

  The remaining methods are specific to audio mixing:

 -- Method: oss_mixer_device.controls ()

     This method returns a bitmask specifying the available mixer
     controls ("Control" being a specific mixable "channel", such as
     ‘SOUND_MIXER_PCM’ or ‘SOUND_MIXER_SYNTH’).  This bitmask indicates
     a subset of all available mixer controls—the ‘SOUND_MIXER_*’
     constants defined at module level.  To determine if, for example,
     the current mixer object supports a PCM mixer, use the following
     Python code:

          mixer=ossaudiodev.openmixer()
          if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):
              # PCM is supported
              ... code ...

     For most purposes, the ‘SOUND_MIXER_VOLUME’ (master volume) and
     ‘SOUND_MIXER_PCM’ controls should suffice—but code that uses the
     mixer should be flexible when it comes to choosing mixer controls.
     On the Gravis Ultrasound, for example, ‘SOUND_MIXER_VOLUME’ does
     not exist.

 -- Method: oss_mixer_device.stereocontrols ()

     Returns a bitmask indicating stereo mixer controls.  If a bit is
     set, the corresponding control is stereo; if it is unset, the
     control is either monophonic or not supported by the mixer (use in
     combination with *note controls(): 1fcf. to determine which).

     See the code example for the *note controls(): 1fcf. function for
     an example of getting data from a bitmask.

 -- Method: oss_mixer_device.reccontrols ()

     Returns a bitmask specifying the mixer controls that may be used to
     record.  See the code example for *note controls(): 1fcf. for an
     example of reading from a bitmask.

 -- Method: oss_mixer_device.get (control)

     Returns the volume of a given mixer control.  The returned volume
     is a 2-tuple ‘(left_volume,right_volume)’.  Volumes are specified
     as numbers from 0 (silent) to 100 (full volume).  If the control is
     monophonic, a 2-tuple is still returned, but both volumes are the
     same.

     Raises *note OSSAudioError: 1fb2. if an invalid control was is
     specified, or *note IOError: 1fa. if an unsupported control is
     specified.

 -- Method: oss_mixer_device.set (control, (left, right))

     Sets the volume for a given mixer control to ‘(left,right)’.
     ‘left’ and ‘right’ must be ints and between 0 (silent) and 100
     (full volume).  On success, the new volume is returned as a
     2-tuple.  Note that this may not be exactly the same as the volume
     specified, because of the limited resolution of some soundcard’s
     mixers.

     Raises *note OSSAudioError: 1fb2. if an invalid mixer control was
     specified, or if the specified volumes were out-of-range.

 -- Method: oss_mixer_device.get_recsrc ()

     This method returns a bitmask indicating which control(s) are
     currently being used as a recording source.

 -- Method: oss_mixer_device.set_recsrc (bitmask)

     Call this function to specify a recording source.  Returns a
     bitmask indicating the new recording source (or sources) if
     successful; raises *note IOError: 1fa. if an invalid source was
     specified.  To set the current recording source to the microphone
     input:

          mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)


File: python.info,  Node: Internationalization,  Next: Program Frameworks,  Prev: Multimedia Services,  Up: The Python Standard Library

5.22 Internationalization
=========================

The modules described in this chapter help you write software that is
independent of language and locale by providing mechanisms for selecting
a language to be used in program messages or by tailoring output to
match local conventions.

  The list of modules described in this chapter is:

* Menu:

* gettext: gettext --- Multilingual internationalization services. Multilingual internationalization services
* locale: locale --- Internationalization services. Internationalization services

gettext — Multilingual internationalization services

* GNU gettext API:: 
* Class-based API:: 
* Internationalizing your programs and modules:: 
* Acknowledgements: Acknowledgements<9>. 

Class-based API

* The NullTranslations class:: 
* The GNUTranslations class:: 
* Solaris message catalog support:: 
* The Catalog constructor:: 

Internationalizing your programs and modules

* Localizing your module:: 
* Localizing your application:: 
* Changing languages on the fly:: 
* Deferred translations:: 
* gettext() vs. lgettext(): gettext vs lgettext. 

locale — Internationalization services

* Background, details, hints, tips and caveats: Background details hints tips and caveats. 
* For extension writers and programs that embed Python:: 
* Access to message catalogs:: 


File: python.info,  Node: gettext --- Multilingual internationalization services,  Next: locale --- Internationalization services,  Up: Internationalization

5.22.1 ‘gettext’ — Multilingual internationalization services
-------------------------------------------------------------

*Source code:* Lib/gettext.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note gettext: e0. module provides internationalization (I18N) and
localization (L10N) services for your Python modules and applications.
It supports both the GNU ‘gettext’ message catalog API and a higher
level, class-based API that may be more appropriate for Python files.
The interface described below allows you to write your module and
application messages in one natural language, and provide a catalog of
translated messages for running under different natural languages.

  Some hints on localizing your Python modules and applications are also
given.

* Menu:

* GNU gettext API:: 
* Class-based API:: 
* Internationalizing your programs and modules:: 
* Acknowledgements: Acknowledgements<9>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/gettext.py


File: python.info,  Node: GNU gettext API,  Next: Class-based API,  Up: gettext --- Multilingual internationalization services

5.22.1.1 GNU *gettext* API
..........................

The *note gettext: e0. module defines the following API, which is very
similar to the GNU *gettext* API. If you use this API you will affect
the translation of your entire application globally.  Often this is what
you want if your application is monolingual, with the choice of language
dependent on the locale of your user.  If you are localizing a Python
module, or if your application needs to switch languages on the fly, you
probably want to use the class-based API instead.

 -- Function: gettext.bindtextdomain (domain[, localedir])

     Bind the _domain_ to the locale directory _localedir_.  More
     concretely, *note gettext: e0. will look for binary ‘.mo’ files for
     the given domain using the path (on Unix):
     ‘localedir/language/LC_MESSAGES/domain.mo’, where _languages_ is
     searched for in the environment variables ‘LANGUAGE’, ‘LC_ALL’,
     ‘LC_MESSAGES’, and ‘LANG’ respectively.

     If _localedir_ is omitted or ‘None’, then the current binding for
     _domain_ is returned.  (1)

 -- Function: gettext.bind_textdomain_codeset (domain[, codeset])

     Bind the _domain_ to _codeset_, changing the encoding of strings
     returned by the *note gettext(): e0. family of functions.  If
     _codeset_ is omitted, then the current binding is returned.

     New in version 2.4.

 -- Function: gettext.textdomain ([domain])

     Change or query the current global domain.  If _domain_ is ‘None’,
     then the current global domain is returned, otherwise the global
     domain is set to _domain_, which is returned.

 -- Function: gettext.gettext (message)

     Return the localized translation of _message_, based on the current
     global domain, language, and locale directory.  This function is
     usually aliased as ‘_()’ in the local namespace (see examples
     below).

 -- Function: gettext.lgettext (message)

     Equivalent to *note gettext(): e0, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 1fdd.

     New in version 2.4.

 -- Function: gettext.dgettext (domain, message)

     Like *note gettext(): e0, but look the message up in the specified
     _domain_.

 -- Function: gettext.ldgettext (domain, message)

     Equivalent to *note dgettext(): 1fe0, but the translation is
     returned in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 1fdd.

     New in version 2.4.

 -- Function: gettext.ngettext (singular, plural, n)

     Like *note gettext(): e0, but consider plural forms.  If a
     translation is found, apply the plural formula to _n_, and return
     the resulting message (some languages have more than two plural
     forms).  If no translation is found, return _singular_ if _n_ is 1;
     return _plural_ otherwise.

     The Plural formula is taken from the catalog header.  It is a C or
     Python expression that has a free variable _n_; the expression
     evaluates to the index of the plural in the catalog.  See the GNU
     gettext documentation for the precise syntax to be used in ‘.po’
     files and the formulas for a variety of languages.

     New in version 2.3.

 -- Function: gettext.lngettext (singular, plural, n)

     Equivalent to *note ngettext(): 1fe2, but the translation is
     returned in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 1fdd.

     New in version 2.4.

 -- Function: gettext.dngettext (domain, singular, plural, n)

     Like *note ngettext(): 1fe2, but look the message up in the
     specified _domain_.

     New in version 2.3.

 -- Function: gettext.ldngettext (domain, singular, plural, n)

     Equivalent to *note dngettext(): 1fe4, but the translation is
     returned in the preferred system encoding, if no other encoding was
     explicitly set with *note bind_textdomain_codeset(): 1fdd.

     New in version 2.4.

  Note that GNU *gettext* also defines a ‘dcgettext()’ method, but this
was deemed not useful and so it is currently unimplemented.

  Here’s an example of typical usage for this API:

     import gettext
     gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
     gettext.textdomain('myapplication')
     _ = gettext.gettext
     # ...
     print _('This is a translatable string.')

   ---------- Footnotes ----------

   (1) The default locale directory is system dependent; for example, on
RedHat Linux it is ‘/usr/share/locale’, but on Solaris it is
‘/usr/lib/locale’.  The *note gettext: e0. module does not try to
support these system dependent defaults; instead its default is
‘sys.prefix/share/locale’.  For this reason, it is always best to call
*note bindtextdomain(): 1fdc. with an explicit absolute path at the
start of your application.


File: python.info,  Node: Class-based API,  Next: Internationalizing your programs and modules,  Prev: GNU gettext API,  Up: gettext --- Multilingual internationalization services

5.22.1.2 Class-based API
........................

The class-based API of the *note gettext: e0. module gives you more
flexibility and greater convenience than the GNU *gettext* API. It is
the recommended way of localizing your Python applications and modules.
*note gettext: e0. defines a "translations" class which implements the
parsing of GNU ‘.mo’ format files, and has methods for returning either
standard 8-bit strings or Unicode strings.  Instances of this
"translations" class can also install themselves in the built-in
namespace as the function ‘_()’.

 -- Function: gettext.find (domain[, localedir[, languages[, all]]])

     This function implements the standard ‘.mo’ file search algorithm.
     It takes a _domain_, identical to what *note textdomain(): 1fde.
     takes.  Optional _localedir_ is as in *note bindtextdomain(): 1fdc.
     Optional _languages_ is a list of strings, where each string is a
     language code.

     If _localedir_ is not given, then the default system locale
     directory is used.  (1) If _languages_ is not given, then the
     following environment variables are searched: ‘LANGUAGE’, ‘LC_ALL’,
     ‘LC_MESSAGES’, and ‘LANG’.  The first one returning a non-empty
     value is used for the _languages_ variable.  The environment
     variables should contain a colon separated list of languages, which
     will be split on the colon to produce the expected list of language
     code strings.

     *note find(): 1fe7. then expands and normalizes the languages, and
     then iterates through them, searching for an existing file built of
     these components:

     ‘localedir/language/LC_MESSAGES/domain.mo’

     The first such file name that exists is returned by *note find():
     1fe7.  If no such file is found, then ‘None’ is returned.  If _all_
     is given, it returns a list of all file names, in the order in
     which they appear in the languages list or the environment
     variables.

 -- Function: gettext.translation (domain[, localedir[, languages[,
          class_[, fallback[, codeset]]]]])

     Return a ‘Translations’ instance based on the _domain_,
     _localedir_, and _languages_, which are first passed to *note
     find(): 1fe7. to get a list of the associated ‘.mo’ file paths.
     Instances with identical ‘.mo’ file names are cached.  The actual
     class instantiated is either _class__ if provided, otherwise
     ‘GNUTranslations’.  The class’s constructor must take a single file
     object argument.  If provided, _codeset_ will change the charset
     used to encode translated strings.

     If multiple files are found, later files are used as fallbacks for
     earlier ones.  To allow setting the fallback, *note copy.copy():
     c3a. is used to clone each translation object from the cache; the
     actual instance data is still shared with the cache.

     If no ‘.mo’ file is found, this function raises *note IOError: 1fa.
     if _fallback_ is false (which is the default), and returns a *note
     NullTranslations: 1fe9. instance if _fallback_ is true.

     Changed in version 2.4: Added the _codeset_ parameter.

 -- Function: gettext.install (domain[, localedir[, unicode[, codeset[,
          names]]]])

     This installs the function ‘_()’ in Python’s builtins namespace,
     based on _domain_, _localedir_, and _codeset_ which are passed to
     the function *note translation(): 1fe8.  The _unicode_ flag is
     passed to the resulting translation object’s *note install(): 1feb.
     method.

     For the _names_ parameter, please see the description of the
     translation object’s *note install(): 1feb. method.

     As seen below, you usually mark the strings in your application
     that are candidates for translation, by wrapping them in a call to
     the ‘_()’ function, like this:

          print _('This string will be translated.')

     For convenience, you want the ‘_()’ function to be installed in
     Python’s builtins namespace, so it is easily accessible in all
     modules of your application.

     Changed in version 2.4: Added the _codeset_ parameter.

     Changed in version 2.5: Added the _names_ parameter.

* Menu:

* The NullTranslations class:: 
* The GNUTranslations class:: 
* Solaris message catalog support:: 
* The Catalog constructor:: 

   ---------- Footnotes ----------

   (1) See the footnote for *note bindtextdomain(): 1fdc. above.


File: python.info,  Node: The NullTranslations class,  Next: The GNUTranslations class,  Up: Class-based API

5.22.1.3 The ‘NullTranslations’ class
.....................................

Translation classes are what actually implement the translation of
original source file message strings to translated message strings.  The
base class used by all translation classes is *note NullTranslations:
1fe9.; this provides the basic interface you can use to write your own
specialized translation classes.  Here are the methods of *note
NullTranslations: 1fe9.:

 -- Class: gettext.NullTranslations ([fp])

     Takes an optional file object _fp_, which is ignored by the base
     class.  Initializes "protected" instance variables __info_ and
     __charset_ which are set by derived classes, as well as
     __fallback_, which is set through *note add_fallback(): 1fed.  It
     then calls ‘self._parse(fp)’ if _fp_ is not ‘None’.

      -- Method: _parse (fp)

          No-op’d in the base class, this method takes file object _fp_,
          and reads the data from the file, initializing its message
          catalog.  If you have an unsupported message catalog file
          format, you should override this method to parse your format.

      -- Method: add_fallback (fallback)

          Add _fallback_ as the fallback object for the current
          translation object.  A translation object should consult the
          fallback if it cannot provide a translation for a given
          message.

      -- Method: gettext (message)

          If a fallback has been set, forward *note gettext(): e0. to
          the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: lgettext (message)

          If a fallback has been set, forward *note lgettext(): 1fdf. to
          the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.4.

      -- Method: ugettext (message)

          If a fallback has been set, forward *note ugettext(): 1ff1. to
          the fallback.  Otherwise, return the translated message as a
          Unicode string.  Overridden in derived classes.

      -- Method: ngettext (singular, plural, n)

          If a fallback has been set, forward *note ngettext(): 1fe2. to
          the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.3.

      -- Method: lngettext (singular, plural, n)

          If a fallback has been set, forward *note lngettext(): 1fe3.
          to the fallback.  Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.4.

      -- Method: ungettext (singular, plural, n)

          If a fallback has been set, forward *note ungettext(): 1ff4.
          to the fallback.  Otherwise, return the translated message as
          a Unicode string.  Overridden in derived classes.

          New in version 2.3.

      -- Method: info ()

          Return the "protected" ‘_info’ variable.

      -- Method: charset ()

          Return the "protected" ‘_charset’ variable.

      -- Method: output_charset ()

          Return the "protected" ‘_output_charset’ variable, which
          defines the encoding used to return translated messages.

          New in version 2.4.

      -- Method: set_output_charset (charset)

          Change the "protected" ‘_output_charset’ variable, which
          defines the encoding used to return translated messages.

          New in version 2.4.

      -- Method: install ([unicode[, names]])

          If the _unicode_ flag is false, this method installs
          ‘self.gettext()’ into the built-in namespace, binding it to
          ‘_’.  If _unicode_ is true, it binds ‘self.ugettext()’
          instead.  By default, _unicode_ is false.

          If the _names_ parameter is given, it must be a sequence
          containing the names of functions you want to install in the
          builtins namespace in addition to ‘_()’.  Supported names are
          ‘'gettext'’ (bound to ‘self.gettext()’ or ‘self.ugettext()’
          according to the _unicode_ flag), ‘'ngettext'’ (bound to
          ‘self.ngettext()’ or ‘self.ungettext()’ according to the
          _unicode_ flag), ‘'lgettext'’ and ‘'lngettext'’.

          Note that this is only one way, albeit the most convenient
          way, to make the ‘_()’ function available to your application.
          Because it affects the entire application globally, and
          specifically the built-in namespace, localized modules should
          never install ‘_()’.  Instead, they should use this code to
          make ‘_()’ available to their module:

               import gettext
               t = gettext.translation('mymodule', ...)
               _ = t.gettext

          This puts ‘_()’ only in the module’s global namespace and so
          only affects calls within this module.

          Changed in version 2.5: Added the _names_ parameter.


File: python.info,  Node: The GNUTranslations class,  Next: Solaris message catalog support,  Prev: The NullTranslations class,  Up: Class-based API

5.22.1.4 The ‘GNUTranslations’ class
....................................

The *note gettext: e0. module provides one additional class derived from
*note NullTranslations: 1fe9.: ‘GNUTranslations’.  This class overrides
‘_parse()’ to enable reading GNU *gettext* format ‘.mo’ files in both
big-endian and little-endian format.  It also coerces both message ids
and message strings to Unicode.

  ‘GNUTranslations’ parses optional meta-data out of the translation
catalog.  It is convention with GNU *gettext* to include meta-data as
the translation for the empty string.  This meta-data is in RFC
822(1)-style ‘key: value’ pairs, and should contain the
‘Project-Id-Version’ key.  If the key ‘Content-Type’ is found, then the
‘charset’ property is used to initialize the "protected" ‘_charset’
instance variable, defaulting to ‘None’ if not found.  If the charset
encoding is specified, then all message ids and message strings read
from the catalog are converted to Unicode using this encoding.  The
‘ugettext()’ method always returns a Unicode, while the *note gettext():
e0. returns an encoded 8-bit string.  For the message id arguments of
both methods, either Unicode strings or 8-bit strings containing only
US-ASCII characters are acceptable.  Note that the Unicode version of
the methods (i.e.  ‘ugettext()’ and ‘ungettext()’) are the recommended
interface to use for internationalized Python programs.

  The entire set of key/value pairs are placed into a dictionary and set
as the "protected" ‘_info’ instance variable.

  If the ‘.mo’ file’s magic number is invalid, or if other problems
occur while reading the file, instantiating a ‘GNUTranslations’ class
can raise *note IOError: 1fa.

  The following methods are overridden from the base class
implementation:

 -- Method: GNUTranslations.gettext (message)

     Look up the _message_ id in the catalog and return the
     corresponding message string, as an 8-bit string encoded with the
     catalog’s charset encoding, if known.  If there is no entry in the
     catalog for the _message_ id, and a fallback has been set, the look
     up is forwarded to the fallback’s *note gettext(): e0. method.
     Otherwise, the _message_ id is returned.

 -- Method: GNUTranslations.lgettext (message)

     Equivalent to *note gettext(): e0, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with ‘set_output_charset()’.

     New in version 2.4.

 -- Method: GNUTranslations.ugettext (message)

     Look up the _message_ id in the catalog and return the
     corresponding message string, as a Unicode string.  If there is no
     entry in the catalog for the _message_ id, and a fallback has been
     set, the look up is forwarded to the fallback’s *note ugettext():
     1ffc. method.  Otherwise, the _message_ id is returned.

 -- Method: GNUTranslations.ngettext (singular, plural, n)

     Do a plural-forms lookup of a message id.  _singular_ is used as
     the message id for purposes of lookup in the catalog, while _n_ is
     used to determine which plural form to use.  The returned message
     string is an 8-bit string encoded with the catalog’s charset
     encoding, if known.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback’s *note
     ngettext(): 1fe2. method.  Otherwise, when _n_ is 1 _singular_ is
     returned, and _plural_ is returned in all other cases.

     New in version 2.3.

 -- Method: GNUTranslations.lngettext (singular, plural, n)

     Equivalent to *note gettext(): e0, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with ‘set_output_charset()’.

     New in version 2.4.

 -- Method: GNUTranslations.ungettext (singular, plural, n)

     Do a plural-forms lookup of a message id.  _singular_ is used as
     the message id for purposes of lookup in the catalog, while _n_ is
     used to determine which plural form to use.  The returned message
     string is a Unicode string.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback’s *note
     ungettext(): 1fff. method.  Otherwise, when _n_ is 1 _singular_ is
     returned, and _plural_ is returned in all other cases.

     Here is an example:

          n = len(os.listdir('.'))
          cat = GNUTranslations(somefile)
          message = cat.ungettext(
              'There is %(num)d file in this directory',
              'There are %(num)d files in this directory',
              n) % {'num': n}

     New in version 2.3.

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc822.html


File: python.info,  Node: Solaris message catalog support,  Next: The Catalog constructor,  Prev: The GNUTranslations class,  Up: Class-based API

5.22.1.5 Solaris message catalog support
........................................

The Solaris operating system defines its own binary ‘.mo’ file format,
but since no documentation can be found on this format, it is not
supported at this time.


File: python.info,  Node: The Catalog constructor,  Prev: Solaris message catalog support,  Up: Class-based API

5.22.1.6 The Catalog constructor
................................

GNOME uses a version of the *note gettext: e0. module by James
Henstridge, but this version has a slightly different API. Its
documented usage was:

     import gettext
     cat = gettext.Catalog(domain, localedir)
     _ = cat.gettext
     print _('hello world')

  For compatibility with this older module, the function ‘Catalog()’ is
an alias for the *note translation(): 1fe8. function described above.

  One difference between this module and Henstridge’s: his catalog
objects supported access through a mapping API, but this appears to be
unused and so is not currently supported.


File: python.info,  Node: Internationalizing your programs and modules,  Next: Acknowledgements<9>,  Prev: Class-based API,  Up: gettext --- Multilingual internationalization services

5.22.1.7 Internationalizing your programs and modules
.....................................................

Internationalization (I18N) refers to the operation by which a program
is made aware of multiple languages.  Localization (L10N) refers to the
adaptation of your program, once internationalized, to the local
language and cultural habits.  In order to provide multilingual messages
for your Python programs, you need to take the following steps:

  1. prepare your program or module by specially marking translatable
     strings

  2. run a suite of tools over your marked files to generate raw
     messages catalogs

  3. create language specific translations of the message catalogs

  4. use the *note gettext: e0. module so that message strings are
     properly translated

  In order to prepare your code for I18N, you need to look at all the
strings in your files.  Any string that needs to be translated should be
marked by wrapping it in ‘_('...')’ — that is, a call to the function
‘_()’.  For example:

     filename = 'mylog.txt'
     message = _('writing a log message')
     fp = open(filename, 'w')
     fp.write(message)
     fp.close()

  In this example, the string ‘'writing a log message'’ is marked as a
candidate for translation, while the strings ‘'mylog.txt'’ and ‘'w'’ are
not.

  The Python distribution comes with two tools which help you generate
the message catalogs once you’ve prepared your source code.  These may
or may not be available from a binary distribution, but they can be
found in a source distribution, in the ‘Tools/i18n’ directory.

  The *pygettext* (1) program scans all your Python source code looking
for the strings you previously marked as translatable.  It is similar to
the GNU *gettext* program except that it understands all the intricacies
of Python source code, but knows nothing about C or C++ source code.
You don’t need GNU ‘gettext’ unless you’re also going to be translating
C code (such as C extension modules).

  *pygettext* generates textual Uniforum-style human readable message
catalog ‘.pot’ files, essentially structured human readable files which
contain every marked string in the source code, along with a placeholder
for the translation strings.  *pygettext* is a command line script that
supports a similar command line interface as *xgettext*; for details on
its use, run:

     pygettext.py --help

  Copies of these ‘.pot’ files are then handed over to the individual
human translators who write language-specific versions for every
supported natural language.  They send you back the filled in
language-specific versions as a ‘.po’ file.  Using the *msgfmt.py* (2)
program (in the ‘Tools/i18n’ directory), you take the ‘.po’ files from
your translators and generate the machine-readable ‘.mo’ binary catalog
files.  The ‘.mo’ files are what the *note gettext: e0. module uses for
the actual translation processing during run-time.

  How you use the *note gettext: e0. module in your code depends on
whether you are internationalizing a single module or your entire
application.  The next two sections will discuss each case.

* Menu:

* Localizing your module:: 
* Localizing your application:: 
* Changing languages on the fly:: 
* Deferred translations:: 
* gettext() vs. lgettext(): gettext vs lgettext. 

   ---------- Footnotes ----------

   (1) François Pinard has written a program called *xpot* which does a
similar job.  It is available as part of his po-utils package
(http://po-utils.progiciels-bpi.ca/).

   (2) *msgfmt.py* is binary compatible with GNU *msgfmt* except that it
provides a simpler, all-Python implementation.  With this and
*pygettext.py*, you generally won’t need to install the GNU *gettext*
package to internationalize your Python applications.


File: python.info,  Node: Localizing your module,  Next: Localizing your application,  Up: Internationalizing your programs and modules

5.22.1.8 Localizing your module
...............................

If you are localizing your module, you must take care not to make global
changes, e.g.  to the built-in namespace.  You should not use the GNU
‘gettext’ API but instead the class-based API.

  Let’s say your module is called "spam" and the module’s various
natural language translation ‘.mo’ files reside in ‘/usr/share/locale’
in GNU *gettext* format.  Here’s what you would put at the top of your
module:

     import gettext
     t = gettext.translation('spam', '/usr/share/locale')
     _ = t.lgettext

  If your translators were providing you with Unicode strings in their
‘.po’ files, you’d instead do:

     import gettext
     t = gettext.translation('spam', '/usr/share/locale')
     _ = t.ugettext


File: python.info,  Node: Localizing your application,  Next: Changing languages on the fly,  Prev: Localizing your module,  Up: Internationalizing your programs and modules

5.22.1.9 Localizing your application
....................................

If you are localizing your application, you can install the ‘_()’
function globally into the built-in namespace, usually in the main
driver file of your application.  This will let all your
application-specific files just use ‘_('...')’ without having to
explicitly install it in each file.

  In the simple case then, you need only add the following bit of code
to the main driver file of your application:

     import gettext
     gettext.install('myapplication')

  If you need to set the locale directory or the _unicode_ flag, you can
pass these into the *note install(): 1fea. function:

     import gettext
     gettext.install('myapplication', '/usr/share/locale', unicode=1)


File: python.info,  Node: Changing languages on the fly,  Next: Deferred translations,  Prev: Localizing your application,  Up: Internationalizing your programs and modules

5.22.1.10 Changing languages on the fly
.......................................

If your program needs to support many languages at the same time, you
may want to create multiple translation instances and then switch
between them explicitly, like so:

     import gettext

     lang1 = gettext.translation('myapplication', languages=['en'])
     lang2 = gettext.translation('myapplication', languages=['fr'])
     lang3 = gettext.translation('myapplication', languages=['de'])

     # start by using language1
     lang1.install()

     # ... time goes by, user selects language 2
     lang2.install()

     # ... more time goes by, user selects language 3
     lang3.install()


File: python.info,  Node: Deferred translations,  Next: gettext vs lgettext,  Prev: Changing languages on the fly,  Up: Internationalizing your programs and modules

5.22.1.11 Deferred translations
...............................

In most coding situations, strings are translated where they are coded.
Occasionally however, you need to mark strings for translation, but
defer actual translation until later.  A classic example is:

     animals = ['mollusk',
                'albatross',
                'rat',
                'penguin',
                'python', ]
     # ...
     for a in animals:
         print a

  Here, you want to mark the strings in the ‘animals’ list as being
translatable, but you don’t actually want to translate them until they
are printed.

  Here is one way you can handle this situation:

     def _(message): return message

     animals = [_('mollusk'),
                _('albatross'),
                _('rat'),
                _('penguin'),
                _('python'), ]

     del _

     # ...
     for a in animals:
         print _(a)

  This works because the dummy definition of ‘_()’ simply returns the
string unchanged.  And this dummy definition will temporarily override
any definition of ‘_()’ in the built-in namespace (until the *note del:
568. command).  Take care, though if you have a previous definition of
‘_()’ in the local namespace.

  Note that the second use of ‘_()’ will not identify "a" as being
translatable to the *pygettext* program, since it is not a string.

  Another way to handle this is with the following example:

     def N_(message): return message

     animals = [N_('mollusk'),
                N_('albatross'),
                N_('rat'),
                N_('penguin'),
                N_('python'), ]

     # ...
     for a in animals:
         print _(a)

  In this case, you are marking translatable strings with the function
‘N_()’, (1) which won’t conflict with any definition of ‘_()’.  However,
you will need to teach your message extraction program to look for
translatable strings marked with ‘N_()’.  *pygettext* and *xpot* both
support this through the use of command line switches.

   ---------- Footnotes ----------

   (1) The choice of ‘N_()’ here is totally arbitrary; it could have
just as easily been ‘MarkThisStringForTranslation()’.


File: python.info,  Node: gettext vs lgettext,  Prev: Deferred translations,  Up: Internationalizing your programs and modules

5.22.1.12 ‘gettext()’ vs. ‘lgettext()’
......................................

In Python 2.4 the *note lgettext(): 1fdf. family of functions were
introduced.  The intention of these functions is to provide an
alternative which is more compliant with the current implementation of
GNU gettext.  Unlike *note gettext(): e0, which returns strings encoded
with the same codeset used in the translation file, *note lgettext():
1fdf. will return strings encoded with the preferred system encoding, as
returned by *note locale.getpreferredencoding(): 11b4.  Also notice that
Python 2.4 introduces new functions to explicitly choose the codeset
used in translated strings.  If a codeset is explicitly set, even *note
lgettext(): 1fdf. will return translated strings in the requested
codeset, as would be expected in the GNU gettext implementation.


File: python.info,  Node: Acknowledgements<9>,  Prev: Internationalizing your programs and modules,  Up: gettext --- Multilingual internationalization services

5.22.1.13 Acknowledgements
..........................

The following people contributed code, feedback, design suggestions,
previous implementations, and valuable experience to the creation of
this module:

   * Peter Funk

   * James Henstridge

   * Juan David Ibáñez Palomar

   * Marc-André Lemburg

   * Martin von Löwis

   * François Pinard

   * Barry Warsaw

   * Gustavo Niemeyer


File: python.info,  Node: locale --- Internationalization services,  Prev: gettext --- Multilingual internationalization services,  Up: Internationalization

5.22.2 ‘locale’ — Internationalization services
-----------------------------------------------

The *note locale: 100. module opens access to the POSIX locale database
and functionality.  The POSIX locale mechanism allows programmers to
deal with certain cultural issues in an application, without requiring
the programmer to know all the specifics of each country where the
software is executed.

  The *note locale: 100. module is implemented on top of the ‘_locale’
module, which in turn uses an ANSI C locale implementation if available.

  The *note locale: 100. module defines the following exception and
functions:

 -- Exception: locale.Error

     Exception raised when the locale passed to *note setlocale(): 96d.
     is not recognized.

 -- Function: locale.setlocale (category[, locale])

     If _locale_ is given and not ‘None’, *note setlocale(): 96d.
     modifies the locale setting for the _category_.  The available
     categories are listed in the data description below.  _locale_ may
     be a string, or an iterable of two strings (language code and
     encoding).  If it’s an iterable, it’s converted to a locale name
     using the locale aliasing engine.  An empty string specifies the
     user’s default settings.  If the modification of the locale fails,
     the exception *note Error: 200b. is raised.  If successful, the new
     locale setting is returned.

     If _locale_ is omitted or ‘None’, the current setting for
     _category_ is returned.

     *note setlocale(): 96d. is not thread-safe on most systems.
     Applications typically start with a call of

          import locale
          locale.setlocale(locale.LC_ALL, '')

     This sets the locale for all categories to the user’s default
     setting (typically specified in the ‘LANG’ environment variable).
     If the locale is not changed thereafter, using multithreading
     should not cause problems.

     Changed in version 2.0: Added support for iterable values of the
     _locale_ parameter.

 -- Function: locale.localeconv ()

     Returns the database of the local conventions as a dictionary.
     This dictionary has the following strings as keys:

     Category                   Key                                       Meaning
                                                                          
     ----------------------------------------------------------------------------------------------------------
                                                                          
     *note LC_NUMERIC: 200d.    ‘'decimal_point'’                         Decimal point character.
                                                                          
                                                                          
                                ‘'grouping'’                              Sequence of numbers specifying
                                                                          which relative positions the
                                                                          ‘'thousands_sep'’ is expected.  If
                                                                          the sequence is terminated with
                                                                          *note CHAR_MAX: 200e, no further
                                                                          grouping is performed.  If the
                                                                          sequence terminates with a ‘0’,
                                                                          the last group size is repeatedly
                                                                          used.
                                                                          
                                                                          
                                ‘'thousands_sep'’                         Character used between groups.
                                                                          
                                                                          
     *note LC_MONETARY: 200f.   ‘'int_curr_symbol'’                       International currency symbol.
                                                                          
                                                                          
                                ‘'currency_symbol'’                       Local currency symbol.
                                                                          
                                                                          
                                ‘'p_cs_precedes/n_cs_precedes'’           Whether the currency symbol
                                                                          precedes the value (for positive
                                                                          resp.  negative values).
                                                                          
                                                                          
                                ‘'p_sep_by_space/n_sep_by_space'’         Whether the currency symbol is
                                                                          separated from the value by a
                                                                          space (for positive resp.
                                                                          negative values).
                                                                          
                                                                          
                                ‘'mon_decimal_point'’                     Decimal point used for monetary
                                                                          values.
                                                                          
                                                                          
                                ‘'frac_digits'’                           Number of fractional digits used
                                                                          in local formatting of monetary
                                                                          values.
                                                                          
                                                                          
                                ‘'int_frac_digits'’                       Number of fractional digits used
                                                                          in international formatting of
                                                                          monetary values.
                                                                          
                                                                          
                                ‘'mon_thousands_sep'’                     Group separator used for monetary
                                                                          values.
                                                                          
                                                                          
                                ‘'mon_grouping'’                          Equivalent to ‘'grouping'’, used
                                                                          for monetary values.
                                                                          
                                                                          
                                ‘'positive_sign'’                         Symbol used to annotate a positive
                                                                          monetary value.
                                                                          
                                                                          
                                ‘'negative_sign'’                         Symbol used to annotate a negative
                                                                          monetary value.
                                                                          
                                                                          
                                ‘'p_sign_posn/n_sign_posn'’               The position of the sign (for
                                                                          positive resp.  negative values),
                                                                          see below.
                                                                          

     All numeric values can be set to *note CHAR_MAX: 200e. to indicate
     that there is no value specified in this locale.

     The possible values for ‘'p_sign_posn'’ and ‘'n_sign_posn'’ are
     given below.

     Value              Explanation
                        
     -----------------------------------------------------------------
                        
     ‘0’                Currency and value are surrounded by
                        parentheses.
                        
                        
     ‘1’                The sign should precede the value and
                        currency symbol.
                        
                        
     ‘2’                The sign should follow the value and
                        currency symbol.
                        
                        
     ‘3’                The sign should immediately precede the
                        value.
                        
                        
     ‘4’                The sign should immediately follow the
                        value.
                        
                        
     ‘CHAR_MAX’         Nothing is specified in this locale.
                        

 -- Function: locale.nl_langinfo (option)

     Return some locale-specific information as a string.  This function
     is not available on all systems, and the set of possible options
     might also vary across platforms.  The possible argument values are
     numbers, for which symbolic constants are available in the locale
     module.

     The *note nl_langinfo(): 2010. function accepts one of the
     following keys.  Most descriptions are taken from the corresponding
     description in the GNU C library.

      -- Data: locale.CODESET

          Get a string with the name of the character encoding used in
          the selected locale.

      -- Data: locale.D_T_FMT

          Get a string that can be used as a format string for *note
          time.strftime(): 3be. to represent date and time in a
          locale-specific way.

      -- Data: locale.D_FMT

          Get a string that can be used as a format string for *note
          time.strftime(): 3be. to represent a date in a locale-specific
          way.

      -- Data: locale.T_FMT

          Get a string that can be used as a format string for *note
          time.strftime(): 3be. to represent a time in a locale-specific
          way.

      -- Data: locale.T_FMT_AMPM

          Get a format string for *note time.strftime(): 3be. to
          represent time in the am/pm format.

      -- Data: DAY_1 ... DAY_7

          Get the name of the n-th day of the week.

               Note: This follows the US convention of ‘DAY_1’ being
               Sunday, not the international convention (ISO 8601) that
               Monday is the first day of the week.

      -- Data: ABDAY_1 ... ABDAY_7

          Get the abbreviated name of the n-th day of the week.

      -- Data: MON_1 ... MON_12

          Get the name of the n-th month.

      -- Data: ABMON_1 ... ABMON_12

          Get the abbreviated name of the n-th month.

      -- Data: locale.RADIXCHAR

          Get the radix character (decimal dot, decimal comma, etc.)

      -- Data: locale.THOUSEP

          Get the separator character for thousands (groups of three
          digits).

      -- Data: locale.YESEXPR

          Get a regular expression that can be used with the regex
          function to recognize a positive response to a yes/no
          question.

               Note: The expression is in the syntax suitable for the
               ‘regex()’ function from the C library, which might differ
               from the syntax used in *note re: 143.

      -- Data: locale.NOEXPR

          Get a regular expression that can be used with the regex(3)
          function to recognize a negative response to a yes/no
          question.

      -- Data: locale.CRNCYSTR

          Get the currency symbol, preceded by "-" if the symbol should
          appear before the value, "+" if the symbol should appear after
          the value, or "."  if the symbol should replace the radix
          character.

      -- Data: locale.ERA

          Get a string that represents the era used in the current
          locale.

          Most locales do not define this value.  An example of a locale
          which does define this value is the Japanese one.  In Japan,
          the traditional representation of dates includes the name of
          the era corresponding to the then-emperor’s reign.

          Normally it should not be necessary to use this value
          directly.  Specifying the ‘E’ modifier in their format strings
          causes the *note time.strftime(): 3be. function to use this
          information.  The format of the returned string is not
          specified, and therefore you should not assume knowledge of it
          on different systems.

      -- Data: locale.ERA_D_T_FMT

          Get a format string for *note time.strftime(): 3be. to
          represent date and time in a locale-specific era-based way.

      -- Data: locale.ERA_D_FMT

          Get a format string for *note time.strftime(): 3be. to
          represent a date in a locale-specific era-based way.

      -- Data: locale.ERA_T_FMT

          Get a format string for *note time.strftime(): 3be. to
          represent a time in a locale-specific era-based way.

      -- Data: locale.ALT_DIGITS

          Get a representation of up to 100 values used to represent the
          values 0 to 99.

 -- Function: locale.getdefaultlocale ([envvars])

     Tries to determine the default locale settings and returns them as
     a tuple of the form ‘(language code, encoding)’.

     According to POSIX, a program which has not called
     ‘setlocale(LC_ALL, '')’ runs using the portable ‘'C'’ locale.
     Calling ‘setlocale(LC_ALL, '')’ lets it use the default locale as
     defined by the ‘LANG’ variable.  Since we do not want to interfere
     with the current locale setting we thus emulate the behavior in the
     way described above.

     To maintain compatibility with other platforms, not only the ‘LANG’
     variable is tested, but a list of variables given as envvars
     parameter.  The first found to be defined will be used.  _envvars_
     defaults to the search path used in GNU gettext; it must always
     contain the variable name ‘LANG’.  The GNU gettext search path
     contains ‘'LANGUAGE'’, ‘'LC_ALL'’, ‘'LC_CTYPE'’, and ‘'LANG'’, in
     that order.

     Except for the code ‘'C'’, the language code corresponds to RFC
     1766(1).  _language code_ and _encoding_ may be ‘None’ if their
     values cannot be determined.

     New in version 2.0.

 -- Function: locale.getlocale ([category])

     Returns the current setting for the given locale category as
     sequence containing _language code_, _encoding_.  _category_ may be
     one of the ‘LC_*’ values except *note LC_ALL: 2021.  It defaults to
     *note LC_CTYPE: 2022.

     Except for the code ‘'C'’, the language code corresponds to RFC
     1766(2).  _language code_ and _encoding_ may be ‘None’ if their
     values cannot be determined.

     New in version 2.0.

 -- Function: locale.getpreferredencoding ([do_setlocale])

     Return the encoding used for text data, according to user
     preferences.  User preferences are expressed differently on
     different systems, and might not be available programmatically on
     some systems, so this function only returns a guess.

     On some systems, it is necessary to invoke *note setlocale(): 96d.
     to obtain the user preferences, so this function is not
     thread-safe.  If invoking setlocale is not necessary or desired,
     _do_setlocale_ should be set to ‘False’.

     New in version 2.3.

 -- Function: locale.normalize (localename)

     Returns a normalized locale code for the given locale name.  The
     returned locale code is formatted for use with *note setlocale():
     96d.  If normalization fails, the original name is returned
     unchanged.

     If the given encoding is not known, the function defaults to the
     default encoding for the locale code just like *note setlocale():
     96d.

     New in version 2.0.

 -- Function: locale.resetlocale ([category])

     Sets the locale for _category_ to the default setting.

     The default setting is determined by calling *note
     getdefaultlocale(): 2020.  _category_ defaults to *note LC_ALL:
     2021.

     New in version 2.0.

 -- Function: locale.strcoll (string1, string2)

     Compares two strings according to the current *note LC_COLLATE:
     2026. setting.  As any other compare function, returns a negative,
     or a positive value, or ‘0’, depending on whether _string1_
     collates before or after _string2_ or is equal to it.

 -- Function: locale.strxfrm (string)

     Transforms a string to one that can be used for the built-in
     function *note cmp(): 4be, and still returns locale-aware results.
     This function can be used when the same string is compared
     repeatedly, e.g.  when collating a sequence of strings.

 -- Function: locale.format (format, val[, grouping[, monetary]])

     Formats a number _val_ according to the current *note LC_NUMERIC:
     200d. setting.  The format follows the conventions of the ‘%’
     operator.  For floating point values, the decimal point is modified
     if appropriate.  If _grouping_ is true, also takes the grouping
     into account.

     If _monetary_ is true, the conversion uses monetary thousands
     separator and grouping strings.

     Please note that this function will only work for exactly one %char
     specifier.  For whole format strings, use *note format_string():
     2029.

     Changed in version 2.5: Added the _monetary_ parameter.

 -- Function: locale.format_string (format, val[, grouping])

     Processes formatting specifiers as in ‘format % val’, but takes the
     current locale settings into account.

     New in version 2.5.

 -- Function: locale.currency (val[, symbol[, grouping[,
          international]]])

     Formats a number _val_ according to the current *note LC_MONETARY:
     200f. settings.

     The returned string includes the currency symbol if _symbol_ is
     true, which is the default.  If _grouping_ is true (which is not
     the default), grouping is done with the value.  If _international_
     is true (which is not the default), the international currency
     symbol is used.

     Note that this function will not work with the ’C’ locale, so you
     have to set a locale via *note setlocale(): 96d. first.

     New in version 2.5.

 -- Function: locale.str (float)

     Formats a floating point number using the same format as the
     built-in function ‘str(float)’, but takes the decimal point into
     account.

 -- Function: locale.atof (string)

     Converts a string to a floating point number, following the *note
     LC_NUMERIC: 200d. settings.

 -- Function: locale.atoi (string)

     Converts a string to an integer, following the *note LC_NUMERIC:
     200d. conventions.

 -- Data: locale.LC_CTYPE

     Locale category for the character type functions.  Depending on the
     settings of this category, the functions of module *note string:
     163. dealing with case change their behaviour.

 -- Data: locale.LC_COLLATE

     Locale category for sorting strings.  The functions *note
     strcoll(): 2025. and *note strxfrm(): 2027. of the *note locale:
     100. module are affected.

 -- Data: locale.LC_TIME

     Locale category for the formatting of time.  The function *note
     time.strftime(): 3be. follows these conventions.

 -- Data: locale.LC_MONETARY

     Locale category for formatting of monetary values.  The available
     options are available from the *note localeconv(): 200c. function.

 -- Data: locale.LC_MESSAGES

     Locale category for message display.  Python currently does not
     support application specific locale-aware messages.  Messages
     displayed by the operating system, like those returned by *note
     os.strerror(): 10fd. might be affected by this category.

 -- Data: locale.LC_NUMERIC

     Locale category for formatting numbers.  The functions *note
     format(): 2028, *note atoi(): 202d, *note atof(): 202c. and *note
     str(): 202b. of the *note locale: 100. module are affected by that
     category.  All other numeric formatting operations are not
     affected.

 -- Data: locale.LC_ALL

     Combination of all locale settings.  If this flag is used when the
     locale is changed, setting the locale for all categories is
     attempted.  If that fails for any category, no category is changed
     at all.  When the locale is retrieved using this flag, a string
     indicating the setting for all categories is returned.  This string
     can be later used to restore the settings.

 -- Data: locale.CHAR_MAX

     This is a symbolic constant used for different values returned by
     *note localeconv(): 200c.

  Example:

     >>> import locale
     >>> loc = locale.getlocale() # get current locale
     # use German locale; name might vary with platform
     >>> locale.setlocale(locale.LC_ALL, 'de_DE')
     >>> locale.strcoll('f\xe4n', 'foo') # compare a string containing an umlaut
     >>> locale.setlocale(locale.LC_ALL, '') # use user's preferred locale
     >>> locale.setlocale(locale.LC_ALL, 'C') # use default (C) locale
     >>> locale.setlocale(locale.LC_ALL, loc) # restore saved locale

* Menu:

* Background, details, hints, tips and caveats: Background details hints tips and caveats. 
* For extension writers and programs that embed Python:: 
* Access to message catalogs:: 

   ---------- Footnotes ----------

   (1) http://tools.ietf.org/html/rfc1766.html

   (2) http://tools.ietf.org/html/rfc1766.html


File: python.info,  Node: Background details hints tips and caveats,  Next: For extension writers and programs that embed Python,  Up: locale --- Internationalization services

5.22.2.1 Background, details, hints, tips and caveats
.....................................................

The C standard defines the locale as a program-wide property that may be
relatively expensive to change.  On top of that, some implementation are
broken in such a way that frequent locale changes may cause core dumps.
This makes the locale somewhat painful to use correctly.

  Initially, when a program is started, the locale is the ‘C’ locale, no
matter what the user’s preferred locale is.  The program must explicitly
say that it wants the user’s preferred locale settings by calling
‘setlocale(LC_ALL, '')’.

  It is generally a bad idea to call *note setlocale(): 96d. in some
library routine, since as a side effect it affects the entire program.
Saving and restoring it is almost as bad: it is expensive and affects
other threads that happen to run before the settings have been restored.

  If, when coding a module for general use, you need a locale
independent version of an operation that is affected by the locale (such
as *note string.lower(): 9a0, or certain formats used with *note
time.strftime(): 3be.), you will have to find a way to do it without
using the standard library routine.  Even better is convincing yourself
that using locale settings is okay.  Only as a last resort should you
document that your module is not compatible with non-‘C’ locale
settings.

  The case conversion functions in the *note string: 163. module are
affected by the locale settings.  When a call to the *note setlocale():
96d. function changes the *note LC_CTYPE: 2022. settings, the variables
‘string.lowercase’, ‘string.uppercase’ and ‘string.letters’ are
recalculated.  Note that code that uses these variable through ’*note
from: 81f. ...  *note import: 1f4. ...’, e.g.  ‘from string import
letters’, is not affected by subsequent *note setlocale(): 96d. calls.

  The only way to perform numeric operations according to the locale is
to use the special functions defined by this module: *note atof(): 202c,
*note atoi(): 202d, *note format(): 2028, *note str(): 202b.


File: python.info,  Node: For extension writers and programs that embed Python,  Next: Access to message catalogs,  Prev: Background details hints tips and caveats,  Up: locale --- Internationalization services

5.22.2.2 For extension writers and programs that embed Python
.............................................................

Extension modules should never call *note setlocale(): 96d, except to
find out what the current locale is.  But since the return value can
only be used portably to restore it, that is not very useful (except
perhaps to find out whether or not the locale is ‘C’).

  When Python code uses the *note locale: 100. module to change the
locale, this also affects the embedding application.  If the embedding
application doesn’t want this to happen, it should remove the ‘_locale’
extension module (which does all the work) from the table of built-in
modules in the ‘config.c’ file, and make sure that the ‘_locale’ module
is not accessible as a shared library.


File: python.info,  Node: Access to message catalogs,  Prev: For extension writers and programs that embed Python,  Up: locale --- Internationalization services

5.22.2.3 Access to message catalogs
...................................

The locale module exposes the C library’s gettext interface on systems
that provide this interface.  It consists of the functions *note
gettext(): e0, ‘dgettext()’, ‘dcgettext()’, ‘textdomain()’,
‘bindtextdomain()’, and ‘bind_textdomain_codeset()’.  These are similar
to the same functions in the *note gettext: e0. module, but use the C
library’s binary format for message catalogs, and the C library’s search
algorithms for locating message catalogs.

  Python applications should normally find no need to invoke these
functions, and should use *note gettext: e0. instead.  A known exception
to this rule are applications that link with additional C libraries
which internally invoke ‘gettext()’ or ‘dcgettext()’.  For these
applications, it may be necessary to bind the text domain, so that the
libraries can properly locate their message catalogs.


File: python.info,  Node: Program Frameworks,  Next: Graphical User Interfaces with Tk,  Prev: Internationalization,  Up: The Python Standard Library

5.23 Program Frameworks
=======================

The modules described in this chapter are frameworks that will largely
dictate the structure of your program.  Currently the modules described
here are all oriented toward writing command-line interfaces.

  The full list of modules described in this chapter is:

* Menu:

* cmd: cmd --- Support for line-oriented command interpreters. Support for line-oriented command interpreters
* shlex: shlex --- Simple lexical analysis. Simple lexical analysis

cmd — Support for line-oriented command interpreters

* Cmd Objects:: 

shlex — Simple lexical analysis

* shlex Objects:: 
* Parsing Rules:: 


File: python.info,  Node: cmd --- Support for line-oriented command interpreters,  Next: shlex --- Simple lexical analysis,  Up: Program Frameworks

5.23.1 ‘cmd’ — Support for line-oriented command interpreters
-------------------------------------------------------------

*Source code:* Lib/cmd.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note Cmd: 203a. class provides a simple framework for writing
line-oriented command interpreters.  These are often useful for test
harnesses, administrative tools, and prototypes that will later be
wrapped in a more sophisticated interface.

 -- Class: cmd.Cmd ([completekey[, stdin[, stdout]]])

     A *note Cmd: 203a. instance or subclass instance is a line-oriented
     interpreter framework.  There is no good reason to instantiate
     *note Cmd: 203a. itself; rather, it’s useful as a superclass of an
     interpreter class you define yourself in order to inherit *note
     Cmd: 203a.’s methods and encapsulate action methods.

     The optional argument _completekey_ is the *note readline: 144.
     name of a completion key; it defaults to ‘Tab’.  If _completekey_
     is not *note None: 39a. and *note readline: 144. is available,
     command completion is done automatically.

     The optional arguments _stdin_ and _stdout_ specify the input and
     output file objects that the Cmd instance or subclass instance will
     use for input and output.  If not specified, they will default to
     *note sys.stdin: 636. and *note sys.stdout: 889.

     If you want a given _stdin_ to be used, make sure to set the
     instance’s *note use_rawinput: 203b. attribute to ‘False’,
     otherwise _stdin_ will be ignored.

     Changed in version 2.3: The _stdin_ and _stdout_ parameters were
     added.

* Menu:

* Cmd Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/cmd.py


File: python.info,  Node: Cmd Objects,  Up: cmd --- Support for line-oriented command interpreters

5.23.1.1 Cmd Objects
....................

A *note Cmd: 203a. instance has the following methods:

 -- Method: Cmd.cmdloop ([intro])

     Repeatedly issue a prompt, accept input, parse an initial prefix
     off the received input, and dispatch to action methods, passing
     them the remainder of the line as argument.

     The optional argument is a banner or intro string to be issued
     before the first prompt (this overrides the *note intro: 203f.
     class attribute).

     If the *note readline: 144. module is loaded, input will
     automatically inherit *bash*-like history-list editing (e.g.
     ‘Control-P’ scrolls back to the last command, ‘Control-N’ forward
     to the next one, ‘Control-F’ moves the cursor to the right
     non-destructively, ‘Control-B’ moves the cursor to the left
     non-destructively, etc.).

     An end-of-file on input is passed back as the string ‘'EOF'’.

     An interpreter instance will recognize a command name ‘foo’ if and
     only if it has a method ‘do_foo()’.  As a special case, a line
     beginning with the character ‘'?'’ is dispatched to the method
     ‘do_help()’.  As another special case, a line beginning with the
     character ‘'!'’ is dispatched to the method ‘do_shell()’ (if such a
     method is defined).

     This method will return when the *note postcmd(): 2040. method
     returns a true value.  The _stop_ argument to *note postcmd():
     2040. is the return value from the command’s corresponding ‘do_*()’
     method.

     If completion is enabled, completing commands will be done
     automatically, and completing of commands args is done by calling
     ‘complete_foo()’ with arguments _text_, _line_, _begidx_, and
     _endidx_.  _text_ is the string prefix we are attempting to match:
     all returned matches must begin with it.  _line_ is the current
     input line with leading whitespace removed, _begidx_ and _endidx_
     are the beginning and ending indexes of the prefix text, which
     could be used to provide different completion depending upon which
     position the argument is in.

     All subclasses of *note Cmd: 203a. inherit a predefined
     ‘do_help()’.  This method, called with an argument ‘'bar'’, invokes
     the corresponding method ‘help_bar()’, and if that is not present,
     prints the docstring of ‘do_bar()’, if available.  With no
     argument, ‘do_help()’ lists all available help topics (that is, all
     commands with corresponding ‘help_*()’ methods or commands that
     have docstrings), and also lists any undocumented commands.

 -- Method: Cmd.onecmd (str)

     Interpret the argument as though it had been typed in response to
     the prompt.  This may be overridden, but should not normally need
     to be; see the *note precmd(): 2042. and *note postcmd(): 2040.
     methods for useful execution hooks.  The return value is a flag
     indicating whether interpretation of commands by the interpreter
     should stop.  If there is a ‘do_*()’ method for the command _str_,
     the return value of that method is returned, otherwise the return
     value from the *note default(): 2043. method is returned.

 -- Method: Cmd.emptyline ()

     Method called when an empty line is entered in response to the
     prompt.  If this method is not overridden, it repeats the last
     nonempty command entered.

 -- Method: Cmd.default (line)

     Method called on an input line when the command prefix is not
     recognized.  If this method is not overridden, it prints an error
     message and returns.

 -- Method: Cmd.completedefault (text, line, begidx, endidx)

     Method called to complete an input line when no command-specific
     ‘complete_*()’ method is available.  By default, it returns an
     empty list.

 -- Method: Cmd.precmd (line)

     Hook method executed just before the command line _line_ is
     interpreted, but after the input prompt is generated and issued.
     This method is a stub in *note Cmd: 203a.; it exists to be
     overridden by subclasses.  The return value is used as the command
     which will be executed by the *note onecmd(): 2041. method; the
     *note precmd(): 2042. implementation may re-write the command or
     simply return _line_ unchanged.

 -- Method: Cmd.postcmd (stop, line)

     Hook method executed just after a command dispatch is finished.
     This method is a stub in *note Cmd: 203a.; it exists to be
     overridden by subclasses.  _line_ is the command line which was
     executed, and _stop_ is a flag which indicates whether execution
     will be terminated after the call to *note postcmd(): 2040.; this
     will be the return value of the *note onecmd(): 2041. method.  The
     return value of this method will be used as the new value for the
     internal flag which corresponds to _stop_; returning false will
     cause interpretation to continue.

 -- Method: Cmd.preloop ()

     Hook method executed once when *note cmdloop(): 203e. is called.
     This method is a stub in *note Cmd: 203a.; it exists to be
     overridden by subclasses.

 -- Method: Cmd.postloop ()

     Hook method executed once when *note cmdloop(): 203e. is about to
     return.  This method is a stub in *note Cmd: 203a.; it exists to be
     overridden by subclasses.

  Instances of *note Cmd: 203a. subclasses have some public instance
variables:

 -- Attribute: Cmd.prompt

     The prompt issued to solicit input.

 -- Attribute: Cmd.identchars

     The string of characters accepted for the command prefix.

 -- Attribute: Cmd.lastcmd

     The last nonempty command prefix seen.

 -- Attribute: Cmd.intro

     A string to issue as an intro or banner.  May be overridden by
     giving the *note cmdloop(): 203e. method an argument.

 -- Attribute: Cmd.doc_header

     The header to issue if the help output has a section for documented
     commands.

 -- Attribute: Cmd.misc_header

     The header to issue if the help output has a section for
     miscellaneous help topics (that is, there are ‘help_*()’ methods
     without corresponding ‘do_*()’ methods).

 -- Attribute: Cmd.undoc_header

     The header to issue if the help output has a section for
     undocumented commands (that is, there are ‘do_*()’ methods without
     corresponding ‘help_*()’ methods).

 -- Attribute: Cmd.ruler

     The character used to draw separator lines under the help-message
     headers.  If empty, no ruler line is drawn.  It defaults to ‘'='’.

 -- Attribute: Cmd.use_rawinput

     A flag, defaulting to true.  If true, *note cmdloop(): 203e. uses
     *note raw_input(): 869. to display a prompt and read the next
     command; if false, ‘sys.stdout.write()’ and ‘sys.stdin.readline()’
     are used.  (This means that by importing *note readline: 144, on
     systems that support it, the interpreter will automatically support
     *Emacs*-like line editing and command-history keystrokes.)


File: python.info,  Node: shlex --- Simple lexical analysis,  Prev: cmd --- Support for line-oriented command interpreters,  Up: Program Frameworks

5.23.2 ‘shlex’ — Simple lexical analysis
----------------------------------------

New in version 1.5.2.

  *Source code:* Lib/shlex.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note shlex: 2051. class makes it easy to write lexical analyzers
for simple syntaxes resembling that of the Unix shell.  This will often
be useful for writing minilanguages, (for example, in run control files
for Python applications) or for parsing quoted strings.

  Prior to Python 2.7.3, this module did not support Unicode input.

  The *note shlex: 153. module defines the following functions:

 -- Function: shlex.split (s[, comments[, posix]])

     Split the string _s_ using shell-like syntax.  If _comments_ is
     *note False: 3b1. (the default), the parsing of comments in the
     given string will be disabled (setting the *note commenters: 2052.
     attribute of the *note shlex: 2051. instance to the empty string).
     This function operates in POSIX mode by default, but uses non-POSIX
     mode if the _posix_ argument is false.

     New in version 2.3.

     Changed in version 2.6: Added the _posix_ parameter.

          Note: Since the *note split(): 16ee. function instantiates a
          *note shlex: 2051. instance, passing ‘None’ for _s_ will read
          the string to split from standard input.

  The *note shlex: 153. module defines the following class:

 -- Class: shlex.shlex ([instream[, infile[, posix]]])

     A *note shlex: 2051. instance or subclass instance is a lexical
     analyzer object.  The initialization argument, if present,
     specifies where to read characters from.  It must be a
     file-/stream-like object with *note read(): 11e1. and *note
     readline(): 887. methods, or a string (strings are accepted since
     Python 2.3).  If no argument is given, input will be taken from
     ‘sys.stdin’.  The second optional argument is a filename string,
     which sets the initial value of the *note infile: 2053. attribute.
     If the _instream_ argument is omitted or equal to ‘sys.stdin’, this
     second argument defaults to "stdin".  The _posix_ argument was
     introduced in Python 2.3, and defines the operational mode.  When
     _posix_ is not true (default), the *note shlex: 2051. instance will
     operate in compatibility mode.  When operating in POSIX mode, *note
     shlex: 2051. will try to be as close as possible to the POSIX shell
     parsing rules.

See also
........

Module *note ConfigParser: 6d.

     Parser for configuration files similar to the Windows ‘.ini’ files.

* Menu:

* shlex Objects:: 
* Parsing Rules:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/shlex.py


File: python.info,  Node: shlex Objects,  Next: Parsing Rules,  Up: shlex --- Simple lexical analysis

5.23.2.1 shlex Objects
......................

A *note shlex: 2051. instance has the following methods:

 -- Method: shlex.get_token ()

     Return a token.  If tokens have been stacked using *note
     push_token(): 2057, pop a token off the stack.  Otherwise, read one
     from the input stream.  If reading encounters an immediate
     end-of-file, *note eof: 2058. is returned (the empty string (‘''’)
     in non-POSIX mode, and ‘None’ in POSIX mode).

 -- Method: shlex.push_token (str)

     Push the argument onto the token stack.

 -- Method: shlex.read_token ()

     Read a raw token.  Ignore the pushback stack, and do not interpret
     source requests.  (This is not ordinarily a useful entry point, and
     is documented here only for the sake of completeness.)

 -- Method: shlex.sourcehook (filename)

     When *note shlex: 2051. detects a source request (see *note source:
     205b. below) this method is given the following token as argument,
     and expected to return a tuple consisting of a filename and an open
     file-like object.

     Normally, this method first strips any quotes off the argument.  If
     the result is an absolute pathname, or there was no previous source
     request in effect, or the previous source was a stream (such as
     ‘sys.stdin’), the result is left alone.  Otherwise, if the result
     is a relative pathname, the directory part of the name of the file
     immediately before it on the source inclusion stack is prepended
     (this behavior is like the way the C preprocessor handles ‘#include
     "file.h"’).

     The result of the manipulations is treated as a filename, and
     returned as the first component of the tuple, with *note open():
     2d6. called on it to yield the second component.  (Note: this is
     the reverse of the order of arguments in instance initialization!)

     This hook is exposed so that you can use it to implement directory
     search paths, addition of file extensions, and other namespace
     hacks.  There is no corresponding ’close’ hook, but a shlex
     instance will call the *note close(): 110e. method of the sourced
     input stream when it returns EOF.

     For more explicit control of source stacking, use the *note
     push_source(): 205c. and *note pop_source(): 205d. methods.

 -- Method: shlex.push_source (stream[, filename])

     Push an input source stream onto the input stack.  If the filename
     argument is specified it will later be available for use in error
     messages.  This is the same method used internally by the *note
     sourcehook(): 205a. method.

     New in version 2.1.

 -- Method: shlex.pop_source ()

     Pop the last-pushed input source from the input stack.  This is the
     same method used internally when the lexer reaches EOF on a stacked
     input stream.

     New in version 2.1.

 -- Method: shlex.error_leader ([file[, line]])

     This method generates an error message leader in the format of a
     Unix C compiler error label; the format is ‘'"%s", line %d: '’,
     where the ‘%s’ is replaced with the name of the current source file
     and the ‘%d’ with the current input line number (the optional
     arguments can be used to override these).

     This convenience is provided to encourage *note shlex: 153. users
     to generate error messages in the standard, parseable format
     understood by Emacs and other Unix tools.

  Instances of *note shlex: 2051. subclasses have some public instance
variables which either control lexical analysis or can be used for
debugging:

 -- Attribute: shlex.commenters

     The string of characters that are recognized as comment beginners.
     All characters from the comment beginner to end of line are
     ignored.  Includes just ‘'#'’ by default.

 -- Attribute: shlex.wordchars

     The string of characters that will accumulate into multi-character
     tokens.  By default, includes all ASCII alphanumerics and
     underscore.

 -- Attribute: shlex.whitespace

     Characters that will be considered whitespace and skipped.
     Whitespace bounds tokens.  By default, includes space, tab,
     linefeed and carriage-return.

 -- Attribute: shlex.escape

     Characters that will be considered as escape.  This will be only
     used in POSIX mode, and includes just ‘'\'’ by default.

     New in version 2.3.

 -- Attribute: shlex.quotes

     Characters that will be considered string quotes.  The token
     accumulates until the same quote is encountered again (thus,
     different quote types protect each other as in the shell.)  By
     default, includes ASCII single and double quotes.

 -- Attribute: shlex.escapedquotes

     Characters in *note quotes: 2062. that will interpret escape
     characters defined in *note escape: 2061.  This is only used in
     POSIX mode, and includes just ‘'"'’ by default.

     New in version 2.3.

 -- Attribute: shlex.whitespace_split

     If ‘True’, tokens will only be split in whitespaces.  This is
     useful, for example, for parsing command lines with *note shlex:
     2051, getting tokens in a similar way to shell arguments.

     New in version 2.3.

 -- Attribute: shlex.infile

     The name of the current input file, as initially set at class
     instantiation time or stacked by later source requests.  It may be
     useful to examine this when constructing error messages.

 -- Attribute: shlex.instream

     The input stream from which this *note shlex: 2051. instance is
     reading characters.

 -- Attribute: shlex.source

     This attribute is ‘None’ by default.  If you assign a string to it,
     that string will be recognized as a lexical-level inclusion request
     similar to the ‘source’ keyword in various shells.  That is, the
     immediately following token will opened as a filename and input
     taken from that stream until EOF, at which point the *note close():
     110e. method of that stream will be called and the input source
     will again become the original input stream.  Source requests may
     be stacked any number of levels deep.

 -- Attribute: shlex.debug

     If this attribute is numeric and ‘1’ or more, a *note shlex: 2051.
     instance will print verbose progress output on its behavior.  If
     you need to use this, you can read the module source code to learn
     the details.

 -- Attribute: shlex.lineno

     Source line number (count of newlines seen so far plus one).

 -- Attribute: shlex.token

     The token buffer.  It may be useful to examine this when catching
     exceptions.

 -- Attribute: shlex.eof

     Token used to determine end of file.  This will be set to the empty
     string (‘''’), in non-POSIX mode, and to ‘None’ in POSIX mode.

     New in version 2.3.


File: python.info,  Node: Parsing Rules,  Prev: shlex Objects,  Up: shlex --- Simple lexical analysis

5.23.2.2 Parsing Rules
......................

When operating in non-POSIX mode, *note shlex: 2051. will try to obey to
the following rules.

   * Quote characters are not recognized within words (‘Do"Not"Separate’
     is parsed as the single word ‘Do"Not"Separate’);

   * Escape characters are not recognized;

   * Enclosing characters in quotes preserve the literal value of all
     characters within the quotes;

   * Closing quotes separate words (‘"Do"Separate’ is parsed as ‘"Do"’
     and ‘Separate’);

   * If *note whitespace_split: 2064. is ‘False’, any character not
     declared to be a word character, whitespace, or a quote will be
     returned as a single-character token.  If it is ‘True’, *note
     shlex: 2051. will only split words in whitespaces;

   * EOF is signaled with an empty string (‘''’);

   * It’s not possible to parse empty strings, even if quoted.

  When operating in POSIX mode, *note shlex: 2051. will try to obey to
the following parsing rules.

   * Quotes are stripped out, and do not separate words
     (‘"Do"Not"Separate"’ is parsed as the single word ‘DoNotSeparate’);

   * Non-quoted escape characters (e.g.  ‘'\'’) preserve the literal
     value of the next character that follows;

   * Enclosing characters in quotes which are not part of *note
     escapedquotes: 2063. (e.g.  ‘"'"’) preserve the literal value of
     all characters within the quotes;

   * Enclosing characters in quotes which are part of *note
     escapedquotes: 2063. (e.g.  ‘'"'’) preserves the literal value of
     all characters within the quotes, with the exception of the
     characters mentioned in *note escape: 2061.  The escape characters
     retain its special meaning only when followed by the quote in use,
     or the escape character itself.  Otherwise the escape character
     will be considered a normal character.

   * EOF is signaled with a *note None: 39a. value;

   * Quoted empty strings (‘''’) are allowed;


File: python.info,  Node: Graphical User Interfaces with Tk,  Next: Development Tools,  Prev: Program Frameworks,  Up: The Python Standard Library

5.24 Graphical User Interfaces with Tk
======================================

Tk/Tcl has long been an integral part of Python.  It provides a robust
and platform independent windowing toolkit, that is available to Python
programmers using the *note Tkinter: 17d. module, and its extensions,
the *note Tix: 17c. and the *note ttk: 182. modules.

  The *note Tkinter: 17d. module is a thin object-oriented layer on top
of Tcl/Tk.  To use *note Tkinter: 17d, you don’t need to write Tcl code,
but you will need to consult the Tk documentation, and occasionally the
Tcl documentation.  *note Tkinter: 17d. is a set of wrappers that
implement the Tk widgets as Python classes.  In addition, the internal
module ‘_tkinter’ provides a threadsafe mechanism which allows Python
and Tcl to interact.

  *note Tkinter: 17d.’s chief virtues are that it is fast, and that it
usually comes bundled with Python.  Although its standard documentation
is weak, good material is available, which includes: references,
tutorials, a book and others.  *note Tkinter: 17d. is also famous for
having an outdated look and feel, which has been vastly improved in Tk
8.5.  Nevertheless, there are many other GUI libraries that you could be
interested in.  For more information about alternatives, see the *note
Other Graphical User Interface Packages: 206e. section.

* Menu:

* Tkinter: Tkinter --- Python interface to Tcl/Tk. Python interface to Tcl/Tk
* ttk: ttk --- Tk themed widgets. Tk themed widgets
* Tix: Tix --- Extension widgets for Tk. Extension widgets for Tk
* ScrolledText: ScrolledText --- Scrolled Text Widget. Scrolled Text Widget
* turtle: turtle --- Turtle graphics for Tk. Turtle graphics for Tk
* IDLE:: 
* Other Graphical User Interface Packages:: 

Tkinter — Python interface to Tcl/Tk

* Tkinter Modules:: 
* Tkinter Life Preserver:: 
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk. 
* Mapping Basic Tk into Tkinter:: 
* How Tk and Tkinter are Related:: 
* Handy Reference:: 

Tkinter Life Preserver

* How To Use This Section:: 
* A Simple Hello World Program:: 

Handy Reference

* Setting Options:: 
* The Packer:: 
* Packer Options:: 
* Coupling Widget Variables:: 
* The Window Manager:: 
* Tk Option Data Types:: 
* Bindings and Events:: 
* The index Parameter:: 
* Images:: 

ttk — Tk themed widgets

* Using Ttk:: 
* Ttk Widgets:: 
* Widget:: 
* Combobox:: 
* Notebook:: 
* Progressbar:: 
* Separator:: 
* Sizegrip:: 
* Treeview:: 
* Ttk Styling:: 

Widget

* Standard Options:: 
* Scrollable Widget Options:: 
* Label Options:: 
* Compatibility Options:: 
* Widget States:: 
* ttk.Widget: ttk Widget. 

Combobox

* Options:: 
* Virtual events:: 
* ttk.Combobox: ttk Combobox. 

Notebook

* Options: Options<2>. 
* Tab Options:: 
* Tab Identifiers:: 
* Virtual Events:: 
* ttk.Notebook: ttk Notebook. 

Progressbar

* Options: Options<3>. 
* ttk.Progressbar: ttk Progressbar. 

Separator

* Options: Options<4>. 

Sizegrip

* Platform-specific notes:: 
* Bugs:: 

Treeview

* Options: Options<5>. 
* Item Options:: 
* Tag Options:: 
* Column Identifiers:: 
* Virtual Events: Virtual Events<2>. 
* ttk.Treeview: ttk Treeview. 

Ttk Styling

* Layouts:: 

Tix — Extension widgets for Tk

* Using Tix:: 
* Tix Widgets:: 
* Tix Commands:: 

Tix Widgets

* Basic Widgets:: 
* File Selectors:: 
* Hierarchical ListBox:: 
* Tabular ListBox:: 
* Manager Widgets:: 
* Image Types:: 
* Miscellaneous Widgets:: 
* Form Geometry Manager:: 

turtle — Turtle graphics for Tk

* Introduction: Introduction<9>. 
* Overview over available Turtle and Screen methods:: 
* Methods of RawTurtle/Turtle and corresponding functions:: 
* Methods of TurtleScreen/Screen and corresponding functions:: 
* The public classes of the module turtle:: 
* Help and configuration:: 
* Demo scripts:: 

Overview over available Turtle and Screen methods

* Turtle methods:: 
* Methods of TurtleScreen/Screen:: 

Methods of RawTurtle/Turtle and corresponding functions

* Turtle motion:: 
* Tell Turtle's state:: 
* Settings for measurement:: 
* Pen control:: 
* Turtle state:: 
* Using events:: 
* Special Turtle methods:: 
* Excursus about the use of compound shapes:: 

Pen control

* Drawing state:: 
* Color control:: 
* Filling:: 
* More drawing control:: 

Turtle state

* Visibility:: 
* Appearance:: 

Methods of TurtleScreen/Screen and corresponding functions

* Window control:: 
* Animation control:: 
* Using screen events:: 
* Settings and special methods:: 
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen. 

Help and configuration

* How to use help:: 
* Translation of docstrings into different languages:: 
* How to configure Screen and Turtles:: 

IDLE

* Menus:: 
* Basic editing and navigation:: 
* Syntax colors:: 
* Startup:: 

Menus

* File menu:: 
* Edit menu:: 
* Windows menu:: 
* Debug menu:: 
* Edit context menu:: 
* Shell context menu:: 

Basic editing and navigation

* Automatic indentation:: 
* Python Shell window:: 

Startup

* Command line usage:: 


File: python.info,  Node: Tkinter --- Python interface to Tcl/Tk,  Next: ttk --- Tk themed widgets,  Up: Graphical User Interfaces with Tk

5.24.1 ‘Tkinter’ — Python interface to Tcl/Tk
---------------------------------------------

The *note Tkinter: 17d. module ("Tk interface") is the standard Python
interface to the Tk GUI toolkit.  Both Tk and *note Tkinter: 17d. are
available on most Unix platforms, as well as on Windows systems.  (Tk
itself is not part of Python; it is maintained at ActiveState.)

     Note: *note Tkinter: 17d. has been renamed to ‘tkinter’ in Python
     3.  The *note 2to3: bdb. tool will automatically adapt imports when
     converting your sources to Python 3.

See also
........

Python Tkinter Resources(1)

     The Python Tkinter Topic Guide provides a great deal of information
     on using Tk from Python and links to other sources of information
     on Tk.

TKDocs(2)

     Extensive tutorial plus friendlier widget pages for some of the
     widgets.

Tkinter reference: a GUI for Python(3)

     On-line reference material.

Tkinter docs from effbot(4)

     Online reference for tkinter supported by effbot.org.

Tcl/Tk manual(5)

     Official manual for the latest tcl/tk version.

Programming Python(6)

     Book by Mark Lutz, has excellent coverage of Tkinter.

Modern Tkinter for Busy Python Developers(7)

     Book by Mark Rozerman about building attractive and modern
     graphical user interfaces with Python and Tkinter.

Python and Tkinter Programming(8)

     The book by John Grayson (ISBN 1-884777-81-3).

* Menu:

* Tkinter Modules:: 
* Tkinter Life Preserver:: 
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk. 
* Mapping Basic Tk into Tkinter:: 
* How Tk and Tkinter are Related:: 
* Handy Reference:: 

   ---------- Footnotes ----------

   (1) https://wiki.python.org/moin/TkInter

   (2) http://www.tkdocs.com/

   (3) http://infohost.nmt.edu/tcc/help/pubs/tkinter/

   (4) http://effbot.org/tkinterbook/

   (5) http://www.tcl.tk/man/tcl8.5/

   (6) http://www.amazon.com/Programming-Python-Mark-Lutz/dp/0596158106/

   (7) 
http://www.amazon.com/Modern-Tkinter-Python-Developers-ebook/dp/B0071QDNLO/

   (8) http://www.amazon.com/exec/obidos/ASIN/1884777813


File: python.info,  Node: Tkinter Modules,  Next: Tkinter Life Preserver,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.1 Tkinter Modules
........................

Most of the time, the *note Tkinter: 17d. module is all you really need,
but a number of additional modules are available as well.  The Tk
interface is located in a binary module named ‘_tkinter’.  This module
contains the low-level interface to Tk, and should never be used
directly by application programmers.  It is usually a shared library (or
DLL), but might in some cases be statically linked with the Python
interpreter.

  In addition to the Tk interface module, *note Tkinter: 17d. includes a
number of Python modules.  The two most important modules are the *note
Tkinter: 17d. module itself, and a module called ‘Tkconstants’.  The
former automatically imports the latter, so to use Tkinter, all you need
to do is to import one module:

     import Tkinter

  Or, more often:

     from Tkinter import *

 -- Class: Tkinter.Tk (screenName=None, baseName=None, className='Tk',
          useTk=1)

     The *note Tk: 2072. class is instantiated without arguments.  This
     creates a toplevel widget of Tk which usually is the main window of
     an application.  Each instance has its own associated Tcl
     interpreter.

     Changed in version 2.4: The _useTk_ parameter was added.

 -- Function: Tkinter.Tcl (screenName=None, baseName=None,
          className='Tk', useTk=0)

     The *note Tcl(): 2073. function is a factory function which creates
     an object much like that created by the *note Tk: 2072. class,
     except that it does not initialize the Tk subsystem.  This is most
     often useful when driving the Tcl interpreter in an environment
     where one doesn’t want to create extraneous toplevel windows, or
     where one cannot (such as Unix/Linux systems without an X server).
     An object created by the *note Tcl(): 2073. object can have a
     Toplevel window created (and the Tk subsystem initialized) by
     calling its ‘loadtk()’ method.

     New in version 2.4.

  Other modules that provide Tk support include:

*note ScrolledText: 14d.

     Text widget with a vertical scroll bar built in.

‘tkColorChooser’

     Dialog to let the user choose a color.

‘tkCommonDialog’

     Base class for the dialogs defined in the other modules listed
     here.

‘tkFileDialog’

     Common dialogs to allow the user to specify a file to open or save.

‘tkFont’

     Utilities to help work with fonts.

‘tkMessageBox’

     Access to standard Tk dialog boxes.

‘tkSimpleDialog’

     Basic dialogs and convenience functions.

‘Tkdnd’

     Drag-and-drop support for *note Tkinter: 17d.  This is experimental
     and should become deprecated when it is replaced with the Tk DND.

*note turtle: 184.

     Turtle graphics in a Tk window.

  These have been renamed as well in Python 3; they were all made
submodules of the new ‘tkinter’ package.


File: python.info,  Node: Tkinter Life Preserver,  Next: A Very Quick Look at Tcl/Tk,  Prev: Tkinter Modules,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.2 Tkinter Life Preserver
...............................

This section is not designed to be an exhaustive tutorial on either Tk
or Tkinter.  Rather, it is intended as a stop gap, providing some
introductory orientation on the system.

  Credits:

   * Tkinter was written by Steen Lumholt and Guido van Rossum.

   * Tk was written by John Ousterhout while at Berkeley.

   * This Life Preserver was written by Matt Conway at the University of
     Virginia.

   * The html rendering, and some liberal editing, was produced from a
     FrameMaker version by Ken Manheimer.

   * Fredrik Lundh elaborated and revised the class interface
     descriptions, to get them current with Tk 4.2.

   * Mike Clarkson converted the documentation to LaTeX, and compiled
     the User Interface chapter of the reference manual.

* Menu:

* How To Use This Section:: 
* A Simple Hello World Program:: 


File: python.info,  Node: How To Use This Section,  Next: A Simple Hello World Program,  Up: Tkinter Life Preserver

5.24.1.3 How To Use This Section
................................

This section is designed in two parts: the first half (roughly) covers
background material, while the second half can be taken to the keyboard
as a handy reference.

  When trying to answer questions of the form "how do I do blah", it is
often best to find out how to do"blah" in straight Tk, and then convert
this back into the corresponding *note Tkinter: 17d. call.  Python
programmers can often guess at the correct Python command by looking at
the Tk documentation.  This means that in order to use Tkinter, you will
have to know a little bit about Tk.  This document can’t fulfill that
role, so the best we can do is point you to the best documentation that
exists.  Here are some hints:

   * The authors strongly suggest getting a copy of the Tk man pages.
     Specifically, the man pages in the ‘mann’ directory are most
     useful.  The ‘man3’ man pages describe the C interface to the Tk
     library and thus are not especially helpful for script writers.

   * Addison-Wesley publishes a book called Tcl and the Tk Toolkit by
     John Ousterhout (ISBN 0-201-63337-X) which is a good introduction
     to Tcl and Tk for the novice.  The book is not exhaustive, and for
     many details it defers to the man pages.

   * ‘Tkinter.py’ is a last resort for most, but can be a good place to
     go when nothing else makes sense.

See also
........

ActiveState Tcl Home Page(1)

     The Tk/Tcl development is largely taking place at ActiveState.

Tcl and the Tk Toolkit(2)

     The book by John Ousterhout, the inventor of Tcl.

Practical Programming in Tcl and Tk(3)

     Brent Welch’s encyclopedic book.

   ---------- Footnotes ----------

   (1) http://tcl.activestate.com/

   (2) http://www.amazon.com/exec/obidos/ASIN/020163337X

   (3) http://www.amazon.com/exec/obidos/ASIN/0130220280


File: python.info,  Node: A Simple Hello World Program,  Prev: How To Use This Section,  Up: Tkinter Life Preserver

5.24.1.4 A Simple Hello World Program
.....................................

     from Tkinter import *

     class Application(Frame):
         def say_hi(self):
             print "hi there, everyone!"

         def createWidgets(self):
             self.QUIT = Button(self)
             self.QUIT["text"] = "QUIT"
             self.QUIT["fg"]   = "red"
             self.QUIT["command"] =  self.quit

             self.QUIT.pack({"side": "left"})

             self.hi_there = Button(self)
             self.hi_there["text"] = "Hello",
             self.hi_there["command"] = self.say_hi

             self.hi_there.pack({"side": "left"})

         def __init__(self, master=None):
             Frame.__init__(self, master)
             self.pack()
             self.createWidgets()

     root = Tk()
     app = Application(master=root)
     app.mainloop()
     root.destroy()


File: python.info,  Node: A Very Quick Look at Tcl/Tk,  Next: Mapping Basic Tk into Tkinter,  Prev: Tkinter Life Preserver,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.5 A (Very) Quick Look at Tcl/Tk
......................................

The class hierarchy looks complicated, but in actual practice,
application programmers almost always refer to the classes at the very
bottom of the hierarchy.

  Notes:

   * These classes are provided for the purposes of organizing certain
     functions under one namespace.  They aren’t meant to be
     instantiated independently.

   * The *note Tk: 2072. class is meant to be instantiated only once in
     an application.  Application programmers need not instantiate one
     explicitly, the system creates one whenever any of the other
     classes are instantiated.

   * The ‘Widget’ class is not meant to be instantiated, it is meant
     only for subclassing to make "real" widgets (in C++, this is called
     an ’abstract class’).

  To make use of this reference material, there will be times when you
will need to know how to read short passages of Tk and how to identify
the various parts of a Tk command.  (See section *note Mapping Basic Tk
into Tkinter: 2078. for the *note Tkinter: 17d. equivalents of what’s
below.)

  Tk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are
just lists of tokens separated by spaces.  A Tk widget is just its
_class_, the _options_ that help configure it, and the _actions_ that
make it do useful things.

  To make a widget in Tk, the command is always of the form:

     classCommand newPathname options

_classCommand_

     denotes which kind of widget to make (a button, a label, a menu...)

_newPathname_

     is the new name for this widget.  All names in Tk must be unique.
     To help enforce this, widgets in Tk are named with _pathnames_,
     just like files in a file system.  The top level widget, the
     _root_, is called ‘.’ (period) and children are delimited by more
     periods.  For example, ‘.myApp.controlPanel.okButton’ might be the
     name of a widget.

_options_

     configure the widget’s appearance and in some cases, its behavior.
     The options come in the form of a list of flags and values.  Flags
     are preceded by a ’-’, like Unix shell command flags, and values
     are put in quotes if they are more than one word.

  For example:

     button   .fred   -fg red -text "hi there"
        ^       ^     \_____________________/
        |       |                |
      class    new            options
     command  widget  (-opt val -opt val ...)

  Once created, the pathname to the widget becomes a new command.  This
new _widget command_ is the programmer’s handle for getting the new
widget to perform some _action_.  In C, you’d express this as
someAction(fred, someOptions), in C++, you would express this as
fred.someAction(someOptions), and in Tk, you say:

     .fred someAction someOptions

  Note that the object name, ‘.fred’, starts with a dot.

  As you’d expect, the legal values for _someAction_ will depend on the
widget’s class: ‘.fred disable’ works if fred is a button (fred gets
greyed out), but does not work if fred is a label (disabling of labels
is not supported in Tk).

  The legal values of _someOptions_ is action dependent.  Some actions,
like ‘disable’, require no arguments, others, like a text-entry box’s
‘delete’ command, would need arguments to specify what range of text to
delete.


File: python.info,  Node: Mapping Basic Tk into Tkinter,  Next: How Tk and Tkinter are Related,  Prev: A Very Quick Look at Tcl/Tk,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.6 Mapping Basic Tk into Tkinter
......................................

Class commands in Tk correspond to class constructors in Tkinter.

     button .fred                =====>  fred = Button()

  The master of an object is implicit in the new name given to it at
creation time.  In Tkinter, masters are specified explicitly.

     button .panel.fred          =====>  fred = Button(panel)

  The configuration options in Tk are given in lists of hyphened tags
followed by values.  In Tkinter, options are specified as
keyword-arguments in the instance constructor, and keyword-args for
configure calls or as instance indices, in dictionary style, for
established instances.  See section *note Setting Options: 207a. on
setting options.

     button .fred -fg red        =====>  fred = Button(panel, fg = "red")
     .fred configure -fg red     =====>  fred["fg"] = red
                                 OR ==>  fred.config(fg = "red")

  In Tk, to perform an action on a widget, use the widget name as a
command, and follow it with an action name, possibly with arguments
(options).  In Tkinter, you call methods on the class instance to invoke
actions on the widget.  The actions (methods) that a given widget can
perform are listed in the Tkinter.py module.

     .fred invoke                =====>  fred.invoke()

  To give a widget to the packer (geometry manager), you call pack with
optional arguments.  In Tkinter, the Pack class holds all this
functionality, and the various forms of the pack command are implemented
as methods.  All widgets in *note Tkinter: 17d. are subclassed from the
Packer, and so inherit all the packing methods.  See the *note Tix: 17c.
module documentation for additional information on the Form geometry
manager.

     pack .fred -side left       =====>  fred.pack(side = "left")


File: python.info,  Node: How Tk and Tkinter are Related,  Next: Handy Reference,  Prev: Mapping Basic Tk into Tkinter,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.7 How Tk and Tkinter are Related
.......................................

From the top down:

Your App Here (Python)

     A Python application makes a *note Tkinter: 17d. call.

Tkinter (Python Module)

     This call (say, for example, creating a button widget), is
     implemented in the _Tkinter_ module, which is written in Python.
     This Python function will parse the commands and the arguments and
     convert them into a form that makes them look as if they had come
     from a Tk script instead of a Python script.

tkinter (C)

     These commands and their arguments will be passed to a C function
     in the _tkinter_ - note the lowercase - extension module.

Tk Widgets (C and Tcl)

     This C function is able to make calls into other C modules,
     including the C functions that make up the Tk library.  Tk is
     implemented in C and some Tcl.  The Tcl part of the Tk widgets is
     used to bind certain default behaviors to widgets, and is executed
     once at the point where the Python *note Tkinter: 17d. module is
     imported.  (The user never sees this stage).

Tk (C)

     The Tk part of the Tk Widgets implement the final mapping to ...

Xlib (C)

     the Xlib library to draw graphics on the screen.


File: python.info,  Node: Handy Reference,  Prev: How Tk and Tkinter are Related,  Up: Tkinter --- Python interface to Tcl/Tk

5.24.1.8 Handy Reference
........................

* Menu:

* Setting Options:: 
* The Packer:: 
* Packer Options:: 
* Coupling Widget Variables:: 
* The Window Manager:: 
* Tk Option Data Types:: 
* Bindings and Events:: 
* The index Parameter:: 
* Images:: 


File: python.info,  Node: Setting Options,  Next: The Packer,  Up: Handy Reference

5.24.1.9 Setting Options
........................

Options control things like the color and border width of a widget.
Options can be set in three ways:

At object creation time, using keyword arguments

          fred = Button(self, fg = "red", bg = "blue")

After object creation, treating the option name like a dictionary index

          fred["fg"] = "red"
          fred["bg"] = "blue"

Use the config() method to update multiple attrs subsequent to object creation

          fred.config(fg = "red", bg = "blue")

  For a complete explanation of a given option and its behavior, see the
Tk man pages for the widget in question.

  Note that the man pages list "STANDARD OPTIONS" and "WIDGET SPECIFIC
OPTIONS" for each widget.  The former is a list of options that are
common to many widgets, the latter are the options that are
idiosyncratic to that particular widget.  The Standard Options are
documented on the ‘options(3)’ man page.

  No distinction between standard and widget-specific options is made in
this document.  Some options don’t apply to some kinds of widgets.
Whether a given widget responds to a particular option depends on the
class of the widget; buttons have a ‘command’ option, labels do not.

  The options supported by a given widget are listed in that widget’s
man page, or can be queried at runtime by calling the ‘config()’ method
without arguments, or by calling the ‘keys()’ method on that widget.
The return value of these calls is a dictionary whose key is the name of
the option as a string (for example, ‘'relief'’) and whose values are
5-tuples.

  Some options, like ‘bg’ are synonyms for common options with long
names (‘bg’ is shorthand for "background").  Passing the ‘config()’
method the name of a shorthand option will return a 2-tuple, not
5-tuple.  The 2-tuple passed back will contain the name of the synonym
and the "real" option (such as ‘('bg', 'background')’).

Index       Meaning                               Example
                                                  
---------------------------------------------------------------------
                                                  
0           option name                           ‘'relief'’
                                                  
                                                  
1           option name for database lookup       ‘'relief'’
                                                  
                                                  
2           option class for database lookup      ‘'Relief'’
                                                  
                                                  
3           default value                         ‘'raised'’
                                                  
                                                  
4           current value                         ‘'groove'’
                                                  

  Example:

     >>> print fred.config()
     {'relief': ('relief', 'relief', 'Relief', 'raised', 'groove')}

  Of course, the dictionary printed will include all the options
available and their values.  This is meant only as an example.


File: python.info,  Node: The Packer,  Next: Packer Options,  Prev: Setting Options,  Up: Handy Reference

5.24.1.10 The Packer
....................

The packer is one of Tk’s geometry-management mechanisms.  Geometry
managers are used to specify the relative positioning of the positioning
of widgets within their container - their mutual _master_.  In contrast
to the more cumbersome _placer_ (which is used less commonly, and we do
not cover here), the packer takes qualitative relationship specification
- _above_, _to the left of_, _filling_, etc - and works everything out
to determine the exact placement coordinates for you.

  The size of any _master_ widget is determined by the size of the
"slave widgets" inside.  The packer is used to control where slave
widgets appear inside the master into which they are packed.  You can
pack widgets into frames, and frames into other frames, in order to
achieve the kind of layout you desire.  Additionally, the arrangement is
dynamically adjusted to accommodate incremental changes to the
configuration, once it is packed.

  Note that widgets do not appear until they have had their geometry
specified with a geometry manager.  It’s a common early mistake to leave
out the geometry specification, and then be surprised when the widget is
created but nothing appears.  A widget will appear only after it has
had, for example, the packer’s ‘pack()’ method applied to it.

  The pack() method can be called with keyword-option/value pairs that
control where the widget is to appear within its container, and how it
is to behave when the main application window is resized.  Here are some
examples:

     fred.pack()                     # defaults to side = "top"
     fred.pack(side = "left")
     fred.pack(expand = 1)


File: python.info,  Node: Packer Options,  Next: Coupling Widget Variables,  Prev: The Packer,  Up: Handy Reference

5.24.1.11 Packer Options
........................

For more extensive information on the packer and the options that it can
take, see the man pages and page 183 of John Ousterhout’s book.

anchor

     Anchor type.  Denotes where the packer is to place each slave in
     its parcel.

expand

     Boolean, ‘0’ or ‘1’.

fill

     Legal values: ‘'x'’, ‘'y'’, ‘'both'’, ‘'none'’.

ipadx and ipady

     A distance - designating internal padding on each side of the slave
     widget.

padx and pady

     A distance - designating external padding on each side of the slave
     widget.

side

     Legal values are: ‘'left'’, ‘'right'’, ‘'top'’, ‘'bottom'’.


File: python.info,  Node: Coupling Widget Variables,  Next: The Window Manager,  Prev: Packer Options,  Up: Handy Reference

5.24.1.12 Coupling Widget Variables
...................................

The current-value setting of some widgets (like text entry widgets) can
be connected directly to application variables by using special options.
These options are ‘variable’, ‘textvariable’, ‘onvalue’, ‘offvalue’, and
‘value’.  This connection works both ways: if the variable changes for
any reason, the widget it’s connected to will be updated to reflect the
new value.

  Unfortunately, in the current implementation of *note Tkinter: 17d. it
is not possible to hand over an arbitrary Python variable to a widget
through a ‘variable’ or ‘textvariable’ option.  The only kinds of
variables for which this works are variables that are subclassed from a
class called Variable, defined in the *note Tkinter: 17d. module.

  There are many useful subclasses of Variable already defined:
‘StringVar’, ‘IntVar’, ‘DoubleVar’, and ‘BooleanVar’.  To read the
current value of such a variable, call the ‘get()’ method on it, and to
change its value you call the ‘set()’ method.  If you follow this
protocol, the widget will always track the value of the variable, with
no further intervention on your part.

  For example:

     class App(Frame):
         def __init__(self, master=None):
             Frame.__init__(self, master)
             self.pack()

             self.entrythingy = Entry()
             self.entrythingy.pack()

             # here is the application variable
             self.contents = StringVar()
             # set it to some value
             self.contents.set("this is a variable")
             # tell the entry widget to watch this variable
             self.entrythingy["textvariable"] = self.contents

             # and here we get a callback when the user hits return.
             # we will have the program print out the value of the
             # application variable when the user hits return
             self.entrythingy.bind('<Key-Return>',
                                   self.print_contents)

         def print_contents(self, event):
             print "hi. contents of entry is now ---->", \
                   self.contents.get()


File: python.info,  Node: The Window Manager,  Next: Tk Option Data Types,  Prev: Coupling Widget Variables,  Up: Handy Reference

5.24.1.13 The Window Manager
............................

In Tk, there is a utility command, ‘wm’, for interacting with the window
manager.  Options to the ‘wm’ command allow you to control things like
titles, placement, icon bitmaps, and the like.  In *note Tkinter: 17d,
these commands have been implemented as methods on the ‘Wm’ class.
Toplevel widgets are subclassed from the ‘Wm’ class, and so can call the
‘Wm’ methods directly.

  To get at the toplevel window that contains a given widget, you can
often just refer to the widget’s master.  Of course if the widget has
been packed inside of a frame, the master won’t represent a toplevel
window.  To get at the toplevel window that contains an arbitrary
widget, you can call the ‘_root()’ method.  This method begins with an
underscore to denote the fact that this function is part of the
implementation, and not an interface to Tk functionality.

  Here are some examples of typical usage:

     from Tkinter import *
     class App(Frame):
         def __init__(self, master=None):
             Frame.__init__(self, master)
             self.pack()


     # create the application
     myapp = App()

     #
     # here are method calls to the window manager class
     #
     myapp.master.title("My Do-Nothing Application")
     myapp.master.maxsize(1000, 400)

     # start the program
     myapp.mainloop()


File: python.info,  Node: Tk Option Data Types,  Next: Bindings and Events,  Prev: The Window Manager,  Up: Handy Reference

5.24.1.14 Tk Option Data Types
..............................

anchor

     Legal values are points of the compass: ‘"n"’, ‘"ne"’, ‘"e"’,
     ‘"se"’, ‘"s"’, ‘"sw"’, ‘"w"’, ‘"nw"’, and also ‘"center"’.

bitmap

     There are eight built-in, named bitmaps: ‘'error'’, ‘'gray25'’,
     ‘'gray50'’, ‘'hourglass'’, ‘'info'’, ‘'questhead'’, ‘'question'’,
     ‘'warning'’.  To specify an X bitmap filename, give the full path
     to the file, preceded with an ‘@’, as in
     ‘"@/usr/contrib/bitmap/gumby.bit"’.

boolean

     You can pass integers 0 or 1 or the strings ‘"yes"’ or ‘"no"’.

callback

     This is any Python function that takes no arguments.  For example:

          def print_it():
                  print "hi there"
          fred["command"] = print_it

color

     Colors can be given as the names of X colors in the rgb.txt file,
     or as strings representing RGB values in 4 bit: ‘"#RGB"’, 8 bit:
     ‘"#RRGGBB"’, 12 bit" ‘"#RRRGGGBBB"’, or 16 bit ‘"#RRRRGGGGBBBB"’
     ranges, where R,G,B here represent any legal hex digit.  See page
     160 of Ousterhout’s book for details.

cursor

     The standard X cursor names from ‘cursorfont.h’ can be used,
     without the ‘XC_’ prefix.  For example to get a hand cursor
     (‘XC_hand2’), use the string ‘"hand2"’.  You can also specify a
     bitmap and mask file of your own.  See page 179 of Ousterhout’s
     book.

distance

     Screen distances can be specified in either pixels or absolute
     distances.  Pixels are given as numbers and absolute distances as
     strings, with the trailing character denoting units: ‘c’ for
     centimetres, ‘i’ for inches, ‘m’ for millimetres, ‘p’ for printer’s
     points.  For example, 3.5 inches is expressed as ‘"3.5i"’.

font

     Tk uses a list font name format, such as ‘{courier 10 bold}’.  Font
     sizes with positive numbers are measured in points; sizes with
     negative numbers are measured in pixels.

geometry

     This is a string of the form ‘widthxheight’, where width and height
     are measured in pixels for most widgets (in characters for widgets
     displaying text).  For example: ‘fred["geometry"] = "200x100"’.

justify

     Legal values are the strings: ‘"left"’, ‘"center"’, ‘"right"’, and
     ‘"fill"’.

region

     This is a string with four space-delimited elements, each of which
     is a legal distance (see above).  For example: ‘"2 3 4 5"’ and ‘"3i
     2i 4.5i 2i"’ and ‘"3c 2c 4c 10.43c"’ are all legal regions.

relief

     Determines what the border style of a widget will be.  Legal values
     are: ‘"raised"’, ‘"sunken"’, ‘"flat"’, ‘"groove"’, and ‘"ridge"’.

scrollcommand

     This is almost always the ‘set()’ method of some scrollbar widget,
     but can be any widget method that takes a single argument.  Refer
     to the file ‘Demo/tkinter/matt/canvas-with-scrollbars.py’ in the
     Python source distribution for an example.

wrap:

     Must be one of: ‘"none"’, ‘"char"’, or ‘"word"’.


File: python.info,  Node: Bindings and Events,  Next: The index Parameter,  Prev: Tk Option Data Types,  Up: Handy Reference

5.24.1.15 Bindings and Events
.............................

The bind method from the widget command allows you to watch for certain
events and to have a callback function trigger when that event type
occurs.  The form of the bind method is:

     def bind(self, sequence, func, add=''):

  where:

sequence

     is a string that denotes the target kind of event.  (See the bind
     man page and page 201 of John Ousterhout’s book for details).

func

     is a Python function, taking one argument, to be invoked when the
     event occurs.  An Event instance will be passed as the argument.
     (Functions deployed this way are commonly known as _callbacks_.)

add

     is optional, either ‘''’ or ‘'+'’.  Passing an empty string denotes
     that this binding is to replace any other bindings that this event
     is associated with.  Passing a ‘'+'’ means that this function is to
     be added to the list of functions bound to this event type.

  For example:

     def turnRed(self, event):
         event.widget["activeforeground"] = "red"

     self.button.bind("<Enter>", self.turnRed)

  Notice how the widget field of the event is being accessed in the
‘turnRed()’ callback.  This field contains the widget that caught the X
event.  The following table lists the other event fields you can access,
and how they are denoted in Tk, which can be useful when referring to
the Tk man pages.

     Tk      Tkinter Event Field             Tk      Tkinter Event Field
     --      -------------------             --      -------------------
     %f      focus                           %A      char
     %h      height                          %E      send_event
     %k      keycode                         %K      keysym
     %s      state                           %N      keysym_num
     %t      time                            %T      type
     %w      width                           %W      widget
     %x      x                               %X      x_root
     %y      y                               %Y      y_root


File: python.info,  Node: The index Parameter,  Next: Images,  Prev: Bindings and Events,  Up: Handy Reference

5.24.1.16 The index Parameter
.............................

A number of widgets require"index" parameters to be passed.  These are
used to point at a specific place in a Text widget, or to particular
characters in an Entry widget, or to particular menu items in a Menu
widget.

Entry widget indexes (index, view index, etc.)

     Entry widgets have options that refer to character positions in the
     text being displayed.  You can use these *note Tkinter: 17d.
     functions to access these special points in text widgets:

     AtEnd()

          refers to the last position in the text

     AtInsert()

          refers to the point where the text cursor is

     AtSelFirst()

          indicates the beginning point of the selected text

     AtSelLast()

          denotes the last point of the selected text and finally

     At(x[, y])

          refers to the character at pixel location _x_, _y_ (with _y_
          not used in the case of a text entry widget, which contains a
          single line of text).

Text widget indexes

     The index notation for Text widgets is very rich and is best
     described in the Tk man pages.

Menu indexes (menu.invoke(), menu.entryconfig(), etc.)

     Some options and methods for menus manipulate specific menu
     entries.  Anytime a menu index is needed for an option or a
     parameter, you may pass in:

        * an integer which refers to the numeric position of the entry
          in the widget, counted from the top, starting with 0;

        * the string ‘'active'’, which refers to the menu position that
          is currently under the cursor;

        * the string ‘"last"’ which refers to the last menu item;

        * An integer preceded by ‘@’, as in ‘@6’, where the integer is
          interpreted as a y pixel coordinate in the menu’s coordinate
          system;

        * the string ‘"none"’, which indicates no menu entry at all,
          most often used with menu.activate() to deactivate all
          entries, and finally,

        * a text string that is pattern matched against the label of the
          menu entry, as scanned from the top of the menu to the bottom.
          Note that this index type is considered after all the others,
          which means that matches for menu items labelled ‘last’,
          ‘active’, or ‘none’ may be interpreted as the above literals,
          instead.


File: python.info,  Node: Images,  Prev: The index Parameter,  Up: Handy Reference

5.24.1.17 Images
................

Bitmap/Pixelmap images can be created through the subclasses of
‘Tkinter.Image’:

   * ‘BitmapImage’ can be used for X11 bitmap data.

   * ‘PhotoImage’ can be used for GIF and PPM/PGM color bitmaps.

  Either type of image is created through either the ‘file’ or the
‘data’ option (other options are available as well).

  The image object can then be used wherever an ‘image’ option is
supported by some widget (e.g.  labels, buttons, menus).  In these
cases, Tk will not keep a reference to the image.  When the last Python
reference to the image object is deleted, the image data is deleted as
well, and Tk will display an empty box wherever the image was used.


File: python.info,  Node: ttk --- Tk themed widgets,  Next: Tix --- Extension widgets for Tk,  Prev: Tkinter --- Python interface to Tcl/Tk,  Up: Graphical User Interfaces with Tk

5.24.2 ‘ttk’ — Tk themed widgets
--------------------------------

The *note ttk: 182. module provides access to the Tk themed widget set,
which has been introduced in Tk 8.5.  If Python is not compiled against
Tk 8.5 code may still use this module as long as Tile is installed.
However, some features provided by the new Tk, like anti-aliased font
rendering under X11, window transparency (on X11 you will need a
composition window manager) will be missing.

  The basic idea of *note ttk: 182. is to separate, to the extent
possible, the code implementing a widget’s behavior from the code
implementing its appearance.

See also
........

Tk Widget Styling Support(1)

     The document which brought up theming support for Tk

* Menu:

* Using Ttk:: 
* Ttk Widgets:: 
* Widget:: 
* Combobox:: 
* Notebook:: 
* Progressbar:: 
* Separator:: 
* Sizegrip:: 
* Treeview:: 
* Ttk Styling:: 

   ---------- Footnotes ----------

   (1) http://www.tcl.tk/cgi-bin/tct/tip/48


File: python.info,  Node: Using Ttk,  Next: Ttk Widgets,  Up: ttk --- Tk themed widgets

5.24.2.1 Using Ttk
..................

To start using Ttk, import its module:

     import ttk

  But code like this:

     from Tkinter import *

  may optionally want to use this:

     from Tkinter import *
     from ttk import *

  And then several *note ttk: 182. widgets (‘Button’, ‘Checkbutton’,
‘Entry’, ‘Frame’, ‘Label’, ‘LabelFrame’, ‘Menubutton’, ‘PanedWindow’,
‘Radiobutton’, ‘Scale’ and ‘Scrollbar’) will automatically substitute
for the Tk widgets.

  This has the direct benefit of using the new widgets, giving better
look & feel across platforms, but be aware that they are not totally
compatible.  The main difference is that widget options such as "fg",
"bg" and others related to widget styling are no longer present in Ttk
widgets.  Use *note ttk.Style: 2089. to achieve the same (or better)
styling.

See also
........

Converting existing applications to use the Tile widgets(1)

     A text which talks in Tcl terms about differences typically found
     when converting applications to use the new widgets.

   ---------- Footnotes ----------

   (1) http://tktable.sourceforge.net/tile/doc/converting.txt


File: python.info,  Node: Ttk Widgets,  Next: Widget,  Prev: Using Ttk,  Up: ttk --- Tk themed widgets

5.24.2.2 Ttk Widgets
....................

Ttk comes with 17 widgets, 11 of which already exist in Tkinter:
‘Button’, ‘Checkbutton’, ‘Entry’, ‘Frame’, ‘Label’, ‘LabelFrame’,
‘Menubutton’, ‘PanedWindow’, ‘Radiobutton’, ‘Scale’ and ‘Scrollbar’.
The 6 new widget classes are: *note Combobox: 208b, *note Notebook:
208c, *note Progressbar: 208d, ‘Separator’, ‘Sizegrip’ and *note
Treeview: 208e.  All of these classes are subclasses of *note Widget:
208f.

  As said previously, you will notice changes in look-and-feel as well
in the styling code.  To demonstrate the latter, a very simple example
is shown below.

  Tk code:

     l1 = Tkinter.Label(text="Test", fg="black", bg="white")
     l2 = Tkinter.Label(text="Test", fg="black", bg="white")

  Corresponding Ttk code:

     style = ttk.Style()
     style.configure("BW.TLabel", foreground="black", background="white")

     l1 = ttk.Label(text="Test", style="BW.TLabel")
     l2 = ttk.Label(text="Test", style="BW.TLabel")

  For more information about *note TtkStyling: 2090. read the *note
Style: 2089. class documentation.


File: python.info,  Node: Widget,  Next: Combobox,  Prev: Ttk Widgets,  Up: ttk --- Tk themed widgets

5.24.2.3 Widget
...............

*note ttk.Widget: 208f. defines standard options and methods supported
by Tk themed widgets and is not supposed to be directly instantiated.

* Menu:

* Standard Options:: 
* Scrollable Widget Options:: 
* Label Options:: 
* Compatibility Options:: 
* Widget States:: 
* ttk.Widget: ttk Widget. 


File: python.info,  Node: Standard Options,  Next: Scrollable Widget Options,  Up: Widget

5.24.2.4 Standard Options
.........................

All the *note ttk: 182. widgets accept the following options:

     Option          Description
                     
     -----------------------------------------------------------------------------------
                     
     class           Specifies the window class.  The class is used when querying the
                     option database for the window’s other options, to determine the
                     default bindtags for the window, and to select the widget’s
                     default layout and style.  This is a read-only option which may
                     only be specified when the window is created.
                     
                     
     cursor          Specifies the mouse cursor to be used for the widget.  If set to
                     the empty string (the default), the cursor is inherited from the
                     parent widget.
                     
                     
     takefocus       Determines whether the window accepts the focus during keyboard
                     traversal.  0, 1 or an empty string is returned.  If 0, the
                     window should be skipped entirely during keyboard traversal.  If
                     1, the window should receive the input focus as long as it is
                     viewable.  An empty string means that the traversal scripts make
                     the decision about whether or not to focus on the window.
                     
                     
     style           May be used to specify a custom widget style.
                     


File: python.info,  Node: Scrollable Widget Options,  Next: Label Options,  Prev: Standard Options,  Up: Widget

5.24.2.5 Scrollable Widget Options
..................................

The following options are supported by widgets that are controlled by a
scrollbar.

     option               description
                          
     -----------------------------------------------------------------------------------
                          
     xscrollcommand       Used to communicate with horizontal scrollbars.
                          
                          When the view in the widget’s window changes, the widget
                          will generate a Tcl command based on the scrollcommand.
                          
                          Usually this option consists of the ‘Scrollbar.set()’
                          method of some scrollbar.  This will cause the scrollbar to
                          be updated whenever the view in the window changes.
                          
                          
     yscrollcommand       Used to communicate with vertical scrollbars.  For more
                          information, see above.
                          


File: python.info,  Node: Label Options,  Next: Compatibility Options,  Prev: Scrollable Widget Options,  Up: Widget

5.24.2.6 Label Options
......................

The following options are supported by labels, buttons and other
button-like widgets.

     option             description
                        
     -----------------------------------------------------------------------------------
                        
     text               Specifies a text string to be displayed inside the widget.
                        
                        
     textvariable       Specifies a name whose value will be used in place of the
                        text option resource.
                        
                        
     underline          If set, specifies the index (0-based) of a character to
                        underline in the text string.  The underline character is
                        used for mnemonic activation.
                        
                        
     image              Specifies an image to display.  This is a list of 1 or more
                        elements.  The first element is the default image name.  The
                        rest of the list is a sequence of statespec/value pairs as
                        defined by *note Style.map(): 2095, specifying different
                        images to use when the widget is in a particular state or a
                        combination of states.  All images in the list should have
                        the same size.
                        
                        
     compound           Specifies how to display the image relative to the text, in
                        the case both text and image options are present.  Valid
                        values are:
                        
                           * text: display text only
                        
                           * image: display image only
                        
                           * top, bottom, left, right: display image above, below,
                             left of, or right of the text, respectively.
                        
                           * none: the default.  display the image if present,
                             otherwise the text.
                        
                        
     width              If greater than zero, specifies how much space, in character
                        widths, to allocate for the text label; if less than zero,
                        specifies a minimum width.  If zero or unspecified, the
                        natural width of the text label is used.
                        


File: python.info,  Node: Compatibility Options,  Next: Widget States,  Prev: Label Options,  Up: Widget

5.24.2.7 Compatibility Options
..............................

     option       description
                  
     ----------------------------------------------------------------------------------
                  
     state        May be set to "normal" or "disabled" to control the "disabled"
                  state bit.  This is a write-only option: setting it changes the
                  widget state, but the *note Widget.state(): 2097. method does not
                  affect this option.
                  


File: python.info,  Node: Widget States,  Next: ttk Widget,  Prev: Compatibility Options,  Up: Widget

5.24.2.8 Widget States
......................

The widget state is a bitmap of independent state flags.

     flag             description
                      
     -----------------------------------------------------------------------------------
                      
     active           The mouse cursor is over the widget and pressing a mouse button
                      will cause some action to occur.
                      
                      
     disabled         Widget is disabled under program control.
                      
                      
     focus            Widget has keyboard focus.
                      
                      
     pressed          Widget is being pressed.
                      
                      
     selected         "On", "true", or "current" for things like Checkbuttons and
                      radiobuttons.
                      
                      
     background       Windows and Mac have a notion of an "active" or foreground
                      window.  The _background_ state is set for widgets in a
                      background window, and cleared for those in the foreground
                      window.
                      
                      
     readonly         Widget should not allow user modification.
                      
                      
     alternate        A widget-specific alternate display format.
                      
                      
     invalid          The widget’s value is invalid.
                      

  A state specification is a sequence of state names, optionally
prefixed with an exclamation point indicating that the bit is off.


File: python.info,  Node: ttk Widget,  Prev: Widget States,  Up: Widget

5.24.2.9 ttk.Widget
...................

Besides the methods described below, the *note ttk.Widget: 208f. class
supports the ‘Tkinter.Widget.cget()’ and ‘Tkinter.Widget.configure()’
methods.

 -- Class: ttk.Widget

      -- Method: identify (x, y)

          Returns the name of the element at position _x_ _y_, or the
          empty string if the point does not lie within any element.

          _x_ and _y_ are pixel coordinates relative to the widget.

      -- Method: instate (statespec, callback=None, *args, **kw)

          Test the widget’s state.  If a callback is not specified,
          returns ‘True’ if the widget state matches _statespec_ and
          ‘False’ otherwise.  If callback is specified then it is called
          with _args_ if widget state matches _statespec_.

      -- Method: state ([statespec=None])

          Modify or read widget state.  If _statespec_ is specified,
          sets the widget state accordingly and returns a new
          _statespec_ indicating which flags were changed.  If
          _statespec_ is not specified, returns the currently-enabled
          state flags.

     _statespec_ will usually be a list or a tuple.


File: python.info,  Node: Combobox,  Next: Notebook,  Prev: Widget,  Up: ttk --- Tk themed widgets

5.24.2.10 Combobox
..................

The *note ttk.Combobox: 208b. widget combines a text field with a
pop-down list of values.  This widget is a subclass of ‘Entry’.

  Besides the methods inherited from *note Widget: 208f.
(‘Widget.cget()’, ‘Widget.configure()’, *note Widget.identify(): 209a,
*note Widget.instate(): 209b. and *note Widget.state(): 2097.) and those
inherited from ‘Entry’ (‘Entry.bbox()’, ‘Entry.delete()’,
‘Entry.icursor()’, ‘Entry.index()’, ‘Entry.inset()’,
‘Entry.selection()’, ‘Entry.xview()’), this class has some other
methods, described at *note ttk.Combobox: 208b.

* Menu:

* Options:: 
* Virtual events:: 
* ttk.Combobox: ttk Combobox. 


File: python.info,  Node: Options,  Next: Virtual events,  Up: Combobox

5.24.2.11 Options
.................

This widget accepts the following options:

     option                description
                           
     -----------------------------------------------------------------------------------
                           
     exportselection       Boolean value.  If set, the widget selection is linked to
                           the Window Manager selection (which can be returned by
                           invoking ‘Misc.selection_get()’, for example).
                           
                           
     justify               Specifies how the text is aligned within the widget.  One
                           of "left", "center", or "right".
                           
                           
     height                Specifies the height of the pop-down listbox, in rows.
                           
                           
     postcommand           A script (possibly registered with ‘Misc.register()’) that
                           is called immediately before displaying the values.  It
                           may specify which values to display.
                           
                           
     state                 One of "normal", "readonly", or "disabled".  In the
                           "readonly" state, the value may not be edited directly,
                           and the user can only select one of the values from the
                           dropdown list.  In the "normal" state, the text field is
                           directly editable.  In the "disabled" state, no
                           interaction is possible.
                           
                           
     textvariable          Specifies a name whose value is linked to the widget
                           value.  Whenever the value associated with that name
                           changes, the widget value is updated, and vice versa.  See
                           ‘Tkinter.StringVar’.
                           
                           
     values                Specifies the list of values to display in the drop-down
                           listbox.
                           
                           
     width                 Specifies an integer value indicating the desired width of
                           the entry window, in average-size characters of the
                           widget’s font.
                           


File: python.info,  Node: Virtual events,  Next: ttk Combobox,  Prev: Options,  Up: Combobox

5.24.2.12 Virtual events
........................

The combobox widget generates a *<<ComboboxSelected>>* virtual event
when the user selects an element from the list of values.


File: python.info,  Node: ttk Combobox,  Prev: Virtual events,  Up: Combobox

5.24.2.13 ttk.Combobox
......................

 -- Class: ttk.Combobox

      -- Method: current ([newindex=None])

          If _newindex_ is specified, sets the combobox value to the
          element position _newindex_.  Otherwise, returns the index of
          the current value or -1 if the current value is not in the
          values list.

      -- Method: get ()

          Returns the current value of the combobox.

      -- Method: set (value)

          Sets the value of the combobox to _value_.


File: python.info,  Node: Notebook,  Next: Progressbar,  Prev: Combobox,  Up: ttk --- Tk themed widgets

5.24.2.14 Notebook
..................

The Ttk Notebook widget manages a collection of windows and displays a
single one at a time.  Each child window is associated with a tab, which
the user may select to change the currently-displayed window.

* Menu:

* Options: Options<2>. 
* Tab Options:: 
* Tab Identifiers:: 
* Virtual Events:: 
* ttk.Notebook: ttk Notebook. 


File: python.info,  Node: Options<2>,  Next: Tab Options,  Up: Notebook

5.24.2.15 Options
.................

This widget accepts the following specific options:

     option        description
                   
     -----------------------------------------------------------------------------------
                   
     height        If present and greater than zero, specifies the desired height of
                   the pane area (not including internal padding or tabs).
                   Otherwise, the maximum height of all panes is used.
                   
                   
     padding       Specifies the amount of extra space to add around the outside of
                   the notebook.  The padding is a list of up to four length
                   specifications: left top right bottom.  If fewer than four
                   elements are specified, bottom defaults to top, right defaults to
                   left, and top defaults to left.
                   
                   
     width         If present and greater than zero, specifies the desired width of
                   the pane area (not including internal padding).  Otherwise, the
                   maximum width of all panes is used.
                   


File: python.info,  Node: Tab Options,  Next: Tab Identifiers,  Prev: Options<2>,  Up: Notebook

5.24.2.16 Tab Options
.....................

There are also specific options for tabs:

     option          description
                     
     -----------------------------------------------------------------------------------
                     
     state           Either "normal", "disabled" or "hidden".  If "disabled", then
                     the tab is not selectable.  If "hidden", then the tab is not
                     shown.
                     
                     
     sticky          Specifies how the child window is positioned within the pane
                     area.  Value is a string containing zero or more of the
                     characters "n", "s", "e" or "w".  Each letter refers to a side
                     (north, south, east or west) that the child window will stick
                     to, as per the ‘grid()’ geometry manager.
                     
                     
     padding         Specifies the amount of extra space to add between the notebook
                     and this pane.  Syntax is the same as for the option padding
                     used by this widget.
                     
                     
     text            Specifies a text to be displayed in the tab.
                     
                     
     image           Specifies an image to display in the tab.  See the option image
                     described in *note Widget: 208f.
                     
                     
     compound        Specifies how to display the image relative to the text, in the
                     case both text and image options are present.  See *note Label
                     Options: 2094. for legal values.
                     
                     
     underline       Specifies the index (0-based) of a character to underline in the
                     text string.  The underlined character is used for mnemonic
                     activation if *note Notebook.enable_traversal(): 20a6. is
                     called.
                     


File: python.info,  Node: Tab Identifiers,  Next: Virtual Events,  Prev: Tab Options,  Up: Notebook

5.24.2.17 Tab Identifiers
.........................

The _tab_id_ present in several methods of *note ttk.Notebook: 208c. may
take any of the following forms:

   * An integer between zero and the number of tabs.

   * The name of a child window.

   * A positional specification of the form "@x,y", which identifies the
     tab.

   * The literal string "current", which identifies the
     currently-selected tab.

   * The literal string "end", which returns the number of tabs (only
     valid for *note Notebook.index(): 20a8.).


File: python.info,  Node: Virtual Events,  Next: ttk Notebook,  Prev: Tab Identifiers,  Up: Notebook

5.24.2.18 Virtual Events
........................

This widget generates a *<<NotebookTabChanged>>* virtual event after a
new tab is selected.


File: python.info,  Node: ttk Notebook,  Prev: Virtual Events,  Up: Notebook

5.24.2.19 ttk.Notebook
......................

 -- Class: ttk.Notebook

      -- Method: add (child, **kw)

          Adds a new tab to the notebook.

          If window is currently managed by the notebook but hidden, it
          is restored to its previous position.

          See *note Tab Options: 20a5. for the list of available
          options.

      -- Method: forget (tab_id)

          Removes the tab specified by _tab_id_, unmaps and unmanages
          the associated window.

      -- Method: hide (tab_id)

          Hides the tab specified by _tab_id_.

          The tab will not be displayed, but the associated window
          remains managed by the notebook and its configuration
          remembered.  Hidden tabs may be restored with the *note add():
          20ab. command.

      -- Method: identify (x, y)

          Returns the name of the tab element at position _x_, _y_, or
          the empty string if none.

      -- Method: index (tab_id)

          Returns the numeric index of the tab specified by _tab_id_, or
          the total number of tabs if _tab_id_ is the string "end".

      -- Method: insert (pos, child, **kw)

          Inserts a pane at the specified position.

          _pos_ is either the string "end", an integer index, or the
          name of a managed child.  If _child_ is already managed by the
          notebook, moves it to the specified position.

          See *note Tab Options: 20a5. for the list of available
          options.

      -- Method: select ([tab_id])

          Selects the specified _tab_id_.

          The associated child window will be displayed, and the
          previously-selected window (if different) is unmapped.  If
          _tab_id_ is omitted, returns the widget name of the currently
          selected pane.

      -- Method: tab (tab_id, option=None, **kw)

          Query or modify the options of the specific _tab_id_.

          If _kw_ is not given, returns a dictionary of the tab option
          values.  If _option_ is specified, returns the value of that
          _option_.  Otherwise, sets the options to the corresponding
          values.

      -- Method: tabs ()

          Returns a list of windows managed by the notebook.

      -- Method: enable_traversal ()

          Enable keyboard traversal for a toplevel window containing
          this notebook.

          This will extend the bindings for the toplevel window
          containing the notebook as follows:

             * Control-Tab: selects the tab following the currently
               selected one.

             * Shift-Control-Tab: selects the tab preceding the
               currently selected one.

             * Alt-K: where K is the mnemonic (underlined) character of
               any tab, will select that tab.

          Multiple notebooks in a single toplevel may be enabled for
          traversal, including nested notebooks.  However, notebook
          traversal only works properly if all panes have the notebook
          they are in as master.


File: python.info,  Node: Progressbar,  Next: Separator,  Prev: Notebook,  Up: ttk --- Tk themed widgets

5.24.2.20 Progressbar
.....................

The *note ttk.Progressbar: 208d. widget shows the status of a
long-running operation.  It can operate in two modes: determinate mode
shows the amount completed relative to the total amount of work to be
done, and indeterminate mode provides an animated display to let the
user know that something is happening.

* Menu:

* Options: Options<3>. 
* ttk.Progressbar: ttk Progressbar. 


File: python.info,  Node: Options<3>,  Next: ttk Progressbar,  Up: Progressbar

5.24.2.21 Options
.................

This widget accepts the following specific options:

     option         description
                    
     -----------------------------------------------------------------------------------
                    
     orient         One of "horizontal" or "vertical".  Specifies the orientation of
                    the progress bar.
                    
                    
     length         Specifies the length of the long axis of the progress bar (width
                    if horizontal, height if vertical).
                    
                    
     mode           One of "determinate" or "indeterminate".
                    
                    
     maximum        A number specifying the maximum value.  Defaults to 100.
                    
                    
     value          The current value of the progress bar.  In "determinate" mode,
                    this represents the amount of work completed.  In "indeterminate"
                    mode, it is interpreted as modulo _maximum_; that is, the
                    progress bar completes one "cycle" when its value increases by
                    _maximum_.
                    
                    
     variable       A name which is linked to the option value.  If specified, the
                    value of the progress bar is automatically set to the value of
                    this name whenever the latter is modified.
                    
                    
     phase          Read-only option.  The widget periodically increments the value
                    of this option whenever its value is greater than 0 and, in
                    determinate mode, less than maximum.  This option may be used by
                    the current theme to provide additional animation effects.
                    


File: python.info,  Node: ttk Progressbar,  Prev: Options<3>,  Up: Progressbar

5.24.2.22 ttk.Progressbar
.........................

 -- Class: ttk.Progressbar

      -- Method: start ([interval])

          Begin autoincrement mode: schedules a recurring timer event
          that calls *note Progressbar.step(): 20b7. every _interval_
          milliseconds.  If omitted, _interval_ defaults to 50
          milliseconds.

      -- Method: step ([amount])

          Increments the progress bar’s value by _amount_.

          _amount_ defaults to 1.0 if omitted.

      -- Method: stop ()

          Stop autoincrement mode: cancels any recurring timer event
          initiated by *note Progressbar.start(): 20b6. for this
          progress bar.


File: python.info,  Node: Separator,  Next: Sizegrip,  Prev: Progressbar,  Up: ttk --- Tk themed widgets

5.24.2.23 Separator
...................

The ‘ttk.Separator’ widget displays a horizontal or vertical separator
bar.

  It has no other methods besides the ones inherited from *note
ttk.Widget: 208f.

* Menu:

* Options: Options<4>. 


File: python.info,  Node: Options<4>,  Up: Separator

5.24.2.24 Options
.................

This widget accepts the following specific option:

     option       description
                  
     ----------------------------------------------------------------------------------
                  
     orient       One of "horizontal" or "vertical".  Specifies the orientation of
                  the separator.
                  


File: python.info,  Node: Sizegrip,  Next: Treeview,  Prev: Separator,  Up: ttk --- Tk themed widgets

5.24.2.25 Sizegrip
..................

The ‘ttk.Sizegrip’ widget (also known as a grow box) allows the user to
resize the containing toplevel window by pressing and dragging the grip.

  This widget has neither specific options nor specific methods, besides
the ones inherited from *note ttk.Widget: 208f.

* Menu:

* Platform-specific notes:: 
* Bugs:: 


File: python.info,  Node: Platform-specific notes,  Next: Bugs,  Up: Sizegrip

5.24.2.26 Platform-specific notes
.................................

   * On Mac OS X, toplevel windows automatically include a built-in size
     grip by default.  Adding a ‘Sizegrip’ is harmless, since the
     built-in grip will just mask the widget.


File: python.info,  Node: Bugs,  Prev: Platform-specific notes,  Up: Sizegrip

5.24.2.27 Bugs
..............

   * If the containing toplevel’s position was specified relative to the
     right or bottom of the screen (e.g.  ....), the ‘Sizegrip’ widget
     will not resize the window.

   * This widget supports only "southeast" resizing.


File: python.info,  Node: Treeview,  Next: Ttk Styling,  Prev: Sizegrip,  Up: ttk --- Tk themed widgets

5.24.2.28 Treeview
..................

The *note ttk.Treeview: 208e. widget displays a hierarchical collection
of items.  Each item has a textual label, an optional image, and an
optional list of data values.  The data values are displayed in
successive columns after the tree label.

  The order in which data values are displayed may be controlled by
setting the widget option ‘displaycolumns’.  The tree widget can also
display column headings.  Columns may be accessed by number or symbolic
names listed in the widget option columns.  See *note Column
Identifiers: 20bf.

  Each item is identified by an unique name.  The widget will generate
item IDs if they are not supplied by the caller.  There is a
distinguished root item, named ‘{}’.  The root item itself is not
displayed; its children appear at the top level of the hierarchy.

  Each item also has a list of tags, which can be used to associate
event bindings with individual items and control the appearance of the
item.

  The Treeview widget supports horizontal and vertical scrolling,
according to the options described in *note Scrollable Widget Options:
2093. and the methods *note Treeview.xview(): 20c0. and *note
Treeview.yview(): 20c1.

* Menu:

* Options: Options<5>. 
* Item Options:: 
* Tag Options:: 
* Column Identifiers:: 
* Virtual Events: Virtual Events<2>. 
* ttk.Treeview: ttk Treeview. 


File: python.info,  Node: Options<5>,  Next: Item Options,  Up: Treeview

5.24.2.29 Options
.................

This widget accepts the following specific options:

     option               description
                          
     ----------------------------------------------------------------------------------
                          
     columns              A list of column identifiers, specifying the number of
                          columns and their names.
                          
                          
     displaycolumns       A list of column identifiers (either symbolic or integer
                          indices) specifying which data columns are displayed and
                          the order in which they appear, or the string "#all".
                          
                          
     height               Specifies the number of rows which should be visible.
                          Note: the requested width is determined from the sum of
                          the column widths.
                          
                          
     padding              Specifies the internal padding for the widget.  The
                          padding is a list of up to four length specifications.
                          
                          
     selectmode           Controls how the built-in class bindings manage the
                          selection.  One of "extended", "browse" or "none".  If set
                          to "extended" (the default), multiple items may be
                          selected.  If "browse", only a single item will be
                          selected at a time.  If "none", the selection will not be
                          changed.
                          
                          Note that the application code and tag bindings can set
                          the selection however they wish, regardless of the value
                          of this option.
                          
                          
     show                 A list containing zero or more of the following values,
                          specifying which elements of the tree to display.
                          
                             * tree: display tree labels in column #0.
                          
                             * headings: display the heading row.
                          
                          The default is "tree headings", i.e., show all elements.
                          
                          *Note*: Column #0 always refers to the tree column, even
                          if show="tree" is not specified.
                          


File: python.info,  Node: Item Options,  Next: Tag Options,  Prev: Options<5>,  Up: Treeview

5.24.2.30 Item Options
......................

The following item options may be specified for items in the insert and
item widget commands.

     option       description
                  
     ---------------------------------------------------------------------------------
                  
     text         The textual label to display for the item.
                  
                  
     image        A Tk Image, displayed to the left of the label.
                  
                  
     values       The list of values associated with the item.
                  
                  Each item should have the same number of values as the widget
                  option columns.  If there are fewer values than columns, the
                  remaining values are assumed empty.  If there are more values
                  than columns, the extra values are ignored.
                  
                  
     open         True/False value indicating whether the item’s children should be
                  displayed or hidden.
                  
                  
     tags         A list of tags associated with this item.
                  


File: python.info,  Node: Tag Options,  Next: Column Identifiers,  Prev: Item Options,  Up: Treeview

5.24.2.31 Tag Options
.....................

The following options may be specified on tags:

     option           description
                      
     ---------------------------------------------------------------------------------
                      
     foreground       Specifies the text foreground color.
                      
                      
     background       Specifies the cell or item background color.
                      
                      
     font             Specifies the font to use when drawing text.
                      
                      
     image            Specifies the item image, in case the item’s image option is
                      empty.
                      


File: python.info,  Node: Column Identifiers,  Next: Virtual Events<2>,  Prev: Tag Options,  Up: Treeview

5.24.2.32 Column Identifiers
............................

Column identifiers take any of the following forms:

   * A symbolic name from the list of columns option.

   * An integer n, specifying the nth data column.

   * A string of the form #n, where n is an integer, specifying the nth
     display column.

  Notes:

   * Item’s option values may be displayed in a different order than the
     order in which they are stored.

   * Column #0 always refers to the tree column, even if show="tree" is
     not specified.

  A data column number is an index into an item’s option values list; a
display column number is the column number in the tree where the values
are displayed.  Tree labels are displayed in column #0.  If option
displaycolumns is not set, then data column n is displayed in column
#n+1.  Again, *column #0 always refers to the tree column*.


File: python.info,  Node: Virtual Events<2>,  Next: ttk Treeview,  Prev: Column Identifiers,  Up: Treeview

5.24.2.33 Virtual Events
........................

The Treeview widget generates the following virtual events.

     event                    description
                              
     --------------------------------------------------------------------------------
                              
     <<TreeviewSelect>>       Generated whenever the selection changes.
                              
                              
     <<TreeviewOpen>>         Generated just before settings the focus item to
                              open=True.
                              
                              
     <<TreeviewClose>>        Generated just after setting the focus item to
                              open=False.
                              

  The *note Treeview.focus(): 20c6. and *note Treeview.selection():
20c7. methods can be used to determine the affected item or items.


File: python.info,  Node: ttk Treeview,  Prev: Virtual Events<2>,  Up: Treeview

5.24.2.34 ttk.Treeview
......................

 -- Class: ttk.Treeview

      -- Method: bbox (item, column=None)

          Returns the bounding box (relative to the treeview widget’s
          window) of the specified _item_ in the form (x, y, width,
          height).

          If _column_ is specified, returns the bounding box of that
          cell.  If the _item_ is not visible (i.e., if it is a
          descendant of a closed item or is scrolled offscreen), returns
          an empty string.

      -- Method: get_children ([item])

          Returns the list of children belonging to _item_.

          If _item_ is not specified, returns root children.

      -- Method: set_children (item, *newchildren)

          Replaces _item_’s child with _newchildren_.

          Children present in _item_ that are not present in
          _newchildren_ are detached from the tree.  No items in
          _newchildren_ may be an ancestor of _item_.  Note that not
          specifying _newchildren_ results in detaching _item_’s
          children.

      -- Method: column (column, option=None, **kw)

          Query or modify the options for the specified _column_.

          If _kw_ is not given, returns a dict of the column option
          values.  If _option_ is specified then the value for that
          _option_ is returned.  Otherwise, sets the options to the
          corresponding values.

          The valid options/values are:

             * 
               id

                    Returns the column name.  This is a read-only
                    option.

             * 
               anchor: One of the standard Tk anchor values.

                    Specifies how the text in this column should be
                    aligned with respect to the cell.

             * 
               minwidth: width

                    The minimum width of the column in pixels.  The
                    treeview widget will not make the column any smaller
                    than specified by this option when the widget is
                    resized or the user drags a column.

             * 
               stretch: True/False

                    Specifies whether the column’s width should be
                    adjusted when the widget is resized.

             * 
               width: width

                    The width of the column in pixels.

          To configure the tree column, call this with column = "#0"

      -- Method: delete (*items)

          Delete all specified _items_ and all their descendants.

          The root item may not be deleted.

      -- Method: detach (*items)

          Unlinks all of the specified _items_ from the tree.

          The items and all of their descendants are still present, and
          may be reinserted at another point in the tree, but will not
          be displayed.

          The root item may not be detached.

      -- Method: exists (item)

          Returns ‘True’ if the specified _item_ is present in the tree.

      -- Method: focus ([item=None])

          If _item_ is specified, sets the focus item to _item_.
          Otherwise, returns the current focus item, or ’’ if there is
          none.

      -- Method: heading (column, option=None, **kw)

          Query or modify the heading options for the specified
          _column_.

          If _kw_ is not given, returns a dict of the heading option
          values.  If _option_ is specified then the value for that
          _option_ is returned.  Otherwise, sets the options to the
          corresponding values.

          The valid options/values are:

             * 
               text: text

                    The text to display in the column heading.

             * 
               image: imageName

                    Specifies an image to display to the right of the
                    column heading.

             * 
               anchor: anchor

                    Specifies how the heading text should be aligned.
                    One of the standard Tk anchor values.

             * 
               command: callback

                    A callback to be invoked when the heading label is
                    pressed.

          To configure the tree column heading, call this with column =
          "#0".

      -- Method: identify (component, x, y)

          Returns a description of the specified _component_ under the
          point given by _x_ and _y_, or the empty string if no such
          _component_ is present at that position.

      -- Method: identify_row (y)

          Returns the item ID of the item at position _y_.

      -- Method: identify_column (x)

          Returns the data column identifier of the cell at position
          _x_.

          The tree column has ID #0.

      -- Method: identify_region (x, y)

          Returns one of:

          region          meaning
                          
          -----------------------------------------------------------
                          
          heading         Tree heading area.
                          
                          
          separator       Space between two columns headings.
                          
                          
          tree            The tree area.
                          
                          
          cell            A data cell.
                          

          Availability: Tk 8.6.

      -- Method: identify_element (x, y)

          Returns the element at position _x_, _y_.

          Availability: Tk 8.6.

      -- Method: index (item)

          Returns the integer index of _item_ within its parent’s list
          of children.

      -- Method: insert (parent, index, iid=None, **kw)

          Creates a new item and returns the item identifier of the
          newly created item.

          _parent_ is the item ID of the parent item, or the empty
          string to create a new top-level item.  _index_ is an integer,
          or the value "end", specifying where in the list of parent’s
          children to insert the new item.  If _index_ is less than or
          equal to zero, the new node is inserted at the beginning; if
          _index_ is greater than or equal to the current number of
          children, it is inserted at the end.  If _iid_ is specified,
          it is used as the item identifier; _iid_ must not already
          exist in the tree.  Otherwise, a new unique identifier is
          generated.

          See *note Item Options: 20c3. for the list of available
          points.

      -- Method: item (item[, option[, **kw]])

          Query or modify the options for the specified _item_.

          If no options are given, a dict with options/values for the
          item is returned.  If _option_ is specified then the value for
          that option is returned.  Otherwise, sets the options to the
          corresponding values as given by _kw_.

      -- Method: move (item, parent, index)

          Moves _item_ to position _index_ in _parent_’s list of
          children.

          It is illegal to move an item under one of its descendants.
          If _index_ is less than or equal to zero, _item_ is moved to
          the beginning; if greater than or equal to the number of
          children, it is moved to the end.  If _item_ was detached it
          is reattached.

      -- Method: next (item)

          Returns the identifier of _item_’s next sibling, or ’’ if
          _item_ is the last child of its parent.

      -- Method: parent (item)

          Returns the ID of the parent of _item_, or ’’ if _item_ is at
          the top level of the hierarchy.

      -- Method: prev (item)

          Returns the identifier of _item_’s previous sibling, or ’’ if
          _item_ is the first child of its parent.

      -- Method: reattach (item, parent, index)

          An alias for *note Treeview.move(): 20d9.

      -- Method: see (item)

          Ensure that _item_ is visible.

          Sets all of _item_’s ancestors open option to ‘True’, and
          scrolls the widget if necessary so that _item_ is within the
          visible portion of the tree.

      -- Method: selection ([selop=None[, items=None]])

          If _selop_ is not specified, returns selected items.
          Otherwise, it will act according to the following selection
          methods.

      -- Method: selection_set (items)

          _items_ becomes the new selection.

      -- Method: selection_add (items)

          Add _items_ to the selection.

      -- Method: selection_remove (items)

          Remove _items_ from the selection.

      -- Method: selection_toggle (items)

          Toggle the selection state of each item in _items_.

      -- Method: set (item, column=None, value=None)

          With one argument, returns a dictionary of column/value pairs
          for the specified _item_.  With two arguments, returns the
          current value of the specified _column_.  With three
          arguments, sets the value of given _column_ in given _item_ to
          the specified _value_.

      -- Method: tag_bind (tagname, sequence=None, callback=None)

          Bind a callback for the given event _sequence_ to the tag
          _tagname_.  When an event is delivered to an item, the
          callbacks for each of the item’s tags option are called.

      -- Method: tag_configure (tagname, option=None, **kw)

          Query or modify the options for the specified _tagname_.

          If _kw_ is not given, returns a dict of the option settings
          for _tagname_.  If _option_ is specified, returns the value
          for that _option_ for the specified _tagname_.  Otherwise,
          sets the options to the corresponding values for the given
          _tagname_.

      -- Method: tag_has (tagname[, item])

          If _item_ is specified, returns 1 or 0 depending on whether
          the specified _item_ has the given _tagname_.  Otherwise,
          returns a list of all items that have the specified tag.

          Availability: Tk 8.6

      -- Method: xview (*args)

          Query or modify horizontal position of the treeview.

      -- Method: yview (*args)

          Query or modify vertical position of the treeview.


File: python.info,  Node: Ttk Styling,  Prev: Treeview,  Up: ttk --- Tk themed widgets

5.24.2.35 Ttk Styling
.....................

Each widget in *note ttk: 182. is assigned a style, which specifies the
set of elements making up the widget and how they are arranged, along
with dynamic and default settings for element options.  By default the
style name is the same as the widget’s class name, but it may be
overridden by the widget’s style option.  If the class name of a widget
is unknown, use the method ‘Misc.winfo_class()’
(somewidget.winfo_class()).

See also
........

Tcl’2004 conference presentation(1)

     This document explains how the theme engine works

 -- Class: ttk.Style

     This class is used to manipulate the style database.

      -- Method: configure (style, query_opt=None, **kw)

          Query or set the default value of the specified option(s) in
          _style_.

          Each key in _kw_ is an option and each value is a string
          identifying the value for that option.

          For example, to change every default button to be a flat
          button with some padding and a different background color do:

               import ttk
               import Tkinter

               root = Tkinter.Tk()

               ttk.Style().configure("TButton", padding=6, relief="flat",
                  background="#ccc")

               btn = ttk.Button(text="Sample")
               btn.pack()

               root.mainloop()

      -- Method: map (style, query_opt=None, **kw)

          Query or sets dynamic values of the specified option(s) in
          _style_.

          Each key in _kw_ is an option and each value should be a list
          or a tuple (usually) containing statespecs grouped in tuples,
          lists, or something else of your preference.  A statespec is a
          compound of one or more states and then a value.

          An example:

               import Tkinter
               import ttk

               root = Tkinter.Tk()

               style = ttk.Style()
               style.map("C.TButton",
                   foreground=[('pressed', 'red'), ('active', 'blue')],
                   background=[('pressed', '!disabled', 'black'), ('active', 'white')]
                   )

               colored_btn = ttk.Button(text="Test", style="C.TButton").pack()

               root.mainloop()

          Note that the order of the (states, value) sequences for an
          option matters.  In the previous example, if you change the
          order to ‘[('active', 'blue'), ('pressed', 'red')]’ in the
          foreground option, for example, you would get a blue
          foreground when the widget is in the active or pressed states.

      -- Method: lookup (style, option, state=None, default=None)

          Returns the value specified for _option_ in _style_.

          If _state_ is specified, it is expected to be a sequence of
          one or more states.  If the _default_ argument is set, it is
          used as a fallback value in case no specification for option
          is found.

          To check what font a Button uses by default, do:

               import ttk

               print ttk.Style().lookup("TButton", "font")

      -- Method: layout (style, layoutspec=None)

          Define the widget layout for given _style_.  If _layoutspec_
          is omitted, return the layout specification for given style.

          _layoutspec_, if specified, is expected to be a list or some
          other sequence type (excluding strings), where each item
          should be a tuple and the first item is the layout name and
          the second item should have the format described in *note
          Layouts: 20eb.

          To understand the format, see the following example (it is not
          intended to do anything useful):

               import ttk
               import Tkinter

               root = Tkinter.Tk()

               style = ttk.Style()
               style.layout("TMenubutton", [
                  ("Menubutton.background", None),
                  ("Menubutton.button", {"children":
                      [("Menubutton.focus", {"children":
                          [("Menubutton.padding", {"children":
                              [("Menubutton.label", {"side": "left", "expand": 1})]
                          })]
                      })]
                  }),
               ])

               mbtn = ttk.Menubutton(text='Text')
               mbtn.pack()
               root.mainloop()

      -- Method: element_create (elementname, etype, *args, **kw)

          Create a new element in the current theme, of the given
          _etype_ which is expected to be either "image", "from" or
          "vsapi".  The latter is only available in Tk 8.6a for Windows
          XP and Vista and is not described here.

          If "image" is used, _args_ should contain the default image
          name followed by statespec/value pairs (this is the
          imagespec), and _kw_ may have the following options:

                  * 
                    border=padding

                         padding is a list of up to four integers,
                         specifying the left, top, right, and bottom
                         borders, respectively.

                  * 
                    height=height

                         Specifies a minimum height for the element.  If
                         less than zero, the base image’s height is used
                         as a default.

                  * 
                    padding=padding

                         Specifies the element’s interior padding.
                         Defaults to border’s value if not specified.

                  * 
                    sticky=spec

                         Specifies how the image is placed within the
                         final parcel.  spec contains zero or more
                         characters "n", "s", "w", or "e".

                  * 
                    width=width

                         Specifies a minimum width for the element.  If
                         less than zero, the base image’s width is used
                         as a default.

          If "from" is used as the value of _etype_, *note
          element_create(): 20ec. will clone an existing element.
          _args_ is expected to contain a themename, from which the
          element will be cloned, and optionally an element to clone
          from.  If this element to clone from is not specified, an
          empty element will be used.  _kw_ is discarded.

      -- Method: element_names ()

          Returns the list of elements defined in the current theme.

      -- Method: element_options (elementname)

          Returns the list of _elementname_’s options.

      -- Method: theme_create (themename, parent=None, settings=None)

          Create a new theme.

          It is an error if _themename_ already exists.  If _parent_ is
          specified, the new theme will inherit styles, elements and
          layouts from the parent theme.  If _settings_ are present they
          are expected to have the same syntax used for *note
          theme_settings(): 20f0.

      -- Method: theme_settings (themename, settings)

          Temporarily sets the current theme to _themename_, apply
          specified _settings_ and then restore the previous theme.

          Each key in _settings_ is a style and each value may contain
          the keys ’configure’, ’map’, ’layout’ and ’element create’ and
          they are expected to have the same format as specified by the
          methods *note Style.configure(): 20e8, *note Style.map():
          2095, *note Style.layout(): 20ea. and *note
          Style.element_create(): 20ec. respectively.

          As an example, let’s change the Combobox for the default theme
          a bit:

               import ttk
               import Tkinter

               root = Tkinter.Tk()

               style = ttk.Style()
               style.theme_settings("default", {
                  "TCombobox": {
                      "configure": {"padding": 5},
                      "map": {
                          "background": [("active", "green2"),
                                         ("!disabled", "green4")],
                          "fieldbackground": [("!disabled", "green3")],
                          "foreground": [("focus", "OliveDrab1"),
                                         ("!disabled", "OliveDrab2")]
                      }
                  }
               })

               combo = ttk.Combobox().pack()

               root.mainloop()

      -- Method: theme_names ()

          Returns a list of all known themes.

      -- Method: theme_use ([themename])

          If _themename_ is not given, returns the theme in use.
          Otherwise, sets the current theme to _themename_, refreshes
          all widgets and emits a <<ThemeChanged>> event.

* Menu:

* Layouts:: 

   ---------- Footnotes ----------

   (1) http://tktable.sourceforge.net/tile/tile-tcl2004.pdf


File: python.info,  Node: Layouts,  Up: Ttk Styling

5.24.2.36 Layouts
.................

A layout can be just None, if it takes no options, or a dict of options
specifying how to arrange the element.  The layout mechanism uses a
simplified version of the pack geometry manager: given an initial
cavity, each element is allocated a parcel.  Valid options/values are:

        * 
          side: whichside

               Specifies which side of the cavity to place the element;
               one of top, right, bottom or left.  If omitted, the
               element occupies the entire cavity.

        * 
          sticky: nswe

               Specifies where the element is placed inside its
               allocated parcel.

        * 
          unit: 0 or 1

               If set to 1, causes the element and all of its
               descendants to be treated as a single element for the
               purposes of *note Widget.identify(): 209a. et al.  It’s
               used for things like scrollbar thumbs with grips.

        * 
          children: [sublayout... ]

               Specifies a list of elements to place inside the element.
               Each element is a tuple (or other sequence type) where
               the first item is the layout name, and the other is a
               *note Layout: 20eb.


File: python.info,  Node: Tix --- Extension widgets for Tk,  Next: ScrolledText --- Scrolled Text Widget,  Prev: ttk --- Tk themed widgets,  Up: Graphical User Interfaces with Tk

5.24.3 ‘Tix’ — Extension widgets for Tk
---------------------------------------

The *note Tix: 17c. (Tk Interface Extension) module provides an
additional rich set of widgets.  Although the standard Tk library has
many useful widgets, they are far from complete.  The *note Tix: 17c.
library provides most of the commonly needed widgets that are missing
from standard Tk: *note HList: 20f7, *note ComboBox: 20f8, *note
Control: 20f9. (a.k.a.  SpinBox) and an assortment of scrollable
widgets.  *note Tix: 17c. also includes many more widgets that are
generally useful in a wide range of applications: *note NoteBook: 20fa,
*note FileEntry: 20fb, *note PanedWindow: 20fc, etc; there are more than
40 of them.

  With all these new widgets, you can introduce new interaction
techniques into applications, creating more useful and more intuitive
user interfaces.  You can design your application by choosing the most
appropriate widgets to match the special needs of your application and
users.

     Note: *note Tix: 17c. has been renamed to ‘tkinter.tix’ in Python
     3.  The *note 2to3: bdb. tool will automatically adapt imports when
     converting your sources to Python 3.

See also
........

Tix Homepage(1)

     The home page for *note Tix: 17c.  This includes links to
     additional documentation and downloads.

Tix Man Pages(2)

     On-line version of the man pages and reference material.

Tix Programming Guide(3)

     On-line version of the programmer’s reference material.

Tix Development Applications(4)

     Tix applications for development of Tix and Tkinter programs.  Tide
     applications work under Tk or Tkinter, and include *TixInspect*, an
     inspector to remotely modify and debug Tix/Tk/Tkinter applications.

* Menu:

* Using Tix:: 
* Tix Widgets:: 
* Tix Commands:: 

   ---------- Footnotes ----------

   (1) http://tix.sourceforge.net/

   (2) http://tix.sourceforge.net/dist/current/man/

   (3) 
http://tix.sourceforge.net/dist/current/docs/tix-book/tix.book.html

   (4) http://tix.sourceforge.net/Tixapps/src/Tide.html


File: python.info,  Node: Using Tix,  Next: Tix Widgets,  Up: Tix --- Extension widgets for Tk

5.24.3.1 Using Tix
..................

 -- Class: Tix.Tix (screenName[, baseName[, className]])

     Toplevel widget of Tix which represents mostly the main window of
     an application.  It has an associated Tcl interpreter.

     Classes in the *note Tix: 17c. module subclasses the classes in the
     *note Tkinter: 17d. module.  The former imports the latter, so to
     use *note Tix: 17c. with Tkinter, all you need to do is to import
     one module.  In general, you can just import *note Tix: 17c, and
     replace the toplevel call to *note Tkinter.Tk: 2072. with ‘Tix.Tk’:

          import Tix
          from Tkconstants import *
          root = Tix.Tk()

  To use *note Tix: 17c, you must have the *note Tix: 17c. widgets
installed, usually alongside your installation of the Tk widgets.  To
test your installation, try the following:

     import Tix
     root = Tix.Tk()
     root.tk.eval('package require Tix')

  If this fails, you have a Tk installation problem which must be
resolved before proceeding.  Use the environment variable ‘TIX_LIBRARY’
to point to the installed *note Tix: 17c. library directory, and make
sure you have the dynamic object library (‘tix8183.dll’ or
‘libtix8183.so’) in the same directory that contains your Tk dynamic
object library (‘tk8183.dll’ or ‘libtk8183.so’).  The directory with the
dynamic object library should also have a file called ‘pkgIndex.tcl’
(case sensitive), which contains the line:

     package ifneeded Tix 8.1 [list load "[file join $dir tix8183.dll]" Tix]


File: python.info,  Node: Tix Widgets,  Next: Tix Commands,  Prev: Using Tix,  Up: Tix --- Extension widgets for Tk

5.24.3.2 Tix Widgets
....................

Tix(1) introduces over 40 widget classes to the *note Tkinter: 17d.
repertoire.  There is a demo of all the *note Tix: 17c. widgets in the
‘Demo/tix’ directory of the standard distribution.

* Menu:

* Basic Widgets:: 
* File Selectors:: 
* Hierarchical ListBox:: 
* Tabular ListBox:: 
* Manager Widgets:: 
* Image Types:: 
* Miscellaneous Widgets:: 
* Form Geometry Manager:: 

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/TixIntro.htm


File: python.info,  Node: Basic Widgets,  Next: File Selectors,  Up: Tix Widgets

5.24.3.3 Basic Widgets
......................

 -- Class: Tix.Balloon

     A Balloon(1) that pops up over a widget to provide help.  When the
     user moves the cursor inside a widget to which a Balloon widget has
     been bound, a small pop-up window with a descriptive message will
     be shown on the screen.

 -- Class: Tix.ButtonBox

     The ButtonBox(2) widget creates a box of buttons, such as is
     commonly used for ‘Ok Cancel’.

 -- Class: Tix.ComboBox

     The ComboBox(3) widget is similar to the combo box control in MS
     Windows.  The user can select a choice by either typing in the
     entry subwdget or selecting from the listbox subwidget.

 -- Class: Tix.Control

     The Control(4) widget is also known as the ‘SpinBox’ widget.  The
     user can adjust the value by pressing the two arrow buttons or by
     entering the value directly into the entry.  The new value will be
     checked against the user-defined upper and lower limits.

 -- Class: Tix.LabelEntry

     The LabelEntry(5) widget packages an entry widget and a label into
     one mega widget.  It can be used be used to simplify the creation
     of "entry-form" type of interface.

 -- Class: Tix.LabelFrame

     The LabelFrame(6) widget packages a frame widget and a label into
     one mega widget.  To create widgets inside a LabelFrame widget, one
     creates the new widgets relative to the ‘frame’ subwidget and
     manage them inside the ‘frame’ subwidget.

 -- Class: Tix.Meter

     The Meter(7) widget can be used to show the progress of a
     background job which may take a long time to execute.

 -- Class: Tix.OptionMenu

     The OptionMenu(8) creates a menu button of options.

 -- Class: Tix.PopupMenu

     The PopupMenu(9) widget can be used as a replacement of the
     ‘tk_popup’ command.  The advantage of the *note Tix: 17c. *note
     PopupMenu: 2107. widget is it requires less application code to
     manipulate.

 -- Class: Tix.Select

     The Select(10) widget is a container of button subwidgets.  It can
     be used to provide radio-box or check-box style of selection
     options for the user.

 -- Class: Tix.StdButtonBox

     The StdButtonBox(11) widget is a group of standard buttons for
     Motif-like dialog boxes.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixBalloon.htm

   (2) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixButtonBox.htm

   (3) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixComboBox.htm

   (4) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixControl.htm

   (5) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelEntry.htm

   (6) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelFrame.htm

   (7) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixMeter.htm

   (8) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixOptionMenu.htm

   (9) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPopupMenu.htm

   (10) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixSelect.htm

   (11) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixStdButtonBox.htm


File: python.info,  Node: File Selectors,  Next: Hierarchical ListBox,  Prev: Basic Widgets,  Up: Tix Widgets

5.24.3.4 File Selectors
.......................

 -- Class: Tix.DirList

     The DirList(1) widget displays a list view of a directory, its
     previous directories and its sub-directories.  The user can choose
     one of the directories displayed in the list or change to another
     directory.

 -- Class: Tix.DirTree

     The DirTree(2) widget displays a tree view of a directory, its
     previous directories and its sub-directories.  The user can choose
     one of the directories displayed in the list or change to another
     directory.

 -- Class: Tix.DirSelectDialog

     The DirSelectDialog(3) widget presents the directories in the file
     system in a dialog window.  The user can use this dialog window to
     navigate through the file system to select the desired directory.

 -- Class: Tix.DirSelectBox

     The *note DirSelectBox: 210e. is similar to the standard Motif(TM)
     directory-selection box.  It is generally used for the user to
     choose a directory.  DirSelectBox stores the directories mostly
     recently selected into a ComboBox widget so that they can be
     quickly selected again.

 -- Class: Tix.ExFileSelectBox

     The ExFileSelectBox(4) widget is usually embedded in a
     tixExFileSelectDialog widget.  It provides an convenient method for
     the user to select files.  The style of the *note ExFileSelectBox:
     210f. widget is very similar to the standard file dialog on MS
     Windows 3.1.

 -- Class: Tix.FileSelectBox

     The FileSelectBox(5) is similar to the standard Motif(TM)
     file-selection box.  It is generally used for the user to choose a
     file.  FileSelectBox stores the files mostly recently selected into
     a *note ComboBox: 20f8. widget so that they can be quickly selected
     again.

 -- Class: Tix.FileEntry

     The FileEntry(6) widget can be used to input a filename.  The user
     can type in the filename manually.  Alternatively, the user can
     press the button widget that sits next to the entry, which will
     bring up a file selection dialog.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirList.htm

   (2) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirTree.htm

   (3) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirSelectDialog.htm

   (4) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixExFileSelectBox.htm

   (5) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileSelectBox.htm

   (6) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileEntry.htm


File: python.info,  Node: Hierarchical ListBox,  Next: Tabular ListBox,  Prev: File Selectors,  Up: Tix Widgets

5.24.3.5 Hierarchical ListBox
.............................

 -- Class: Tix.HList

     The HList(1) widget can be used to display any data that have a
     hierarchical structure, for example, file system directory trees.
     The list entries are indented and connected by branch lines
     according to their places in the hierarchy.

 -- Class: Tix.CheckList

     The CheckList(2) widget displays a list of items to be selected by
     the user.  CheckList acts similarly to the Tk checkbutton or
     radiobutton widgets, except it is capable of handling many more
     items than checkbuttons or radiobuttons.

 -- Class: Tix.Tree

     The Tree(3) widget can be used to display hierarchical data in a
     tree form.  The user can adjust the view of the tree by opening or
     closing parts of the tree.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixHList.htm

   (2) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixCheckList.htm

   (3) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTree.htm


File: python.info,  Node: Tabular ListBox,  Next: Manager Widgets,  Prev: Hierarchical ListBox,  Up: Tix Widgets

5.24.3.6 Tabular ListBox
........................

 -- Class: Tix.TList

     The TList(1) widget can be used to display data in a tabular
     format.  The list entries of a *note TList: 2115. widget are
     similar to the entries in the Tk listbox widget.  The main
     differences are (1) the *note TList: 2115. widget can display the
     list entries in a two dimensional format and (2) you can use
     graphical images as well as multiple colors and fonts for the list
     entries.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTList.htm


File: python.info,  Node: Manager Widgets,  Next: Image Types,  Prev: Tabular ListBox,  Up: Tix Widgets

5.24.3.7 Manager Widgets
........................

 -- Class: Tix.PanedWindow

     The PanedWindow(1) widget allows the user to interactively
     manipulate the sizes of several panes.  The panes can be arranged
     either vertically or horizontally.  The user changes the sizes of
     the panes by dragging the resize handle between two panes.

 -- Class: Tix.ListNoteBook

     The ListNoteBook(2) widget is very similar to the ‘TixNoteBook’
     widget: it can be used to display many windows in a limited space
     using a notebook metaphor.  The notebook is divided into a stack of
     pages (windows).  At one time only one of these pages can be shown.
     The user can navigate through these pages by choosing the name of
     the desired page in the ‘hlist’ subwidget.

 -- Class: Tix.NoteBook

     The NoteBook(3) widget can be used to display many windows in a
     limited space using a notebook metaphor.  The notebook is divided
     into a stack of pages.  At one time only one of these pages can be
     shown.  The user can navigate through these pages by choosing the
     visual "tabs" at the top of the NoteBook widget.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPanedWindow.htm

   (2) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixListNoteBook.htm

   (3) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixNoteBook.htm


File: python.info,  Node: Image Types,  Next: Miscellaneous Widgets,  Prev: Manager Widgets,  Up: Tix Widgets

5.24.3.8 Image Types
....................

The *note Tix: 17c. module adds:

   * pixmap(1) capabilities to all *note Tix: 17c. and *note Tkinter:
     17d. widgets to create color images from XPM files.

   * Compound(2) image types can be used to create images that consists
     of multiple horizontal lines; each line is composed of a series of
     items (texts, bitmaps, images or spaces) arranged from left to
     right.  For example, a compound image can be used to display a
     bitmap and a text string simultaneously in a Tk ‘Button’ widget.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/pixmap.htm

   (2) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/compound.htm


File: python.info,  Node: Miscellaneous Widgets,  Next: Form Geometry Manager,  Prev: Image Types,  Up: Tix Widgets

5.24.3.9 Miscellaneous Widgets
..............................

 -- Class: Tix.InputOnly

     The InputOnly(1) widgets are to accept inputs from the user, which
     can be done with the ‘bind’ command (Unix only).

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixInputOnly.htm


File: python.info,  Node: Form Geometry Manager,  Prev: Miscellaneous Widgets,  Up: Tix Widgets

5.24.3.10 Form Geometry Manager
...............................

In addition, *note Tix: 17c. augments *note Tkinter: 17d. by providing:

 -- Class: Tix.Form

     The Form(1) geometry manager based on attachment rules for all Tk
     widgets.

   ---------- Footnotes ----------

   (1) 
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixForm.htm


File: python.info,  Node: Tix Commands,  Prev: Tix Widgets,  Up: Tix --- Extension widgets for Tk

5.24.3.11 Tix Commands
......................

 -- Class: Tix.tixCommand

     The tix commands(1) provide access to miscellaneous elements of
     *note Tix: 17c.’s internal state and the *note Tix: 17c.
     application context.  Most of the information manipulated by these
     methods pertains to the application as a whole, or to a screen or
     display, rather than to a particular window.

     To view the current settings, the common usage is:

          import Tix
          root = Tix.Tk()
          print root.tix_configure()

 -- Method: tixCommand.tix_configure (cnf=None **kw)

     Query or modify the configuration options of the Tix application
     context.  If no option is specified, returns a dictionary all of
     the available options.  If option is specified with no value, then
     the method returns a list describing the one named option (this
     list will be identical to the corresponding sublist of the value
     returned if no option is specified).  If one or more option-value
     pairs are specified, then the method modifies the given option(s)
     to have the given value(s); in this case the method returns an
     empty string.  Option may be any of the configuration options.

 -- Method: tixCommand.tix_cget (option)

     Returns the current value of the configuration option given by
     _option_.  Option may be any of the configuration options.

 -- Method: tixCommand.tix_getbitmap (name)

     Locates a bitmap file of the name ‘name.xpm’ or ‘name’ in one of
     the bitmap directories (see the *note tix_addbitmapdir(): 2122.
     method).  By using *note tix_getbitmap(): 2121, you can avoid hard
     coding the pathnames of the bitmap files in your application.  When
     successful, it returns the complete pathname of the bitmap file,
     prefixed with the character ‘@’.  The returned value can be used to
     configure the ‘bitmap’ option of the Tk and Tix widgets.

 -- Method: tixCommand.tix_addbitmapdir (directory)

     Tix maintains a list of directories under which the *note
     tix_getimage(): 2123. and *note tix_getbitmap(): 2121. methods will
     search for image files.  The standard bitmap directory is
     ‘$TIX_LIBRARY/bitmaps’.  The *note tix_addbitmapdir(): 2122. method
     adds _directory_ into this list.  By using this method, the image
     files of an applications can also be located using the *note
     tix_getimage(): 2123. or *note tix_getbitmap(): 2121. method.

 -- Method: tixCommand.tix_filedialog ([dlgclass])

     Returns the file selection dialog that may be shared among
     different calls from this application.  This method will create a
     file selection dialog widget when it is called the first time.
     This dialog will be returned by all subsequent calls to *note
     tix_filedialog(): 2124.  An optional dlgclass parameter can be
     passed as a string to specified what type of file selection dialog
     widget is desired.  Possible options are ‘tix’, ‘FileSelectDialog’
     or ‘tixExFileSelectDialog’.

 -- Method: tixCommand.tix_getimage (self, name)

     Locates an image file of the name ‘name.xpm’, ‘name.xbm’ or
     ‘name.ppm’ in one of the bitmap directories (see the *note
     tix_addbitmapdir(): 2122. method above).  If more than one file
     with the same name (but different extensions) exist, then the image
     type is chosen according to the depth of the X display: xbm images
     are chosen on monochrome displays and color images are chosen on
     color displays.  By using *note tix_getimage(): 2123, you can avoid
     hard coding the pathnames of the image files in your application.
     When successful, this method returns the name of the newly created
     image, which can be used to configure the ‘image’ option of the Tk
     and Tix widgets.

 -- Method: tixCommand.tix_option_get (name)

     Gets the options maintained by the Tix scheme mechanism.

 -- Method: tixCommand.tix_resetoptions (newScheme, newFontSet[,
          newScmPrio])

     Resets the scheme and fontset of the Tix application to _newScheme_
     and _newFontSet_, respectively.  This affects only those widgets
     created after this call.  Therefore, it is best to call the
     resetoptions method before the creation of any widgets in a Tix
     application.

     The optional parameter _newScmPrio_ can be given to reset the
     priority level of the Tk options set by the Tix schemes.

     Because of the way Tk handles the X option database, after Tix has
     been has imported and inited, it is not possible to reset the color
     schemes and font sets using the ‘tix_config()’ method.  Instead,
     the *note tix_resetoptions(): 2126. method must be used.

   ---------- Footnotes ----------

   (1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tix.htm


File: python.info,  Node: ScrolledText --- Scrolled Text Widget,  Next: turtle --- Turtle graphics for Tk,  Prev: Tix --- Extension widgets for Tk,  Up: Graphical User Interfaces with Tk

5.24.4 ‘ScrolledText’ — Scrolled Text Widget
--------------------------------------------

The *note ScrolledText: 14d. module provides a class of the same name
which implements a basic text widget which has a vertical scroll bar
configured to do the "right thing."  Using the *note ScrolledText: 14d.
class is a lot easier than setting up a text widget and scroll bar
directly.  The constructor is the same as that of the ‘Tkinter.Text’
class.

     Note: *note ScrolledText: 14d. has been renamed to
     ‘tkinter.scrolledtext’ in Python 3.  The *note 2to3: bdb. tool will
     automatically adapt imports when converting your sources to Python
     3.

  The text widget and scrollbar are packed together in a ‘Frame’, and
the methods of the ‘Grid’ and ‘Pack’ geometry managers are acquired from
the ‘Frame’ object.  This allows the *note ScrolledText: 14d. widget to
be used directly to achieve most normal geometry management behavior.

  Should more specific control be necessary, the following attributes
are available:

 -- Attribute: ScrolledText.frame

     The frame which surrounds the text and scroll bar widgets.

 -- Attribute: ScrolledText.vbar

     The scroll bar widget.


File: python.info,  Node: turtle --- Turtle graphics for Tk,  Next: IDLE,  Prev: ScrolledText --- Scrolled Text Widget,  Up: Graphical User Interfaces with Tk

5.24.5 ‘turtle’ — Turtle graphics for Tk
----------------------------------------

* Menu:

* Introduction: Introduction<9>. 
* Overview over available Turtle and Screen methods:: 
* Methods of RawTurtle/Turtle and corresponding functions:: 
* Methods of TurtleScreen/Screen and corresponding functions:: 
* The public classes of the module turtle:: 
* Help and configuration:: 
* Demo scripts:: 


File: python.info,  Node: Introduction<9>,  Next: Overview over available Turtle and Screen methods,  Up: turtle --- Turtle graphics for Tk

5.24.5.1 Introduction
.....................

Turtle graphics is a popular way for introducing programming to kids.
It was part of the original Logo programming language developed by Wally
Feurzig and Seymour Papert in 1966.

  Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After
an ‘import turtle’, give it the command ‘turtle.forward(15)’, and it
moves (on-screen!)  15 pixels in the direction it is facing, drawing a
line as it moves.  Give it the command ‘turtle.right(25)’, and it
rotates in-place 25 degrees clockwise.

  By combining together these and similar commands, intricate shapes and
pictures can easily be drawn.

  The *note turtle: 184. module is an extended reimplementation of the
same-named module from the Python standard distribution up to version
Python 2.5.

  It tries to keep the merits of the old turtle module and to be
(nearly) 100% compatible with it.  This means in the first place to
enable the learning programmer to use all the commands, classes and
methods interactively when using the module from within IDLE run with
the ‘-n’ switch.

  The turtle module provides turtle graphics primitives, in both
object-oriented and procedure-oriented ways.  Because it uses *note
Tkinter: 17d. for the underlying graphics, it needs a version of Python
installed with Tk support.

  The object-oriented interface uses essentially two+two classes:

  1. The *note TurtleScreen: 212e. class defines graphics windows as a
     playground for the drawing turtles.  Its constructor needs a
     ‘Tkinter.Canvas’ or a *note ScrolledCanvas: 212f. as argument.  It
     should be used when *note turtle: 184. is used as part of some
     application.

     The function *note Screen(): 2130. returns a singleton object of a
     *note TurtleScreen: 212e. subclass.  This function should be used
     when *note turtle: 184. is used as a standalone tool for doing
     graphics.  As a singleton object, inheriting from its class is not
     possible.

     All methods of TurtleScreen/Screen also exist as functions, i.e.
     as part of the procedure-oriented interface.

  2. *note RawTurtle: 2131. (alias: *note RawPen: 2132.) defines Turtle
     objects which draw on a *note TurtleScreen: 212e.  Its constructor
     needs a Canvas, ScrolledCanvas or TurtleScreen as argument, so the
     RawTurtle objects know where to draw.

     Derived from RawTurtle is the subclass *note Turtle: 2133. (alias:
     ‘Pen’), which draws on "the" *note Screen: 2130. - instance which
     is automatically created, if not already present.

     All methods of RawTurtle/Turtle also exist as functions, i.e.  part
     of the procedure-oriented interface.

  The procedural interface provides functions which are derived from the
methods of the classes *note Screen: 2130. and *note Turtle: 2133.  They
have the same names as the corresponding methods.  A screen object is
automatically created whenever a function derived from a Screen method
is called.  An (unnamed) turtle object is automatically created whenever
any of the functions derived from a Turtle method is called.

  To use multiple turtles an a screen one has to use the object-oriented
interface.

     Note: In the following documentation the argument list for
     functions is given.  Methods, of course, have the additional first
     argument _self_ which is omitted here.


File: python.info,  Node: Overview over available Turtle and Screen methods,  Next: Methods of RawTurtle/Turtle and corresponding functions,  Prev: Introduction<9>,  Up: turtle --- Turtle graphics for Tk

5.24.5.2 Overview over available Turtle and Screen methods
..........................................................

* Menu:

* Turtle methods:: 
* Methods of TurtleScreen/Screen:: 


File: python.info,  Node: Turtle methods,  Next: Methods of TurtleScreen/Screen,  Up: Overview over available Turtle and Screen methods

5.24.5.3 Turtle methods
.......................

Turtle motion

     Move and draw

               *note forward(): 2136. | *note fd(): 2137. 
               *note backward(): 2138. | *note bk(): 2139. | *note back(): 213a. 
               *note right(): 213b. | *note rt(): 213c. 
               *note left(): 213d. | *note lt(): 213e. 
               *note goto(): 213f. | *note setpos(): 2140. | *note setposition(): 2141. 
               *note setx(): 2142. 
               *note sety(): 2143. 
               *note setheading(): 2144. | *note seth(): 2145. 
               *note home(): 2146. 
               *note circle(): 2147. 
               *note dot(): 2148. 
               *note stamp(): 2149. 
               *note clearstamp(): 214a. 
               *note clearstamps(): 214b. 
               *note undo(): 214c. 
               *note speed(): 214d. 

     Tell Turtle’s state

               *note position(): 214e. | *note pos(): 214f. 
               *note towards(): 2150. 
               *note xcor(): 2151. 
               *note ycor(): 2152. 
               *note heading(): 2153. 
               *note distance(): 2154. 

     Setting and measurement

               *note degrees(): 2155. 
               *note radians(): 2156. 

Pen control

     Drawing state

               *note pendown(): 2157. | *note pd(): 2158. | *note down(): 2159. 
               *note penup(): 215a. | *note pu(): 215b. | *note up(): 215c. 
               *note pensize(): 215d. | *note width(): 215e. 
               *note pen(): 215f. 
               *note isdown(): 2160. 

     Color control

               *note color(): 2161. 
               *note pencolor(): 2162. 
               *note fillcolor(): 2163. 

     Filling

               *note fill(): 2164. 
               *note begin_fill(): 2165. 
               *note end_fill(): 2166. 

     More drawing control

               *note reset(): 2167. 
               *note clear(): 2168. 
               *note write(): 2169. 

Turtle state

     Visibility

               *note showturtle(): 216a. | *note st(): 216b. 
               *note hideturtle(): 216c. | *note ht(): 216d. 
               *note isvisible(): 216e. 

     Appearance

               *note shape(): 216f. 
               *note resizemode(): 2170. 
               *note shapesize(): 2171. | *note turtlesize(): 2172. 
               *note settiltangle(): 2173. 
               *note tiltangle(): 2174. 
               *note tilt(): 2175. 

Using events

          *note onclick(): 2176. 
          *note onrelease(): 2177. 
          *note ondrag(): 2178. 
          *note mainloop(): 2179. | *note done(): 217a. 

Special Turtle methods

          *note begin_poly(): 217b. 
          *note end_poly(): 217c. 
          *note get_poly(): 217d. 
          *note clone(): 217e. 
          *note getturtle(): 217f. | *note getpen(): 2180. 
          *note getscreen(): 2181. 
          *note setundobuffer(): 2182. 
          *note undobufferentries(): 2183. 
          *note tracer(): 2184. 
          *note window_width(): 2185. 
          *note window_height(): 2186. 


File: python.info,  Node: Methods of TurtleScreen/Screen,  Prev: Turtle methods,  Up: Overview over available Turtle and Screen methods

5.24.5.4 Methods of TurtleScreen/Screen
.......................................

Window control

          *note bgcolor(): 2188. 
          *note bgpic(): 2189. 
          *note clear(): 2168. | *note clearscreen(): 218a. 
          *note reset(): 2167. | *note resetscreen(): 218b. 
          *note screensize(): 218c. 
          *note setworldcoordinates(): 218d. 

Animation control

          *note delay(): 218e. 
          *note tracer(): 2184. 
          *note update(): 218f. 

Using screen events

          *note listen(): 2190. 
          *note onkey(): 2191. 
          *note onclick(): 2176. | *note onscreenclick(): 2192. 
          *note ontimer(): 2193. 

Settings and special methods

          *note mode(): 2194. 
          *note colormode(): 2195. 
          *note getcanvas(): 2196. 
          *note getshapes(): 2197. 
          *note register_shape(): 2198. | *note addshape(): 2199. 
          *note turtles(): 219a. 
          *note window_height(): 2186. 
          *note window_width(): 2185. 

Methods specific to Screen

          *note bye(): 219b. 
          *note exitonclick(): 219c. 
          *note setup(): 219d. 
          *note title(): 219e. 


File: python.info,  Node: Methods of RawTurtle/Turtle and corresponding functions,  Next: Methods of TurtleScreen/Screen and corresponding functions,  Prev: Overview over available Turtle and Screen methods,  Up: turtle --- Turtle graphics for Tk

5.24.5.5 Methods of RawTurtle/Turtle and corresponding functions
................................................................

Most of the examples in this section refer to a Turtle instance called
‘turtle’.

* Menu:

* Turtle motion:: 
* Tell Turtle's state:: 
* Settings for measurement:: 
* Pen control:: 
* Turtle state:: 
* Using events:: 
* Special Turtle methods:: 
* Excursus about the use of compound shapes:: 


File: python.info,  Node: Turtle motion,  Next: Tell Turtle's state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.6 Turtle motion
......................

 -- Function: turtle.forward (distance)
 -- Function: turtle.fd (distance)

          Parameters: *distance* – a number (integer or float)

     Move the turtle forward by the specified _distance_, in the
     direction the turtle is headed.

          >>> turtle.position()
          (0.00,0.00)
          >>> turtle.forward(25)
          >>> turtle.position()
          (25.00,0.00)
          >>> turtle.forward(-75)
          >>> turtle.position()
          (-50.00,0.00)

 -- Function: turtle.back (distance)
 -- Function: turtle.bk (distance)
 -- Function: turtle.backward (distance)

          Parameters: *distance* – a number

     Move the turtle backward by _distance_, opposite to the direction
     the turtle is headed.  Do not change the turtle’s heading.

          >>> turtle.position()
          (0.00,0.00)
          >>> turtle.backward(30)
          >>> turtle.position()
          (-30.00,0.00)

 -- Function: turtle.right (angle)
 -- Function: turtle.rt (angle)

          Parameters: *angle* – a number (integer or float)

     Turn turtle right by _angle_ units.  (Units are by default degrees,
     but can be set via the *note degrees(): 2155. and *note radians():
     2156. functions.)  Angle orientation depends on the turtle mode,
     see *note mode(): 2194.

          >>> turtle.heading()
          22.0
          >>> turtle.right(45)
          >>> turtle.heading()
          337.0

 -- Function: turtle.left (angle)
 -- Function: turtle.lt (angle)

          Parameters: *angle* – a number (integer or float)

     Turn turtle left by _angle_ units.  (Units are by default degrees,
     but can be set via the *note degrees(): 2155. and *note radians():
     2156. functions.)  Angle orientation depends on the turtle mode,
     see *note mode(): 2194.

          >>> turtle.heading()
          22.0
          >>> turtle.left(45)
          >>> turtle.heading()
          67.0

 -- Function: turtle.goto (x, y=None)
 -- Function: turtle.setpos (x, y=None)
 -- Function: turtle.setposition (x, y=None)

          Parameters:

             * *x* – a number or a pair/vector of numbers

             * *y* – a number or ‘None’

     If _y_ is ‘None’, _x_ must be a pair of coordinates or a *note
     Vec2D: 21a1. (e.g.  as returned by *note pos(): 214f.).

     Move turtle to an absolute position.  If the pen is down, draw
     line.  Do not change the turtle’s orientation.

          >>> tp = turtle.pos()
          >>> tp
          (0.00,0.00)
          >>> turtle.setpos(60,30)
          >>> turtle.pos()
          (60.00,30.00)
          >>> turtle.setpos((20,80))
          >>> turtle.pos()
          (20.00,80.00)
          >>> turtle.setpos(tp)
          >>> turtle.pos()
          (0.00,0.00)

 -- Function: turtle.setx (x)

          Parameters: *x* – a number (integer or float)

     Set the turtle’s first coordinate to _x_, leave second coordinate
     unchanged.

          >>> turtle.position()
          (0.00,240.00)
          >>> turtle.setx(10)
          >>> turtle.position()
          (10.00,240.00)

 -- Function: turtle.sety (y)

          Parameters: *y* – a number (integer or float)

     Set the turtle’s second coordinate to _y_, leave first coordinate
     unchanged.

          >>> turtle.position()
          (0.00,40.00)
          >>> turtle.sety(-10)
          >>> turtle.position()
          (0.00,-10.00)

 -- Function: turtle.setheading (to_angle)
 -- Function: turtle.seth (to_angle)

          Parameters: *to_angle* – a number (integer or float)

     Set the orientation of the turtle to _to_angle_.  Here are some
     common directions in degrees:

     standard mode           logo mode
                             
     -------------------------------------------------
                             
     0 - east                0 - north
                             
                             
     90 - north              90 - east
                             
                             
     180 - west              180 - south
                             
                             
     270 - south             270 - west
                             

          >>> turtle.setheading(90)
          >>> turtle.heading()
          90.0

 -- Function: turtle.home ()

     Move turtle to the origin – coordinates (0,0) – and set its heading
     to its start-orientation (which depends on the mode, see *note
     mode(): 2194.).

          >>> turtle.heading()
          90.0
          >>> turtle.position()
          (0.00,-10.00)
          >>> turtle.home()
          >>> turtle.position()
          (0.00,0.00)
          >>> turtle.heading()
          0.0

 -- Function: turtle.circle (radius, extent=None, steps=None)

          Parameters:

             * *radius* – a number

             * *extent* – a number (or ‘None’)

             * *steps* – an integer (or ‘None’)

     Draw a circle with given _radius_.  The center is _radius_ units
     left of the turtle; _extent_ – an angle – determines which part of
     the circle is drawn.  If _extent_ is not given, draw the entire
     circle.  If _extent_ is not a full circle, one endpoint of the arc
     is the current pen position.  Draw the arc in counterclockwise
     direction if _radius_ is positive, otherwise in clockwise
     direction.  Finally the direction of the turtle is changed by the
     amount of _extent_.

     As the circle is approximated by an inscribed regular polygon,
     _steps_ determines the number of steps to use.  If not given, it
     will be calculated automatically.  May be used to draw regular
     polygons.

          >>> turtle.home()
          >>> turtle.position()
          (0.00,0.00)
          >>> turtle.heading()
          0.0
          >>> turtle.circle(50)
          >>> turtle.position()
          (-0.00,0.00)
          >>> turtle.heading()
          0.0
          >>> turtle.circle(120, 180)  # draw a semicircle
          >>> turtle.position()
          (0.00,240.00)
          >>> turtle.heading()
          180.0

 -- Function: turtle.dot (size=None, *color)

          Parameters:

             * *size* – an integer >= 1 (if given)

             * *color* – a colorstring or a numeric color tuple

     Draw a circular dot with diameter _size_, using _color_.  If _size_
     is not given, the maximum of pensize+4 and 2*pensize is used.

          >>> turtle.home()
          >>> turtle.dot()
          >>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)
          >>> turtle.position()
          (100.00,-0.00)
          >>> turtle.heading()
          0.0

 -- Function: turtle.stamp ()

     Stamp a copy of the turtle shape onto the canvas at the current
     turtle position.  Return a stamp_id for that stamp, which can be
     used to delete it by calling ‘clearstamp(stamp_id)’.

          >>> turtle.color("blue")
          >>> turtle.stamp()
          11
          >>> turtle.fd(50)

 -- Function: turtle.clearstamp (stampid)

          Parameters: *stampid* – an integer, must be return value of
          previous *note stamp(): 2149. call

     Delete stamp with given _stampid_.

          >>> turtle.position()
          (150.00,-0.00)
          >>> turtle.color("blue")
          >>> astamp = turtle.stamp()
          >>> turtle.fd(50)
          >>> turtle.position()
          (200.00,-0.00)
          >>> turtle.clearstamp(astamp)
          >>> turtle.position()
          (200.00,-0.00)

 -- Function: turtle.clearstamps (n=None)

          Parameters: *n* – an integer (or ‘None’)

     Delete all or first/last _n_ of turtle’s stamps.  If _n_ is None,
     delete all stamps, if _n_ > 0 delete first _n_ stamps, else if _n_
     < 0 delete last _n_ stamps.

          >>> for i in range(8):
          ...     turtle.stamp(); turtle.fd(30)
          13
          14
          15
          16
          17
          18
          19
          20
          >>> turtle.clearstamps(2)
          >>> turtle.clearstamps(-2)
          >>> turtle.clearstamps()

 -- Function: turtle.undo ()

     Undo (repeatedly) the last turtle action(s).  Number of available
     undo actions is determined by the size of the undobuffer.

          >>> for i in range(4):
          ...     turtle.fd(50); turtle.lt(80)
          ...
          >>> for i in range(8):
          ...     turtle.undo()

 -- Function: turtle.speed (speed=None)

          Parameters: *speed* – an integer in the range 0..10 or a
          speedstring (see below)

     Set the turtle’s speed to an integer value in the range 0..10.  If
     no argument is given, return current speed.

     If input is a number greater than 10 or smaller than 0.5, speed is
     set to 0.  Speedstrings are mapped to speedvalues as follows:

        * "fastest": 0

        * "fast": 10

        * "normal": 6

        * "slow": 3

        * "slowest": 1

     Speeds from 1 to 10 enforce increasingly faster animation of line
     drawing and turtle turning.

     Attention: _speed_ = 0 means that _no_ animation takes place.
     forward/back makes turtle jump and likewise left/right make the
     turtle turn instantly.

          >>> turtle.speed()
          3
          >>> turtle.speed('normal')
          >>> turtle.speed()
          6
          >>> turtle.speed(9)
          >>> turtle.speed()
          9


File: python.info,  Node: Tell Turtle's state,  Next: Settings for measurement,  Prev: Turtle motion,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.7 Tell Turtle’s state
............................

 -- Function: turtle.position ()
 -- Function: turtle.pos ()

     Return the turtle’s current location (x,y) (as a *note Vec2D: 21a1.
     vector).

          >>> turtle.pos()
          (440.00,-0.00)

 -- Function: turtle.towards (x, y=None)

          Parameters:

             * *x* – a number or a pair/vector of numbers or a turtle
               instance

             * *y* – a number if _x_ is a number, else ‘None’

     Return the angle between the line from turtle position to position
     specified by (x,y), the vector or the other turtle.  This depends
     on the turtle’s start orientation which depends on the mode -
     "standard"/"world" or "logo").

          >>> turtle.goto(10, 10)
          >>> turtle.towards(0,0)
          225.0

 -- Function: turtle.xcor ()

     Return the turtle’s x coordinate.

          >>> turtle.home()
          >>> turtle.left(50)
          >>> turtle.forward(100)
          >>> turtle.pos()
          (64.28,76.60)
          >>> print turtle.xcor()
          64.2787609687

 -- Function: turtle.ycor ()

     Return the turtle’s y coordinate.

          >>> turtle.home()
          >>> turtle.left(60)
          >>> turtle.forward(100)
          >>> print turtle.pos()
          (50.00,86.60)
          >>> print turtle.ycor()
          86.6025403784

 -- Function: turtle.heading ()

     Return the turtle’s current heading (value depends on the turtle
     mode, see *note mode(): 2194.).

          >>> turtle.home()
          >>> turtle.left(67)
          >>> turtle.heading()
          67.0

 -- Function: turtle.distance (x, y=None)

          Parameters:

             * *x* – a number or a pair/vector of numbers or a turtle
               instance

             * *y* – a number if _x_ is a number, else ‘None’

     Return the distance from the turtle to (x,y), the given vector, or
     the given other turtle, in turtle step units.

          >>> turtle.home()
          >>> turtle.distance(30,40)
          50.0
          >>> turtle.distance((30,40))
          50.0
          >>> joe = Turtle()
          >>> joe.forward(77)
          >>> turtle.distance(joe)
          77.0


File: python.info,  Node: Settings for measurement,  Next: Pen control,  Prev: Tell Turtle's state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.8 Settings for measurement
.................................

 -- Function: turtle.degrees (fullcircle=360.0)

          Parameters: *fullcircle* – a number

     Set angle measurement units, i.e.  set number of "degrees" for a
     full circle.  Default value is 360 degrees.

          >>> turtle.home()
          >>> turtle.left(90)
          >>> turtle.heading()
          90.0

          Change angle measurement unit to grad (also known as gon,
          grade, or gradian and equals 1/100-th of the right angle.)
          >>> turtle.degrees(400.0)
          >>> turtle.heading()
          100.0
          >>> turtle.degrees(360)
          >>> turtle.heading()
          90.0

 -- Function: turtle.radians ()

     Set the angle measurement units to radians.  Equivalent to
     ‘degrees(2*math.pi)’.

          >>> turtle.home()
          >>> turtle.left(90)
          >>> turtle.heading()
          90.0
          >>> turtle.radians()
          >>> turtle.heading()
          1.5707963267948966


File: python.info,  Node: Pen control,  Next: Turtle state,  Prev: Settings for measurement,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.9 Pen control
....................

* Menu:

* Drawing state:: 
* Color control:: 
* Filling:: 
* More drawing control:: 


File: python.info,  Node: Drawing state,  Next: Color control,  Up: Pen control

5.24.5.10 Drawing state
.......................

 -- Function: turtle.pendown ()
 -- Function: turtle.pd ()
 -- Function: turtle.down ()

     Pull the pen down – drawing when moving.

 -- Function: turtle.penup ()
 -- Function: turtle.pu ()
 -- Function: turtle.up ()

     Pull the pen up – no drawing when moving.

 -- Function: turtle.pensize (width=None)
 -- Function: turtle.width (width=None)

          Parameters: *width* – a positive number

     Set the line thickness to _width_ or return it.  If resizemode is
     set to "auto" and turtleshape is a polygon, that polygon is drawn
     with the same line thickness.  If no argument is given, the current
     pensize is returned.

          >>> turtle.pensize()
          1
          >>> turtle.pensize(10)   # from here on lines of width 10 are drawn

 -- Function: turtle.pen (pen=None, **pendict)

          Parameters:

             * *pen* – a dictionary with some or all of the below listed
               keys

             * *pendict* – one or more keyword-arguments with the below
               listed keys as keywords

     Return or set the pen’s attributes in a "pen-dictionary" with the
     following key/value pairs:

        * "shown": True/False

        * "pendown": True/False

        * "pencolor": color-string or color-tuple

        * "fillcolor": color-string or color-tuple

        * "pensize": positive number

        * "speed": number in range 0..10

        * "resizemode": "auto" or "user" or "noresize"

        * "stretchfactor": (positive number, positive number)

        * "outline": positive number

        * "tilt": number

     This dictionary can be used as argument for a subsequent call to
     *note pen(): 215f. to restore the former pen-state.  Moreover one
     or more of these attributes can be provided as keyword-arguments.
     This can be used to set several pen attributes in one statement.

          >>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)
          >>> sorted(turtle.pen().items())
          [('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),
           ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
           ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]
          >>> penstate=turtle.pen()
          >>> turtle.color("yellow", "")
          >>> turtle.penup()
          >>> sorted(turtle.pen().items())
          [('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow'),
           ('pendown', False), ('pensize', 10), ('resizemode', 'noresize'),
           ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]
          >>> turtle.pen(penstate, fillcolor="green")
          >>> sorted(turtle.pen().items())
          [('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red'),
           ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
           ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]

 -- Function: turtle.isdown ()

     Return ‘True’ if pen is down, ‘False’ if it’s up.

          >>> turtle.penup()
          >>> turtle.isdown()
          False
          >>> turtle.pendown()
          >>> turtle.isdown()
          True


File: python.info,  Node: Color control,  Next: Filling,  Prev: Drawing state,  Up: Pen control

5.24.5.11 Color control
.......................

 -- Function: turtle.pencolor (*args)

     Return or set the pencolor.

     Four input formats are allowed:

     ‘pencolor()’

          Return the current pencolor as color specification string or
          as a tuple (see example).  May be used as input to another
          color/pencolor/fillcolor call.

     ‘pencolor(colorstring)’

          Set pencolor to _colorstring_, which is a Tk color
          specification string, such as ‘"red"’, ‘"yellow"’, or
          ‘"#33cc8c"’.

     ‘pencolor((r, g, b))’

          Set pencolor to the RGB color represented by the tuple of _r_,
          _g_, and _b_.  Each of _r_, _g_, and _b_ must be in the range
          0..colormode, where colormode is either 1.0 or 255 (see *note
          colormode(): 2195.).

     ‘pencolor(r, g, b)’

               Set pencolor to the RGB color represented by _r_, _g_,
               and _b_.  Each of _r_, _g_, and _b_ must be in the range
               0..colormode.

          If turtleshape is a polygon, the outline of that polygon is
          drawn with the newly set pencolor.

          >>> colormode()
          1.0
          >>> turtle.pencolor()
          'red'
          >>> turtle.pencolor("brown")
          >>> turtle.pencolor()
          'brown'
          >>> tup = (0.2, 0.8, 0.55)
          >>> turtle.pencolor(tup)
          >>> turtle.pencolor()
          (0.2, 0.8, 0.5490196078431373)
          >>> colormode(255)
          >>> turtle.pencolor()
          (51, 204, 140)
          >>> turtle.pencolor('#32c18f')
          >>> turtle.pencolor()
          (50, 193, 143)

 -- Function: turtle.fillcolor (*args)

     Return or set the fillcolor.

     Four input formats are allowed:

     ‘fillcolor()’

          Return the current fillcolor as color specification string,
          possibly in tuple format (see example).  May be used as input
          to another color/pencolor/fillcolor call.

     ‘fillcolor(colorstring)’

          Set fillcolor to _colorstring_, which is a Tk color
          specification string, such as ‘"red"’, ‘"yellow"’, or
          ‘"#33cc8c"’.

     ‘fillcolor((r, g, b))’

          Set fillcolor to the RGB color represented by the tuple of
          _r_, _g_, and _b_.  Each of _r_, _g_, and _b_ must be in the
          range 0..colormode, where colormode is either 1.0 or 255 (see
          *note colormode(): 2195.).

     ‘fillcolor(r, g, b)’

               Set fillcolor to the RGB color represented by _r_, _g_,
               and _b_.  Each of _r_, _g_, and _b_ must be in the range
               0..colormode.

          If turtleshape is a polygon, the interior of that polygon is
          drawn with the newly set fillcolor.

          >>> turtle.fillcolor("violet")
          >>> turtle.fillcolor()
          'violet'
          >>> col = turtle.pencolor()
          >>> col
          (50, 193, 143)
          >>> turtle.fillcolor(col)
          >>> turtle.fillcolor()
          (50, 193, 143)
          >>> turtle.fillcolor('#ffffff')
          >>> turtle.fillcolor()
          (255, 255, 255)

 -- Function: turtle.color (*args)

     Return or set pencolor and fillcolor.

     Several input formats are allowed.  They use 0 to 3 arguments as
     follows:

     ‘color()’

          Return the current pencolor and the current fillcolor as a
          pair of color specification strings or tuples as returned by
          *note pencolor(): 2162. and *note fillcolor(): 2163.

     ‘color(colorstring)’, ‘color((r,g,b))’, ‘color(r,g,b)’

          Inputs as in *note pencolor(): 2162, set both, fillcolor and
          pencolor, to the given value.

     ‘color(colorstring1, colorstring2)’, ‘color((r1,g1,b1), (r2,g2,b2))’

               Equivalent to ‘pencolor(colorstring1)’ and
               ‘fillcolor(colorstring2)’ and analogously if the other
               input format is used.

          If turtleshape is a polygon, outline and interior of that
          polygon is drawn with the newly set colors.

          >>> turtle.color("red", "green")
          >>> turtle.color()
          ('red', 'green')
          >>> color("#285078", "#a0c8f0")
          >>> color()
          ((40, 80, 120), (160, 200, 240))

  See also: Screen method *note colormode(): 2195.

