This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: The Python Profilers,  Next: hotshot --- High performance logging profiler,  Prev: Debugger Commands,  Up: Debugging and Profiling

5.26.4 The Python Profilers
---------------------------

*Source code:* Lib/profile.py(1) and Lib/pstats.py(2)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

* Menu:

* Introduction to the profilers:: 
* Instant User's Manual:: 
* profile and cProfile Module Reference:: 
* The Stats Class:: 
* What Is Deterministic Profiling?:: 
* Limitations:: 
* Calibration:: 
* Using a custom timer:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/profile.py

   (2) http://hg.python.org/cpython/file/2.7/Lib/pstats.py


File: python.info,  Node: Introduction to the profilers,  Next: Instant User's Manual,  Up: The Python Profilers

5.26.4.1 Introduction to the profilers
......................................

*note cProfile: 74. and *note profile: 139. provide _deterministic
profiling_ of Python programs.  A _profile_ is a set of statistics that
describes how often and for how long various parts of the program
executed.  These statistics can be formatted into reports via the *note
pstats: 13a. module.

  The Python standard library provides three different implementations
of the same profiling interface:

  1. *note cProfile: 74. is recommended for most users; it’s a C
     extension with reasonable overhead that makes it suitable for
     profiling long-running programs.  Based on ‘lsprof’, contributed by
     Brett Rosen and Ted Czotter.

     New in version 2.5.

  2. *note profile: 139, a pure Python module whose interface is
     imitated by *note cProfile: 74, but which adds significant overhead
     to profiled programs.  If you’re trying to extend the profiler in
     some way, the task might be easier with this module.

     Changed in version 2.4: Now also reports the time spent in calls to
     built-in functions and methods.

  3. *note hotshot: e9. was an experimental C module that focused on
     minimizing the overhead of profiling, at the expense of longer data
     post-processing times.  It is no longer maintained and may be
     dropped in a future version of Python.

     Changed in version 2.5: The results should be more meaningful than
     in the past: the timing core contained a critical bug.

  The *note profile: 139. and *note cProfile: 74. modules export the
same interface, so they are mostly interchangeable; *note cProfile: 74.
has a much lower overhead but is newer and might not be available on all
systems.  *note cProfile: 74. is really a compatibility layer on top of
the internal ‘_lsprof’ module.  The *note hotshot: e9. module is
reserved for specialized usage.

     Note: The profiler modules are designed to provide an execution
     profile for a given program, not for benchmarking purposes (for
     that, there is *note timeit: 17b. for reasonably accurate results).
     This particularly applies to benchmarking Python code against C
     code: the profilers introduce overhead for Python code, but not for
     C-level functions, and so the C code would seem faster than any
     Python one.


File: python.info,  Node: Instant User's Manual,  Next: profile and cProfile Module Reference,  Prev: Introduction to the profilers,  Up: The Python Profilers

5.26.4.2 Instant User’s Manual
..............................

This section is provided for users that "don’t want to read the manual."
It provides a very brief overview, and allows a user to rapidly perform
profiling on an existing application.

  To profile a function that takes a single argument, you can do:

     import cProfile
     import re
     cProfile.run('re.compile("foo|bar")')

  (Use *note profile: 139. instead of *note cProfile: 74. if the latter
is not available on your system.)

  The above action would run *note re.compile(): 9bf. and print profile
results like the following:

           197 function calls (192 primitive calls) in 0.002 seconds

     Ordered by: standard name

     ncalls  tottime  percall  cumtime  percall filename:lineno(function)
          1    0.000    0.000    0.001    0.001 <string>:1(<module>)
          1    0.000    0.000    0.001    0.001 re.py:212(compile)
          1    0.000    0.000    0.001    0.001 re.py:268(_compile)
          1    0.000    0.000    0.000    0.000 sre_compile.py:172(_compile_charset)
          1    0.000    0.000    0.000    0.000 sre_compile.py:201(_optimize_charset)
          4    0.000    0.000    0.000    0.000 sre_compile.py:25(_identityfunction)
        3/1    0.000    0.000    0.000    0.000 sre_compile.py:33(_compile)

  The first line indicates that 197 calls were monitored.  Of those
calls, 192 were _primitive_, meaning that the call was not induced via
recursion.  The next line: ‘Ordered by: standard name’, indicates that
the text string in the far right column was used to sort the output.
The column headings include:

ncalls

     for the number of calls,

tottime

     for the total time spent in the given function (and excluding time
     made in calls to sub-functions)

percall

     is the quotient of ‘tottime’ divided by ‘ncalls’

cumtime

     is the cumulative time spent in this and all subfunctions (from
     invocation till exit).  This figure is accurate _even_ for
     recursive functions.

percall

     is the quotient of ‘cumtime’ divided by primitive calls

filename:lineno(function)

     provides the respective data of each function

  When there are two numbers in the first column (for example ‘3/1’), it
means that the function recursed.  The second value is the number of
primitive calls and the former is the total number of calls.  Note that
when the function does not recurse, these two values are the same, and
only the single figure is printed.

  Instead of printing the output at the end of the profile run, you can
save the results to a file by specifying a filename to the ‘run()’
function:

     import cProfile
     import re
     cProfile.run('re.compile("foo|bar")', 'restats')

  The *note pstats.Stats: 2345. class reads profile results from a file
and formats them in various ways.

  The file *note cProfile: 74. can also be invoked as a script to
profile another script.  For example:

     python -m cProfile [-o output_file] [-s sort_order] myscript.py

  ‘-o’ writes the profile results to a file instead of to stdout

  ‘-s’ specifies one of the *note sort_stats(): 2346. sort values to
sort the output by.  This only applies when ‘-o’ is not supplied.

  The *note pstats: 13a. module’s *note Stats: 2345. class has a variety
of methods for manipulating and printing the data saved into a profile
results file:

     import pstats
     p = pstats.Stats('restats')
     p.strip_dirs().sort_stats(-1).print_stats()

  The *note strip_dirs(): 2347. method removed the extraneous path from
all the module names.  The *note sort_stats(): 2346. method sorted all
the entries according to the standard module/line/name string that is
printed.  The *note print_stats(): 2348. method printed out all the
statistics.  You might try the following sort calls:

     p.sort_stats('name')
     p.print_stats()

  The first call will actually sort the list by function name, and the
second call will print out the statistics.  The following are some
interesting calls to experiment with:

     p.sort_stats('cumulative').print_stats(10)

  This sorts the profile by cumulative time in a function, and then only
prints the ten most significant lines.  If you want to understand what
algorithms are taking time, the above line is what you would use.

  If you were looking to see what functions were looping a lot, and
taking a lot of time, you would do:

     p.sort_stats('time').print_stats(10)

  to sort according to time spent within each function, and then print
the statistics for the top ten functions.

  You might also try:

     p.sort_stats('file').print_stats('__init__')

  This will sort all the statistics by file name, and then print out
statistics for only the class init methods (since they are spelled with
‘__init__’ in them).  As one final example, you could try:

     p.sort_stats('time', 'cum').print_stats(.5, 'init')

  This line sorts statistics with a primary key of time, and a secondary
key of cumulative time, and then prints out some of the statistics.  To
be specific, the list is first culled down to 50% (re: ‘.5’) of its
original size, then only lines containing ‘init’ are maintained, and
that sub-sub-list is printed.

  If you wondered what functions called the above functions, you could
now (‘p’ is still sorted according to the last criteria) do:

     p.print_callers(.5, 'init')

  and you would get a list of callers for each of the listed functions.

  If you want more functionality, you’re going to have to read the
manual, or guess what the following functions do:

     p.print_callees()
     p.add('restats')

  Invoked as a script, the *note pstats: 13a. module is a statistics
browser for reading and examining profile dumps.  It has a simple
line-oriented interface (implemented using *note cmd: 61.) and
interactive help.


File: python.info,  Node: profile and cProfile Module Reference,  Next: The Stats Class,  Prev: Instant User's Manual,  Up: The Python Profilers

5.26.4.3 ‘profile’ and ‘cProfile’ Module Reference
..................................................

Both the *note profile: 139. and *note cProfile: 74. modules provide the
following functions:

 -- Function: profile.run (command, filename=None, sort=-1)

     This function takes a single argument that can be passed to the
     ‘exec()’ function, and an optional file name.  In all cases this
     routine executes:

          exec(command, __main__.__dict__, __main__.__dict__)

     and gathers profiling statistics from the execution.  If no file
     name is present, then this function automatically creates a *note
     Stats: 2345. instance and prints a simple profiling report.  If the
     sort value is specified it is passed to this *note Stats: 2345.
     instance to control how the results are sorted.

 -- Function: profile.runctx (command, globals, locals, filename=None)

     This function is similar to *note run(): 234a, with added arguments
     to supply the globals and locals dictionaries for the _command_
     string.  This routine executes:

          exec(command, globals, locals)

     and gathers profiling statistics as in the *note run(): 234a.
     function above.

 -- Class: profile.Profile (timer=None, timeunit=0.0, subcalls=True,
          builtins=True)

     This class is normally only used if more precise control over
     profiling is needed than what the ‘cProfile.run()’ function
     provides.

     A custom timer can be supplied for measuring how long code takes to
     run via the _timer_ argument.  This must be a function that returns
     a single number representing the current time.  If the number is an
     integer, the _timeunit_ specifies a multiplier that specifies the
     duration of each unit of time.  For example, if the timer returns
     times measured in thousands of seconds, the time unit would be
     ‘.001’.

     Directly using the *note Profile: 234c. class allows formatting
     profile results without writing the profile data to a file:

          import cProfile, pstats, StringIO
          pr = cProfile.Profile()
          pr.enable()
          # ... do something ...
          pr.disable()
          s = StringIO.StringIO()
          sortby = 'cumulative'
          ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
          ps.print_stats()
          print s.getvalue()

      -- Method: enable ()

          Start collecting profiling data.

      -- Method: disable ()

          Stop collecting profiling data.

      -- Method: create_stats ()

          Stop collecting profiling data and record the results
          internally as the current profile.

      -- Method: print_stats (sort=-1)

          Create a *note Stats: 2345. object based on the current
          profile and print the results to stdout.

      -- Method: dump_stats (filename)

          Write the results of the current profile to _filename_.

      -- Method: run (cmd)

          Profile the cmd via ‘exec()’.

      -- Method: runctx (cmd, globals, locals)

          Profile the cmd via ‘exec()’ with the specified global and
          local environment.

      -- Method: runcall (func, *args, **kwargs)

          Profile ‘func(*args, **kwargs)’


File: python.info,  Node: The Stats Class,  Next: What Is Deterministic Profiling?,  Prev: profile and cProfile Module Reference,  Up: The Python Profilers

5.26.4.4 The ‘Stats’ Class
..........................

Analysis of the profiler data is done using the *note Stats: 2345.
class.

 -- Class: pstats.Stats (*filenames or profile, stream=sys.stdout)

     This class constructor creates an instance of a "statistics object"
     from a _filename_ (or list of filenames) or from a ‘Profile’
     instance.  Output will be printed to the stream specified by
     _stream_.

     The file selected by the above constructor must have been created
     by the corresponding version of *note profile: 139. or *note
     cProfile: 74.  To be specific, there is _no_ file compatibility
     guaranteed with future versions of this profiler, and there is no
     compatibility with files produced by other profilers.  If several
     files are provided, all the statistics for identical functions will
     be coalesced, so that an overall view of several processes can be
     considered in a single report.  If additional files need to be
     combined with data in an existing *note Stats: 2345. object, the
     *note add(): 2357. method can be used.

     Instead of reading the profile data from a file, a
     ‘cProfile.Profile’ or *note profile.Profile: 234c. object can be
     used as the profile data source.

     *note Stats: 2345. objects have the following methods:

      -- Method: strip_dirs ()

          This method for the *note Stats: 2345. class removes all
          leading path information from file names.  It is very useful
          in reducing the size of the printout to fit within (close to)
          80 columns.  This method modifies the object, and the stripped
          information is lost.  After performing a strip operation, the
          object is considered to have its entries in a "random" order,
          as it was just after object initialization and loading.  If
          *note strip_dirs(): 2347. causes two function names to be
          indistinguishable (they are on the same line of the same
          filename, and have the same function name), then the
          statistics for these two entries are accumulated into a single
          entry.

      -- Method: add (*filenames)

          This method of the *note Stats: 2345. class accumulates
          additional profiling information into the current profiling
          object.  Its arguments should refer to filenames created by
          the corresponding version of *note profile.run(): 234a. or
          ‘cProfile.run()’.  Statistics for identically named (re: file,
          line, name) functions are automatically accumulated into
          single function statistics.

      -- Method: dump_stats (filename)

          Save the data loaded into the *note Stats: 2345. object to a
          file named _filename_.  The file is created if it does not
          exist, and is overwritten if it already exists.  This is
          equivalent to the method of the same name on the *note
          profile.Profile: 234c. and ‘cProfile.Profile’ classes.

     New in version 2.3.

      -- Method: sort_stats (*keys)

          This method modifies the *note Stats: 2345. object by sorting
          it according to the supplied criteria.  The argument is
          typically a string identifying the basis of a sort (example:
          ‘'time'’ or ‘'name'’).

          When more than one key is provided, then additional keys are
          used as secondary criteria when there is equality in all keys
          selected before them.  For example, ‘sort_stats('name',
          'file')’ will sort all the entries according to their function
          name, and resolve all ties (identical function names) by
          sorting by file name.

          Abbreviations can be used for any key names, as long as the
          abbreviation is unambiguous.  The following are the keys
          currently defined:

          Valid Arg              Meaning
                                 
          --------------------------------------------------
                                 
          ‘'calls'’              call count
                                 
                                 
          ‘'cumulative'’         cumulative time
                                 
                                 
          ‘'cumtime'’            cumulative time
                                 
                                 
          ‘'file'’               file name
                                 
                                 
          ‘'filename'’           file name
                                 
                                 
          ‘'module'’             file name
                                 
                                 
          ‘'ncalls'’             call count
                                 
                                 
          ‘'pcalls'’             primitive call count
                                 
                                 
          ‘'line'’               line number
                                 
                                 
          ‘'name'’               function name
                                 
                                 
          ‘'nfl'’                name/file/line
                                 
                                 
          ‘'stdname'’            standard name
                                 
                                 
          ‘'time'’               internal time
                                 
                                 
          ‘'tottime'’            internal time
                                 

          Note that all sorts on statistics are in descending order
          (placing most time consuming items first), where as name,
          file, and line number searches are in ascending order
          (alphabetical).  The subtle distinction between ‘'nfl'’ and
          ‘'stdname'’ is that the standard name is a sort of the name as
          printed, which means that the embedded line numbers get
          compared in an odd way.  For example, lines 3, 20, and 40
          would (if the file names were the same) appear in the string
          order 20, 3 and 40.  In contrast, ‘'nfl'’ does a numeric
          compare of the line numbers.  In fact, ‘sort_stats('nfl')’ is
          the same as ‘sort_stats('name', 'file', 'line')’.

          For backward-compatibility reasons, the numeric arguments
          ‘-1’, ‘0’, ‘1’, and ‘2’ are permitted.  They are interpreted
          as ‘'stdname'’, ‘'calls'’, ‘'time'’, and ‘'cumulative'’
          respectively.  If this old style format (numeric) is used,
          only one sort key (the numeric key) will be used, and
          additional arguments will be silently ignored.

      -- Method: reverse_order ()

          This method for the *note Stats: 2345. class reverses the
          ordering of the basic list within the object.  Note that by
          default ascending vs descending order is properly selected
          based on the sort key of choice.

      -- Method: print_stats (*restrictions)

          This method for the *note Stats: 2345. class prints out a
          report as described in the *note profile.run(): 234a.
          definition.

          The order of the printing is based on the last *note
          sort_stats(): 2346. operation done on the object (subject to
          caveats in *note add(): 2357. and *note strip_dirs(): 2347.).

          The arguments provided (if any) can be used to limit the list
          down to the significant entries.  Initially, the list is taken
          to be the complete set of profiled functions.  Each
          restriction is either an integer (to select a count of lines),
          or a decimal fraction between 0.0 and 1.0 inclusive (to select
          a percentage of lines), or a regular expression (to pattern
          match the standard name that is printed.  If several
          restrictions are provided, then they are applied sequentially.
          For example:

               print_stats(.1, 'foo:')

          would first limit the printing to first 10% of list, and then
          only print functions that were part of filename ‘.*foo:’.  In
          contrast, the command:

               print_stats('foo:', .1)

          would limit the list to all functions having file names
          ‘.*foo:’, and then proceed to only print the first 10% of
          them.

      -- Method: print_callers (*restrictions)

          This method for the *note Stats: 2345. class prints a list of
          all functions that called each function in the profiled
          database.  The ordering is identical to that provided by *note
          print_stats(): 2348, and the definition of the restricting
          argument is also identical.  Each caller is reported on its
          own line.  The format differs slightly depending on the
          profiler that produced the stats:

             * With *note profile: 139, a number is shown in parentheses
               after each caller to show how many times this specific
               call was made.  For convenience, a second
               non-parenthesized number repeats the cumulative time
               spent in the function at the right.

             * With *note cProfile: 74, each caller is preceded by three
               numbers: the number of times this specific call was made,
               and the total and cumulative times spent in the current
               function while it was invoked by this specific caller.

      -- Method: print_callees (*restrictions)

          This method for the *note Stats: 2345. class prints a list of
          all function that were called by the indicated function.
          Aside from this reversal of direction of calls (re: called vs
          was called by), the arguments and ordering are identical to
          the *note print_callers(): 235a. method.


File: python.info,  Node: What Is Deterministic Profiling?,  Next: Limitations,  Prev: The Stats Class,  Up: The Python Profilers

5.26.4.5 What Is Deterministic Profiling?
.........................................

_Deterministic profiling_ is meant to reflect the fact that all
_function call_, _function return_, and _exception_ events are
monitored, and precise timings are made for the intervals between these
events (during which time the user’s code is executing).  In contrast,
_statistical profiling_ (which is not done by this module) randomly
samples the effective instruction pointer, and deduces where time is
being spent.  The latter technique traditionally involves less overhead
(as the code does not need to be instrumented), but provides only
relative indications of where time is being spent.

  In Python, since there is an interpreter active during execution, the
presence of instrumented code is not required to do deterministic
profiling.  Python automatically provides a _hook_ (optional callback)
for each event.  In addition, the interpreted nature of Python tends to
add so much overhead to execution, that deterministic profiling tends to
only add small processing overhead in typical applications.  The result
is that deterministic profiling is not that expensive, yet provides
extensive run time statistics about the execution of a Python program.

  Call count statistics can be used to identify bugs in code (surprising
counts), and to identify possible inline-expansion points (high call
counts).  Internal time statistics can be used to identify "hot loops"
that should be carefully optimized.  Cumulative time statistics should
be used to identify high level errors in the selection of algorithms.
Note that the unusual handling of cumulative times in this profiler
allows statistics for recursive implementations of algorithms to be
directly compared to iterative implementations.


File: python.info,  Node: Limitations,  Next: Calibration,  Prev: What Is Deterministic Profiling?,  Up: The Python Profilers

5.26.4.6 Limitations
....................

One limitation has to do with accuracy of timing information.  There is
a fundamental problem with deterministic profilers involving accuracy.
The most obvious restriction is that the underlying "clock" is only
ticking at a rate (typically) of about .001 seconds.  Hence no
measurements will be more accurate than the underlying clock.  If enough
measurements are taken, then the "error" will tend to average out.
Unfortunately, removing this first error induces a second source of
error.

  The second problem is that it "takes a while" from when an event is
dispatched until the profiler’s call to get the time actually _gets_ the
state of the clock.  Similarly, there is a certain lag when exiting the
profiler event handler from the time that the clock’s value was obtained
(and then squirreled away), until the user’s code is once again
executing.  As a result, functions that are called many times, or call
many functions, will typically accumulate this error.  The error that
accumulates in this fashion is typically less than the accuracy of the
clock (less than one clock tick), but it _can_ accumulate and become
very significant.

  The problem is more important with *note profile: 139. than with the
lower-overhead *note cProfile: 74.  For this reason, *note profile: 139.
provides a means of calibrating itself for a given platform so that this
error can be probabilistically (on the average) removed.  After the
profiler is calibrated, it will be more accurate (in a least square
sense), but it will sometimes produce negative numbers (when call counts
are exceptionally low, and the gods of probability work against you :-).
)  Do _not_ be alarmed by negative numbers in the profile.  They should
_only_ appear if you have calibrated your profiler, and the results are
actually better than without calibration.


File: python.info,  Node: Calibration,  Next: Using a custom timer,  Prev: Limitations,  Up: The Python Profilers

5.26.4.7 Calibration
....................

The profiler of the *note profile: 139. module subtracts a constant from
each event handling time to compensate for the overhead of calling the
time function, and socking away the results.  By default, the constant
is 0.  The following procedure can be used to obtain a better constant
for a given platform (see *note Limitations: 235e.).

     import profile
     pr = profile.Profile()
     for i in range(5):
         print pr.calibrate(10000)

  The method executes the number of Python calls given by the argument,
directly and again under the profiler, measuring the time for both.  It
then computes the hidden overhead per profiler event, and returns that
as a float.  For example, on a 1.8Ghz Intel Core i5 running Mac OS X,
and using Python’s time.clock() as the timer, the magical number is
about 4.04e-6.

  The object of this exercise is to get a fairly consistent result.  If
your computer is _very_ fast, or your timer function has poor
resolution, you might have to pass 100000, or even 1000000, to get
consistent results.

  When you have a consistent answer, there are three ways you can use
it: (1)

     import profile

     # 1. Apply computed bias to all Profile instances created hereafter.
     profile.Profile.bias = your_computed_bias

     # 2. Apply computed bias to a specific Profile instance.
     pr = profile.Profile()
     pr.bias = your_computed_bias

     # 3. Specify computed bias in instance constructor.
     pr = profile.Profile(bias=your_computed_bias)

  If you have a choice, you are better off choosing a smaller constant,
and then your results will "less often" show up as negative in profile
statistics.

   ---------- Footnotes ----------

   (1) Prior to Python 2.2, it was necessary to edit the profiler source
code to embed the bias as a literal number.  You still can, but that
method is no longer described, because no longer needed.


File: python.info,  Node: Using a custom timer,  Prev: Calibration,  Up: The Python Profilers

5.26.4.8 Using a custom timer
.............................

If you want to change how current time is determined (for example, to
force use of wall-clock time or elapsed process time), pass the timing
function you want to the ‘Profile’ class constructor:

     pr = profile.Profile(your_time_func)

  The resulting profiler will then call ‘your_time_func’.  Depending on
whether you are using *note profile.Profile: 234c. or
‘cProfile.Profile’, ‘your_time_func’’s return value will be interpreted
differently:

*note profile.Profile: 234c.

     ‘your_time_func’ should return a single number, or a list of
     numbers whose sum is the current time (like what *note os.times():
     118b. returns).  If the function returns a single time number, or
     the list of returned numbers has length 2, then you will get an
     especially fast version of the dispatch routine.

     Be warned that you should calibrate the profiler class for the
     timer function that you choose (see *note Calibration: 2361.).  For
     most machines, a timer that returns a lone integer value will
     provide the best results in terms of low overhead during profiling.
     (*note os.times(): 118b. is _pretty_ bad, as it returns a tuple of
     floating point values).  If you want to substitute a better timer
     in the cleanest fashion, derive a class and hardwire a replacement
     dispatch method that best handles your timer call, along with the
     appropriate calibration constant.

‘cProfile.Profile’

     ‘your_time_func’ should return a single number.  If it returns
     integers, you can also invoke the class constructor with a second
     argument specifying the real duration of one unit of time.  For
     example, if ‘your_integer_time_func’ returns times measured in
     thousands of seconds, you would construct the ‘Profile’ instance as
     follows:

          pr = cProfile.Profile(your_integer_time_func, 0.001)

     As the ‘cProfile.Profile’ class cannot be calibrated, custom timer
     functions should be used with care and should be as fast as
     possible.  For the best results with a custom timer, it might be
     necessary to hard-code it in the C source of the internal ‘_lsprof’
     module.


File: python.info,  Node: hotshot --- High performance logging profiler,  Next: timeit --- Measure execution time of small code snippets,  Prev: The Python Profilers,  Up: Debugging and Profiling

5.26.5 ‘hotshot’ — High performance logging profiler
----------------------------------------------------

New in version 2.2.

  This module provides a nicer interface to the ‘_hotshot’ C module.
Hotshot is a replacement for the existing *note profile: 139. module.
As it’s written mostly in C, it should result in a much smaller
performance impact than the existing *note profile: 139. module.

     Note: The *note hotshot: e9. module focuses on minimizing the
     overhead while profiling, at the expense of long data
     post-processing times.  For common usage it is recommended to use
     *note cProfile: 74. instead.  *note hotshot: e9. is not maintained
     and might be removed from the standard library in the future.

  Changed in version 2.5: The results should be more meaningful than in
the past: the timing core contained a critical bug.

     Note: The *note hotshot: e9. profiler does not yet work well with
     threads.  It is useful to use an unthreaded script to run the
     profiler over the code you’re interested in measuring if at all
     possible.

 -- Class: hotshot.Profile (logfile[, lineevents[, linetimings]])

     The profiler object.  The argument _logfile_ is the name of a log
     file to use for logged profile data.  The argument _lineevents_
     specifies whether to generate events for every source line, or just
     on function call/return.  It defaults to ‘0’ (only log function
     call/return).  The argument _linetimings_ specifies whether to
     record timing information.  It defaults to ‘1’ (store timing
     information).

* Menu:

* Profile Objects:: 
* Using hotshot data:: 
* Example Usage:: 


File: python.info,  Node: Profile Objects,  Next: Using hotshot data,  Up: hotshot --- High performance logging profiler

5.26.5.1 Profile Objects
........................

Profile objects have the following methods:

 -- Method: Profile.addinfo (key, value)

     Add an arbitrary labelled value to the profile output.

 -- Method: Profile.close ()

     Close the logfile and terminate the profiler.

 -- Method: Profile.fileno ()

     Return the file descriptor of the profiler’s log file.

 -- Method: Profile.run (cmd)

     Profile an *note exec: 404.-compatible string in the script
     environment.  The globals from the *note __main__: 2. module are
     used as both the globals and locals for the script.

 -- Method: Profile.runcall (func, *args, **keywords)

     Profile a single call of a callable.  Additional positional and
     keyword arguments may be passed along; the result of the call is
     returned, and exceptions are allowed to propagate cleanly, while
     ensuring that profiling is disabled on the way out.

 -- Method: Profile.runctx (cmd, globals, locals)

     Evaluate an *note exec: 404.-compatible string in a specific
     environment.  The string is compiled before profiling begins.

 -- Method: Profile.start ()

     Start the profiler.

 -- Method: Profile.stop ()

     Stop the profiler.


File: python.info,  Node: Using hotshot data,  Next: Example Usage,  Prev: Profile Objects,  Up: hotshot --- High performance logging profiler

5.26.5.2 Using hotshot data
...........................

New in version 2.2.

  This module loads hotshot profiling data into the standard *note
pstats: 13a. Stats objects.

 -- Function: hotshot.stats.load (filename)

     Load hotshot data from _filename_.  Returns an instance of the
     *note pstats.Stats: 2345. class.

See also
........

Module *note profile: 139.

     The *note profile: 139. module’s ‘Stats’ class


File: python.info,  Node: Example Usage,  Prev: Using hotshot data,  Up: hotshot --- High performance logging profiler

5.26.5.3 Example Usage
......................

Note that this example runs the Python "benchmark" pystones.  It can
take some time to run, and will produce large output files.

     >>> import hotshot, hotshot.stats, test.pystone
     >>> prof = hotshot.Profile("stones.prof")
     >>> benchtime, stones = prof.runcall(test.pystone.pystones)
     >>> prof.close()
     >>> stats = hotshot.stats.load("stones.prof")
     >>> stats.strip_dirs()
     >>> stats.sort_stats('time', 'calls')
     >>> stats.print_stats(20)
              850004 function calls in 10.090 CPU seconds

        Ordered by: internal time, call count

        ncalls  tottime  percall  cumtime  percall filename:lineno(function)
             1    3.295    3.295   10.090   10.090 pystone.py:79(Proc0)
        150000    1.315    0.000    1.315    0.000 pystone.py:203(Proc7)
         50000    1.313    0.000    1.463    0.000 pystone.py:229(Func2)
      .
      .
      .


File: python.info,  Node: timeit --- Measure execution time of small code snippets,  Next: trace --- Trace or track Python statement execution,  Prev: hotshot --- High performance logging profiler,  Up: Debugging and Profiling

5.26.6 ‘timeit’ — Measure execution time of small code snippets
---------------------------------------------------------------

New in version 2.3.

  *Source code:* Lib/timeit.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides a simple way to time small bits of Python code.
It has both a *note Command-Line Interface: 2377. as well as a *note
callable: 2378. one.  It avoids a number of common traps for measuring
execution times.  See also Tim Peters’ introduction to the "Algorithms"
chapter in the _Python Cookbook_, published by O’Reilly.

* Menu:

* Basic Examples: Basic Examples<2>. 
* Python Interface:: 
* Command-Line Interface: Command-Line Interface<2>. 
* Examples: Examples<17>. 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/timeit.py


File: python.info,  Node: Basic Examples<2>,  Next: Python Interface,  Up: timeit --- Measure execution time of small code snippets

5.26.6.1 Basic Examples
.......................

The following example shows how the *note Command-Line Interface: 2377.
can be used to compare three different expressions:

     $ python -m timeit '"-".join(str(n) for n in range(100))'
     10000 loops, best of 3: 40.3 usec per loop
     $ python -m timeit '"-".join([str(n) for n in range(100)])'
     10000 loops, best of 3: 33.4 usec per loop
     $ python -m timeit '"-".join(map(str, range(100)))'
     10000 loops, best of 3: 25.2 usec per loop

  This can be achieved from the *note Python Interface: 2378. with:

     >>> import timeit
     >>> timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)
     0.8187260627746582
     >>> timeit.timeit('"-".join([str(n) for n in range(100)])', number=10000)
     0.7288308143615723
     >>> timeit.timeit('"-".join(map(str, range(100)))', number=10000)
     0.5858950614929199

  Note however that *note timeit: 17b. will automatically determine the
number of repetitions only when the command-line interface is used.  In
the *note Examples: 237a. section you can find more advanced examples.


File: python.info,  Node: Python Interface,  Next: Command-Line Interface<2>,  Prev: Basic Examples<2>,  Up: timeit --- Measure execution time of small code snippets

5.26.6.2 Python Interface
.........................

The module defines three convenience functions and a public class:

 -- Function: timeit.timeit (stmt='pass', setup='pass', timer=<default
          timer>, number=1000000)

     Create a *note Timer: 237d. instance with the given statement,
     _setup_ code and _timer_ function and run its *note timeit(): 237e.
     method with _number_ executions.

     New in version 2.6.

 -- Function: timeit.repeat (stmt='pass', setup='pass', timer=<default
          timer>, repeat=3, number=1000000)

     Create a *note Timer: 237d. instance with the given statement,
     _setup_ code and _timer_ function and run its *note repeat(): 2380.
     method with the given _repeat_ count and _number_ executions.

     New in version 2.6.

 -- Function: timeit.default_timer ()

     Define a default timer, in a platform-specific manner.  On Windows,
     *note time.clock(): 11f6. has microsecond granularity, but *note
     time.time(): 461.’s granularity is 1/60th of a second.  On Unix,
     *note time.clock(): 11f6. has 1/100th of a second granularity, and
     *note time.time(): 461. is much more precise.  On either platform,
     *note default_timer(): 2381. measures wall clock time, not the CPU
     time.  This means that other processes running on the same computer
     may interfere with the timing.

 -- Class: timeit.Timer (stmt='pass', setup='pass', timer=<timer
          function>)

     Class for timing execution speed of small code snippets.

     The constructor takes a statement to be timed, an additional
     statement used for setup, and a timer function.  Both statements
     default to ‘'pass'’; the timer function is platform-dependent (see
     the module doc string).  _stmt_ and _setup_ may also contain
     multiple statements separated by ‘;’ or newlines, as long as they
     don’t contain multi-line string literals.

     To measure the execution time of the first statement, use the *note
     timeit(): 237e. method.  The *note repeat(): 2380. method is a
     convenience to call *note timeit(): 237e. multiple times and return
     a list of results.

     Changed in version 2.6: The _stmt_ and _setup_ parameters can now
     also take objects that are callable without arguments.  This will
     embed calls to them in a timer function that will then be executed
     by *note timeit(): 237e.  Note that the timing overhead is a little
     larger in this case because of the extra function calls.

      -- Method: timeit (number=1000000)

          Time _number_ executions of the main statement.  This executes
          the setup statement once, and then returns the time it takes
          to execute the main statement a number of times, measured in
          seconds as a float.  The argument is the number of times
          through the loop, defaulting to one million.  The main
          statement, the setup statement and the timer function to be
          used are passed to the constructor.

               Note: By default, *note timeit(): 237e. temporarily turns
               off *note garbage collection: 60e. during the timing.
               The advantage of this approach is that it makes
               independent timings more comparable.  This disadvantage
               is that GC may be an important component of the
               performance of the function being measured.  If so, GC
               can be re-enabled as the first statement in the _setup_
               string.  For example:

                    timeit.Timer('for i in xrange(10): oct(i)', 'gc.enable()').timeit()

      -- Method: repeat (repeat=3, number=1000000)

          Call *note timeit(): 237e. a few times.

          This is a convenience function that calls the *note timeit():
          237e. repeatedly, returning a list of results.  The first
          argument specifies how many times to call *note timeit():
          237e.  The second argument specifies the _number_ argument for
          *note timeit(): 237e.

               Note: It’s tempting to calculate mean and standard
               deviation from the result vector and report these.
               However, this is not very useful.  In a typical case, the
               lowest value gives a lower bound for how fast your
               machine can run the given code snippet; higher values in
               the result vector are typically not caused by variability
               in Python’s speed, but by other processes interfering
               with your timing accuracy.  So the *note min(): 224. of
               the result is probably the only number you should be
               interested in.  After that, you should look at the entire
               vector and apply common sense rather than statistics.

      -- Method: print_exc (file=None)

          Helper to print a traceback from the timed code.

          Typical use:

               t = Timer(...)       # outside the try/except
               try:
                   t.timeit(...)    # or t.repeat(...)
               except:
                   t.print_exc()

          The advantage over the standard traceback is that source lines
          in the compiled template will be displayed.  The optional
          _file_ argument directs where the traceback is sent; it
          defaults to *note sys.stderr: 647.


File: python.info,  Node: Command-Line Interface<2>,  Next: Examples<17>,  Prev: Python Interface,  Up: timeit --- Measure execution time of small code snippets

5.26.6.3 Command-Line Interface
...............................

When called as a program from the command line, the following form is
used:

     python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [statement ...]

  Where the following options are understood:

 -- Program Option: -n N, --number=N

     how many times to execute ’statement’

 -- Program Option: -r N, --repeat=N

     how many times to repeat the timer (default 3)

 -- Program Option: -s S, --setup=S

     statement to be executed once initially (default ‘pass’)

 -- Program Option: -t, --time

     use *note time.time(): 461. (default on all platforms but Windows)

 -- Program Option: -c, --clock

     use *note time.clock(): 11f6. (default on Windows)

 -- Program Option: -v, --verbose

     print raw timing results; repeat for more digits precision

 -- Program Option: -h, --help

     print a short usage message and exit

  A multi-line statement may be given by specifying each line as a
separate statement argument; indented lines are possible by enclosing an
argument in quotes and using leading spaces.  Multiple *note -s: 2386.
options are treated similarly.

  If *note -n: 2384. is not given, a suitable number of loops is
calculated by trying successive powers of 10 until the total time is at
least 0.2 seconds.

  *note default_timer(): 2381. measurations can be affected by other
programs running on the same machine, so the best thing to do when
accurate timing is necessary is to repeat the timing a few times and use
the best time.  The *note -r: 2385. option is good for this; the default
of 3 repetitions is probably enough in most cases.  On Unix, you can use
*note time.clock(): 11f6. to measure CPU time.

     Note: There is a certain baseline overhead associated with
     executing a pass statement.  The code here doesn’t try to hide it,
     but you should be aware of it.  The baseline overhead can be
     measured by invoking the program without arguments, and it might
     differ between Python versions.  Also, to fairly compare older
     Python versions to Python 2.3, you may want to use Python’s ‘-O’
     option for the older versions to avoid timing ‘SET_LINENO’
     instructions.


File: python.info,  Node: Examples<17>,  Prev: Command-Line Interface<2>,  Up: timeit --- Measure execution time of small code snippets

5.26.6.4 Examples
.................

It is possible to provide a setup statement that is executed only once
at the beginning:

     $ python -m timeit -s 'text = "sample string"; char = "g"'  'char in text'
     10000000 loops, best of 3: 0.0877 usec per loop
     $ python -m timeit -s 'text = "sample string"; char = "g"'  'text.find(char)'
     1000000 loops, best of 3: 0.342 usec per loop

     >>> import timeit
     >>> timeit.timeit('char in text', setup='text = "sample string"; char = "g"')
     0.41440500499993504
     >>> timeit.timeit('text.find(char)', setup='text = "sample string"; char = "g"')
     1.7246671520006203

  The same can be done using the *note Timer: 237d. class and its
methods:

     >>> import timeit
     >>> t = timeit.Timer('char in text', setup='text = "sample string"; char = "g"')
     >>> t.timeit()
     0.3955516149999312
     >>> t.repeat()
     [0.40193588800002544, 0.3960157959998014, 0.39594301399984033]

  The following examples show how to time expressions that contain
multiple lines.  Here we compare the cost of using *note hasattr(): 330.
vs.  *note try: 395./*note except: 397. to test for missing and present
object attributes:

     $ python -m timeit 'try:' '  str.__nonzero__' 'except AttributeError:' '  pass'
     100000 loops, best of 3: 15.7 usec per loop
     $ python -m timeit 'if hasattr(str, "__nonzero__"): pass'
     100000 loops, best of 3: 4.26 usec per loop

     $ python -m timeit 'try:' '  int.__nonzero__' 'except AttributeError:' '  pass'
     1000000 loops, best of 3: 1.43 usec per loop
     $ python -m timeit 'if hasattr(int, "__nonzero__"): pass'
     100000 loops, best of 3: 2.23 usec per loop

     >>> import timeit
     >>> # attribute is missing
     >>> s = """\
     ... try:
     ...     str.__nonzero__
     ... except AttributeError:
     ...     pass
     ... """
     >>> timeit.timeit(stmt=s, number=100000)
     0.9138244460009446
     >>> s = "if hasattr(str, '__bool__'): pass"
     >>> timeit.timeit(stmt=s, number=100000)
     0.5829014980008651
     >>>
     >>> # attribute is present
     >>> s = """\
     ... try:
     ...     int.__nonzero__
     ... except AttributeError:
     ...     pass
     ... """
     >>> timeit.timeit(stmt=s, number=100000)
     0.04215312199994514
     >>> s = "if hasattr(int, '__bool__'): pass"
     >>> timeit.timeit(stmt=s, number=100000)
     0.08588060699912603

  To give the *note timeit: 17b. module access to functions you define,
you can pass a _setup_ parameter which contains an import statement:

     def test():
         """Stupid test function"""
         L = []
         for i in range(100):
             L.append(i)

     if __name__ == '__main__':
         import timeit
         print(timeit.timeit("test()", setup="from __main__ import test"))


File: python.info,  Node: trace --- Trace or track Python statement execution,  Prev: timeit --- Measure execution time of small code snippets,  Up: Debugging and Profiling

5.26.7 ‘trace’ — Trace or track Python statement execution
----------------------------------------------------------

*Source code:* Lib/trace.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note trace: 180. module allows you to trace program execution,
generate annotated statement coverage listings, print caller/callee
relationships and list functions executed during a program run.  It can
be used in another program or from the command line.

* Menu:

* Command-Line Usage:: 
* Programmatic Interface:: 

Command-Line Usage

* Main options:: 
* Modifiers:: 
* Filters:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/trace.py


File: python.info,  Node: Command-Line Usage,  Next: Programmatic Interface,  Up: trace --- Trace or track Python statement execution

5.26.7.1 Command-Line Usage
...........................

The *note trace: 180. module can be invoked from the command line.  It
can be as simple as

     python -m trace --count -C . somefile.py ...

  The above will execute ‘somefile.py’ and generate annotated listings
of all Python modules imported during the execution into the current
directory.

 -- Program Option: --help

     Display usage and exit.

 -- Program Option: --version

     Display the version of the module and exit.

* Menu:

* Main options:: 
* Modifiers:: 
* Filters:: 


File: python.info,  Node: Main options,  Next: Modifiers,  Up: Command-Line Usage

5.26.7.2 Main options
.....................

At least one of the following options must be specified when invoking
*note trace: 180.  The *note –listfuncs: 2393. option is mutually
exclusive with the *note –trace: 2394. and *note –count: 2395. options.
When *note –listfuncs: 2393. is provided, neither *note –count: 2395.
nor *note –trace: 2394. are accepted, and vice versa.

 -- Program Option: -c, --count

     Produce a set of annotated listing files upon program completion
     that shows how many times each statement was executed.  See also
     *note –coverdir: 2396, *note –file: 2397. and *note –no-report:
     2398. below.

 -- Program Option: -t, --trace

     Display lines as they are executed.

 -- Program Option: -l, --listfuncs

     Display the functions executed by running the program.

 -- Program Option: -r, --report

     Produce an annotated list from an earlier program run that used the
     *note –count: 2395. and *note –file: 2397. option.  This does not
     execute any code.

 -- Program Option: -T, --trackcalls

     Display the calling relationships exposed by running the program.


File: python.info,  Node: Modifiers,  Next: Filters,  Prev: Main options,  Up: Command-Line Usage

5.26.7.3 Modifiers
..................

 -- Program Option: -f, --file=<file>

     Name of a file to accumulate counts over several tracing runs.
     Should be used with the *note –count: 2395. option.

 -- Program Option: -C, --coverdir=<dir>

     Directory where the report files go.  The coverage report for
     ‘package.module’ is written to file
     ‘_dir_/_package_/_module_.cover’.

 -- Program Option: -m, --missing

     When generating annotated listings, mark lines which were not
     executed with ‘>>>>>>’.

 -- Program Option: -s, --summary

     When using *note –count: 2395. or *note –report: 2399, write a
     brief summary to stdout for each file processed.

 -- Program Option: -R, --no-report

     Do not generate annotated listings.  This is useful if you intend
     to make several runs with *note –count: 2395, and then produce a
     single set of annotated listings at the end.

 -- Program Option: -g, --timing

     Prefix each line with the time since the program started.  Only
     used while tracing.


File: python.info,  Node: Filters,  Prev: Modifiers,  Up: Command-Line Usage

5.26.7.4 Filters
................

These options may be repeated multiple times.

 -- Program Option: --ignore-module=<mod>

     Ignore each of the given module names and its submodules (if it is
     a package).  The argument can be a list of names separated by a
     comma.

 -- Program Option: --ignore-dir=<dir>

     Ignore all modules and packages in the named directory and
     subdirectories.  The argument can be a list of directories
     separated by *note os.pathsep: 64d.


File: python.info,  Node: Programmatic Interface,  Prev: Command-Line Usage,  Up: trace --- Trace or track Python statement execution

5.26.7.5 Programmatic Interface
...............................

 -- Class: trace.Trace ([count=1[, trace=1[, countfuncs=0[,
          countcallers=0[, ignoremods=()[, ignoredirs=()[, infile=None[,
          outfile=None[, timing=False]]]]]]]]])

     Create an object to trace execution of a single statement or
     expression.  All parameters are optional.  _count_ enables counting
     of line numbers.  _trace_ enables line execution tracing.
     _countfuncs_ enables listing of the functions called during the
     run.  _countcallers_ enables call relationship tracking.
     _ignoremods_ is a list of modules or packages to ignore.
     _ignoredirs_ is a list of directories whose modules or packages
     should be ignored.  _infile_ is the name of the file from which to
     read stored count information.  _outfile_ is the name of the file
     in which to write updated count information.  _timing_ enables a
     timestamp relative to when tracing was started to be displayed.

           -- Method: run (cmd)

               Execute the command and gather statistics from the
               execution with the current tracing parameters.  _cmd_
               must be a string or code object, suitable for passing
               into ‘exec()’.

           -- Method: runctx (cmd, globals=None, locals=None)

               Execute the command and gather statistics from the
               execution with the current tracing parameters, in the
               defined global and local environments.  If not defined,
               _globals_ and _locals_ default to empty dictionaries.

           -- Method: runfunc (func, *args, **kwds)

               Call _func_ with the given arguments under control of the
               *note Trace: 23a4. object with the current tracing
               parameters.

           -- Method: results ()

               Return a *note CoverageResults: 23a9. object that
               contains the cumulative results of all previous calls to
               ‘run’, ‘runctx’ and ‘runfunc’ for the given *note Trace:
               23a4. instance.  Does not reset the accumulated trace
               results.

 -- Class: trace.CoverageResults

     A container for coverage results, created by *note Trace.results():
     23a8.  Should not be created directly by the user.

           -- Method: update (other)

               Merge in data from another *note CoverageResults: 23a9.
               object.

           -- Method: write_results ([show_missing=True[,
                    summary=False[, coverdir=None]]])

               Write coverage results.  Set _show_missing_ to show lines
               that had no hits.  Set _summary_ to include in the output
               the coverage summary per module.  _coverdir_ specifies
               the directory into which the coverage result files will
               be output.  If ‘None’, the results for each source file
               are placed in its directory.

  A simple example demonstrating the use of the programmatic interface:

     import sys
     import trace

     # create a Trace object, telling it what to ignore, and whether to
     # do tracing or line-counting or both.
     tracer = trace.Trace(
         ignoredirs=[sys.prefix, sys.exec_prefix],
         trace=0,
         count=1)

     # run the new command using the given tracer
     tracer.run('main()')

     # make a report, placing output in the current directory
     r = tracer.results()
     r.write_results(show_missing=True, coverdir=".")


File: python.info,  Node: Python Runtime Services,  Next: Custom Python Interpreters,  Prev: Debugging and Profiling,  Up: The Python Standard Library

5.27 Python Runtime Services
============================

The modules described in this chapter provide a wide range of services
related to the Python interpreter and its interaction with its
environment.  Here’s an overview:

* Menu:

* sys: sys --- System-specific parameters and functions. System-specific parameters and functions
* sysconfig: sysconfig --- Provide access to Python's configuration information. Provide access to Python’s configuration information
* __builtin__: __builtin__ --- Built-in objects. Built-in objects
* future_builtins: future_builtins --- Python 3 builtins. Python 3 builtins
* __main__: __main__ --- Top-level script environment. Top-level script environment
* warnings: warnings --- Warning control. Warning control
* contextlib: contextlib --- Utilities for with-statement contexts. Utilities for with-statement contexts
* abc: abc --- Abstract Base Classes. Abstract Base Classes
* atexit: atexit --- Exit handlers. Exit handlers
* traceback: traceback --- Print or retrieve a stack traceback. Print or retrieve a stack traceback
* __future__: __future__ --- Future statement definitions. Future statement definitions
* gc: gc --- Garbage Collector interface. Garbage Collector interface
* inspect: inspect --- Inspect live objects. Inspect live objects
* site: site --- Site-specific configuration hook. Site-specific configuration hook
* user: user --- User-specific configuration hook. User-specific configuration hook
* fpectl: fpectl --- Floating point exception control. Floating point exception control
* distutils: distutils --- Building and installing Python modules. Building and installing Python modules


File: python.info,  Node: sys --- System-specific parameters and functions,  Next: sysconfig --- Provide access to Python's configuration information,  Up: Python Runtime Services

5.27.1 ‘sys’ — System-specific parameters and functions
-------------------------------------------------------

This module provides access to some variables used or maintained by the
interpreter and to functions that interact strongly with the
interpreter.  It is always available.

 -- Data: sys.argv

     The list of command line arguments passed to a Python script.
     ‘argv[0]’ is the script name (it is operating system dependent
     whether this is a full pathname or not).  If the command was
     executed using the *note -c: 27b. command line option to the
     interpreter, ‘argv[0]’ is set to the string ‘'-c'’.  If no script
     name was passed to the Python interpreter, ‘argv[0]’ is the empty
     string.

     To loop over the standard input, or the list of files given on the
     command line, see the *note fileinput: cc. module.

 -- Data: sys.byteorder

     An indicator of the native byte order.  This will have the value
     ‘'big'’ on big-endian (most-significant byte first) platforms, and
     ‘'little'’ on little-endian (least-significant byte first)
     platforms.

     New in version 2.0.

 -- Data: sys.builtin_module_names

     A tuple of strings giving the names of all modules that are
     compiled into this Python interpreter.  (This information is not
     available in any other way — ‘modules.keys()’ only lists the
     imported modules.)

 -- Function: sys.call_tracing (func, args)

     Call ‘func(*args)’, while tracing is enabled.  The tracing state is
     saved, and restored afterwards.  This is intended to be called from
     a debugger from a checkpoint, to recursively debug some other code.

 -- Data: sys.copyright

     A string containing the copyright pertaining to the Python
     interpreter.

 -- Function: sys._clear_type_cache ()

     Clear the internal type cache.  The type cache is used to speed up
     attribute and method lookups.  Use the function _only_ to drop
     unnecessary references during reference leak debugging.

     This function should be used for internal and specialized purposes
     only.

     New in version 2.6.

 -- Function: sys._current_frames ()

     Return a dictionary mapping each thread’s identifier to the topmost
     stack frame currently active in that thread at the time the
     function is called.  Note that functions in the *note traceback:
     181. module can build the call stack given such a frame.

     This is most useful for debugging deadlock: this function does not
     require the deadlocked threads’ cooperation, and such threads’ call
     stacks are frozen for as long as they remain deadlocked.  The frame
     returned for a non-deadlocked thread may bear no relationship to
     that thread’s current activity by the time calling code examines
     the frame.

     This function should be used for internal and specialized purposes
     only.

     New in version 2.5.

 -- Data: sys.dllhandle

     Integer specifying the handle of the Python DLL. Availability:
     Windows.

 -- Function: sys.displayhook (value)

     If _value_ is not ‘None’, this function prints it to ‘sys.stdout’,
     and saves it in ‘__builtin__._’.

     ‘sys.displayhook’ is called on the result of evaluating an *note
     expression: 23b6. entered in an interactive Python session.  The
     display of these values can be customized by assigning another
     one-argument function to ‘sys.displayhook’.

 -- Data: sys.dont_write_bytecode

     If this is true, Python won’t try to write ‘.pyc’ or ‘.pyo’ files
     on the import of source modules.  This value is initially set to
     ‘True’ or ‘False’ depending on the *note -B: 343. command line
     option and the *note PYTHONDONTWRITEBYTECODE: 344. environment
     variable, but you can set it yourself to control bytecode file
     generation.

     New in version 2.6.

 -- Function: sys.excepthook (type, value, traceback)

     This function prints out a given traceback and exception to
     ‘sys.stderr’.

     When an exception is raised and uncaught, the interpreter calls
     ‘sys.excepthook’ with three arguments, the exception class,
     exception instance, and a traceback object.  In an interactive
     session this happens just before control is returned to the prompt;
     in a Python program this happens just before the program exits.
     The handling of such top-level exceptions can be customized by
     assigning another three-argument function to ‘sys.excepthook’.

 -- Data: sys.__displayhook__
 -- Data: sys.__excepthook__

     These objects contain the original values of ‘displayhook’ and
     ‘excepthook’ at the start of the program.  They are saved so that
     ‘displayhook’ and ‘excepthook’ can be restored in case they happen
     to get replaced with broken objects.

 -- Function: sys.exc_info ()

     This function returns a tuple of three values that give information
     about the exception that is currently being handled.  The
     information returned is specific both to the current thread and to
     the current stack frame.  If the current stack frame is not
     handling an exception, the information is taken from the calling
     stack frame, or its caller, and so on until a stack frame is found
     that is handling an exception.  Here, "handling an exception" is
     defined as "executing or having executed an except clause."  For
     any stack frame, only information about the most recently handled
     exception is accessible.

     If no exception is being handled anywhere on the stack, a tuple
     containing three ‘None’ values is returned.  Otherwise, the values
     returned are ‘(type, value, traceback)’.  Their meaning is: _type_
     gets the exception type of the exception being handled (a class
     object); _value_ gets the exception parameter (its _associated
     value_ or the second argument to *note raise: 5b1, which is always
     a class instance if the exception type is a class object);
     _traceback_ gets a traceback object (see the Reference Manual)
     which encapsulates the call stack at the point where the exception
     originally occurred.

     If *note exc_clear(): 464. is called, this function will return
     three ‘None’ values until either another exception is raised in the
     current thread or the execution stack returns to a frame where
     another exception is being handled.

          Warning: Assigning the _traceback_ return value to a local
          variable in a function that is handling an exception will
          cause a circular reference.  This will prevent anything
          referenced by a local variable in the same function or by the
          traceback from being garbage collected.  Since most functions
          don’t need access to the traceback, the best solution is to
          use something like ‘exctype, value = sys.exc_info()[:2]’ to
          extract only the exception type and value.  If you do need the
          traceback, make sure to delete it after use (best done with a
          *note try: 395. ...  *note finally: 396. statement) or to call
          *note exc_info(): 2f3. in a function that does not itself
          handle an exception.

          Note: Beginning with Python 2.2, such cycles are automatically
          reclaimed when garbage collection is enabled and they become
          unreachable, but it remains more efficient to avoid creating
          cycles.

 -- Function: sys.exc_clear ()

     This function clears all information relating to the current or
     last exception that occurred in the current thread.  After calling
     this function, *note exc_info(): 2f3. will return three ‘None’
     values until another exception is raised in the current thread or
     the execution stack returns to a frame where another exception is
     being handled.

     This function is only needed in only a few obscure situations.
     These include logging and error handling systems that report
     information on the last or current exception.  This function can
     also be used to try to free resources and trigger object
     finalization, though no guarantee is made as to what objects will
     be freed, if any.

     New in version 2.3.

 -- Data: sys.exc_type
 -- Data: sys.exc_value
 -- Data: sys.exc_traceback

     Deprecated since version 1.5: Use *note exc_info(): 2f3. instead.

     Since they are global variables, they are not specific to the
     current thread, so their use is not safe in a multi-threaded
     program.  When no exception is being handled, ‘exc_type’ is set to
     ‘None’ and the other two are undefined.

 -- Data: sys.exec_prefix

     A string giving the site-specific directory prefix where the
     platform-dependent Python files are installed; by default, this is
     also ‘'/usr/local'’.  This can be set at build time with the
     ‘--exec-prefix’ argument to the *configure* script.  Specifically,
     all configuration files (e.g.  the ‘pyconfig.h’ header file) are
     installed in the directory ‘_exec_prefix_/lib/python_X.Y_/config’,
     and shared library modules are installed in
     ‘_exec_prefix_/lib/python_X.Y_/lib-dynload’, where _X.Y_ is the
     version number of Python, for example ‘2.7’.

 -- Data: sys.executable

     A string giving the absolute path of the executable binary for the
     Python interpreter, on systems where this makes sense.  If Python
     is unable to retrieve the real path to its executable, *note
     sys.executable: 1650. will be an empty string or ‘None’.

 -- Function: sys.exit ([arg])

     Exit from Python.  This is implemented by raising the *note
     SystemExit: 332. exception, so cleanup actions specified by finally
     clauses of *note try: 395. statements are honored, and it is
     possible to intercept the exit attempt at an outer level.

     The optional argument _arg_ can be an integer giving the exit
     status (defaulting to zero), or another type of object.  If it is
     an integer, zero is considered "successful termination" and any
     nonzero value is considered "abnormal termination" by shells and
     the like.  Most systems require it to be in the range 0-127, and
     produce undefined results otherwise.  Some systems have a
     convention for assigning specific meanings to specific exit codes,
     but these are generally underdeveloped; Unix programs generally use
     2 for command line syntax errors and 1 for all other kind of
     errors.  If another type of object is passed, ‘None’ is equivalent
     to passing zero, and any other object is printed to *note stderr:
     647. and results in an exit code of 1.  In particular,
     ‘sys.exit("some error message")’ is a quick way to exit a program
     when an error occurs.

     Since *note exit(): 89c. ultimately "only" raises an exception, it
     will only exit the process when called from the main thread, and
     the exception is not intercepted.

 -- Data: sys.exitfunc

     This value is not actually defined by the module, but can be set by
     the user (or by a program) to specify a clean-up action at program
     exit.  When set, it should be a parameterless function.  This
     function will be called when the interpreter exits.  Only one
     function may be installed in this way; to allow multiple functions
     which will be called at termination, use the *note atexit: 12.
     module.

          Note: The exit function is not called when the program is
          killed by a signal, when a Python fatal internal error is
          detected, or when ‘os._exit()’ is called.

     Deprecated since version 2.4: Use *note atexit: 12. instead.

 -- Data: sys.flags

     The struct sequence _flags_ exposes the status of command line
     flags.  The attributes are read only.

     attribute                         flag
                                       
     --------------------------------------------------------------------------
                                       
     ‘debug’                           *note -d: 63a.
                                       
                                       
     ‘py3k_warning’                    *note -3: 1ca.
                                       
                                       
     ‘division_warning’                *note -Q: 1cb.
                                       
                                       
     ‘division_new’                    *note -Qnew: 1cb.
                                       
                                       
     *note inspect: f8.                *note -i: 476.
                                       
                                       
     ‘interactive’                     *note -i: 476.
                                       
                                       
     ‘optimize’                        *note -O: 453. or *note -OO: 584.
                                       
                                       
     *note dont_write_bytecode:        *note -B: 343.
     23b7.                             

     ‘no_user_site’                    *note -s: 2ff.
                                       
                                       
     ‘no_site’                         *note -S: 641.
                                       
                                       
     ‘ignore_environment’              *note -E: 63c.
                                       
                                       
     ‘tabcheck’                        *note -t: 3d0. or *note -tt: 3d0.
                                       
                                       
     ‘verbose’                         *note -v: 3b3.
                                       
                                       
     *note unicode: 1f5.               *note -U: 64a.
                                       
                                       
     ‘bytes_warning’                   ‘-b’
                                       
                                       
     ‘hash_randomization’              *note -R: 2d7.
                                       

     New in version 2.6.

     New in version 2.7.3: The ‘hash_randomization’ attribute.

 -- Data: sys.float_info

     A structseq holding information about the float type.  It contains
     low level information about the precision and internal
     representation.  The values correspond to the various
     floating-point constants defined in the standard header file
     ‘float.h’ for the ’C’ programming language; see section 5.2.4.2.2
     of the 1999 ISO/IEC C standard *note [C99]: 23bc, ’Characteristics
     of floating types’, for details.

     attribute                 float.h macro        explanation
                                                    
     ------------------------------------------------------------------------------------------------------
                                                    
     ‘epsilon’                 DBL_EPSILON          difference between 1 and the least value greater
                                                    than 1 that is representable as a float
                                                    
                                                    
     ‘dig’                     DBL_DIG              maximum number of decimal digits that can be
                                                    faithfully represented in a float; see below
                                                    
                                                    
     ‘mant_dig’                DBL_MANT_DIG         float precision: the number of base-‘radix’ digits
                                                    in the significand of a float
                                                    
                                                    
     *note max: 225.           DBL_MAX              maximum representable finite float
                                                    
                                                    
     ‘max_exp’                 DBL_MAX_EXP          maximum integer e such that ‘radix**(e-1)’ is a
                                                    representable finite float
                                                    
                                                    
     ‘max_10_exp’              DBL_MAX_10_EXP       maximum integer e such that ‘10**e’ is in the range
                                                    of representable finite floats
                                                    
                                                    
     *note min: 224.           DBL_MIN              minimum positive normalized float
                                                    
                                                    
     ‘min_exp’                 DBL_MIN_EXP          minimum integer e such that ‘radix**(e-1)’ is a
                                                    normalized float
                                                    
                                                    
     ‘min_10_exp’              DBL_MIN_10_EXP       minimum integer e such that ‘10**e’ is a normalized
                                                    float
                                                    
                                                    
     ‘radix’                   FLT_RADIX            radix of exponent representation
                                                    
                                                    
     ‘rounds’                  FLT_ROUNDS           integer constant representing the rounding mode used
                                                    for arithmetic operations.  This reflects the value
                                                    of the system FLT_ROUNDS macro at interpreter
                                                    startup time.  See section 5.2.4.2.2 of the C99
                                                    standard for an explanation of the possible values
                                                    and their meanings.
                                                    

     The attribute ‘sys.float_info.dig’ needs further explanation.  If
     ‘s’ is any string representing a decimal number with at most
     ‘sys.float_info.dig’ significant digits, then converting ‘s’ to a
     float and back again will recover a string representing the same
     decimal value:

          >>> import sys
          >>> sys.float_info.dig
          15
          >>> s = '3.14159265358979'    # decimal string with 15 significant digits
          >>> format(float(s), '.15g')  # convert to float and back -> same value
          '3.14159265358979'

     But for strings with more than ‘sys.float_info.dig’ significant
     digits, this isn’t always true:

          >>> s = '9876543211234567'    # 16 significant digits is too many!
          >>> format(float(s), '.16g')  # conversion changes value
          '9876543211234568'

     New in version 2.6.

 -- Data: sys.float_repr_style

     A string indicating how the *note repr(): 145. function behaves for
     floats.  If the string has value ‘'short'’ then for a finite float
     ‘x’, ‘repr(x)’ aims to produce a short string with the property
     that ‘float(repr(x)) == x’.  This is the usual behaviour in Python
     2.7 and later.  Otherwise, ‘float_repr_style’ has value ‘'legacy'’
     and ‘repr(x)’ behaves in the same way as it did in versions of
     Python prior to 2.7.

     New in version 2.7.

 -- Function: sys.getcheckinterval ()

     Return the interpreter’s "check interval"; see *note
     setcheckinterval(): 23bd.

     New in version 2.3.

 -- Function: sys.getdefaultencoding ()

     Return the name of the current default string encoding used by the
     Unicode implementation.

     New in version 2.0.

 -- Function: sys.getdlopenflags ()

     Return the current value of the flags that are used for ‘dlopen()’
     calls.  The flag constants are defined in the *note dl: b4. and
     ‘DLFCN’ modules.  Availability: Unix.

     New in version 2.2.

 -- Function: sys.getfilesystemencoding ()

     Return the name of the encoding used to convert Unicode filenames
     into system file names, or ‘None’ if the system default encoding is
     used.  The result value depends on the operating system:

        * On Mac OS X, the encoding is ‘'utf-8'’.

        * On Unix, the encoding is the user’s preference according to
          the result of nl_langinfo(CODESET), or ‘None’ if the
          ‘nl_langinfo(CODESET)’ failed.

        * On Windows NT+, file names are Unicode natively, so no
          conversion is performed.  *note getfilesystemencoding(): fe6.
          still returns ‘'mbcs'’, as this is the encoding that
          applications should use when they explicitly want to convert
          Unicode strings to byte strings that are equivalent when used
          as file names.

        * On Windows 9x, the encoding is ‘'mbcs'’.

     New in version 2.3.

 -- Function: sys.getrefcount (object)

     Return the reference count of the _object_.  The count returned is
     generally one higher than you might expect, because it includes the
     (temporary) reference as an argument to *note getrefcount(): 23be.

 -- Function: sys.getrecursionlimit ()

     Return the current value of the recursion limit, the maximum depth
     of the Python interpreter stack.  This limit prevents infinite
     recursion from causing an overflow of the C stack and crashing
     Python.  It can be set by *note setrecursionlimit(): 4e7.

 -- Function: sys.getsizeof (object[, default])

     Return the size of an object in bytes.  The object can be any type
     of object.  All built-in objects will return correct results, but
     this does not have to hold true for third-party extensions as it is
     implementation specific.

     If given, _default_ will be returned if the object does not provide
     means to retrieve the size.  Otherwise a *note TypeError: 218. will
     be raised.

     *note getsizeof(): 23bf. calls the object’s ‘__sizeof__’ method and
     adds an additional garbage collector overhead if the object is
     managed by the garbage collector.

     New in version 2.6.

 -- Function: sys._getframe ([depth])

     Return a frame object from the call stack.  If optional integer
     _depth_ is given, return the frame object that many calls below the
     top of the stack.  If that is deeper than the call stack, *note
     ValueError: 236. is raised.  The default for _depth_ is zero,
     returning the frame at the top of the call stack.

     *CPython implementation detail:* This function should be used for
     internal and specialized purposes only.  It is not guaranteed to
     exist in all implementations of Python.

 -- Function: sys.getprofile ()

     Get the profiler function as set by *note setprofile(): 49f.

     New in version 2.6.

 -- Function: sys.gettrace ()

     Get the trace function as set by *note settrace(): 4a0.

     *CPython implementation detail:* The *note gettrace(): 358.
     function is intended only for implementing debuggers, profilers,
     coverage tools and the like.  Its behavior is part of the
     implementation platform, rather than part of the language
     definition, and thus may not be available in all Python
     implementations.

     New in version 2.6.

 -- Function: sys.getwindowsversion ()

     Return a named tuple describing the Windows version currently
     running.  The named elements are _major_, _minor_, _build_,
     _platform_, _service_pack_, _service_pack_minor_,
     _service_pack_major_, _suite_mask_, and _product_type_.
     _service_pack_ contains a string while all other values are
     integers.  The components can also be accessed by name, so
     ‘sys.getwindowsversion()[0]’ is equivalent to
     ‘sys.getwindowsversion().major’.  For compatibility with prior
     versions, only the first 5 elements are retrievable by indexing.

     _platform_ may be one of the following values:

     Constant                                      Platform
                                                   
     ----------------------------------------------------------------------------
                                                   
     ‘0 (VER_PLATFORM_WIN32s)’                     Win32s on Windows 3.1
                                                   
                                                   
     ‘1 (VER_PLATFORM_WIN32_WINDOWS)’              Windows 95/98/ME
                                                   
                                                   
     ‘2 (VER_PLATFORM_WIN32_NT)’                   Windows NT/2000/XP/x64
                                                   
                                                   
     ‘3 (VER_PLATFORM_WIN32_CE)’                   Windows CE
                                                   

     _product_type_ may be one of the following values:

     Constant                                    Meaning
                                                 
     ----------------------------------------------------------------------------------
                                                 
     ‘1 (VER_NT_WORKSTATION)’                    The system is a workstation.
                                                 
                                                 
     ‘2 (VER_NT_DOMAIN_CONTROLLER)’              The system is a domain controller.
                                                 
                                                 
     ‘3 (VER_NT_SERVER)’                         The system is a server, but not a
                                                 domain controller.
                                                 

     This function wraps the Win32 ‘GetVersionEx()’ function; see the
     Microsoft documentation on ‘OSVERSIONINFOEX()’ for more information
     about these fields.

     Availability: Windows.

     New in version 2.3.

     Changed in version 2.7: Changed to a named tuple and added
     _service_pack_minor_, _service_pack_major_, _suite_mask_, and
     _product_type_.

 -- Data: sys.hexversion

     The version number encoded as a single integer.  This is guaranteed
     to increase with each version, including proper support for
     non-production releases.  For example, to test that the Python
     interpreter is at least version 1.5.2, use:

          if sys.hexversion >= 0x010502F0:
              # use some advanced feature
              ...
          else:
              # use an alternative implementation or warn the user
              ...

     This is called ‘hexversion’ since it only really looks meaningful
     when viewed as the result of passing it to the built-in *note
     hex(): 334. function.  The ‘version_info’ value may be used for a
     more human-friendly encoding of the same information.

     The ‘hexversion’ is a 32-bit number with the following layout:

     Bits (big endian order)       Meaning
                                   
     -----------------------------------------------------------------------------------
                                   
     ‘1-8’                         ‘PY_MAJOR_VERSION’ (the ‘2’ in ‘2.1.0a3’)
                                   
                                   
     ‘9-16’                        ‘PY_MINOR_VERSION’ (the ‘1’ in ‘2.1.0a3’)
                                   
                                   
     ‘17-24’                       ‘PY_MICRO_VERSION’ (the ‘0’ in ‘2.1.0a3’)
                                   
                                   
     ‘25-28’                       ‘PY_RELEASE_LEVEL’ (‘0xA’ for alpha, ‘0xB’ for
                                   beta, ‘0xC’ for release candidate and ‘0xF’ for
                                   final)
                                   
                                   
     ‘29-32’                       ‘PY_RELEASE_SERIAL’ (the ‘3’ in ‘2.1.0a3’, zero
                                   for final releases)
                                   

     Thus ‘2.1.0a3’ is hexversion ‘0x020100a3’.

     New in version 1.5.2.

 -- Data: sys.long_info

     A struct sequence that holds information about Python’s internal
     representation of integers.  The attributes are read only.

     Attribute                     Explanation
                                   
     ---------------------------------------------------------------------------------
                                   
     ‘bits_per_digit’              number of bits held in each digit.  Python
                                   integers are stored internally in base
                                   ‘2**long_info.bits_per_digit’
                                   
                                   
     ‘sizeof_digit’                size in bytes of the C type used to represent a
                                   digit
                                   

     New in version 2.7.

 -- Data: sys.last_type
 -- Data: sys.last_value
 -- Data: sys.last_traceback

     These three variables are not always defined; they are set when an
     exception is not handled and the interpreter prints an error
     message and a stack traceback.  Their intended use is to allow an
     interactive user to import a debugger module and engage in
     post-mortem debugging without having to re-execute the command that
     caused the error.  (Typical use is ‘import pdb; pdb.pm()’ to enter
     the post-mortem debugger; see chapter *note pdb — The Python
     Debugger: 2333. for more information.)

     The meaning of the variables is the same as that of the return
     values from *note exc_info(): 2f3. above.  (Since there is only one
     interactive thread, thread-safety is not a concern for these
     variables, unlike for ‘exc_type’ etc.)

 -- Data: sys.maxint

     The largest positive integer supported by Python’s regular integer
     type.  This is at least 2**31-1.  The largest negative integer is
     ‘-maxint-1’ — the asymmetry results from the use of 2’s complement
     binary arithmetic.

 -- Data: sys.maxsize

     The largest positive integer supported by the platform’s Py_ssize_t
     type, and thus the maximum size lists, strings, dicts, and many
     other containers can have.

 -- Data: sys.maxunicode

     An integer giving the largest supported code point for a Unicode
     character.  The value of this depends on the configuration option
     that specifies whether Unicode characters are stored as UCS-2 or
     UCS-4.

 -- Data: sys.meta_path

     A list of *note finder: 826. objects that have their
     ‘find_module()’ methods called to see if one of the objects can
     find the module to be imported.  The ‘find_module()’ method is
     called at least with the absolute name of the module being
     imported.  If the module to be imported is contained in package
     then the parent package’s ‘__path__’ attribute is passed in as a
     second argument.  The method returns ‘None’ if the module cannot be
     found, else returns a *note loader: 827.

     *note sys.meta_path: 825. is searched before any implicit default
     finders or *note sys.path: 57f.

     See PEP 302(1) for the original specification.

 -- Data: sys.modules

     This is a dictionary that maps module names to modules which have
     already been loaded.  This can be manipulated to force reloading of
     modules and other tricks.  Note that removing a module from this
     dictionary is _not_ the same as calling *note reload(): 57a. on the
     corresponding module object.

 -- Data: sys.path

     A list of strings that specifies the search path for modules.
     Initialized from the environment variable *note PYTHONPATH: 580,
     plus an installation-dependent default.

     As initialized upon program startup, the first item of this list,
     ‘path[0]’, is the directory containing the script that was used to
     invoke the Python interpreter.  If the script directory is not
     available (e.g.  if the interpreter is invoked interactively or if
     the script is read from standard input), ‘path[0]’ is the empty
     string, which directs Python to search modules in the current
     directory first.  Notice that the script directory is inserted
     _before_ the entries inserted as a result of *note PYTHONPATH: 580.

     A program is free to modify this list for its own purposes.

     Changed in version 2.3: Unicode strings are no longer ignored.

     See also
.............

     Module *note site: 158. This describes how to use .pth files to
     extend *note sys.path: 57f.

 -- Data: sys.path_hooks

     A list of callables that take a path argument to try to create a
     *note finder: 826. for the path.  If a finder can be created, it is
     to be returned by the callable, else raise *note ImportError: 370.

     Originally specified in PEP 302(2).

 -- Data: sys.path_importer_cache

     A dictionary acting as a cache for *note finder: 826. objects.  The
     keys are paths that have been passed to *note sys.path_hooks: 828.
     and the values are the finders that are found.  If a path is a
     valid file system path but no explicit finder is found on *note
     sys.path_hooks: 828. then ‘None’ is stored to represent the
     implicit default finder should be used.  If the path is not an
     existing path then *note imp.NullImporter: 23c4. is set.

     Originally specified in PEP 302(3).

 -- Data: sys.platform

     This string contains a platform identifier that can be used to
     append platform-specific components to *note sys.path: 57f, for
     instance.

     For most Unix systems, this is the lowercased OS name as returned
     by ‘uname -s’ with the first part of the version as returned by
     ‘uname -r’ appended, e.g.  ‘'sunos5'’, _at the time when Python was
     built_.  Unless you want to test for a specific system version, it
     is therefore recommended to use the following idiom:

          if sys.platform.startswith('freebsd'):
              # FreeBSD-specific code here...
          elif sys.platform.startswith('linux'):
              # Linux-specific code here...

     Changed in version 2.7.3: Since lots of code check for
     ‘sys.platform == 'linux2'’, and there is no essential change
     between Linux 2.x and 3.x, ‘sys.platform’ is always set to
     ‘'linux2'’, even on Linux 3.x.  In Python 3.3 and later, the value
     will always be set to ‘'linux'’, so it is recommended to always use
     the ‘startswith’ idiom presented above.

     For other systems, the values are:

     System                    *note platform: 132. value
                               
     ----------------------------------------------------------
                               
     Linux (2.x _and_ 3.x)     ‘'linux2'’
                               
                               
     Windows                   ‘'win32'’
                               
                               
     Windows/Cygwin            ‘'cygwin'’
                               
                               
     Mac OS X                  ‘'darwin'’
                               
                               
     OS/2                      ‘'os2'’
                               
                               
     OS/2 EMX                  ‘'os2emx'’
                               
                               
     RiscOS                    ‘'riscos'’
                               
                               
     AtheOS                    ‘'atheos'’
                               

     See also
.............

     *note os.name: 10de. has a coarser granularity.  *note os.uname():
     10e0. gives system-dependent version information.

     The *note platform: 132. module provides detailed checks for the
     system’s identity.

 -- Data: sys.prefix

     A string giving the site-specific directory prefix where the
     platform independent Python files are installed; by default, this
     is the string ‘'/usr/local'’.  This can be set at build time with
     the ‘--prefix’ argument to the *configure* script.  The main
     collection of Python library modules is installed in the directory
     ‘_prefix_/lib/python_X.Y_’ while the platform independent header
     files (all except ‘pyconfig.h’) are stored in
     ‘_prefix_/include/python_X.Y_’, where _X.Y_ is the version number
     of Python, for example ‘2.7’.

 -- Data: sys.ps1
 -- Data: sys.ps2

     Strings specifying the primary and secondary prompt of the
     interpreter.  These are only defined if the interpreter is in
     interactive mode.  Their initial values in this case are ‘'>>> '’
     and ‘'... '’.  If a non-string object is assigned to either
     variable, its *note str(): 1ea. is re-evaluated each time the
     interpreter prepares to read a new interactive command; this can be
     used to implement a dynamic prompt.

 -- Data: sys.py3kwarning

     Bool containing the status of the Python 3 warning flag.  It’s
     ‘True’ when Python is started with the -3 option.  (This should be
     considered read-only; setting it to a different value doesn’t have
     an effect on Python 3 warnings.)

     New in version 2.6.

 -- Function: sys.setcheckinterval (interval)

     Set the interpreter’s "check interval".  This integer value
     determines how often the interpreter checks for periodic things
     such as thread switches and signal handlers.  The default is ‘100’,
     meaning the check is performed every 100 Python virtual
     instructions.  Setting it to a larger value may increase
     performance for programs using threads.  Setting it to a value ‘<=’
     0 checks every virtual instruction, maximizing responsiveness as
     well as overhead.

 -- Function: sys.setdefaultencoding (name)

     Set the current default string encoding used by the Unicode
     implementation.  If _name_ does not match any available encoding,
     *note LookupError: 891. is raised.  This function is only intended
     to be used by the *note site: 158. module implementation and, where
     needed, by ‘sitecustomize’.  Once used by the *note site: 158.
     module, it is removed from the *note sys: 16d. module’s namespace.

     New in version 2.0.

 -- Function: sys.setdlopenflags (n)

     Set the flags used by the interpreter for ‘dlopen()’ calls, such as
     when the interpreter loads extension modules.  Among other things,
     this will enable a lazy resolving of symbols when importing a
     module, if called as ‘sys.setdlopenflags(0)’.  To share symbols
     across extension modules, call as ‘sys.setdlopenflags(dl.RTLD_NOW |
     dl.RTLD_GLOBAL)’.  Symbolic names for the flag modules can be
     either found in the *note dl: b4. module, or in the ‘DLFCN’ module.
     If ‘DLFCN’ is not available, it can be generated from
     ‘/usr/include/dlfcn.h’ using the *h2py* script.  Availability:
     Unix.

     New in version 2.2.

 -- Function: sys.setprofile (profilefunc)

     Set the system’s profile function, which allows you to implement a
     Python source code profiler in Python.  See chapter *note The
     Python Profilers: 233e. for more information on the Python
     profiler.  The system’s profile function is called similarly to the
     system’s trace function (see *note settrace(): 4a0.), but it isn’t
     called for each executed line of code (only on call and return, but
     the return event is reported even when an exception has been set).
     The function is thread-specific, but there is no way for the
     profiler to know about context switches between threads, so it does
     not make sense to use this in the presence of multiple threads.
     Also, its return value is not used, so it can simply return ‘None’.

 -- Function: sys.setrecursionlimit (limit)

     Set the maximum depth of the Python interpreter stack to _limit_.
     This limit prevents infinite recursion from causing an overflow of
     the C stack and crashing Python.

     The highest possible limit is platform-dependent.  A user may need
     to set the limit higher when she has a program that requires deep
     recursion and a platform that supports a higher limit.  This should
     be done with care, because a too-high limit can lead to a crash.

 -- Function: sys.settrace (tracefunc)

     Set the system’s trace function, which allows you to implement a
     Python source code debugger in Python.  The function is
     thread-specific; for a debugger to support multiple threads, it
     must be registered using *note settrace(): 4a0. for each thread
     being debugged.

     Trace functions should have three arguments: _frame_, _event_, and
     _arg_.  _frame_ is the current stack frame.  _event_ is a string:
     ‘'call'’, ‘'line'’, ‘'return'’, ‘'exception'’, ‘'c_call'’,
     ‘'c_return'’, or ‘'c_exception'’.  _arg_ depends on the event type.

     The trace function is invoked (with _event_ set to ‘'call'’)
     whenever a new local scope is entered; it should return a reference
     to a local trace function to be used that scope, or ‘None’ if the
     scope shouldn’t be traced.

     The local trace function should return a reference to itself (or to
     another function for further tracing in that scope), or ‘None’ to
     turn off tracing in that scope.

     The events have the following meaning:

     ‘'call'’

          A function is called (or some other code block entered).  The
          global trace function is called; _arg_ is ‘None’; the return
          value specifies the local trace function.

     ‘'line'’

          The interpreter is about to execute a new line of code or
          re-execute the condition of a loop.  The local trace function
          is called; _arg_ is ‘None’; the return value specifies the new
          local trace function.  See ‘Objects/lnotab_notes.txt’ for a
          detailed explanation of how this works.

     ‘'return'’

          A function (or other code block) is about to return.  The
          local trace function is called; _arg_ is the value that will
          be returned, or ‘None’ if the event is caused by an exception
          being raised.  The trace function’s return value is ignored.

     ‘'exception'’

          An exception has occurred.  The local trace function is
          called; _arg_ is a tuple ‘(exception, value, traceback)’; the
          return value specifies the new local trace function.

     ‘'c_call'’

          A C function is about to be called.  This may be an extension
          function or a built-in.  _arg_ is the C function object.

     ‘'c_return'’

          A C function has returned.  _arg_ is the C function object.

     ‘'c_exception'’

          A C function has raised an exception.  _arg_ is the C function
          object.

     Note that as an exception is propagated down the chain of callers,
     an ‘'exception'’ event is generated at each level.

     For more information on code and frame objects, refer to *note The
     standard type hierarchy: 6ed.

     *CPython implementation detail:* The *note settrace(): 4a0.
     function is intended only for implementing debuggers, profilers,
     coverage tools and the like.  Its behavior is part of the
     implementation platform, rather than part of the language
     definition, and thus may not be available in all Python
     implementations.

 -- Function: sys.settscdump (on_flag)

     Activate dumping of VM measurements using the Pentium timestamp
     counter, if _on_flag_ is true.  Deactivate these dumps if _on_flag_
     is off.  The function is available only if Python was compiled with
     ‘--with-tsc’.  To understand the output of this dump, read
     ‘Python/ceval.c’ in the Python sources.

     New in version 2.4.

     *CPython implementation detail:* This function is intimately bound
     to CPython implementation details and thus not likely to be
     implemented elsewhere.

 -- Data: sys.stdin
 -- Data: sys.stdout
 -- Data: sys.stderr

     File objects corresponding to the interpreter’s standard input,
     output and error streams.  ‘stdin’ is used for all interpreter
     input except for scripts but including calls to *note input(): 3bf.
     and *note raw_input(): 869.  ‘stdout’ is used for the output of
     *note print: 4e0. and *note expression: 23b6. statements and for
     the prompts of *note input(): 3bf. and *note raw_input(): 869.  The
     interpreter’s own prompts and (almost all of) its error messages go
     to ‘stderr’.  ‘stdout’ and ‘stderr’ needn’t be built-in file
     objects: any object is acceptable as long as it has a ‘write()’
     method that takes a string argument.  (Changing these objects
     doesn’t affect the standard I/O streams of processes executed by
     *note os.popen(): 700, *note os.system(): 3fa. or the ‘exec*()’
     family of functions in the *note os: 128. module.)

 -- Data: sys.__stdin__
 -- Data: sys.__stdout__
 -- Data: sys.__stderr__

     These objects contain the original values of ‘stdin’, ‘stderr’ and
     ‘stdout’ at the start of the program.  They are used during
     finalization, and could be useful to print to the actual standard
     stream no matter if the ‘sys.std*’ object has been redirected.

     It can also be used to restore the actual files to known working
     file objects in case they have been overwritten with a broken
     object.  However, the preferred way to do this is to explicitly
     save the previous stream before replacing it, and restore the saved
     object.

 -- Data: sys.subversion

     A triple (repo, branch, version) representing the Subversion
     information of the Python interpreter.  _repo_ is the name of the
     repository, ‘'CPython'’.  _branch_ is a string of one of the forms
     ‘'trunk'’, ‘'branches/name'’ or ‘'tags/name'’.  _version_ is the
     output of ‘svnversion’, if the interpreter was built from a
     Subversion checkout; it contains the revision number (range) and
     possibly a trailing ’M’ if there were local modifications.  If the
     tree was exported (or svnversion was not available), it is the
     revision of ‘Include/patchlevel.h’ if the branch is a tag.
     Otherwise, it is ‘None’.

     New in version 2.5.

          Note: Python is now developed(4) using Mercurial.  In recent
          Python 2.7 bugfix releases, *note subversion: 23cb. therefore
          contains placeholder information.  It is removed in Python
          3.3.

 -- Data: sys.tracebacklimit

     When this variable is set to an integer value, it determines the
     maximum number of levels of traceback information printed when an
     unhandled exception occurs.  The default is ‘1000’.  When set to
     ‘0’ or less, all traceback information is suppressed and only the
     exception type and value are printed.

 -- Data: sys.version

     A string containing the version number of the Python interpreter
     plus additional information on the build number and compiler used.
     This string is displayed when the interactive interpreter is
     started.  Do not extract version information out of it, rather, use
     *note version_info: 23ce. and the functions provided by the *note
     platform: 132. module.

 -- Data: sys.api_version

     The C API version for this interpreter.  Programmers may find this
     useful when debugging version conflicts between Python and
     extension modules.

     New in version 2.3.

 -- Data: sys.version_info

     A tuple containing the five components of the version number:
     _major_, _minor_, _micro_, _releaselevel_, and _serial_.  All
     values except _releaselevel_ are integers; the release level is
     ‘'alpha'’, ‘'beta'’, ‘'candidate'’, or ‘'final'’.  The
     ‘version_info’ value corresponding to the Python version 2.0 is
     ‘(2, 0, 0, 'final', 0)’.  The components can also be accessed by
     name, so ‘sys.version_info[0]’ is equivalent to
     ‘sys.version_info.major’ and so on.

     New in version 2.0.

     Changed in version 2.7: Added named component attributes

 -- Data: sys.warnoptions

     This is an implementation detail of the warnings framework; do not
     modify this value.  Refer to the *note warnings: 193. module for
     more information on the warnings framework.

 -- Data: sys.winver

     The version number used to form registry keys on Windows platforms.
     This is stored as string resource 1000 in the Python DLL. The value
     is normally the first three characters of *note version: 23cd.  It
     is provided in the *note sys: 16d. module for informational
     purposes; modifying this value has no effect on the registry keys
     used by Python.  Availability: Windows.

Citations
.........

(C99) ISO/IEC 9899:1999.  "Programming languages – C." A public draft of
this standard is available at
‘http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf’.

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0302

   (2) http://www.python.org/dev/peps/pep-0302

   (3) http://www.python.org/dev/peps/pep-0302

   (4) http://docs.python.org/devguide/


File: python.info,  Node: sysconfig --- Provide access to Python's configuration information,  Next: __builtin__ --- Built-in objects,  Prev: sys --- System-specific parameters and functions,  Up: Python Runtime Services

5.27.2 ‘sysconfig’ — Provide access to Python’s configuration information
-------------------------------------------------------------------------

New in version 2.7.

  *Source code:* Lib/sysconfig.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note sysconfig: 16e. module provides access to Python’s
configuration information like the list of installation paths and the
configuration variables relevant for the current platform.

* Menu:

* Configuration variables:: 
* Installation paths:: 
* Other functions:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/sysconfig.py


File: python.info,  Node: Configuration variables,  Next: Installation paths,  Up: sysconfig --- Provide access to Python's configuration information

5.27.2.1 Configuration variables
................................

A Python distribution contains a ‘Makefile’ and a ‘pyconfig.h’ header
file that are necessary to build both the Python binary itself and
third-party C extensions compiled using *note distutils: 85.

  *note sysconfig: 16e. puts all variables found in these files in a
dictionary that can be accessed using *note get_config_vars(): 274. or
*note get_config_var(): 273.

  Notice that on Windows, it’s a much smaller set.

 -- Function: sysconfig.get_config_vars (*args)

     With no arguments, return a dictionary of all configuration
     variables relevant for the current platform.

     With arguments, return a list of values that result from looking up
     each argument in the configuration variable dictionary.

     For each argument, if the value is not found, return ‘None’.

 -- Function: sysconfig.get_config_var (name)

     Return the value of a single variable _name_.  Equivalent to
     ‘get_config_vars().get(name)’.

     If _name_ is not found, return ‘None’.

  Example of usage:

     >>> import sysconfig
     >>> sysconfig.get_config_var('Py_ENABLE_SHARED')
     0
     >>> sysconfig.get_config_var('LIBDIR')
     '/usr/local/lib'
     >>> sysconfig.get_config_vars('AR', 'CXX')
     ['ar', 'g++']


File: python.info,  Node: Installation paths,  Next: Other functions,  Prev: Configuration variables,  Up: sysconfig --- Provide access to Python's configuration information

5.27.2.2 Installation paths
...........................

Python uses an installation scheme that differs depending on the
platform and on the installation options.  These schemes are stored in
*note sysconfig: 16e. under unique identifiers based on the value
returned by *note os.name: 10de.

  Every new component that is installed using *note distutils: 85. or a
Distutils-based system will follow the same scheme to copy its file in
the right places.

  Python currently supports seven schemes:

   - _posix_prefix_: scheme for Posix platforms like Linux or Mac OS X.
     This is the default scheme used when Python or a component is
     installed.

   - _posix_home_: scheme for Posix platforms used when a _home_ option
     is used upon installation.  This scheme is used when a component is
     installed through Distutils with a specific home prefix.

   - _posix_user_: scheme for Posix platforms used when a component is
     installed through Distutils and the _user_ option is used.  This
     scheme defines paths located under the user home directory.

   - _nt_: scheme for NT platforms like Windows.

   - _nt_user_: scheme for NT platforms, when the _user_ option is used.

   - _os2_: scheme for OS/2 platforms.

   - _os2_home_: scheme for OS/2 patforms, when the _user_ option is
     used.

  Each scheme is itself composed of a series of paths and each path has
a unique identifier.  Python currently uses eight paths:

   - _stdlib_: directory containing the standard Python library files
     that are not platform-specific.

   - _platstdlib_: directory containing the standard Python library
     files that are platform-specific.

   - _platlib_: directory for site-specific, platform-specific files.

   - _purelib_: directory for site-specific, non-platform-specific
     files.

   - _include_: directory for non-platform-specific header files.

   - _platinclude_: directory for platform-specific header files.

   - _scripts_: directory for script files.

   - _data_: directory for data files.

  *note sysconfig: 16e. provides some functions to determine these
paths.

 -- Function: sysconfig.get_scheme_names ()

     Return a tuple containing all schemes currently supported in *note
     sysconfig: 16e.

 -- Function: sysconfig.get_path_names ()

     Return a tuple containing all path names currently supported in
     *note sysconfig: 16e.

 -- Function: sysconfig.get_path (name[, scheme[, vars[, expand]]])

     Return an installation path corresponding to the path _name_, from
     the install scheme named _scheme_.

     _name_ has to be a value from the list returned by *note
     get_path_names(): 23d7.

     *note sysconfig: 16e. stores installation paths corresponding to
     each path name, for each platform, with variables to be expanded.
     For instance the _stdlib_ path for the _nt_ scheme is:
     ‘{base}/Lib’.

     *note get_path(): 275. will use the variables returned by *note
     get_config_vars(): 274. to expand the path.  All variables have
     default values for each platform so one may call this function and
     get the default value.

     If _scheme_ is provided, it must be a value from the list returned
     by *note get_scheme_names(): 23d6.  Otherwise, the default scheme
     for the current platform is used.

     If _vars_ is provided, it must be a dictionary of variables that
     will update the dictionary return by *note get_config_vars(): 274.

     If _expand_ is set to ‘False’, the path will not be expanded using
     the variables.

     If _name_ is not found, return ‘None’.

 -- Function: sysconfig.get_paths ([scheme[, vars[, expand]]])

     Return a dictionary containing all installation paths corresponding
     to an installation scheme.  See *note get_path(): 275. for more
     information.

     If _scheme_ is not provided, will use the default scheme for the
     current platform.

     If _vars_ is provided, it must be a dictionary of variables that
     will update the dictionary used to expand the paths.

     If _expand_ is set to False, the paths will not be expanded.

     If _scheme_ is not an existing scheme, *note get_paths(): 23d8.
     will raise a *note KeyError: 205.


File: python.info,  Node: Other functions,  Prev: Installation paths,  Up: sysconfig --- Provide access to Python's configuration information

5.27.2.3 Other functions
........................

 -- Function: sysconfig.get_python_version ()

     Return the ‘MAJOR.MINOR’ Python version number as a string.
     Similar to ‘sys.version[:3]’.

 -- Function: sysconfig.get_platform ()

     Return a string that identifies the current platform.

     This is used mainly to distinguish platform-specific build
     directories and platform-specific built distributions.  Typically
     includes the OS name and version and the architecture (as supplied
     by *note os.uname(): 10e0.), although the exact information
     included depends on the OS; e.g.  for IRIX the architecture isn’t
     particularly important (IRIX only runs on SGI hardware), but for
     Linux the kernel version isn’t particularly important.

     Examples of returned values:

        - linux-i586

        - linux-alpha (?)

        - solaris-2.6-sun4u

        - irix-5.3

        - irix64-6.2

     Windows will return one of:

        - win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T,
          etc)

        - win-ia64 (64bit Windows on Itanium)

        - win32 (all others - specifically, sys.platform is returned)

     Mac OS X can return:

        - macosx-10.6-ppc

        - macosx-10.4-ppc64

        - macosx-10.3-i386

        - macosx-10.4-fat

     For other non-POSIX platforms, currently just returns *note
     sys.platform: 10df.

 -- Function: sysconfig.is_python_build ()

     Return ‘True’ if the current Python installation was built from
     source.

 -- Function: sysconfig.parse_config_h (fp[, vars])

     Parse a ‘config.h’-style file.

     _fp_ is a file-like object pointing to the ‘config.h’-like file.

     A dictionary containing name/value pairs is returned.  If an
     optional dictionary is passed in as the second argument, it is used
     instead of a new dictionary, and updated with the values read in
     the file.

 -- Function: sysconfig.get_config_h_filename ()

     Return the path of ‘pyconfig.h’.


File: python.info,  Node: __builtin__ --- Built-in objects,  Next: future_builtins --- Python 3 builtins,  Prev: sysconfig --- Provide access to Python's configuration information,  Up: Python Runtime Services

5.27.3 ‘__builtin__’ — Built-in objects
---------------------------------------

This module provides direct access to all ’built-in’ identifiers of
Python; for example, ‘__builtin__.open’ is the full name for the
built-in function *note open(): 2d6.  See *note Built-in Functions: 7c7.
and *note Built-in Constants: 895. for documentation.

  This module is not normally accessed explicitly by most applications,
but can be useful in modules that provide objects with the same name as
a built-in value, but in which the built-in of that name is also needed.
For example, in a module that wants to implement an *note open(): 2d6.
function that wraps the built-in *note open(): 2d6, this module can be
used directly:

     import __builtin__

     def open(path):
         f = __builtin__.open(path, 'r')
         return UpperCaser(f)

     class UpperCaser:
         '''Wrapper around a file that converts output to upper-case.'''

         def __init__(self, f):
             self._f = f

         def read(self, count=-1):
             return self._f.read(count).upper()

         # ...

*CPython implementation detail:* Most modules have the name
‘__builtins__’ (note the ‘'s'’) made available as part of their globals.
The value of ‘__builtins__’ is normally either this module or the value
of this modules’s ‘__dict__’ attribute.  Since this is an implementation
detail, it may not be used by alternate implementations of Python.


File: python.info,  Node: future_builtins --- Python 3 builtins,  Next: __main__ --- Top-level script environment,  Prev: __builtin__ --- Built-in objects,  Up: Python Runtime Services

5.27.4 ‘future_builtins’ — Python 3 builtins
--------------------------------------------

New in version 2.6.

  This module provides functions that exist in 2.x, but have different
behavior in Python 3, so they cannot be put into the 2.x builtins
namespace.

  Instead, if you want to write code compatible with Python 3 builtins,
import them from this module, like this:

     from future_builtins import map, filter

     ... code using Python 3-style map and filter ...

  The *note 2to3: bdb. tool that ports Python 2 code to Python 3 will
recognize this usage and leave the new builtins alone.

     Note: The Python 3 *note print(): 30b. function is already in the
     builtins, but cannot be accessed from Python 2 code unless you use
     the appropriate future statement:

          from __future__ import print_function

  Available builtins are:

 -- Function: future_builtins.ascii (object)

     Returns the same as *note repr(): 145.  In Python 3, *note repr():
     145. will return printable Unicode characters unescaped, while
     *note ascii(): 23e2. will always backslash-escape them.  Using
     *note future_builtins.ascii(): 23e2. instead of *note repr(): 145.
     in 2.6 code makes it clear that you need a pure ASCII return value.

 -- Function: future_builtins.filter (function, iterable)

     Works like *note itertools.ifilter(): 881.

 -- Function: future_builtins.hex (object)

     Works like the built-in *note hex(): 334, but instead of *note
     __hex__(): 362. it will use the *note __index__(): 25f. method on
     its argument to get an integer that is then converted to
     hexadecimal.

 -- Function: future_builtins.map (function, iterable, ...)

     Works like *note itertools.imap(): d66.

          Note: In Python 3, *note map(): 304. does not accept ‘None’
          for the function argument.

 -- Function: future_builtins.oct (object)

     Works like the built-in *note oct(): 325, but instead of *note
     __oct__(): 363. it will use the *note __index__(): 25f. method on
     its argument to get an integer that is then converted to octal.

 -- Function: future_builtins.zip (*iterables)

     Works like *note itertools.izip(): 406.


File: python.info,  Node: __main__ --- Top-level script environment,  Next: warnings --- Warning control,  Prev: future_builtins --- Python 3 builtins,  Up: Python Runtime Services

5.27.5 ‘__main__’ — Top-level script environment
------------------------------------------------

This module represents the (otherwise anonymous) scope in which the
interpreter’s main program executes — commands read either from standard
input, from a script file, or from an interactive prompt.  It is this
environment in which the idiomatic "conditional script" stanza causes a
script to run:

     if __name__ == "__main__":
         main()


File: python.info,  Node: warnings --- Warning control,  Next: contextlib --- Utilities for with-statement contexts,  Prev: __main__ --- Top-level script environment,  Up: Python Runtime Services

5.27.6 ‘warnings’ — Warning control
-----------------------------------

New in version 2.1.

  *Source code:* Lib/warnings.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  Warning messages are typically issued in situations where it is useful
to alert the user of some condition in a program, where that condition
(normally) doesn’t warrant raising an exception and terminating the
program.  For example, one might want to issue a warning when a program
uses an obsolete module.

  Python programmers issue warnings by calling the *note warn(): 4c0.
function defined in this module.  (C programmers use *note
PyErr_WarnEx(): 3e7.; see *note Exception Handling: 23ec. for details).

  Warning messages are normally written to ‘sys.stderr’, but their
disposition can be changed flexibly, from ignoring all warnings to
turning them into exceptions.  The disposition of warnings can vary
based on the warning category (see below), the text of the warning
message, and the source location where it is issued.  Repetitions of a
particular warning for the same source location are typically
suppressed.

  There are two stages in warning control: first, each time a warning is
issued, a determination is made whether a message should be issued or
not; next, if a message is to be issued, it is formatted and printed
using a user-settable hook.

  The determination whether to issue a warning message is controlled by
the warning filter, which is a sequence of matching rules and actions.
Rules can be added to the filter by calling *note filterwarnings(): 454.
and reset to its default state by calling *note resetwarnings(): 23ed.

  The printing of warning messages is done by calling *note
showwarning(): 23ee, which may be overridden; the default implementation
of this function formats the message by calling *note formatwarning():
1313, which is also available for use by custom implementations.

See also
........

*note logging.captureWarnings(): 1312. allows you to handle all warnings
with the standard logging infrastructure.

* Menu:

* Warning Categories:: 
* The Warnings Filter:: 
* Temporarily Suppressing Warnings:: 
* Testing Warnings:: 
* Updating Code For New Versions of Python:: 
* Available Functions:: 
* Available Context Managers:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/warnings.py


File: python.info,  Node: Warning Categories,  Next: The Warnings Filter,  Up: warnings --- Warning control

5.27.6.1 Warning Categories
...........................

There are a number of built-in exceptions that represent warning
categories.  This categorization is useful to be able to filter out
groups of warnings.  The following warnings category classes are
currently defined:

Class                                  Description
                                       
-------------------------------------------------------------------------------------------
                                       
*note Warning: 95c.                    This is the base class of all warning category
                                       classes.  It is a subclass of *note Exception:
                                       339.
                                       
                                       
*note UserWarning: 95d.                The default category for *note warn(): 4c0.
                                       
                                       
*note DeprecationWarning: 1bc.         Base category for warnings about deprecated
                                       features (ignored by default).
                                       
                                       
*note SyntaxWarning: 455.              Base category for warnings about dubious
                                       syntactic features.
                                       
                                       
*note RuntimeWarning: 95e.             Base category for warnings about dubious runtime
                                       features.
                                       
                                       
*note FutureWarning: 2b4.              Base category for warnings about constructs that
                                       will change semantically in the future.
                                       
                                       
*note PendingDeprecationWarning:       Base category for warnings about features that
1f0.                                   will be deprecated in the future (ignored by
                                       default).
                                       
                                       
*note ImportWarning: 3b4.              Base category for warnings triggered during the
                                       process of importing a module (ignored by
                                       default).
                                       
                                       
*note UnicodeWarning: 95f.             Base category for warnings related to Unicode.
                                       

  While these are technically built-in exceptions, they are documented
here, because conceptually they belong to the warnings mechanism.

  User code can define additional warning categories by subclassing one
of the standard warning categories.  A warning category must always be a
subclass of the *note Warning: 95c. class.

  Changed in version 2.7: *note DeprecationWarning: 1bc. is ignored by
default.


File: python.info,  Node: The Warnings Filter,  Next: Temporarily Suppressing Warnings,  Prev: Warning Categories,  Up: warnings --- Warning control

5.27.6.2 The Warnings Filter
............................

The warnings filter controls whether warnings are ignored, displayed, or
turned into errors (raising an exception).

  Conceptually, the warnings filter maintains an ordered list of filter
specifications; any specific warning is matched against each filter
specification in the list in turn until a match is found; the match
determines the disposition of the match.  Each entry is a tuple of the
form (_action_, _message_, _category_, _module_, _lineno_), where:

   * _action_ is one of the following strings:

     Value               Disposition
                         
     -----------------------------------------------------------------------
                         
     ‘"error"’           turn matching warnings into exceptions
                         
                         
     ‘"ignore"’          never print matching warnings
                         
                         
     ‘"always"’          always print matching warnings
                         
                         
     ‘"default"’         print the first occurrence of matching warnings
                         for each location where the warning is issued
                         
                         
     ‘"module"’          print the first occurrence of matching warnings
                         for each module where the warning is issued
                         
                         
     ‘"once"’            print only the first occurrence of matching
                         warnings, regardless of location
                         

   * _message_ is a string containing a regular expression that the
     warning message must match (the match is compiled to always be
     case-insensitive).

   * _category_ is a class (a subclass of *note Warning: 95c.) of which
     the warning category must be a subclass in order to match.

   * _module_ is a string containing a regular expression that the
     module name must match (the match is compiled to be
     case-sensitive).

   * _lineno_ is an integer that the line number where the warning
     occurred must match, or ‘0’ to match all line numbers.

  Since the *note Warning: 95c. class is derived from the built-in *note
Exception: 339. class, to turn a warning into an error we simply raise
‘category(message)’.

  The warnings filter is initialized by *note -W: 1bd. options passed to
the Python interpreter command line.  The interpreter saves the
arguments for all *note -W: 1bd. options without interpretation in
‘sys.warnoptions’; the *note warnings: 193. module parses these when it
is first imported (invalid options are ignored, after printing a message
to ‘sys.stderr’).

* Menu:

* Default Warning Filters:: 


File: python.info,  Node: Default Warning Filters,  Up: The Warnings Filter

5.27.6.3 Default Warning Filters
................................

By default, Python installs several warning filters, which can be
overridden by the command-line options passed to *note -W: 1bd. and
calls to *note filterwarnings(): 454.

   * *note DeprecationWarning: 1bc. and *note PendingDeprecationWarning:
     1f0, and *note ImportWarning: 3b4. are ignored.

   * ‘BytesWarning’ is ignored unless the ‘-b’ option is given once or
     twice; in this case this warning is either printed (‘-b’) or turned
     into an exception (‘-bb’).


File: python.info,  Node: Temporarily Suppressing Warnings,  Next: Testing Warnings,  Prev: The Warnings Filter,  Up: warnings --- Warning control

5.27.6.4 Temporarily Suppressing Warnings
.........................................

If you are using code that you know will raise a warning, such as a
deprecated function, but do not want to see the warning, then it is
possible to suppress the warning using the *note catch_warnings: 22f3.
context manager:

     import warnings

     def fxn():
         warnings.warn("deprecated", DeprecationWarning)

     with warnings.catch_warnings():
         warnings.simplefilter("ignore")
         fxn()

  While within the context manager all warnings will simply be ignored.
This allows you to use known-deprecated code without having to see the
warning while not suppressing the warning for other code that might not
be aware of its use of deprecated code.  Note: this can only be
guaranteed in a single-threaded application.  If two or more threads use
the *note catch_warnings: 22f3. context manager at the same time, the
behavior is undefined.


File: python.info,  Node: Testing Warnings,  Next: Updating Code For New Versions of Python,  Prev: Temporarily Suppressing Warnings,  Up: warnings --- Warning control

5.27.6.5 Testing Warnings
.........................

To test warnings raised by code, use the *note catch_warnings: 22f3.
context manager.  With it you can temporarily mutate the warnings filter
to facilitate your testing.  For instance, do the following to capture
all raised warnings to check:

     import warnings

     def fxn():
         warnings.warn("deprecated", DeprecationWarning)

     with warnings.catch_warnings(record=True) as w:
         # Cause all warnings to always be triggered.
         warnings.simplefilter("always")
         # Trigger a warning.
         fxn()
         # Verify some things
         assert len(w) == 1
         assert issubclass(w[-1].category, DeprecationWarning)
         assert "deprecated" in str(w[-1].message)

  One can also cause all warnings to be exceptions by using ‘error’
instead of ‘always’.  One thing to be aware of is that if a warning has
already been raised because of a ‘once’/‘default’ rule, then no matter
what filters are set the warning will not be seen again unless the
warnings registry related to the warning has been cleared.

  Once the context manager exits, the warnings filter is restored to its
state when the context was entered.  This prevents tests from changing
the warnings filter in unexpected ways between tests and leading to
indeterminate test results.  The *note showwarning(): 23ee. function in
the module is also restored to its original value.  Note: this can only
be guaranteed in a single-threaded application.  If two or more threads
use the *note catch_warnings: 22f3. context manager at the same time,
the behavior is undefined.

  When testing multiple operations that raise the same kind of warning,
it is important to test them in a manner that confirms each operation is
raising a new warning (e.g.  set warnings to be raised as exceptions and
check the operations raise exceptions, check that the length of the
warning list continues to increase after each operation, or else delete
the previous entries from the warnings list before each new operation).


File: python.info,  Node: Updating Code For New Versions of Python,  Next: Available Functions,  Prev: Testing Warnings,  Up: warnings --- Warning control

5.27.6.6 Updating Code For New Versions of Python
.................................................

Warnings that are only of interest to the developer are ignored by
default.  As such you should make sure to test your code with typically
ignored warnings made visible.  You can do this from the command-line by
passing ‘-Wd’ to the interpreter (this is shorthand for ‘-W default’).
This enables default handling for all warnings, including those that are
ignored by default.  To change what action is taken for encountered
warnings you simply change what argument is passed to *note -W: 1bd,
e.g.  ‘-W error’.  See the *note -W: 1bd. flag for more details on what
is possible.

  To programmatically do the same as ‘-Wd’, use:

     warnings.simplefilter('default')

  Make sure to execute this code as soon as possible.  This prevents the
registering of what warnings have been raised from unexpectedly
influencing how future warnings are treated.

  Having certain warnings ignored by default is done to prevent a user
from seeing warnings that are only of interest to the developer.  As you
do not necessarily have control over what interpreter a user uses to run
their code, it is possible that a new version of Python will be released
between your release cycles.  The new interpreter release could trigger
new warnings in your code that were not there in an older interpreter,
e.g.  *note DeprecationWarning: 1bc. for a module that you are using.
While you as a developer want to be notified that your code is using a
deprecated module, to a user this information is essentially noise and
provides no benefit to them.


File: python.info,  Node: Available Functions,  Next: Available Context Managers,  Prev: Updating Code For New Versions of Python,  Up: warnings --- Warning control

5.27.6.7 Available Functions
............................

 -- Function: warnings.warn (message[, category[, stacklevel]])

     Issue a warning, or maybe ignore it or raise an exception.  The
     _category_ argument, if given, must be a warning category class
     (see above); it defaults to *note UserWarning: 95d.  Alternatively
     _message_ can be a *note Warning: 95c. instance, in which case
     _category_ will be ignored and ‘message.__class__’ will be used.
     In this case the message text will be ‘str(message)’.  This
     function raises an exception if the particular warning issued is
     changed into an error by the warnings filter see above.  The
     _stacklevel_ argument can be used by wrapper functions written in
     Python, like this:

          def deprecation(message):
              warnings.warn(message, DeprecationWarning, stacklevel=2)

     This makes the warning refer to ‘deprecation()’’s caller, rather
     than to the source of ‘deprecation()’ itself (since the latter
     would defeat the purpose of the warning message).

 -- Function: warnings.warn_explicit (message, category, filename,
          lineno[, module[, registry[, module_globals]]])

     This is a low-level interface to the functionality of *note warn():
     4c0, passing in explicitly the message, category, filename and line
     number, and optionally the module name and the registry (which
     should be the ‘__warningregistry__’ dictionary of the module).  The
     module name defaults to the filename with ‘.py’ stripped; if no
     registry is passed, the warning is never suppressed.  _message_
     must be a string and _category_ a subclass of *note Warning: 95c.
     or _message_ may be a *note Warning: 95c. instance, in which case
     _category_ will be ignored.

     _module_globals_, if supplied, should be the global namespace in
     use by the code for which the warning is issued.  (This argument is
     used to support displaying source for modules found in zipfiles or
     other non-filesystem import sources).

     Changed in version 2.5: Added the _module_globals_ parameter.

 -- Function: warnings.warnpy3k (message[, category[, stacklevel]])

     Issue a warning related to Python 3.x deprecation.  Warnings are
     only shown when Python is started with the -3 option.  Like *note
     warn(): 4c0. _message_ must be a string and _category_ a subclass
     of *note Warning: 95c.  *note warnpy3k(): 23fc. is using *note
     DeprecationWarning: 1bc. as default warning class.

     New in version 2.6.

 -- Function: warnings.showwarning (message, category, filename,
          lineno[, file[, line]])

     Write a warning to a file.  The default implementation calls
     ‘formatwarning(message, category, filename, lineno, line)’ and
     writes the resulting string to _file_, which defaults to
     ‘sys.stderr’.  You may replace this function with an alternative
     implementation by assigning to ‘warnings.showwarning’.  _line_ is a
     line of source code to be included in the warning message; if
     _line_ is not supplied, *note showwarning(): 23ee. will try to read
     the line specified by _filename_ and _lineno_.

     Changed in version 2.7: The _line_ argument is required to be
     supported.

 -- Function: warnings.formatwarning (message, category, filename,
          lineno[, line])

     Format a warning the standard way.  This returns a string which may
     contain embedded newlines and ends in a newline.  _line_ is a line
     of source code to be included in the warning message; if _line_ is
     not supplied, *note formatwarning(): 1313. will try to read the
     line specified by _filename_ and _lineno_.

     Changed in version 2.6: Added the _line_ argument.

 -- Function: warnings.filterwarnings (action[, message[, category[,
          module[, lineno[, append]]]]])

     Insert an entry into the list of *note warnings filter
     specifications: 23f1.  The entry is inserted at the front by
     default; if _append_ is true, it is inserted at the end.  This
     checks the types of the arguments, compiles the _message_ and
     _module_ regular expressions, and inserts them as a tuple in the
     list of warnings filters.  Entries closer to the front of the list
     override entries later in the list, if both match a particular
     warning.  Omitted arguments default to a value that matches
     everything.

 -- Function: warnings.simplefilter (action[, category[, lineno[,
          append]]])

     Insert a simple entry into the list of *note warnings filter
     specifications: 23f1.  The meaning of the function parameters is as
     for *note filterwarnings(): 454, but regular expressions are not
     needed as the filter inserted always matches any message in any
     module as long as the category and line number match.

 -- Function: warnings.resetwarnings ()

     Reset the warnings filter.  This discards the effect of all
     previous calls to *note filterwarnings(): 454, including that of
     the *note -W: 1bd. command line options and calls to *note
     simplefilter(): 22f4.


File: python.info,  Node: Available Context Managers,  Prev: Available Functions,  Up: warnings --- Warning control

5.27.6.8 Available Context Managers
...................................

 -- Class: warnings.catch_warnings ([*, record=False, module=None])

     A context manager that copies and, upon exit, restores the warnings
     filter and the *note showwarning(): 23ee. function.  If the
     _record_ argument is *note False: 3b1. (the default) the context
     manager returns *note None: 39a. on entry.  If _record_ is *note
     True: 3b0, a list is returned that is progressively populated with
     objects as seen by a custom *note showwarning(): 23ee. function
     (which also suppresses output to ‘sys.stdout’).  Each object in the
     list has attributes with the same names as the arguments to *note
     showwarning(): 23ee.

     The _module_ argument takes a module that will be used instead of
     the module returned when you import *note warnings: 193. whose
     filter will be protected.  This argument exists primarily for
     testing the *note warnings: 193. module itself.

          Note: The *note catch_warnings: 22f3. manager works by
          replacing and then later restoring the module’s *note
          showwarning(): 23ee. function and internal list of filter
          specifications.  This means the context manager is modifying
          global state and therefore is not thread-safe.

          Note: In Python 3, the arguments to the constructor for *note
          catch_warnings: 22f3. are keyword-only arguments.

     New in version 2.6.


File: python.info,  Node: contextlib --- Utilities for with-statement contexts,  Next: abc --- Abstract Base Classes,  Prev: warnings --- Warning control,  Up: Python Runtime Services

5.27.7 ‘contextlib’ — Utilities for ‘with’-statement contexts
-------------------------------------------------------------

New in version 2.5.

  *Source code:* Lib/contextlib.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides utilities for common tasks involving the *note
with: 1c0. statement.  For more information see also *note Context
Manager Types: 761. and *note With Statement Context Managers: 760.

  Functions provided:

 -- Function: contextlib.contextmanager (func)

     This function is a *note decorator: 856. that can be used to define
     a factory function for *note with: 1c0. statement context managers,
     without needing to create a class or separate *note __enter__():
     1ff. and *note __exit__(): 200. methods.

     A simple example (this is not recommended as a real way of
     generating HTML!):

          from contextlib import contextmanager

          @contextmanager
          def tag(name):
              print "<%s>" % name
              yield
              print "</%s>" % name

          >>> with tag("h1"):
          ...    print "foo"
          ...
          <h1>
          foo
          </h1>

     The function being decorated must return a *note generator:
     5dc.-iterator when called.  This iterator must yield exactly one
     value, which will be bound to the targets in the *note with: 1c0.
     statement’s *note as: 2f8. clause, if any.

     At the point where the generator yields, the block nested in the
     *note with: 1c0. statement is executed.  The generator is then
     resumed after the block is exited.  If an unhandled exception
     occurs in the block, it is reraised inside the generator at the
     point where the yield occurred.  Thus, you can use a *note try:
     395...*note except: 397...*note finally: 396. statement to trap the
     error (if any), or ensure that some cleanup takes place.  If an
     exception is trapped merely in order to log it or to perform some
     action (rather than to suppress it entirely), the generator must
     reraise that exception.  Otherwise the generator context manager
     will indicate to the *note with: 1c0. statement that the exception
     has been handled, and execution will resume with the statement
     immediately following the *note with: 1c0. statement.

 -- Function: contextlib.nested (mgr1[, mgr2[, ...]])

     Combine multiple context managers into a single nested context
     manager.

     This function has been deprecated in favour of the multiple manager
     form of the *note with: 1c0. statement.

     The one advantage of this function over the multiple manager form
     of the *note with: 1c0. statement is that argument unpacking allows
     it to be used with a variable number of context managers as
     follows:

          from contextlib import nested

          with nested(*managers):
              do_something()

     Note that if the *note __exit__(): 200. method of one of the nested
     context managers indicates an exception should be suppressed, no
     exception information will be passed to any remaining outer context
     managers.  Similarly, if the *note __exit__(): 200. method of one
     of the nested managers raises an exception, any previous exception
     state will be lost; the new exception will be passed to the *note
     __exit__(): 200. methods of any remaining outer context managers.
     In general, *note __exit__(): 200. methods should avoid raising
     exceptions, and in particular they should not re-raise a passed-in
     exception.

     This function has two major quirks that have led to it being
     deprecated.  Firstly, as the context managers are all constructed
     before the function is invoked, the *note __new__(): 6f9. and *note
     __init__(): 37c. methods of the inner context managers are not
     actually covered by the scope of the outer context managers.  That
     means, for example, that using *note nested(): 1e9. to open two
     files is a programming error as the first file will not be closed
     promptly if an exception is thrown when opening the second file.

     Secondly, if the *note __enter__(): 1ff. method of one of the inner
     context managers raises an exception that is caught and suppressed
     by the *note __exit__(): 200. method of one of the outer context
     managers, this construct will raise *note RuntimeError: 39b. rather
     than skipping the body of the *note with: 1c0. statement.

     Developers that need to support nesting of a variable number of
     context managers can either use the *note warnings: 193. module to
     suppress the DeprecationWarning raised by this function or else use
     this function as a model for an application specific
     implementation.

     Deprecated since version 2.7: The with-statement now supports this
     functionality directly (without the confusing error prone quirks).

 -- Function: contextlib.closing (thing)

     Return a context manager that closes _thing_ upon completion of the
     block.  This is basically equivalent to:

          from contextlib import contextmanager

          @contextmanager
          def closing(thing):
              try:
                  yield thing
              finally:
                  thing.close()

     And lets you write code like this:

          from contextlib import closing
          import urllib

          with closing(urllib.urlopen('http://www.python.org')) as page:
              for line in page:
                  print line

     without needing to explicitly close ‘page’.  Even if an error
     occurs, ‘page.close()’ will be called when the *note with: 1c0.
     block is exited.

See also
........

PEP 0343(2) - The "with" statement

     The specification, background, and examples for the Python *note
     with: 1c0. statement.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/contextlib.py

   (2) http://www.python.org/dev/peps/pep-0343


File: python.info,  Node: abc --- Abstract Base Classes,  Next: atexit --- Exit handlers,  Prev: contextlib --- Utilities for with-statement contexts,  Up: Python Runtime Services

5.27.8 ‘abc’ — Abstract Base Classes
------------------------------------

New in version 2.6.

  *Source code:* Lib/abc.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides the infrastructure for defining *note abstract
base classes: 886. (ABCs) in Python, as outlined in PEP 3119(2); see the
PEP for why this was added to Python.  (See also PEP 3141(3) and the
*note numbers: 125. module regarding a type hierarchy for numbers based
on ABCs.)

  The *note collections: 65. module has some concrete classes that
derive from ABCs; these can, of course, be further derived.  In addition
the *note collections: 65. module has some ABCs that can be used to test
whether a class or instance provides a particular interface, for
example, is it hashable or a mapping.

  This module provides the following class:

 -- Class: abc.ABCMeta

     Metaclass for defining Abstract Base Classes (ABCs).

     Use this metaclass to create an ABC. An ABC can be subclassed
     directly, and then acts as a mix-in class.  You can also register
     unrelated concrete classes (even built-in classes) and unrelated
     ABCs as "virtual subclasses" – these and their descendants will be
     considered subclasses of the registering ABC by the built-in *note
     issubclass(): 31f. function, but the registering ABC won’t show up
     in their MRO (Method Resolution Order) nor will method
     implementations defined by the registering ABC be callable (not
     even via *note super(): 37d.).  (4)

     Classes created with a metaclass of *note ABCMeta: 71d. have the
     following method:

      -- Method: register (subclass)

          Register _subclass_ as a "virtual subclass" of this ABC. For
          example:

               from abc import ABCMeta

               class MyABC:
                   __metaclass__ = ABCMeta

               MyABC.register(tuple)

               assert issubclass(tuple, MyABC)
               assert isinstance((), MyABC)

     You can also override this method in an abstract base class:

      -- Method: __subclasshook__ (subclass)

          (Must be defined as a class method.)

          Check whether _subclass_ is considered a subclass of this ABC.
          This means that you can customize the behavior of ‘issubclass’
          further without the need to call *note register(): 2403. on
          every class you want to consider a subclass of the ABC. (This
          class method is called from the ‘__subclasscheck__()’ method
          of the ABC.)

          This method should return ‘True’, ‘False’ or ‘NotImplemented’.
          If it returns ‘True’, the _subclass_ is considered a subclass
          of this ABC. If it returns ‘False’, the _subclass_ is not
          considered a subclass of this ABC, even if it would normally
          be one.  If it returns ‘NotImplemented’, the subclass check is
          continued with the usual mechanism.

     For a demonstration of these concepts, look at this example ABC
     definition:

          class Foo(object):
              def __getitem__(self, index):
                  ...
              def __len__(self):
                  ...
              def get_iterator(self):
                  return iter(self)

          class MyIterable:
              __metaclass__ = ABCMeta

              @abstractmethod
              def __iter__(self):
                  while False:
                      yield None

              def get_iterator(self):
                  return self.__iter__()

              @classmethod
              def __subclasshook__(cls, C):
                  if cls is MyIterable:
                      if any("__iter__" in B.__dict__ for B in C.__mro__):
                          return True
                  return NotImplemented

          MyIterable.register(Foo)

     The ABC ‘MyIterable’ defines the standard iterable method, *note
     __iter__(): 8b6, as an abstract method.  The implementation given
     here can still be called from subclasses.  The ‘get_iterator()’
     method is also part of the ‘MyIterable’ abstract base class, but it
     does not have to be overridden in non-abstract derived classes.

     The *note __subclasshook__(): 2404. class method defined here says
     that any class that has an *note __iter__(): 8b6. method in its
     *note __dict__: 6fe. (or in that of one of its base classes,
     accessed via the *note __mro__: 88f. list) is considered a
     ‘MyIterable’ too.

     Finally, the last line makes ‘Foo’ a virtual subclass of
     ‘MyIterable’, even though it does not define an *note __iter__():
     8b6. method (it uses the old-style iterable protocol, defined in
     terms of *note __len__(): 40a. and *note __getitem__(): 44f.).
     Note that this will not make ‘get_iterator’ available as a method
     of ‘Foo’, so it is provided separately.

  It also provides the following decorators:

 -- Function: abc.abstractmethod (function)

     A decorator indicating abstract methods.

     Using this decorator requires that the class’s metaclass is *note
     ABCMeta: 71d. or is derived from it.  A class that has a metaclass
     derived from *note ABCMeta: 71d. cannot be instantiated unless all
     of its abstract methods and properties are overridden.  The
     abstract methods can be called using any of the normal ’super’ call
     mechanisms.

     Dynamically adding abstract methods to a class, or attempting to
     modify the abstraction status of a method or class once it is
     created, are not supported.  The *note abstractmethod(): 2405. only
     affects subclasses derived using regular inheritance; "virtual
     subclasses" registered with the ABC’s ‘register()’ method are not
     affected.

     Usage:

          class C:
              __metaclass__ = ABCMeta
              @abstractmethod
              def my_abstract_method(self, ...):
                  ...

          Note: Unlike Java abstract methods, these abstract methods may
          have an implementation.  This implementation can be called via
          the *note super(): 37d. mechanism from the class that
          overrides it.  This could be useful as an end-point for a
          super-call in a framework that uses cooperative
          multiple-inheritance.

 -- Function: abc.abstractproperty ([fget[, fset[, fdel[, doc]]]])

     A subclass of the built-in *note property(): 487, indicating an
     abstract property.

     Using this function requires that the class’s metaclass is *note
     ABCMeta: 71d. or is derived from it.  A class that has a metaclass
     derived from *note ABCMeta: 71d. cannot be instantiated unless all
     of its abstract methods and properties are overridden.  The
     abstract properties can be called using any of the normal ’super’
     call mechanisms.

     Usage:

          class C:
              __metaclass__ = ABCMeta
              @abstractproperty
              def my_abstract_property(self):
                  ...

     This defines a read-only property; you can also define a read-write
     abstract property using the ’long’ form of property declaration:

          class C:
              __metaclass__ = ABCMeta
              def getx(self): ...
              def setx(self, value): ...
              x = abstractproperty(getx, setx)

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/abc.py

   (2) http://www.python.org/dev/peps/pep-3119

   (3) http://www.python.org/dev/peps/pep-3141

   (4) C++ programmers should note that Python’s virtual base class
concept is not the same as C++’s.


File: python.info,  Node: atexit --- Exit handlers,  Next: traceback --- Print or retrieve a stack traceback,  Prev: abc --- Abstract Base Classes,  Up: Python Runtime Services

5.27.9 ‘atexit’ — Exit handlers
-------------------------------

New in version 2.0.

  *Source code:* Lib/atexit.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note atexit: 12. module defines a single function to register
cleanup functions.  Functions thus registered are automatically executed
upon normal interpreter termination.  *note atexit: 12. runs these
functions in the _reverse_ order in which they were registered; if you
register ‘A’, ‘B’, and ‘C’, at interpreter termination time they will be
run in the order ‘C’, ‘B’, ‘A’.

  *Note:* The functions registered via this module are not called when
the program is killed by a signal not handled by Python, when a Python
fatal internal error is detected, or when *note os._exit(): 951. is
called.

  This is an alternate interface to the functionality provided by the
*note sys.exitfunc(): 40e. variable.

  Note: This module is unlikely to work correctly when used with other
code that sets ‘sys.exitfunc’.  In particular, other core Python modules
are free to use *note atexit: 12. without the programmer’s knowledge.
Authors who use ‘sys.exitfunc’ should convert their code to use *note
atexit: 12. instead.  The simplest way to convert code that sets
‘sys.exitfunc’ is to import *note atexit: 12. and register the function
that had been bound to ‘sys.exitfunc’.

 -- Function: atexit.register (func[, *args[, **kargs]])

     Register _func_ as a function to be executed at termination.  Any
     optional arguments that are to be passed to _func_ must be passed
     as arguments to *note register(): 4f1.  It is possible to register
     the same function and arguments more than once.

     At normal program termination (for instance, if *note sys.exit():
     2a7. is called or the main module’s execution completes), all
     functions registered are called in last in, first out order.  The
     assumption is that lower level modules will normally be imported
     before higher level modules and thus must be cleaned up later.

     If an exception is raised during execution of the exit handlers, a
     traceback is printed (unless *note SystemExit: 332. is raised) and
     the exception information is saved.  After all exit handlers have
     had a chance to run the last exception to be raised is re-raised.

     Changed in version 2.6: This function now returns _func_, which
     makes it possible to use it as a decorator.

See also
........

Module *note readline: 144.

     Useful example of *note atexit: 12. to read and write *note
     readline: 144. history files.

* Menu:

* atexit Example:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/atexit.py


File: python.info,  Node: atexit Example,  Up: atexit --- Exit handlers

5.27.9.1 ‘atexit’ Example
.........................

The following simple example demonstrates how a module can initialize a
counter from a file when it is imported and save the counter’s updated
value automatically when the program terminates without relying on the
application making an explicit call into this module at termination.

     try:
         _count = int(open("counter").read())
     except IOError:
         _count = 0

     def incrcounter(n):
         global _count
         _count = _count + n

     def savecounter():
         open("counter", "w").write("%d" % _count)

     import atexit
     atexit.register(savecounter)

  Positional and keyword arguments may also be passed to *note
register(): 4f1. to be passed along to the registered function when it
is called:

     def goodbye(name, adjective):
         print 'Goodbye, %s, it was %s to meet you.' % (name, adjective)

     import atexit
     atexit.register(goodbye, 'Donny', 'nice')

     # or:
     atexit.register(goodbye, adjective='nice', name='Donny')

  Usage as a *note decorator: 856.:

     import atexit

     @atexit.register
     def goodbye():
         print "You are now leaving the Python sector."

  This only works with functions that can be called without arguments.


File: python.info,  Node: traceback --- Print or retrieve a stack traceback,  Next: __future__ --- Future statement definitions,  Prev: atexit --- Exit handlers,  Up: Python Runtime Services

5.27.10 ‘traceback’ — Print or retrieve a stack traceback
---------------------------------------------------------

This module provides a standard interface to extract, format and print
stack traces of Python programs.  It exactly mimics the behavior of the
Python interpreter when it prints a stack trace.  This is useful when
you want to print stack traces under program control, such as in a
"wrapper" around the interpreter.

  The module uses traceback objects — this is the object type that is
stored in the variables *note sys.exc_traceback: 22d5. (deprecated) and
*note sys.last_traceback: 2337. and returned as the third item from
*note sys.exc_info(): 2f3.

  The module defines the following functions:

 -- Function: traceback.print_tb (traceback[, limit[, file]])

     Print up to _limit_ stack trace entries from _traceback_.  If
     _limit_ is omitted or ‘None’, all entries are printed.  If _file_
     is omitted or ‘None’, the output goes to ‘sys.stderr’; otherwise it
     should be an open file or file-like object to receive the output.

 -- Function: traceback.print_exception (type, value, traceback[,
          limit[, file]])

     Print exception information and up to _limit_ stack trace entries
     from _traceback_ to _file_.  This differs from *note print_tb():
     240d. in the following ways: (1) if _traceback_ is not ‘None’, it
     prints a header ‘Traceback (most recent call last):’; (2) it prints
     the exception _type_ and _value_ after the stack trace; (3) if
     _type_ is *note SyntaxError: 498. and _value_ has the appropriate
     format, it prints the line where the syntax error occurred with a
     caret indicating the approximate position of the error.

 -- Function: traceback.print_exc ([limit[, file]])

     This is a shorthand for ‘print_exception(sys.exc_type,
     sys.exc_value, sys.exc_traceback, limit, file)’.  (In fact, it uses
     *note sys.exc_info(): 2f3. to retrieve the same information in a
     thread-safe way instead of using the deprecated variables.)

 -- Function: traceback.format_exc ([limit])

     This is like ‘print_exc(limit)’ but returns a string instead of
     printing to a file.

     New in version 2.4.

 -- Function: traceback.print_last ([limit[, file]])

     This is a shorthand for ‘print_exception(sys.last_type,
     sys.last_value, sys.last_traceback, limit, file)’.  In general it
     will work only after an exception has reached an interactive prompt
     (see *note sys.last_type: 23c1.).

 -- Function: traceback.print_stack ([f[, limit[, file]]])

     This function prints a stack trace from its invocation point.  The
     optional _f_ argument can be used to specify an alternate stack
     frame to start.  The optional _limit_ and _file_ arguments have the
     same meaning as for *note print_exception(): 12f1.

 -- Function: traceback.extract_tb (traceback[, limit])

     Return a list of up to _limit_ "pre-processed" stack trace entries
     extracted from the traceback object _traceback_.  It is useful for
     alternate formatting of stack traces.  If _limit_ is omitted or
     ‘None’, all entries are extracted.  A "pre-processed" stack trace
     entry is a 4-tuple (_filename_, _line number_, _function name_,
     _text_) representing the information that is usually printed for a
     stack trace.  The _text_ is a string with leading and trailing
     whitespace stripped; if the source is not available it is ‘None’.

 -- Function: traceback.extract_stack ([f[, limit]])

     Extract the raw traceback from the current stack frame.  The return
     value has the same format as for *note extract_tb(): 2412.  The
     optional _f_ and _limit_ arguments have the same meaning as for
     *note print_stack(): 2411.

 -- Function: traceback.format_list (list)

     Given a list of tuples as returned by *note extract_tb(): 2412. or
     *note extract_stack(): 2413, return a list of strings ready for
     printing.  Each string in the resulting list corresponds to the
     item with the same index in the argument list.  Each string ends in
     a newline; the strings may contain internal newlines as well, for
     those items whose source text line is not ‘None’.

 -- Function: traceback.format_exception_only (type, value)

     Format the exception part of a traceback.  The arguments are the
     exception type and value such as given by ‘sys.last_type’ and
     ‘sys.last_value’.  The return value is a list of strings, each
     ending in a newline.  Normally, the list contains a single string;
     however, for *note SyntaxError: 498. exceptions, it contains
     several lines that (when printed) display detailed information
     about where the syntax error occurred.  The message indicating
     which exception occurred is the always last string in the list.

 -- Function: traceback.format_exception (type, value, tb[, limit])

     Format a stack trace and the exception information.  The arguments
     have the same meaning as the corresponding arguments to *note
     print_exception(): 12f1.  The return value is a list of strings,
     each ending in a newline and some containing internal newlines.
     When these lines are concatenated and printed, exactly the same
     text is printed as does *note print_exception(): 12f1.

 -- Function: traceback.format_tb (tb[, limit])

     A shorthand for ‘format_list(extract_tb(tb, limit))’.

 -- Function: traceback.format_stack ([f[, limit]])

     A shorthand for ‘format_list(extract_stack(f, limit))’.

 -- Function: traceback.tb_lineno (tb)

     This function returns the current line number set in the traceback
     object.  This function was necessary because in versions of Python
     prior to 2.3 when the *note -O: 453. flag was passed to Python the
     ‘tb.tb_lineno’ was not updated correctly.  This function has no use
     in versions past 2.3.

* Menu:

* Traceback Examples:: 


File: python.info,  Node: Traceback Examples,  Up: traceback --- Print or retrieve a stack traceback

5.27.10.1 Traceback Examples
............................

This simple example implements a basic read-eval-print loop, similar to
(but less useful than) the standard Python interactive interpreter loop.
For a more complete implementation of the interpreter loop, refer to the
*note code: 62. module.

     import sys, traceback

     def run_user_code(envdir):
         source = raw_input(">>> ")
         try:
             exec source in envdir
         except:
             print "Exception in user code:"
             print '-'*60
             traceback.print_exc(file=sys.stdout)
             print '-'*60

     envdir = {}
     while 1:
         run_user_code(envdir)

  The following example demonstrates the different ways to print and
format the exception and traceback:

     import sys, traceback

     def lumberjack():
         bright_side_of_death()

     def bright_side_of_death():
         return tuple()[0]

     try:
         lumberjack()
     except IndexError:
         exc_type, exc_value, exc_traceback = sys.exc_info()
         print "*** print_tb:"
         traceback.print_tb(exc_traceback, limit=1, file=sys.stdout)
         print "*** print_exception:"
         traceback.print_exception(exc_type, exc_value, exc_traceback,
                                   limit=2, file=sys.stdout)
         print "*** print_exc:"
         traceback.print_exc()
         print "*** format_exc, first and last line:"
         formatted_lines = traceback.format_exc().splitlines()
         print formatted_lines[0]
         print formatted_lines[-1]
         print "*** format_exception:"
         print repr(traceback.format_exception(exc_type, exc_value,
                                               exc_traceback))
         print "*** extract_tb:"
         print repr(traceback.extract_tb(exc_traceback))
         print "*** format_tb:"
         print repr(traceback.format_tb(exc_traceback))
         print "*** tb_lineno:", exc_traceback.tb_lineno

  The output for the example would look similar to this:

     *** print_tb:
       File "<doctest...>", line 10, in <module>
         lumberjack()
     *** print_exception:
     Traceback (most recent call last):
       File "<doctest...>", line 10, in <module>
         lumberjack()
       File "<doctest...>", line 4, in lumberjack
         bright_side_of_death()
     IndexError: tuple index out of range
     *** print_exc:
     Traceback (most recent call last):
       File "<doctest...>", line 10, in <module>
         lumberjack()
       File "<doctest...>", line 4, in lumberjack
         bright_side_of_death()
     IndexError: tuple index out of range
     *** format_exc, first and last line:
     Traceback (most recent call last):
     IndexError: tuple index out of range
     *** format_exception:
     ['Traceback (most recent call last):\n',
      '  File "<doctest...>", line 10, in <module>\n    lumberjack()\n',
      '  File "<doctest...>", line 4, in lumberjack\n    bright_side_of_death()\n',
      '  File "<doctest...>", line 7, in bright_side_of_death\n    return tuple()[0]\n',
      'IndexError: tuple index out of range\n']
     *** extract_tb:
     [('<doctest...>', 10, '<module>', 'lumberjack()'),
      ('<doctest...>', 4, 'lumberjack', 'bright_side_of_death()'),
      ('<doctest...>', 7, 'bright_side_of_death', 'return tuple()[0]')]
     *** format_tb:
     ['  File "<doctest...>", line 10, in <module>\n    lumberjack()\n',
      '  File "<doctest...>", line 4, in lumberjack\n    bright_side_of_death()\n',
      '  File "<doctest...>", line 7, in bright_side_of_death\n    return tuple()[0]\n']
     *** tb_lineno: 10

  The following example shows the different ways to print and format the
stack:

     >>> import traceback
     >>> def another_function():
     ...     lumberstack()
     ...
     >>> def lumberstack():
     ...     traceback.print_stack()
     ...     print repr(traceback.extract_stack())
     ...     print repr(traceback.format_stack())
     ...
     >>> another_function()
       File "<doctest>", line 10, in <module>
         another_function()
       File "<doctest>", line 3, in another_function
         lumberstack()
       File "<doctest>", line 6, in lumberstack
         traceback.print_stack()
     [('<doctest>', 10, '<module>', 'another_function()'),
      ('<doctest>', 3, 'another_function', 'lumberstack()'),
      ('<doctest>', 7, 'lumberstack', 'print repr(traceback.extract_stack())')]
     ['  File "<doctest>", line 10, in <module>\n    another_function()\n',
      '  File "<doctest>", line 3, in another_function\n    lumberstack()\n',
      '  File "<doctest>", line 8, in lumberstack\n    print repr(traceback.format_stack())\n']

  This last example demonstrates the final few formatting functions:

     >>> import traceback
     >>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),
     ...                        ('eggs.py', 42, 'eggs', 'return "bacon"')])
     ['  File "spam.py", line 3, in <module>\n    spam.eggs()\n',
      '  File "eggs.py", line 42, in eggs\n    return "bacon"\n']
     >>> an_error = IndexError('tuple index out of range')
     >>> traceback.format_exception_only(type(an_error), an_error)
     ['IndexError: tuple index out of range\n']


File: python.info,  Node: __future__ --- Future statement definitions,  Next: gc --- Garbage Collector interface,  Prev: traceback --- Print or retrieve a stack traceback,  Up: Python Runtime Services

5.27.11 ‘__future__’ — Future statement definitions
---------------------------------------------------

*Source code:* Lib/__future__.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  *note __future__: 1. is a real module, and serves three purposes:

   * To avoid confusing existing tools that analyze import statements
     and expect to find the modules they’re importing.

   * To ensure that *note future statements: 82b. run under releases
     prior to 2.1 at least yield runtime exceptions (the import of *note
     __future__: 1. will fail, because there was no module of that name
     prior to 2.1).

   * To document when incompatible changes were introduced, and when
     they will be — or were — made mandatory.  This is a form of
     executable documentation, and can be inspected programmatically via
     importing *note __future__: 1. and examining its contents.

  Each statement in ‘__future__.py’ is of the form:

     FeatureName = _Feature(OptionalRelease, MandatoryRelease,
                            CompilerFlag)

  where, normally, _OptionalRelease_ is less than _MandatoryRelease_,
and both are 5-tuples of the same form as ‘sys.version_info’:

     (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
      PY_MINOR_VERSION, # the 1; an int
      PY_MICRO_VERSION, # the 0; an int
      PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
      PY_RELEASE_SERIAL # the 3; an int
     )

  _OptionalRelease_ records the first release in which the feature was
accepted.

  In the case of a _MandatoryRelease_ that has not yet occurred,
_MandatoryRelease_ predicts the release in which the feature will become
part of the language.

  Else _MandatoryRelease_ records when the feature became part of the
language; in releases at or after that, modules no longer need a future
statement to use the feature in question, but may continue to use such
imports.

  _MandatoryRelease_ may also be ‘None’, meaning that a planned feature
got dropped.

  Instances of class ‘_Feature’ have two corresponding methods,
‘getOptionalRelease()’ and ‘getMandatoryRelease()’.

  _CompilerFlag_ is the (bitfield) flag that should be passed in the
fourth argument to the built-in function *note compile(): 1fb. to enable
the feature in dynamically compiled code.  This flag is stored in the
‘compiler_flag’ attribute on ‘_Feature’ instances.

  No feature description will ever be deleted from *note __future__: 1.
Since its introduction in Python 2.1 the following features have found
their way into the language using this mechanism:

feature                optional in       mandatory in       effect
                                                            
--------------------------------------------------------------------------------------------------------------
                                                            
nested_scopes          2.1.0b1           2.2                PEP 227(2): _Statically Nested Scopes_
                                                            
                                                            
generators             2.2.0a1           2.3                PEP 255(3): _Simple Generators_
                                                            
                                                            
division               2.2.0a2           3.0                PEP 238(4): _Changing the Division Operator_
                                                            
                                                            
absolute_import        2.5.0a1           3.0                PEP 328(5): _Imports: Multi-Line and
                                                            Absolute/Relative_
                                                            
                                                            
with_statement         2.5.0a1           2.6                PEP 343(6): _The "with" Statement_
                                                            
                                                            
print_function         2.6.0a2           3.0                PEP 3105(7): _Make print a function_
                                                            
                                                            
unicode_literals       2.6.0a2           3.0                PEP 3112(8): _Bytes literals in Python 3000_
                                                            

See also
........

*note Future statements: 82b.

     How the compiler treats future imports.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/__future__.py

   (2) http://www.python.org/dev/peps/pep-0227

   (3) http://www.python.org/dev/peps/pep-0255

   (4) http://www.python.org/dev/peps/pep-0238

   (5) http://www.python.org/dev/peps/pep-0328

   (6) http://www.python.org/dev/peps/pep-0343

   (7) http://www.python.org/dev/peps/pep-3105

   (8) http://www.python.org/dev/peps/pep-3112


File: python.info,  Node: gc --- Garbage Collector interface,  Next: inspect --- Inspect live objects,  Prev: __future__ --- Future statement definitions,  Up: Python Runtime Services

5.27.12 ‘gc’ — Garbage Collector interface
------------------------------------------

This module provides an interface to the optional garbage collector.  It
provides the ability to disable the collector, tune the collection
frequency, and set debugging options.  It also provides access to
unreachable objects that the collector found but cannot free.  Since the
collector supplements the reference counting already used in Python, you
can disable the collector if you are sure your program does not create
reference cycles.  Automatic collection can be disabled by calling
‘gc.disable()’.  To debug a leaking program call
‘gc.set_debug(gc.DEBUG_LEAK)’.  Notice that this includes
‘gc.DEBUG_SAVEALL’, causing garbage-collected objects to be saved in
gc.garbage for inspection.

  The *note gc: db. module provides the following functions:

 -- Function: gc.enable ()

     Enable automatic garbage collection.

 -- Function: gc.disable ()

     Disable automatic garbage collection.

 -- Function: gc.isenabled ()

     Returns true if automatic collection is enabled.

 -- Function: gc.collect ([generation])

     With no arguments, run a full collection.  The optional argument
     _generation_ may be an integer specifying which generation to
     collect (from 0 to 2).  A *note ValueError: 236. is raised if the
     generation number is invalid.  The number of unreachable objects
     found is returned.

     Changed in version 2.5: The optional _generation_ argument was
     added.

     Changed in version 2.6: The free lists maintained for a number of
     built-in types are cleared whenever a full collection or collection
     of the highest generation (2) is run.  Not all items in some free
     lists may be freed due to the particular implementation, in
     particular *note int: 1f2. and *note float: 1eb.

 -- Function: gc.set_debug (flags)

     Set the garbage collection debugging flags.  Debugging information
     will be written to ‘sys.stderr’.  See below for a list of debugging
     flags which can be combined using bit operations to control
     debugging.

 -- Function: gc.get_debug ()

     Return the debugging flags currently set.

 -- Function: gc.get_objects ()

     Returns a list of all objects tracked by the collector, excluding
     the list returned.

     New in version 2.2.

 -- Function: gc.set_threshold (threshold0[, threshold1[, threshold2]])

     Set the garbage collection thresholds (the collection frequency).
     Setting _threshold0_ to zero disables collection.

     The GC classifies objects into three generations depending on how
     many collection sweeps they have survived.  New objects are placed
     in the youngest generation (generation ‘0’).  If an object survives
     a collection it is moved into the next older generation.  Since
     generation ‘2’ is the oldest generation, objects in that generation
     remain there after a collection.  In order to decide when to run,
     the collector keeps track of the number object allocations and
     deallocations since the last collection.  When the number of
     allocations minus the number of deallocations exceeds _threshold0_,
     collection starts.  Initially only generation ‘0’ is examined.  If
     generation ‘0’ has been examined more than _threshold1_ times since
     generation ‘1’ has been examined, then generation ‘1’ is examined
     as well.  Similarly, _threshold2_ controls the number of
     collections of generation ‘1’ before collecting generation ‘2’.

 -- Function: gc.get_count ()

     Return the current collection counts as a tuple of ‘(count0,
     count1, count2)’.

     New in version 2.5.

 -- Function: gc.get_threshold ()

     Return the current collection thresholds as a tuple of
     ‘(threshold0, threshold1, threshold2)’.

 -- Function: gc.get_referrers (*objs)

     Return the list of objects that directly refer to any of objs.
     This function will only locate those containers which support
     garbage collection; extension types which do refer to other objects
     but do not support garbage collection will not be found.

     Note that objects which have already been dereferenced, but which
     live in cycles and have not yet been collected by the garbage
     collector can be listed among the resulting referrers.  To get only
     currently live objects, call *note collect(): 3c0. before calling
     *note get_referrers(): 2428.

     Care must be taken when using objects returned by *note
     get_referrers(): 2428. because some of them could still be under
     construction and hence in a temporarily invalid state.  Avoid using
     *note get_referrers(): 2428. for any purpose other than debugging.

     New in version 2.2.

 -- Function: gc.get_referents (*objs)

     Return a list of objects directly referred to by any of the
     arguments.  The referents returned are those objects visited by the
     arguments’ C-level *note tp_traverse: 242a. methods (if any), and
     may not be all objects actually directly reachable.  *note
     tp_traverse: 242a. methods are supported only by objects that
     support garbage collection, and are only required to visit objects
     that may be involved in a cycle.  So, for example, if an integer is
     directly reachable from an argument, that integer object may or may
     not appear in the result list.

     New in version 2.3.

 -- Function: gc.is_tracked (obj)

     Returns ‘True’ if the object is currently tracked by the garbage
     collector, ‘False’ otherwise.  As a general rule, instances of
     atomic types aren’t tracked and instances of non-atomic types
     (containers, user-defined objects...)  are.  However, some
     type-specific optimizations can be present in order to suppress the
     garbage collector footprint of simple instances (e.g.  dicts
     containing only atomic keys and values):

          >>> gc.is_tracked(0)
          False
          >>> gc.is_tracked("a")
          False
          >>> gc.is_tracked([])
          True
          >>> gc.is_tracked({})
          False
          >>> gc.is_tracked({"a": 1})
          False
          >>> gc.is_tracked({"a": []})
          True

     New in version 2.7.

  The following variable is provided for read-only access (you can
mutate its value but should not rebind it):

 -- Data: gc.garbage

     A list of objects which the collector found to be unreachable but
     could not be freed (uncollectable objects).  By default, this list
     contains only objects with *note __del__(): 709. methods.  (1)
     Objects that have *note __del__(): 709. methods and are part of a
     reference cycle cause the entire reference cycle to be
     uncollectable, including objects not necessarily in the cycle but
     reachable only from it.  Python doesn’t collect such cycles
     automatically because, in general, it isn’t possible for Python to
     guess a safe order in which to run the *note __del__(): 709.
     methods.  If you know a safe order, you can force the issue by
     examining the _garbage_ list, and explicitly breaking cycles due to
     your objects within the list.  Note that these objects are kept
     alive even so by virtue of being in the _garbage_ list, so they
     should be removed from _garbage_ too.  For example, after breaking
     cycles, do ‘del gc.garbage[:]’ to empty the list.  It’s generally
     better to avoid the issue by not creating cycles containing objects
     with *note __del__(): 709. methods, and _garbage_ can be examined
     in that case to verify that no such cycles are being created.

     If *note DEBUG_SAVEALL: 242c. is set, then all unreachable objects
     will be added to this list rather than freed.

  The following constants are provided for use with *note set_debug():
2422.:

 -- Data: gc.DEBUG_STATS

     Print statistics during collection.  This information can be useful
     when tuning the collection frequency.

 -- Data: gc.DEBUG_COLLECTABLE

     Print information on collectable objects found.

 -- Data: gc.DEBUG_UNCOLLECTABLE

     Print information of uncollectable objects found (objects which are
     not reachable but cannot be freed by the collector).  These objects
     will be added to the ‘garbage’ list.

 -- Data: gc.DEBUG_INSTANCES

     When *note DEBUG_COLLECTABLE: 242e. or *note DEBUG_UNCOLLECTABLE:
     242f. is set, print information about instance objects found.

 -- Data: gc.DEBUG_OBJECTS

     When *note DEBUG_COLLECTABLE: 242e. or *note DEBUG_UNCOLLECTABLE:
     242f. is set, print information about objects other than instance
     objects found.

 -- Data: gc.DEBUG_SAVEALL

     When set, all unreachable objects found will be appended to
     _garbage_ rather than being freed.  This can be useful for
     debugging a leaking program.

 -- Data: gc.DEBUG_LEAK

     The debugging flags necessary for the collector to print
     information about a leaking program (equal to ‘DEBUG_COLLECTABLE |
     DEBUG_UNCOLLECTABLE | DEBUG_INSTANCES | DEBUG_OBJECTS |
     DEBUG_SAVEALL’).

   ---------- Footnotes ----------

   (1) Prior to Python 2.2, the list contained all instance objects in
unreachable cycles, not only those with *note __del__(): 709. methods.


File: python.info,  Node: inspect --- Inspect live objects,  Next: site --- Site-specific configuration hook,  Prev: gc --- Garbage Collector interface,  Up: Python Runtime Services

5.27.13 ‘inspect’ — Inspect live objects
----------------------------------------

New in version 2.1.

  *Source code:* Lib/inspect.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note inspect: f8. module provides several useful functions to
help get information about live objects such as modules, classes,
methods, functions, tracebacks, frame objects, and code objects.  For
example, it can help you examine the contents of a class, retrieve the
source code of a method, extract and format the argument list for a
function, or get all the information you need to display a detailed
traceback.

  There are four main kinds of services provided by this module: type
checking, getting source code, inspecting classes and functions, and
examining the interpreter stack.

* Menu:

* Types and members:: 
* Retrieving source code:: 
* Classes and functions: Classes and functions<2>. 
* The interpreter stack:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/inspect.py


File: python.info,  Node: Types and members,  Next: Retrieving source code,  Up: inspect --- Inspect live objects

5.27.13.1 Types and members
...........................

The *note getmembers(): 2437. function retrieves the members of an
object such as a class or module.  The sixteen functions whose names
begin with "is" are mainly provided as convenient choices for the second
argument to *note getmembers(): 2437.  They also help you determine when
you can expect to find the following special attributes:

Type            Attribute             Description                     Notes
                                                                      
----------------------------------------------------------------------------------
                                                                      
module          __doc__               documentation string
                                      
                                                                      
                __file__              filename (missing for
                                      built-in modules)
                                      
                                                                      
class           __doc__               documentation string
                                      
                                                                      
                __module__            name of module in which this
                                      class was defined
                                      
                                                                      
method          __doc__               documentation string
                                      
                                                                      
                __name__              name with which this method
                                      was defined
                                      
                                                                      
                im_class              class object that asked for     (1)
                                      this method                     
                                      
                                                                      
                im_func or __func__   function object containing
                                      implementation of method
                                      
                                                                      
                im_self or __self__   instance to which this method
                                      is bound, or ‘None’
                                      
                                                                      
function        __doc__               documentation string
                                      
                                                                      
                __name__              name with which this function
                                      was defined
                                      
                                                                      
                func_code             code object containing
                                      compiled function *note
                                      bytecode: 583.
                                      
                                                                      
                func_defaults         tuple of any default values
                                      for arguments
                                      
                                                                      
                func_doc              (same as __doc__)
                                      
                                                                      
                func_globals          global namespace in which
                                      this function was defined
                                      
                                                                      
                func_name             (same as __name__)
                                      
                                                                      
generator       __iter__              defined to support iteration
                                      over container
                                      
                                                                      
                close                 raises new GeneratorExit
                                      exception inside the
                                      generator to terminate the
                                      iteration
                                      
                                                                      
                gi_code               code object
                                      
                                                                      
                gi_frame              frame object or possibly None
                                      once the generator has been
                                      exhausted
                                      
                                                                      
                gi_running            set to 1 when generator is
                                      executing, 0 otherwise
                                      
                                                                      
                next                  return the next item from the
                                      container
                                      
                                                                      
                send                  resumes the generator and
                                      "sends" a value that becomes
                                      the result of the current
                                      yield-expression
                                      
                                                                      
                throw                 used to raise an exception
                                      inside the generator
                                      
                                                                      
traceback       tb_frame              frame object at this level
                                      
                                                                      
                tb_lasti              index of last attempted
                                      instruction in bytecode
                                      
                                                                      
                tb_lineno             current line number in Python
                                      source code
                                      
                                                                      
                tb_next               next inner traceback object
                                      (called by this level)
                                      
                                                                      
frame           f_back                next outer frame object (this
                                      frame’s caller)
                                      
                                                                      
                f_builtins            builtins namespace seen by
                                      this frame
                                      
                                                                      
                f_code                code object being executed in
                                      this frame
                                      
                                                                      
                f_exc_traceback       traceback if raised in this
                                      frame, or ‘None’
                                      
                                                                      
                f_exc_type            exception type if raised in
                                      this frame, or ‘None’
                                      
                                                                      
                f_exc_value           exception value if raised in
                                      this frame, or ‘None’
                                      
                                                                      
                f_globals             global namespace seen by this
                                      frame
                                      
                                                                      
                f_lasti               index of last attempted
                                      instruction in bytecode
                                      
                                                                      
                f_lineno              current line number in Python
                                      source code
                                      
                                                                      
                f_locals              local namespace seen by this
                                      frame
                                      
                                                                      
                f_restricted          0 or 1 if frame is in
                                      restricted execution mode
                                      
                                                                      
                f_trace               tracing function for this
                                      frame, or ‘None’
                                      
                                                                      
code            co_argcount           number of arguments (not
                                      including * or ** args)
                                      
                                                                      
                co_code               string of raw compiled
                                      bytecode
                                      
                                                                      
                co_consts             tuple of constants used in
                                      the bytecode
                                      
                                                                      
                co_filename           name of file in which this
                                      code object was created
                                      
                                                                      
                co_firstlineno        number of first line in
                                      Python source code
                                      
                                                                      
                co_flags              bitmap: 1=optimized ‘|’
                                      2=newlocals ‘|’ 4=*arg ‘|’
                                      8=**arg
                                      
                                                                      
                co_lnotab             encoded mapping of line
                                      numbers to bytecode indices
                                      
                                                                      
                co_name               name with which this code
                                      object was defined
                                      
                                                                      
                co_names              tuple of names of local
                                      variables
                                      
                                                                      
                co_nlocals            number of local variables
                                      
                                                                      
                co_stacksize          virtual machine stack space
                                      required
                                      
                                                                      
                co_varnames           tuple of names of arguments
                                      and local variables
                                      
                                                                      
builtin         __doc__               documentation string
                                      
                                                                      
                __name__              original name of this
                                      function or method
                                      
                                                                      
                __self__              instance to which a method is
                                      bound, or ‘None’
                                      

  Note:

  1. Changed in version 2.2: ‘im_class’ used to refer to the class that
     defined the method.

 -- Function: inspect.getmembers (object[, predicate])

     Return all the members of an object in a list of (name, value)
     pairs sorted by name.  If the optional _predicate_ argument is
     supplied, only members for which the predicate returns a true value
     are included.

          Note: *note getmembers(): 2437. does not return metaclass
          attributes when the argument is a class (this behavior is
          inherited from the *note dir(): 33a. function).

 -- Function: inspect.getmoduleinfo (path)

     Return a tuple of values that describe how Python will interpret
     the file identified by _path_ if it is a module, or ‘None’ if it
     would not be identified as a module.  The return tuple is ‘(name,
     suffix, mode, module_type)’, where _name_ is the name of the module
     without the name of any enclosing package, _suffix_ is the trailing
     part of the file name (which may not be a dot-delimited extension),
     _mode_ is the *note open(): 2d6. mode that would be used (‘'r'’ or
     ‘'rb'’), and _module_type_ is an integer giving the type of the
     module.  _module_type_ will have a value which can be compared to
     the constants defined in the *note imp: f5. module; see the
     documentation for that module for more information on module types.

     Changed in version 2.6: Returns a *note named tuple: a1f.
     ‘ModuleInfo(name, suffix, mode, module_type)’.

 -- Function: inspect.getmodulename (path)

     Return the name of the module named by the file _path_, without
     including the names of enclosing packages.  This uses the same
     algorithm as the interpreter uses when searching for modules.  If
     the name cannot be matched according to the interpreter’s rules,
     ‘None’ is returned.

 -- Function: inspect.ismodule (object)

     Return true if the object is a module.

 -- Function: inspect.isclass (object)

     Return true if the object is a class, whether built-in or created
     in Python code.

 -- Function: inspect.ismethod (object)

     Return true if the object is a bound method written in Python.

 -- Function: inspect.isfunction (object)

     Return true if the object is a Python function, which includes
     functions created by a *note lambda: 243e. expression.

 -- Function: inspect.isgeneratorfunction (object)

     Return true if the object is a Python generator function.

     New in version 2.6.

 -- Function: inspect.isgenerator (object)

     Return true if the object is a generator.

     New in version 2.6.

 -- Function: inspect.istraceback (object)

     Return true if the object is a traceback.

 -- Function: inspect.isframe (object)

     Return true if the object is a frame.

 -- Function: inspect.iscode (object)

     Return true if the object is a code.

 -- Function: inspect.isbuiltin (object)

     Return true if the object is a built-in function or a bound
     built-in method.

 -- Function: inspect.isroutine (object)

     Return true if the object is a user-defined or built-in function or
     method.

 -- Function: inspect.isabstract (object)

     Return true if the object is an abstract base class.

     New in version 2.6.

 -- Function: inspect.ismethoddescriptor (object)

     Return true if the object is a method descriptor, but not if *note
     ismethod(): 243c, *note isclass(): 243b, *note isfunction(): 243d.
     or *note isbuiltin(): 2444. are true.

     This is new as of Python 2.2, and, for example, is true of
     ‘int.__add__’.  An object passing this test has a ‘__get__’
     attribute but not a ‘__set__’ attribute, but beyond that the set of
     attributes varies.  ‘__name__’ is usually sensible, and ‘__doc__’
     often is.

     Methods implemented via descriptors that also pass one of the other
     tests return false from the *note ismethoddescriptor(): 2447. test,
     simply because the other tests promise more – you can, e.g., count
     on having the ‘im_func’ attribute (etc) when an object passes *note
     ismethod(): 243c.

 -- Function: inspect.isdatadescriptor (object)

     Return true if the object is a data descriptor.

     Data descriptors have both a ‘__get__’ and a ‘__set__’ attribute.
     Examples are properties (defined in Python), getsets, and members.
     The latter two are defined in C and there are more specific tests
     available for those types, which is robust across Python
     implementations.  Typically, data descriptors will also have
     ‘__name__’ and ‘__doc__’ attributes (properties, getsets, and
     members have both of these attributes), but this is not guaranteed.

     New in version 2.3.

 -- Function: inspect.isgetsetdescriptor (object)

     Return true if the object is a getset descriptor.

     *CPython implementation detail:* getsets are attributes defined in
     extension modules via ‘PyGetSetDef’ structures.  For Python
     implementations without such types, this method will always return
     ‘False’.

     New in version 2.5.

 -- Function: inspect.ismemberdescriptor (object)

     Return true if the object is a member descriptor.

     *CPython implementation detail:* Member descriptors are attributes
     defined in extension modules via *note PyMemberDef: 2c4.
     structures.  For Python implementations without such types, this
     method will always return ‘False’.

     New in version 2.5.


File: python.info,  Node: Retrieving source code,  Next: Classes and functions<2>,  Prev: Types and members,  Up: inspect --- Inspect live objects

5.27.13.2 Retrieving source code
................................

 -- Function: inspect.getdoc (object)

     Get the documentation string for an object, cleaned up with *note
     cleandoc(): 244e.

 -- Function: inspect.getcomments (object)

     Return in a single string any lines of comments immediately
     preceding the object’s source code (for a class, function, or
     method), or at the top of the Python source file (if the object is
     a module).

 -- Function: inspect.getfile (object)

     Return the name of the (text or binary) file in which an object was
     defined.  This will fail with a *note TypeError: 218. if the object
     is a built-in module, class, or function.

 -- Function: inspect.getmodule (object)

     Try to guess which module an object was defined in.

 -- Function: inspect.getsourcefile (object)

     Return the name of the Python source file in which an object was
     defined.  This will fail with a *note TypeError: 218. if the object
     is a built-in module, class, or function.

 -- Function: inspect.getsourcelines (object)

     Return a list of source lines and starting line number for an
     object.  The argument may be a module, class, method, function,
     traceback, frame, or code object.  The source code is returned as a
     list of the lines corresponding to the object and the line number
     indicates where in the original source file the first line of code
     was found.  An *note IOError: 1fa. is raised if the source code
     cannot be retrieved.

 -- Function: inspect.getsource (object)

     Return the text of the source code for an object.  The argument may
     be a module, class, method, function, traceback, frame, or code
     object.  The source code is returned as a single string.  An *note
     IOError: 1fa. is raised if the source code cannot be retrieved.

 -- Function: inspect.cleandoc (doc)

     Clean up indentation from docstrings that are indented to line up
     with blocks of code.  Any whitespace that can be uniformly removed
     from the second line onwards is removed.  Also, all tabs are
     expanded to spaces.

     New in version 2.6.


File: python.info,  Node: Classes and functions<2>,  Next: The interpreter stack,  Prev: Retrieving source code,  Up: inspect --- Inspect live objects

5.27.13.3 Classes and functions
...............................

 -- Function: inspect.getclasstree (classes[, unique])

     Arrange the given list of classes into a hierarchy of nested lists.
     Where a nested list appears, it contains classes derived from the
     class whose entry immediately precedes the list.  Each entry is a
     2-tuple containing a class and a tuple of its base classes.  If the
     _unique_ argument is true, exactly one entry appears in the
     returned structure for each class in the given list.  Otherwise,
     classes using multiple inheritance and their descendants will
     appear multiple times.

 -- Function: inspect.getargspec (func)

     Get the names and default values of a Python function’s arguments.
     A tuple of four things is returned: ‘(args, varargs, keywords,
     defaults)’.  _args_ is a list of the argument names (it may contain
     nested lists).  _varargs_ and _keywords_ are the names of the ‘*’
     and ‘**’ arguments or ‘None’.  _defaults_ is a tuple of default
     argument values or None if there are no default arguments; if this
     tuple has _n_ elements, they correspond to the last _n_ elements
     listed in _args_.

     Changed in version 2.6: Returns a *note named tuple: a1f.
     ‘ArgSpec(args, varargs, keywords, defaults)’.

 -- Function: inspect.getargvalues (frame)

     Get information about arguments passed into a particular frame.  A
     tuple of four things is returned: ‘(args, varargs, keywords,
     locals)’.  _args_ is a list of the argument names (it may contain
     nested lists).  _varargs_ and _keywords_ are the names of the ‘*’
     and ‘**’ arguments or ‘None’.  _locals_ is the locals dictionary of
     the given frame.

     Changed in version 2.6: Returns a *note named tuple: a1f.
     ‘ArgInfo(args, varargs, keywords, locals)’.

 -- Function: inspect.formatargspec (args[, varargs, varkw, defaults,
          formatarg, formatvarargs, formatvarkw, formatvalue, join])

     Format a pretty argument spec from the four values returned by
     *note getargspec(): 2458.  The format* arguments are the
     corresponding optional formatting functions that are called to turn
     names and values into strings.

 -- Function: inspect.formatargvalues (args[, varargs, varkw, locals,
          formatarg, formatvarargs, formatvarkw, formatvalue, join])

     Format a pretty argument spec from the four values returned by
     *note getargvalues(): 2459.  The format* arguments are the
     corresponding optional formatting functions that are called to turn
     names and values into strings.

 -- Function: inspect.getmro (cls)

     Return a tuple of class cls’s base classes, including cls, in
     method resolution order.  No class appears more than once in this
     tuple.  Note that the method resolution order depends on cls’s
     type.  Unless a very peculiar user-defined metatype is in use, cls
     will be the first element of the tuple.

 -- Function: inspect.getcallargs (func[, *args][, **kwds])

     Bind the _args_ and _kwds_ to the argument names of the Python
     function or method _func_, as if it was called with them.  For
     bound methods, bind also the first argument (typically named
     ‘self’) to the associated instance.  A dict is returned, mapping
     the argument names (including the names of the ‘*’ and ‘**’
     arguments, if any) to their values from _args_ and _kwds_.  In case
     of invoking _func_ incorrectly, i.e.  whenever ‘func(*args,
     **kwds)’ would raise an exception because of incompatible
     signature, an exception of the same type and the same or similar
     message is raised.  For example:

          >>> from inspect import getcallargs
          >>> def f(a, b=1, *pos, **named):
          ...     pass
          >>> getcallargs(f, 1, 2, 3)
          {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
          >>> getcallargs(f, a=2, x=4)
          {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
          >>> getcallargs(f)
          Traceback (most recent call last):
          ...
          TypeError: f() takes at least 1 argument (0 given)

     New in version 2.7.


File: python.info,  Node: The interpreter stack,  Prev: Classes and functions<2>,  Up: inspect --- Inspect live objects

5.27.13.4 The interpreter stack
...............................

When the following functions return "frame records," each record is a
tuple of six items: the frame object, the filename, the line number of
the current line, the function name, a list of lines of context from the
source code, and the index of the current line within that list.

     Note: Keeping references to frame objects, as found in the first
     element of the frame records these functions return, can cause your
     program to create reference cycles.  Once a reference cycle has
     been created, the lifespan of all objects which can be accessed
     from the objects which form the cycle can become much longer even
     if Python’s optional cycle detector is enabled.  If such cycles
     must be created, it is important to ensure they are explicitly
     broken to avoid the delayed destruction of objects and increased
     memory consumption which occurs.

     Though the cycle detector will catch these, destruction of the
     frames (and local variables) can be made deterministic by removing
     the cycle in a *note finally: 396. clause.  This is also important
     if the cycle detector was disabled when Python was compiled or
     using *note gc.disable(): 2420.  For example:

          def handle_stackframe_without_leak():
              frame = inspect.currentframe()
              try:
                  # do something with the frame
              finally:
                  del frame

  The optional _context_ argument supported by most of these functions
specifies the number of lines of context to return, which are centered
around the current line.

 -- Function: inspect.getframeinfo (frame[, context])

     Get information about a frame or traceback object.  A 5-tuple is
     returned, the last five elements of the frame’s frame record.

     Changed in version 2.6: Returns a *note named tuple: a1f.
     ‘Traceback(filename, lineno, function, code_context, index)’.

 -- Function: inspect.getouterframes (frame[, context])

     Get a list of frame records for a frame and all outer frames.
     These frames represent the calls that lead to the creation of
     _frame_.  The first entry in the returned list represents _frame_;
     the last entry represents the outermost call on _frame_’s stack.

 -- Function: inspect.getinnerframes (traceback[, context])

     Get a list of frame records for a traceback’s frame and all inner
     frames.  These frames represent calls made as a consequence of
     _frame_.  The first entry in the list represents _traceback_; the
     last entry represents where the exception was raised.

 -- Function: inspect.currentframe ()

     Return the frame object for the caller’s stack frame.

     *CPython implementation detail:* This function relies on Python
     stack frame support in the interpreter, which isn’t guaranteed to
     exist in all implementations of Python.  If running in an
     implementation without Python stack frame support this function
     returns ‘None’.

 -- Function: inspect.stack ([context])

     Return a list of frame records for the caller’s stack.  The first
     entry in the returned list represents the caller; the last entry
     represents the outermost call on the stack.

 -- Function: inspect.trace ([context])

     Return a list of frame records for the stack between the current
     frame and the frame in which an exception currently being handled
     was raised in.  The first entry in the list represents the caller;
     the last entry represents where the exception was raised.


File: python.info,  Node: site --- Site-specific configuration hook,  Next: user --- User-specific configuration hook,  Prev: inspect --- Inspect live objects,  Up: Python Runtime Services

5.27.14 ‘site’ — Site-specific configuration hook
-------------------------------------------------

*Source code:* Lib/site.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  *This module is automatically imported during initialization.*  The
automatic import can be suppressed using the interpreter’s *note -S:
641. option.

  Importing this module will append site-specific paths to the module
search path and add a few builtins.

  It starts by constructing up to four directories from a head and a
tail part.  For the head part, it uses ‘sys.prefix’ and
‘sys.exec_prefix’; empty heads are skipped.  For the tail part, it uses
the empty string and then ‘lib/site-packages’ (on Windows) or
‘lib/python_X.Y_/site-packages’ and then ‘lib/site-python’ (on Unix and
Macintosh).  For each of the distinct head-tail combinations, it sees if
it refers to an existing directory, and if so, adds it to ‘sys.path’ and
also inspects the newly added path for configuration files.

  A path configuration file is a file whose name has the form
‘_name_.pth’ and exists in one of the four directories mentioned above;
its contents are additional items (one per line) to be added to
‘sys.path’.  Non-existing items are never added to ‘sys.path’, and no
check is made that the item refers to a directory rather than a file.
No item is added to ‘sys.path’ more than once.  Blank lines and lines
beginning with ‘#’ are skipped.  Lines starting with ‘import’ (followed
by space or tab) are executed.

  Changed in version 2.6: A space or tab is now required after the
import keyword.

  For example, suppose ‘sys.prefix’ and ‘sys.exec_prefix’ are set to
‘/usr/local’.  The Python X.Y library is then installed in
‘/usr/local/lib/python_X.Y_’.  Suppose this has a subdirectory
‘/usr/local/lib/python_X.Y_/site-packages’ with three subsubdirectories,
‘foo’, ‘bar’ and ‘spam’, and two path configuration files, ‘foo.pth’ and
‘bar.pth’.  Assume ‘foo.pth’ contains the following:

     # foo package configuration

     foo
     bar
     bletch

  and ‘bar.pth’ contains:

     # bar package configuration

     bar

  Then the following version-specific directories are added to
‘sys.path’, in this order:

     /usr/local/lib/pythonX.Y/site-packages/bar
     /usr/local/lib/pythonX.Y/site-packages/foo

  Note that ‘bletch’ is omitted because it doesn’t exist; the ‘bar’
directory precedes the ‘foo’ directory because ‘bar.pth’ comes
alphabetically before ‘foo.pth’; and ‘spam’ is omitted because it is not
mentioned in either path configuration file.

  After these path manipulations, an attempt is made to import a module
named ‘sitecustomize’, which can perform arbitrary site-specific
customizations.  It is typically created by a system administrator in
the site-packages directory.  If this import fails with an *note
ImportError: 370. exception, it is silently ignored.  If Python is
started without output streams available, as with ‘pythonw.exe’ on
Windows (which is used by default to start IDLE), attempted output from
‘sitecustomize’ is ignored.  Any exception other than *note ImportError:
370. causes a silent and perhaps mysterious failure of the process.

  After this, an attempt is made to import a module named
‘usercustomize’, which can perform arbitrary user-specific
customizations, if *note ENABLE_USER_SITE: 2467. is true.  This file is
intended to be created in the user site-packages directory (see below),
which is part of ‘sys.path’ unless disabled by *note -s: 2ff.  An *note
ImportError: 370. will be silently ignored.

  Note that for some non-Unix systems, ‘sys.prefix’ and
‘sys.exec_prefix’ are empty, and the path manipulations are skipped;
however the import of ‘sitecustomize’ and ‘usercustomize’ is still
attempted.

 -- Data: site.PREFIXES

     A list of prefixes for site-packages directories.

     New in version 2.6.

 -- Data: site.ENABLE_USER_SITE

     Flag showing the status of the user site-packages directory.
     ‘True’ means that it is enabled and was added to ‘sys.path’.
     ‘False’ means that it was disabled by user request (with *note -s:
     2ff. or *note PYTHONNOUSERSITE: 300.).  ‘None’ means it was
     disabled for security reasons (mismatch between user or group id
     and effective id) or by an administrator.

     New in version 2.6.

 -- Data: site.USER_SITE

     Path to the user site-packages for the running Python.  Can be
     ‘None’ if *note getusersitepackages(): 24f. hasn’t been called yet.
     Default value is ‘~/.local/lib/python_X.Y_/site-packages’ for UNIX
     and non-framework Mac OS X builds,
     ‘~/Library/Python/_X.Y_/lib/python/site-packages’ for Mac framework
     builds, and ‘_%APPDATA%_\Python\Python_XY_\site-packages’ on
     Windows.  This directory is a site directory, which means that
     ‘.pth’ files in it will be processed.

     New in version 2.6.

 -- Data: site.USER_BASE

     Path to the base directory for the user site-packages.  Can be
     ‘None’ if *note getuserbase(): 250. hasn’t been called yet.
     Default value is ‘~/.local’ for UNIX and Mac OS X non-framework
     builds, ‘~/Library/Python/_X.Y_’ for Mac framework builds, and
     ‘_%APPDATA%_\Python’ for Windows.  This value is used by Distutils
     to compute the installation directories for scripts, data files,
     Python modules, etc.  for the *note user installation scheme: 654.
     See also *note PYTHONUSERBASE: 2fe.

     New in version 2.6.

 -- Function: site.addsitedir (sitedir, known_paths=None)

     Add a directory to sys.path and process its ‘.pth’ files.
     Typically used in ‘sitecustomize’ or ‘usercustomize’ (see above).

 -- Function: site.getsitepackages ()

     Return a list containing all global site-packages directories (and
     possibly site-python).

     New in version 2.7.

 -- Function: site.getuserbase ()

     Return the path of the user base directory, *note USER_BASE: 653.
     If it is not initialized yet, this function will also set it,
     respecting *note PYTHONUSERBASE: 2fe.

     New in version 2.7.

 -- Function: site.getusersitepackages ()

     Return the path of the user-specific site-packages directory, *note
     USER_SITE: 640.  If it is not initialized yet, this function will
     also set it, respecting *note PYTHONNOUSERSITE: 300. and *note
     USER_BASE: 653.

     New in version 2.7.

  The *note site: 158. module also provides a way to get the user
directories from the command line:

     $ python -m site --user-site
     /home/user/.local/lib/python2.7/site-packages

  If it is called without arguments, it will print the contents of *note
sys.path: 57f. on the standard output, followed by the value of *note
USER_BASE: 653. and whether the directory exists, then the same thing
for *note USER_SITE: 640, and finally the value of *note
ENABLE_USER_SITE: 2467.

 -- Program Option: --user-base

     Print the path to the user base directory.

 -- Program Option: --user-site

     Print the path to the user site-packages directory.

  If both options are given, user base and user site will be printed
(always in this order), separated by *note os.pathsep: 64d.

  If any option is given, the script will exit with one of these values:
‘O’ if the user site-packages directory is enabled, ‘1’ if it was
disabled by the user, ‘2’ if it is disabled for security reasons or by
an administrator, and a value greater than 2 if there is an error.

See also
........

PEP 370(2) – Per user site-packages directory

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/site.py

   (2) http://www.python.org/dev/peps/pep-0370


File: python.info,  Node: user --- User-specific configuration hook,  Next: fpectl --- Floating point exception control,  Prev: site --- Site-specific configuration hook,  Up: Python Runtime Services

5.27.15 ‘user’ — User-specific configuration hook
-------------------------------------------------

Deprecated since version 2.6: The *note user: 18b. module has been
removed in Python 3.

  As a policy, Python doesn’t run user-specified code on startup of
Python programs.  (Only interactive sessions execute the script
specified in the *note PYTHONSTARTUP: 514. environment variable if it
exists).

  However, some programs or sites may find it convenient to allow users
to have a standard customization file, which gets run when a program
requests it.  This module implements such a mechanism.  A program that
wishes to use the mechanism must execute the statement

     import user

  The *note user: 18b. module looks for a file ‘.pythonrc.py’ in the
user’s home directory and if it can be opened, executes it (using *note
execfile(): 436.) in its own (the module *note user: 18b.’s) global
namespace.  Errors during this phase are not caught; that’s up to the
program that imports the *note user: 18b. module, if it wishes.  The
home directory is assumed to be named by the ‘HOME’ environment
variable; if this is not set, the current directory is used.

  The user’s ‘.pythonrc.py’ could conceivably test for ‘sys.version’ if
it wishes to do different things depending on the Python version.

  A warning to users: be very conservative in what you place in your
‘.pythonrc.py’ file.  Since you don’t know which programs will use it,
changing the behavior of standard modules or functions is generally not
a good idea.

  A suggestion for programmers who wish to use this mechanism: a simple
way to let users specify options for your package is to have them define
variables in their ‘.pythonrc.py’ file that you test in your module.
For example, a module ‘spam’ that has a verbosity level can look for a
variable ‘user.spam_verbose’, as follows:

     import user

     verbose = bool(getattr(user, "spam_verbose", 0))

  (The three-argument form of *note getattr(): 875. is used in case the
user has not defined ‘spam_verbose’ in their ‘.pythonrc.py’ file.)

  Programs with extensive customization needs are better off reading a
program-specific customization file.

  Programs with security or privacy concerns should _not_ import this
module; a user can easily break into a program by placing arbitrary code
in the ‘.pythonrc.py’ file.

  Modules for general use should _not_ import this module; it may
interfere with the operation of the importing program.

See also
........

Module *note site: 158.

     Site-wide customization mechanism.


File: python.info,  Node: fpectl --- Floating point exception control,  Next: distutils --- Building and installing Python modules,  Prev: user --- User-specific configuration hook,  Up: Python Runtime Services

5.27.16 ‘fpectl’ — Floating point exception control
---------------------------------------------------

     Note: The *note fpectl: d4. module is not built by default, and its
     usage is discouraged and may be dangerous except in the hands of
     experts.  See also the section *note Limitations and other
     considerations: 2470. on limitations for more details.

  Most computers carry out floating point operations in conformance with
the so-called IEEE-754 standard.  On any real computer, some floating
point operations produce results that cannot be expressed as a normal
floating point value.  For example, try

     >>> import math
     >>> math.exp(1000)
     inf
     >>> math.exp(1000) / math.exp(1000)
     nan

  (The example above will work on many platforms.  DEC Alpha may be one
exception.)  "Inf" is a special, non-numeric value in IEEE-754 that
stands for "infinity", and "nan" means "not a number."  Note that, other
than the non-numeric results, nothing special happened when you asked
Python to carry out those calculations.  That is in fact the default
behaviour prescribed in the IEEE-754 standard, and if it works for you,
stop reading now.

  In some circumstances, it would be better to raise an exception and
stop processing at the point where the faulty operation was attempted.
The *note fpectl: d4. module is for use in that situation.  It provides
control over floating point units from several hardware manufacturers,
allowing the user to turn on the generation of ‘SIGFPE’ whenever any of
the IEEE-754 exceptions Division by Zero, Overflow, or Invalid Operation
occurs.  In tandem with a pair of wrapper macros that are inserted into
the C code comprising your python system, ‘SIGFPE’ is trapped and
converted into the Python *note FloatingPointError: 2471. exception.

  The *note fpectl: d4. module defines the following functions and may
raise the given exception:

 -- Function: fpectl.turnon_sigfpe ()

     Turn on the generation of ‘SIGFPE’, and set up an appropriate
     signal handler.

 -- Function: fpectl.turnoff_sigfpe ()

     Reset default handling of floating point exceptions.

 -- Exception: fpectl.FloatingPointError

     After *note turnon_sigfpe(): 2472. has been executed, a floating
     point operation that raises one of the IEEE-754 exceptions Division
     by Zero, Overflow, or Invalid operation will in turn raise this
     standard Python exception.

* Menu:

* Example: Example<14>. 
* Limitations and other considerations:: 


File: python.info,  Node: Example<14>,  Next: Limitations and other considerations,  Up: fpectl --- Floating point exception control

5.27.16.1 Example
.................

The following example demonstrates how to start up and test operation of
the *note fpectl: d4. module.

     >>> import fpectl
     >>> import fpetest
     >>> fpectl.turnon_sigfpe()
     >>> fpetest.test()
     overflow        PASS
     FloatingPointError: Overflow

     div by 0        PASS
     FloatingPointError: Division by zero
       [ more output from test elided ]
     >>> import math
     >>> math.exp(1000)
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
     FloatingPointError: in math_1


File: python.info,  Node: Limitations and other considerations,  Prev: Example<14>,  Up: fpectl --- Floating point exception control

5.27.16.2 Limitations and other considerations
..............................................

Setting up a given processor to trap IEEE-754 floating point errors
currently requires custom code on a per-architecture basis.  You may
have to modify *note fpectl: d4. to control your particular hardware.

  Conversion of an IEEE-754 exception to a Python exception requires
that the wrapper macros ‘PyFPE_START_PROTECT’ and ‘PyFPE_END_PROTECT’ be
inserted into your code in an appropriate fashion.  Python itself has
been modified to support the *note fpectl: d4. module, but many other
codes of interest to numerical analysts have not.

  The *note fpectl: d4. module is not thread-safe.

See also
........

Some files in the source distribution may be interesting in learning
more about how this module operates.  The include file
Include/pyfpe.h(1) discusses the implementation of this module at some
length.  Modules/fpetestmodule.c(2) gives several examples of use.  Many
additional examples can be found in Objects/floatobject.c(3).

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Include/pyfpe.h

   (2) http://hg.python.org/cpython/file/2.7/Modules/fpetestmodule.c

   (3) http://hg.python.org/cpython/file/2.7/Objects/floatobject.c


File: python.info,  Node: distutils --- Building and installing Python modules,  Prev: fpectl --- Floating point exception control,  Up: Python Runtime Services

5.27.17 ‘distutils’ — Building and installing Python modules
------------------------------------------------------------

The *note distutils: 85. package provides support for building and
installing additional modules into a Python installation.  The new
modules may be either 100%-pure Python, or may be extension modules
written in C, or may be collections of Python packages which include
modules coded in both Python and C.

  This package is discussed in two separate chapters:

See also
........

*note Distributing Python Modules: 2479.

     The manual for developers and packagers of Python modules.  This
     describes how to prepare *note distutils: 85.-based packages so
     that they may be easily installed into an existing Python
     installation.

*note Installing Python Modules: 617.

     An "administrators" manual which includes information on installing
     modules into an existing Python installation.  You do not need to
     be a Python programmer to read this manual.


File: python.info,  Node: Custom Python Interpreters,  Next: Restricted Execution,  Prev: Python Runtime Services,  Up: The Python Standard Library

5.28 Custom Python Interpreters
===============================

The modules described in this chapter allow writing interfaces similar
to Python’s interactive interpreter.  If you want a Python interpreter
that supports some special feature in addition to the Python language,
you should look at the *note code: 62. module.  (The *note codeop: 64.
module is lower-level, used to support compiling a possibly-incomplete
chunk of Python code.)

  The full list of modules described in this chapter is:

* Menu:

* code: code --- Interpreter base classes. Interpreter base classes
* codeop: codeop --- Compile Python code. Compile Python code

code — Interpreter base classes

* Interactive Interpreter Objects:: 
* Interactive Console Objects:: 


File: python.info,  Node: code --- Interpreter base classes,  Next: codeop --- Compile Python code,  Up: Custom Python Interpreters

5.28.1 ‘code’ — Interpreter base classes
----------------------------------------

The ‘code’ module provides facilities to implement read-eval-print loops
in Python.  Two classes and convenience functions are included which can
be used to build applications which provide an interactive interpreter
prompt.

 -- Class: code.InteractiveInterpreter ([locals])

     This class deals with parsing and interpreter state (the user’s
     namespace); it does not deal with input buffering or prompting or
     input file naming (the filename is always passed in explicitly).
     The optional _locals_ argument specifies the dictionary in which
     code will be executed; it defaults to a newly created dictionary
     with key ‘'__name__'’ set to ‘'__console__'’ and key ‘'__doc__'’
     set to ‘None’.

 -- Class: code.InteractiveConsole ([locals[, filename]])

     Closely emulate the behavior of the interactive Python interpreter.
     This class builds on *note InteractiveInterpreter: 247f. and adds
     prompting using the familiar ‘sys.ps1’ and ‘sys.ps2’, and input
     buffering.

 -- Function: code.interact ([banner[, readfunc[, local]]])

     Convenience function to run a read-eval-print loop.  This creates a
     new instance of *note InteractiveConsole: 16d5. and sets _readfunc_
     to be used as the *note InteractiveConsole.raw_input(): 2481.
     method, if provided.  If _local_ is provided, it is passed to the
     *note InteractiveConsole: 16d5. constructor for use as the default
     namespace for the interpreter loop.  The *note interact(): 2480.
     method of the instance is then run with _banner_ passed as the
     banner to use, if provided.  The console object is discarded after
     use.

 -- Function: code.compile_command (source[, filename[, symbol]])

     This function is useful for programs that want to emulate Python’s
     interpreter main loop (a.k.a.  the read-eval-print loop).  The
     tricky part is to determine when the user has entered an incomplete
     command that can be completed by entering more text (as opposed to
     a complete command or a syntax error).  This function _almost_
     always makes the same decision as the real interpreter main loop.

     _source_ is the source string; _filename_ is the optional filename
     from which source was read, defaulting to ‘'<input>'’; and _symbol_
     is the optional grammar start symbol, which should be either
     ‘'single'’ (the default) or ‘'eval'’.

     Returns a code object (the same as ‘compile(source, filename,
     symbol)’) if the command is complete and valid; ‘None’ if the
     command is incomplete; raises *note SyntaxError: 498. if the
     command is complete and contains a syntax error, or raises *note
     OverflowError: 2db. or *note ValueError: 236. if the command
     contains an invalid literal.

* Menu:

* Interactive Interpreter Objects:: 
* Interactive Console Objects:: 


File: python.info,  Node: Interactive Interpreter Objects,  Next: Interactive Console Objects,  Up: code --- Interpreter base classes

5.28.1.1 Interactive Interpreter Objects
........................................

 -- Method: InteractiveInterpreter.runsource (source[, filename[,
          symbol]])

     Compile and run some source in the interpreter.  Arguments are the
     same as for *note compile_command(): 2482.; the default for
     _filename_ is ‘'<input>'’, and for _symbol_ is ‘'single'’.  One
     several things can happen:

        * The input is incorrect; *note compile_command(): 2482. raised
          an exception (*note SyntaxError: 498. or *note OverflowError:
          2db.).  A syntax traceback will be printed by calling the
          *note showsyntaxerror(): 2486. method.  *note runsource():
          2485. returns ‘False’.

        * The input is incomplete, and more input is required; *note
          compile_command(): 2482. returned ‘None’.  *note runsource():
          2485. returns ‘True’.

        * The input is complete; *note compile_command(): 2482. returned
          a code object.  The code is executed by calling the *note
          runcode(): 2487. (which also handles run-time exceptions,
          except for *note SystemExit: 332.).  *note runsource(): 2485.
          returns ‘False’.

     The return value can be used to decide whether to use ‘sys.ps1’ or
     ‘sys.ps2’ to prompt the next line.

 -- Method: InteractiveInterpreter.runcode (code)

     Execute a code object.  When an exception occurs, *note
     showtraceback(): 2488. is called to display a traceback.  All
     exceptions are caught except *note SystemExit: 332, which is
     allowed to propagate.

     A note about *note KeyboardInterrupt: 251.: this exception may
     occur elsewhere in this code, and may not always be caught.  The
     caller should be prepared to deal with it.

 -- Method: InteractiveInterpreter.showsyntaxerror ([filename])

     Display the syntax error that just occurred.  This does not display
     a stack trace because there isn’t one for syntax errors.  If
     _filename_ is given, it is stuffed into the exception instead of
     the default filename provided by Python’s parser, because it always
     uses ‘'<string>'’ when reading from a string.  The output is
     written by the *note write(): 2489. method.

 -- Method: InteractiveInterpreter.showtraceback ()

     Display the exception that just occurred.  We remove the first
     stack item because it is within the interpreter object
     implementation.  The output is written by the *note write(): 2489.
     method.

 -- Method: InteractiveInterpreter.write (data)

     Write a string to the standard error stream (‘sys.stderr’).
     Derived classes should override this to provide the appropriate
     output handling as needed.


File: python.info,  Node: Interactive Console Objects,  Prev: Interactive Interpreter Objects,  Up: code --- Interpreter base classes

5.28.1.2 Interactive Console Objects
....................................

The *note InteractiveConsole: 16d5. class is a subclass of *note
InteractiveInterpreter: 247f, and so offers all the methods of the
interpreter objects as well as the following additions.

 -- Method: InteractiveConsole.interact ([banner])

     Closely emulate the interactive Python console.  The optional
     banner argument specify the banner to print before the first
     interaction; by default it prints a banner similar to the one
     printed by the standard Python interpreter, followed by the class
     name of the console object in parentheses (so as not to confuse
     this with the real interpreter – since it’s so close!).

 -- Method: InteractiveConsole.push (line)

     Push a line of source text to the interpreter.  The line should not
     have a trailing newline; it may have internal newlines.  The line
     is appended to a buffer and the interpreter’s ‘runsource()’ method
     is called with the concatenated contents of the buffer as source.
     If this indicates that the command was executed or invalid, the
     buffer is reset; otherwise, the command is incomplete, and the
     buffer is left as it was after the line was appended.  The return
     value is ‘True’ if more input is required, ‘False’ if the line was
     dealt with in some way (this is the same as ‘runsource()’).

 -- Method: InteractiveConsole.resetbuffer ()

     Remove any unhandled source text from the input buffer.

 -- Method: InteractiveConsole.raw_input ([prompt])

     Write a prompt and read a line.  The returned line does not include
     the trailing newline.  When the user enters the EOF key sequence,
     *note EOFError: 88a. is raised.  The base implementation uses the
     built-in function *note raw_input(): 869.; a subclass may replace
     this with a different implementation.


File: python.info,  Node: codeop --- Compile Python code,  Prev: code --- Interpreter base classes,  Up: Custom Python Interpreters

5.28.2 ‘codeop’ — Compile Python code
-------------------------------------

The *note codeop: 64. module provides utilities upon which the Python
read-eval-print loop can be emulated, as is done in the *note code: 62.
module.  As a result, you probably don’t want to use the module
directly; if you want to include such a loop in your program you
probably want to use the *note code: 62. module instead.

  There are two parts to this job:

  1. Being able to tell if a line of input completes a Python statement:
     in short, telling whether to print ’‘>>>’’ or ’‘...’’ next.

  2. Remembering which future statements the user has entered, so
     subsequent input can be compiled with these in effect.

  The *note codeop: 64. module provides a way of doing each of these
things, and a way of doing them both.

  To do just the former:

 -- Function: codeop.compile_command (source[, filename[, symbol]])

     Tries to compile _source_, which should be a string of Python code
     and return a code object if _source_ is valid Python code.  In that
     case, the filename attribute of the code object will be _filename_,
     which defaults to ‘'<input>'’.  Returns ‘None’ if _source_ is _not_
     valid Python code, but is a prefix of valid Python code.

     If there is a problem with _source_, an exception will be raised.
     *note SyntaxError: 498. is raised if there is invalid Python
     syntax, and *note OverflowError: 2db. or *note ValueError: 236. if
     there is an invalid literal.

     The _symbol_ argument determines whether _source_ is compiled as a
     statement (‘'single'’, the default) or as an *note expression:
     23b6. (‘'eval'’).  Any other value will cause *note ValueError:
     236. to be raised.

          Note: It is possible (but not likely) that the parser stops
          parsing with a successful outcome before reaching the end of
          the source; in this case, trailing symbols may be ignored
          instead of causing an error.  For example, a backslash
          followed by two newlines may be followed by arbitrary garbage.
          This will be fixed once the API for the parser is better.

 -- Class: codeop.Compile

     Instances of this class have *note __call__(): 6fa. methods
     identical in signature to the built-in function *note compile():
     1fb, but with the difference that if the instance compiles program
     text containing a *note __future__: 1. statement, the instance
     ’remembers’ and compiles all subsequent program texts with the
     statement in force.

 -- Class: codeop.CommandCompiler

     Instances of this class have *note __call__(): 6fa. methods
     identical in signature to *note compile_command(): 2491.; the
     difference is that if the instance compiles program text containing
     a ‘__future__’ statement, the instance ’remembers’ and compiles all
     subsequent program texts with the statement in force.

  A note on version compatibility: the *note Compile: 2492. and *note
CommandCompiler: 2493. are new in Python 2.2.  If you want to enable the
future-tracking features of 2.2 but also retain compatibility with 2.1
and earlier versions of Python you can either write

     try:
         from codeop import CommandCompiler
         compile_command = CommandCompiler()
         del CommandCompiler
     except ImportError:
         from codeop import compile_command

  which is a low-impact change, but introduces possibly unwanted global
state into your program, or you can write:

     try:
         from codeop import CommandCompiler
     except ImportError:
         def CommandCompiler():
             from codeop import compile_command
             return compile_command

  and then call ‘CommandCompiler’ every time you need a fresh compiler
object.


File: python.info,  Node: Restricted Execution,  Next: Importing Modules,  Prev: Custom Python Interpreters,  Up: The Python Standard Library

5.29 Restricted Execution
=========================

     Warning: In Python 2.3 these modules have been disabled due to
     various known and not readily fixable security holes.  The modules
     are still documented here to help in reading old code that uses the
     *note rexec: 147. and *note Bastion: 17. modules.

  _Restricted execution_ is the basic framework in Python that allows
for the segregation of trusted and untrusted code.  The framework is
based on the notion that trusted Python code (a _supervisor_) can create
a "padded cell’ (or environment) with limited permissions, and run the
untrusted code within this cell.  The untrusted code cannot break out of
its cell, and can only interact with sensitive system resources through
interfaces defined and managed by the trusted code.  The term
"restricted execution" is favored over "safe-Python" since true safety
is hard to define, and is determined by the way the restricted
environment is created.  Note that the restricted environments can be
nested, with inner cells creating subcells of lesser, but never greater,
privilege.

  An interesting aspect of Python’s restricted execution model is that
the interfaces presented to untrusted code usually have the same names
as those presented to trusted code.  Therefore no special interfaces
need to be learned to write code designed to run in a restricted
environment.  And because the exact nature of the padded cell is
determined by the supervisor, different restrictions can be imposed,
depending on the application.  For example, it might be deemed "safe"
for untrusted code to read any file within a specified directory, but
never to write a file.  In this case, the supervisor may redefine the
built-in *note open(): 2d6. function so that it raises an exception
whenever the _mode_ parameter is ‘'w'’.  It might also perform a
‘chroot()’-like operation on the _filename_ parameter, such that root is
always relative to some safe "sandbox" area of the filesystem.  In this
case, the untrusted code would still see an built-in *note open(): 2d6.
function in its environment, with the same calling interface.  The
semantics would be identical too, with *note IOError: 1fa.s being raised
when the supervisor determined that an unallowable parameter is being
used.

  The Python run-time determines whether a particular code block is
executing in restricted execution mode based on the identity of the
‘__builtins__’ object in its global variables: if this is (the
dictionary of) the standard *note __builtin__: 0. module, the code is
deemed to be unrestricted, else it is deemed to be restricted.

  Python code executing in restricted mode faces a number of limitations
that are designed to prevent it from escaping from the padded cell.  For
instance, the function object attribute ‘func_globals’ and the class and
instance object attribute ‘__dict__’ are unavailable.

  Two modules provide the framework for setting up restricted execution
environments:

* Menu:

* rexec: rexec --- Restricted execution framework. Restricted execution framework
* Bastion: Bastion --- Restricting access to objects. Restricting access to objects

rexec — Restricted execution framework

* RExec Objects:: 
* Defining restricted environments:: 
* An example:: 


File: python.info,  Node: rexec --- Restricted execution framework,  Next: Bastion --- Restricting access to objects,  Up: Restricted Execution

5.29.1 ‘rexec’ — Restricted execution framework
-----------------------------------------------

Deprecated since version 2.6: The *note rexec: 147. module has been
removed in Python 3.

  Changed in version 2.3: Disabled module.

     Warning: The documentation has been left in place to help in
     reading old code that uses the module.

  This module contains the *note RExec: 2499. class, which supports
‘r_eval()’, ‘r_execfile()’, ‘r_exec()’, and ‘r_import()’ methods, which
are restricted versions of the standard Python functions *note eval():
360, *note execfile(): 436. and the *note exec: 404. and *note import:
1f4. statements.  Code executed in this restricted environment will only
have access to modules and functions that are deemed safe; you can
subclass *note RExec: 2499. to add or remove capabilities as desired.

     Warning: While the *note rexec: 147. module is designed to perform
     as described below, it does have a few known vulnerabilities which
     could be exploited by carefully written code.  Thus it should not
     be relied upon in situations requiring "production ready" security.
     In such situations, execution via sub-processes or very careful
     "cleansing" of both code and data to be processed may be necessary.
     Alternatively, help in patching known *note rexec: 147.
     vulnerabilities would be welcomed.

     Note: The *note RExec: 2499. class can prevent code from performing
     unsafe operations like reading or writing disk files, or using
     TCP/IP sockets.  However, it does not protect against code using
     extremely large amounts of memory or processor time.

 -- Class: rexec.RExec ([hooks[, verbose]])

     Returns an instance of the *note RExec: 2499. class.

     _hooks_ is an instance of the ‘RHooks’ class or a subclass of it.
     If it is omitted or ‘None’, the default ‘RHooks’ class is
     instantiated.  Whenever the *note rexec: 147. module searches for a
     module (even a built-in one) or reads a module’s code, it doesn’t
     actually go out to the file system itself.  Rather, it calls
     methods of an ‘RHooks’ instance that was passed to or created by
     its constructor.  (Actually, the *note RExec: 2499. object doesn’t
     make these calls — they are made by a module loader object that’s
     part of the *note RExec: 2499. object.  This allows another level
     of flexibility, which can be useful when changing the mechanics of
     *note import: 1f4. within the restricted environment.)

     By providing an alternate ‘RHooks’ object, we can control the file
     system accesses made to import a module, without changing the
     actual algorithm that controls the order in which those accesses
     are made.  For instance, we could substitute an ‘RHooks’ object
     that passes all filesystem requests to a file server elsewhere, via
     some RPC mechanism such as ILU. Grail’s applet loader uses this to
     support importing applets from a URL for a directory.

     If _verbose_ is true, additional debugging output may be sent to
     standard output.

  It is important to be aware that code running in a restricted
environment can still call the *note sys.exit(): 2a7. function.  To
disallow restricted code from exiting the interpreter, always protect
calls that cause restricted code to run with a *note try: 395./*note
except: 397. statement that catches the *note SystemExit: 332.
exception.  Removing the *note sys.exit(): 2a7. function from the
restricted environment is not sufficient — the restricted code could
still use ‘raise SystemExit’.  Removing *note SystemExit: 332. is not a
reasonable option; some library code makes use of this and would break
were it not available.

See also
........

Grail Home Page(1)

     Grail is a Web browser written entirely in Python.  It uses the
     *note rexec: 147. module as a foundation for supporting Python
     applets, and can be used as an example usage of this module.

* Menu:

* RExec Objects:: 
* Defining restricted environments:: 
* An example:: 

   ---------- Footnotes ----------

   (1) http://grail.sourceforge.net/


File: python.info,  Node: RExec Objects,  Next: Defining restricted environments,  Up: rexec --- Restricted execution framework

5.29.1.1 RExec Objects
......................

*note RExec: 2499. instances support the following methods:

 -- Method: RExec.r_eval (code)

     _code_ must either be a string containing a Python expression, or a
     compiled code object, which will be evaluated in the restricted
     environment’s *note __main__: 2. module.  The value of the
     expression or code object will be returned.

 -- Method: RExec.r_exec (code)

     _code_ must either be a string containing one or more lines of
     Python code, or a compiled code object, which will be executed in
     the restricted environment’s *note __main__: 2. module.

 -- Method: RExec.r_execfile (filename)

     Execute the Python code contained in the file _filename_ in the
     restricted environment’s *note __main__: 2. module.

  Methods whose names begin with ‘s_’ are similar to the functions
beginning with ‘r_’, but the code will be granted access to restricted
versions of the standard I/O streams ‘sys.stdin’, ‘sys.stderr’, and
‘sys.stdout’.

 -- Method: RExec.s_eval (code)

     _code_ must be a string containing a Python expression, which will
     be evaluated in the restricted environment.

 -- Method: RExec.s_exec (code)

     _code_ must be a string containing one or more lines of Python
     code, which will be executed in the restricted environment.

 -- Method: RExec.s_execfile (code)

     Execute the Python code contained in the file _filename_ in the
     restricted environment.

  *note RExec: 2499. objects must also support various methods which
will be implicitly called by code executing in the restricted
environment.  Overriding these methods in a subclass is used to change
the policies enforced by a restricted environment.

 -- Method: RExec.r_import (modulename[, globals[, locals[, fromlist]]])

     Import the module _modulename_, raising an *note ImportError: 370.
     exception if the module is considered unsafe.

 -- Method: RExec.r_open (filename[, mode[, bufsize]])

     Method called when *note open(): 2d6. is called in the restricted
     environment.  The arguments are identical to those of *note open():
     2d6, and a file object (or a class instance compatible with file
     objects) should be returned.  *note RExec: 2499.’s default
     behaviour is allow opening any file for reading, but forbidding any
     attempt to write a file.  See the example below for an
     implementation of a less restrictive *note r_open(): 24a3.

 -- Method: RExec.r_reload (module)

     Reload the module object _module_, re-parsing and re-initializing
     it.

 -- Method: RExec.r_unload (module)

     Unload the module object _module_ (remove it from the restricted
     environment’s ‘sys.modules’ dictionary).

  And their equivalents with access to restricted standard I/O streams:

 -- Method: RExec.s_import (modulename[, globals[, locals[, fromlist]]])

     Import the module _modulename_, raising an *note ImportError: 370.
     exception if the module is considered unsafe.

 -- Method: RExec.s_reload (module)

     Reload the module object _module_, re-parsing and re-initializing
     it.

 -- Method: RExec.s_unload (module)

     Unload the module object _module_.


File: python.info,  Node: Defining restricted environments,  Next: An example,  Prev: RExec Objects,  Up: rexec --- Restricted execution framework

5.29.1.2 Defining restricted environments
.........................................

The *note RExec: 2499. class has the following class attributes, which
are used by the *note __init__(): 37c. method.  Changing them on an
existing instance won’t have any effect; instead, create a subclass of
*note RExec: 2499. and assign them new values in the class definition.
Instances of the new class will then use those new values.  All these
attributes are tuples of strings.

 -- Attribute: RExec.nok_builtin_names

     Contains the names of built-in functions which will _not_ be
     available to programs running in the restricted environment.  The
     value for *note RExec: 2499. is ‘('open', 'reload', '__import__')’.
     (This gives the exceptions, because by far the majority of built-in
     functions are harmless.  A subclass that wants to override this
     variable should probably start with the value from the base class
     and concatenate additional forbidden functions — when new dangerous
     built-in functions are added to Python, they will also be added to
     this module.)

 -- Attribute: RExec.ok_builtin_modules

     Contains the names of built-in modules which can be safely
     imported.  The value for *note RExec: 2499. is ‘('audioop',
     'array', 'binascii', 'cmath', 'errno', 'imageop', 'marshal',
     'math', 'md5', 'operator', 'parser', 'regex', 'select', 'sha',
     '_sre', 'strop', 'struct', 'time')’.  A similar remark about
     overriding this variable applies — use the value from the base
     class as a starting point.

 -- Attribute: RExec.ok_path

     Contains the directories which will be searched when an *note
     import: 1f4. is performed in the restricted environment.  The value
     for *note RExec: 2499. is the same as ‘sys.path’ (at the time the
     module is loaded) for unrestricted code.

 -- Attribute: RExec.ok_posix_names

     Contains the names of the functions in the *note os: 128. module
     which will be available to programs running in the restricted
     environment.  The value for *note RExec: 2499. is ‘('error',
     'fstat', 'listdir', 'lstat', 'readlink', 'stat', 'times', 'uname',
     'getpid', 'getppid', 'getcwd', 'getuid', 'getgid', 'geteuid',
     'getegid')’.

 -- Attribute: RExec.ok_sys_names

     Contains the names of the functions and variables in the *note sys:
     16d. module which will be available to programs running in the
     restricted environment.  The value for *note RExec: 2499. is
     ‘('ps1', 'ps2', 'copyright', 'version', 'platform', 'exit',
     'maxint')’.

 -- Attribute: RExec.ok_file_types

     Contains the file types from which modules are allowed to be
     loaded.  Each file type is an integer constant defined in the *note
     imp: f5. module.  The meaningful values are ‘PY_SOURCE’,
     ‘PY_COMPILED’, and ‘C_EXTENSION’.  The value for *note RExec: 2499.
     is ‘(C_EXTENSION, PY_SOURCE)’.  Adding ‘PY_COMPILED’ in subclasses
     is not recommended; an attacker could exit the restricted execution
     mode by putting a forged byte-compiled file (‘.pyc’) anywhere in
     your file system, for example by writing it to ‘/tmp’ or uploading
     it to the ‘/incoming’ directory of your public FTP server.


File: python.info,  Node: An example,  Prev: Defining restricted environments,  Up: rexec --- Restricted execution framework

5.29.1.3 An example
...................

Let us say that we want a slightly more relaxed policy than the standard
*note RExec: 2499. class.  For example, if we’re willing to allow files
in ‘/tmp’ to be written, we can subclass the *note RExec: 2499. class:

     class TmpWriterRExec(rexec.RExec):
         def r_open(self, file, mode='r', buf=-1):
             if mode in ('r', 'rb'):
                 pass
             elif mode in ('w', 'wb', 'a', 'ab'):
                 # check filename: must begin with /tmp/
                 if file[:5]!='/tmp/':
                     raise IOError("can't write outside /tmp")
                 elif (string.find(file, '/../') >= 0 or
                      file[:3] == '../' or file[-3:] == '/..'):
                     raise IOError("'..' in filename forbidden")
             else: raise IOError("Illegal open() mode")
             return open(file, mode, buf)

  Notice that the above code will occasionally forbid a perfectly valid
filename; for example, code in the restricted environment won’t be able
to open a file called ‘/tmp/foo/../bar’.  To fix this, the ‘r_open()’
method would have to simplify the filename to ‘/tmp/bar’, which would
require splitting apart the filename and performing various operations
on it.  In cases where security is at stake, it may be preferable to
write simple code which is sometimes overly restrictive, instead of more
general code that is also more complex and may harbor a subtle security
hole.


File: python.info,  Node: Bastion --- Restricting access to objects,  Prev: rexec --- Restricted execution framework,  Up: Restricted Execution

5.29.2 ‘Bastion’ — Restricting access to objects
------------------------------------------------

Deprecated since version 2.6: The *note Bastion: 17. module has been
removed in Python 3.

  Changed in version 2.3: Disabled module.

     Note: The documentation has been left in place to help in reading
     old code that uses the module.

  According to the dictionary, a bastion is "a fortified area or
position", or "something that is considered a stronghold."  It’s a
suitable name for this module, which provides a way to forbid access to
certain attributes of an object.  It must always be used with the *note
rexec: 147. module, in order to allow restricted-mode programs access to
certain safe attributes of an object, while denying access to other,
unsafe attributes.

 -- Function: Bastion.Bastion (object[, filter[, name[, class]]])

     Protect the object _object_, returning a bastion for the object.
     Any attempt to access one of the object’s attributes will have to
     be approved by the _filter_ function; if the access is denied an
     *note AttributeError: 1f8. exception will be raised.

     If present, _filter_ must be a function that accepts a string
     containing an attribute name, and returns true if access to that
     attribute will be permitted; if _filter_ returns false, the access
     is denied.  The default filter denies access to any function
     beginning with an underscore (‘'_'’).  The bastion’s string
     representation will be ‘<Bastion for name>’ if a value for _name_
     is provided; otherwise, ‘repr(object)’ will be used.

     _class_, if present, should be a subclass of *note BastionClass:
     24b5.; see the code in ‘bastion.py’ for the details.  Overriding
     the default *note BastionClass: 24b5. will rarely be required.

 -- Class: Bastion.BastionClass (getfunc, name)

     Class which actually implements bastion objects.  This is the
     default class used by *note Bastion(): 17.  The _getfunc_ parameter
     is a function which returns the value of an attribute which should
     be exposed to the restricted execution environment when called with
     the name of the attribute as the only parameter.  _name_ is used to
     construct the *note repr(): 145. of the *note BastionClass: 24b5.
     instance.

See also
........

Grail Home Page(1)

     Grail, an Internet browser written in Python, uses these modules to
     support Python applets.  More information on the use of Python’s
     restricted execution mode in Grail is available on the Web site.

   ---------- Footnotes ----------

   (1) http://grail.sourceforge.net/


File: python.info,  Node: Importing Modules,  Next: Python Language Services,  Prev: Restricted Execution,  Up: The Python Standard Library

5.30 Importing Modules
======================

The modules described in this chapter provide new ways to import other
Python modules and hooks for customizing the import process.

  The full list of modules described in this chapter is:

* Menu:

* imp: imp --- Access the import internals. Access the import internals
* importlib: importlib -- Convenience wrappers for __import__. Convenience wrappers for __import__()
* imputil: imputil --- Import utilities. Import utilities
* zipimport: zipimport --- Import modules from Zip archives. Import modules from Zip archives
* pkgutil: pkgutil --- Package extension utility. Package extension utility
* modulefinder: modulefinder --- Find modules used by a script. Find modules used by a script
* runpy: runpy --- Locating and executing Python modules. Locating and executing Python modules

imp — Access the import internals

* Examples: Examples<18>. 

imputil — Import utilities

* Examples: Examples<19>. 

zipimport — Import modules from Zip archives

* zipimporter Objects:: 
* Examples: Examples<20>. 

modulefinder — Find modules used by a script

* Example usage of ModuleFinder:: 


File: python.info,  Node: imp --- Access the import internals,  Next: importlib -- Convenience wrappers for __import__,  Up: Importing Modules

5.30.1 ‘imp’ — Access the ‘import’ internals
--------------------------------------------

This module provides an interface to the mechanisms used to implement
the *note import: 1f4. statement.  It defines the following constants
and functions:

 -- Function: imp.get_magic ()

     Return the magic string value used to recognize byte-compiled code
     files (‘.pyc’ files).  (This value may be different for each Python
     version.)

 -- Function: imp.get_suffixes ()

     Return a list of 3-element tuples, each describing a particular
     type of module.  Each triple has the form ‘(suffix, mode, type)’,
     where _suffix_ is a string to be appended to the module name to
     form the filename to search for, _mode_ is the mode string to pass
     to the built-in *note open(): 2d6. function to open the file (this
     can be ‘'r'’ for text files or ‘'rb'’ for binary files), and _type_
     is the file type, which has one of the values *note PY_SOURCE:
     24bd, *note PY_COMPILED: 24be, or *note C_EXTENSION: 24bf,
     described below.

 -- Function: imp.find_module (name[, path])

     Try to find the module _name_.  If _path_ is omitted or ‘None’, the
     list of directory names given by ‘sys.path’ is searched, but first
     a few special places are searched: the function tries to find a
     built-in module with the given name (*note C_BUILTIN: 24c1.), then
     a frozen module (*note PY_FROZEN: 24c2.), and on some systems some
     other places are looked in as well (on Windows, it looks in the
     registry which may point to a specific file).

     Otherwise, _path_ must be a list of directory names; each directory
     is searched for files with any of the suffixes returned by *note
     get_suffixes(): 24bc. above.  Invalid names in the list are
     silently ignored (but all list items must be strings).

     If search is successful, the return value is a 3-element tuple
     ‘(file, pathname, description)’:

     _file_ is an open file object positioned at the beginning,
     _pathname_ is the pathname of the file found, and _description_ is
     a 3-element tuple as contained in the list returned by *note
     get_suffixes(): 24bc. describing the kind of module found.

     If the module does not live in a file, the returned _file_ is
     ‘None’, _pathname_ is the empty string, and the _description_ tuple
     contains empty strings for its suffix and mode; the module type is
     indicated as given in parentheses above.  If the search is
     unsuccessful, *note ImportError: 370. is raised.  Other exceptions
     indicate problems with the arguments or environment.

     If the module is a package, _file_ is ‘None’, _pathname_ is the
     package path and the last item in the _description_ tuple is *note
     PKG_DIRECTORY: 24c3.

     This function does not handle hierarchical module names (names
     containing dots).  In order to find _P.M_, that is, submodule _M_
     of package _P_, use *note find_module(): 24c0. and *note
     load_module(): 24c4. to find and load package _P_, and then use
     *note find_module(): 24c0. with the _path_ argument set to
     ‘P.__path__’.  When _P_ itself has a dotted name, apply this recipe
     recursively.

 -- Function: imp.load_module (name, file, pathname, description)

     Load a module that was previously found by *note find_module():
     24c0. (or by an otherwise conducted search yielding compatible
     results).  This function does more than importing the module: if
     the module was already imported, it is equivalent to a *note
     reload(): 57a.!  The _name_ argument indicates the full module name
     (including the package name, if this is a submodule of a package).
     The _file_ argument is an open file, and _pathname_ is the
     corresponding file name; these can be ‘None’ and ‘''’,
     respectively, when the module is a package or not being loaded from
     a file.  The _description_ argument is a tuple, as would be
     returned by *note get_suffixes(): 24bc, describing what kind of
     module must be loaded.

     If the load is successful, the return value is the module object;
     otherwise, an exception (usually *note ImportError: 370.) is
     raised.

     *Important:* the caller is responsible for closing the _file_
     argument, if it was not ‘None’, even when an exception is raised.
     This is best done using a *note try: 395. ...  *note finally: 396.
     statement.

 -- Function: imp.new_module (name)

     Return a new empty module object called _name_.  This object is
     _not_ inserted in ‘sys.modules’.

 -- Function: imp.lock_held ()

     Return ‘True’ if the import lock is currently held, else ‘False’.
     On platforms without threads, always return ‘False’.

     On platforms with threads, a thread executing an import holds an
     internal lock until the import is complete.  This lock blocks other
     threads from doing an import until the original import completes,
     which in turn prevents other threads from seeing incomplete module
     objects constructed by the original thread while in the process of
     completing its import (and the imports, if any, triggered by that).

 -- Function: imp.acquire_lock ()

     Acquire the interpreter’s import lock for the current thread.  This
     lock should be used by import hooks to ensure thread-safety when
     importing modules.

     Once a thread has acquired the import lock, the same thread may
     acquire it again without blocking; the thread must release it once
     for each time it has acquired it.

     On platforms without threads, this function does nothing.

     New in version 2.3.

 -- Function: imp.release_lock ()

     Release the interpreter’s import lock.  On platforms without
     threads, this function does nothing.

     New in version 2.3.

  The following constants with integer values, defined in this module,
are used to indicate the search result of *note find_module(): 24c0.

 -- Data: imp.PY_SOURCE

     The module was found as a source file.

 -- Data: imp.PY_COMPILED

     The module was found as a compiled code object file.

 -- Data: imp.C_EXTENSION

     The module was found as dynamically loadable shared library.

 -- Data: imp.PKG_DIRECTORY

     The module was found as a package directory.

 -- Data: imp.C_BUILTIN

     The module was found as a built-in module.

 -- Data: imp.PY_FROZEN

     The module was found as a frozen module (see *note init_frozen():
     24c9.).

  The following constant and functions are obsolete; their functionality
is available through *note find_module(): 24c0. or *note load_module():
24c4.  They are kept around for backward compatibility:

 -- Data: imp.SEARCH_ERROR

     Unused.

 -- Function: imp.init_builtin (name)

     Initialize the built-in module called _name_ and return its module
     object along with storing it in ‘sys.modules’.  If the module was
     already initialized, it will be initialized _again_.
     Re-initialization involves the copying of the built-in module’s
     ‘__dict__’ from the cached module over the module’s entry in
     ‘sys.modules’.  If there is no built-in module called _name_,
     ‘None’ is returned.

 -- Function: imp.init_frozen (name)

     Initialize the frozen module called _name_ and return its module
     object.  If the module was already initialized, it will be
     initialized _again_.  If there is no frozen module called _name_,
     ‘None’ is returned.  (Frozen modules are modules written in Python
     whose compiled byte-code object is incorporated into a custom-built
     Python interpreter by Python’s *freeze* utility.  See
     ‘Tools/freeze/’ for now.)

 -- Function: imp.is_builtin (name)

     Return ‘1’ if there is a built-in module called _name_ which can be
     initialized again.  Return ‘-1’ if there is a built-in module
     called _name_ which cannot be initialized again (see *note
     init_builtin(): 24cb.).  Return ‘0’ if there is no built-in module
     called _name_.

 -- Function: imp.is_frozen (name)

     Return ‘True’ if there is a frozen module (see *note init_frozen():
     24c9.) called _name_, or ‘False’ if there is no such module.

 -- Function: imp.load_compiled (name, pathname[, file])

     Load and initialize a module implemented as a byte-compiled code
     file and return its module object.  If the module was already
     initialized, it will be initialized _again_.  The _name_ argument
     is used to create or access a module object.  The _pathname_
     argument points to the byte-compiled code file.  The _file_
     argument is the byte-compiled code file, open for reading in binary
     mode, from the beginning.  It must currently be a real file object,
     not a user-defined class emulating a file.

 -- Function: imp.load_dynamic (name, pathname[, file])

     Load and initialize a module implemented as a dynamically loadable
     shared library and return its module object.  If the module was
     already initialized, it will be initialized _again_.
     Re-initialization involves copying the ‘__dict__’ attribute of the
     cached instance of the module over the value used in the module
     cached in ‘sys.modules’.  The _pathname_ argument must point to the
     shared library.  The _name_ argument is used to construct the name
     of the initialization function: an external C function called
     ‘initname()’ in the shared library is called.  The optional _file_
     argument is ignored.  (Note: using shared libraries is highly
     system dependent, and not all systems support it.)

     *CPython implementation detail:* The import internals identify
     extension modules by filename, so doing ‘foo = load_dynamic("foo",
     "mod.so")’ and ‘bar = load_dynamic("bar", "mod.so")’ will result in
     both foo and bar referring to the same module, regardless of
     whether or not ‘mod.so’ exports an ‘initbar’ function.  On systems
     which support them, symlinks can be used to import multiple modules
     from the same shared library, as each reference to the module will
     use a different file name.

 -- Function: imp.load_source (name, pathname[, file])

     Load and initialize a module implemented as a Python source file
     and return its module object.  If the module was already
     initialized, it will be initialized _again_.  The _name_ argument
     is used to create or access a module object.  The _pathname_
     argument points to the source file.  The _file_ argument is the
     source file, open for reading as text, from the beginning.  It must
     currently be a real file object, not a user-defined class emulating
     a file.  Note that if a properly matching byte-compiled file (with
     suffix ‘.pyc’ or ‘.pyo’) exists, it will be used instead of parsing
     the given source file.

 -- Class: imp.NullImporter (path_string)

     The *note NullImporter: 23c4. type is a PEP 302(1) import hook that
     handles non-directory path strings by failing to find any modules.
     Calling this type with an existing directory or empty string raises
     *note ImportError: 370.  Otherwise, a *note NullImporter: 23c4.
     instance is returned.

     Python adds instances of this type to ‘sys.path_importer_cache’ for
     any path entries that are not directories and are not handled by
     any other path hooks on ‘sys.path_hooks’.  Instances have only one
     method:

      -- Method: find_module (fullname[, path])

          This method always returns ‘None’, indicating that the
          requested module could not be found.

     New in version 2.5.

* Menu:

* Examples: Examples<18>. 

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: Examples<18>,  Up: imp --- Access the import internals

5.30.1.1 Examples
.................

The following function emulates what was the standard import statement
up to Python 1.4 (no hierarchical module names).  (This _implementation_
wouldn’t work in that version, since *note find_module(): 24c0. has been
extended and *note load_module(): 24c4. has been added in 1.4.)

     import imp
     import sys

     def __import__(name, globals=None, locals=None, fromlist=None):
         # Fast path: see if the module has already been imported.
         try:
             return sys.modules[name]
         except KeyError:
             pass

         # If any of the following calls raises an exception,
         # there's a problem we can't handle -- let the caller handle it.

         fp, pathname, description = imp.find_module(name)

         try:
             return imp.load_module(name, fp, pathname, description)
         finally:
             # Since we may exit via an exception, close fp explicitly.
             if fp:
                 fp.close()

  A more complete example that implements hierarchical module names and
includes a *note reload(): 57a. function can be found in the module
‘knee’.  The ‘knee’ module can be found in ‘Demo/imputil/’ in the Python
source distribution.


File: python.info,  Node: importlib -- Convenience wrappers for __import__,  Next: imputil --- Import utilities,  Prev: imp --- Access the import internals,  Up: Importing Modules

5.30.2 ‘importlib’ – Convenience wrappers for ‘__import__()’
------------------------------------------------------------

New in version 2.7.

  This module is a minor subset of what is available in the more
full-featured package of the same name from Python 3.1 that provides a
complete implementation of *note import: 1f4.  What is here has been
provided to help ease in transitioning from 2.7 to 3.1.

 -- Function: importlib.import_module (name, package=None)

     Import a module.  The _name_ argument specifies what module to
     import in absolute or relative terms (e.g.  either ‘pkg.mod’ or
     ‘..mod’).  If the name is specified in relative terms, then the
     _package_ argument must be specified to the package which is to act
     as the anchor for resolving the package name (e.g.
     ‘import_module('..mod', 'pkg.subpkg')’ will import ‘pkg.mod’).  The
     specified module will be inserted into *note sys.modules: 824. and
     returned.


File: python.info,  Node: imputil --- Import utilities,  Next: zipimport --- Import modules from Zip archives,  Prev: importlib -- Convenience wrappers for __import__,  Up: Importing Modules

5.30.3 ‘imputil’ — Import utilities
-----------------------------------

Deprecated since version 2.6: The *note imputil: f7. module has been
removed in Python 3.

  This module provides a very handy and useful mechanism for custom
*note import: 1f4. hooks.  Compared to the older ‘ihooks’ module, *note
imputil: f7. takes a dramatically simpler and more straight-forward
approach to custom *note import: 1f4. functions.

 -- Class: imputil.ImportManager ([fs_imp])

     Manage the import process.

      -- Method: install ([namespace])

          Install this ImportManager into the specified namespace.

      -- Method: uninstall ()

          Restore the previous import mechanism.

      -- Method: add_suffix (suffix, importFunc)

          Undocumented.

 -- Class: imputil.Importer

     Base class for replacing standard import functions.

      -- Method: import_top (name)

          Import a top-level module.

      -- Method: get_code (parent, modname, fqname)

          Find and retrieve the code for the given module.

          _parent_ specifies a parent module to define a context for
          importing.  It may be ‘None’, indicating no particular context
          for the search.

          _modname_ specifies a single module (not dotted) within the
          parent.

          _fqname_ specifies the fully-qualified module name.  This is a
          (potentially) dotted name from the "root" of the module
          namespace down to the modname.

          If there is no parent, then modname==fqname.

          This method should return ‘None’, or a 3-tuple.

                  * If the module was not found, then ‘None’ should be
                    returned.

                  * The first item of the 2- or 3-tuple should be the
                    integer 0 or 1, specifying whether the module that
                    was found is a package or not.

                  * The second item is the code object for the module
                    (it will be executed within the new module’s
                    namespace).  This item can also be a fully-loaded
                    module object (e.g.  loaded from a shared lib).

                  * The third item is a dictionary of name/value pairs
                    that will be inserted into new module before the
                    code object is executed.  This is provided in case
                    the module’s code expects certain values (such as
                    where the module was found).  When the second item
                    is a module object, then these names/values will be
                    inserted _after_ the module has been
                    loaded/initialized.

 -- Class: imputil.BuiltinImporter

     Emulate the import mechanism for built-in and frozen modules.  This
     is a sub-class of the *note Importer: 24dc. class.

      -- Method: get_code (parent, modname, fqname)

          Undocumented.

 -- Function: imputil.py_suffix_importer (filename, finfo, fqname)

     Undocumented.

 -- Class: imputil.DynLoadSuffixImporter ([desc])

     Undocumented.

      -- Method: import_file (filename, finfo, fqname)

          Undocumented.

* Menu:

* Examples: Examples<19>. 


File: python.info,  Node: Examples<19>,  Up: imputil --- Import utilities

5.30.3.1 Examples
.................

This is a re-implementation of hierarchical module import.

  This code is intended to be read, not executed.  However, it does work
– all you need to do to enable it is "import knee".

  (The name is a pun on the clunkier predecessor of this module, "ni".)

     import sys, imp, __builtin__

     # Replacement for __import__()
     def import_hook(name, globals=None, locals=None, fromlist=None):
         parent = determine_parent(globals)
         q, tail = find_head_package(parent, name)
         m = load_tail(q, tail)
         if not fromlist:
             return q
         if hasattr(m, "__path__"):
             ensure_fromlist(m, fromlist)
         return m

     def determine_parent(globals):
         if not globals or  not globals.has_key("__name__"):
             return None
         pname = globals['__name__']
         if globals.has_key("__path__"):
             parent = sys.modules[pname]
             assert globals is parent.__dict__
             return parent
         if '.' in pname:
             i = pname.rfind('.')
             pname = pname[:i]
             parent = sys.modules[pname]
             assert parent.__name__ == pname
             return parent
         return None

     def find_head_package(parent, name):
         if '.' in name:
             i = name.find('.')
             head = name[:i]
             tail = name[i+1:]
         else:
             head = name
             tail = ""
         if parent:
             qname = "%s.%s" % (parent.__name__, head)
         else:
             qname = head
         q = import_module(head, qname, parent)
         if q: return q, tail
         if parent:
             qname = head
             parent = None
             q = import_module(head, qname, parent)
             if q: return q, tail
         raise ImportError("No module named " + qname)

     def load_tail(q, tail):
         m = q
         while tail:
             i = tail.find('.')
             if i < 0: i = len(tail)
             head, tail = tail[:i], tail[i+1:]
             mname = "%s.%s" % (m.__name__, head)
             m = import_module(head, mname, m)
             if not m:
                 raise ImportError("No module named " + mname)
         return m

     def ensure_fromlist(m, fromlist, recursive=0):
         for sub in fromlist:
             if sub == "*":
                 if not recursive:
                     try:
                         all = m.__all__
                     except AttributeError:
                         pass
                     else:
                         ensure_fromlist(m, all, 1)
                 continue
             if sub != "*" and not hasattr(m, sub):
                 subname = "%s.%s" % (m.__name__, sub)
                 submod = import_module(sub, subname, m)
                 if not submod:
                     raise ImportError("No module named " + subname)

     def import_module(partname, fqname, parent):
         try:
             return sys.modules[fqname]
         except KeyError:
             pass
         try:
             fp, pathname, stuff = imp.find_module(partname,
                                                   parent and parent.__path__)
         except ImportError:
             return None
         try:
             m = imp.load_module(fqname, fp, pathname, stuff)
         finally:
             if fp: fp.close()
         if parent:
             setattr(parent, partname, m)
         return m


     # Replacement for reload()
     def reload_hook(module):
         name = module.__name__
         if '.' not in name:
             return import_module(name, name, None)
         i = name.rfind('.')
         pname = name[:i]
         parent = sys.modules[pname]
         return import_module(name[i+1:], name, parent)


     # Save the original hooks
     original_import = __builtin__.__import__
     original_reload = __builtin__.reload

     # Now install our hooks
     __builtin__.__import__ = import_hook
     __builtin__.reload = reload_hook

  Also see the ‘importers’ module (which can be found in ‘Demo/imputil/’
in the Python source distribution) for additional examples.


File: python.info,  Node: zipimport --- Import modules from Zip archives,  Next: pkgutil --- Package extension utility,  Prev: imputil --- Import utilities,  Up: Importing Modules

5.30.4 ‘zipimport’ — Import modules from Zip archives
-----------------------------------------------------

New in version 2.3.

  This module adds the ability to import Python modules (‘*.py’,
‘*.py[co]’) and packages from ZIP-format archives.  It is usually not
needed to use the *note zipimport: 1ac. module explicitly; it is
automatically used by the built-in *note import: 1f4. mechanism for
*note sys.path: 57f. items that are paths to ZIP archives.

  Typically, *note sys.path: 57f. is a list of directory names as
strings.  This module also allows an item of *note sys.path: 57f. to be
a string naming a ZIP file archive.  The ZIP archive can contain a
subdirectory structure to support package imports, and a path within the
archive can be specified to only import from a subdirectory.  For
example, the path ‘example.zip/lib/’ would only import from the ‘lib/’
subdirectory within the archive.

  Any files may be present in the ZIP archive, but only files ‘.py’ and
‘.py[co]’ are available for import.  ZIP import of dynamic modules
(‘.pyd’, ‘.so’) is disallowed.  Note that if an archive only contains
‘.py’ files, Python will not attempt to modify the archive by adding the
corresponding ‘.pyc’ or ‘.pyo’ file, meaning that if a ZIP archive
doesn’t contain ‘.pyc’ files, importing may be rather slow.

  Using the built-in *note reload(): 57a. function will fail if called
on a module loaded from a ZIP archive; it is unlikely that *note
reload(): 57a. would be needed, since this would imply that the ZIP has
been altered during runtime.

  ZIP archives with an archive comment are currently not supported.

See also
........

PKZIP Application Note(1)

     Documentation on the ZIP file format by Phil Katz, the creator of
     the format and algorithms used.

PEP 273(2) - Import Modules from Zip Archives

     Written by James C. Ahlstrom, who also provided an implementation.
     Python 2.3 follows the specification in PEP 273, but uses an
     implementation written by Just van Rossum that uses the import
     hooks described in PEP 302.

PEP 302(3) - New Import Hooks

     The PEP to add the import hooks that help this module work.

  This module defines an exception:

 -- Exception: zipimport.ZipImportError

     Exception raised by zipimporter objects.  It’s a subclass of *note
     ImportError: 370, so it can be caught as *note ImportError: 370,
     too.

* Menu:

* zipimporter Objects:: 
* Examples: Examples<20>. 

   ---------- Footnotes ----------

   (1) http://www.pkware.com/documents/casestudies/APPNOTE.TXT

   (2) http://www.python.org/dev/peps/pep-0273

   (3) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: zipimporter Objects,  Next: Examples<20>,  Up: zipimport --- Import modules from Zip archives

5.30.4.1 zipimporter Objects
............................

*note zipimporter: 24eb. is the class for importing ZIP files.

 -- Class: zipimport.zipimporter (archivepath)

     Create a new zipimporter instance.  _archivepath_ must be a path to
     a ZIP file, or to a specific path within a ZIP file.  For example,
     an _archivepath_ of ‘foo/bar.zip/lib’ will look for modules in the
     ‘lib’ directory inside the ZIP file ‘foo/bar.zip’ (provided that it
     exists).

     *note ZipImportError: 24e8. is raised if _archivepath_ doesn’t
     point to a valid ZIP archive.

      -- Method: find_module (fullname[, path])

          Search for a module specified by _fullname_.  _fullname_ must
          be the fully qualified (dotted) module name.  It returns the
          zipimporter instance itself if the module was found, or *note
          None: 39a. if it wasn’t.  The optional _path_ argument is
          ignored—it’s there for compatibility with the importer
          protocol.

      -- Method: get_code (fullname)

          Return the code object for the specified module.  Raise *note
          ZipImportError: 24e8. if the module couldn’t be found.

      -- Method: get_data (pathname)

          Return the data associated with _pathname_.  Raise *note
          IOError: 1fa. if the file wasn’t found.

      -- Method: get_filename (fullname)

          Return the value ‘__file__’ would be set to if the specified
          module was imported.  Raise *note ZipImportError: 24e8. if the
          module couldn’t be found.

     New in version 2.7.

      -- Method: get_source (fullname)

          Return the source code for the specified module.  Raise *note
          ZipImportError: 24e8. if the module couldn’t be found, return
          *note None: 39a. if the archive does contain the module, but
          has no source for it.

      -- Method: is_package (fullname)

          Return ‘True’ if the module specified by _fullname_ is a
          package.  Raise *note ZipImportError: 24e8. if the module
          couldn’t be found.

      -- Method: load_module (fullname)

          Load the module specified by _fullname_.  _fullname_ must be
          the fully qualified (dotted) module name.  It returns the
          imported module, or raises *note ZipImportError: 24e8. if it
          wasn’t found.

      -- Attribute: archive

          The file name of the importer’s associated ZIP file, without a
          possible subpath.

      -- Attribute: prefix

          The subpath within the ZIP file where modules are searched.
          This is the empty string for zipimporter objects which point
          to the root of the ZIP file.

     The *note archive: 24f3. and *note prefix: 24f4. attributes, when
     combined with a slash, equal the original _archivepath_ argument
     given to the *note zipimporter: 24eb. constructor.

