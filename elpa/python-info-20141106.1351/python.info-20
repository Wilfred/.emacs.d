This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Examples<20>,  Prev: zipimporter Objects,  Up: zipimport --- Import modules from Zip archives

5.30.4.2 Examples
.................

Here is an example that imports a module from a ZIP archive - note that
the *note zipimport: 1ac. module is not explicitly used.

     $ unzip -l example.zip
     Archive:  example.zip
       Length     Date   Time    Name
      --------    ----   ----    ----
          8467  11-26-02 22:30   jwzthreading.py
      --------                   -------
          8467                   1 file
     $ ./python
     Python 2.3 (#1, Aug 1 2003, 19:54:32)
     >>> import sys
     >>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path
     >>> import jwzthreading
     >>> jwzthreading.__file__
     'example.zip/jwzthreading.py'


File: python.info,  Node: pkgutil --- Package extension utility,  Next: modulefinder --- Find modules used by a script,  Prev: zipimport --- Import modules from Zip archives,  Up: Importing Modules

5.30.5 ‘pkgutil’ — Package extension utility
--------------------------------------------

New in version 2.3.

  *Source code:* Lib/pkgutil.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides utilities for the import system, in particular
package support.

 -- Function: pkgutil.extend_path (path, name)

     Extend the search path for the modules which comprise a package.
     Intended use is to place the following code in a package’s
     ‘__init__.py’:

          from pkgutil import extend_path
          __path__ = extend_path(__path__, __name__)

     This will add to the package’s ‘__path__’ all subdirectories of
     directories on ‘sys.path’ named after the package.  This is useful
     if one wants to distribute different parts of a single logical
     package as multiple directories.

     It also looks for ‘*.pkg’ files beginning where ‘*’ matches the
     _name_ argument.  This feature is similar to ‘*.pth’ files (see the
     *note site: 158. module for more information), except that it
     doesn’t special-case lines starting with ‘import’.  A ‘*.pkg’ file
     is trusted at face value: apart from checking for duplicates, all
     entries found in a ‘*.pkg’ file are added to the path, regardless
     of whether they exist on the filesystem.  (This is a feature.)

     If the input path is not a list (as is the case for frozen
     packages) it is returned unchanged.  The input path is not
     modified; an extended copy is returned.  Items are only appended to
     the copy at the end.

     It is assumed that *note sys.path: 57f. is a sequence.  Items of
     *note sys.path: 57f. that are not (Unicode or 8-bit) strings
     referring to existing directories are ignored.  Unicode items on
     *note sys.path: 57f. that cause errors when used as filenames may
     cause this function to raise an exception (in line with *note
     os.path.isdir(): e09. behavior).

 -- Class: pkgutil.ImpImporter (dirname=None)

     PEP 302(2) Importer that wraps Python’s "classic" import algorithm.

     If _dirname_ is a string, a PEP 302(3) importer is created that
     searches that directory.  If _dirname_ is ‘None’, a PEP 302(4)
     importer is created that searches the current *note sys.path: 57f,
     plus any modules that are frozen or built-in.

     Note that *note ImpImporter: 24fa. does not currently support being
     used by placement on *note sys.meta_path: 825.

 -- Class: pkgutil.ImpLoader (fullname, file, filename, etc)

     PEP 302(5) Loader that wraps Python’s "classic" import algorithm.

 -- Function: pkgutil.find_loader (fullname)

     Find a PEP 302(6) "loader" object for _fullname_.

     If _fullname_ contains dots, path must be the containing package’s
     ‘__path__’.  Returns ‘None’ if the module cannot be found or
     imported.  This function uses *note iter_importers(): 24fd, and is
     thus subject to the same limitations regarding platform-specific
     special import locations such as the Windows registry.

 -- Function: pkgutil.get_importer (path_item)

     Retrieve a PEP 302(7) importer for the given _path_item_.

     The returned importer is cached in *note sys.path_importer_cache:
     829. if it was newly created by a path hook.

     If there is no importer, a wrapper around the basic import
     machinery is returned.  This wrapper is never inserted into the
     importer cache (‘None’ is inserted instead).

     The cache (or part of it) can be cleared manually if a rescan of
     *note sys.path_hooks: 828. is necessary.

 -- Function: pkgutil.get_loader (module_or_name)

     Get a PEP 302(8) "loader" object for _module_or_name_.

     If the module or package is accessible via the normal import
     mechanism, a wrapper around the relevant part of that machinery is
     returned.  Returns ‘None’ if the module cannot be found or
     imported.  If the named module is not already imported, its
     containing package (if any) is imported, in order to establish the
     package ‘__path__’.

     This function uses *note iter_importers(): 24fd, and is thus
     subject to the same limitations regarding platform-specific special
     import locations such as the Windows registry.

 -- Function: pkgutil.iter_importers (fullname='')

     Yield PEP 302(9) importers for the given module name.

     If fullname contains a ’.’, the importers will be for the package
     containing fullname, otherwise they will be importers for *note
     sys.meta_path: 825, *note sys.path: 57f, and Python’s "classic"
     import machinery, in that order.  If the named module is in a
     package, that package is imported as a side effect of invoking this
     function.

     Non- PEP 302(10) mechanisms (e.g.  the Windows registry) used by
     the standard import machinery to find files in alternative
     locations are partially supported, but are searched _after_ *note
     sys.path: 57f.  Normally, these locations are searched _before_
     *note sys.path: 57f, preventing *note sys.path: 57f. entries from
     shadowing them.

     For this to cause a visible difference in behaviour, there must be
     a module or package name that is accessible via both *note
     sys.path: 57f. and one of the non- PEP 302(11) file system
     mechanisms.  In this case, the emulation will find the former
     version, while the builtin import mechanism will find the latter.

     Items of the following types can be affected by this discrepancy:
     ‘imp.C_EXTENSION’, ‘imp.PY_SOURCE’, ‘imp.PY_COMPILED’,
     ‘imp.PKG_DIRECTORY’.

 -- Function: pkgutil.iter_modules (path=None, prefix='')

     Yields ‘(module_loader, name, ispkg)’ for all submodules on _path_,
     or, if path is ‘None’, all top-level modules on ‘sys.path’.

     _path_ should be either ‘None’ or a list of paths to look for
     modules in.

     _prefix_ is a string to output on the front of every module name on
     output.

 -- Function: pkgutil.walk_packages (path=None, prefix='', onerror=None)

     Yields ‘(module_loader, name, ispkg)’ for all modules recursively
     on _path_, or, if path is ‘None’, all accessible modules.

     _path_ should be either ‘None’ or a list of paths to look for
     modules in.

     _prefix_ is a string to output on the front of every module name on
     output.

     Note that this function must import all _packages_ (_not_ all
     modules!)  on the given _path_, in order to access the ‘__path__’
     attribute to find submodules.

     _onerror_ is a function which gets called with one argument (the
     name of the package which was being imported) if any exception
     occurs while trying to import a package.  If no _onerror_ function
     is supplied, *note ImportError: 370.s are caught and ignored, while
     all other exceptions are propagated, terminating the search.

     Examples:

          # list all modules python can access
          walk_packages()

          # list all submodules of ctypes
          walk_packages(ctypes.__path__, ctypes.__name__ + '.')

 -- Function: pkgutil.get_data (package, resource)

     Get a resource from a package.

     This is a wrapper for the PEP 302(12) loader *note get_data():
     2502. API. The _package_ argument should be the name of a package,
     in standard module format (‘foo.bar’).  The _resource_ argument
     should be in the form of a relative filename, using ‘/’ as the path
     separator.  The parent directory name ‘..’ is not allowed, and nor
     is a rooted name (starting with a ‘/’).

     The function returns a binary string that is the contents of the
     specified resource.

     For packages located in the filesystem, which have already been
     imported, this is the rough equivalent of:

          d = os.path.dirname(sys.modules[package].__file__)
          data = open(os.path.join(d, resource), 'rb').read()

     If the package cannot be located or loaded, or it uses a PEP
     302(13) loader which does not support *note get_data(): 2502, then
     ‘None’ is returned.

     New in version 2.6.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/pkgutil.py

   (2) http://www.python.org/dev/peps/pep-0302

   (3) http://www.python.org/dev/peps/pep-0302

   (4) http://www.python.org/dev/peps/pep-0302

   (5) http://www.python.org/dev/peps/pep-0302

   (6) http://www.python.org/dev/peps/pep-0302

   (7) http://www.python.org/dev/peps/pep-0302

   (8) http://www.python.org/dev/peps/pep-0302

   (9) http://www.python.org/dev/peps/pep-0302

   (10) http://www.python.org/dev/peps/pep-0302

   (11) http://www.python.org/dev/peps/pep-0302

   (12) http://www.python.org/dev/peps/pep-0302

   (13) http://www.python.org/dev/peps/pep-0302


File: python.info,  Node: modulefinder --- Find modules used by a script,  Next: runpy --- Locating and executing Python modules,  Prev: pkgutil --- Package extension utility,  Up: Importing Modules

5.30.6 ‘modulefinder’ — Find modules used by a script
-----------------------------------------------------

New in version 2.3.

  *Source code:* Lib/modulefinder.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides a *note ModuleFinder: 2505. class that can be
used to determine the set of modules imported by a script.
‘modulefinder.py’ can also be run as a script, giving the filename of a
Python script as its argument, after which a report of the imported
modules will be printed.

 -- Function: modulefinder.AddPackagePath (pkg_name, path)

     Record that the package named _pkg_name_ can be found in the
     specified _path_.

 -- Function: modulefinder.ReplacePackage (oldname, newname)

     Allows specifying that the module named _oldname_ is in fact the
     package named _newname_.  The most common usage would be to handle
     how the ‘_xmlplus’ package replaces the *note xml: 1a0. package.

 -- Class: modulefinder.ModuleFinder ([path=None, debug=0, excludes=[],
          replace_paths=[]])

     This class provides *note run_script(): 2508. and *note report():
     2509. methods to determine the set of modules imported by a script.
     _path_ can be a list of directories to search for modules; if not
     specified, ‘sys.path’ is used.  _debug_ sets the debugging level;
     higher values make the class print debugging messages about what
     it’s doing.  _excludes_ is a list of module names to exclude from
     the analysis.  _replace_paths_ is a list of ‘(oldpath, newpath)’
     tuples that will be replaced in module paths.

      -- Method: report ()

          Print a report to standard output that lists the modules
          imported by the script and their paths, as well as modules
          that are missing or seem to be missing.

      -- Method: run_script (pathname)

          Analyze the contents of the _pathname_ file, which must
          contain Python code.

      -- Attribute: modules

          A dictionary mapping module names to modules.  See *note
          Example usage of ModuleFinder: 250b.

* Menu:

* Example usage of ModuleFinder:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/modulefinder.py


File: python.info,  Node: Example usage of ModuleFinder,  Up: modulefinder --- Find modules used by a script

5.30.6.1 Example usage of ‘ModuleFinder’
........................................

The script that is going to get analyzed later on (bacon.py):

     import re, itertools

     try:
         import baconhameggs
     except ImportError:
         pass

     try:
         import guido.python.ham
     except ImportError:
         pass

  The script that will output the report of bacon.py:

     from modulefinder import ModuleFinder

     finder = ModuleFinder()
     finder.run_script('bacon.py')

     print 'Loaded modules:'
     for name, mod in finder.modules.iteritems():
         print '%s: ' % name,
         print ','.join(mod.globalnames.keys()[:3])

     print '-'*50
     print 'Modules not imported:'
     print '\n'.join(finder.badmodules.iterkeys())

  Sample output (may vary depending on the architecture):

     Loaded modules:
     _types:
     copy_reg:  _inverted_registry,_slotnames,__all__
     sre_compile:  isstring,_sre,_optimize_unicode
     _sre:
     sre_constants:  REPEAT_ONE,makedict,AT_END_LINE
     sys:
     re:  __module__,finditer,_expand
     itertools:
     __main__:  re,itertools,baconhameggs
     sre_parse:  __getslice__,_PATTERNENDERS,SRE_FLAG_UNICODE
     array:
     types:  __module__,IntType,TypeType
     ---------------------------------------------------
     Modules not imported:
     guido.python.ham
     baconhameggs


File: python.info,  Node: runpy --- Locating and executing Python modules,  Prev: modulefinder --- Find modules used by a script,  Up: Importing Modules

5.30.7 ‘runpy’ — Locating and executing Python modules
------------------------------------------------------

New in version 2.5.

  *Source code:* Lib/runpy.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note runpy: 14b. module is used to locate and run Python modules
without importing them first.  Its main use is to implement the *note
-m: 2fb. command line switch that allows scripts to be located using the
Python module namespace rather than the filesystem.

  The *note runpy: 14b. module provides two functions:

 -- Function: runpy.run_module (mod_name, init_globals=None,
          run_name=None, alter_sys=False)

     Execute the code of the specified module and return the resulting
     module globals dictionary.  The module’s code is first located
     using the standard import mechanism (refer to PEP 302(2) for
     details) and then executed in a fresh module namespace.

     If the supplied module name refers to a package rather than a
     normal module, then that package is imported and the ‘__main__’
     submodule within that package is then executed and the resulting
     module globals dictionary returned.

     The optional dictionary argument _init_globals_ may be used to
     pre-populate the module’s globals dictionary before the code is
     executed.  The supplied dictionary will not be modified.  If any of
     the special global variables below are defined in the supplied
     dictionary, those definitions are overridden by *note run_module():
     635.

     The special global variables ‘__name__’, ‘__file__’, ‘__loader__’
     and ‘__package__’ are set in the globals dictionary before the
     module code is executed (Note that this is a minimal set of
     variables - other variables may be set implicitly as an interpreter
     implementation detail).

     ‘__name__’ is set to _run_name_ if this optional argument is not
     *note None: 39a, to ‘mod_name + '.__main__'’ if the named module is
     a package and to the _mod_name_ argument otherwise.

     ‘__file__’ is set to the name provided by the module loader.  If
     the loader does not make filename information available, this
     variable is set to *note None: 39a.

     ‘__loader__’ is set to the PEP 302(3) module loader used to
     retrieve the code for the module (This loader may be a wrapper
     around the standard import mechanism).

     ‘__package__’ is set to _mod_name_ if the named module is a package
     and to ‘mod_name.rpartition('.')[0]’ otherwise.

     If the argument _alter_sys_ is supplied and evaluates to *note
     True: 3b0, then ‘sys.argv[0]’ is updated with the value of
     ‘__file__’ and ‘sys.modules[__name__]’ is updated with a temporary
     module object for the module being executed.  Both ‘sys.argv[0]’
     and ‘sys.modules[__name__]’ are restored to their original values
     before the function returns.

     Note that this manipulation of *note sys: 16d. is not thread-safe.
     Other threads may see the partially initialised module, as well as
     the altered list of arguments.  It is recommended that the *note
     sys: 16d. module be left alone when invoking this function from
     threaded code.

     Changed in version 2.7: Added ability to execute packages by
     looking for a ‘__main__’ submodule

 -- Function: runpy.run_path (file_path, init_globals=None,
          run_name=None)

     Execute the code at the named filesystem location and return the
     resulting module globals dictionary.  As with a script name
     supplied to the CPython command line, the supplied path may refer
     to a Python source file, a compiled bytecode file or a valid
     sys.path entry containing a ‘__main__’ module (e.g.  a zipfile
     containing a top-level ‘__main__.py’ file).

     For a simple script, the specified code is simply executed in a
     fresh module namespace.  For a valid sys.path entry (typically a
     zipfile or directory), the entry is first added to the beginning of
     ‘sys.path’.  The function then looks for and executes a *note
     __main__: 2. module using the updated path.  Note that there is no
     special protection against invoking an existing *note __main__: 2.
     entry located elsewhere on ‘sys.path’ if there is no such module at
     the specified location.

     The optional dictionary argument _init_globals_ may be used to
     pre-populate the module’s globals dictionary before the code is
     executed.  The supplied dictionary will not be modified.  If any of
     the special global variables below are defined in the supplied
     dictionary, those definitions are overridden by *note run_path():
     24a.

     The special global variables ‘__name__’, ‘__file__’, ‘__loader__’
     and ‘__package__’ are set in the globals dictionary before the
     module code is executed (Note that this is a minimal set of
     variables - other variables may be set implicitly as an interpreter
     implementation detail).

     ‘__name__’ is set to _run_name_ if this optional argument is not
     *note None: 39a. and to ‘'<run_path>'’ otherwise.

     ‘__file__’ is set to the name provided by the module loader.  If
     the loader does not make filename information available, this
     variable is set to *note None: 39a.  For a simple script, this will
     be set to ‘file_path’.

     ‘__loader__’ is set to the PEP 302(4) module loader used to
     retrieve the code for the module (This loader may be a wrapper
     around the standard import mechanism).  For a simple script, this
     will be set to *note None: 39a.

     ‘__package__’ is set to ‘__name__.rpartition('.')[0]’.

     A number of alterations are also made to the *note sys: 16d.
     module.  Firstly, ‘sys.path’ may be altered as described above.
     ‘sys.argv[0]’ is updated with the value of ‘file_path’ and
     ‘sys.modules[__name__]’ is updated with a temporary module object
     for the module being executed.  All modifications to items in *note
     sys: 16d. are reverted before the function returns.

     Note that, unlike *note run_module(): 635, the alterations made to
     *note sys: 16d. are not optional in this function as these
     adjustments are essential to allowing the execution of sys.path
     entries.  As the thread-safety limitations still apply, use of this
     function in threaded code should be either serialised with the
     import lock or delegated to a separate process.

     New in version 2.7.

See also
........

PEP 338(5) - Executing modules as scripts

     PEP written and implemented by Nick Coghlan.

PEP 366(6) - Main module explicit relative imports

     PEP written and implemented by Nick Coghlan.

  *note Command line and environment: 62e. - CPython command line
details

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/runpy.py

   (2) http://www.python.org/dev/peps/pep-0302

   (3) http://www.python.org/dev/peps/pep-0302

   (4) http://www.python.org/dev/peps/pep-0302

   (5) http://www.python.org/dev/peps/pep-0338

   (6) http://www.python.org/dev/peps/pep-0366


File: python.info,  Node: Python Language Services,  Next: Python compiler package,  Prev: Importing Modules,  Up: The Python Standard Library

5.31 Python Language Services
=============================

Python provides a number of modules to assist in working with the Python
language.  These modules support tokenizing, parsing, syntax analysis,
bytecode disassembly, and various other facilities.

  These modules include:

* Menu:

* parser: parser --- Access Python parse trees. Access Python parse trees
* ast: ast --- Abstract Syntax Trees. Abstract Syntax Trees
* symtable: symtable --- Access to the compiler's symbol tables. Access to the compiler’s symbol tables
* symbol: symbol --- Constants used with Python parse trees. Constants used with Python parse trees
* token: token --- Constants used with Python parse trees. Constants used with Python parse trees
* keyword: keyword --- Testing for Python keywords. Testing for Python keywords
* tokenize: tokenize --- Tokenizer for Python source. Tokenizer for Python source
* tabnanny: tabnanny --- Detection of ambiguous indentation. Detection of ambiguous indentation
* pyclbr: pyclbr --- Python class browser support. Python class browser support
* py_compile: py_compile --- Compile Python source files. Compile Python source files
* compileall: compileall --- Byte-compile Python libraries. Byte-compile Python libraries
* dis: dis --- Disassembler for Python bytecode. Disassembler for Python bytecode
* pickletools: pickletools --- Tools for pickle developers. Tools for pickle developers

parser — Access Python parse trees

* Creating ST Objects:: 
* Converting ST Objects:: 
* Queries on ST Objects:: 
* Exceptions and Error Handling:: 
* ST Objects:: 
* Example; Emulation of compile(): Example Emulation of compile. 

ast — Abstract Syntax Trees

* Node classes:: 
* Abstract Grammar:: 
* ast Helpers:: 

symtable — Access to the compiler’s symbol tables

* Generating Symbol Tables:: 
* Examining Symbol Tables:: 

pyclbr — Python class browser support

* Class Objects: Class Objects<2>. 
* Function Objects:: 

compileall — Byte-compile Python libraries

* Command-line use:: 
* Public functions:: 

dis — Disassembler for Python bytecode

* Python Bytecode Instructions:: 


File: python.info,  Node: parser --- Access Python parse trees,  Next: ast --- Abstract Syntax Trees,  Up: Python Language Services

5.31.1 ‘parser’ — Access Python parse trees
-------------------------------------------

The *note parser: 12b. module provides an interface to Python’s internal
parser and byte-code compiler.  The primary purpose for this interface
is to allow Python code to edit the parse tree of a Python expression
and create executable code from this.  This is better than trying to
parse and modify an arbitrary Python code fragment as a string because
parsing is performed in a manner identical to the code forming the
application.  It is also faster.

     Note: From Python 2.5 onward, it’s much more convenient to cut in
     at the Abstract Syntax Tree (AST) generation and compilation stage,
     using the *note ast: f. module.

     The *note parser: 12b. module exports the names documented here
     also with "st" replaced by "ast"; this is a legacy from the time
     when there was no other AST and has nothing to do with the AST
     found in Python 2.5.  This is also the reason for the functions’
     keyword arguments being called _ast_, not _st_.  The "ast"
     functions have been removed in Python 3.

  There are a few things to note about this module which are important
to making use of the data structures created.  This is not a tutorial on
editing the parse trees for Python code, but some examples of using the
*note parser: 12b. module are presented.

  Most importantly, a good understanding of the Python grammar processed
by the internal parser is required.  For full information on the
language syntax, refer to *note The Python Language Reference: 4f9.  The
parser itself is created from a grammar specification defined in the
file ‘Grammar/Grammar’ in the standard Python distribution.  The parse
trees stored in the ST objects created by this module are the actual
output from the internal parser when created by the *note expr(): 2514.
or *note suite(): 2515. functions, described below.  The ST objects
created by *note sequence2st(): 2516. faithfully simulate those
structures.  Be aware that the values of the sequences which are
considered "correct" will vary from one version of Python to another as
the formal grammar for the language is revised.  However, transporting
code from one Python version to another as source text will always allow
correct parse trees to be created in the target version, with the only
restriction being that migrating to an older version of the interpreter
will not support more recent language constructs.  The parse trees are
not typically compatible from one version to another, whereas source
code has always been forward-compatible.

  Each element of the sequences returned by *note st2list(): 2517. or
*note st2tuple(): 2518. has a simple form.  Sequences representing
non-terminal elements in the grammar always have a length greater than
one.  The first element is an integer which identifies a production in
the grammar.  These integers are given symbolic names in the C header
file ‘Include/graminit.h’ and the Python module *note symbol: 16b.  Each
additional element of the sequence represents a component of the
production as recognized in the input string: these are always sequences
which have the same form as the parent.  An important aspect of this
structure which should be noted is that keywords used to identify the
parent node type, such as the keyword *note if: 42c. in an ‘if_stmt’,
are included in the node tree without any special treatment.  For
example, the *note if: 42c. keyword is represented by the tuple ‘(1,
'if')’, where ‘1’ is the numeric value associated with all ‘NAME’
tokens, including variable and function names defined by the user.  In
an alternate form returned when line number information is requested,
the same token might be represented as ‘(1, 'if', 12)’, where the ‘12’
represents the line number at which the terminal symbol was found.

  Terminal elements are represented in much the same way, but without
any child elements and the addition of the source text which was
identified.  The example of the *note if: 42c. keyword above is
representative.  The various types of terminal symbols are defined in
the C header file ‘Include/token.h’ and the Python module *note token:
17e.

  The ST objects are not required to support the functionality of this
module, but are provided for three purposes: to allow an application to
amortize the cost of processing complex parse trees, to provide a parse
tree representation which conserves memory space when compared to the
Python list or tuple representation, and to ease the creation of
additional modules in C which manipulate parse trees.  A simple
"wrapper" class may be created in Python to hide the use of ST objects.

  The *note parser: 12b. module defines functions for a few distinct
purposes.  The most important purposes are to create ST objects and to
convert ST objects to other representations such as parse trees and
compiled code objects, but there are also functions which serve to query
the type of parse tree represented by an ST object.

See also
........

Module *note symbol: 16b.

     Useful constants representing internal nodes of the parse tree.

Module *note token: 17e.

     Useful constants representing leaf nodes of the parse tree and
     functions for testing node values.

* Menu:

* Creating ST Objects:: 
* Converting ST Objects:: 
* Queries on ST Objects:: 
* Exceptions and Error Handling:: 
* ST Objects:: 
* Example; Emulation of compile(): Example Emulation of compile. 


File: python.info,  Node: Creating ST Objects,  Next: Converting ST Objects,  Up: parser --- Access Python parse trees

5.31.1.1 Creating ST Objects
............................

ST objects may be created from source code or from a parse tree.  When
creating an ST object from source, different functions are used to
create the ‘'eval'’ and ‘'exec'’ forms.

 -- Function: parser.expr (source)

     The *note expr(): 2514. function parses the parameter _source_ as
     if it were an input to ‘compile(source, 'file.py', 'eval')’.  If
     the parse succeeds, an ST object is created to hold the internal
     parse tree representation, otherwise an appropriate exception is
     raised.

 -- Function: parser.suite (source)

     The *note suite(): 2515. function parses the parameter _source_ as
     if it were an input to ‘compile(source, 'file.py', 'exec')’.  If
     the parse succeeds, an ST object is created to hold the internal
     parse tree representation, otherwise an appropriate exception is
     raised.

 -- Function: parser.sequence2st (sequence)

     This function accepts a parse tree represented as a sequence and
     builds an internal representation if possible.  If it can validate
     that the tree conforms to the Python grammar and all nodes are
     valid node types in the host version of Python, an ST object is
     created from the internal representation and returned to the
     called.  If there is a problem creating the internal
     representation, or if the tree cannot be validated, a *note
     ParserError: 251b. exception is raised.  An ST object created this
     way should not be assumed to compile correctly; normal exceptions
     raised by compilation may still be initiated when the ST object is
     passed to *note compilest(): 251c.  This may indicate problems not
     related to syntax (such as a *note MemoryError: 94d. exception),
     but may also be due to constructs such as the result of parsing
     ‘del f(0)’, which escapes the Python parser but is checked by the
     bytecode compiler.

     Sequences representing terminal tokens may be represented as either
     two-element lists of the form ‘(1, 'name')’ or as three-element
     lists of the form ‘(1, 'name', 56)’.  If the third element is
     present, it is assumed to be a valid line number.  The line number
     may be specified for any subset of the terminal symbols in the
     input tree.

 -- Function: parser.tuple2st (sequence)

     This is the same function as *note sequence2st(): 2516.  This entry
     point is maintained for backward compatibility.


File: python.info,  Node: Converting ST Objects,  Next: Queries on ST Objects,  Prev: Creating ST Objects,  Up: parser --- Access Python parse trees

5.31.1.2 Converting ST Objects
..............................

ST objects, regardless of the input used to create them, may be
converted to parse trees represented as list- or tuple- trees, or may be
compiled into executable code objects.  Parse trees may be extracted
with or without line numbering information.

 -- Function: parser.st2list (ast[, line_info])

     This function accepts an ST object from the caller in _ast_ and
     returns a Python list representing the equivalent parse tree.  The
     resulting list representation can be used for inspection or the
     creation of a new parse tree in list form.  This function does not
     fail so long as memory is available to build the list
     representation.  If the parse tree will only be used for
     inspection, *note st2tuple(): 2518. should be used instead to
     reduce memory consumption and fragmentation.  When the list
     representation is required, this function is significantly faster
     than retrieving a tuple representation and converting that to
     nested lists.

     If _line_info_ is true, line number information will be included
     for all terminal tokens as a third element of the list representing
     the token.  Note that the line number provided specifies the line
     on which the token _ends_.  This information is omitted if the flag
     is false or omitted.

 -- Function: parser.st2tuple (ast[, line_info])

     This function accepts an ST object from the caller in _ast_ and
     returns a Python tuple representing the equivalent parse tree.
     Other than returning a tuple instead of a list, this function is
     identical to *note st2list(): 2517.

     If _line_info_ is true, line number information will be included
     for all terminal tokens as a third element of the list representing
     the token.  This information is omitted if the flag is false or
     omitted.

 -- Function: parser.compilest (ast, filename='<syntax-tree>')

     The Python byte compiler can be invoked on an ST object to produce
     code objects which can be used as part of an *note exec: 404.
     statement or a call to the built-in *note eval(): 360. function.
     This function provides the interface to the compiler, passing the
     internal parse tree from _ast_ to the parser, using the source file
     name specified by the _filename_ parameter.  The default value
     supplied for _filename_ indicates that the source was an ST object.

     Compiling an ST object may result in exceptions related to
     compilation; an example would be a *note SyntaxError: 498. caused
     by the parse tree for ‘del f(0)’: this statement is considered
     legal within the formal grammar for Python but is not a legal
     language construct.  The *note SyntaxError: 498. raised for this
     condition is actually generated by the Python byte-compiler
     normally, which is why it can be raised at this point by the *note
     parser: 12b. module.  Most causes of compilation failure can be
     diagnosed programmatically by inspection of the parse tree.


File: python.info,  Node: Queries on ST Objects,  Next: Exceptions and Error Handling,  Prev: Converting ST Objects,  Up: parser --- Access Python parse trees

5.31.1.3 Queries on ST Objects
..............................

Two functions are provided which allow an application to determine if an
ST was created as an expression or a suite.  Neither of these functions
can be used to determine if an ST was created from source code via *note
expr(): 2514. or *note suite(): 2515. or from a parse tree via *note
sequence2st(): 2516.

 -- Function: parser.isexpr (ast)

     When _ast_ represents an ‘'eval'’ form, this function returns true,
     otherwise it returns false.  This is useful, since code objects
     normally cannot be queried for this information using existing
     built-in functions.  Note that the code objects created by *note
     compilest(): 251c. cannot be queried like this either, and are
     identical to those created by the built-in *note compile(): 1fb.
     function.

 -- Function: parser.issuite (ast)

     This function mirrors *note isexpr(): 2522. in that it reports
     whether an ST object represents an ‘'exec'’ form, commonly known as
     a "suite."  It is not safe to assume that this function is
     equivalent to ‘not isexpr(ast)’, as additional syntactic fragments
     may be supported in the future.


File: python.info,  Node: Exceptions and Error Handling,  Next: ST Objects,  Prev: Queries on ST Objects,  Up: parser --- Access Python parse trees

5.31.1.4 Exceptions and Error Handling
......................................

The parser module defines a single exception, but may also pass other
built-in exceptions from other portions of the Python runtime
environment.  See each function for information about the exceptions it
can raise.

 -- Exception: parser.ParserError

     Exception raised when a failure occurs within the parser module.
     This is generally produced for validation failures rather than the
     built-in *note SyntaxError: 498. raised during normal parsing.  The
     exception argument is either a string describing the reason of the
     failure or a tuple containing a sequence causing the failure from a
     parse tree passed to *note sequence2st(): 2516. and an explanatory
     string.  Calls to *note sequence2st(): 2516. need to be able to
     handle either type of exception, while calls to other functions in
     the module will only need to be aware of the simple string values.

  Note that the functions *note compilest(): 251c, *note expr(): 2514,
and *note suite(): 2515. may raise exceptions which are normally raised
by the parsing and compilation process.  These include the built in
exceptions *note MemoryError: 94d, *note OverflowError: 2db, *note
SyntaxError: 498, and *note SystemError: 950.  In these cases, these
exceptions carry all the meaning normally associated with them.  Refer
to the descriptions of each function for detailed information.


File: python.info,  Node: ST Objects,  Next: Example Emulation of compile,  Prev: Exceptions and Error Handling,  Up: parser --- Access Python parse trees

5.31.1.5 ST Objects
...................

Ordered and equality comparisons are supported between ST objects.
Pickling of ST objects (using the *note pickle: 12d. module) is also
supported.

 -- Data: parser.STType

     The type of the objects returned by *note expr(): 2514, *note
     suite(): 2515. and *note sequence2st(): 2516.

  ST objects have the following methods:

 -- Method: ST.compile ([filename])

     Same as ‘compilest(st, filename)’.

 -- Method: ST.isexpr ()

     Same as ‘isexpr(st)’.

 -- Method: ST.issuite ()

     Same as ‘issuite(st)’.

 -- Method: ST.tolist ([line_info])

     Same as ‘st2list(st, line_info)’.

 -- Method: ST.totuple ([line_info])

     Same as ‘st2tuple(st, line_info)’.


File: python.info,  Node: Example Emulation of compile,  Prev: ST Objects,  Up: parser --- Access Python parse trees

5.31.1.6 Example: Emulation of ‘compile()’
..........................................

While many useful operations may take place between parsing and bytecode
generation, the simplest operation is to do nothing.  For this purpose,
using the *note parser: 12b. module to produce an intermediate data
structure is equivalent to the code

     >>> code = compile('a + 5', 'file.py', 'eval')
     >>> a = 5
     >>> eval(code)
     10

  The equivalent operation using the *note parser: 12b. module is
somewhat longer, and allows the intermediate internal parse tree to be
retained as an ST object:

     >>> import parser
     >>> st = parser.expr('a + 5')
     >>> code = st.compile('file.py')
     >>> a = 5
     >>> eval(code)
     10

  An application which needs both ST and code objects can package this
code into readily available functions:

     import parser

     def load_suite(source_string):
         st = parser.suite(source_string)
         return st, st.compile()

     def load_expression(source_string):
         st = parser.expr(source_string)
         return st, st.compile()


File: python.info,  Node: ast --- Abstract Syntax Trees,  Next: symtable --- Access to the compiler's symbol tables,  Prev: parser --- Access Python parse trees,  Up: Python Language Services

5.31.2 ‘ast’ — Abstract Syntax Trees
------------------------------------

New in version 2.5: The low-level ‘_ast’ module containing only the node
classes.

  New in version 2.6: The high-level ‘ast’ module containing all
helpers.

  *Source code:* Lib/ast.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note ast: f. module helps Python applications to process trees of
the Python abstract syntax grammar.  The abstract syntax itself might
change with each Python release; this module helps to find out
programmatically what the current grammar looks like.

  An abstract syntax tree can be generated by passing
‘ast.PyCF_ONLY_AST’ as a flag to the *note compile(): 1fb. built-in
function, or using the *note parse(): 2531. helper provided in this
module.  The result will be a tree of objects whose classes all inherit
from *note ast.AST: 2532.  An abstract syntax tree can be compiled into
a Python code object using the built-in *note compile(): 1fb. function.

* Menu:

* Node classes:: 
* Abstract Grammar:: 
* ast Helpers:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/ast.py


File: python.info,  Node: Node classes,  Next: Abstract Grammar,  Up: ast --- Abstract Syntax Trees

5.31.2.1 Node classes
.....................

 -- Class: ast.AST

     This is the base of all AST node classes.  The actual node classes
     are derived from the ‘Parser/Python.asdl’ file, which is reproduced
     *note below: 2534.  They are defined in the ‘_ast’ C module and
     re-exported in *note ast: f.

     There is one class defined for each left-hand side symbol in the
     abstract grammar (for example, ‘ast.stmt’ or ‘ast.expr’).  In
     addition, there is one class defined for each constructor on the
     right-hand side; these classes inherit from the classes for the
     left-hand side trees.  For example, ‘ast.BinOp’ inherits from
     ‘ast.expr’.  For production rules with alternatives (aka "sums"),
     the left-hand side class is abstract: only instances of specific
     constructor nodes are ever created.

      -- Attribute: _fields

          Each concrete class has an attribute *note _fields: 2535.
          which gives the names of all child nodes.

          Each instance of a concrete class has one attribute for each
          child node, of the type as defined in the grammar.  For
          example, ‘ast.BinOp’ instances have an attribute ‘left’ of
          type ‘ast.expr’.

          If these attributes are marked as optional in the grammar
          (using a question mark), the value might be ‘None’.  If the
          attributes can have zero-or-more values (marked with an
          asterisk), the values are represented as Python lists.  All
          possible attributes must be present and have valid values when
          compiling an AST with *note compile(): 1fb.

      -- Attribute: lineno
      -- Attribute: col_offset

          Instances of ‘ast.expr’ and ‘ast.stmt’ subclasses have *note
          lineno: 2536. and *note col_offset: 2537. attributes.  The
          *note lineno: 2536. is the line number of source text
          (1-indexed so the first line is line 1) and the *note
          col_offset: 2537. is the UTF-8 byte offset of the first token
          that generated the node.  The UTF-8 offset is recorded because
          the parser uses UTF-8 internally.

     The constructor of a class ‘ast.T’ parses its arguments as follows:

        * If there are positional arguments, there must be as many as
          there are items in ‘T._fields’; they will be assigned as
          attributes of these names.

        * If there are keyword arguments, they will set the attributes
          of the same names to the given values.

     For example, to create and populate an ‘ast.UnaryOp’ node, you
     could use

          node = ast.UnaryOp()
          node.op = ast.USub()
          node.operand = ast.Num()
          node.operand.n = 5
          node.operand.lineno = 0
          node.operand.col_offset = 0
          node.lineno = 0
          node.col_offset = 0

     or the more compact

          node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),
                             lineno=0, col_offset=0)

     New in version 2.6: The constructor as explained above was added.
     In Python 2.5 nodes had to be created by calling the class
     constructor without arguments and setting the attributes
     afterwards.


File: python.info,  Node: Abstract Grammar,  Next: ast Helpers,  Prev: Node classes,  Up: ast --- Abstract Syntax Trees

5.31.2.2 Abstract Grammar
.........................

The module defines a string constant ‘__version__’ which is the decimal
Subversion revision number of the file shown below.

  The abstract grammar is currently defined as follows:

     -- ASDL's five builtin types are identifier, int, string, object, bool

     module Python version "$Revision$"
     {
     	mod = Module(stmt* body)
     	    | Interactive(stmt* body)
     	    | Expression(expr body)

     	    -- not really an actual node but useful in Jython's typesystem.
     	    | Suite(stmt* body)

     	stmt = FunctionDef(identifier name, arguments args,
                                 stmt* body, expr* decorator_list)
     	      | ClassDef(identifier name, expr* bases, stmt* body, expr* decorator_list)
     	      | Return(expr? value)

     	      | Delete(expr* targets)
     	      | Assign(expr* targets, expr value)
     	      | AugAssign(expr target, operator op, expr value)

     	      -- not sure if bool is allowed, can always use int
      	      | Print(expr? dest, expr* values, bool nl)

     	      -- use 'orelse' because else is a keyword in target languages
     	      | For(expr target, expr iter, stmt* body, stmt* orelse)
     	      | While(expr test, stmt* body, stmt* orelse)
     	      | If(expr test, stmt* body, stmt* orelse)
     	      | With(expr context_expr, expr? optional_vars, stmt* body)

     	      -- 'type' is a bad name
     	      | Raise(expr? type, expr? inst, expr? tback)
     	      | TryExcept(stmt* body, excepthandler* handlers, stmt* orelse)
     	      | TryFinally(stmt* body, stmt* finalbody)
     	      | Assert(expr test, expr? msg)

     	      | Import(alias* names)
     	      | ImportFrom(identifier? module, alias* names, int? level)

     	      -- Doesn't capture requirement that locals must be
     	      -- defined if globals is
     	      -- still supports use as a function!
     	      | Exec(expr body, expr? globals, expr? locals)

     	      | Global(identifier* names)
     	      | Expr(expr value)
     	      | Pass | Break | Continue

     	      -- XXX Jython will be different
     	      -- col_offset is the byte offset in the utf8 string the parser uses
     	      attributes (int lineno, int col_offset)

     	      -- BoolOp() can use left & right?
     	expr = BoolOp(boolop op, expr* values)
     	     | BinOp(expr left, operator op, expr right)
     	     | UnaryOp(unaryop op, expr operand)
     	     | Lambda(arguments args, expr body)
     	     | IfExp(expr test, expr body, expr orelse)
     	     | Dict(expr* keys, expr* values)
     	     | Set(expr* elts)
     	     | ListComp(expr elt, comprehension* generators)
     	     | SetComp(expr elt, comprehension* generators)
     	     | DictComp(expr key, expr value, comprehension* generators)
     	     | GeneratorExp(expr elt, comprehension* generators)
     	     -- the grammar constrains where yield expressions can occur
     	     | Yield(expr? value)
     	     -- need sequences for compare to distinguish between
     	     -- x < 4 < 3 and (x < 4) < 3
     	     | Compare(expr left, cmpop* ops, expr* comparators)
     	     | Call(expr func, expr* args, keyword* keywords,
     			 expr? starargs, expr? kwargs)
     	     | Repr(expr value)
     	     | Num(object n) -- a number as a PyObject.
     	     | Str(string s) -- need to specify raw, unicode, etc?
     	     -- other literals? bools?

     	     -- the following expression can appear in assignment context
     	     | Attribute(expr value, identifier attr, expr_context ctx)
     	     | Subscript(expr value, slice slice, expr_context ctx)
     	     | Name(identifier id, expr_context ctx)
     	     | List(expr* elts, expr_context ctx)
     	     | Tuple(expr* elts, expr_context ctx)

     	      -- col_offset is the byte offset in the utf8 string the parser uses
     	      attributes (int lineno, int col_offset)

     	expr_context = Load | Store | Del | AugLoad | AugStore | Param

     	slice = Ellipsis | Slice(expr? lower, expr? upper, expr? step)
     	      | ExtSlice(slice* dims)
     	      | Index(expr value)

     	boolop = And | Or

     	operator = Add | Sub | Mult | Div | Mod | Pow | LShift
                      | RShift | BitOr | BitXor | BitAnd | FloorDiv

     	unaryop = Invert | Not | UAdd | USub

     	cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

     	comprehension = (expr target, expr iter, expr* ifs)

     	-- not sure what to call the first argument for raise and except
     	excepthandler = ExceptHandler(expr? type, expr? name, stmt* body)
     	                attributes (int lineno, int col_offset)

     	arguments = (expr* args, identifier? vararg,
     		     identifier? kwarg, expr* defaults)

             -- keyword arguments supplied to call
             keyword = (identifier arg, expr value)

             -- import name with optional 'as' alias.
             alias = (identifier name, identifier? asname)
     }



File: python.info,  Node: ast Helpers,  Prev: Abstract Grammar,  Up: ast --- Abstract Syntax Trees

5.31.2.3 ‘ast’ Helpers
......................

New in version 2.6.

  Apart from the node classes, *note ast: f. module defines these
utility functions and classes for traversing abstract syntax trees:

 -- Function: ast.parse (source, filename='<unknown>', mode='exec')

     Parse the source into an AST node.  Equivalent to ‘compile(source,
     filename, mode, ast.PyCF_ONLY_AST)’.

 -- Function: ast.literal_eval (node_or_string)

     Safely evaluate an expression node or a Unicode or _Latin-1_
     encoded string containing a Python expression.  The string or node
     provided may only consist of the following Python literal
     structures: strings, numbers, tuples, lists, dicts, booleans, and
     ‘None’.

     This can be used for safely evaluating strings containing Python
     expressions from untrusted sources without the need to parse the
     values oneself.

 -- Function: ast.get_docstring (node, clean=True)

     Return the docstring of the given _node_ (which must be a
     ‘FunctionDef’, ‘ClassDef’ or ‘Module’ node), or ‘None’ if it has no
     docstring.  If _clean_ is true, clean up the docstring’s
     indentation with *note inspect.cleandoc(): 244e.

 -- Function: ast.fix_missing_locations (node)

     When you compile a node tree with *note compile(): 1fb, the
     compiler expects ‘lineno’ and ‘col_offset’ attributes for every
     node that supports them.  This is rather tedious to fill in for
     generated nodes, so this helper adds these attributes recursively
     where not already set, by setting them to the values of the parent
     node.  It works recursively starting at _node_.

 -- Function: ast.increment_lineno (node, n=1)

     Increment the line number of each node in the tree starting at
     _node_ by _n_.  This is useful to "move code" to a different
     location in a file.

 -- Function: ast.copy_location (new_node, old_node)

     Copy source location (‘lineno’ and ‘col_offset’) from _old_node_ to
     _new_node_ if possible, and return _new_node_.

 -- Function: ast.iter_fields (node)

     Yield a tuple of ‘(fieldname, value)’ for each field in
     ‘node._fields’ that is present on _node_.

 -- Function: ast.iter_child_nodes (node)

     Yield all direct child nodes of _node_, that is, all fields that
     are nodes and all items of fields that are lists of nodes.

 -- Function: ast.walk (node)

     Recursively yield all descendant nodes in the tree starting at
     _node_ (including _node_ itself), in no specified order.  This is
     useful if you only want to modify nodes in place and don’t care
     about the context.

 -- Class: ast.NodeVisitor

     A node visitor base class that walks the abstract syntax tree and
     calls a visitor function for every node found.  This function may
     return a value which is forwarded by the *note visit(): 2542.
     method.

     This class is meant to be subclassed, with the subclass adding
     visitor methods.

      -- Method: visit (node)

          Visit a node.  The default implementation calls the method
          called ‘self.visit__classname_’ where _classname_ is the name
          of the node class, or *note generic_visit(): 2543. if that
          method doesn’t exist.

      -- Method: generic_visit (node)

          This visitor calls *note visit(): 2542. on all children of the
          node.

          Note that child nodes of nodes that have a custom visitor
          method won’t be visited unless the visitor calls *note
          generic_visit(): 2543. or visits them itself.

     Don’t use the *note NodeVisitor: 2541. if you want to apply changes
     to nodes during traversal.  For this a special visitor exists
     (*note NodeTransformer: 2544.) that allows modifications.

 -- Class: ast.NodeTransformer

     A *note NodeVisitor: 2541. subclass that walks the abstract syntax
     tree and allows modification of nodes.

     The *note NodeTransformer: 2544. will walk the AST and use the
     return value of the visitor methods to replace or remove the old
     node.  If the return value of the visitor method is ‘None’, the
     node will be removed from its location, otherwise it is replaced
     with the return value.  The return value may be the original node
     in which case no replacement takes place.

     Here is an example transformer that rewrites all occurrences of
     name lookups (‘foo’) to ‘data['foo']’:

          class RewriteName(NodeTransformer):

              def visit_Name(self, node):
                  return copy_location(Subscript(
                      value=Name(id='data', ctx=Load()),
                      slice=Index(value=Str(s=node.id)),
                      ctx=node.ctx
                  ), node)

     Keep in mind that if the node you’re operating on has child nodes
     you must either transform the child nodes yourself or call the
     ‘generic_visit()’ method for the node first.

     For nodes that were part of a collection of statements (that
     applies to all statement nodes), the visitor may also return a list
     of nodes rather than just a single node.

     Usually you use the transformer like this:

          node = YourTransformer().visit(node)

 -- Function: ast.dump (node, annotate_fields=True,
          include_attributes=False)

     Return a formatted dump of the tree in _node_.  This is mainly
     useful for debugging purposes.  The returned string will show the
     names and the values for fields.  This makes the code impossible to
     evaluate, so if evaluation is wanted _annotate_fields_ must be set
     to ‘False’.  Attributes such as line numbers and column offsets are
     not dumped by default.  If this is wanted, _include_attributes_ can
     be set to ‘True’.


File: python.info,  Node: symtable --- Access to the compiler's symbol tables,  Next: symbol --- Constants used with Python parse trees,  Prev: ast --- Abstract Syntax Trees,  Up: Python Language Services

5.31.3 ‘symtable’ — Access to the compiler’s symbol tables
----------------------------------------------------------

Symbol tables are generated by the compiler from AST just before
bytecode is generated.  The symbol table is responsible for calculating
the scope of every identifier in the code.  *note symtable: 16c.
provides an interface to examine these tables.

* Menu:

* Generating Symbol Tables:: 
* Examining Symbol Tables:: 


File: python.info,  Node: Generating Symbol Tables,  Next: Examining Symbol Tables,  Up: symtable --- Access to the compiler's symbol tables

5.31.3.1 Generating Symbol Tables
.................................

 -- Function: symtable.symtable (code, filename, compile_type)

     Return the toplevel *note SymbolTable: 254a. for the Python source
     _code_.  _filename_ is the name of the file containing the code.
     _compile_type_ is like the _mode_ argument to *note compile(): 1fb.


File: python.info,  Node: Examining Symbol Tables,  Prev: Generating Symbol Tables,  Up: symtable --- Access to the compiler's symbol tables

5.31.3.2 Examining Symbol Tables
................................

 -- Class: symtable.SymbolTable

     A namespace table for a block.  The constructor is not public.

      -- Method: get_type ()

          Return the type of the symbol table.  Possible values are
          ‘'class'’, ‘'module'’, and ‘'function'’.

      -- Method: get_id ()

          Return the table’s identifier.

      -- Method: get_name ()

          Return the table’s name.  This is the name of the class if the
          table is for a class, the name of the function if the table is
          for a function, or ‘'top'’ if the table is global (*note
          get_type(): 254c. returns ‘'module'’).

      -- Method: get_lineno ()

          Return the number of the first line in the block this table
          represents.

      -- Method: is_optimized ()

          Return ‘True’ if the locals in this table can be optimized.

      -- Method: is_nested ()

          Return ‘True’ if the block is a nested class or function.

      -- Method: has_children ()

          Return ‘True’ if the block has nested namespaces within it.
          These can be obtained with *note get_children(): 2553.

      -- Method: has_exec ()

          Return ‘True’ if the block uses ‘exec’.

      -- Method: has_import_star ()

          Return ‘True’ if the block uses a starred from-import.

      -- Method: get_identifiers ()

          Return a list of names of symbols in this table.

      -- Method: lookup (name)

          Lookup _name_ in the table and return a *note Symbol: 2558.
          instance.

      -- Method: get_symbols ()

          Return a list of *note Symbol: 2558. instances for names in
          the table.

      -- Method: get_children ()

          Return a list of the nested symbol tables.

 -- Class: symtable.Function

     A namespace for a function or method.  This class inherits *note
     SymbolTable: 254a.

      -- Method: get_parameters ()

          Return a tuple containing names of parameters to this
          function.

      -- Method: get_locals ()

          Return a tuple containing names of locals in this function.

      -- Method: get_globals ()

          Return a tuple containing names of globals in this function.

      -- Method: get_frees ()

          Return a tuple containing names of free variables in this
          function.

 -- Class: symtable.Class

     A namespace of a class.  This class inherits *note SymbolTable:
     254a.

      -- Method: get_methods ()

          Return a tuple containing the names of methods declared in the
          class.

 -- Class: symtable.Symbol

     An entry in a *note SymbolTable: 254a. corresponding to an
     identifier in the source.  The constructor is not public.

      -- Method: get_name ()

          Return the symbol’s name.

      -- Method: is_referenced ()

          Return ‘True’ if the symbol is used in its block.

      -- Method: is_imported ()

          Return ‘True’ if the symbol is created from an import
          statement.

      -- Method: is_parameter ()

          Return ‘True’ if the symbol is a parameter.

      -- Method: is_global ()

          Return ‘True’ if the symbol is global.

      -- Method: is_declared_global ()

          Return ‘True’ if the symbol is declared global with a global
          statement.

      -- Method: is_local ()

          Return ‘True’ if the symbol is local to its block.

      -- Method: is_free ()

          Return ‘True’ if the symbol is referenced in its block, but
          not assigned to.

      -- Method: is_assigned ()

          Return ‘True’ if the symbol is assigned to in its block.

      -- Method: is_namespace ()

          Return ‘True’ if name binding introduces new namespace.

          If the name is used as the target of a function or class
          statement, this will be true.

          For example:

               >>> table = symtable.symtable("def some_func(): pass", "string", "exec")
               >>> table.lookup("some_func").is_namespace()
               True

          Note that a single name can be bound to multiple objects.  If
          the result is ‘True’, the name may also be bound to other
          objects, like an int or list, that does not introduce a new
          namespace.

      -- Method: get_namespaces ()

          Return a list of namespaces bound to this name.

      -- Method: get_namespace ()

          Return the namespace bound to this name.  If more than one
          namespace is bound, a *note ValueError: 236. is raised.


File: python.info,  Node: symbol --- Constants used with Python parse trees,  Next: token --- Constants used with Python parse trees,  Prev: symtable --- Access to the compiler's symbol tables,  Up: Python Language Services

5.31.4 ‘symbol’ — Constants used with Python parse trees
--------------------------------------------------------

*Source code:* Lib/symbol.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides constants which represent the numeric values of
internal nodes of the parse tree.  Unlike most Python constants, these
use lower-case names.  Refer to the file ‘Grammar/Grammar’ in the Python
distribution for the definitions of the names in the context of the
language grammar.  The specific numeric values which the names map to
may change between Python versions.

  This module also provides one additional data object:

 -- Data: symbol.sym_name

     Dictionary mapping the numeric values of the constants defined in
     this module back to name strings, allowing more human-readable
     representation of parse trees to be generated.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/symbol.py


File: python.info,  Node: token --- Constants used with Python parse trees,  Next: keyword --- Testing for Python keywords,  Prev: symbol --- Constants used with Python parse trees,  Up: Python Language Services

5.31.5 ‘token’ — Constants used with Python parse trees
-------------------------------------------------------

*Source code:* Lib/token.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module provides constants which represent the numeric values of
leaf nodes of the parse tree (terminal tokens).  Refer to the file
‘Grammar/Grammar’ in the Python distribution for the definitions of the
names in the context of the language grammar.  The specific numeric
values which the names map to may change between Python versions.

  The module also provides a mapping from numeric codes to names and
some functions.  The functions mirror definitions in the Python C header
files.

 -- Data: token.tok_name

     Dictionary mapping the numeric values of the constants defined in
     this module back to name strings, allowing more human-readable
     representation of parse trees to be generated.

 -- Function: token.ISTERMINAL (x)

     Return true for terminal token values.

 -- Function: token.ISNONTERMINAL (x)

     Return true for non-terminal token values.

 -- Function: token.ISEOF (x)

     Return true if _x_ is the marker indicating the end of input.

  The token constants are:

 -- Data: token.ENDMARKER
 -- Data: token.NAME
 -- Data: token.NUMBER
 -- Data: token.STRING
 -- Data: token.NEWLINE
 -- Data: token.INDENT
 -- Data: token.DEDENT
 -- Data: token.LPAR
 -- Data: token.RPAR
 -- Data: token.LSQB
 -- Data: token.RSQB
 -- Data: token.COLON
 -- Data: token.COMMA
 -- Data: token.SEMI
 -- Data: token.PLUS
 -- Data: token.MINUS
 -- Data: token.STAR
 -- Data: token.SLASH
 -- Data: token.VBAR
 -- Data: token.AMPER
 -- Data: token.LESS
 -- Data: token.GREATER
 -- Data: token.EQUAL
 -- Data: token.DOT
 -- Data: token.PERCENT
 -- Data: token.BACKQUOTE
 -- Data: token.LBRACE
 -- Data: token.RBRACE
 -- Data: token.EQEQUAL
 -- Data: token.NOTEQUAL
 -- Data: token.LESSEQUAL
 -- Data: token.GREATEREQUAL
 -- Data: token.TILDE
 -- Data: token.CIRCUMFLEX
 -- Data: token.LEFTSHIFT
 -- Data: token.RIGHTSHIFT
 -- Data: token.DOUBLESTAR
 -- Data: token.PLUSEQUAL
 -- Data: token.MINEQUAL
 -- Data: token.STAREQUAL
 -- Data: token.SLASHEQUAL
 -- Data: token.PERCENTEQUAL
 -- Data: token.AMPEREQUAL
 -- Data: token.VBAREQUAL
 -- Data: token.CIRCUMFLEXEQUAL
 -- Data: token.LEFTSHIFTEQUAL
 -- Data: token.RIGHTSHIFTEQUAL
 -- Data: token.DOUBLESTAREQUAL
 -- Data: token.DOUBLESLASH
 -- Data: token.DOUBLESLASHEQUAL
 -- Data: token.AT
 -- Data: token.OP
 -- Data: token.ERRORTOKEN
 -- Data: token.N_TOKENS
 -- Data: token.NT_OFFSET

See also
........

Module *note parser: 12b.

     The second example for the *note parser: 12b. module shows how to
     use the *note symbol: 16b. module.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/token.py


File: python.info,  Node: keyword --- Testing for Python keywords,  Next: tokenize --- Tokenizer for Python source,  Prev: token --- Constants used with Python parse trees,  Up: Python Language Services

5.31.6 ‘keyword’ — Testing for Python keywords
----------------------------------------------

*Source code:* Lib/keyword.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module allows a Python program to determine if a string is a
keyword.

 -- Function: keyword.iskeyword (s)

     Return true if _s_ is a Python keyword.

 -- Data: keyword.kwlist

     Sequence containing all the keywords defined for the interpreter.
     If any keywords are defined to only be active when particular *note
     __future__: 1. statements are in effect, these will be included as
     well.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/keyword.py


File: python.info,  Node: tokenize --- Tokenizer for Python source,  Next: tabnanny --- Detection of ambiguous indentation,  Prev: keyword --- Testing for Python keywords,  Up: Python Language Services

5.31.7 ‘tokenize’ — Tokenizer for Python source
-----------------------------------------------

*Source code:* Lib/tokenize.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note tokenize: 17f. module provides a lexical scanner for Python
source code, implemented in Python.  The scanner in this module returns
comments as tokens as well, making it useful for implementing
"pretty-printers," including colorizers for on-screen displays.

  To simplify token stream handling, all *note Operators: 6e2. and *note
Delimiters: 6e4. tokens are returned using the generic *note token.OP:
25a8. token type.  The exact type can be determined by checking the
second field (containing the actual token string matched) of the tuple
returned from *note tokenize.generate_tokens(): 25b2. for the character
sequence that identifies a specific operator token.

  The primary entry point is a *note generator: 5dc.:

 -- Function: tokenize.generate_tokens (readline)

     The *note generate_tokens(): 25b2. generator requires one argument,
     _readline_, which must be a callable object which provides the same
     interface as the *note readline(): 144. method of built-in file
     objects (see section *note File Objects: 643.).  Each call to the
     function should return one line of input as a string.  Alternately,
     _readline_ may be a callable object that signals completion by
     raising *note StopIteration: 333.

     The generator produces 5-tuples with these members: the token type;
     the token string; a 2-tuple ‘(srow, scol)’ of ints specifying the
     row and column where the token begins in the source; a 2-tuple
     ‘(erow, ecol)’ of ints specifying the row and column where the
     token ends in the source; and the line on which the token was
     found.  The line passed (the last tuple item) is the _logical_
     line; continuation lines are included.

     New in version 2.2.

  An older entry point is retained for backward compatibility:

 -- Function: tokenize.tokenize (readline[, tokeneater])

     The *note tokenize(): 17f. function accepts two parameters: one
     representing the input stream, and one providing an output
     mechanism for *note tokenize(): 17f.

     The first parameter, _readline_, must be a callable object which
     provides the same interface as the *note readline(): 144. method of
     built-in file objects (see section *note File Objects: 643.).  Each
     call to the function should return one line of input as a string.
     Alternately, _readline_ may be a callable object that signals
     completion by raising *note StopIteration: 333.

     Changed in version 2.5: Added *note StopIteration: 333. support.

     The second parameter, _tokeneater_, must also be a callable object.
     It is called once for each token, with five arguments,
     corresponding to the tuples generated by *note generate_tokens():
     25b2.

  All constants from the *note token: 17e. module are also exported from
*note tokenize: 17f, as are two additional token type values that might
be passed to the _tokeneater_ function by *note tokenize(): 17f.:

 -- Data: tokenize.COMMENT

     Token value used to indicate a comment.

 -- Data: tokenize.NL

     Token value used to indicate a non-terminating newline.  The
     NEWLINE token indicates the end of a logical line of Python code;
     NL tokens are generated when a logical line of code is continued
     over multiple physical lines.

  Another function is provided to reverse the tokenization process.
This is useful for creating tools that tokenize a script, modify the
token stream, and write back the modified script.

 -- Function: tokenize.untokenize (iterable)

     Converts tokens back into Python source code.  The _iterable_ must
     return sequences with at least two elements, the token type and the
     token string.  Any additional sequence elements are ignored.

     The reconstructed script is returned as a single string.  The
     result is guaranteed to tokenize back to match the input so that
     the conversion is lossless and round-trips are assured.  The
     guarantee applies only to the token type and token string as the
     spacing between tokens (column positions) may change.

     New in version 2.5.

 -- Exception: tokenize.TokenError

     Raised when either a docstring or expression that may be split over
     several lines is not completed anywhere in the file, for example:

          """Beginning of
          docstring

     or:

          [1,
           2,
           3

  Note that unclosed single-quoted strings do not cause an error to be
raised.  They are tokenized as ‘ERRORTOKEN’, followed by the
tokenization of their contents.

  Example of a script re-writer that transforms float literals into
Decimal objects:

     def decistmt(s):
         """Substitute Decimals for floats in a string of statements.

         >>> from decimal import Decimal
         >>> s = 'print +21.3e-5*-.1234/81.7'
         >>> decistmt(s)
         "print +Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7')"

         >>> exec(s)
         -3.21716034272e-007
         >>> exec(decistmt(s))
         -3.217160342717258261933904529E-7

         """
         result = []
         g = generate_tokens(StringIO(s).readline)   # tokenize the string
         for toknum, tokval, _, _, _  in g:
             if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens
                 result.extend([
                     (NAME, 'Decimal'),
                     (OP, '('),
                     (STRING, repr(tokval)),
                     (OP, ')')
                 ])
             else:
                 result.append((toknum, tokval))
         return untokenize(result)

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/tokenize.py


File: python.info,  Node: tabnanny --- Detection of ambiguous indentation,  Next: pyclbr --- Python class browser support,  Prev: tokenize --- Tokenizer for Python source,  Up: Python Language Services

5.31.8 ‘tabnanny’ — Detection of ambiguous indentation
------------------------------------------------------

*Source code:* Lib/tabnanny.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  For the time being this module is intended to be called as a script.
However it is possible to import it into an IDE and use the function
*note check(): 25ba. described below.

     Note: The API provided by this module is likely to change in future
     releases; such changes may not be backward compatible.

 -- Function: tabnanny.check (file_or_dir)

     If _file_or_dir_ is a directory and not a symbolic link, then
     recursively descend the directory tree named by _file_or_dir_,
     checking all ‘.py’ files along the way.  If _file_or_dir_ is an
     ordinary Python source file, it is checked for whitespace related
     problems.  The diagnostic messages are written to standard output
     using the print statement.

 -- Data: tabnanny.verbose

     Flag indicating whether to print verbose messages.  This is
     incremented by the ‘-v’ option if called as a script.

 -- Data: tabnanny.filename_only

     Flag indicating whether to print only the filenames of files
     containing whitespace related problems.  This is set to true by the
     ‘-q’ option if called as a script.

 -- Exception: tabnanny.NannyNag

     Raised by *note tokeneater(): 25be. if detecting an ambiguous
     indent.  Captured and handled in *note check(): 25ba.

 -- Function: tabnanny.tokeneater (type, token, start, end, line)

     This function is used by *note check(): 25ba. as a callback
     parameter to the function *note tokenize.tokenize(): 25b3.

See also
........

Module *note tokenize: 17f.

     Lexical scanner for Python source code.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/tabnanny.py


File: python.info,  Node: pyclbr --- Python class browser support,  Next: py_compile --- Compile Python source files,  Prev: tabnanny --- Detection of ambiguous indentation,  Up: Python Language Services

5.31.9 ‘pyclbr’ — Python class browser support
----------------------------------------------

*Source code:* Lib/pyclbr.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note pyclbr: 13e. module can be used to determine some limited
information about the classes, methods and top-level functions defined
in a module.  The information provided is sufficient to implement a
traditional three-pane class browser.  The information is extracted from
the source code rather than by importing the module, so this module is
safe to use with untrusted code.  This restriction makes it impossible
to use this module with modules not implemented in Python, including all
standard and optional extension modules.

 -- Function: pyclbr.readmodule (module, path=None)

     Read a module and return a dictionary mapping class names to class
     descriptor objects.  The parameter _module_ should be the name of a
     module as a string; it may be the name of a module within a
     package.  The _path_ parameter should be a sequence, and is used to
     augment the value of ‘sys.path’, which is used to locate module
     source code.

 -- Function: pyclbr.readmodule_ex (module, path=None)

     Like *note readmodule(): 25c1, but the returned dictionary, in
     addition to mapping class names to class descriptor objects, also
     maps top-level function names to function descriptor objects.
     Moreover, if the module being read is a package, the key
     ‘'__path__'’ in the returned dictionary has as its value a list
     which contains the package search path.

* Menu:

* Class Objects: Class Objects<2>. 
* Function Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/pyclbr.py


File: python.info,  Node: Class Objects<2>,  Next: Function Objects,  Up: pyclbr --- Python class browser support

5.31.9.1 Class Objects
......................

The ‘Class’ objects used as values in the dictionary returned by *note
readmodule(): 25c1. and *note readmodule_ex(): 25c2. provide the
following data attributes:

 -- Attribute: Class.module

     The name of the module defining the class described by the class
     descriptor.

 -- Attribute: Class.name

     The name of the class.

 -- Attribute: Class.super

     A list of ‘Class’ objects which describe the immediate base classes
     of the class being described.  Classes which are named as
     superclasses but which are not discoverable by *note readmodule():
     25c1. are listed as a string with the class name instead of as
     ‘Class’ objects.

 -- Attribute: Class.methods

     A dictionary mapping method names to line numbers.

 -- Attribute: Class.file

     Name of the file containing the ‘class’ statement defining the
     class.

 -- Attribute: Class.lineno

     The line number of the ‘class’ statement within the file named by
     *note file: 25c9.


File: python.info,  Node: Function Objects,  Prev: Class Objects<2>,  Up: pyclbr --- Python class browser support

5.31.9.2 Function Objects
.........................

The ‘Function’ objects used as values in the dictionary returned by
*note readmodule_ex(): 25c2. provide the following attributes:

 -- Attribute: Function.module

     The name of the module defining the function described by the
     function descriptor.

 -- Attribute: Function.name

     The name of the function.

 -- Attribute: Function.file

     Name of the file containing the ‘def’ statement defining the
     function.

 -- Attribute: Function.lineno

     The line number of the ‘def’ statement within the file named by
     *note file: 25cf.


File: python.info,  Node: py_compile --- Compile Python source files,  Next: compileall --- Byte-compile Python libraries,  Prev: pyclbr --- Python class browser support,  Up: Python Language Services

5.31.10 ‘py_compile’ — Compile Python source files
--------------------------------------------------

*Source code:* Lib/py_compile.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note py_compile: 13d. module provides a function to generate a
byte-code file from a source file, and another function used when the
module source file is invoked as a script.

  Though not often needed, this function can be useful when installing
modules for shared use, especially if some of the users may not have
permission to write the byte-code cache files in the directory
containing the source code.

 -- Exception: py_compile.PyCompileError

     Exception raised when an error occurs while attempting to compile
     the file.

 -- Function: py_compile.compile (file[, cfile[, dfile[, doraise]]])

     Compile a source file to byte-code and write out the byte-code
     cache file.  The source code is loaded from the file name _file_.
     The byte-code is written to _cfile_, which defaults to _file_ ‘+’
     ‘'c'’ (‘'o'’ if optimization is enabled in the current
     interpreter).  If _dfile_ is specified, it is used as the name of
     the source file in error messages instead of _file_.  If _doraise_
     is true, a *note PyCompileError: 25d3. is raised when an error is
     encountered while compiling _file_.  If _doraise_ is false (the
     default), an error string is written to ‘sys.stderr’, but no
     exception is raised.

 -- Function: py_compile.main ([args])

     Compile several source files.  The files named in _args_ (or on the
     command line, if _args_ is not specified) are compiled and the
     resulting bytecode is cached in the normal manner.  This function
     does not search a directory structure to locate source files; it
     only compiles files named explicitly.  If ‘'-'’ is the only
     parameter in args, the list of files is taken from standard input.

     Changed in version 2.7: Added support for ‘'-'’.

  When this module is run as a script, the *note main(): 25d5. is used
to compile all the files named on the command line.  The exit status is
nonzero if one of the files could not be compiled.

  Changed in version 2.6: Added the nonzero exit status when module is
run as a script.

See also
........

Module *note compileall: 69.

     Utilities to compile all Python source files in a directory tree.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/py_compile.py


File: python.info,  Node: compileall --- Byte-compile Python libraries,  Next: dis --- Disassembler for Python bytecode,  Prev: py_compile --- Compile Python source files,  Up: Python Language Services

5.31.11 ‘compileall’ — Byte-compile Python libraries
----------------------------------------------------

This module provides some utility functions to support installing Python
libraries.  These functions compile Python source files in a directory
tree.  This module can be used to create the cached byte-code files at
library installation time, which makes them available for use even by
users who don’t have write permission to the library directories.

* Menu:

* Command-line use:: 
* Public functions:: 


File: python.info,  Node: Command-line use,  Next: Public functions,  Up: compileall --- Byte-compile Python libraries

5.31.11.1 Command-line use
..........................

This module can work as a script (using *python -m compileall*) to
compile Python sources.

 -- Program Option: [directory|file]...

     Positional arguments are files to compile or directories that
     contain source files, traversed recursively.  If no argument is
     given, behave as if the command line was ‘-l <directories from
     sys.path>’.

 -- Program Option: -l

     Do not recurse into subdirectories, only compile source code files
     directly contained in the named or implied directories.

 -- Program Option: -f

     Force rebuild even if timestamps are up-to-date.

 -- Program Option: -q

     Do not print the list of files compiled, print only error messages.

 -- Program Option: -d destdir

     Directory prepended to the path to each file being compiled.  This
     will appear in compilation time tracebacks, and is also compiled in
     to the byte-code file, where it will be used in tracebacks and
     other messages in cases where the source file does not exist at the
     time the byte-code file is executed.

 -- Program Option: -x regex

     regex is used to search the full path to each file considered for
     compilation, and if the regex produces a match, the file is
     skipped.

 -- Program Option: -i list

     Read the file ‘list’ and add each line that it contains to the list
     of files and directories to compile.  If ‘list’ is ‘-’, read lines
     from ‘stdin’.

  Changed in version 2.7: Added the ‘-i’ option.


File: python.info,  Node: Public functions,  Prev: Command-line use,  Up: compileall --- Byte-compile Python libraries

5.31.11.2 Public functions
..........................

 -- Function: compileall.compile_dir (dir[, maxlevels[, ddir[, force[,
          rx[, quiet]]]]])

     Recursively descend the directory tree named by _dir_, compiling
     all ‘.py’ files along the way.

     The _maxlevels_ parameter is used to limit the depth of the
     recursion; it defaults to ‘10’.

     If _ddir_ is given, it is prepended to the path to each file being
     compiled for use in compilation time tracebacks, and is also
     compiled in to the byte-code file, where it will be used in
     tracebacks and other messages in cases where the source file does
     not exist at the time the byte-code file is executed.

     If _force_ is true, modules are re-compiled even if the timestamps
     are up to date.

     If _rx_ is given, its search method is called on the complete path
     to each file considered for compilation, and if it returns a true
     value, the file is skipped.

     If _quiet_ is true, nothing is printed to the standard output
     unless errors occur.

 -- Function: compileall.compile_file (fullname[, ddir[, force[, rx[,
          quiet]]]])

     Compile the file with path _fullname_.

     If _ddir_ is given, it is prepended to the path to the file being
     compiled for use in compilation time tracebacks, and is also
     compiled in to the byte-code file, where it will be used in
     tracebacks and other messages in cases where the source file does
     not exist at the time the byte-code file is executed.

     If _rx_ is given, its search method is passed the full path name to
     the file being compiled, and if it returns a true value, the file
     is not compiled and ‘True’ is returned.

     If _quiet_ is true, nothing is printed to the standard output
     unless errors occur.

     New in version 2.7.

 -- Function: compileall.compile_path ([skip_curdir[, maxlevels[,
          force]]])

     Byte-compile all the ‘.py’ files found along ‘sys.path’.  If
     _skip_curdir_ is true (the default), the current directory is not
     included in the search.  All other parameters are passed to the
     *note compile_dir(): 25e0. function.  Note that unlike the other
     compile functions, ‘maxlevels’ defaults to ‘0’.

  To force a recompile of all the ‘.py’ files in the ‘Lib/’ subdirectory
and all its subdirectories:

     import compileall

     compileall.compile_dir('Lib/', force=True)

     # Perform same compilation, excluding files in .svn directories.
     import re
     compileall.compile_dir('Lib/', rx=re.compile(r'[/\\][.]svn'), force=True)

See also
........

Module *note py_compile: 13d.

     Byte-compile a single source file.


File: python.info,  Node: dis --- Disassembler for Python bytecode,  Next: pickletools --- Tools for pickle developers,  Prev: compileall --- Byte-compile Python libraries,  Up: Python Language Services

5.31.12 ‘dis’ — Disassembler for Python bytecode
------------------------------------------------

*Source code:* Lib/dis.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note dis: 84. module supports the analysis of CPython *note
bytecode: 583. by disassembling it.  The CPython bytecode which this
module takes as an input is defined in the file ‘Include/opcode.h’ and
used by the compiler and the interpreter.

*CPython implementation detail:* Bytecode is an implementation detail of
the CPython interpreter!  No guarantees are made that bytecode will not
be added, removed, or changed between versions of Python.  Use of this
module should not be considered to work across Python VMs or Python
releases.

  Example: Given the function ‘myfunc()’:

     def myfunc(alist):
         return len(alist)

  the following command can be used to get the disassembly of
‘myfunc()’:

     >>> dis.dis(myfunc)
       2           0 LOAD_GLOBAL              0 (len)
                   3 LOAD_FAST                0 (alist)
                   6 CALL_FUNCTION            1
                   9 RETURN_VALUE

  (The "2" is a line number).

  The *note dis: 84. module defines the following functions and
constants:

 -- Function: dis.dis ([bytesource])

     Disassemble the _bytesource_ object.  _bytesource_ can denote
     either a module, a class, a method, a function, or a code object.
     For a module, it disassembles all functions.  For a class, it
     disassembles all methods.  For a single code sequence, it prints
     one line per bytecode instruction.  If no object is provided, it
     disassembles the last traceback.

 -- Function: dis.distb ([tb])

     Disassembles the top-of-stack function of a traceback, using the
     last traceback if none was passed.  The instruction causing the
     exception is indicated.

 -- Function: dis.disassemble (code[, lasti])

     Disassembles a code object, indicating the last instruction if
     _lasti_ was provided.  The output is divided in the following
     columns:

       1. the line number, for the first instruction of each line

       2. the current instruction, indicated as ‘-->’,

       3. a labelled instruction, indicated with ‘>>’,

       4. the address of the instruction,

       5. the operation code name,

       6. operation parameters, and

       7. interpretation of the parameters in parentheses.

     The parameter interpretation recognizes local and global variable
     names, constant values, branch targets, and compare operators.

 -- Function: dis.disco (code[, lasti])

     A synonym for *note disassemble(): 25e7.  It is more convenient to
     type, and kept for compatibility with earlier Python releases.

 -- Function: dis.findlinestarts (code)

     This generator function uses the ‘co_firstlineno’ and ‘co_lnotab’
     attributes of the code object _code_ to find the offsets which are
     starts of lines in the source code.  They are generated as
     ‘(offset, lineno)’ pairs.

 -- Function: dis.findlabels (code)

     Detect all offsets in the code object _code_ which are jump
     targets, and return a list of these offsets.

 -- Data: dis.opname

     Sequence of operation names, indexable using the bytecode.

 -- Data: dis.opmap

     Dictionary mapping operation names to bytecodes.

 -- Data: dis.cmp_op

     Sequence of all compare operation names.

 -- Data: dis.hasconst

     Sequence of bytecodes that have a constant parameter.

 -- Data: dis.hasfree

     Sequence of bytecodes that access a free variable.

 -- Data: dis.hasname

     Sequence of bytecodes that access an attribute by name.

 -- Data: dis.hasjrel

     Sequence of bytecodes that have a relative jump target.

 -- Data: dis.hasjabs

     Sequence of bytecodes that have an absolute jump target.

 -- Data: dis.haslocal

     Sequence of bytecodes that access a local variable.

 -- Data: dis.hascompare

     Sequence of bytecodes of Boolean operations.

* Menu:

* Python Bytecode Instructions:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/dis.py


File: python.info,  Node: Python Bytecode Instructions,  Up: dis --- Disassembler for Python bytecode

5.31.12.1 Python Bytecode Instructions
......................................

The Python compiler currently generates the following bytecode
instructions.

 -- Opcode: STOP_CODE ()

     Indicates end-of-code to the compiler, not used by the interpreter.

 -- Opcode: NOP ()

     Do nothing code.  Used as a placeholder by the bytecode optimizer.

 -- Opcode: POP_TOP ()

     Removes the top-of-stack (TOS) item.

 -- Opcode: ROT_TWO ()

     Swaps the two top-most stack items.

 -- Opcode: ROT_THREE ()

     Lifts second and third stack item one position up, moves top down
     to position three.

 -- Opcode: ROT_FOUR ()

     Lifts second, third and forth stack item one position up, moves top
     down to position four.

 -- Opcode: DUP_TOP ()

     Duplicates the reference on top of the stack.

  Unary Operations take the top of the stack, apply the operation, and
push the result back on the stack.

 -- Opcode: UNARY_POSITIVE ()

     Implements ‘TOS = +TOS’.

 -- Opcode: UNARY_NEGATIVE ()

     Implements ‘TOS = -TOS’.

 -- Opcode: UNARY_NOT ()

     Implements ‘TOS = not TOS’.

 -- Opcode: UNARY_CONVERT ()

     Implements ‘TOS = `TOS`’.

 -- Opcode: UNARY_INVERT ()

     Implements ‘TOS = ~TOS’.

 -- Opcode: GET_ITER ()

     Implements ‘TOS = iter(TOS)’.

  Binary operations remove the top of the stack (TOS) and the second
top-most stack item (TOS1) from the stack.  They perform the operation,
and put the result back on the stack.

 -- Opcode: BINARY_POWER ()

     Implements ‘TOS = TOS1 ** TOS’.

 -- Opcode: BINARY_MULTIPLY ()

     Implements ‘TOS = TOS1 * TOS’.

 -- Opcode: BINARY_DIVIDE ()

     Implements ‘TOS = TOS1 / TOS’ when ‘from __future__ import
     division’ is not in effect.

 -- Opcode: BINARY_FLOOR_DIVIDE ()

     Implements ‘TOS = TOS1 // TOS’.

 -- Opcode: BINARY_TRUE_DIVIDE ()

     Implements ‘TOS = TOS1 / TOS’ when ‘from __future__ import
     division’ is in effect.

 -- Opcode: BINARY_MODULO ()

     Implements ‘TOS = TOS1 % TOS’.

 -- Opcode: BINARY_ADD ()

     Implements ‘TOS = TOS1 + TOS’.

 -- Opcode: BINARY_SUBTRACT ()

     Implements ‘TOS = TOS1 - TOS’.

 -- Opcode: BINARY_SUBSCR ()

     Implements ‘TOS = TOS1[TOS]’.

 -- Opcode: BINARY_LSHIFT ()

     Implements ‘TOS = TOS1 << TOS’.

 -- Opcode: BINARY_RSHIFT ()

     Implements ‘TOS = TOS1 >> TOS’.

 -- Opcode: BINARY_AND ()

     Implements ‘TOS = TOS1 & TOS’.

 -- Opcode: BINARY_XOR ()

     Implements ‘TOS = TOS1 ^ TOS’.

 -- Opcode: BINARY_OR ()

     Implements ‘TOS = TOS1 | TOS’.

  In-place operations are like binary operations, in that they remove
TOS and TOS1, and push the result back on the stack, but the operation
is done in-place when TOS1 supports it, and the resulting TOS may be
(but does not have to be) the original TOS1.

 -- Opcode: INPLACE_POWER ()

     Implements in-place ‘TOS = TOS1 ** TOS’.

 -- Opcode: INPLACE_MULTIPLY ()

     Implements in-place ‘TOS = TOS1 * TOS’.

 -- Opcode: INPLACE_DIVIDE ()

     Implements in-place ‘TOS = TOS1 / TOS’ when ‘from __future__ import
     division’ is not in effect.

 -- Opcode: INPLACE_FLOOR_DIVIDE ()

     Implements in-place ‘TOS = TOS1 // TOS’.

 -- Opcode: INPLACE_TRUE_DIVIDE ()

     Implements in-place ‘TOS = TOS1 / TOS’ when ‘from __future__ import
     division’ is in effect.

 -- Opcode: INPLACE_MODULO ()

     Implements in-place ‘TOS = TOS1 % TOS’.

 -- Opcode: INPLACE_ADD ()

     Implements in-place ‘TOS = TOS1 + TOS’.

 -- Opcode: INPLACE_SUBTRACT ()

     Implements in-place ‘TOS = TOS1 - TOS’.

 -- Opcode: INPLACE_LSHIFT ()

     Implements in-place ‘TOS = TOS1 << TOS’.

 -- Opcode: INPLACE_RSHIFT ()

     Implements in-place ‘TOS = TOS1 >> TOS’.

 -- Opcode: INPLACE_AND ()

     Implements in-place ‘TOS = TOS1 & TOS’.

 -- Opcode: INPLACE_XOR ()

     Implements in-place ‘TOS = TOS1 ^ TOS’.

 -- Opcode: INPLACE_OR ()

     Implements in-place ‘TOS = TOS1 | TOS’.

  The slice opcodes take up to three parameters.

 -- Opcode: SLICE+0 ()

     Implements ‘TOS = TOS[:]’.

 -- Opcode: SLICE+1 ()

     Implements ‘TOS = TOS1[TOS:]’.

 -- Opcode: SLICE+2 ()

     Implements ‘TOS = TOS1[:TOS]’.

 -- Opcode: SLICE+3 ()

     Implements ‘TOS = TOS2[TOS1:TOS]’.

  Slice assignment needs even an additional parameter.  As any
statement, they put nothing on the stack.

 -- Opcode: STORE_SLICE+0 ()

     Implements ‘TOS[:] = TOS1’.

 -- Opcode: STORE_SLICE+1 ()

     Implements ‘TOS1[TOS:] = TOS2’.

 -- Opcode: STORE_SLICE+2 ()

     Implements ‘TOS1[:TOS] = TOS2’.

 -- Opcode: STORE_SLICE+3 ()

     Implements ‘TOS2[TOS1:TOS] = TOS3’.

 -- Opcode: DELETE_SLICE+0 ()

     Implements ‘del TOS[:]’.

 -- Opcode: DELETE_SLICE+1 ()

     Implements ‘del TOS1[TOS:]’.

 -- Opcode: DELETE_SLICE+2 ()

     Implements ‘del TOS1[:TOS]’.

 -- Opcode: DELETE_SLICE+3 ()

     Implements ‘del TOS2[TOS1:TOS]’.

 -- Opcode: STORE_SUBSCR ()

     Implements ‘TOS1[TOS] = TOS2’.

 -- Opcode: DELETE_SUBSCR ()

     Implements ‘del TOS1[TOS]’.

  Miscellaneous opcodes.

 -- Opcode: PRINT_EXPR ()

     Implements the expression statement for the interactive mode.  TOS
     is removed from the stack and printed.  In non-interactive mode, an
     expression statement is terminated with ‘POP_STACK’.

 -- Opcode: PRINT_ITEM ()

     Prints TOS to the file-like object bound to ‘sys.stdout’.  There is
     one such instruction for each item in the *note print: 4e0.
     statement.

 -- Opcode: PRINT_ITEM_TO ()

     Like ‘PRINT_ITEM’, but prints the item second from TOS to the
     file-like object at TOS. This is used by the extended print
     statement.

 -- Opcode: PRINT_NEWLINE ()

     Prints a new line on ‘sys.stdout’.  This is generated as the last
     operation of a *note print: 4e0. statement, unless the statement
     ends with a comma.

 -- Opcode: PRINT_NEWLINE_TO ()

     Like ‘PRINT_NEWLINE’, but prints the new line on the file-like
     object on the TOS. This is used by the extended print statement.

 -- Opcode: BREAK_LOOP ()

     Terminates a loop due to a *note break: 53a. statement.

 -- Opcode: CONTINUE_LOOP (target)

     Continues a loop due to a *note continue: 53c. statement.  _target_
     is the address to jump to (which should be a ‘FOR_ITER’
     instruction).

 -- Opcode: LIST_APPEND (i)

     Calls ‘list.append(TOS[-i], TOS)’.  Used to implement list
     comprehensions.  While the appended value is popped off, the list
     object remains on the stack so that it is available for further
     iterations of the loop.

 -- Opcode: LOAD_LOCALS ()

     Pushes a reference to the locals of the current scope on the stack.
     This is used in the code for a class definition: After the class
     body is evaluated, the locals are passed to the class definition.

 -- Opcode: RETURN_VALUE ()

     Returns with TOS to the caller of the function.

 -- Opcode: YIELD_VALUE ()

     Pops ‘TOS’ and yields it from a *note generator: 5dc.

 -- Opcode: IMPORT_STAR ()

     Loads all symbols not starting with ‘'_'’ directly from the module
     TOS to the local namespace.  The module is popped after loading all
     names.  This opcode implements ‘from module import *’.

 -- Opcode: EXEC_STMT ()

     Implements ‘exec TOS2,TOS1,TOS’.  The compiler fills missing
     optional parameters with ‘None’.

 -- Opcode: POP_BLOCK ()

     Removes one block from the block stack.  Per frame, there is a
     stack of blocks, denoting nested loops, try statements, and such.

 -- Opcode: END_FINALLY ()

     Terminates a *note finally: 396. clause.  The interpreter recalls
     whether the exception has to be re-raised, or whether the function
     returns, and continues with the outer-next block.

 -- Opcode: BUILD_CLASS ()

     Creates a new class object.  TOS is the methods dictionary, TOS1
     the tuple of the names of the base classes, and TOS2 the class
     name.

 -- Opcode: SETUP_WITH (delta)

     This opcode performs several operations before a with block starts.
     First, it loads *note __exit__(): 200. from the context manager and
     pushes it onto the stack for later use by *note WITH_CLEANUP: 263e.
     Then, *note __enter__(): 1ff. is called, and a finally block
     pointing to _delta_ is pushed.  Finally, the result of calling the
     enter method is pushed onto the stack.  The next opcode will either
     ignore it (*note POP_TOP: 25f9.), or store it in (a) variable(s)
     (*note STORE_FAST: 263f, *note STORE_NAME: 2640, or *note
     UNPACK_SEQUENCE: 2641.).

 -- Opcode: WITH_CLEANUP ()

     Cleans up the stack when a *note with: 1c0. statement block exits.
     On top of the stack are 1–3 values indicating how/why the finally
     clause was entered:

        * TOP = ‘None’

        * (TOP, SECOND) = (‘WHY_{RETURN,CONTINUE}’), retval

        * TOP = ‘WHY_*’; no retval below it

        * (TOP, SECOND, THIRD) = exc_info()

     Under them is EXIT, the context manager’s *note __exit__(): 200.
     bound method.

     In the last case, ‘EXIT(TOP, SECOND, THIRD)’ is called, otherwise
     ‘EXIT(None, None, None)’.

     EXIT is removed from the stack, leaving the values above it in the
     same order.  In addition, if the stack represents an exception,
     _and_ the function call returns a ’true’ value, this information is
     "zapped", to prevent ‘END_FINALLY’ from re-raising the exception.
     (But non-local gotos should still be resumed.)

  All of the following opcodes expect arguments.  An argument is two
bytes, with the more significant byte last.

 -- Opcode: STORE_NAME (namei)

     Implements ‘name = TOS’.  _namei_ is the index of _name_ in the
     attribute ‘co_names’ of the code object.  The compiler tries to use
     ‘STORE_FAST’ or ‘STORE_GLOBAL’ if possible.

 -- Opcode: DELETE_NAME (namei)

     Implements ‘del name’, where _namei_ is the index into ‘co_names’
     attribute of the code object.

 -- Opcode: UNPACK_SEQUENCE (count)

     Unpacks TOS into _count_ individual values, which are put onto the
     stack right-to-left.

 -- Opcode: DUP_TOPX (count)

     Duplicate _count_ items, keeping them in the same order.  Due to
     implementation limits, _count_ should be between 1 and 5 inclusive.

 -- Opcode: STORE_ATTR (namei)

     Implements ‘TOS.name = TOS1’, where _namei_ is the index of name in
     ‘co_names’.

 -- Opcode: DELETE_ATTR (namei)

     Implements ‘del TOS.name’, using _namei_ as index into ‘co_names’.

 -- Opcode: STORE_GLOBAL (namei)

     Works as ‘STORE_NAME’, but stores the name as a global.

 -- Opcode: DELETE_GLOBAL (namei)

     Works as ‘DELETE_NAME’, but deletes a global name.

 -- Opcode: LOAD_CONST (consti)

     Pushes ‘co_consts[consti]’ onto the stack.

 -- Opcode: LOAD_NAME (namei)

     Pushes the value associated with ‘co_names[namei]’ onto the stack.

 -- Opcode: BUILD_TUPLE (count)

     Creates a tuple consuming _count_ items from the stack, and pushes
     the resulting tuple onto the stack.

 -- Opcode: BUILD_LIST (count)

     Works as ‘BUILD_TUPLE’, but creates a list.

 -- Opcode: BUILD_MAP (count)

     Pushes a new dictionary object onto the stack.  The dictionary is
     pre-sized to hold _count_ entries.

 -- Opcode: LOAD_ATTR (namei)

     Replaces TOS with ‘getattr(TOS, co_names[namei])’.

 -- Opcode: COMPARE_OP (opname)

     Performs a Boolean operation.  The operation name can be found in
     ‘cmp_op[opname]’.

 -- Opcode: IMPORT_NAME (namei)

     Imports the module ‘co_names[namei]’.  TOS and TOS1 are popped and
     provide the _fromlist_ and _level_ arguments of *note __import__():
     37e.  The module object is pushed onto the stack.  The current
     namespace is not affected: for a proper import statement, a
     subsequent ‘STORE_FAST’ instruction modifies the namespace.

 -- Opcode: IMPORT_FROM (namei)

     Loads the attribute ‘co_names[namei]’ from the module found in TOS.
     The resulting object is pushed onto the stack, to be subsequently
     stored by a ‘STORE_FAST’ instruction.

 -- Opcode: JUMP_FORWARD (delta)

     Increments bytecode counter by _delta_.

 -- Opcode: POP_JUMP_IF_TRUE (target)

     If TOS is true, sets the bytecode counter to _target_.  TOS is
     popped.

 -- Opcode: POP_JUMP_IF_FALSE (target)

     If TOS is false, sets the bytecode counter to _target_.  TOS is
     popped.

 -- Opcode: JUMP_IF_TRUE_OR_POP (target)

     If TOS is true, sets the bytecode counter to _target_ and leaves
     TOS on the stack.  Otherwise (TOS is false), TOS is popped.

 -- Opcode: JUMP_IF_FALSE_OR_POP (target)

     If TOS is false, sets the bytecode counter to _target_ and leaves
     TOS on the stack.  Otherwise (TOS is true), TOS is popped.

 -- Opcode: JUMP_ABSOLUTE (target)

     Set bytecode counter to _target_.

 -- Opcode: FOR_ITER (delta)

     ‘TOS’ is an *note iterator: 87f.  Call its ‘next()’ method.  If
     this yields a new value, push it on the stack (leaving the iterator
     below it).  If the iterator indicates it is exhausted ‘TOS’ is
     popped, and the bytecode counter is incremented by _delta_.

 -- Opcode: LOAD_GLOBAL (namei)

     Loads the global named ‘co_names[namei]’ onto the stack.

 -- Opcode: SETUP_LOOP (delta)

     Pushes a block for a loop onto the block stack.  The block spans
     from the current instruction with a size of _delta_ bytes.

 -- Opcode: SETUP_EXCEPT (delta)

     Pushes a try block from a try-except clause onto the block stack.
     _delta_ points to the first except block.

 -- Opcode: SETUP_FINALLY (delta)

     Pushes a try block from a try-except clause onto the block stack.
     _delta_ points to the finally block.

 -- Opcode: STORE_MAP ()

     Store a key and value pair in a dictionary.  Pops the key and value
     while leaving the dictionary on the stack.

 -- Opcode: LOAD_FAST (var_num)

     Pushes a reference to the local ‘co_varnames[var_num]’ onto the
     stack.

 -- Opcode: STORE_FAST (var_num)

     Stores TOS into the local ‘co_varnames[var_num]’.

 -- Opcode: DELETE_FAST (var_num)

     Deletes local ‘co_varnames[var_num]’.

 -- Opcode: LOAD_CLOSURE (i)

     Pushes a reference to the cell contained in slot _i_ of the cell
     and free variable storage.  The name of the variable is
     ‘co_cellvars[i]’ if _i_ is less than the length of _co_cellvars_.
     Otherwise it is ‘co_freevars[i - len(co_cellvars)]’.

 -- Opcode: LOAD_DEREF (i)

     Loads the cell contained in slot _i_ of the cell and free variable
     storage.  Pushes a reference to the object the cell contains on the
     stack.

 -- Opcode: STORE_DEREF (i)

     Stores TOS into the cell contained in slot _i_ of the cell and free
     variable storage.

 -- Opcode: SET_LINENO (lineno)

     This opcode is obsolete.

 -- Opcode: RAISE_VARARGS (argc)

     Raises an exception.  _argc_ indicates the number of parameters to
     the raise statement, ranging from 0 to 3.  The handler will find
     the traceback as TOS2, the parameter as TOS1, and the exception as
     TOS.

 -- Opcode: CALL_FUNCTION (argc)

     Calls a function.  The low byte of _argc_ indicates the number of
     positional parameters, the high byte the number of keyword
     parameters.  On the stack, the opcode finds the keyword parameters
     first.  For each keyword argument, the value is on top of the key.
     Below the keyword parameters, the positional parameters are on the
     stack, with the right-most parameter on top.  Below the parameters,
     the function object to call is on the stack.  Pops all function
     arguments, and the function itself off the stack, and pushes the
     return value.

 -- Opcode: MAKE_FUNCTION (argc)

     Pushes a new function object on the stack.  TOS is the code
     associated with the function.  The function object is defined to
     have _argc_ default parameters, which are found below TOS.

 -- Opcode: MAKE_CLOSURE (argc)

     Creates a new function object, sets its _func_closure_ slot, and
     pushes it on the stack.  TOS is the code associated with the
     function, TOS1 the tuple containing cells for the closure’s free
     variables.  The function also has _argc_ default parameters, which
     are found below the cells.

 -- Opcode: BUILD_SLICE (argc)

     Pushes a slice object on the stack.  _argc_ must be 2 or 3.  If it
     is 2, ‘slice(TOS1, TOS)’ is pushed; if it is 3, ‘slice(TOS2, TOS1,
     TOS)’ is pushed.  See the *note slice(): 450. built-in function for
     more information.

 -- Opcode: EXTENDED_ARG (ext)

     Prefixes any opcode which has an argument too big to fit into the
     default two bytes.  _ext_ holds two additional bytes which, taken
     together with the subsequent opcode’s argument, comprise a
     four-byte argument, _ext_ being the two most-significant bytes.

 -- Opcode: CALL_FUNCTION_VAR (argc)

     Calls a function.  _argc_ is interpreted as in ‘CALL_FUNCTION’.
     The top element on the stack contains the variable argument list,
     followed by keyword and positional arguments.

 -- Opcode: CALL_FUNCTION_KW (argc)

     Calls a function.  _argc_ is interpreted as in ‘CALL_FUNCTION’.
     The top element on the stack contains the keyword arguments
     dictionary, followed by explicit keyword and positional arguments.

 -- Opcode: CALL_FUNCTION_VAR_KW (argc)

     Calls a function.  _argc_ is interpreted as in ‘CALL_FUNCTION’.
     The top element on the stack contains the keyword arguments
     dictionary, followed by the variable-arguments tuple, followed by
     explicit keyword and positional arguments.

 -- Opcode: HAVE_ARGUMENT ()

     This is not really an opcode.  It identifies the dividing line
     between opcodes which don’t take arguments ‘< HAVE_ARGUMENT’ and
     those which do ‘>= HAVE_ARGUMENT’.


File: python.info,  Node: pickletools --- Tools for pickle developers,  Prev: dis --- Disassembler for Python bytecode,  Up: Python Language Services

5.31.13 ‘pickletools’ — Tools for pickle developers
---------------------------------------------------

New in version 2.3.

  *Source code:* Lib/pickletools.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  This module contains various constants relating to the intimate
details of the *note pickle: 12d. module, some lengthy comments about
the implementation, and a few useful functions for analyzing pickled
data.  The contents of this module are useful for Python core developers
who are working on the *note pickle: 12d. and *note cPickle: 73.
implementations; ordinary users of the *note pickle: 12d. module
probably won’t find the *note pickletools: 12e. module relevant.

 -- Function: pickletools.dis (pickle, out=None, memo=None,
          indentlevel=4)

     Outputs a symbolic disassembly of the pickle to the file-like
     object _out_, defaulting to ‘sys.stdout’.  _pickle_ can be a string
     or a file-like object.  _memo_ can be a Python dictionary that will
     be used as the pickle’s memo; it can be used to perform
     disassemblies across multiple pickles created by the same pickler.
     Successive levels, indicated by ‘MARK’ opcodes in the stream, are
     indented by _indentlevel_ spaces.

 -- Function: pickletools.genops (pickle)

     Provides an *note iterator: 87f. over all of the opcodes in a
     pickle, returning a sequence of ‘(opcode, arg, pos)’ triples.
     _opcode_ is an instance of an ‘OpcodeInfo’ class; _arg_ is the
     decoded value, as a Python object, of the opcode’s argument; _pos_
     is the position at which this opcode is located.  _pickle_ can be a
     string or a file-like object.

 -- Function: pickletools.optimize (picklestring)

     Returns a new equivalent pickle string after eliminating unused
     ‘PUT’ opcodes.  The optimized pickle is shorter, takes less
     transmission time, requires less storage space, and unpickles more
     efficiently.

     New in version 2.6.

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/pickletools.py


File: python.info,  Node: Python compiler package,  Next: Miscellaneous Services,  Prev: Python Language Services,  Up: The Python Standard Library

5.32 Python compiler package
============================

Deprecated since version 2.6: The *note compiler: 6a. package has been
removed in Python 3.

  The Python compiler package is a tool for analyzing Python source code
and generating Python bytecode.  The compiler contains libraries to
generate an abstract syntax tree from Python source code and to generate
Python *note bytecode: 583. from the tree.

  The *note compiler: 6a. package is a Python source to bytecode
translator written in Python.  It uses the built-in parser and standard
*note parser: 12b. module to generate a concrete syntax tree.  This tree
is used to generate an abstract syntax tree (AST) and then Python
bytecode.

  The full functionality of the package duplicates the built-in compiler
provided with the Python interpreter.  It is intended to match its
behavior almost exactly.  Why implement another compiler that does the
same thing?  The package is useful for a variety of purposes.  It can be
modified more easily than the built-in compiler.  The AST it generates
is useful for analyzing Python source code.

  This chapter explains how the various components of the *note
compiler: 6a. package work.  It blends reference material with a
tutorial.

* Menu:

* The basic interface:: 
* Limitations: Limitations<2>. 
* Python Abstract Syntax:: 
* Using Visitors to Walk ASTs:: 
* Bytecode Generation:: 


File: python.info,  Node: The basic interface,  Next: Limitations<2>,  Up: Python compiler package

5.32.1 The basic interface
--------------------------

The top-level of the package defines four functions.  If you import
*note compiler: 6a, you will get these functions and a collection of
modules contained in the package.

 -- Function: compiler.parse (buf)

     Returns an abstract syntax tree for the Python source code in
     _buf_.  The function raises *note SyntaxError: 498. if there is an
     error in the source code.  The return value is a
     ‘compiler.ast.Module’ instance that contains the tree.

 -- Function: compiler.parseFile (path)

     Return an abstract syntax tree for the Python source code in the
     file specified by _path_.  It is equivalent to
     ‘parse(open(path).read())’.

 -- Function: compiler.walk (ast, visitor[, verbose])

     Do a pre-order walk over the abstract syntax tree _ast_.  Call the
     appropriate method on the _visitor_ instance for each node
     encountered.

 -- Function: compiler.compile (source, filename, mode, flags=None,
          dont_inherit=None)

     Compile the string _source_, a Python module, statement or
     expression, into a code object that can be executed by the exec
     statement or *note eval(): 360.  This function is a replacement for
     the built-in *note compile(): 1fb. function.

     The _filename_ will be used for run-time error messages.

     The _mode_ must be ’exec’ to compile a module, ’single’ to compile
     a single (interactive) statement, or ’eval’ to compile an
     expression.

     The _flags_ and _dont_inherit_ arguments affect future-related
     statements, but are not supported yet.

 -- Function: compiler.compileFile (source)

     Compiles the file _source_ and generates a .pyc file.

  The *note compiler: 6a. package contains the following modules: *note
ast: f, ‘consts’, ‘future’, ‘misc’, ‘pyassem’, ‘pycodegen’, ‘symbols’,
‘transformer’, and ‘visitor’.


File: python.info,  Node: Limitations<2>,  Next: Python Abstract Syntax,  Prev: The basic interface,  Up: Python compiler package

5.32.2 Limitations
------------------

There are some problems with the error checking of the compiler package.
The interpreter detects syntax errors in two distinct phases.  One set
of errors is detected by the interpreter’s parser, the other set by the
compiler.  The compiler package relies on the interpreter’s parser, so
it get the first phases of error checking for free.  It implements the
second phase itself, and that implementation is incomplete.  For
example, the compiler package does not raise an error if a name appears
more than once in an argument list: ‘def f(x, x): ...’

  A future version of the compiler should fix these problems.


File: python.info,  Node: Python Abstract Syntax,  Next: Using Visitors to Walk ASTs,  Prev: Limitations<2>,  Up: Python compiler package

5.32.3 Python Abstract Syntax
-----------------------------

The *note compiler.ast: 6b. module defines an abstract syntax for
Python.  In the abstract syntax tree, each node represents a syntactic
construct.  The root of the tree is ‘Module’ object.

  The abstract syntax offers a higher level interface to parsed Python
source code.  The *note parser: 12b. module and the compiler written in
C for the Python interpreter use a concrete syntax tree.  The concrete
syntax is tied closely to the grammar description used for the Python
parser.  Instead of a single node for a construct, there are often
several levels of nested nodes that are introduced by Python’s
precedence rules.

  The abstract syntax tree is created by the ‘compiler.transformer’
module.  The transformer relies on the built-in Python parser to
generate a concrete syntax tree.  It generates an abstract syntax tree
from the concrete tree.

  The ‘transformer’ module was created by Greg Stein and Bill Tutt for
an experimental Python-to-C compiler.  The current version contains a
number of modifications and improvements, but the basic form of the
abstract syntax and of the transformer are due to Stein and Tutt.

* Menu:

* AST Nodes:: 
* Assignment nodes:: 
* Examples: Examples<21>. 


File: python.info,  Node: AST Nodes,  Next: Assignment nodes,  Up: Python Abstract Syntax

5.32.3.1 AST Nodes
..................

The *note compiler.ast: 6b. module is generated from a text file that
describes each node type and its elements.  Each node type is
represented as a class that inherits from the abstract base class *note
compiler.ast.Node: 267e. and defines a set of named attributes for child
nodes.

 -- Class: compiler.ast.Node

     The *note Node: 267e. instances are created automatically by the
     parser generator.  The recommended interface for specific *note
     Node: 267e. instances is to use the public attributes to access
     child nodes.  A public attribute may be bound to a single node or
     to a sequence of nodes, depending on the *note Node: 267e. type.
     For example, the ‘bases’ attribute of the ‘Class’ node, is bound to
     a list of base class nodes, and the ‘doc’ attribute is bound to a
     single node.

     Each *note Node: 267e. instance has a ‘lineno’ attribute which may
     be ‘None’.  XXX Not sure what the rules are for which nodes will
     have a useful lineno.

     All *note Node: 267e. objects offer the following methods:

      -- Method: getChildren ()

          Returns a flattened list of the child nodes and objects in the
          order they occur.  Specifically, the order of the nodes is the
          order in which they appear in the Python grammar.  Not all of
          the children are *note Node: 267e. instances.  The names of
          functions and classes, for example, are plain strings.

      -- Method: getChildNodes ()

          Returns a flattened list of the child nodes in the order they
          occur.  This method is like *note getChildren(): 267f, except
          that it only returns those children that are *note Node: 267e.
          instances.

  Two examples illustrate the general structure of *note Node: 267e.
classes.  The *note while: 52b. statement is defined by the following
grammar production:

     while_stmt:     "while" expression ":" suite
                    ["else" ":" suite]

  The ‘While’ node has three attributes: *note test: 175, ‘body’, and
‘else_’.  (If the natural name for an attribute is also a Python
reserved word, it can’t be used as an attribute name.  An underscore is
appended to the word to make it a legal identifier, hence ‘else_’
instead of *note else: 532.)

  The *note if: 42c. statement is more complicated because it can
include several tests.

     if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]

  The ‘If’ node only defines two attributes: ‘tests’ and ‘else_’.  The
‘tests’ attribute is a sequence of test expression, consequent body
pairs.  There is one pair for each *note if: 42c./*note elif: 531.
clause.  The first element of the pair is the test expression.  The
second elements is a ‘Stmt’ node that contains the code to execute if
the test is true.

  The ‘getChildren()’ method of ‘If’ returns a flat list of child nodes.
If there are three *note if: 42c./*note elif: 531. clauses and no *note
else: 532. clause, then ‘getChildren()’ will return a list of six
elements: the first test expression, the first ‘Stmt’, the second text
expression, etc.

  The following table lists each of the *note Node: 267e. subclasses
defined in *note compiler.ast: 6b. and each of the public attributes
available on their instances.  The values of most of the attributes are
themselves *note Node: 267e. instances or sequences of instances.  When
the value is something other than an instance, the type is noted in the
comment.  The attributes are listed in the order in which they are
returned by ‘getChildren()’ and ‘getChildNodes()’.

Node type                   Attribute                Value
                                                     
-------------------------------------------------------------------------------------------
                                                     
‘Add’                       ‘left’                   left operand
                                                     
                                                     
                            ‘right’                  right operand
                                                     
                                                     
‘And’                       ‘nodes’                  list of operands
                                                     
                                                     
‘AssAttr’                                            _attribute as target of assignment_
                                                     
                                                     
                            ‘expr’                   expression on the left-hand side of
                                                     the dot
                                                     
                                                     
                            ‘attrname’               the attribute name, a string
                                                     
                                                     
                            ‘flags’                  XXX
                                                     
                                                     
‘AssList’                   ‘nodes’                  list of list elements being
                                                     assigned to
                                                     
                                                     
‘AssName’                   ‘name’                   name being assigned to
                                                     
                                                     
                            ‘flags’                  XXX
                                                     
                                                     
‘AssTuple’                  ‘nodes’                  list of tuple elements being
                                                     assigned to
                                                     
                                                     
‘Assert’                    *note test: 175.         the expression to be tested
                                                     
                                                     
                            ‘fail’                   the value of the *note
                                                     AssertionError: 80c.
                                                     
                                                     
‘Assign’                    ‘nodes’                  a list of assignment targets, one
                                                     per equal sign
                                                     
                                                     
                            ‘expr’                   the value being assigned
                                                     
                                                     
‘AugAssign’                 ‘node’
                            
                                                     
                            ‘op’
                            
                                                     
                            ‘expr’
                            
                                                     
‘Backquote’                 ‘expr’
                            
                                                     
‘Bitand’                    ‘nodes’
                            
                                                     
‘Bitor’                     ‘nodes’
                            
                                                     
‘Bitxor’                    ‘nodes’
                            
                                                     
‘Break’

‘CallFunc’                  ‘node’                   expression for the callee
                                                     
                                                     
                            ‘args’                   a list of arguments
                                                     
                                                     
                            ‘star_args’              the extended *-arg value
                                                     
                                                     
                            ‘dstar_args’             the extended **-arg value
                                                     
                                                     
‘Class’                     ‘name’                   the name of the class, a string
                                                     
                                                     
                            ‘bases’                  a list of base classes
                                                     
                                                     
                            ‘doc’                    doc string, a string or ‘None’
                                                     
                                                     
                            *note code: 62.          the body of the class statement
                                                     
                                                     
‘Compare’                   ‘expr’
                            
                                                     
                            ‘ops’
                            
                                                     
‘Const’                     ‘value’
                            
                                                     
‘Continue’

‘Decorators’                ‘nodes’                  List of function decorator
                                                     expressions
                                                     
                                                     
‘Dict’                      ‘items’
                            
                                                     
‘Discard’                   ‘expr’
                            
                                                     
‘Div’                       ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
*note Ellipsis: 899.

‘Expression’                ‘node’
                            
                                                     
‘Exec’                      ‘expr’
                            
                                                     
                            *note locals: 33c.
                            
                                                     
                            *note globals: 835.
                            
                                                     
‘FloorDiv’                  ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘For’                       ‘assign’
                            
                                                     
                            *note list: 3bc.
                            
                                                     
                            ‘body’
                            
                                                     
                            ‘else_’
                            
                                                     
‘From’                      ‘modname’
                            
                                                     
                            ‘names’
                            
                                                     
‘Function’                  ‘decorators’             ‘Decorators’ or ‘None’
                                                     
                                                     
                            ‘name’                   name used in def, a string
                                                     
                                                     
                            ‘argnames’               list of argument names, as strings
                                                     
                                                     
                            ‘defaults’               list of default values
                                                     
                                                     
                            ‘flags’                  xxx
                                                     
                                                     
                            ‘doc’                    doc string, a string or ‘None’
                                                     
                                                     
                            *note code: 62.          the body of the function
                                                     
                                                     
‘GenExpr’                   *note code: 62.
                            
                                                     
‘GenExprFor’                ‘assign’
                            
                                                     
                            *note iter: 320.
                            
                                                     
                            ‘ifs’
                            
                                                     
‘GenExprIf’                 *note test: 175.
                            
                                                     
‘GenExprInner’              ‘expr’
                            
                                                     
                            ‘quals’
                            
                                                     
‘Getattr’                   ‘expr’
                            
                                                     
                            ‘attrname’
                            
                                                     
‘Global’                    ‘names’
                            
                                                     
‘If’                        ‘tests’
                            
                                                     
                            ‘else_’
                            
                                                     
‘Import’                    ‘names’
                            
                                                     
‘Invert’                    ‘expr’
                            
                                                     
‘Keyword’                   ‘name’
                            
                                                     
                            ‘expr’
                            
                                                     
‘Lambda’                    ‘argnames’
                            
                                                     
                            ‘defaults’
                            
                                                     
                            ‘flags’
                            
                                                     
                            *note code: 62.
                            
                                                     
‘LeftShift’                 ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘List’                      ‘nodes’
                            
                                                     
‘ListComp’                  ‘expr’
                            
                                                     
                            ‘quals’
                            
                                                     
‘ListCompFor’               ‘assign’
                            
                                                     
                            *note list: 3bc.
                            
                                                     
                            ‘ifs’
                            
                                                     
‘ListCompIf’                *note test: 175.
                            
                                                     
‘Mod’                       ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘Module’                    ‘doc’                    doc string, a string or ‘None’
                                                     
                                                     
                            ‘node’                   body of the module, a ‘Stmt’
                                                     
                                                     
‘Mul’                       ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘Name’                      ‘name’
                            
                                                     
‘Not’                       ‘expr’
                            
                                                     
‘Or’                        ‘nodes’
                            
                                                     
‘Pass’

‘Power’                     ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘Print’                     ‘nodes’
                            
                                                     
                            ‘dest’
                            
                                                     
‘Printnl’                   ‘nodes’
                            
                                                     
                            ‘dest’
                            
                                                     
‘Raise’                     ‘expr1’
                            
                                                     
                            ‘expr2’
                            
                                                     
                            ‘expr3’
                            
                                                     
‘Return’                    ‘value’
                            
                                                     
‘RightShift’                ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘Slice’                     ‘expr’
                            
                                                     
                            ‘flags’
                            
                                                     
                            ‘lower’
                            
                                                     
                            ‘upper’
                            
                                                     
‘Sliceobj’                  ‘nodes’                  list of statements
                                                     
                                                     
‘Stmt’                      ‘nodes’
                            
                                                     
‘Sub’                       ‘left’
                            
                                                     
                            ‘right’
                            
                                                     
‘Subscript’                 ‘expr’
                            
                                                     
                            ‘flags’
                            
                                                     
                            ‘subs’
                            
                                                     
‘TryExcept’                 ‘body’
                            
                                                     
                            ‘handlers’
                            
                                                     
                            ‘else_’
                            
                                                     
‘TryFinally’                ‘body’
                            
                                                     
                            ‘final’
                            
                                                     
‘Tuple’                     ‘nodes’
                            
                                                     
‘UnaryAdd’                  ‘expr’
                            
                                                     
‘UnarySub’                  ‘expr’
                            
                                                     
‘While’                     *note test: 175.
                            
                                                     
                            ‘body’
                            
                                                     
                            ‘else_’
                            
                                                     
‘With’                      ‘expr’
                            
                                                     
                            *note vars: 598.
                            
                                                     
                            ‘body’
                            
                                                     
‘Yield’                     ‘value’
                            


File: python.info,  Node: Assignment nodes,  Next: Examples<21>,  Prev: AST Nodes,  Up: Python Abstract Syntax

5.32.3.2 Assignment nodes
.........................

There is a collection of nodes used to represent assignments.  Each
assignment statement in the source code becomes a single ‘Assign’ node
in the AST. The ‘nodes’ attribute is a list that contains a node for
each assignment target.  This is necessary because assignment can be
chained, e.g.  ‘a = b = 2’.  Each *note Node: 267e. in the list will be
one of the following classes: ‘AssAttr’, ‘AssList’, ‘AssName’, or
‘AssTuple’.

  Each target assignment node will describe the kind of object being
assigned to: ‘AssName’ for a simple name, e.g.  ‘a = 1’.  ‘AssAttr’ for
an attribute assigned, e.g.  ‘a.x = 1’.  ‘AssList’ and ‘AssTuple’ for
list and tuple expansion respectively, e.g.  ‘a, b, c = a_tuple’.

  The target assignment nodes also have a ‘flags’ attribute that
indicates whether the node is being used for assignment or in a delete
statement.  The ‘AssName’ is also used to represent a delete statement,
e.g.  ‘del x’.

  When an expression contains several attribute references, an
assignment or delete statement will contain only one ‘AssAttr’ node –
for the final attribute reference.  The other attribute references will
be represented as ‘Getattr’ nodes in the ‘expr’ attribute of the
‘AssAttr’ instance.


File: python.info,  Node: Examples<21>,  Prev: Assignment nodes,  Up: Python Abstract Syntax

5.32.3.3 Examples
.................

This section shows several simple examples of ASTs for Python source
code.  The examples demonstrate how to use the ‘parse()’ function, what
the repr of an AST looks like, and how to access attributes of an AST
node.

  The first module defines a single function.  Assume it is stored in
‘doublelib.py’.

     """This is an example module.

     This is the docstring.
     """

     def double(x):
         "Return twice the argument"
         return x * 2

  In the interactive interpreter session below, I have reformatted the
long AST reprs for readability.  The AST reprs use unqualified class
names.  If you want to create an instance from a repr, you must import
the class names from the *note compiler.ast: 6b. module.

     >>> import compiler
     >>> mod = compiler.parseFile("doublelib.py")
     >>> mod
     Module('This is an example module.\n\nThis is the docstring.\n',
            Stmt([Function(None, 'double', ['x'], [], 0,
                           'Return twice the argument',
                           Stmt([Return(Mul((Name('x'), Const(2))))]))]))
     >>> from compiler.ast import *
     >>> Module('This is an example module.\n\nThis is the docstring.\n',
     ...    Stmt([Function(None, 'double', ['x'], [], 0,
     ...                   'Return twice the argument',
     ...                   Stmt([Return(Mul((Name('x'), Const(2))))]))]))
     Module('This is an example module.\n\nThis is the docstring.\n',
            Stmt([Function(None, 'double', ['x'], [], 0,
                           'Return twice the argument',
                           Stmt([Return(Mul((Name('x'), Const(2))))]))]))
     >>> mod.doc
     'This is an example module.\n\nThis is the docstring.\n'
     >>> for node in mod.node.nodes:
     ...     print node
     ...
     Function(None, 'double', ['x'], [], 0, 'Return twice the argument',
              Stmt([Return(Mul((Name('x'), Const(2))))]))
     >>> func = mod.node.nodes[0]
     >>> func.code
     Stmt([Return(Mul((Name('x'), Const(2))))])


File: python.info,  Node: Using Visitors to Walk ASTs,  Next: Bytecode Generation,  Prev: Python Abstract Syntax,  Up: Python compiler package

5.32.4 Using Visitors to Walk ASTs
----------------------------------

The visitor pattern is ...  The *note compiler: 6a. package uses a
variant on the visitor pattern that takes advantage of Python’s
introspection features to eliminate the need for much of the visitor’s
infrastructure.

  The classes being visited do not need to be programmed to accept
visitors.  The visitor need only define visit methods for classes it is
specifically interested in; a default visit method can handle the rest.

  XXX The magic ‘visit()’ method for visitors.

 -- Function: compiler.visitor.walk (tree, visitor[, verbose])

 -- Class: compiler.visitor.ASTVisitor

     The *note ASTVisitor: 2685. is responsible for walking over the
     tree in the correct order.  A walk begins with a call to *note
     preorder(): 2686.  For each node, it checks the _visitor_ argument
     to *note preorder(): 2686. for a method named ’visitNodeType,’
     where NodeType is the name of the node’s class, e.g.  for a ‘While’
     node a ‘visitWhile()’ would be called.  If the method exists, it is
     called with the node as its first argument.

     The visitor method for a particular node type can control how child
     nodes are visited during the walk.  The *note ASTVisitor: 2685.
     modifies the visitor argument by adding a visit method to the
     visitor; this method can be used to visit a particular child node.
     If no visitor is found for a particular node type, the *note
     default(): 2687. method is called.

     *note ASTVisitor: 2685. objects have the following methods:

     XXX describe extra arguments

      -- Method: default (node[, ...])

      -- Method: dispatch (node[, ...])

      -- Method: preorder (tree, visitor)


File: python.info,  Node: Bytecode Generation,  Prev: Using Visitors to Walk ASTs,  Up: Python compiler package

5.32.5 Bytecode Generation
--------------------------

The code generator is a visitor that emits bytecodes.  Each visit method
can call the ‘emit()’ method to emit a new bytecode.  The basic code
generator is specialized for modules, classes, and functions.  An
assembler converts that emitted instructions to the low-level bytecode
format.  It handles things like generation of constant lists of code
objects and calculation of jump offsets.


File: python.info,  Node: Miscellaneous Services,  Next: MS Windows Specific Services,  Prev: Python compiler package,  Up: The Python Standard Library

5.33 Miscellaneous Services
===========================

The modules described in this chapter provide miscellaneous services
that are available in all Python versions.  Here’s an overview:

* Menu:

* formatter: formatter --- Generic output formatting. Generic output formatting

formatter — Generic output formatting

* The Formatter Interface:: 
* Formatter Implementations:: 
* The Writer Interface:: 
* Writer Implementations:: 


File: python.info,  Node: formatter --- Generic output formatting,  Up: Miscellaneous Services

5.33.1 ‘formatter’ — Generic output formatting
----------------------------------------------

This module supports two interface definitions, each with multiple
implementations.  The _formatter_ interface is used by the *note
HTMLParser: ed. class of the *note htmllib: ec. module, and the _writer_
interface is required by the formatter interface.

  Formatter objects transform an abstract flow of formatting events into
specific output events on writer objects.  Formatters manage several
stack structures to allow various properties of a writer object to be
changed and restored; writers need not be able to handle relative
changes nor any sort of "change back" operation.  Specific writer
properties which may be controlled via formatter objects are horizontal
alignment, font, and left margin indentations.  A mechanism is provided
which supports providing arbitrary, non-exclusive style settings to a
writer as well.  Additional interfaces facilitate formatting events
which are not reversible, such as paragraph separation.

  Writer objects encapsulate device interfaces.  Abstract devices, such
as file formats, are supported as well as physical devices.  The
provided implementations all work with abstract devices.  The interface
makes available mechanisms for setting the properties which formatter
objects manage and inserting data into the output.

* Menu:

* The Formatter Interface:: 
* Formatter Implementations:: 
* The Writer Interface:: 
* Writer Implementations:: 


File: python.info,  Node: The Formatter Interface,  Next: Formatter Implementations,  Up: formatter --- Generic output formatting

5.33.1.1 The Formatter Interface
................................

Interfaces to create formatters are dependent on the specific formatter
class being instantiated.  The interfaces described below are the
required interfaces which all formatters must support once initialized.

  One data element is defined at the module level:

 -- Data: formatter.AS_IS

     Value which can be used in the font specification passed to the
     ‘push_font()’ method described below, or as the new value to any
     other ‘push_property()’ method.  Pushing the ‘AS_IS’ value allows
     the corresponding ‘pop_property()’ method to be called without
     having to track whether the property was changed.

  The following attributes are defined for formatter instance objects:

 -- Attribute: formatter.writer

     The writer instance with which the formatter interacts.

 -- Method: formatter.end_paragraph (blanklines)

     Close any open paragraphs and insert at least _blanklines_ before
     the next paragraph.

 -- Method: formatter.add_line_break ()

     Add a hard line break if one does not already exist.  This does not
     break the logical paragraph.

 -- Method: formatter.add_hor_rule (*args, **kw)

     Insert a horizontal rule in the output.  A hard break is inserted
     if there is data in the current paragraph, but the logical
     paragraph is not broken.  The arguments and keywords are passed on
     to the writer’s ‘send_line_break()’ method.

 -- Method: formatter.add_flowing_data (data)

     Provide data which should be formatted with collapsed whitespace.
     Whitespace from preceding and successive calls to *note
     add_flowing_data(): 2696. is considered as well when the whitespace
     collapse is performed.  The data which is passed to this method is
     expected to be word-wrapped by the output device.  Note that any
     word-wrapping still must be performed by the writer object due to
     the need to rely on device and font information.

 -- Method: formatter.add_literal_data (data)

     Provide data which should be passed to the writer unchanged.
     Whitespace, including newline and tab characters, are considered
     legal in the value of _data_.

 -- Method: formatter.add_label_data (format, counter)

     Insert a label which should be placed to the left of the current
     left margin.  This should be used for constructing bulleted or
     numbered lists.  If the _format_ value is a string, it is
     interpreted as a format specification for _counter_, which should
     be an integer.  The result of this formatting becomes the value of
     the label; if _format_ is not a string it is used as the label
     value directly.  The label value is passed as the only argument to
     the writer’s ‘send_label_data()’ method.  Interpretation of
     non-string label values is dependent on the associated writer.

     Format specifications are strings which, in combination with a
     counter value, are used to compute label values.  Each character in
     the format string is copied to the label value, with some
     characters recognized to indicate a transform on the counter value.
     Specifically, the character ‘'1'’ represents the counter value
     formatter as an Arabic number, the characters ‘'A'’ and ‘'a'’
     represent alphabetic representations of the counter value in upper
     and lower case, respectively, and ‘'I'’ and ‘'i'’ represent the
     counter value in Roman numerals, in upper and lower case.  Note
     that the alphabetic and roman transforms require that the counter
     value be greater than zero.

 -- Method: formatter.flush_softspace ()

     Send any pending whitespace buffered from a previous call to *note
     add_flowing_data(): 2696. to the associated writer object.  This
     should be called before any direct manipulation of the writer
     object.

 -- Method: formatter.push_alignment (align)

     Push a new alignment setting onto the alignment stack.  This may be
     *note AS_IS: 2691. if no change is desired.  If the alignment value
     is changed from the previous setting, the writer’s
     ‘new_alignment()’ method is called with the _align_ value.

 -- Method: formatter.pop_alignment ()

     Restore the previous alignment.

 -- Method: formatter.push_font ((size, italic, bold, teletype))

     Change some or all font properties of the writer object.
     Properties which are not set to *note AS_IS: 2691. are set to the
     values passed in while others are maintained at their current
     settings.  The writer’s ‘new_font()’ method is called with the
     fully resolved font specification.

 -- Method: formatter.pop_font ()

     Restore the previous font.

 -- Method: formatter.push_margin (margin)

     Increase the number of left margin indentations by one, associating
     the logical tag _margin_ with the new indentation.  The initial
     margin level is ‘0’.  Changed values of the logical tag must be
     true values; false values other than *note AS_IS: 2691. are not
     sufficient to change the margin.

 -- Method: formatter.pop_margin ()

     Restore the previous margin.

 -- Method: formatter.push_style (*styles)

     Push any number of arbitrary style specifications.  All styles are
     pushed onto the styles stack in order.  A tuple representing the
     entire stack, including *note AS_IS: 2691. values, is passed to the
     writer’s ‘new_styles()’ method.

 -- Method: formatter.pop_style ([n=1])

     Pop the last _n_ style specifications passed to *note push_style():
     26a0.  A tuple representing the revised stack, including *note
     AS_IS: 2691. values, is passed to the writer’s ‘new_styles()’
     method.

 -- Method: formatter.set_spacing (spacing)

     Set the spacing style for the writer.

 -- Method: formatter.assert_line_data ([flag=1])

     Inform the formatter that data has been added to the current
     paragraph out-of-band.  This should be used when the writer has
     been manipulated directly.  The optional _flag_ argument can be set
     to false if the writer manipulations produced a hard line break at
     the end of the output.


File: python.info,  Node: Formatter Implementations,  Next: The Writer Interface,  Prev: The Formatter Interface,  Up: formatter --- Generic output formatting

5.33.1.2 Formatter Implementations
..................................

Two implementations of formatter objects are provided by this module.
Most applications may use one of these classes without modification or
subclassing.

 -- Class: formatter.NullFormatter ([writer])

     A formatter which does nothing.  If _writer_ is omitted, a *note
     NullWriter: 26a7. instance is created.  No methods of the writer
     are called by *note NullFormatter: 26a6. instances.
     Implementations should inherit from this class if implementing a
     writer interface but don’t need to inherit any implementation.

 -- Class: formatter.AbstractFormatter (writer)

     The standard formatter.  This implementation has demonstrated wide
     applicability to many writers, and may be used directly in most
     circumstances.  It has been used to implement a full-featured World
     Wide Web browser.


File: python.info,  Node: The Writer Interface,  Next: Writer Implementations,  Prev: Formatter Implementations,  Up: formatter --- Generic output formatting

5.33.1.3 The Writer Interface
.............................

Interfaces to create writers are dependent on the specific writer class
being instantiated.  The interfaces described below are the required
interfaces which all writers must support once initialized.  Note that
while most applications can use the *note AbstractFormatter: 26a8. class
as a formatter, the writer must typically be provided by the
application.

 -- Method: writer.flush ()

     Flush any buffered output or device control events.

 -- Method: writer.new_alignment (align)

     Set the alignment style.  The _align_ value can be any object, but
     by convention is a string or ‘None’, where ‘None’ indicates that
     the writer’s "preferred" alignment should be used.  Conventional
     _align_ values are ‘'left'’, ‘'center'’, ‘'right'’, and
     ‘'justify'’.

 -- Method: writer.new_font (font)

     Set the font style.  The value of _font_ will be ‘None’, indicating
     that the device’s default font should be used, or a tuple of the
     form ‘(size, italic, bold, teletype)’.  Size will be a string
     indicating the size of font that should be used; specific strings
     and their interpretation must be defined by the application.  The
     _italic_, _bold_, and _teletype_ values are Boolean values
     specifying which of those font attributes should be used.

 -- Method: writer.new_margin (margin, level)

     Set the margin level to the integer _level_ and the logical tag to
     _margin_.  Interpretation of the logical tag is at the writer’s
     discretion; the only restriction on the value of the logical tag is
     that it not be a false value for non-zero values of _level_.

 -- Method: writer.new_spacing (spacing)

     Set the spacing style to _spacing_.

 -- Method: writer.new_styles (styles)

     Set additional styles.  The _styles_ value is a tuple of arbitrary
     values; the value *note AS_IS: 2691. should be ignored.  The
     _styles_ tuple may be interpreted either as a set or as a stack
     depending on the requirements of the application and writer
     implementation.

 -- Method: writer.send_line_break ()

     Break the current line.

 -- Method: writer.send_paragraph (blankline)

     Produce a paragraph separation of at least _blankline_ blank lines,
     or the equivalent.  The _blankline_ value will be an integer.  Note
     that the implementation will receive a call to *note
     send_line_break(): 26b1. before this call if a line break is
     needed; this method should not include ending the last line of the
     paragraph.  It is only responsible for vertical spacing between
     paragraphs.

 -- Method: writer.send_hor_rule (*args, **kw)

     Display a horizontal rule on the output device.  The arguments to
     this method are entirely application- and writer-specific, and
     should be interpreted with care.  The method implementation may
     assume that a line break has already been issued via *note
     send_line_break(): 26b1.

 -- Method: writer.send_flowing_data (data)

     Output character data which may be word-wrapped and re-flowed as
     needed.  Within any sequence of calls to this method, the writer
     may assume that spans of multiple whitespace characters have been
     collapsed to single space characters.

 -- Method: writer.send_literal_data (data)

     Output character data which has already been formatted for display.
     Generally, this should be interpreted to mean that line breaks
     indicated by newline characters should be preserved and no new line
     breaks should be introduced.  The data may contain embedded newline
     and tab characters, unlike data provided to the
     ‘send_formatted_data()’ interface.

 -- Method: writer.send_label_data (data)

     Set _data_ to the left of the current left margin, if possible.
     The value of _data_ is not restricted; treatment of non-string
     values is entirely application- and writer-dependent.  This method
     will only be called at the beginning of a line.


File: python.info,  Node: Writer Implementations,  Prev: The Writer Interface,  Up: formatter --- Generic output formatting

5.33.1.4 Writer Implementations
...............................

Three implementations of the writer object interface are provided as
examples by this module.  Most applications will need to derive new
writer classes from the *note NullWriter: 26a7. class.

 -- Class: formatter.NullWriter

     A writer which only provides the interface definition; no actions
     are taken on any methods.  This should be the base class for all
     writers which do not need to inherit any implementation methods.

 -- Class: formatter.AbstractWriter

     A writer which can be used in debugging formatters, but not much
     else.  Each method simply announces itself by printing its name and
     arguments on standard output.

 -- Class: formatter.DumbWriter (file=None, maxcol=72)

     Simple writer class which writes output on the file object passed
     in as _file_ or, if _file_ is None, on standard output.  The output
     is simply word-wrapped to the number of columns specified by
     _maxcol_.  This class is suitable for reflowing a sequence of
     paragraphs.


File: python.info,  Node: MS Windows Specific Services,  Next: Unix Specific Services,  Prev: Miscellaneous Services,  Up: The Python Standard Library

5.34 MS Windows Specific Services
=================================

This chapter describes modules that are only available on MS Windows
platforms.

* Menu:

* msilib: msilib --- Read and write Microsoft Installer files. Read and write Microsoft Installer files
* msvcrt: msvcrt -- Useful routines from the MS VC++ runtime. Useful routines from the MS VC++ runtime
* _winreg: _winreg -- Windows registry access. Windows registry access
* winsound: winsound --- Sound-playing interface for Windows. Sound-playing interface for Windows

msilib — Read and write Microsoft Installer files

* Database Objects: Database Objects<2>. 
* View Objects:: 
* Summary Information Objects:: 
* Record Objects:: 
* Errors:: 
* CAB Objects:: 
* Directory Objects:: 
* Features:: 
* GUI classes:: 
* Precomputed tables:: 

msvcrt – Useful routines from the MS VC++ runtime

* File Operations:: 
* Console I/O:: 
* Other Functions:: 

_winreg – Windows registry access

* Constants: Constants<5>. 
* Registry Handle Objects:: 

Constants

* HKEY_* Constants:: 
* Access Rights:: 
* Value Types:: 

Access Rights

* 64-bit Specific:: 


File: python.info,  Node: msilib --- Read and write Microsoft Installer files,  Next: msvcrt -- Useful routines from the MS VC++ runtime,  Up: MS Windows Specific Services

5.34.1 ‘msilib’ — Read and write Microsoft Installer files
----------------------------------------------------------

New in version 2.5.

  The *note msilib: 116. supports the creation of Microsoft Installer
(‘.msi’) files.  Because these files often contain an embedded "cabinet"
file (‘.cab’), it also exposes an API to create CAB files.  Support for
reading ‘.cab’ files is currently not implemented; read support for the
‘.msi’ database is possible.

  This package aims to provide complete access to all tables in an
‘.msi’ file, therefore, it is a fairly low-level API. Two primary
applications of this package are the *note distutils: 85. command
‘bdist_msi’, and the creation of Python installer package itself
(although that currently uses a different version of ‘msilib’).

  The package contents can be roughly split into four parts: low-level
CAB routines, low-level MSI routines, higher-level MSI routines, and
standard table structures.

 -- Function: msilib.FCICreate (cabname, files)

     Create a new CAB file named _cabname_.  _files_ must be a list of
     tuples, each containing the name of the file on disk, and the name
     of the file inside the CAB file.

     The files are added to the CAB file in the order they appear in the
     list.  All files are added into a single CAB file, using the MSZIP
     compression algorithm.

     Callbacks to Python for the various steps of MSI creation are
     currently not exposed.

 -- Function: msilib.UuidCreate ()

     Return the string representation of a new unique identifier.  This
     wraps the Windows API functions ‘UuidCreate()’ and
     ‘UuidToString()’.

 -- Function: msilib.OpenDatabase (path, persist)

     Return a new database object by calling MsiOpenDatabase.  _path_ is
     the file name of the MSI file; _persist_ can be one of the
     constants ‘MSIDBOPEN_CREATEDIRECT’, ‘MSIDBOPEN_CREATE’,
     ‘MSIDBOPEN_DIRECT’, ‘MSIDBOPEN_READONLY’, or ‘MSIDBOPEN_TRANSACT’,
     and may include the flag ‘MSIDBOPEN_PATCHFILE’.  See the Microsoft
     documentation for the meaning of these flags; depending on the
     flags, an existing database is opened, or a new one created.

 -- Function: msilib.CreateRecord (count)

     Return a new record object by calling ‘MSICreateRecord()’.  _count_
     is the number of fields of the record.

 -- Function: msilib.init_database (name, schema, ProductName,
          ProductCode, ProductVersion, Manufacturer)

     Create and return a new database _name_, initialize it with
     _schema_, and set the properties _ProductName_, _ProductCode_,
     _ProductVersion_, and _Manufacturer_.

     _schema_ must be a module object containing ‘tables’ and
     ‘_Validation_records’ attributes; typically, *note msilib.schema:
     26c4. should be used.

     The database will contain just the schema and the validation
     records when this function returns.

 -- Function: msilib.add_data (database, table, records)

     Add all _records_ to the table named _table_ in _database_.

     The _table_ argument must be one of the predefined tables in the
     MSI schema, e.g.  ‘'Feature'’, ‘'File'’, ‘'Component'’, ‘'Dialog'’,
     ‘'Control'’, etc.

     _records_ should be a list of tuples, each one containing all
     fields of a record according to the schema of the table.  For
     optional fields, ‘None’ can be passed.

     Field values can be int or long numbers, strings, or instances of
     the Binary class.

 -- Class: msilib.Binary (filename)

     Represents entries in the Binary table; inserting such an object
     using *note add_data(): 26c5. reads the file named _filename_ into
     the table.

 -- Function: msilib.add_tables (database, module)

     Add all table content from _module_ to _database_.  _module_ must
     contain an attribute _tables_ listing all tables for which content
     should be added, and one attribute per table that has the actual
     content.

     This is typically used to install the sequence tables.

 -- Function: msilib.add_stream (database, name, path)

     Add the file _path_ into the ‘_Stream’ table of _database_, with
     the stream name _name_.

 -- Function: msilib.gen_uuid ()

     Return a new UUID, in the format that MSI typically requires (i.e.
     in curly braces, and with all hexdigits in upper-case).

See also
........

FCICreateFile(1) UuidCreate(2) UuidToString(3)

* Menu:

* Database Objects: Database Objects<2>. 
* View Objects:: 
* Summary Information Objects:: 
* Record Objects:: 
* Errors:: 
* CAB Objects:: 
* Directory Objects:: 
* Features:: 
* GUI classes:: 
* Precomputed tables:: 

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/devnotes/winprog/fcicreate.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rpc/rpc/uuidcreate.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rpc/rpc/uuidtostring.asp


File: python.info,  Node: Database Objects<2>,  Next: View Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.1 Database Objects
.........................

 -- Method: Database.OpenView (sql)

     Return a view object, by calling ‘MSIDatabaseOpenView()’.  _sql_ is
     the SQL statement to execute.

 -- Method: Database.Commit ()

     Commit the changes pending in the current transaction, by calling
     ‘MSIDatabaseCommit()’.

 -- Method: Database.GetSummaryInformation (count)

     Return a new summary information object, by calling
     ‘MsiGetSummaryInformation()’.  _count_ is the maximum number of
     updated values.

See also
........

MSIDatabaseOpenView(1) MSIDatabaseCommit(2) MSIGetSummaryInformation(3)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabaseopenview.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabasecommit.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msigetsummaryinformation.asp


File: python.info,  Node: View Objects,  Next: Summary Information Objects,  Prev: Database Objects<2>,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.2 View Objects
.....................

 -- Method: View.Execute (params)

     Execute the SQL query of the view, through ‘MSIViewExecute()’.  If
     _params_ is not ‘None’, it is a record describing actual values of
     the parameter tokens in the query.

 -- Method: View.GetColumnInfo (kind)

     Return a record describing the columns of the view, through calling
     ‘MsiViewGetColumnInfo()’.  _kind_ can be either ‘MSICOLINFO_NAMES’
     or ‘MSICOLINFO_TYPES’.

 -- Method: View.Fetch ()

     Return a result record of the query, through calling
     ‘MsiViewFetch()’.

 -- Method: View.Modify (kind, data)

     Modify the view, by calling ‘MsiViewModify()’.  _kind_ can be one
     of ‘MSIMODIFY_SEEK’, ‘MSIMODIFY_REFRESH’, ‘MSIMODIFY_INSERT’,
     ‘MSIMODIFY_UPDATE’, ‘MSIMODIFY_ASSIGN’, ‘MSIMODIFY_REPLACE’,
     ‘MSIMODIFY_MERGE’, ‘MSIMODIFY_DELETE’,
     ‘MSIMODIFY_INSERT_TEMPORARY’, ‘MSIMODIFY_VALIDATE’,
     ‘MSIMODIFY_VALIDATE_NEW’, ‘MSIMODIFY_VALIDATE_FIELD’, or
     ‘MSIMODIFY_VALIDATE_DELETE’.

     _data_ must be a record describing the new data.

 -- Method: View.Close ()

     Close the view, through ‘MsiViewClose()’.

See also
........

MsiViewExecute(1) MSIViewGetColumnInfo(2) MsiViewFetch(3)
MsiViewModify(4) MsiViewClose(5)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewexecute.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewgetcolumninfo.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewfetch.asp

   (4) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewmodify.asp

   (5) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewclose.asp


File: python.info,  Node: Summary Information Objects,  Next: Record Objects,  Prev: View Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.3 Summary Information Objects
....................................

 -- Method: SummaryInformation.GetProperty (field)

     Return a property of the summary, through
     ‘MsiSummaryInfoGetProperty()’.  _field_ is the name of the
     property, and can be one of the constants ‘PID_CODEPAGE’,
     ‘PID_TITLE’, ‘PID_SUBJECT’, ‘PID_AUTHOR’, ‘PID_KEYWORDS’,
     ‘PID_COMMENTS’, ‘PID_TEMPLATE’, ‘PID_LASTAUTHOR’, ‘PID_REVNUMBER’,
     ‘PID_LASTPRINTED’, ‘PID_CREATE_DTM’, ‘PID_LASTSAVE_DTM’,
     ‘PID_PAGECOUNT’, ‘PID_WORDCOUNT’, ‘PID_CHARCOUNT’, ‘PID_APPNAME’,
     or ‘PID_SECURITY’.

 -- Method: SummaryInformation.GetPropertyCount ()

     Return the number of summary properties, through
     ‘MsiSummaryInfoGetPropertyCount()’.

 -- Method: SummaryInformation.SetProperty (field, value)

     Set a property through ‘MsiSummaryInfoSetProperty()’.  _field_ can
     have the same values as in *note GetProperty(): 26d8, _value_ is
     the new value of the property.  Possible value types are integer
     and string.

 -- Method: SummaryInformation.Persist ()

     Write the modified properties to the summary information stream,
     using ‘MsiSummaryInfoPersist()’.

See also
........

MsiSummaryInfoGetProperty(1) MsiSummaryInfoGetPropertyCount(2)
MsiSummaryInfoSetProperty(3) MsiSummaryInfoPersist(4)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfogetproperty.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfogetpropertycount.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfosetproperty.asp

   (4) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfopersist.asp


File: python.info,  Node: Record Objects,  Next: Errors,  Prev: Summary Information Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.4 Record Objects
.......................

 -- Method: Record.GetFieldCount ()

     Return the number of fields of the record, through
     ‘MsiRecordGetFieldCount()’.

 -- Method: Record.GetInteger (field)

     Return the value of _field_ as an integer where possible.  _field_
     must be an integer.

 -- Method: Record.GetString (field)

     Return the value of _field_ as a string where possible.  _field_
     must be an integer.

 -- Method: Record.SetString (field, value)

     Set _field_ to _value_ through ‘MsiRecordSetString()’.  _field_
     must be an integer; _value_ a string.

 -- Method: Record.SetStream (field, value)

     Set _field_ to the contents of the file named _value_, through
     ‘MsiRecordSetStream()’.  _field_ must be an integer; _value_ a
     string.

 -- Method: Record.SetInteger (field, value)

     Set _field_ to _value_ through ‘MsiRecordSetInteger()’.  Both
     _field_ and _value_ must be an integer.

 -- Method: Record.ClearData ()

     Set all fields of the record to 0, through ‘MsiRecordClearData()’.

See also
........

MsiRecordGetFieldCount(1) MsiRecordSetString(2) MsiRecordSetStream(3)
MsiRecordSetInteger(4) MsiRecordClear(5)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordgetfieldcount.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetstring.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetstream.asp

   (4) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetinteger.asp

   (5) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordclear.asp


File: python.info,  Node: Errors,  Next: CAB Objects,  Prev: Record Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.5 Errors
...............

All wrappers around MSI functions raise ‘MsiError’; the string inside
the exception will contain more detail.


File: python.info,  Node: CAB Objects,  Next: Directory Objects,  Prev: Errors,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.6 CAB Objects
....................

 -- Class: msilib.CAB (name)

     The class *note CAB: 26e9. represents a CAB file.  During MSI
     construction, files will be added simultaneously to the ‘Files’
     table, and to a CAB file.  Then, when all files have been added,
     the CAB file can be written, then added to the MSI file.

     _name_ is the name of the CAB file in the MSI file.

      -- Method: append (full, file, logical)

          Add the file with the pathname _full_ to the CAB file, under
          the name _logical_.  If there is already a file named
          _logical_, a new file name is created.

          Return the index of the file in the CAB file, and the new name
          of the file inside the CAB file.

      -- Method: commit (database)

          Generate a CAB file, add it as a stream to the MSI file, put
          it into the ‘Media’ table, and remove the generated file from
          the disk.


File: python.info,  Node: Directory Objects,  Next: Features,  Prev: CAB Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.7 Directory Objects
..........................

 -- Class: msilib.Directory (database, cab, basedir, physical, logical,
          default[, componentflags])

     Create a new directory in the Directory table.  There is a current
     component at each point in time for the directory, which is either
     explicitly created through *note start_component(): 26ef, or
     implicitly when files are added for the first time.  Files are
     added into the current component, and into the cab file.  To create
     a directory, a base directory object needs to be specified (can be
     ‘None’), the path to the physical directory, and a logical
     directory name.  _default_ specifies the DefaultDir slot in the
     directory table.  _componentflags_ specifies the default flags that
     new components get.

      -- Method: start_component ([component[, feature[, flags[,
               keyfile[, uuid]]]]])

          Add an entry to the Component table, and make this component
          the current component for this directory.  If no component
          name is given, the directory name is used.  If no _feature_ is
          given, the current feature is used.  If no _flags_ are given,
          the directory’s default flags are used.  If no _keyfile_ is
          given, the KeyPath is left null in the Component table.

      -- Method: add_file (file[, src[, version[, language]]])

          Add a file to the current component of the directory, starting
          a new one if there is no current component.  By default, the
          file name in the source and the file table will be identical.
          If the _src_ file is specified, it is interpreted relative to
          the current directory.  Optionally, a _version_ and a
          _language_ can be specified for the entry in the File table.

      -- Method: glob (pattern[, exclude])

          Add a list of files to the current component as specified in
          the glob pattern.  Individual files can be excluded in the
          _exclude_ list.

      -- Method: remove_pyc ()

          Remove ‘.pyc’/‘.pyo’ files on uninstall.

See also
........

Directory Table(1) File Table(2) Component Table(3) FeatureComponents
Table(4)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/directory_table.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/file_table.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/component_table.asp

   (4) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/featurecomponents_table.asp


File: python.info,  Node: Features,  Next: GUI classes,  Prev: Directory Objects,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.8 Features
.................

 -- Class: msilib.Feature (database, id, title, desc, display[,
          level=1[, parent[, directory[, attributes=0]]]])

     Add a new record to the ‘Feature’ table, using the values _id_,
     _parent.id_, _title_, _desc_, _display_, _level_, _directory_, and
     _attributes_.  The resulting feature object can be passed to the
     ‘start_component()’ method of *note Directory: 26ee.

      -- Method: set_current ()

          Make this feature the current feature of *note msilib: 116.
          New components are automatically added to the default feature,
          unless a feature is explicitly specified.

See also
........

Feature Table(1)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/feature_table.asp


File: python.info,  Node: GUI classes,  Next: Precomputed tables,  Prev: Features,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.9 GUI classes
....................

*note msilib: 116. provides several classes that wrap the GUI tables in
an MSI database.  However, no standard user interface is provided; use
*note bdist_msi: 8d. to create MSI files with a user-interface for
installing Python packages.

 -- Class: msilib.Control (dlg, name)

     Base class of the dialog controls.  _dlg_ is the dialog object the
     control belongs to, and _name_ is the control’s name.

      -- Method: event (event, argument[, condition=1[, ordering]])

          Make an entry into the ‘ControlEvent’ table for this control.

      -- Method: mapping (event, attribute)

          Make an entry into the ‘EventMapping’ table for this control.

      -- Method: condition (action, condition)

          Make an entry into the ‘ControlCondition’ table for this
          control.

 -- Class: msilib.RadioButtonGroup (dlg, name, property)

     Create a radio button control named _name_.  _property_ is the
     installer property that gets set when a radio button is selected.

      -- Method: add (name, x, y, width, height, text[, value])

          Add a radio button named _name_ to the group, at the
          coordinates _x_, _y_, _width_, _height_, and with the label
          _text_.  If _value_ is omitted, it defaults to _name_.

 -- Class: msilib.Dialog (db, name, x, y, w, h, attr, title, first,
          default, cancel)

     Return a new *note Dialog: 26ff. object.  An entry in the ‘Dialog’
     table is made, with the specified coordinates, dialog attributes,
     title, name of the first, default, and cancel controls.

      -- Method: control (name, type, x, y, width, height, attributes,
               property, text, control_next, help)

          Return a new *note Control: 26f9. object.  An entry in the
          ‘Control’ table is made with the specified parameters.

          This is a generic method; for specific types, specialized
          methods are provided.

      -- Method: text (name, x, y, width, height, attributes, text)

          Add and return a ‘Text’ control.

      -- Method: bitmap (name, x, y, width, height, text)

          Add and return a ‘Bitmap’ control.

      -- Method: line (name, x, y, width, height)

          Add and return a ‘Line’ control.

      -- Method: pushbutton (name, x, y, width, height, attributes,
               text, next_control)

          Add and return a ‘PushButton’ control.

      -- Method: radiogroup (name, x, y, width, height, attributes,
               property, text, next_control)

          Add and return a ‘RadioButtonGroup’ control.

      -- Method: checkbox (name, x, y, width, height, attributes,
               property, text, next_control)

          Add and return a ‘CheckBox’ control.

See also
........

Dialog Table(1) Control Table(2) Control Types(3) ControlCondition
Table(4) ControlEvent Table(5) EventMapping Table(6) RadioButton
Table(7)

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/dialog_table.asp

   (2) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/control_table.asp

   (3) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controls.asp

   (4) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controlcondition_table.asp

   (5) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controlevent_table.asp

   (6) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/eventmapping_table.asp

   (7) 
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/radiobutton_table.asp


File: python.info,  Node: Precomputed tables,  Prev: GUI classes,  Up: msilib --- Read and write Microsoft Installer files

5.34.1.10 Precomputed tables
............................

*note msilib: 116. provides a few subpackages that contain only schema
and table definitions.  Currently, these definitions are based on MSI
version 2.0.

 -- Data: msilib.schema

     This is the standard MSI schema for MSI 2.0, with the _tables_
     variable providing a list of table definitions, and
     __Validation_records_ providing the data for MSI validation.

 -- Data: msilib.sequence

     This module contains table contents for the standard sequence
     tables: _AdminExecuteSequence_, _AdminUISequence_,
     _AdvtExecuteSequence_, _InstallExecuteSequence_, and
     _InstallUISequence_.

 -- Data: msilib.text

     This module contains definitions for the UIText and ActionText
     tables, for the standard installer actions.


File: python.info,  Node: msvcrt -- Useful routines from the MS VC++ runtime,  Next: _winreg -- Windows registry access,  Prev: msilib --- Read and write Microsoft Installer files,  Up: MS Windows Specific Services

5.34.2 ‘msvcrt’ – Useful routines from the MS VC++ runtime
----------------------------------------------------------

These functions provide access to some useful capabilities on Windows
platforms.  Some higher-level modules use these functions to build the
Windows implementations of their services.  For example, the *note
getpass: df. module uses this in the implementation of the *note
getpass(): df. function.

  Further documentation on these functions can be found in the Platform
API documentation.

  The module implements both the normal and wide char variants of the
console I/O api.  The normal API deals only with ASCII characters and is
of limited use for internationalized applications.  The wide char API
should be used where ever possible

* Menu:

* File Operations:: 
* Console I/O:: 
* Other Functions:: 


File: python.info,  Node: File Operations,  Next: Console I/O,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.1 File Operations
........................

 -- Function: msvcrt.locking (fd, mode, nbytes)

     Lock part of a file based on file descriptor _fd_ from the C
     runtime.  Raises *note IOError: 1fa. on failure.  The locked region
     of the file extends from the current file position for _nbytes_
     bytes, and may continue beyond the end of the file.  _mode_ must be
     one of the ‘LK_*’ constants listed below.  Multiple regions in a
     file may be locked at the same time, but may not overlap.  Adjacent
     regions are not merged; they must be unlocked individually.

 -- Data: msvcrt.LK_LOCK
 -- Data: msvcrt.LK_RLCK

     Locks the specified bytes.  If the bytes cannot be locked, the
     program immediately tries again after 1 second.  If, after 10
     attempts, the bytes cannot be locked, *note IOError: 1fa. is
     raised.

 -- Data: msvcrt.LK_NBLCK
 -- Data: msvcrt.LK_NBRLCK

     Locks the specified bytes.  If the bytes cannot be locked, *note
     IOError: 1fa. is raised.

 -- Data: msvcrt.LK_UNLCK

     Unlocks the specified bytes, which must have been previously
     locked.

 -- Function: msvcrt.setmode (fd, flags)

     Set the line-end translation mode for the file descriptor _fd_.  To
     set it to text mode, _flags_ should be *note os.O_TEXT: 1133.; for
     binary, it should be *note os.O_BINARY: 111d.

 -- Function: msvcrt.open_osfhandle (handle, flags)

     Create a C runtime file descriptor from the file handle _handle_.
     The _flags_ parameter should be a bitwise OR of *note os.O_APPEND:
     1125, *note os.O_RDONLY: 111a, and *note os.O_TEXT: 1133.  The
     returned file descriptor may be used as a parameter to *note
     os.fdopen(): 701. to create a file object.

 -- Function: msvcrt.get_osfhandle (fd)

     Return the file handle for the file descriptor _fd_.  Raises *note
     IOError: 1fa. if _fd_ is not recognized.


File: python.info,  Node: Console I/O,  Next: Other Functions,  Prev: File Operations,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.2 Console I/O
....................

 -- Function: msvcrt.kbhit ()

     Return true if a keypress is waiting to be read.

 -- Function: msvcrt.getch ()

     Read a keypress and return the resulting character.  Nothing is
     echoed to the console.  This call will block if a keypress is not
     already available, but will not wait for ‘Enter’ to be pressed.  If
     the pressed key was a special function key, this will return
     ‘'\000'’ or ‘'\xe0'’; the next call will return the keycode.  The
     ‘Control-C’ keypress cannot be read with this function.

 -- Function: msvcrt.getwch ()

     Wide char variant of *note getch(): 271b, returning a Unicode
     value.

     New in version 2.6.

 -- Function: msvcrt.getche ()

     Similar to *note getch(): 271b, but the keypress will be echoed if
     it represents a printable character.

 -- Function: msvcrt.getwche ()

     Wide char variant of *note getche(): 271d, returning a Unicode
     value.

     New in version 2.6.

 -- Function: msvcrt.putch (char)

     Print the character _char_ to the console without buffering.

 -- Function: msvcrt.putwch (unicode_char)

     Wide char variant of *note putch(): 271f, accepting a Unicode
     value.

     New in version 2.6.

 -- Function: msvcrt.ungetch (char)

     Cause the character _char_ to be "pushed back" into the console
     buffer; it will be the next character read by *note getch(): 271b.
     or *note getche(): 271d.

 -- Function: msvcrt.ungetwch (unicode_char)

     Wide char variant of *note ungetch(): 2721, accepting a Unicode
     value.

     New in version 2.6.


File: python.info,  Node: Other Functions,  Prev: Console I/O,  Up: msvcrt -- Useful routines from the MS VC++ runtime

5.34.2.3 Other Functions
........................

 -- Function: msvcrt.heapmin ()

     Force the ‘malloc()’ heap to clean itself up and return unused
     blocks to the operating system.  On failure, this raises *note
     IOError: 1fa.


File: python.info,  Node: _winreg -- Windows registry access,  Next: winsound --- Sound-playing interface for Windows,  Prev: msvcrt -- Useful routines from the MS VC++ runtime,  Up: MS Windows Specific Services

5.34.3 ‘_winreg’ – Windows registry access
------------------------------------------

     Note: The *note _winreg: 3. module has been renamed to ‘winreg’ in
     Python 3.  The *note 2to3: bdb. tool will automatically adapt
     imports when converting your sources to Python 3.

  New in version 2.0.

  These functions expose the Windows registry API to Python.  Instead of
using an integer as the registry handle, a *note handle object: 2728. is
used to ensure that the handles are closed correctly, even if the
programmer neglects to explicitly close them.

  This module offers the following functions:

 -- Function: _winreg.CloseKey (hkey)

     Closes a previously opened registry key.  The _hkey_ argument
     specifies a previously opened key.

          Note: If _hkey_ is not closed using this method (or via *note
          hkey.Close(): 272a.), it is closed when the _hkey_ object is
          destroyed by Python.

 -- Function: _winreg.ConnectRegistry (computer_name, key)

     Establishes a connection to a predefined registry handle on another
     computer, and returns a *note handle object: 2728.

     _computer_name_ is the name of the remote computer, of the form
     ‘r"\\computername"’.  If ‘None’, the local computer is used.

     _key_ is the predefined handle to connect to.

     The return value is the handle of the opened key.  If the function
     fails, a *note WindowsError: 95b. exception is raised.

 -- Function: _winreg.CreateKey (key, sub_key)

     Creates or opens the specified key, returning a *note handle
     object: 2728.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _sub_key_ is a string that names the key this method opens or
     creates.

     If _key_ is one of the predefined keys, _sub_key_ may be ‘None’.
     In that case, the handle returned is the same key handle passed in
     to the function.

     If the key already exists, this function opens the existing key.

     The return value is the handle of the opened key.  If the function
     fails, a *note WindowsError: 95b. exception is raised.

 -- Function: _winreg.CreateKeyEx (key, sub_key[, res[, sam]])

     Creates or opens the specified key, returning a *note handle
     object: 2728.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _sub_key_ is a string that names the key this method opens or
     creates.

     _res_ is a reserved integer, and must be zero.  The default is
     zero.

     _sam_ is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_ALL_ACCESS: 272e.  See *note Access Rights: 272f. for other
     allowed values.

     If _key_ is one of the predefined keys, _sub_key_ may be ‘None’.
     In that case, the handle returned is the same key handle passed in
     to the function.

     If the key already exists, this function opens the existing key.

     The return value is the handle of the opened key.  If the function
     fails, a *note WindowsError: 95b. exception is raised.

  New in version 2.7.

 -- Function: _winreg.DeleteKey (key, sub_key)

     Deletes the specified key.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 272d.

     _sub_key_ is a string that must be a subkey of the key identified
     by the _key_ parameter.  This value must not be ‘None’, and the key
     may not have subkeys.

     _This method can not delete keys with subkeys._

     If the method succeeds, the entire key, including all of its
     values, is removed.  If the method fails, a *note WindowsError:
     95b. exception is raised.

 -- Function: _winreg.DeleteKeyEx (key, sub_key[, sam[, res]])

     Deletes the specified key.

          Note: The *note DeleteKeyEx(): 2cd. function is implemented
          with the RegDeleteKeyEx Windows API function, which is
          specific to 64-bit versions of Windows.  See the
          RegDeleteKeyEx documentation(1).

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 272d.

     _sub_key_ is a string that must be a subkey of the key identified
     by the _key_ parameter.  This value must not be ‘None’, and the key
     may not have subkeys.

     _res_ is a reserved integer, and must be zero.  The default is
     zero.

     _sam_ is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_WOW64_64KEY: 2731.  See *note Access Rights: 272f. for other
     allowed values.

     _This method can not delete keys with subkeys._

     If the method succeeds, the entire key, including all of its
     values, is removed.  If the method fails, a *note WindowsError:
     95b. exception is raised.

     On unsupported Windows versions, *note NotImplementedError: 94e. is
     raised.

  New in version 2.7.

 -- Function: _winreg.DeleteValue (key, value)

     Removes a named value from a registry key.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _value_ is a string that identifies the value to remove.

 -- Function: _winreg.EnumKey (key, index)

     Enumerates subkeys of an open registry key, returning a string.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 272d.

     _index_ is an integer that identifies the index of the key to
     retrieve.

     The function retrieves the name of one subkey each time it is
     called.  It is typically called repeatedly until a *note
     WindowsError: 95b. exception is raised, indicating, no more values
     are available.

 -- Function: _winreg.EnumValue (key, index)

     Enumerates values of an open registry key, returning a tuple.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 272d.

     _index_ is an integer that identifies the index of the value to
     retrieve.

     The function retrieves the name of one subkey each time it is
     called.  It is typically called repeatedly, until a *note
     WindowsError: 95b. exception is raised, indicating no more values.

     The result is a tuple of 3 items:

     Index       Meaning
                 
     -------------------------------------------------------------
                 
     ‘0’         A string that identifies the value name
                 
                 
     ‘1’         An object that holds the value data, and whose
                 type depends on the underlying registry type
                 
                 
     ‘2’         An integer that identifies the type of the
                 value data (see table in docs for *note
                 SetValueEx(): 2735.)
                 

 -- Function: _winreg.ExpandEnvironmentStrings (unicode)

     Expands environment variable placeholders ‘%NAME%’ in unicode
     strings like *note REG_EXPAND_SZ: 2737.:

          >>> ExpandEnvironmentStrings(u"%windir%")
          u"C:\\Windows"

     New in version 2.6.

 -- Function: _winreg.FlushKey (key)

     Writes all the attributes of a key to the registry.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     It is not necessary to call *note FlushKey(): 2738. to change a
     key.  Registry changes are flushed to disk by the registry using
     its lazy flusher.  Registry changes are also flushed to disk at
     system shutdown.  Unlike *note CloseKey(): 2729, the *note
     FlushKey(): 2738. method returns only when all the data has been
     written to the registry.  An application should only call *note
     FlushKey(): 2738. if it requires absolute certainty that registry
     changes are on disk.

          Note: If you don’t know whether a *note FlushKey(): 2738. call
          is required, it probably isn’t.

 -- Function: _winreg.LoadKey (key, sub_key, file_name)

     Creates a subkey under the specified key and stores registration
     information from a specified file into that subkey.

     _key_ is a handle returned by *note ConnectRegistry(): 272b. or one
     of the constants *note HKEY_USERS: 273a. or *note
     HKEY_LOCAL_MACHINE: 273b.

     _sub_key_ is a string that identifies the subkey to load.

     _file_name_ is the name of the file to load registry data from.
     This file must have been created with the *note SaveKey(): 273c.
     function.  Under the file allocation table (FAT) file system, the
     filename may not have an extension.

     A call to *note LoadKey(): 2739. fails if the calling process does
     not have the ‘SE_RESTORE_PRIVILEGE’ privilege.  Note that
     privileges are different from permissions – see the RegLoadKey
     documentation(2) for more details.

     If _key_ is a handle returned by *note ConnectRegistry(): 272b,
     then the path specified in _file_name_ is relative to the remote
     computer.

 -- Function: _winreg.OpenKey (key, sub_key[, res[, sam]])

     Opens the specified key, returning a *note handle object: 2728.

     _key_ is an already open key, or any one of the predefined *note
     HKEY_* constants: 272d.

     _sub_key_ is a string that identifies the sub_key to open.

     _res_ is a reserved integer, and must be zero.  The default is
     zero.

     _sam_ is an integer that specifies an access mask that describes
     the desired security access for the key.  Default is *note
     KEY_READ: 273e.  See *note Access Rights: 272f. for other allowed
     values.

     The result is a new handle to the specified key.

     If the function fails, *note WindowsError: 95b. is raised.

 -- Function: _winreg.OpenKeyEx ()

     The functionality of *note OpenKeyEx(): 273f. is provided via *note
     OpenKey(): 273d, by the use of default arguments.

 -- Function: _winreg.QueryInfoKey (key)

     Returns information about a key, as a tuple.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     The result is a tuple of 3 items:

     Index       Meaning
                 
     --------------------------------------------------------------
                 
     ‘0’         An integer giving the number of sub keys this
                 key has.
                 
                 
     ‘1’         An integer giving the number of values this key
                 has.
                 
                 
     ‘2’         A long integer giving when the key was last
                 modified (if available) as 100’s of nanoseconds
                 since Jan 1, 1600.
                 

 -- Function: _winreg.QueryValue (key, sub_key)

     Retrieves the unnamed value for a key, as a string.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _sub_key_ is a string that holds the name of the subkey with which
     the value is associated.  If this parameter is ‘None’ or empty, the
     function retrieves the value set by the *note SetValue(): 2742.
     method for the key identified by _key_.

     Values in the registry have name, type, and data components.  This
     method retrieves the data for a key’s first value that has a NULL
     name.  But the underlying API call doesn’t return the type, so
     always use *note QueryValueEx(): 2743. if possible.

 -- Function: _winreg.QueryValueEx (key, value_name)

     Retrieves the type and data for a specified value name associated
     with an open registry key.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _value_name_ is a string indicating the value to query.

     The result is a tuple of 2 items:

     Index       Meaning
                 
     ----------------------------------------------------------
                 
     ‘0’         The value of the registry item.
                 
                 
     ‘1’         An integer giving the registry type for
                 this value (see table in docs for *note
                 SetValueEx(): 2735.)
                 

 -- Function: _winreg.SaveKey (key, file_name)

     Saves the specified key, and all its subkeys to the specified file.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _file_name_ is the name of the file to save registry data to.  This
     file cannot already exist.  If this filename includes an extension,
     it cannot be used on file allocation table (FAT) file systems by
     the *note LoadKey(): 2739. method.

     If _key_ represents a key on a remote computer, the path described
     by _file_name_ is relative to the remote computer.  The caller of
     this method must possess the ‘SeBackupPrivilege’ security
     privilege.  Note that privileges are different than permissions –
     see the Conflicts Between User Rights and Permissions
     documentation(3) for more details.

     This function passes NULL for _security_attributes_ to the API.

 -- Function: _winreg.SetValue (key, sub_key, type, value)

     Associates a value with a specified key.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _sub_key_ is a string that names the subkey with which the value is
     associated.

     _type_ is an integer that specifies the type of the data.
     Currently this must be *note REG_SZ: 2744, meaning only strings are
     supported.  Use the *note SetValueEx(): 2735. function for support
     for other data types.

     _value_ is a string that specifies the new value.

     If the key specified by the _sub_key_ parameter does not exist, the
     SetValue function creates it.

     Value lengths are limited by available memory.  Long values (more
     than 2048 bytes) should be stored as files with the filenames
     stored in the configuration registry.  This helps the registry
     perform efficiently.

     The key identified by the _key_ parameter must have been opened
     with *note KEY_SET_VALUE: 2745. access.

 -- Function: _winreg.SetValueEx (key, value_name, reserved, type,
          value)

     Stores data in the value field of an open registry key.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     _value_name_ is a string that names the subkey with which the value
     is associated.

     _type_ is an integer that specifies the type of the data.  See
     *note Value Types: 2746. for the available types.

     _reserved_ can be anything – zero is always passed to the API.

     _value_ is a string that specifies the new value.

     This method can also set additional value and type information for
     the specified key.  The key identified by the key parameter must
     have been opened with *note KEY_SET_VALUE: 2745. access.

     To open the key, use the *note CreateKey(): 272c. or *note
     OpenKey(): 273d. methods.

     Value lengths are limited by available memory.  Long values (more
     than 2048 bytes) should be stored as files with the filenames
     stored in the configuration registry.  This helps the registry
     perform efficiently.

 -- Function: _winreg.DisableReflectionKey (key)

     Disables registry reflection for 32-bit processes running on a
     64-bit operating system.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     Will generally raise *note NotImplemented: 20e. if executed on a
     32-bit operating system.

     If the key is not on the reflection list, the function succeeds but
     has no effect.  Disabling reflection for a key does not affect
     reflection of any subkeys.

 -- Function: _winreg.EnableReflectionKey (key)

     Restores registry reflection for the specified disabled key.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     Will generally raise *note NotImplemented: 20e. if executed on a
     32-bit operating system.

     Restoring reflection for a key does not affect reflection of any
     subkeys.

 -- Function: _winreg.QueryReflectionKey (key)

     Determines the reflection state for the specified key.

     _key_ is an already open key, or one of the predefined *note HKEY_*
     constants: 272d.

     Returns ‘True’ if reflection is disabled.

     Will generally raise *note NotImplemented: 20e. if executed on a
     32-bit operating system.

* Menu:

* Constants: Constants<5>. 
* Registry Handle Objects:: 

Constants

* HKEY_* Constants:: 
* Access Rights:: 
* Value Types:: 

Access Rights

* 64-bit Specific:: 

   ---------- Footnotes ----------

   (1) http://msdn.microsoft.com/en-us/library/ms724847%28VS.85%29.aspx

   (2) 
http://msdn.microsoft.com/en-us/library/ms724889%28v=VS.85%29.aspx

   (3) 
http://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx


File: python.info,  Node: Constants<5>,  Next: Registry Handle Objects,  Up: _winreg -- Windows registry access

5.34.3.1 Constants
..................

The following constants are defined for use in many *note _winreg: 3.
functions.

* Menu:

* HKEY_* Constants:: 
* Access Rights:: 
* Value Types:: 


File: python.info,  Node: HKEY_* Constants,  Next: Access Rights,  Up: Constants<5>

5.34.3.2 HKEY_* Constants
.........................

 -- Data: _winreg.HKEY_CLASSES_ROOT

     Registry entries subordinate to this key define types (or classes)
     of documents and the properties associated with those types.  Shell
     and COM applications use the information stored under this key.

 -- Data: _winreg.HKEY_CURRENT_USER

     Registry entries subordinate to this key define the preferences of
     the current user.  These preferences include the settings of
     environment variables, data about program groups, colors, printers,
     network connections, and application preferences.

 -- Data: _winreg.HKEY_LOCAL_MACHINE

     Registry entries subordinate to this key define the physical state
     of the computer, including data about the bus type, system memory,
     and installed hardware and software.

 -- Data: _winreg.HKEY_USERS

     Registry entries subordinate to this key define the default user
     configuration for new users on the local computer and the user
     configuration for the current user.

 -- Data: _winreg.HKEY_PERFORMANCE_DATA

     Registry entries subordinate to this key allow you to access
     performance data.  The data is not actually stored in the registry;
     the registry functions cause the system to collect the data from
     its source.

 -- Data: _winreg.HKEY_CURRENT_CONFIG

     Contains information about the current hardware profile of the
     local computer system.

 -- Data: _winreg.HKEY_DYN_DATA

     This key is not used in versions of Windows after 98.


File: python.info,  Node: Access Rights,  Next: Value Types,  Prev: HKEY_* Constants,  Up: Constants<5>

5.34.3.3 Access Rights
......................

For more information, see Registry Key Security and Access(1).

 -- Data: _winreg.KEY_ALL_ACCESS

     Combines the STANDARD_RIGHTS_REQUIRED, *note KEY_QUERY_VALUE: 2750,
     *note KEY_SET_VALUE: 2745, *note KEY_CREATE_SUB_KEY: 2751, *note
     KEY_ENUMERATE_SUB_KEYS: 2752, *note KEY_NOTIFY: 2753, and *note
     KEY_CREATE_LINK: 2754. access rights.

 -- Data: _winreg.KEY_WRITE

     Combines the STANDARD_RIGHTS_WRITE, *note KEY_SET_VALUE: 2745, and
     *note KEY_CREATE_SUB_KEY: 2751. access rights.

 -- Data: _winreg.KEY_READ

     Combines the STANDARD_RIGHTS_READ, *note KEY_QUERY_VALUE: 2750,
     *note KEY_ENUMERATE_SUB_KEYS: 2752, and *note KEY_NOTIFY: 2753.
     values.

 -- Data: _winreg.KEY_EXECUTE

     Equivalent to *note KEY_READ: 273e.

 -- Data: _winreg.KEY_QUERY_VALUE

     Required to query the values of a registry key.

 -- Data: _winreg.KEY_SET_VALUE

     Required to create, delete, or set a registry value.

 -- Data: _winreg.KEY_CREATE_SUB_KEY

     Required to create a subkey of a registry key.

 -- Data: _winreg.KEY_ENUMERATE_SUB_KEYS

     Required to enumerate the subkeys of a registry key.

 -- Data: _winreg.KEY_NOTIFY

     Required to request change notifications for a registry key or for
     subkeys of a registry key.

 -- Data: _winreg.KEY_CREATE_LINK

     Reserved for system use.

* Menu:

* 64-bit Specific:: 

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx


File: python.info,  Node: 64-bit Specific,  Up: Access Rights

5.34.3.4 64-bit Specific
........................

For more information, see Accesing an Alternate Registry View(1).

 -- Data: _winreg.KEY_WOW64_64KEY

     Indicates that an application on 64-bit Windows should operate on
     the 64-bit registry view.

 -- Data: _winreg.KEY_WOW64_32KEY

     Indicates that an application on 64-bit Windows should operate on
     the 32-bit registry view.

   ---------- Footnotes ----------

   (1) http://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx


File: python.info,  Node: Value Types,  Prev: Access Rights,  Up: Constants<5>

5.34.3.5 Value Types
....................

For more information, see Registry Value Types(1).

 -- Data: _winreg.REG_BINARY

     Binary data in any form.

 -- Data: _winreg.REG_DWORD

     32-bit number.

 -- Data: _winreg.REG_DWORD_LITTLE_ENDIAN

     A 32-bit number in little-endian format.

 -- Data: _winreg.REG_DWORD_BIG_ENDIAN

     A 32-bit number in big-endian format.

 -- Data: _winreg.REG_EXPAND_SZ

     Null-terminated string containing references to environment
     variables (‘%PATH%’).

 -- Data: _winreg.REG_LINK

     A Unicode symbolic link.

 -- Data: _winreg.REG_MULTI_SZ

     A sequence of null-terminated strings, terminated by two null
     characters.  (Python handles this termination automatically.)

 -- Data: _winreg.REG_NONE

     No defined value type.

 -- Data: _winreg.REG_RESOURCE_LIST

     A device-driver resource list.

 -- Data: _winreg.REG_FULL_RESOURCE_DESCRIPTOR

     A hardware setting.

 -- Data: _winreg.REG_RESOURCE_REQUIREMENTS_LIST

     A hardware resource list.

 -- Data: _winreg.REG_SZ

     A null-terminated string.

   ---------- Footnotes ----------

   (1) 
http://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx


File: python.info,  Node: Registry Handle Objects,  Prev: Constants<5>,  Up: _winreg -- Windows registry access

5.34.3.6 Registry Handle Objects
................................

This object wraps a Windows HKEY object, automatically closing it when
the object is destroyed.  To guarantee cleanup, you can call either the
*note Close(): 272a. method on the object, or the *note CloseKey():
2729. function.

  All registry functions in this module return one of these objects.

  All registry functions in this module which accept a handle object
also accept an integer, however, use of the handle object is encouraged.

  Handle objects provide semantics for *note __nonzero__(): 70c. – thus:

     if handle:
         print "Yes"

  will print ‘Yes’ if the handle is currently valid (has not been closed
or detached).

  The object also support comparison semantics, so handle objects will
compare true if they both reference the same underlying Windows handle
value.

  Handle objects can be converted to an integer (e.g., using the
built-in *note int(): 1f2. function), in which case the underlying
Windows handle value is returned.  You can also use the *note Detach():
2766. method to return the integer handle, and also disconnect the
Windows handle from the handle object.

 -- Method: PyHKEY.Close ()

     Closes the underlying Windows handle.

     If the handle is already closed, no error is raised.

 -- Method: PyHKEY.Detach ()

     Detaches the Windows handle from the handle object.

     The result is an integer (or long on 64 bit Windows) that holds the
     value of the handle before it is detached.  If the handle is
     already detached or closed, this will return zero.

     After calling this function, the handle is effectively invalidated,
     but the handle is not closed.  You would call this function when
     you need the underlying Win32 handle to exist beyond the lifetime
     of the handle object.

 -- Method: PyHKEY.__enter__ ()
 -- Method: PyHKEY.__exit__ (*exc_info)

     The HKEY object implements *note __enter__(): 1ff. and *note
     __exit__(): 200. and thus supports the context protocol for the
     *note with: 1c0. statement:

          with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
              ...  # work with key

     will automatically close _key_ when control leaves the *note with:
     1c0. block.

     New in version 2.6.


File: python.info,  Node: winsound --- Sound-playing interface for Windows,  Prev: _winreg -- Windows registry access,  Up: MS Windows Specific Services

5.34.4 ‘winsound’ — Sound-playing interface for Windows
-------------------------------------------------------

New in version 1.5.2.

  The *note winsound: 198. module provides access to the basic
sound-playing machinery provided by Windows platforms.  It includes
functions and several constants.

 -- Function: winsound.Beep (frequency, duration)

     Beep the PC’s speaker.  The _frequency_ parameter specifies
     frequency, in hertz, of the sound, and must be in the range 37
     through 32,767.  The _duration_ parameter specifies the number of
     milliseconds the sound should last.  If the system is not able to
     beep the speaker, *note RuntimeError: 39b. is raised.

     New in version 1.6.

 -- Function: winsound.PlaySound (sound, flags)

     Call the underlying ‘PlaySound()’ function from the Platform API.
     The _sound_ parameter may be a filename, audio data as a string, or
     ‘None’.  Its interpretation depends on the value of _flags_, which
     can be a bitwise ORed combination of the constants described below.
     If the _sound_ parameter is ‘None’, any currently playing waveform
     sound is stopped.  If the system indicates an error, *note
     RuntimeError: 39b. is raised.

 -- Function: winsound.MessageBeep ([type=MB_OK])

     Call the underlying ‘MessageBeep()’ function from the Platform API.
     This plays a sound as specified in the registry.  The _type_
     argument specifies which sound to play; possible values are ‘-1’,
     ‘MB_ICONASTERISK’, ‘MB_ICONEXCLAMATION’, ‘MB_ICONHAND’,
     ‘MB_ICONQUESTION’, and ‘MB_OK’, all described below.  The value
     ‘-1’ produces a "simple beep"; this is the final fallback if a
     sound cannot be played otherwise.

     New in version 2.3.

 -- Data: winsound.SND_FILENAME

     The _sound_ parameter is the name of a WAV file.  Do not use with
     *note SND_ALIAS: 276f.

 -- Data: winsound.SND_ALIAS

     The _sound_ parameter is a sound association name from the
     registry.  If the registry contains no such name, play the system
     default sound unless *note SND_NODEFAULT: 2770. is also specified.
     If no default sound is registered, raise *note RuntimeError: 39b.
     Do not use with *note SND_FILENAME: 276e.

     All Win32 systems support at least the following; most systems
     support many more:

     *note PlaySound(): 276c.       Corresponding Control Panel Sound name
     _name_                         

     ----------------------------------------------------------------------------
                                    
     ‘'SystemAsterisk'’             Asterisk
                                    
                                    
     ‘'SystemExclamation'’          Exclamation
                                    
                                    
     ‘'SystemExit'’                 Exit Windows
                                    
                                    
     ‘'SystemHand'’                 Critical Stop
                                    
                                    
     ‘'SystemQuestion'’             Question
                                    

     For example:

          import winsound
          # Play Windows exit sound.
          winsound.PlaySound("SystemExit", winsound.SND_ALIAS)

          # Probably play Windows default sound, if any is registered (because
          # "*" probably isn't the registered name of any sound).
          winsound.PlaySound("*", winsound.SND_ALIAS)

 -- Data: winsound.SND_LOOP

     Play the sound repeatedly.  The *note SND_ASYNC: 2772. flag must
     also be used to avoid blocking.  Cannot be used with *note
     SND_MEMORY: 2773.

 -- Data: winsound.SND_MEMORY

     The _sound_ parameter to *note PlaySound(): 276c. is a memory image
     of a WAV file, as a string.

          Note: This module does not support playing from a memory image
          asynchronously, so a combination of this flag and *note
          SND_ASYNC: 2772. will raise *note RuntimeError: 39b.

 -- Data: winsound.SND_PURGE

     Stop playing all instances of the specified sound.

          Note: This flag is not supported on modern Windows platforms.

 -- Data: winsound.SND_ASYNC

     Return immediately, allowing sounds to play asynchronously.

 -- Data: winsound.SND_NODEFAULT

     If the specified sound cannot be found, do not play the system
     default sound.

 -- Data: winsound.SND_NOSTOP

     Do not interrupt sounds currently playing.

 -- Data: winsound.SND_NOWAIT

     Return immediately if the sound driver is busy.

          Note: This flag is not supported on modern Windows platforms.

 -- Data: winsound.MB_ICONASTERISK

     Play the ‘SystemDefault’ sound.

 -- Data: winsound.MB_ICONEXCLAMATION

     Play the ‘SystemExclamation’ sound.

 -- Data: winsound.MB_ICONHAND

     Play the ‘SystemHand’ sound.

 -- Data: winsound.MB_ICONQUESTION

     Play the ‘SystemQuestion’ sound.

 -- Data: winsound.MB_OK

     Play the ‘SystemDefault’ sound.


File: python.info,  Node: Unix Specific Services,  Next: Mac OS X specific services,  Prev: MS Windows Specific Services,  Up: The Python Standard Library

5.35 Unix Specific Services
===========================

The modules described in this chapter provide interfaces to features
that are unique to the Unix operating system, or in some cases to some
or many variants of it.  Here’s an overview:

* Menu:

* posix: posix --- The most common POSIX system calls. The most common POSIX system calls
* pwd: pwd --- The password database. The password database
* spwd: spwd --- The shadow password database. The shadow password database
* grp: grp --- The group database. The group database
* crypt: crypt --- Function to check Unix passwords. Function to check Unix passwords
* dl: dl --- Call C functions in shared objects. Call C functions in shared objects
* termios: termios --- POSIX style tty control. POSIX style tty control
* tty: tty --- Terminal control functions. Terminal control functions
* pty: pty --- Pseudo-terminal utilities. Pseudo-terminal utilities
* fcntl: fcntl --- The fcntl and ioctl system calls. The fcntl and ioctl system calls
* pipes: pipes --- Interface to shell pipelines. Interface to shell pipelines
* posixfile: posixfile --- File-like objects with locking support. File-like objects with locking support
* resource: resource --- Resource usage information. Resource usage information
* nis: nis --- Interface to Sun's NIS Yellow Pages. Interface to Sun’s NIS (Yellow Pages)
* syslog: syslog --- Unix syslog library routines. Unix syslog library routines
* commands: commands --- Utilities for running commands. Utilities for running commands

posix — The most common POSIX system calls

* Large File Support:: 
* Notable Module Contents:: 

dl — Call C functions in shared objects

* Dl Objects:: 

termios — POSIX style tty control

* Example: Example<15>. 

pipes — Interface to shell pipelines

* Template Objects:: 

resource — Resource usage information

* Resource Limits:: 
* Resource Usage:: 

syslog — Unix syslog library routines

* Examples: Examples<22>. 

Examples

* Simple example:: 


File: python.info,  Node: posix --- The most common POSIX system calls,  Next: pwd --- The password database,  Up: Unix Specific Services

5.35.1 ‘posix’ — The most common POSIX system calls
---------------------------------------------------

This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).

  *Do not import this module directly.*  Instead, import the module
*note os: 128, which provides a _portable_ version of this interface.
On Unix, the *note os: 128. module provides a superset of the *note
posix: 136. interface.  On non-Unix operating systems the *note posix:
136. module is not available, but a subset is always available through
the *note os: 128. interface.  Once *note os: 128. is imported, there is
_no_ performance penalty in using it instead of *note posix: 136.  In
addition, *note os: 128. provides some additional functionality, such as
automatically calling *note putenv(): 10e3. when an entry in
‘os.environ’ is changed.

  Errors are reported as exceptions; the usual exceptions are given for
type errors, while errors reported by the system calls raise *note
OSError: 231.

* Menu:

* Large File Support:: 
* Notable Module Contents:: 


File: python.info,  Node: Large File Support,  Next: Notable Module Contents,  Up: posix --- The most common POSIX system calls

5.35.1.1 Large File Support
...........................

Several operating systems (including AIX, HP-UX, Irix and Solaris)
provide support for files that are larger than 2 GB from a C programming
model where ‘int’ and ‘long’ are 32-bit values.  This is typically
accomplished by defining the relevant size and offset types as 64-bit
values.  Such files are sometimes referred to as _large files_.

  Large file support is enabled in Python when the size of an ‘off_t’ is
larger than a ‘long’ and the ‘long long’ type is available and is at
least as large as an ‘off_t’.  Python longs are then used to represent
file sizes, offsets and other values that can exceed the range of a
Python int.  It may be necessary to configure and compile Python with
certain compiler flags to enable this mode.  For example, it is enabled
by default with recent versions of Irix, but with Solaris 2.6 and 2.7
you need to do something like:

     CFLAGS="`getconf LFS_CFLAGS`" OPT="-g -O2 $CFLAGS" \
             ./configure

  On large-file-capable Linux systems, this might work:

     CFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT="-g -O2 $CFLAGS" \
             ./configure


File: python.info,  Node: Notable Module Contents,  Prev: Large File Support,  Up: posix --- The most common POSIX system calls

5.35.1.2 Notable Module Contents
................................

In addition to many functions described in the *note os: 128. module
documentation, *note posix: 136. defines the following data item:

 -- Data: posix.environ

     A dictionary representing the string environment at the time the
     interpreter was started.  For example, ‘environ['HOME']’ is the
     pathname of your home directory, equivalent to ‘getenv("HOME")’ in
     C.

     Modifying this dictionary does not affect the string environment
     passed on by *note execv(): 10f2, *note popen(): 700. or *note
     system(): 3fa.; if you need to change the environment, pass
     ‘environ’ to *note execve(): 1163. or add variable assignments and
     export statements to the command string for *note system(): 3fa. or
     *note popen(): 700.

          Note: The *note os: 128. module provides an alternate
          implementation of ‘environ’ which updates the environment on
          modification.  Note also that updating ‘os.environ’ will
          render this dictionary obsolete.  Use of the *note os: 128.
          module version of this is recommended over direct access to
          the *note posix: 136. module.


File: python.info,  Node: pwd --- The password database,  Next: spwd --- The shadow password database,  Prev: posix --- The most common POSIX system calls,  Up: Unix Specific Services

5.35.2 ‘pwd’ — The password database
------------------------------------

This module provides access to the Unix user account and password
database.  It is available on all Unix versions.

  Password database entries are reported as a tuple-like object, whose
attributes correspond to the members of the ‘passwd’ structure
(Attribute field below, see ‘<pwd.h>’):

Index       Attribute           Meaning
                                
------------------------------------------------------------------
                                
0           ‘pw_name’           Login name
                                
                                
1           ‘pw_passwd’         Optional encrypted password
                                
                                
2           ‘pw_uid’            Numerical user ID
                                
                                
3           ‘pw_gid’            Numerical group ID
                                
                                
4           ‘pw_gecos’          User name or comment field
                                
                                
5           ‘pw_dir’            User home directory
                                
                                
6           ‘pw_shell’          User command interpreter
                                

  The uid and gid items are integers, all others are strings.  *note
KeyError: 205. is raised if the entry asked for cannot be found.

     Note: 
     In traditional Unix the field ‘pw_passwd’ usually contains a
     password encrypted with a DES derived algorithm (see module *note
     crypt: 75.).  However most modern unices use a so-called _shadow
     password_ system.  On those unices the _pw_passwd_ field only
     contains an asterisk (‘'*'’) or the letter ‘'x'’ where the
     encrypted password is stored in a file ‘/etc/shadow’ which is not
     world readable.  Whether the _pw_passwd_ field contains anything
     useful is system-dependent.  If available, the *note spwd: 15e.
     module should be used where access to the encrypted password is
     required.

  It defines the following items:

 -- Function: pwd.getpwuid (uid)

     Return the password database entry for the given numeric user ID.

 -- Function: pwd.getpwnam (name)

     Return the password database entry for the given user name.

 -- Function: pwd.getpwall ()

     Return a list of all available password database entries, in
     arbitrary order.

See also
........

Module *note grp: e4.

     An interface to the group database, similar to this.

Module *note spwd: 15e.

     An interface to the shadow password database, similar to this.


File: python.info,  Node: spwd --- The shadow password database,  Next: grp --- The group database,  Prev: pwd --- The password database,  Up: Unix Specific Services

5.35.3 ‘spwd’ — The shadow password database
--------------------------------------------

New in version 2.5.

  This module provides access to the Unix shadow password database.  It
is available on various Unix versions.

  You must have enough privileges to access the shadow password database
(this usually means you have to be root).

  Shadow password database entries are reported as a tuple-like object,
whose attributes correspond to the members of the ‘spwd’ structure
(Attribute field below, see ‘<shadow.h>’):

Index       Attribute           Meaning
                                
----------------------------------------------------------------------
                                
0           ‘sp_nam’            Login name
                                
                                
1           ‘sp_pwd’            Encrypted password
                                
                                
2           ‘sp_lstchg’         Date of last change
                                
                                
3           ‘sp_min’            Minimal number of days between
                                changes
                                
                                
4           ‘sp_max’            Maximum number of days between
                                changes
                                
                                
5           ‘sp_warn’           Number of days before password
                                expires to warn user about it
                                
                                
6           ‘sp_inact’          Number of days after password
                                expires until account is blocked
                                
                                
7           ‘sp_expire’         Number of days since 1970-01-01
                                until account is disabled
                                
                                
8           ‘sp_flag’           Reserved
                                

  The sp_nam and sp_pwd items are strings, all others are integers.
*note KeyError: 205. is raised if the entry asked for cannot be found.

  It defines the following items:

 -- Function: spwd.getspnam (name)

     Return the shadow password database entry for the given user name.

 -- Function: spwd.getspall ()

     Return a list of all available shadow password database entries, in
     arbitrary order.

See also
........

Module *note grp: e4.

     An interface to the group database, similar to this.

Module *note pwd: 13c.

     An interface to the normal password database, similar to this.


File: python.info,  Node: grp --- The group database,  Next: crypt --- Function to check Unix passwords,  Prev: spwd --- The shadow password database,  Up: Unix Specific Services

5.35.4 ‘grp’ — The group database
---------------------------------

This module provides access to the Unix group database.  It is available
on all Unix versions.

  Group database entries are reported as a tuple-like object, whose
attributes correspond to the members of the ‘group’ structure (Attribute
field below, see ‘<pwd.h>’):

Index       Attribute       Meaning
                            
------------------------------------------------------------------
                            
0           gr_name         the name of the group
                            
                            
1           gr_passwd       the (encrypted) group password;
                            often empty
                            
                            
2           gr_gid          the numerical group ID
                            
                            
3           gr_mem          all the group member’s user names
                            

  The gid is an integer, name and password are strings, and the member
list is a list of strings.  (Note that most users are not explicitly
listed as members of the group they are in according to the password
database.  Check both databases to get complete membership information.
Also note that a ‘gr_name’ that starts with a ‘+’ or ‘-’ is likely to be
a YP/NIS reference and may not be accessible via *note getgrnam(): 2791.
or *note getgrgid(): 2792.)

  It defines the following items:

 -- Function: grp.getgrgid (gid)

     Return the group database entry for the given numeric group ID.
     *note KeyError: 205. is raised if the entry asked for cannot be
     found.

 -- Function: grp.getgrnam (name)

     Return the group database entry for the given group name.  *note
     KeyError: 205. is raised if the entry asked for cannot be found.

 -- Function: grp.getgrall ()

     Return a list of all available group entries, in arbitrary order.

See also
........

Module *note pwd: 13c.

     An interface to the user database, similar to this.

Module *note spwd: 15e.

     An interface to the shadow password database, similar to this.


File: python.info,  Node: crypt --- Function to check Unix passwords,  Next: dl --- Call C functions in shared objects,  Prev: grp --- The group database,  Up: Unix Specific Services

5.35.5 ‘crypt’ — Function to check Unix passwords
-------------------------------------------------

This module implements an interface to the ‘crypt(3)’ routine, which is
a one-way hash function based upon a modified DES algorithm; see the
Unix man page for further details.  Possible uses include allowing
Python scripts to accept typed passwords from the user, or attempting to
crack Unix passwords with a dictionary.

  Notice that the behavior of this module depends on the actual
implementation of the ‘crypt(3)’ routine in the running system.
Therefore, any extensions available on the current implementation will
also be available on this module.

 -- Function: crypt.crypt (word, salt)

     _word_ will usually be a user’s password as typed at a prompt or in
     a graphical interface.  _salt_ is usually a random two-character
     string which will be used to perturb the DES algorithm in one of
     4096 ways.  The characters in _salt_ must be in the set
     ‘[./a-zA-Z0-9]’.  Returns the hashed password as a string, which
     will be composed of characters from the same alphabet as the salt
     (the first two characters represent the salt itself).

     Since a few ‘crypt(3)’ extensions allow different values, with
     different sizes in the _salt_, it is recommended to use the full
     crypted password as salt when checking for a password.

  A simple example illustrating typical use:

     import crypt, getpass, pwd

     def login():
         username = raw_input('Python login:')
         cryptedpasswd = pwd.getpwnam(username)[1]
         if cryptedpasswd:
             if cryptedpasswd == 'x' or cryptedpasswd == '*':
                 raise NotImplementedError(
                     "Sorry, currently no support for shadow passwords")
             cleartext = getpass.getpass()
             return crypt.crypt(cleartext, cryptedpasswd) == cryptedpasswd
         else:
             return 1


File: python.info,  Node: dl --- Call C functions in shared objects,  Next: termios --- POSIX style tty control,  Prev: crypt --- Function to check Unix passwords,  Up: Unix Specific Services

5.35.6 ‘dl’ — Call C functions in shared objects
------------------------------------------------

Deprecated since version 2.6: The *note dl: b4. module has been removed
in Python 3.  Use the *note ctypes: 78. module instead.

  The *note dl: b4. module defines an interface to the ‘dlopen()’
function, which is the most common interface on Unix platforms for
handling dynamically linked libraries.  It allows the program to call
arbitrary functions in such a library.

     Warning: The *note dl: b4. module bypasses the Python type system
     and error handling.  If used incorrectly it may cause segmentation
     faults, crashes or other incorrect behaviour.

     Note: This module will not work unless ‘sizeof(int) == sizeof(long)
     == sizeof(char *)’ If this is not the case, *note SystemError: 950.
     will be raised on import.

  The *note dl: b4. module defines the following function:

 -- Function: dl.open (name[, mode=RTLD_LAZY])

     Open a shared object file, and return a handle.  Mode signifies
     late binding (*note RTLD_LAZY: 279a.) or immediate binding (*note
     RTLD_NOW: 279b.).  Default is *note RTLD_LAZY: 279a.  Note that
     some systems do not support *note RTLD_NOW: 279b.

     Return value is a ‘dlobject’.

  The *note dl: b4. module defines the following constants:

 -- Data: dl.RTLD_LAZY

     Useful as an argument to *note open(): 2799.

 -- Data: dl.RTLD_NOW

     Useful as an argument to *note open(): 2799.  Note that on systems
     which do not support immediate binding, this constant will not
     appear in the module.  For maximum portability, use *note
     hasattr(): 330. to determine if the system supports immediate
     binding.

  The *note dl: b4. module defines the following exception:

 -- Exception: dl.error

     Exception raised when an error has occurred inside the dynamic
     loading and linking routines.

  Example:

     >>> import dl, time
     >>> a=dl.open('/lib/libc.so.6')
     >>> a.call('time'), time.time()
     (929723914, 929723914.498)

  This example was tried on a Debian GNU/Linux system, and is a good
example of the fact that using this module is usually a bad alternative.

* Menu:

* Dl Objects:: 


File: python.info,  Node: Dl Objects,  Up: dl --- Call C functions in shared objects

5.35.6.1 Dl Objects
...................

Dl objects, as returned by *note open(): 2799. above, have the following
methods:

 -- Method: dl.close ()

     Free all resources, except the memory.

 -- Method: dl.sym (name)

     Return the pointer for the function named _name_, as a number, if
     it exists in the referenced shared object, otherwise ‘None’.  This
     is useful in code like:

          >>> if a.sym('time'):
          ...     a.call('time')
          ... else:
          ...     time.time()

     (Note that this function will return a non-zero number, as zero is
     the _NULL_ pointer)

 -- Method: dl.call (name[, arg1[, arg2...]])

     Call the function named _name_ in the referenced shared object.
     The arguments must be either Python integers, which will be passed
     as is, Python strings, to which a pointer will be passed, or
     ‘None’, which will be passed as _NULL_. Note that strings should
     only be passed to functions as ‘const char*’, as Python will not
     like its string mutated.

     There must be at most 10 arguments, and arguments not given will be
     treated as ‘None’.  The function’s return value must be a C ‘long’,
     which is a Python integer.


File: python.info,  Node: termios --- POSIX style tty control,  Next: tty --- Terminal control functions,  Prev: dl --- Call C functions in shared objects,  Up: Unix Specific Services

5.35.7 ‘termios’ — POSIX style tty control
------------------------------------------

This module provides an interface to the POSIX calls for tty I/O
control.  For a complete description of these calls, see the POSIX or
Unix manual pages.  It is only available for those Unix versions that
support POSIX _termios_ style tty I/O control (and then only if
configured at installation time).

  All functions in this module take a file descriptor _fd_ as their
first argument.  This can be an integer file descriptor, such as
returned by ‘sys.stdin.fileno()’, or a file object, such as ‘sys.stdin’
itself.

  This module also defines all the constants needed to work with the
functions provided here; these have the same name as their counterparts
in C. Please refer to your system documentation for more information on
using these terminal control interfaces.

  The module defines the following functions:

 -- Function: termios.tcgetattr (fd)

     Return a list containing the tty attributes for file descriptor
     _fd_, as follows: ‘[iflag, oflag, cflag, lflag, ispeed, ospeed,
     cc]’ where _cc_ is a list of the tty special characters (each a
     string of length 1, except the items with indices ‘VMIN’ and
     ‘VTIME’, which are integers when these fields are defined).  The
     interpretation of the flags and the speeds as well as the indexing
     in the _cc_ array must be done using the symbolic constants defined
     in the *note termios: 174. module.

 -- Function: termios.tcsetattr (fd, when, attributes)

     Set the tty attributes for file descriptor _fd_ from the
     _attributes_, which is a list like the one returned by *note
     tcgetattr(): 27a4.  The _when_ argument determines when the
     attributes are changed: ‘TCSANOW’ to change immediately,
     ‘TCSADRAIN’ to change after transmitting all queued output, or
     ‘TCSAFLUSH’ to change after transmitting all queued output and
     discarding all queued input.

 -- Function: termios.tcsendbreak (fd, duration)

     Send a break on file descriptor _fd_.  A zero _duration_ sends a
     break for 0.25 –0.5 seconds; a nonzero _duration_ has a system
     dependent meaning.

 -- Function: termios.tcdrain (fd)

     Wait until all output written to file descriptor _fd_ has been
     transmitted.

 -- Function: termios.tcflush (fd, queue)

     Discard queued data on file descriptor _fd_.  The _queue_ selector
     specifies which queue: ‘TCIFLUSH’ for the input queue, ‘TCOFLUSH’
     for the output queue, or ‘TCIOFLUSH’ for both queues.

 -- Function: termios.tcflow (fd, action)

     Suspend or resume input or output on file descriptor _fd_.  The
     _action_ argument can be ‘TCOOFF’ to suspend output, ‘TCOON’ to
     restart output, ‘TCIOFF’ to suspend input, or ‘TCION’ to restart
     input.

See also
........

Module *note tty: 183.

     Convenience functions for common terminal control operations.

* Menu:

* Example: Example<15>. 


File: python.info,  Node: Example<15>,  Up: termios --- POSIX style tty control

5.35.7.1 Example
................

Here’s a function that prompts for a password with echoing turned off.
Note the technique using a separate *note tcgetattr(): 27a4. call and a
*note try: 395. ...  *note finally: 396. statement to ensure that the
old tty attributes are restored exactly no matter what happens:

     def getpass(prompt="Password: "):
         import termios, sys
         fd = sys.stdin.fileno()
         old = termios.tcgetattr(fd)
         new = termios.tcgetattr(fd)
         new[3] = new[3] & ~termios.ECHO          # lflags
         try:
             termios.tcsetattr(fd, termios.TCSADRAIN, new)
             passwd = raw_input(prompt)
         finally:
             termios.tcsetattr(fd, termios.TCSADRAIN, old)
         return passwd


File: python.info,  Node: tty --- Terminal control functions,  Next: pty --- Pseudo-terminal utilities,  Prev: termios --- POSIX style tty control,  Up: Unix Specific Services

5.35.8 ‘tty’ — Terminal control functions
-----------------------------------------

The *note tty: 183. module defines functions for putting the tty into
cbreak and raw modes.

  Because it requires the *note termios: 174. module, it will work only
on Unix.

  The *note tty: 183. module defines the following functions:

 -- Function: tty.setraw (fd[, when])

     Change the mode of the file descriptor _fd_ to raw.  If _when_ is
     omitted, it defaults to ‘termios.TCSAFLUSH’, and is passed to *note
     termios.tcsetattr(): 27a5.

 -- Function: tty.setcbreak (fd[, when])

     Change the mode of file descriptor _fd_ to cbreak.  If _when_ is
     omitted, it defaults to ‘termios.TCSAFLUSH’, and is passed to *note
     termios.tcsetattr(): 27a5.

See also
........

Module *note termios: 174.

     Low-level terminal control interface.


File: python.info,  Node: pty --- Pseudo-terminal utilities,  Next: fcntl --- The fcntl and ioctl system calls,  Prev: tty --- Terminal control functions,  Up: Unix Specific Services

5.35.9 ‘pty’ — Pseudo-terminal utilities
----------------------------------------

The *note pty: 13b. module defines operations for handling the
pseudo-terminal concept: starting another process and being able to
write to and read from its controlling terminal programmatically.

  Because pseudo-terminal handling is highly platform dependent, there
is code to do it only for Linux.  (The Linux code is supposed to work on
other platforms, but hasn’t been tested yet.)

  The *note pty: 13b. module defines the following functions:

 -- Function: pty.fork ()

     Fork.  Connect the child’s controlling terminal to a
     pseudo-terminal.  Return value is ‘(pid, fd)’.  Note that the child
     gets _pid_ 0, and the _fd_ is _invalid_.  The parent’s return value
     is the _pid_ of the child, and _fd_ is a file descriptor connected
     to the child’s controlling terminal (and also to the child’s
     standard input and output).

 -- Function: pty.openpty ()

     Open a new pseudo-terminal pair, using *note os.openpty(): 111e. if
     possible, or emulation code for generic Unix systems.  Return a
     pair of file descriptors ‘(master, slave)’, for the master and the
     slave end, respectively.

 -- Function: pty.spawn (argv[, master_read[, stdin_read]])

     Spawn a process, and connect its controlling terminal with the
     current process’s standard io.  This is often used to baffle
     programs which insist on reading from the controlling terminal.

     The functions _master_read_ and _stdin_read_ should be functions
     which read from a file descriptor.  The defaults try to read 1024
     bytes each time they are called.


File: python.info,  Node: fcntl --- The fcntl and ioctl system calls,  Next: pipes --- Interface to shell pipelines,  Prev: pty --- Pseudo-terminal utilities,  Up: Unix Specific Services

5.35.10 ‘fcntl’ — The ‘fcntl’ and ‘ioctl’ system calls
------------------------------------------------------

This module performs file control and I/O control on file descriptors.
It is an interface to the ‘fcntl()’ and ‘ioctl()’ Unix routines.

  All functions in this module take a file descriptor _fd_ as their
first argument.  This can be an integer file descriptor, such as
returned by ‘sys.stdin.fileno()’, or a file object, such as ‘sys.stdin’
itself, which provides a *note fileno(): 11bb. which returns a genuine
file descriptor.

  The module defines the following functions:

 -- Function: fcntl.fcntl (fd, op[, arg])

     Perform the operation _op_ on file descriptor _fd_ (file objects
     providing a *note fileno(): 11bb. method are accepted as well).
     The values used for for _op_ are operating system dependent, and
     are available as constants in the *note fcntl: ca. module, using
     the same names as used in the relevant C header files.  The
     argument _arg_ is optional, and defaults to the integer value ‘0’.
     When present, it can either be an integer value, or a string.  With
     the argument missing or an integer value, the return value of this
     function is the integer return value of the C ‘fcntl()’ call.  When
     the argument is a string it represents a binary structure, e.g.
     created by *note struct.pack(): 25e.  The binary data is copied to
     a buffer whose address is passed to the C ‘fcntl()’ call.  The
     return value after a successful call is the contents of the buffer,
     converted to a string object.  The length of the returned string
     will be the same as the length of the _arg_ argument.  This is
     limited to 1024 bytes.  If the information returned in the buffer
     by the operating system is larger than 1024 bytes, this is most
     likely to result in a segmentation violation or a more subtle data
     corruption.

     If the ‘fcntl()’ fails, an *note IOError: 1fa. is raised.

 -- Function: fcntl.ioctl (fd, op[, arg[, mutate_flag]])

     This function is identical to the *note fcntl(): 174a. function,
     except that the operations are typically defined in the library
     module *note termios: 174. and the argument handling is even more
     complicated.

     The op parameter is limited to values that can fit in 32-bits.
     Additional constants of interest for use as the _op_ argument can
     be found in the *note termios: 174. module, under the same names as
     used in the relevant C header files.

     The parameter _arg_ can be one of an integer, absent (treated
     identically to the integer ‘0’), an object supporting the read-only
     buffer interface (most likely a plain Python string) or an object
     supporting the read-write buffer interface.

     In all but the last case, behaviour is as for the *note fcntl():
     174a. function.

     If a mutable buffer is passed, then the behaviour is determined by
     the value of the _mutate_flag_ parameter.

     If it is false, the buffer’s mutability is ignored and behaviour is
     as for a read-only buffer, except that the 1024 byte limit
     mentioned above is avoided – so long as the buffer you pass is as
     least as long as what the operating system wants to put there,
     things should work.

     If _mutate_flag_ is true, then the buffer is (in effect) passed to
     the underlying *note ioctl(): 421. system call, the latter’s return
     code is passed back to the calling Python, and the buffer’s new
     contents reflect the action of the *note ioctl(): 421.  This is a
     slight simplification, because if the supplied buffer is less than
     1024 bytes long it is first copied into a static buffer 1024 bytes
     long which is then passed to *note ioctl(): 421. and copied back
     into the supplied buffer.

     If _mutate_flag_ is not supplied, then from Python 2.5 it defaults
     to true, which is a change from versions 2.3 and 2.4.  Supply the
     argument explicitly if version portability is a priority.

     An example:

          >>> import array, fcntl, struct, termios, os
          >>> os.getpgrp()
          13341
          >>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, "  "))[0]
          13341
          >>> buf = array.array('h', [0])
          >>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)
          0
          >>> buf
          array('h', [13341])

 -- Function: fcntl.flock (fd, op)

     Perform the lock operation _op_ on file descriptor _fd_ (file
     objects providing a *note fileno(): 11bb. method are accepted as
     well).  See the Unix manual ‘flock(2)’ for details.  (On some
     systems, this function is emulated using ‘fcntl()’.)

 -- Function: fcntl.lockf (fd, operation[, length[, start[, whence]]])

     This is essentially a wrapper around the *note fcntl(): 174a.
     locking calls.  _fd_ is the file descriptor of the file to lock or
     unlock, and _operation_ is one of the following values:

        * ‘LOCK_UN’ – unlock

        * ‘LOCK_SH’ – acquire a shared lock

        * ‘LOCK_EX’ – acquire an exclusive lock

     When _operation_ is ‘LOCK_SH’ or ‘LOCK_EX’, it can also be bitwise
     ORed with ‘LOCK_NB’ to avoid blocking on lock acquisition.  If
     ‘LOCK_NB’ is used and the lock cannot be acquired, an *note
     IOError: 1fa. will be raised and the exception will have an _errno_
     attribute set to ‘EACCES’ or ‘EAGAIN’ (depending on the operating
     system; for portability, check for both values).  On at least some
     systems, ‘LOCK_EX’ can only be used if the file descriptor refers
     to a file opened for writing.

     _length_ is the number of bytes to lock, _start_ is the byte offset
     at which the lock starts, relative to _whence_, and _whence_ is as
     with *note io.IOBase.seek(): 11c0, specifically:

        * ‘0’ – relative to the start of the file (*note os.SEEK_SET:
          3c5.)

        * ‘1’ – relative to the current buffer position (*note
          os.SEEK_CUR: 3c6.)

        * ‘2’ – relative to the end of the file (*note os.SEEK_END:
          3c7.)

     The default for _start_ is 0, which means to start at the beginning
     of the file.  The default for _length_ is 0 which means to lock to
     the end of the file.  The default for _whence_ is also 0.

  Examples (all on a SVR4 compliant system):

     import struct, fcntl, os

     f = open(...)
     rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)

     lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)
     rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)

  Note that in the first example the return value variable _rv_ will
hold an integer value; in the second example it will hold a string
value.  The structure lay-out for the _lockdata_ variable is system
dependent — therefore using the *note flock(): 27b7. call may be better.

See also
........

Module *note os: 128.

     If the locking flags *note O_SHLOCK: 3c9. and *note O_EXLOCK: 3ca.
     are present in the *note os: 128. module (on BSD only), the *note
     os.open(): 5e4. function provides an alternative to the *note
     lockf(): 369. and *note flock(): 27b7. functions.


File: python.info,  Node: pipes --- Interface to shell pipelines,  Next: posixfile --- File-like objects with locking support,  Prev: fcntl --- The fcntl and ioctl system calls,  Up: Unix Specific Services

5.35.11 ‘pipes’ — Interface to shell pipelines
----------------------------------------------

*Source code:* Lib/pipes.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note pipes: 12f. module defines a class to abstract the concept
of a _pipeline_ — a sequence of converters from one file to another.

  Because the module uses */bin/sh* command lines, a POSIX or compatible
shell for *note os.system(): 3fa. and *note os.popen(): 700. is
required.

 -- Class: pipes.Template

     An abstraction of a pipeline.

  Example:

     >>> import pipes
     >>> t = pipes.Template()
     >>> t.append('tr a-z A-Z', '--')
     >>> f = t.open('pipefile', 'w')
     >>> f.write('hello world')
     >>> f.close()
     >>> open('pipefile').read()
     'HELLO WORLD'

 -- Function: pipes.quote (s)

     Deprecated since version 2.7: Prior to Python 2.7, this function
     was not publicly documented.  It is finally exposed publicly in
     Python 3.3 as the ‘quote’ function in the *note shlex: 153. module.

     Return a shell-escaped version of the string _s_.  The returned
     value is a string that can safely be used as one token in a shell
     command line, for cases where you cannot use a list.

     This idiom would be unsafe:

          >>> filename = 'somefile; rm -rf ~'
          >>> command = 'ls -l {}'.format(filename)
          >>> print command  # executed by a shell: boom!
          ls -l somefile; rm -rf ~

     *note quote(): 16ec. lets you plug the security hole:

          >>> command = 'ls -l {}'.format(quote(filename))
          >>> print command
          ls -l 'somefile; rm -rf ~'
          >>> remote_command = 'ssh home {}'.format(quote(command))
          >>> print remote_command
          ssh home 'ls -l '"'"'somefile; rm -rf ~'"'"''

     The quoting is compatible with UNIX shells and with *note
     shlex.split(): 16ee.:

          >>> remote_command = shlex.split(remote_command)
          >>> remote_command
          ['ssh', 'home', "ls -l 'somefile; rm -rf ~'"]
          >>> command = shlex.split(remote_command[-1])
          >>> command
          ['ls', '-l', 'somefile; rm -rf ~']

* Menu:

* Template Objects:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/pipes.py


File: python.info,  Node: Template Objects,  Up: pipes --- Interface to shell pipelines

5.35.11.1 Template Objects
..........................

Template objects following methods:

 -- Method: Template.reset ()

     Restore a pipeline template to its initial state.

 -- Method: Template.clone ()

     Return a new, equivalent, pipeline template.

 -- Method: Template.debug (flag)

     If _flag_ is true, turn debugging on.  Otherwise, turn debugging
     off.  When debugging is on, commands to be executed are printed,
     and the shell is given ‘set -x’ command to be more verbose.

 -- Method: Template.append (cmd, kind)

     Append a new action at the end.  The _cmd_ variable must be a valid
     bourne shell command.  The _kind_ variable consists of two letters.

     The first letter can be either of ‘'-'’ (which means the command
     reads its standard input), ‘'f'’ (which means the commands reads a
     given file on the command line) or ‘'.'’ (which means the commands
     reads no input, and hence must be first.)

     Similarly, the second letter can be either of ‘'-'’ (which means
     the command writes to standard output), ‘'f'’ (which means the
     command writes a file on the command line) or ‘'.'’ (which means
     the command does not write anything, and hence must be last.)

 -- Method: Template.prepend (cmd, kind)

     Add a new action at the beginning.  See *note append(): 27c0. for
     explanations of the arguments.

 -- Method: Template.open (file, mode)

     Return a file-like object, open to _file_, but read from or written
     to by the pipeline.  Note that only one of ‘'r'’, ‘'w'’ may be
     given.

 -- Method: Template.copy (infile, outfile)

     Copy _infile_ to _outfile_ through the pipe.


File: python.info,  Node: posixfile --- File-like objects with locking support,  Next: resource --- Resource usage information,  Prev: pipes --- Interface to shell pipelines,  Up: Unix Specific Services

5.35.12 ‘posixfile’ — File-like objects with locking support
------------------------------------------------------------

Deprecated since version 1.5: The locking operation that this module
provides is done better and more portably by the *note fcntl.lockf():
369. call.

  This module implements some additional functionality over the built-in
file objects.  In particular, it implements file locking, control over
the file flags, and an easy interface to duplicate the file object.  The
module defines a new file object, the posixfile object.  It has all the
standard file object methods and adds the methods described below.  This
module only works for certain flavors of Unix, since it uses *note
fcntl.fcntl(): 174a. for file locking.

  To instantiate a posixfile object, use the *note posixfile.open():
27c6. function.  The resulting object looks and feels roughly the same
as a standard file object.

  The *note posixfile: 137. module defines the following constants:

 -- Data: posixfile.SEEK_SET

     Offset is calculated from the start of the file.

 -- Data: posixfile.SEEK_CUR

     Offset is calculated from the current position in the file.

 -- Data: posixfile.SEEK_END

     Offset is calculated from the end of the file.

  The *note posixfile: 137. module defines the following functions:

 -- Function: posixfile.open (filename[, mode[, bufsize]])

     Create a new posixfile object with the given filename and mode.
     The _filename_, _mode_ and _bufsize_ arguments are interpreted the
     same way as by the built-in *note open(): 2d6. function.

 -- Function: posixfile.fileopen (fileobject)

     Create a new posixfile object with the given standard file object.
     The resulting object has the same filename and mode as the original
     file object.

  The posixfile object defines the following additional methods:

 -- Method: posixfile.lock (fmt[, len[, start[, whence]]])

     Lock the specified section of the file that the file object is
     referring to.  The format is explained below in a table.  The _len_
     argument specifies the length of the section that should be locked.
     The default is ‘0’.  _start_ specifies the starting offset of the
     section, where the default is ‘0’.  The _whence_ argument specifies
     where the offset is relative to.  It accepts one of the constants
     *note SEEK_SET: 27c7, *note SEEK_CUR: 27c8. or *note SEEK_END:
     27c9.  The default is *note SEEK_SET: 27c7.  For more information
     about the arguments refer to the ‘fcntl(2)’ manual page on your
     system.

 -- Method: posixfile.flags ([flags])

     Set the specified flags for the file that the file object is
     referring to.  The new flags are ORed with the old flags, unless
     specified otherwise.  The format is explained below in a table.
     Without the _flags_ argument a string indicating the current flags
     is returned (this is the same as the ‘?’ modifier).  For more
     information about the flags refer to the ‘fcntl(2)’ manual page on
     your system.

 -- Method: posixfile.dup ()

     Duplicate the file object and the underlying file pointer and file
     descriptor.  The resulting object behaves as if it were newly
     opened.

 -- Method: posixfile.dup2 (fd)

     Duplicate the file object and the underlying file pointer and file
     descriptor.  The new object will have the given file descriptor.
     Otherwise the resulting object behaves as if it were newly opened.

 -- Method: posixfile.file ()

     Return the standard file object that the posixfile object is based
     on.  This is sometimes necessary for functions that insist on a
     standard file object.

  All methods raise *note IOError: 1fa. when the request fails.

  Format characters for the ‘lock()’ method have the following meaning:

Format       Meaning
             
-----------------------------------------------------------------
             
‘u’          unlock the specified region
             
             
‘r’          request a read lock for the specified section
             
             
‘w’          request a write lock for the specified section
             

  In addition the following modifiers can be added to the format:

Modifier       Meaning                              Notes
                                                    
----------------------------------------------------------------
                                                    
‘|’            wait until the lock has been
               granted
               
                                                    
‘?’            return the first lock conflicting    (1)
               with the requested lock, or ‘None’   
               if there is no conflict.
               

  Note:

  1. The lock returned is in the format ‘(mode, len, start, whence,
     pid)’ where _mode_ is a character representing the type of lock
     (’r’ or ’w’).  This modifier prevents a request from being granted;
     it is for query purposes only.

  Format characters for the ‘flags()’ method have the following
meanings:

Format       Meaning
             
-----------------------------------------------------------------
             
‘a’          append only flag
             
             
‘c’          close on exec flag
             
             
‘n’          no delay flag (also called non-blocking flag)
             
             
‘s’          synchronization flag
             

  In addition the following modifiers can be added to the format:

Modifier       Meaning                               Notes
                                                     
-----------------------------------------------------------------
                                                     
‘!’            turn the specified flags ’off’,       (1)
               instead of the default ’on’           
               
                                                     
‘=’            replace the flags, instead of the     (1)
               default ’OR’ operation                
               
                                                     
‘?’            return a string in which the          (2)
               characters represent the flags that   
               are set.
               

  Notes:

  1. The ‘!’ and ‘=’ modifiers are mutually exclusive.

  2. This string represents the flags after they may have been altered
     by the same call.

  Examples:

     import posixfile

     file = posixfile.open('testfile', 'w')
     file.lock('w|')
     ...
     file.lock('u')
     file.close()


File: python.info,  Node: resource --- Resource usage information,  Next: nis --- Interface to Sun's NIS Yellow Pages,  Prev: posixfile --- File-like objects with locking support,  Up: Unix Specific Services

5.35.13 ‘resource’ — Resource usage information
-----------------------------------------------

This module provides basic mechanisms for measuring and controlling
system resources utilized by a program.

  Symbolic constants are used to specify particular system resources and
to request usage information about either the current process or its
children.

  A single exception is defined for errors:

 -- Exception: resource.error

     The functions described below may raise this error if the
     underlying system call failures unexpectedly.

* Menu:

* Resource Limits:: 
* Resource Usage:: 


File: python.info,  Node: Resource Limits,  Next: Resource Usage,  Up: resource --- Resource usage information

5.35.13.1 Resource Limits
.........................

Resources usage can be limited using the *note setrlimit(): 27d4.
function described below.  Each resource is controlled by a pair of
limits: a soft limit and a hard limit.  The soft limit is the current
limit, and may be lowered or raised by a process over time.  The soft
limit can never exceed the hard limit.  The hard limit can be lowered to
any value greater than the soft limit, but not raised.  (Only processes
with the effective UID of the super-user can raise a hard limit.)

  The specific resources that can be limited are system dependent.  They
are described in the ‘getrlimit(2)’ man page.  The resources listed
below are supported when the underlying operating system supports them;
resources which cannot be checked or controlled by the operating system
are not defined in this module for those platforms.

 -- Data: resource.RLIM_INFINITY

     Constant used to represent the the limit for an unlimited resource.

 -- Function: resource.getrlimit (resource)

     Returns a tuple ‘(soft, hard)’ with the current soft and hard
     limits of _resource_.  Raises *note ValueError: 236. if an invalid
     resource is specified, or *note error: 27d2. if the underlying
     system call fails unexpectedly.

 -- Function: resource.setrlimit (resource, limits)

     Sets new limits of consumption of _resource_.  The _limits_
     argument must be a tuple ‘(soft, hard)’ of two integers describing
     the new limits.  A value of *note RLIM_INFINITY: 27d5. can be used
     to request a limit that is unlimited.

     Raises *note ValueError: 236. if an invalid resource is specified,
     if the new soft limit exceeds the hard limit, or if a process tries
     to raise its hard limit.  Specifying a limit of *note
     RLIM_INFINITY: 27d5. when the hard or system limit for that
     resource is not unlimited will result in a *note ValueError: 236.
     A process with the effective UID of super-user can request any
     valid limit value, including unlimited, but *note ValueError: 236.
     will still be raised if the requested limit exceeds the system
     imposed limit.

     ‘setrlimit’ may also raise *note error: 27d2. if the underlying
     system call fails.

  These symbols define resources whose consumption can be controlled
using the *note setrlimit(): 27d4. and *note getrlimit(): 27d6.
functions described below.  The values of these symbols are exactly the
constants used by C programs.

  The Unix man page for ‘getrlimit(2)’ lists the available resources.
Note that not all systems use the same symbol or same value to denote
the same resource.  This module does not attempt to mask platform
differences — symbols not defined for a platform will not be available
from this module on that platform.

 -- Data: resource.RLIMIT_CORE

     The maximum size (in bytes) of a core file that the current process
     can create.  This may result in the creation of a partial core file
     if a larger core would be required to contain the entire process
     image.

 -- Data: resource.RLIMIT_CPU

     The maximum amount of processor time (in seconds) that a process
     can use.  If this limit is exceeded, a ‘SIGXCPU’ signal is sent to
     the process.  (See the *note signal: 155. module documentation for
     information about how to catch this signal and do something useful,
     e.g.  flush open files to disk.)

 -- Data: resource.RLIMIT_FSIZE

     The maximum size of a file which the process may create.  This only
     affects the stack of the main thread in a multi-threaded process.

 -- Data: resource.RLIMIT_DATA

     The maximum size (in bytes) of the process’s heap.

 -- Data: resource.RLIMIT_STACK

     The maximum size (in bytes) of the call stack for the current
     process.

 -- Data: resource.RLIMIT_RSS

     The maximum resident set size that should be made available to the
     process.

 -- Data: resource.RLIMIT_NPROC

     The maximum number of processes the current process may create.

 -- Data: resource.RLIMIT_NOFILE

     The maximum number of open file descriptors for the current
     process.

 -- Data: resource.RLIMIT_OFILE

     The BSD name for *note RLIMIT_NOFILE: 27de.

 -- Data: resource.RLIMIT_MEMLOCK

     The maximum address space which may be locked in memory.

 -- Data: resource.RLIMIT_VMEM

     The largest area of mapped memory which the process may occupy.

 -- Data: resource.RLIMIT_AS

     The maximum area (in bytes) of address space which may be taken by
     the process.


File: python.info,  Node: Resource Usage,  Prev: Resource Limits,  Up: resource --- Resource usage information

5.35.13.2 Resource Usage
........................

These functions are used to retrieve resource usage information:

 -- Function: resource.getrusage (who)

     This function returns an object that describes the resources
     consumed by either the current process or its children, as
     specified by the _who_ parameter.  The _who_ parameter should be
     specified using one of the ‘RUSAGE_*’ constants described below.

     The fields of the return value each describe how a particular
     system resource has been used, e.g.  amount of time spent running
     is user mode or number of times the process was swapped out of main
     memory.  Some values are dependent on the clock tick internal, e.g.
     the amount of memory the process is using.

     For backward compatibility, the return value is also accessible as
     a tuple of 16 elements.

     The fields ‘ru_utime’ and ‘ru_stime’ of the return value are
     floating point values representing the amount of time spent
     executing in user mode and the amount of time spent executing in
     system mode, respectively.  The remaining values are integers.
     Consult the ‘getrusage(2)’ man page for detailed information about
     these values.  A brief summary is presented here:

     Index        Field                     Resource
                                            
     ---------------------------------------------------------------------------
                                            
     ‘0’          ‘ru_utime’                time in user mode (float)
                                            
                                            
     ‘1’          ‘ru_stime’                time in system mode (float)
                                            
                                            
     ‘2’          ‘ru_maxrss’               maximum resident set size
                                            
                                            
     ‘3’          ‘ru_ixrss’                shared memory size
                                            
                                            
     ‘4’          ‘ru_idrss’                unshared memory size
                                            
                                            
     ‘5’          ‘ru_isrss’                unshared stack size
                                            
                                            
     ‘6’          ‘ru_minflt’               page faults not requiring I/O
                                            
                                            
     ‘7’          ‘ru_majflt’               page faults requiring I/O
                                            
                                            
     ‘8’          ‘ru_nswap’                number of swap outs
                                            
                                            
     ‘9’          ‘ru_inblock’              block input operations
                                            
                                            
     ‘10’         ‘ru_oublock’              block output operations
                                            
                                            
     ‘11’         ‘ru_msgsnd’               messages sent
                                            
                                            
     ‘12’         ‘ru_msgrcv’               messages received
                                            
                                            
     ‘13’         ‘ru_nsignals’             signals received
                                            
                                            
     ‘14’         ‘ru_nvcsw’                voluntary context switches
                                            
                                            
     ‘15’         ‘ru_nivcsw’               involuntary context switches
                                            

     This function will raise a *note ValueError: 236. if an invalid
     _who_ parameter is specified.  It may also raise *note error: 27d2.
     exception in unusual circumstances.

     Changed in version 2.3: Added access to values as attributes of the
     returned object.

 -- Function: resource.getpagesize ()

     Returns the number of bytes in a system page.  (This need not be
     the same as the hardware page size.)  This function is useful for
     determining the number of bytes of memory a process is using.  The
     third element of the tuple returned by *note getrusage(): 3cb.
     describes memory usage in pages; multiplying by page size produces
     number of bytes.

  The following ‘RUSAGE_*’ symbols are passed to the *note getrusage():
3cb. function to specify which processes information should be provided
for.

 -- Data: resource.RUSAGE_SELF

     *note RUSAGE_SELF: 27e5. should be used to request information
     pertaining only to the process itself.

 -- Data: resource.RUSAGE_CHILDREN

     Pass to *note getrusage(): 3cb. to request resource information for
     child processes of the calling process.

 -- Data: resource.RUSAGE_BOTH

     Pass to *note getrusage(): 3cb. to request resources consumed by
     both the current process and child processes.  May not be available
     on all systems.


File: python.info,  Node: nis --- Interface to Sun's NIS Yellow Pages,  Next: syslog --- Unix syslog library routines,  Prev: resource --- Resource usage information,  Up: Unix Specific Services

5.35.14 ‘nis’ — Interface to Sun’s NIS (Yellow Pages)
-----------------------------------------------------

The *note nis: 123. module gives a thin wrapper around the NIS library,
useful for central administration of several hosts.

  Because NIS exists only on Unix systems, this module is only available
for Unix.

  The *note nis: 123. module defines the following functions:

 -- Function: nis.match (key, mapname[, domain=default_domain])

     Return the match for _key_ in map _mapname_, or raise an error
     (*note nis.error: 27ea.) if there is none.  Both should be strings,
     _key_ is 8-bit clean.  Return value is an arbitrary array of bytes
     (may contain ‘NULL’ and other joys).

     Note that _mapname_ is first checked if it is an alias to another
     name.

     Changed in version 2.5: The _domain_ argument allows to override
     the NIS domain used for the lookup.  If unspecified, lookup is in
     the default NIS domain.

 -- Function: nis.cat (mapname[, domain=default_domain])

     Return a dictionary mapping _key_ to _value_ such that ‘match(key,
     mapname)==value’.  Note that both keys and values of the dictionary
     are arbitrary arrays of bytes.

     Note that _mapname_ is first checked if it is an alias to another
     name.

     Changed in version 2.5: The _domain_ argument allows to override
     the NIS domain used for the lookup.  If unspecified, lookup is in
     the default NIS domain.

 -- Function: nis.maps ([domain=default_domain])

     Return a list of all valid maps.

     Changed in version 2.5: The _domain_ argument allows to override
     the NIS domain used for the lookup.  If unspecified, lookup is in
     the default NIS domain.

 -- Function: nis.get_default_domain ()

     Return the system default NIS domain.

     New in version 2.5.

  The *note nis: 123. module defines the following exception:

 -- Exception: nis.error

     An error raised when a NIS function returns an error code.


File: python.info,  Node: syslog --- Unix syslog library routines,  Next: commands --- Utilities for running commands,  Prev: nis --- Interface to Sun's NIS Yellow Pages,  Up: Unix Specific Services

5.35.15 ‘syslog’ — Unix syslog library routines
-----------------------------------------------

This module provides an interface to the Unix ‘syslog’ library routines.
Refer to the Unix manual pages for a detailed description of the
‘syslog’ facility.

  This module wraps the system ‘syslog’ family of routines.  A pure
Python library that can speak to a syslog server is available in the
*note logging.handlers: 103. module as ‘SysLogHandler’.

  The module defines the following functions:

 -- Function: syslog.syslog (message)

 -- Function: syslog.syslog (priority, message)

     Send the string _message_ to the system logger.  A trailing newline
     is added if necessary.  Each message is tagged with a priority
     composed of a _facility_ and a _level_.  The optional _priority_
     argument, which defaults to ‘LOG_INFO’, determines the message
     priority.  If the facility is not encoded in _priority_ using
     logical-or (‘LOG_INFO | LOG_USER’), the value given in the *note
     openlog(): 27f0. call is used.

     If *note openlog(): 27f0. has not been called prior to the call to
     *note syslog(): 16f, ‘openlog()’ will be called with no arguments.

 -- Function: syslog.openlog ([ident[, logoption[, facility]]])

     Logging options of subsequent *note syslog(): 16f. calls can be set
     by calling *note openlog(): 27f0.  *note syslog(): 16f. will call
     *note openlog(): 27f0. with no arguments if the log is not
     currently open.

     The optional _ident_ keyword argument is a string which is
     prepended to every message, and defaults to ‘sys.argv[0]’ with
     leading path components stripped.  The optional _logoption_ keyword
     argument (default is 0) is a bit field – see below for possible
     values to combine.  The optional _facility_ keyword argument
     (default is ‘LOG_USER’) sets the default facility for messages
     which do not have a facility explicitly encoded.

 -- Function: syslog.closelog ()

     Reset the syslog module values and call the system library
     ‘closelog()’.

     This causes the module to behave as it does when initially
     imported.  For example, *note openlog(): 27f0. will be called on
     the first *note syslog(): 16f. call (if *note openlog(): 27f0.
     hasn’t already been called), and _ident_ and other *note openlog():
     27f0. parameters are reset to defaults.

 -- Function: syslog.setlogmask (maskpri)

     Set the priority mask to _maskpri_ and return the previous mask
     value.  Calls to *note syslog(): 16f. with a priority level not set
     in _maskpri_ are ignored.  The default is to log all priorities.
     The function ‘LOG_MASK(pri)’ calculates the mask for the individual
     priority _pri_.  The function ‘LOG_UPTO(pri)’ calculates the mask
     for all priorities up to and including _pri_.

  The module defines the following constants:

Priority levels (high to low):

     ‘LOG_EMERG’, ‘LOG_ALERT’, ‘LOG_CRIT’, ‘LOG_ERR’, ‘LOG_WARNING’,
     ‘LOG_NOTICE’, ‘LOG_INFO’, ‘LOG_DEBUG’.

Facilities:

     ‘LOG_KERN’, ‘LOG_USER’, ‘LOG_MAIL’, ‘LOG_DAEMON’, ‘LOG_AUTH’,
     ‘LOG_LPR’, ‘LOG_NEWS’, ‘LOG_UUCP’, ‘LOG_CRON’, ‘LOG_SYSLOG’ and
     ‘LOG_LOCAL0’ to ‘LOG_LOCAL7’.

Log options:

     ‘LOG_PID’, ‘LOG_CONS’, ‘LOG_NDELAY’, ‘LOG_NOWAIT’ and ‘LOG_PERROR’
     if defined in ‘<syslog.h>’.

* Menu:

* Examples: Examples<22>. 

Examples

* Simple example:: 


File: python.info,  Node: Examples<22>,  Up: syslog --- Unix syslog library routines

5.35.15.1 Examples
..................

* Menu:

* Simple example:: 


File: python.info,  Node: Simple example,  Up: Examples<22>

5.35.15.2 Simple example
........................

A simple set of examples:

     import syslog

     syslog.syslog('Processing started')
     if error:
         syslog.syslog(syslog.LOG_ERR, 'Processing started')

  An example of setting some log options, these would include the
process ID in logged messages, and write the messages to the destination
facility used for mail logging:

     syslog.openlog(logoption=syslog.LOG_PID, facility=syslog.LOG_MAIL)
     syslog.syslog('E-mail processing initiated...')


File: python.info,  Node: commands --- Utilities for running commands,  Prev: syslog --- Unix syslog library routines,  Up: Unix Specific Services

5.35.16 ‘commands’ — Utilities for running commands
---------------------------------------------------

Deprecated since version 2.6: The *note commands: 68. module has been
removed in Python 3.  Use the *note subprocess: 167. module instead.

  The *note commands: 68. module contains wrapper functions for *note
os.popen(): 700. which take a system command as a string and return any
output generated by the command and, optionally, the exit status.

  The *note subprocess: 167. module provides more powerful facilities
for spawning new processes and retrieving their results.  Using the
*note subprocess: 167. module is preferable to using the *note commands:
68. module.

     Note: In Python 3.x, *note getstatus(): 27f7. and two undocumented
     functions (‘mk2arg()’ and ‘mkarg()’) have been removed.  Also,
     *note getstatusoutput(): 27f8. and *note getoutput(): 27f9. have
     been moved to the *note subprocess: 167. module.

  The *note commands: 68. module defines the following functions:

 -- Function: commands.getstatusoutput (cmd)

     Execute the string _cmd_ in a shell with *note os.popen(): 700. and
     return a 2-tuple ‘(status, output)’.  _cmd_ is actually run as ‘{
     cmd ; } 2>&1’, so that the returned output will contain output or
     error messages.  A trailing newline is stripped from the output.
     The exit status for the command can be interpreted according to the
     rules for the C function ‘wait()’.

 -- Function: commands.getoutput (cmd)

     Like *note getstatusoutput(): 27f8, except the exit status is
     ignored and the return value is a string containing the command’s
     output.

 -- Function: commands.getstatus (file)

     Return the output of ‘ls -ld file’ as a string.  This function uses
     the *note getoutput(): 27f9. function, and properly escapes
     backslashes and dollar signs in the argument.

     Deprecated since version 2.6: This function is nonobvious and
     useless.  The name is also misleading in the presence of *note
     getstatusoutput(): 27f8.

  Example:

     >>> import commands
     >>> commands.getstatusoutput('ls /bin/ls')
     (0, '/bin/ls')
     >>> commands.getstatusoutput('cat /bin/junk')
     (256, 'cat: /bin/junk: No such file or directory')
     >>> commands.getstatusoutput('/bin/junk')
     (256, 'sh: /bin/junk: not found')
     >>> commands.getoutput('ls /bin/ls')
     '/bin/ls'
     >>> commands.getstatus('/bin/ls')
     '-rwxr-xr-x  1 root        13352 Oct 14  1994 /bin/ls'

See also
........

Module *note subprocess: 167.

     Module for spawning and managing subprocesses.


File: python.info,  Node: Mac OS X specific services,  Next: MacPython OSA Modules,  Prev: Unix Specific Services,  Up: The Python Standard Library

5.36 Mac OS X specific services
===============================

This chapter describes modules that are only available on the Mac OS X
platform.

  See the chapters *note MacPython OSA Modules: 27fc. and *note
Undocumented Mac OS modules: 27fd. for more modules, and the HOWTO *note
Using Python on a Macintosh: 679. for a general introduction to
Mac-specific Python programming.

     Note: Most of the OS X APIs that these modules use are deprecated
     or removed in recent versions of OS X. Many are not available when
     Python is executing in 64-bit mode.  These modules have been
     removed in Python 3.  You should avoid using them in Python 2.

* Menu:

* ic: ic --- Access to the Mac OS X Internet Config. Access to the Mac OS X Internet Config
* MacOS: MacOS --- Access to Mac OS interpreter features. Access to Mac OS interpreter features
* macostools: macostools --- Convenience routines for file manipulation. Convenience routines for file manipulation
* findertools: findertools --- The finder's Apple Events interface. The finder’s Apple Events interface
* EasyDialogs: EasyDialogs --- Basic Macintosh dialogs. Basic Macintosh dialogs
* FrameWork: FrameWork --- Interactive application framework. Interactive application framework
* autoGIL: autoGIL --- Global Interpreter Lock handling in event loops. Global Interpreter Lock handling in event loops
* Mac OS Toolbox Modules:: 
* ColorPicker: ColorPicker --- Color selection dialog. Color selection dialog

ic — Access to the Mac OS X Internet Config

* IC Objects:: 

EasyDialogs — Basic Macintosh dialogs

* ProgressBar Objects:: 

FrameWork — Interactive application framework

* Application Objects:: 
* Window Objects: Window Objects<2>. 
* ControlsWindow Object:: 
* ScrolledWindow Object:: 
* DialogWindow Objects:: 

Mac OS Toolbox Modules

* Carbon.AE: Carbon AE --- Apple Events. Apple Events
* Carbon.AH: Carbon AH --- Apple Help. Apple Help
* Carbon.App: Carbon App --- Appearance Manager. Appearance Manager
* Carbon.Appearance: Carbon Appearance --- Appearance Manager constants. Appearance Manager constants
* Carbon.CF: Carbon CF --- Core Foundation. Core Foundation
* Carbon.CG: Carbon CG --- Core Graphics. Core Graphics
* Carbon.CarbonEvt: Carbon CarbonEvt --- Carbon Event Manager. Carbon Event Manager
* Carbon.CarbonEvents: Carbon CarbonEvents --- Carbon Event Manager constants. Carbon Event Manager constants
* Carbon.Cm: Carbon Cm --- Component Manager. Component Manager
* Carbon.Components: Carbon Components --- Component Manager constants. Component Manager constants
* Carbon.ControlAccessor: Carbon ControlAccessor --- Control Manager accssors. Control Manager accssors
* Carbon.Controls: Carbon Controls --- Control Manager constants. Control Manager constants
* Carbon.CoreFounation: Carbon CoreFounation --- CoreFounation constants. CoreFounation constants
* Carbon.CoreGraphics: Carbon CoreGraphics --- CoreGraphics constants. CoreGraphics constants
* Carbon.Ctl: Carbon Ctl --- Control Manager. Control Manager
* Carbon.Dialogs: Carbon Dialogs --- Dialog Manager constants. Dialog Manager constants
* Carbon.Dlg: Carbon Dlg --- Dialog Manager. Dialog Manager
* Carbon.Drag: Carbon Drag --- Drag and Drop Manager. Drag and Drop Manager
* Carbon.Dragconst: Carbon Dragconst --- Drag and Drop Manager constants. Drag and Drop Manager constants
* Carbon.Events: Carbon Events --- Event Manager constants. Event Manager constants
* Carbon.Evt: Carbon Evt --- Event Manager. Event Manager
* Carbon.File: Carbon File --- File Manager. File Manager
* Carbon.Files: Carbon Files --- File Manager constants. File Manager constants
* Carbon.Fm: Carbon Fm --- Font Manager. Font Manager
* Carbon.Folder: Carbon Folder --- Folder Manager. Folder Manager
* Carbon.Folders: Carbon Folders --- Folder Manager constants. Folder Manager constants
* Carbon.Fonts: Carbon Fonts --- Font Manager constants. Font Manager constants
* Carbon.Help: Carbon Help --- Help Manager. Help Manager
* Carbon.IBCarbon: Carbon IBCarbon --- Carbon InterfaceBuilder. Carbon InterfaceBuilder
* Carbon.IBCarbonRuntime: Carbon IBCarbonRuntime --- Carbon InterfaceBuilder constants. Carbon InterfaceBuilder constants
* Carbon.Icn: Carbon Icn --- Carbon Icon Manager. Carbon Icon Manager
* Carbon.Icons: Carbon Icons --- Carbon Icon Manager constants. Carbon Icon Manager constants
* Carbon.Launch: Carbon Launch --- Carbon Launch Services. Carbon Launch Services
* Carbon.LaunchServices: Carbon LaunchServices --- Carbon Launch Services constants. Carbon Launch Services constants
* Carbon.List: Carbon List --- List Manager. List Manager
* Carbon.Lists: Carbon Lists --- List Manager constants. List Manager constants
* Carbon.MacHelp: Carbon MacHelp --- Help Manager constants. Help Manager constants
* Carbon.MediaDescr: Carbon MediaDescr --- Parsers and generators for Quicktime Media descriptors. Parsers and generators for Quicktime Media descriptors
* Carbon.Menu: Carbon Menu --- Menu Manager. Menu Manager
* Carbon.Menus: Carbon Menus --- Menu Manager constants. Menu Manager constants
* Carbon.Mlte: Carbon Mlte --- MultiLingual Text Editor. MultiLingual Text Editor
* Carbon.OSA: Carbon OSA --- Carbon OSA Interface. Carbon OSA Interface
* Carbon.OSAconst: Carbon OSAconst --- Carbon OSA Interface constants. Carbon OSA Interface constants
* Carbon.QDOffscreen: Carbon QDOffscreen --- QuickDraw Offscreen constants. QuickDraw Offscreen constants
* Carbon.Qd: Carbon Qd --- QuickDraw. QuickDraw
* Carbon.Qdoffs: Carbon Qdoffs --- QuickDraw Offscreen. QuickDraw Offscreen
* Carbon.Qt: Carbon Qt --- QuickTime. QuickTime
* Carbon.QuickDraw: Carbon QuickDraw --- QuickDraw constants. QuickDraw constants
* Carbon.QuickTime: Carbon QuickTime --- QuickTime constants. QuickTime constants
* Carbon.Res: Carbon Res --- Resource Manager and Handles. Resource Manager and Handles
* Carbon.Resources: Carbon Resources --- Resource Manager and Handles constants. Resource Manager and Handles constants
* Carbon.Scrap: Carbon Scrap --- Scrap Manager. Scrap Manager
* Carbon.Snd: Carbon Snd --- Sound Manager. Sound Manager
* Carbon.Sound: Carbon Sound --- Sound Manager constants. Sound Manager constants
* Carbon.TE: Carbon TE --- TextEdit. TextEdit
* Carbon.TextEdit: Carbon TextEdit --- TextEdit constants. TextEdit constants
* Carbon.Win: Carbon Win --- Window Manager. Window Manager
* Carbon.Windows: Carbon Windows --- Window Manager constants. Window Manager constants


File: python.info,  Node: ic --- Access to the Mac OS X Internet Config,  Next: MacOS --- Access to Mac OS interpreter features,  Up: Mac OS X specific services

5.36.1 ‘ic’ — Access to the Mac OS X Internet Config
----------------------------------------------------

This module provides access to various internet-related preferences set
through *System Preferences* or the *Finder*.

     Note: This module has been removed in Python 3.x.

  There is a low-level companion module ‘icglue’ which provides the
basic Internet Config access functionality.  This low-level module is
not documented, but the docstrings of the routines document the
parameters and the routine names are the same as for the Pascal or C API
to Internet Config, so the standard IC programmers’ documentation can be
used if this module is needed.

  The *note ic: ef. module defines the *note error: 2800. exception and
symbolic names for all error codes Internet Config can produce; see the
source for details.

 -- Exception: ic.error

     Exception raised on errors in the *note ic: ef. module.

  The *note ic: ef. module defines the following class and function:

 -- Class: ic.IC ([signature[, ic]])

     Create an Internet Config object.  The signature is a 4-character
     creator code of the current application (default ‘'Pyth'’) which
     may influence some of ICs settings.  The optional _ic_ argument is
     a low-level ‘icglue.icinstance’ created beforehand, this may be
     useful if you want to get preferences from a different config file,
     etc.

 -- Function: ic.launchurl (url[, hint])
 -- Function: ic.parseurl (data[, start[, end[, hint]]])
 -- Function: ic.mapfile (file)
 -- Function: ic.maptypecreator (type, creator[, filename])
 -- Function: ic.settypecreator (file)

     These functions are "shortcuts" to the methods of the same name,
     described below.

* Menu:

* IC Objects:: 


File: python.info,  Node: IC Objects,  Up: ic --- Access to the Mac OS X Internet Config

5.36.1.1 IC Objects
...................

*note IC: 2801. objects have a mapping interface, hence to obtain the
mail address you simply get ‘ic['MailAddress']’.  Assignment also works,
and changes the option in the configuration file.

  The module knows about various datatypes, and converts the internal IC
representation to a "logical" Python data structure.  Running the *note
ic: ef. module standalone will run a test program that lists all keys
and values in your IC database, this will have to serve as
documentation.

  If the module does not know how to represent the data it returns an
instance of the ‘ICOpaqueData’ type, with the raw data in its ‘data’
attribute.  Objects of this type are also acceptable values for
assignment.

  Besides the dictionary interface, *note IC: 2801. objects have the
following methods:

 -- Method: IC.launchurl (url[, hint])

     Parse the given URL, launch the correct application and pass it the
     URL. The optional _hint_ can be a scheme name such as ‘'mailto:'’,
     in which case incomplete URLs are completed with this scheme.  If
     _hint_ is not provided, incomplete URLs are invalid.

 -- Method: IC.parseurl (data[, start[, end[, hint]]])

     Find an URL somewhere in _data_ and return start position, end
     position and the URL. The optional _start_ and _end_ can be used to
     limit the search, so for instance if a user clicks in a long text
     field you can pass the whole text field and the click-position in
     _start_ and this routine will return the whole URL in which the
     user clicked.  As above, _hint_ is an optional scheme used to
     complete incomplete URLs.

 -- Method: IC.mapfile (file)

     Return the mapping entry for the given _file_, which can be passed
     as either a filename or an ‘FSSpec()’ result, and which need not
     exist.

     The mapping entry is returned as a tuple ‘(version, type, creator,
     postcreator, flags, extension, appname, postappname, mimetype,
     entryname)’, where _version_ is the entry version number, _type_ is
     the 4-character filetype, _creator_ is the 4-character creator
     type, _postcreator_ is the 4-character creator code of an optional
     application to post-process the file after downloading, _flags_ are
     various bits specifying whether to transfer in binary or ascii and
     such, _extension_ is the filename extension for this file type,
     _appname_ is the printable name of the application to which this
     file belongs, _postappname_ is the name of the postprocessing
     application, _mimetype_ is the MIME type of this file and
     _entryname_ is the name of this entry.

 -- Method: IC.maptypecreator (type, creator[, filename])

     Return the mapping entry for files with given 4-character _type_
     and _creator_ codes.  The optional _filename_ may be specified to
     further help finding the correct entry (if the creator code is
     ‘'????'’, for instance).

     The mapping entry is returned in the same format as for _mapfile_.

 -- Method: IC.settypecreator (file)

     Given an existing _file_, specified either as a filename or as an
     ‘FSSpec()’ result, set its creator and type correctly based on its
     extension.  The finder is told about the change, so the finder icon
     will be updated quickly.

