This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Object Comparison,  Next: Abstract Protocol Support,  Prev: Attribute Management,  Up: Type Methods

6.2.2.6 Object Comparison
.........................

     cmpfunc tp_compare;

  The *note tp_compare: 2a06. handler is called when comparisons are
needed and the object does not implement the specific rich comparison
method which matches the requested comparison.  (It is always used if
defined and the *note PyObject_Compare(): 2a07. or *note PyObject_Cmp():
2a08. functions are used, or if *note cmp(): 4be. is used from Python.)
It is analogous to the *note __cmp__(): 221. method.  This function
should return ‘-1’ if _obj1_ is less than _obj2_, ‘0’ if they are equal,
and ‘1’ if _obj1_ is greater than _obj2_.  (It was previously allowed to
return arbitrary negative or positive integers for less than and greater
than, respectively; as of Python 2.2, this is no longer allowed.  In the
future, other return values may be assigned a different meaning.)

  A *note tp_compare: 2a06. handler may raise an exception.  In this
case it should return a negative value.  The caller has to test for the
exception using *note PyErr_Occurred(): 299c.

  Here is a sample implementation:

     static int
     newdatatype_compare(newdatatypeobject * obj1, newdatatypeobject * obj2)
     {
         long result;

         if (obj1->obj_UnderlyingDatatypePtr->size <
             obj2->obj_UnderlyingDatatypePtr->size) {
             result = -1;
         }
         else if (obj1->obj_UnderlyingDatatypePtr->size >
                  obj2->obj_UnderlyingDatatypePtr->size) {
             result = 1;
         }
         else {
             result = 0;
         }
         return result;
     }


File: python.info,  Node: Abstract Protocol Support,  Next: Weak Reference Support,  Prev: Object Comparison,  Up: Type Methods

6.2.2.7 Abstract Protocol Support
.................................

Python supports a variety of _abstract_ ’protocols;’ the specific
interfaces provided to use these interfaces are documented in *note
Abstract Objects Layer: 2a0a.

  A number of these abstract interfaces were defined early in the
development of the Python implementation.  In particular, the number,
mapping, and sequence protocols have been part of Python since the
beginning.  Other protocols have been added over time.  For protocols
which depend on several handler routines from the type implementation,
the older protocols have been defined as optional blocks of handlers
referenced by the type object.  For newer protocols there are additional
slots in the main type object, with a flag bit being set to indicate
that the slots are present and should be checked by the interpreter.
(The flag bit does not indicate that the slot values are non-_NULL_. The
flag may be set to indicate the presence of a slot, but a slot may still
be unfilled.)

     PyNumberMethods   *tp_as_number;
     PySequenceMethods *tp_as_sequence;
     PyMappingMethods  *tp_as_mapping;

  If you wish your object to be able to act like a number, a sequence,
or a mapping object, then you place the address of a structure that
implements the C type *note PyNumberMethods: 3ab, *note
PySequenceMethods: 2a0b, or *note PyMappingMethods: 2a0c, respectively.
It is up to you to fill in this structure with appropriate values.  You
can find examples of the use of each of these in the ‘Objects’ directory
of the Python source distribution.

     hashfunc tp_hash;

  This function, if you choose to provide it, should return a hash
number for an instance of your data type.  Here is a moderately
pointless example:

     static long
     newdatatype_hash(newdatatypeobject *obj)
     {
         long result;
         result = obj->obj_UnderlyingDatatypePtr->size;
         result = result * 3;
         return result;
     }

     ternaryfunc tp_call;

  This function is called when an instance of your data type is
"called", for example, if ‘obj1’ is an instance of your data type and
the Python script contains ‘obj1('hello')’, the *note tp_call: 2a0d.
handler is invoked.

  This function takes three arguments:

  1. _arg1_ is the instance of the data type which is the subject of the
     call.  If the call is ‘obj1('hello')’, then _arg1_ is ‘obj1’.

  2. _arg2_ is a tuple containing the arguments to the call.  You can
     use *note PyArg_ParseTuple(): 31b. to extract the arguments.

  3. _arg3_ is a dictionary of keyword arguments that were passed.  If
     this is non-_NULL_ and you support keyword arguments, use *note
     PyArg_ParseTupleAndKeywords(): 41c. to extract the arguments.  If
     you do not want to support keyword arguments and this is
     non-_NULL_, raise a *note TypeError: 218. with a message saying
     that keyword arguments are not supported.

  Here is a desultory example of the implementation of the call
function.

     /* Implement the call function.
      *    obj1 is the instance receiving the call.
      *    obj2 is a tuple containing the arguments to the call, in this
      *         case 3 strings.
      */
     static PyObject *
     newdatatype_call(newdatatypeobject *obj, PyObject *args, PyObject *other)
     {
         PyObject *result;
         char *arg1;
         char *arg2;
         char *arg3;

         if (!PyArg_ParseTuple(args, "sss:call", &arg1, &arg2, &arg3)) {
             return NULL;
         }
         result = PyString_FromFormat(
             "Returning -- value: [\%d] arg1: [\%s] arg2: [\%s] arg3: [\%s]\n",
             obj->obj_UnderlyingDatatypePtr->size,
             arg1, arg2, arg3);
         printf("\%s", PyString_AS_STRING(result));
         return result;
     }

  XXX some fields need to be added here...

     /* Added in release 2.2 */
     /* Iterators */
     getiterfunc tp_iter;
     iternextfunc tp_iternext;

  These functions provide support for the iterator protocol.  Any object
which wishes to support iteration over its contents (which may be
generated during iteration) must implement the ‘tp_iter’ handler.
Objects which are returned by a ‘tp_iter’ handler must implement both
the ‘tp_iter’ and ‘tp_iternext’ handlers.  Both handlers take exactly
one parameter, the instance for which they are being called, and return
a new reference.  In the case of an error, they should set an exception
and return _NULL_.

  For an object which represents an iterable collection, the ‘tp_iter’
handler must return an iterator object.  The iterator object is
responsible for maintaining the state of the iteration.  For collections
which can support multiple iterators which do not interfere with each
other (as lists and tuples do), a new iterator should be created and
returned.  Objects which can only be iterated over once (usually due to
side effects of iteration) should implement this handler by returning a
new reference to themselves, and should also implement the ‘tp_iternext’
handler.  File objects are an example of such an iterator.

  Iterator objects should implement both handlers.  The ‘tp_iter’
handler should return a new reference to the iterator (this is the same
as the ‘tp_iter’ handler for objects which can only be iterated over
destructively).  The ‘tp_iternext’ handler should return a new reference
to the next object in the iteration if there is one.  If the iteration
has reached the end, it may return _NULL_ without setting an exception
or it may set *note StopIteration: 333.; avoiding the exception can
yield slightly better performance.  If an actual error occurs, it should
set an exception and return _NULL_.


File: python.info,  Node: Weak Reference Support,  Next: More Suggestions,  Prev: Abstract Protocol Support,  Up: Type Methods

6.2.2.8 Weak Reference Support
..............................

One of the goals of Python’s weak-reference implementation is to allow
any type to participate in the weak reference mechanism without
incurring the overhead on those objects which do not benefit by weak
referencing (such as numbers).

  For an object to be weakly referencable, the extension must include a
*note PyObject*: 3a6. field in the instance structure for the use of the
weak reference mechanism; it must be initialized to _NULL_ by the
object’s constructor.  It must also set the *note tp_weaklistoffset:
2a0f. field of the corresponding type object to the offset of the field.
For example, the instance type is defined with the following structure:

     typedef struct {
         PyObject_HEAD
         PyClassObject *in_class;       /* The class object */
         PyObject      *in_dict;        /* A dictionary */
         PyObject      *in_weakreflist; /* List of weak references */
     } PyInstanceObject;

  The statically-declared type object for instances is defined this way:

     PyTypeObject PyInstance_Type = {
         PyObject_HEAD_INIT(&PyType_Type)
         0,
         "module.instance",

         /* Lots of stuff omitted for brevity... */

         Py_TPFLAGS_DEFAULT,                         /* tp_flags */
         0,                                          /* tp_doc */
         0,                                          /* tp_traverse */
         0,                                          /* tp_clear */
         0,                                          /* tp_richcompare */
         offsetof(PyInstanceObject, in_weakreflist), /* tp_weaklistoffset */
     };

  The type constructor is responsible for initializing the weak
reference list to _NULL_:

     static PyObject *
     instance_new() {
         /* Other initialization stuff omitted for brevity */

         self->in_weakreflist = NULL;

         return (PyObject *) self;
     }

  The only further addition is that the destructor needs to call the
weak reference manager to clear any weak references.  This is only
required if the weak reference list is non-_NULL_:

     static void
     instance_dealloc(PyInstanceObject *inst)
     {
         /* Allocate temporaries if needed, but do not begin
            destruction just yet.
          */

         if (inst->in_weakreflist != NULL)
             PyObject_ClearWeakRefs((PyObject *) inst);

         /* Proceed with object destruction normally. */
     }


File: python.info,  Node: More Suggestions,  Prev: Weak Reference Support,  Up: Type Methods

6.2.2.9 More Suggestions
........................

Remember that you can omit most of these functions, in which case you
provide ‘0’ as a value.  There are type definitions for each of the
functions you must provide.  They are in ‘object.h’ in the Python
include directory that comes with the source distribution of Python.

  In order to learn how to implement any specific method for your new
data type, do the following: Download and unpack the Python source
distribution.  Go the ‘Objects’ directory, then search the C source
files for ‘tp_’ plus the function you want (for example, ‘tp_print’ or
‘tp_compare’).  You will find examples of the function you want to
implement.

  When you need to verify that an object is an instance of the type you
are implementing, use the *note PyObject_TypeCheck(): 2a11. function.  A
sample of its use might be something like the following:

     if (! PyObject_TypeCheck(some_object, &MyType)) {
         PyErr_SetString(PyExc_TypeError, "arg #1 not a mything");
         return NULL;
     }


File: python.info,  Node: Building C and C++ Extensions with distutils,  Next: Building C and C++ Extensions on Windows,  Prev: Defining New Types,  Up: Extending and Embedding the Python Interpreter

6.3 Building C and C++ Extensions with distutils
================================================

Starting in Python 1.4, Python provides, on Unix, a special make file
for building make files for building dynamically-linked extensions and
custom interpreters.  Starting with Python 2.0, this mechanism (known as
related to Makefile.pre.in, and Setup files) is no longer supported.
Building custom interpreters was rarely used, and extension modules can
be built using distutils.

  Building an extension module using distutils requires that distutils
is installed on the build machine, which is included in Python 2.x and
available separately for Python 1.5.  Since distutils also supports
creation of binary packages, users don’t necessarily need a compiler and
distutils to install the extension.

  A distutils package contains a driver script, ‘setup.py’.  This is a
plain Python file, which, in the most simple case, could look like this:

     from distutils.core import setup, Extension

     module1 = Extension('demo',
                         sources = ['demo.c'])

     setup (name = 'PackageName',
            version = '1.0',
            description = 'This is a demo package',
            ext_modules = [module1])

  With this ‘setup.py’, and a file ‘demo.c’, running

     python setup.py build

  will compile ‘demo.c’, and produce an extension module named ‘demo’ in
the ‘build’ directory.  Depending on the system, the module file will
end up in a subdirectory ‘build/lib.system’, and may have a name like
‘demo.so’ or ‘demo.pyd’.

  In the ‘setup.py’, all execution is performed by calling the ‘setup’
function.  This takes a variable number of keyword arguments, of which
the example above uses only a subset.  Specifically, the example
specifies meta-information to build packages, and it specifies the
contents of the package.  Normally, a package will contain of addition
modules, like Python source modules, documentation, subpackages, etc.
Please refer to the distutils documentation in *note Distributing Python
Modules: 2479. to learn more about the features of distutils; this
section explains building extension modules only.

  It is common to pre-compute arguments to ‘setup()’, to better
structure the driver script.  In the example above, the‘ext_modules’
argument to ‘setup()’ is a list of extension modules, each of which is
an instance of the ‘Extension’.  In the example, the instance defines an
extension named ‘demo’ which is build by compiling a single source file,
‘demo.c’.

  In many cases, building an extension is more complex, since additional
preprocessor defines and libraries may be needed.  This is demonstrated
in the example below.

     from distutils.core import setup, Extension

     module1 = Extension('demo',
                         define_macros = [('MAJOR_VERSION', '1'),
                                          ('MINOR_VERSION', '0')],
                         include_dirs = ['/usr/local/include'],
                         libraries = ['tcl83'],
                         library_dirs = ['/usr/local/lib'],
                         sources = ['demo.c'])

     setup (name = 'PackageName',
            version = '1.0',
            description = 'This is a demo package',
            author = 'Martin v. Loewis',
            author_email = 'martin@v.loewis.de',
            url = 'http://docs.python.org/extending/building',
            long_description = '''
     This is really just a demo package.
     ''',
            ext_modules = [module1])

  In this example, ‘setup()’ is called with additional meta-information,
which is recommended when distribution packages have to be built.  For
the extension itself, it specifies preprocessor defines, include
directories, library directories, and libraries.  Depending on the
compiler, distutils passes this information in different ways to the
compiler.  For example, on Unix, this may result in the compilation
commands

     gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -fPIC -DMAJOR_VERSION=1 -DMINOR_VERSION=0 -I/usr/local/include -I/usr/local/include/python2.2 -c demo.c -o build/temp.linux-i686-2.2/demo.o

     gcc -shared build/temp.linux-i686-2.2/demo.o -L/usr/local/lib -ltcl83 -o build/lib.linux-i686-2.2/demo.so

  These lines are for demonstration purposes only; distutils users
should trust that distutils gets the invocations right.

* Menu:

* Distributing your extension modules:: 


File: python.info,  Node: Distributing your extension modules,  Up: Building C and C++ Extensions with distutils

6.3.1 Distributing your extension modules
-----------------------------------------

When an extension has been successfully build, there are three ways to
use it.

  End-users will typically want to install the module, they do so by
running

     python setup.py install

  Module maintainers should produce source packages; to do so, they run

     python setup.py sdist

  In some cases, additional files need to be included in a source
distribution; this is done through a ‘MANIFEST.in’ file; see the
distutils documentation for details.

  If the source distribution has been build successfully, maintainers
can also create binary distributions.  Depending on the platform, one of
the following commands can be used to do so.

     python setup.py bdist_wininst
     python setup.py bdist_rpm
     python setup.py bdist_dumb


File: python.info,  Node: Building C and C++ Extensions on Windows,  Next: Embedding Python in Another Application,  Prev: Building C and C++ Extensions with distutils,  Up: Extending and Embedding the Python Interpreter

6.4 Building C and C++ Extensions on Windows
============================================

This chapter briefly explains how to create a Windows extension module
for Python using Microsoft Visual C++, and follows with more detailed
background information on how it works.  The explanatory material is
useful for both the Windows programmer learning to build Python
extensions and the Unix programmer interested in producing software
which can be successfully built on both Unix and Windows.

  Module authors are encouraged to use the distutils approach for
building extension modules, instead of the one described in this
section.  You will still need the C compiler that was used to build
Python; typically Microsoft Visual C++.

     Note: This chapter mentions a number of filenames that include an
     encoded Python version number.  These filenames are represented
     with the version number shown as ‘XY’; in practice, ‘'X'’ will be
     the major version number and ‘'Y'’ will be the minor version number
     of the Python release you’re working with.  For example, if you are
     using Python 2.2.1, ‘XY’ will actually be ‘22’.

* Menu:

* A Cookbook Approach:: 
* Differences Between Unix and Windows:: 
* Using DLLs in Practice:: 


File: python.info,  Node: A Cookbook Approach,  Next: Differences Between Unix and Windows,  Up: Building C and C++ Extensions on Windows

6.4.1 A Cookbook Approach
-------------------------

There are two approaches to building extension modules on Windows, just
as there are on Unix: use the *note distutils: 85. package to control
the build process, or do things manually.  The distutils approach works
well for most extensions; documentation on using *note distutils: 85. to
build and package extension modules is available in *note Distributing
Python Modules: 2479.  This section describes the manual approach to
building Python extensions written in C or C++.

  To build extensions using these instructions, you need to have a copy
of the Python sources of the same version as your installed Python.  You
will need Microsoft Visual C++ "Developer Studio"; project files are
supplied for VC++ version 7.1, but you can use older versions of VC++.
Notice that you should use the same version of VC++that was used to
build Python itself.  The example files described here are distributed
with the Python sources in the ‘PC\example_nt\’ directory.

  1. *Copy the example files* — The ‘example_nt’ directory is a
     subdirectory of the ‘PC’ directory, in order to keep all the
     PC-specific files under the same directory in the source
     distribution.  However, the ‘example_nt’ directory can’t actually
     be used from this location.  You first need to copy or move it up
     one level, so that ‘example_nt’ is a sibling of the ‘PC’ and
     ‘Include’ directories.  Do all your work from within this new
     location.

  2. *Open the project* — From VC++, use the _File ‣ Open Solution_
     dialog (not _File ‣ Open_!).  Navigate to and select the file
     ‘example.sln’, in the _copy_ of the ‘example_nt’ directory you made
     above.  Click Open.

  3. *Build the example DLL* — In order to check that everything is set
     up right, try building:

  4. Select a configuration.  This step is optional.  Choose _Build ‣
     Configuration Manager ‣ Active Solution Configuration_ and select
     either _Release_ or _Debug_.  If you skip this step, VC++ will use
     the Debug configuration by default.

  5. Build the DLL. Choose _Build ‣ Build Solution_.  This creates all
     intermediate and result files in a subdirectory called either
     ‘Debug’ or ‘Release’, depending on which configuration you selected
     in the preceding step.

  6. *Testing the debug-mode DLL* — Once the Debug build has succeeded,
     bring up a DOS box, and change to the ‘example_nt\Debug’ directory.
     You should now be able to repeat the following session (‘C>’ is the
     DOS prompt, ‘>>>’ is the Python prompt; note that build information
     and various debug output from Python may not match this screen dump
     exactly):

          C>..\..\PCbuild\python_d
          Adding parser accelerators ...
          Done.
          Python 2.2 (#28, Dec 19 2001, 23:26:37) [MSC 32 bit (Intel)] on win32
          Type "copyright", "credits" or "license" for more information.
          >>> import example
          [4897 refs]
          >>> example.foo()
          Hello, world
          [4903 refs]
          >>>

     Congratulations!  You’ve successfully built your first Python
     extension module.

  7. *Creating your own project* — Choose a name and create a directory
     for it.  Copy your C sources into it.  Note that the module source
     file name does not necessarily have to match the module name, but
     the name of the initialization function should match the module
     name — you can only import a module ‘spam’ if its initialization
     function is called ‘initspam()’, and it should call *note
     Py_InitModule(): 29a8. with the string ‘"spam"’ as its first
     argument (use the minimal ‘example.c’ in this directory as a
     guide).  By convention, it lives in a file called ‘spam.c’ or
     ‘spammodule.c’.  The output file should be called ‘spam.pyd’ (in
     Release mode) or ‘spam_d.pyd’ (in Debug mode).  The extension
     ‘.pyd’ was chosen to avoid confusion with a system library
     ‘spam.dll’ to which your module could be a Python interface.

     Changed in version 2.5: Previously, file names like ‘spam.dll’ (in
     release mode) or ‘spam_d.dll’ (in debug mode) were also recognized.

     Now your options are:

  8. Copy ‘example.sln’ and ‘example.vcproj’, rename them to ‘spam.*’,
     and edit them by hand, or

  9. Create a brand new project; instructions are below.

     In either case, copy ‘example_nt\example.def’ to ‘spam\spam.def’,
     and edit the new ‘spam.def’ so its second line contains the string
     ’‘initspam’’.  If you created a new project yourself, add the file
     ‘spam.def’ to the project now.  (This is an annoying little file
     with only two lines.  An alternative approach is to forget about
     the ‘.def’ file, and add the option ‘/export:initspam’ somewhere to
     the Link settings, by manually editing the setting in Project
     Properties dialog).

  10. *Creating a brand new project* — Use the _File ‣ New ‣ Project_
     dialog to create a new Project Workspace.  Select _Visual C++
     Projects/Win32/ Win32 Project_, enter the name (‘spam’), and make
     sure the Location is set to parent of the ‘spam’ directory you have
     created (which should be a direct subdirectory of the Python build
     tree, a sibling of ‘Include’ and ‘PC’).  Select Win32 as the
     platform (in my version, this is the only choice).  Make sure the
     Create new workspace radio button is selected.  Click OK.

     You should now create the file ‘spam.def’ as instructed in the
     previous section.  Add the source files to the project, using
     _Project ‣ Add Existing Item_.  Set the pattern to ‘*.*’ and select
     both ‘spam.c’ and ‘spam.def’ and click OK. (Inserting them one by
     one is fine too.)

     Now open the _Project ‣ spam properties_ dialog.  You only need to
     change a few settings.  Make sure _All Configurations_ is selected
     from the _Settings for:_ dropdown list.  Select the C/C++ tab.
     Choose the General category in the popup menu at the top.  Type the
     following text in the entry box labeled _Additional Include
     Directories_:

          ..\Include,..\PC

     Then, choose the General category in the Linker tab, and enter

          ..\PCbuild

     in the text box labelled _Additional library Directories_.

     Now you need to add some mode-specific settings:

     Select _Release_ in the _Configuration_ dropdown list.  Choose the
     _Link_ tab, choose the _Input_ category, and append ‘pythonXY.lib’
     to the list in the _Additional Dependencies_ box.

     Select _Debug_ in the _Configuration_ dropdown list, and append
     ‘pythonXY_d.lib’ to the list in the _Additional Dependencies_ box.
     Then click the C/C++ tab, select _Code Generation_, and select
     _Multi-threaded Debug DLL_ from the _Runtime library_ dropdown
     list.

     Select _Release_ again from the _Configuration_ dropdown list.
     Select _Multi-threaded DLL_ from the _Runtime library_ dropdown
     list.

  If your module creates a new type, you may have trouble with this
line:

     PyObject_HEAD_INIT(&PyType_Type)

  Static type object initializers in extension modules may cause
compiles to fail with an error message like "initializer not a
constant".  This shows up when building DLL under MSVC. Change it to:

     PyObject_HEAD_INIT(NULL)

  and add the following to the module initialization function:

     if (PyType_Ready(&MyObject_Type) < 0)
          return NULL;


File: python.info,  Node: Differences Between Unix and Windows,  Next: Using DLLs in Practice,  Prev: A Cookbook Approach,  Up: Building C and C++ Extensions on Windows

6.4.2 Differences Between Unix and Windows
------------------------------------------

Unix and Windows use completely different paradigms for run-time loading
of code.  Before you try to build a module that can be dynamically
loaded, be aware of how your system works.

  In Unix, a shared object (‘.so’) file contains code to be used by the
program, and also the names of functions and data that it expects to
find in the program.  When the file is joined to the program, all
references to those functions and data in the file’s code are changed to
point to the actual locations in the program where the functions and
data are placed in memory.  This is basically a link operation.

  In Windows, a dynamic-link library (‘.dll’) file has no dangling
references.  Instead, an access to functions or data goes through a
lookup table.  So the DLL code does not have to be fixed up at runtime
to refer to the program’s memory; instead, the code already uses the
DLL’s lookup table, and the lookup table is modified at runtime to point
to the functions and data.

  In Unix, there is only one type of library file (‘.a’) which contains
code from several object files (‘.o’).  During the link step to create a
shared object file (‘.so’), the linker may find that it doesn’t know
where an identifier is defined.  The linker will look for it in the
object files in the libraries; if it finds it, it will include all the
code from that object file.

  In Windows, there are two types of library, a static library and an
import library (both called ‘.lib’).  A static library is like a Unix
‘.a’ file; it contains code to be included as necessary.  An import
library is basically used only to reassure the linker that a certain
identifier is legal, and will be present in the program when the DLL is
loaded.  So the linker uses the information from the import library to
build the lookup table for using identifiers that are not included in
the DLL. When an application or a DLL is linked, an import library may
be generated, which will need to be used for all future DLLs that depend
on the symbols in the application or DLL.

  Suppose you are building two dynamic-load modules, B and C, which
should share another block of code A. On Unix, you would _not_ pass
‘A.a’ to the linker for ‘B.so’ and ‘C.so’; that would cause it to be
included twice, so that B and C would each have their own copy.  In
Windows, building ‘A.dll’ will also build ‘A.lib’.  You _do_ pass
‘A.lib’ to the linker for B and C. ‘A.lib’ does not contain code; it
just contains information which will be used at runtime to access A’s
code.

  In Windows, using an import library is sort of like using ‘import
spam’; it gives you access to spam’s names, but does not create a
separate copy.  On Unix, linking with a library is more like ‘from spam
import *’; it does create a separate copy.


File: python.info,  Node: Using DLLs in Practice,  Prev: Differences Between Unix and Windows,  Up: Building C and C++ Extensions on Windows

6.4.3 Using DLLs in Practice
----------------------------

Windows Python is built in Microsoft Visual C++; using other compilers
may or may not work (though Borland seems to).  The rest of this section
is MSVC++ specific.

  When creating DLLs in Windows, you must pass ‘pythonXY.lib’ to the
linker.  To build two DLLs, spam and ni (which uses C functions found in
spam), you could use these commands:

     cl /LD /I/python/include spam.c ../libs/pythonXY.lib
     cl /LD /I/python/include ni.c spam.lib ../libs/pythonXY.lib

  The first command created three files: ‘spam.obj’, ‘spam.dll’ and
‘spam.lib’.  ‘Spam.dll’ does not contain any Python functions (such as
*note PyArg_ParseTuple(): 31b.), but it does know how to find the Python
code thanks to ‘pythonXY.lib’.

  The second command created ‘ni.dll’ (and ‘.obj’ and ‘.lib’), which
knows how to find the necessary functions from spam, and also from the
Python executable.

  Not every identifier is exported to the lookup table.  If you want any
other modules (including Python) to be able to see your identifiers, you
have to say ‘_declspec(dllexport)’, as in ‘void _declspec(dllexport)
initspam(void)’ or ‘PyObject _declspec(dllexport) *NiGetSpamData(void)’.

  Developer Studio will throw in a lot of import libraries that you do
not really need, adding about 100K to your executable.  To get rid of
them, use the Project Settings dialog, Link tab, to specify _ignore
default libraries_.  Add the correct ‘msvcrtxx.lib’ to the list of
libraries.


File: python.info,  Node: Embedding Python in Another Application,  Prev: Building C and C++ Extensions on Windows,  Up: Extending and Embedding the Python Interpreter

6.5 Embedding Python in Another Application
===========================================

The previous chapters discussed how to extend Python, that is, how to
extend the functionality of Python by attaching a library of C functions
to it.  It is also possible to do it the other way around: enrich your
C/C++ application by embedding Python in it.  Embedding provides your
application with the ability to implement some of the functionality of
your application in Python rather than C or C++.  This can be used for
many purposes; one example would be to allow users to tailor the
application to their needs by writing some scripts in Python.  You can
also use it yourself if some of the functionality can be written in
Python more easily.

  Embedding Python is similar to extending it, but not quite.  The
difference is that when you extend Python, the main program of the
application is still the Python interpreter, while if you embed Python,
the main program may have nothing to do with Python — instead, some
parts of the application occasionally call the Python interpreter to run
some Python code.

  So if you are embedding Python, you are providing your own main
program.  One of the things this main program has to do is initialize
the Python interpreter.  At the very least, you have to call the
function *note Py_Initialize(): 29a9.  There are optional calls to pass
command line arguments to Python.  Then later you can call the
interpreter from any part of the application.

  There are several different ways to call the interpreter: you can pass
a string containing Python statements to *note PyRun_SimpleString():
2a21, or you can pass a stdio file pointer and a file name (for
identification in error messages only) to *note PyRun_SimpleFile():
2a22.  You can also call the lower-level operations described in the
previous chapters to construct and use Python objects.

  A simple demo of embedding Python can be found in the directory
‘Demo/embed/’ of the source distribution.

See also
........

*note Python/C API Reference Manual: 4fb.

     The details of Python’s C interface are given in this manual.  A
     great deal of necessary information can be found here.

* Menu:

* Very High Level Embedding:: 
* Beyond Very High Level Embedding; An overview: Beyond Very High Level Embedding An overview. 
* Pure Embedding:: 
* Extending Embedded Python:: 
* Embedding Python in C++:: 
* Compiling and Linking under Unix-like systems:: 


File: python.info,  Node: Very High Level Embedding,  Next: Beyond Very High Level Embedding An overview,  Up: Embedding Python in Another Application

6.5.1 Very High Level Embedding
-------------------------------

The simplest form of embedding Python is the use of the very high level
interface.  This interface is intended to execute a Python script
without needing to interact with the application directly.  This can for
example be used to perform some operation on a file.

     #include <Python.h>

     int
     main(int argc, char *argv[])
     {
       Py_SetProgramName(argv[0]);  /* optional but recommended */
       Py_Initialize();
       PyRun_SimpleString("from time import time,ctime\n"
                          "print 'Today is',ctime(time())\n");
       Py_Finalize();
       return 0;
     }

  The *note Py_SetProgramName(): 2a25. function should be called before
*note Py_Initialize(): 29a9. to inform the interpreter about paths to
Python run-time libraries.  Next, the Python interpreter is initialized
with *note Py_Initialize(): 29a9, followed by the execution of a
hard-coded Python script that prints the date and time.  Afterwards, the
*note Py_Finalize(): 2c3. call shuts the interpreter down, followed by
the end of the program.  In a real program, you may want to get the
Python script from another source, perhaps a text-editor routine, a
file, or a database.  Getting the Python code from a file can better be
done by using the *note PyRun_SimpleFile(): 2a22. function, which saves
you the trouble of allocating memory space and loading the file
contents.


File: python.info,  Node: Beyond Very High Level Embedding An overview,  Next: Pure Embedding,  Prev: Very High Level Embedding,  Up: Embedding Python in Another Application

6.5.2 Beyond Very High Level Embedding: An overview
---------------------------------------------------

The high level interface gives you the ability to execute arbitrary
pieces of Python code from your application, but exchanging data values
is quite cumbersome to say the least.  If you want that, you should use
lower level calls.  At the cost of having to write more C code, you can
achieve almost anything.

  It should be noted that extending Python and embedding Python is quite
the same activity, despite the different intent.  Most topics discussed
in the previous chapters are still valid.  To show this, consider what
the extension code from Python to C really does:

  1. Convert data values from Python to C,

  2. Perform a function call to a C routine using the converted values,
     and

  3. Convert the data values from the call from C to Python.

  When embedding Python, the interface code does:

  1. Convert data values from C to Python,

  2. Perform a function call to a Python interface routine using the
     converted values, and

  3. Convert the data values from the call from Python to C.

  As you can see, the data conversion steps are simply swapped to
accommodate the different direction of the cross-language transfer.  The
only difference is the routine that you call between both data
conversions.  When extending, you call a C routine, when embedding, you
call a Python routine.

  This chapter will not discuss how to convert data from Python to C and
vice versa.  Also, proper use of references and dealing with errors is
assumed to be understood.  Since these aspects do not differ from
extending the interpreter, you can refer to earlier chapters for the
required information.


File: python.info,  Node: Pure Embedding,  Next: Extending Embedded Python,  Prev: Beyond Very High Level Embedding An overview,  Up: Embedding Python in Another Application

6.5.3 Pure Embedding
--------------------

The first program aims to execute a function in a Python script.  Like
in the section about the very high level interface, the Python
interpreter does not directly interact with the application (but that
will change in the next section).

  The code to run a function defined in a Python script is:

     #include <Python.h>

     int
     main(int argc, char *argv[])
     {
         PyObject *pName, *pModule, *pDict, *pFunc;
         PyObject *pArgs, *pValue;
         int i;

         if (argc < 3) {
             fprintf(stderr,"Usage: call pythonfile funcname [args]\n");
             return 1;
         }

         Py_Initialize();
         pName = PyString_FromString(argv[1]);
         /* Error checking of pName left out */

         pModule = PyImport_Import(pName);
         Py_DECREF(pName);

         if (pModule != NULL) {
             pFunc = PyObject_GetAttrString(pModule, argv[2]);
             /* pFunc is a new reference */

             if (pFunc && PyCallable_Check(pFunc)) {
                 pArgs = PyTuple_New(argc - 3);
                 for (i = 0; i < argc - 3; ++i) {
                     pValue = PyInt_FromLong(atoi(argv[i + 3]));
                     if (!pValue) {
                         Py_DECREF(pArgs);
                         Py_DECREF(pModule);
                         fprintf(stderr, "Cannot convert argument\n");
                         return 1;
                     }
                     /* pValue reference stolen here: */
                     PyTuple_SetItem(pArgs, i, pValue);
                 }
                 pValue = PyObject_CallObject(pFunc, pArgs);
                 Py_DECREF(pArgs);
                 if (pValue != NULL) {
                     printf("Result of call: %ld\n", PyInt_AsLong(pValue));
                     Py_DECREF(pValue);
                 }
                 else {
                     Py_DECREF(pFunc);
                     Py_DECREF(pModule);
                     PyErr_Print();
                     fprintf(stderr,"Call failed\n");
                     return 1;
                 }
             }
             else {
                 if (PyErr_Occurred())
                     PyErr_Print();
                 fprintf(stderr, "Cannot find function \"%s\"\n", argv[2]);
             }
             Py_XDECREF(pFunc);
             Py_DECREF(pModule);
         }
         else {
             PyErr_Print();
             fprintf(stderr, "Failed to load \"%s\"\n", argv[1]);
             return 1;
         }
         Py_Finalize();
         return 0;
     }


  This code loads a Python script using ‘argv[1]’, and calls the
function named in ‘argv[2]’.  Its integer arguments are the other values
of the ‘argv’ array.  If you compile and link this program (let’s call
the finished executable *call*), and use it to execute a Python script,
such as:

     def multiply(a,b):
         print "Will compute", a, "times", b
         c = 0
         for i in range(0, a):
             c = c + b
         return c

  then the result should be:

     $ call multiply multiply 3 2
     Will compute 3 times 2
     Result of call: 6

  Although the program is quite large for its functionality, most of the
code is for data conversion between Python and C, and for error
reporting.  The interesting part with respect to embedding Python starts
with

     Py_Initialize();
     pName = PyString_FromString(argv[1]);
     /* Error checking of pName left out */
     pModule = PyImport_Import(pName);

  After initializing the interpreter, the script is loaded using *note
PyImport_Import(): 37f.  This routine needs a Python string as its
argument, which is constructed using the *note PyString_FromString():
2a2a. data conversion routine.

     pFunc = PyObject_GetAttrString(pModule, argv[2]);
     /* pFunc is a new reference */

     if (pFunc && PyCallable_Check(pFunc)) {
         ...
     }
     Py_XDECREF(pFunc);

  Once the script is loaded, the name we’re looking for is retrieved
using *note PyObject_GetAttrString(): 29bf.  If the name exists, and the
object returned is callable, you can safely assume that it is a
function.  The program then proceeds by constructing a tuple of
arguments as normal.  The call to the Python function is then made with:

     pValue = PyObject_CallObject(pFunc, pArgs);

  Upon return of the function, ‘pValue’ is either _NULL_ or it contains
a reference to the return value of the function.  Be sure to release the
reference after examining the value.


File: python.info,  Node: Extending Embedded Python,  Next: Embedding Python in C++,  Prev: Pure Embedding,  Up: Embedding Python in Another Application

6.5.4 Extending Embedded Python
-------------------------------

Until now, the embedded Python interpreter had no access to
functionality from the application itself.  The Python API allows this
by extending the embedded interpreter.  That is, the embedded
interpreter gets extended with routines provided by the application.
While it sounds complex, it is not so bad.  Simply forget for a while
that the application starts the Python interpreter.  Instead, consider
the application to be a set of subroutines, and write some glue code
that gives Python access to those routines, just like you would write a
normal Python extension.  For example:

     static int numargs=0;

     /* Return the number of arguments of the application command line */
     static PyObject*
     emb_numargs(PyObject *self, PyObject *args)
     {
         if(!PyArg_ParseTuple(args, ":numargs"))
             return NULL;
         return Py_BuildValue("i", numargs);
     }

     static PyMethodDef EmbMethods[] = {
         {"numargs", emb_numargs, METH_VARARGS,
          "Return the number of arguments received by the process."},
         {NULL, NULL, 0, NULL}
     };

  Insert the above code just above the ‘main()’ function.  Also, insert
the following two statements directly after *note Py_Initialize():
29a9.:

     numargs = argc;
     Py_InitModule("emb", EmbMethods);

  These two lines initialize the ‘numargs’ variable, and make the
‘emb.numargs()’ function accessible to the embedded Python interpreter.
With these extensions, the Python script can do things like

     import emb
     print "Number of arguments", emb.numargs()

  In a real application, the methods will expose an API of the
application to Python.


File: python.info,  Node: Embedding Python in C++,  Next: Compiling and Linking under Unix-like systems,  Prev: Extending Embedded Python,  Up: Embedding Python in Another Application

6.5.5 Embedding Python in C++
-----------------------------

It is also possible to embed Python in a C++ program; precisely how this
is done will depend on the details of the C++ system used; in general
you will need to write the main program in C++, and use the C++ compiler
to compile and link your program.  There is no need to recompile Python
itself using C++.


File: python.info,  Node: Compiling and Linking under Unix-like systems,  Prev: Embedding Python in C++,  Up: Embedding Python in Another Application

6.5.6 Compiling and Linking under Unix-like systems
---------------------------------------------------

It is not necessarily trivial to find the right flags to pass to your
compiler (and linker) in order to embed the Python interpreter into your
application, particularly because Python needs to load library modules
implemented as C dynamic extensions (‘.so’ files) linked against it.

  To find out the required compiler and linker flags, you can execute
the ‘python_X.Y_-config’ script which is generated as part of the
installation process (a ‘python-config’ script may also be available).
This script has several options, of which the following will be directly
useful to you:

   * ‘pythonX.Y-config --cflags’ will give you the recommended flags
     when compiling:

          $ /opt/bin/python2.7-config --cflags
          -I/opt/include/python2.7 -fno-strict-aliasing -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes

   * ‘pythonX.Y-config --ldflags’ will give you the recommended flags
     when linking:

          $ /opt/bin/python2.7-config --ldflags
          -L/opt/lib/python2.7/config -lpthread -ldl -lutil -lm -lpython2.7 -Xlinker -export-dynamic

     Note: To avoid confusion between several Python installations (and
     especially between the system Python and your own compiled Python),
     it is recommended that you use the absolute path to
     ‘python_X.Y_-config’, as in the above example.

  If this procedure doesn’t work for you (it is not guaranteed to work
for all Unix-like platforms; however, we welcome *note bug reports:
2a31.) you will have to read your system’s documentation about dynamic
linking and/or examine Python’s ‘Makefile’ (use
‘sysconfig.get_makefile_filename()’ to find its location) and
compilation options.  In this case, the *note sysconfig: 16e. module is
a useful tool to programmatically extract the configuration values that
you will want to combine together.  For example:

     >>> import sysconfig
     >>> sysconfig.get_config_var('LIBS')
     '-lpthread -ldl  -lutil'
     >>> sysconfig.get_config_var('LINKFORSHARED')
     '-Xlinker -export-dynamic'


File: python.info,  Node: Python/C API Reference Manual,  Next: Distributing Python Modules,  Prev: Extending and Embedding the Python Interpreter,  Up: Top

7 Python/C API Reference Manual
*******************************

This manual documents the API used by C and C++ programmers who want to
write extension modules or embed Python.  It is a companion to *note
Extending and Embedding the Python Interpreter: 4fa, which describes the
general principles of extension writing but does not document the API
functions in detail.

* Menu:

* Introduction: Introduction<10>. 
* The Very High Level Layer:: 
* Reference Counting:: 
* Exception Handling:: 
* Utilities:: 
* Abstract Objects Layer:: 
* Concrete Objects Layer:: 
* Initialization, Finalization, and Threads: Initialization Finalization and Threads. 
* Memory Management:: 
* Object Implementation Support:: 

Introduction

* Include Files:: 
* Objects, Types and Reference Counts: Objects Types and Reference Counts. 
* Exceptions: Exceptions<7>. 
* Embedding Python:: 
* Debugging Builds:: 

Objects, Types and Reference Counts

* Reference Counts: Reference Counts<2>. 
* Types:: 

Reference Counts

* Reference Count Details:: 

Exception Handling

* Unicode Exception Objects:: 
* Recursion Control:: 
* Standard Exceptions:: 
* String Exceptions:: 

Utilities

* Operating System Utilities:: 
* System Functions:: 
* Process Control:: 
* Importing Modules: Importing Modules<2>. 
* Data marshalling support:: 
* Parsing arguments and building values:: 
* String conversion and formatting:: 
* Reflection:: 
* Codec registry and support functions:: 

Codec registry and support functions

* Codec lookup API:: 
* Registry API for Unicode encoding error handlers:: 

Abstract Objects Layer

* Object Protocol:: 
* Number Protocol:: 
* Sequence Protocol:: 
* Mapping Protocol:: 
* Iterator Protocol:: 
* Old Buffer Protocol:: 

Concrete Objects Layer

* Fundamental Objects:: 
* Numeric Objects:: 
* Sequence Objects:: 
* Mapping Objects:: 
* Other Objects:: 

Fundamental Objects

* Type Objects: Type Objects<2>. 
* The None Object:: 

Numeric Objects

* Plain Integer Objects:: 
* Boolean Objects: Boolean Objects<2>. 
* Long Integer Objects:: 
* Floating Point Objects:: 
* Complex Number Objects:: 

Complex Number Objects

* Complex Numbers as C Structures:: 
* Complex Numbers as Python Objects:: 

Sequence Objects

* Byte Array Objects:: 
* String/Bytes Objects:: 
* Unicode Objects and Codecs:: 
* Buffers and Memoryview Objects:: 
* Tuple Objects:: 
* List Objects:: 

Byte Array Objects

* Type check macros:: 
* Direct API functions:: 
* Macros:: 

Unicode Objects and Codecs

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 

Unicode Objects

* Unicode Type:: 
* Unicode Character Properties:: 
* Plain Py_UNICODE:: 
* wchar_t Support:: 

Built-in Codecs

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 

Buffers and Memoryview Objects

* The new-style Py_buffer struct:: 
* Buffer related functions:: 
* MemoryView objects:: 
* Old-style buffer objects:: 

Mapping Objects

* Dictionary Objects:: 

Other Objects

* Class and Instance Objects:: 
* Function Objects: Function Objects<2>. 
* Method Objects: Method Objects<2>. 
* File Objects: File Objects<2>. 
* Module Objects:: 
* Iterator Objects:: 
* Descriptor Objects:: 
* Slice Objects:: 
* Weak Reference Objects: Weak Reference Objects<2>. 
* Capsules: Capsules<2>. 
* CObjects:: 
* Cell Objects:: 
* Generator Objects:: 
* DateTime Objects: DateTime Objects<2>. 
* Set Objects: Set Objects<2>. 
* Code Objects: Code Objects<2>. 

Initialization, Finalization, and Threads

* Initializing and finalizing the interpreter:: 
* Process-wide parameters:: 
* Thread State and the Global Interpreter Lock:: 
* Sub-interpreter support:: 
* Asynchronous Notifications:: 
* Profiling and Tracing:: 
* Advanced Debugger Support:: 

Thread State and the Global Interpreter Lock

* Releasing the GIL from extension code:: 
* Non-Python created threads:: 
* High-level API:: 
* Low-level API:: 

Sub-interpreter support

* Bugs and caveats:: 

Memory Management

* Overview:: 
* Memory Interface:: 
* Examples: Examples<23>. 

Object Implementation Support

* Allocating Objects on the Heap:: 
* Common Object Structures:: 
* Type Objects: Type Objects<3>. 
* Number Object Structures:: 
* Mapping Object Structures:: 
* Sequence Object Structures:: 
* Buffer Object Structures:: 
* Supporting Cyclic Garbage Collection:: 


File: python.info,  Node: Introduction<10>,  Next: The Very High Level Layer,  Up: Python/C API Reference Manual

7.1 Introduction
================

The Application Programmer’s Interface to Python gives C and C++
programmers access to the Python interpreter at a variety of levels.
The API is equally usable from C++, but for brevity it is generally
referred to as the Python/C API. There are two fundamentally different
reasons for using the Python/C API. The first reason is to write
_extension modules_ for specific purposes; these are C modules that
extend the Python interpreter.  This is probably the most common use.
The second reason is to use Python as a component in a larger
application; this technique is generally referred to as _embedding_
Python in an application.

  Writing an extension module is a relatively well-understood process,
where a "cookbook" approach works well.  There are several tools that
automate the process to some extent.  While people have embedded Python
in other applications since its early existence, the process of
embedding Python is less straightforward than writing an extension.

  Many API functions are useful independent of whether you’re embedding
or extending Python; moreover, most applications that embed Python will
need to provide a custom extension as well, so it’s probably a good idea
to become familiar with writing an extension before attempting to embed
Python in a real application.

* Menu:

* Include Files:: 
* Objects, Types and Reference Counts: Objects Types and Reference Counts. 
* Exceptions: Exceptions<7>. 
* Embedding Python:: 
* Debugging Builds:: 


File: python.info,  Node: Include Files,  Next: Objects Types and Reference Counts,  Up: Introduction<10>

7.1.1 Include Files
-------------------

All function, type and macro definitions needed to use the Python/C API
are included in your code by the following line:

     #include "Python.h"

  This implies inclusion of the following standard headers: ‘<stdio.h>’,
‘<string.h>’, ‘<errno.h>’, ‘<limits.h>’, ‘<assert.h>’ and ‘<stdlib.h>’
(if available).

     Note: Since Python may define some pre-processor definitions which
     affect the standard headers on some systems, you _must_ include
     ‘Python.h’ before any standard headers are included.

  All user visible names defined by Python.h (except those defined by
the included standard headers) have one of the prefixes ‘Py’ or ‘_Py’.
Names beginning with ‘_Py’ are for internal use by the Python
implementation and should not be used by extension writers.  Structure
member names do not have a reserved prefix.

  *Important:* user code should never define names that begin with ‘Py’
or ‘_Py’.  This confuses the reader, and jeopardizes the portability of
the user code to future Python versions, which may define additional
names beginning with one of these prefixes.

  The header files are typically installed with Python.  On Unix, these
are located in the directories ‘_prefix_/include/pythonversion/’ and
‘_exec_prefix_/include/pythonversion/’, where ‘prefix’ and ‘exec_prefix’
are defined by the corresponding parameters to Python’s *configure*
script and _version_ is ‘sys.version[:3]’.  On Windows, the headers are
installed in ‘_prefix_/include’, where ‘prefix’ is the installation
directory specified to the installer.

  To include the headers, place both directories (if different) on your
compiler’s search path for includes.  Do _not_ place the parent
directories on the search path and then use ‘#include
<pythonX.Y/Python.h>’; this will break on multi-platform builds since
the platform independent headers under ‘prefix’ include the platform
specific headers from ‘exec_prefix’.

  C++ users should note that though the API is defined entirely using C,
the header files do properly declare the entry points to be ‘extern
"C"’, so there is no need to do anything special to use the API from
C++.


File: python.info,  Node: Objects Types and Reference Counts,  Next: Exceptions<7>,  Prev: Include Files,  Up: Introduction<10>

7.1.2 Objects, Types and Reference Counts
-----------------------------------------

Most Python/C API functions have one or more arguments as well as a
return value of type *note PyObject*: 3a6.  This type is a pointer to an
opaque data type representing an arbitrary Python object.  Since all
Python object types are treated the same way by the Python language in
most situations (e.g., assignments, scope rules, and argument passing),
it is only fitting that they should be represented by a single C type.
Almost all Python objects live on the heap: you never declare an
automatic or static variable of type *note PyObject: 3a6, only pointer
variables of type *note PyObject*: 3a6. can be declared.  The sole
exception are the type objects; since these must never be deallocated,
they are typically static *note PyTypeObject: 29d9. objects.

  All Python objects (even Python integers) have a _type_ and a
_reference count_.  An object’s type determines what kind of object it
is (e.g., an integer, a list, or a user-defined function; there are many
more as explained in *note The standard type hierarchy: 6ed.).  For each
of the well-known types there is a macro to check whether an object is
of that type; for instance, ‘PyList_Check(a)’ is true if (and only if)
the object pointed to by _a_ is a Python list.

* Menu:

* Reference Counts: Reference Counts<2>. 
* Types:: 

Reference Counts

* Reference Count Details:: 


File: python.info,  Node: Reference Counts<2>,  Next: Types,  Up: Objects Types and Reference Counts

7.1.2.1 Reference Counts
........................

The reference count is important because today’s computers have a finite
(and often severely limited) memory size; it counts how many different
places there are that have a reference to an object.  Such a place could
be another object, or a global (or static) C variable, or a local
variable in some C function.  When an object’s reference count becomes
zero, the object is deallocated.  If it contains references to other
objects, their reference count is decremented.  Those other objects may
be deallocated in turn, if this decrement makes their reference count
become zero, and so on.  (There’s an obvious problem with objects that
reference each other here; for now, the solution is "don’t do that.")

  Reference counts are always manipulated explicitly.  The normal way is
to use the macro *note Py_INCREF(): 299b. to increment an object’s
reference count by one, and *note Py_DECREF(): 29a1. to decrement it by
one.  The *note Py_DECREF(): 29a1. macro is considerably more complex
than the incref one, since it must check whether the reference count
becomes zero and then cause the object’s deallocator to be called.  The
deallocator is a function pointer contained in the object’s type
structure.  The type-specific deallocator takes care of decrementing the
reference counts for other objects contained in the object if this is a
compound object type, such as a list, as well as performing any
additional finalization that’s needed.  There’s no chance that the
reference count can overflow; at least as many bits are used to hold the
reference count as there are distinct memory locations in virtual memory
(assuming ‘sizeof(Py_ssize_t) >= sizeof(void*)’).  Thus, the reference
count increment is a simple operation.

  It is not necessary to increment an object’s reference count for every
local variable that contains a pointer to an object.  In theory, the
object’s reference count goes up by one when the variable is made to
point to it and it goes down by one when the variable goes out of scope.
However, these two cancel each other out, so at the end the reference
count hasn’t changed.  The only real reason to use the reference count
is to prevent the object from being deallocated as long as our variable
is pointing to it.  If we know that there is at least one other
reference to the object that lives at least as long as our variable,
there is no need to increment the reference count temporarily.  An
important situation where this arises is in objects that are passed as
arguments to C functions in an extension module that are called from
Python; the call mechanism guarantees to hold a reference to every
argument for the duration of the call.

  However, a common pitfall is to extract an object from a list and hold
on to it for a while without incrementing its reference count.  Some
other operation might conceivably remove the object from the list,
decrementing its reference count and possible deallocating it.  The real
danger is that innocent-looking operations may invoke arbitrary Python
code which could do this; there is a code path which allows control to
flow back to the user from a *note Py_DECREF(): 29a1, so almost any
operation is potentially dangerous.

  A safe approach is to always use the generic operations (functions
whose name begins with ‘PyObject_’, ‘PyNumber_’, ‘PySequence_’ or
‘PyMapping_’).  These operations always increment the reference count of
the object they return.  This leaves the caller with the responsibility
to call *note Py_DECREF(): 29a1. when they are done with the result;
this soon becomes second nature.

* Menu:

* Reference Count Details:: 


File: python.info,  Node: Reference Count Details,  Up: Reference Counts<2>

7.1.2.2 Reference Count Details
...............................

The reference count behavior of functions in the Python/C API is best
explained in terms of _ownership of references_.  Ownership pertains to
references, never to objects (objects are not owned: they are always
shared).  "Owning a reference" means being responsible for calling
Py_DECREF on it when the reference is no longer needed.  Ownership can
also be transferred, meaning that the code that receives ownership of
the reference then becomes responsible for eventually decref’ing it by
calling *note Py_DECREF(): 29a1. or *note Py_XDECREF(): 29a0. when it’s
no longer needed—or passing on this responsibility (usually to its
caller).  When a function passes ownership of a reference on to its
caller, the caller is said to receive a _new_ reference.  When no
ownership is transferred, the caller is said to _borrow_ the reference.
Nothing needs to be done for a borrowed reference.

  Conversely, when a calling function passes in a reference to an
object, there are two possibilities: the function _steals_ a reference
to the object, or it does not.  _Stealing a reference_ means that when
you pass a reference to a function, that function assumes that it now
owns that reference, and you are not responsible for it any longer.

  Few functions steal references; the two notable exceptions are *note
PyList_SetItem(): 29c6. and *note PyTuple_SetItem(): 29c5, which steal a
reference to the item (but not to the tuple or list into which the item
is put!).  These functions were designed to steal a reference because of
a common idiom for populating a tuple or list with newly created
objects; for example, the code to create the tuple ‘(1, 2, "three")’
could look like this (forgetting about error handling for the moment; a
better way to code this is shown below):

     PyObject *t;

     t = PyTuple_New(3);
     PyTuple_SetItem(t, 0, PyInt_FromLong(1L));
     PyTuple_SetItem(t, 1, PyInt_FromLong(2L));
     PyTuple_SetItem(t, 2, PyString_FromString("three"));

  Here, *note PyInt_FromLong(): 299f. returns a new reference which is
immediately stolen by *note PyTuple_SetItem(): 29c5.  When you want to
keep using an object although the reference to it will be stolen, use
*note Py_INCREF(): 299b. to grab another reference before calling the
reference-stealing function.

  Incidentally, *note PyTuple_SetItem(): 29c5. is the _only_ way to set
tuple items; *note PySequence_SetItem(): 2a3f. and *note
PyObject_SetItem(): 2a40. refuse to do this since tuples are an
immutable data type.  You should only use *note PyTuple_SetItem(): 29c5.
for tuples that you are creating yourself.

  Equivalent code for populating a list can be written using *note
PyList_New(): 2a41. and *note PyList_SetItem(): 29c6.

  However, in practice, you will rarely use these ways of creating and
populating a tuple or list.  There’s a generic function, *note
Py_BuildValue(): 3a8, that can create most common objects from C values,
directed by a _format string_.  For example, the above two blocks of
code could be replaced by the following (which also takes care of the
error checking):

     PyObject *tuple, *list;

     tuple = Py_BuildValue("(iis)", 1, 2, "three");
     list = Py_BuildValue("[iis]", 1, 2, "three");

  It is much more common to use *note PyObject_SetItem(): 2a40. and
friends with items whose references you are only borrowing, like
arguments that were passed in to the function you are writing.  In that
case, their behaviour regarding reference counts is much saner, since
you don’t have to increment a reference count so you can give a
reference away ("have it be stolen").  For example, this function sets
all items of a list (actually, any mutable sequence) to a given item:

     int
     set_all(PyObject *target, PyObject *item)
     {
         int i, n;

         n = PyObject_Length(target);
         if (n < 0)
             return -1;
         for (i = 0; i < n; i++) {
             PyObject *index = PyInt_FromLong(i);
             if (!index)
                 return -1;
             if (PyObject_SetItem(target, index, item) < 0) {
                 Py_DECREF(index);
                 return -1;
         }
             Py_DECREF(index);
         }
         return 0;
     }

  The situation is slightly different for function return values.  While
passing a reference to most functions does not change your ownership
responsibilities for that reference, many functions that return a
reference to an object give you ownership of the reference.  The reason
is simple: in many cases, the returned object is created on the fly, and
the reference you get is the only reference to the object.  Therefore,
the generic functions that return object references, like *note
PyObject_GetItem(): 2a42. and *note PySequence_GetItem(): 2a43, always
return a new reference (the caller becomes the owner of the reference).

  It is important to realize that whether you own a reference returned
by a function depends on which function you call only — _the plumage_
(the type of the object passed as an argument to the function) _doesn’t
enter into it!_  Thus, if you extract an item from a list using *note
PyList_GetItem(): 29c1, you don’t own the reference — but if you obtain
the same item from the same list using *note PySequence_GetItem(): 2a43.
(which happens to take exactly the same arguments), you do own a
reference to the returned object.

  Here is an example of how you could write a function that computes the
sum of the items in a list of integers; once using *note
PyList_GetItem(): 29c1, and once using *note PySequence_GetItem(): 2a43.

     long
     sum_list(PyObject *list)
     {
         int i, n;
         long total = 0;
         PyObject *item;

         n = PyList_Size(list);
         if (n < 0)
             return -1; /* Not a list */
         for (i = 0; i < n; i++) {
             item = PyList_GetItem(list, i); /* Can't fail */
             if (!PyInt_Check(item)) continue; /* Skip non-integers */
             total += PyInt_AsLong(item);
         }
         return total;
     }

     long
     sum_sequence(PyObject *sequence)
     {
         int i, n;
         long total = 0;
         PyObject *item;
         n = PySequence_Length(sequence);
         if (n < 0)
             return -1; /* Has no length */
         for (i = 0; i < n; i++) {
             item = PySequence_GetItem(sequence, i);
             if (item == NULL)
                 return -1; /* Not a sequence, or other failure */
             if (PyInt_Check(item))
                 total += PyInt_AsLong(item);
             Py_DECREF(item); /* Discard reference ownership */
         }
         return total;
     }


File: python.info,  Node: Types,  Prev: Reference Counts<2>,  Up: Objects Types and Reference Counts

7.1.2.3 Types
.............

There are few other data types that play a significant role in the
Python/C API; most are simple C types such as ‘int’, ‘long’, ‘double’
and ‘char*’.  A few structure types are used to describe static tables
used to list the functions exported by a module or the data attributes
of a new object type, and another is used to describe the value of a
complex number.  These will be discussed together with the functions
that use them.


File: python.info,  Node: Exceptions<7>,  Next: Embedding Python,  Prev: Objects Types and Reference Counts,  Up: Introduction<10>

7.1.3 Exceptions
----------------

The Python programmer only needs to deal with exceptions if specific
error handling is required; unhandled exceptions are automatically
propagated to the caller, then to the caller’s caller, and so on, until
they reach the top-level interpreter, where they are reported to the
user accompanied by a stack traceback.

  For C programmers, however, error checking always has to be explicit.
All functions in the Python/C API can raise exceptions, unless an
explicit claim is made otherwise in a function’s documentation.  In
general, when a function encounters an error, it sets an exception,
discards any object references that it owns, and returns an error
indicator.  If not documented otherwise, this indicator is either _NULL_
or ‘-1’, depending on the function’s return type.  A few functions
return a Boolean true/false result, with false indicating an error.
Very few functions return no explicit error indicator or have an
ambiguous return value, and require explicit testing for errors with
*note PyErr_Occurred(): 299c.  These exceptions are always explicitly
documented.

  Exception state is maintained in per-thread storage (this is
equivalent to using global storage in an unthreaded application).  A
thread can be in one of two states: an exception has occurred, or not.
The function *note PyErr_Occurred(): 299c. can be used to check for
this: it returns a borrowed reference to the exception type object when
an exception has occurred, and _NULL_ otherwise.  There are a number of
functions to set the exception state: *note PyErr_SetString(): 2998. is
the most common (though not the most general) function to set the
exception state, and *note PyErr_Clear(): 299d. clears the exception
state.

  The full exception state consists of three objects (all of which can
be _NULL_): the exception type, the corresponding exception value, and
the traceback.  These have the same meanings as the Python objects
‘sys.exc_type’, ‘sys.exc_value’, and ‘sys.exc_traceback’; however, they
are not the same: the Python objects represent the last exception being
handled by a Python *note try: 395. ...  *note except: 397. statement,
while the C level exception state only exists while an exception is
being passed on between C functions until it reaches the Python bytecode
interpreter’s main loop, which takes care of transferring it to
‘sys.exc_type’ and friends.

  Note that starting with Python 1.5, the preferred, thread-safe way to
access the exception state from Python code is to call the function
*note sys.exc_info(): 2f3, which returns the per-thread exception state
for Python code.  Also, the semantics of both ways to access the
exception state have changed so that a function which catches an
exception will save and restore its thread’s exception state so as to
preserve the exception state of its caller.  This prevents common bugs
in exception handling code caused by an innocent-looking function
overwriting the exception being handled; it also reduces the often
unwanted lifetime extension for objects that are referenced by the stack
frames in the traceback.

  As a general principle, a function that calls another function to
perform some task should check whether the called function raised an
exception, and if so, pass the exception state on to its caller.  It
should discard any object references that it owns, and return an error
indicator, but it should _not_ set another exception — that would
overwrite the exception that was just raised, and lose important
information about the exact cause of the error.

  A simple example of detecting exceptions and passing them on is shown
in the ‘sum_sequence()’ example above.  It so happens that this example
doesn’t need to clean up any owned references when it detects an error.
The following example function shows some error cleanup.  First, to
remind you why you like Python, we show the equivalent Python code:

     def incr_item(dict, key):
         try:
             item = dict[key]
         except KeyError:
             item = 0
         dict[key] = item + 1

  Here is the corresponding C code, in all its glory:

     int
     incr_item(PyObject *dict, PyObject *key)
     {
         /* Objects all initialized to NULL for Py_XDECREF */
         PyObject *item = NULL, *const_one = NULL, *incremented_item = NULL;
         int rv = -1; /* Return value initialized to -1 (failure) */

         item = PyObject_GetItem(dict, key);
         if (item == NULL) {
             /* Handle KeyError only: */
             if (!PyErr_ExceptionMatches(PyExc_KeyError))
                 goto error;

             /* Clear the error and use zero: */
             PyErr_Clear();
             item = PyInt_FromLong(0L);
             if (item == NULL)
                 goto error;
         }
         const_one = PyInt_FromLong(1L);
         if (const_one == NULL)
             goto error;

         incremented_item = PyNumber_Add(item, const_one);
         if (incremented_item == NULL)
             goto error;

         if (PyObject_SetItem(dict, key, incremented_item) < 0)
             goto error;
         rv = 0; /* Success */
         /* Continue with cleanup code */

      error:
         /* Cleanup code, shared by success and failure path */

         /* Use Py_XDECREF() to ignore NULL references */
         Py_XDECREF(item);
         Py_XDECREF(const_one);
         Py_XDECREF(incremented_item);

         return rv; /* -1 for error, 0 for success */
     }

  This example represents an endorsed use of the ‘goto’ statement in C!
It illustrates the use of *note PyErr_ExceptionMatches(): 2a48. and
*note PyErr_Clear(): 299d. to handle specific exceptions, and the use of
*note Py_XDECREF(): 29a0. to dispose of owned references that may be
_NULL_ (note the ‘'X'’ in the name; *note Py_DECREF(): 29a1. would crash
when confronted with a _NULL_ reference).  It is important that the
variables used to hold owned references are initialized to _NULL_ for
this to work; likewise, the proposed return value is initialized to ‘-1’
(failure) and only set to success after the final call made is
successful.


File: python.info,  Node: Embedding Python,  Next: Debugging Builds,  Prev: Exceptions<7>,  Up: Introduction<10>

7.1.4 Embedding Python
----------------------

The one important task that only embedders (as opposed to extension
writers) of the Python interpreter have to worry about is the
initialization, and possibly the finalization, of the Python
interpreter.  Most functionality of the interpreter can only be used
after the interpreter has been initialized.

  The basic initialization function is *note Py_Initialize(): 29a9.
This initializes the table of loaded modules, and creates the
fundamental modules *note __builtin__: 0, *note __main__: 2, *note sys:
16d, and *note exceptions: c9.  It also initializes the module search
path (‘sys.path’).

  *note Py_Initialize(): 29a9. does not set the "script argument list"
(‘sys.argv’).  If this variable is needed by Python code that will be
executed later, it must be set explicitly with a call to
‘PySys_SetArgvEx(argc, argv, updatepath)’ after the call to *note
Py_Initialize(): 29a9.

  On most systems (in particular, on Unix and Windows, although the
details are slightly different), *note Py_Initialize(): 29a9. calculates
the module search path based upon its best guess for the location of the
standard Python interpreter executable, assuming that the Python library
is found in a fixed location relative to the Python interpreter
executable.  In particular, it looks for a directory named
‘lib/python_X.Y_’ relative to the parent directory where the executable
named ‘python’ is found on the shell command search path (the
environment variable ‘PATH’).

  For instance, if the Python executable is found in
‘/usr/local/bin/python’, it will assume that the libraries are in
‘/usr/local/lib/python_X.Y_’.  (In fact, this particular path is also
the "fallback" location, used when no executable file named ‘python’ is
found along ‘PATH’.)  The user can override this behavior by setting the
environment variable *note PYTHONHOME: 63d, or insert additional
directories in front of the standard path by setting *note PYTHONPATH:
580.

  The embedding application can steer the search by calling
‘Py_SetProgramName(file)’ _before_ calling *note Py_Initialize(): 29a9.
Note that *note PYTHONHOME: 63d. still overrides this and *note
PYTHONPATH: 580. is still inserted in front of the standard path.  An
application that requires total control has to provide its own
implementation of *note Py_GetPath(): 2a4b, *note Py_GetPrefix(): 2a4c,
*note Py_GetExecPrefix(): 2a4d, and *note Py_GetProgramFullPath(): 2a4e.
(all defined in ‘Modules/getpath.c’).

  Sometimes, it is desirable to "uninitialize" Python.  For instance,
the application may want to start over (make another call to *note
Py_Initialize(): 29a9.) or the application is simply done with its use
of Python and wants to free memory allocated by Python.  This can be
accomplished by calling *note Py_Finalize(): 2c3.  The function *note
Py_IsInitialized(): 2a4f. returns true if Python is currently in the
initialized state.  More information about these functions is given in a
later chapter.  Notice that *note Py_Finalize(): 2c3. does _not_ free
all memory allocated by the Python interpreter, e.g.  memory allocated
by extension modules currently cannot be released.


File: python.info,  Node: Debugging Builds,  Prev: Embedding Python,  Up: Introduction<10>

7.1.5 Debugging Builds
----------------------

Python can be built with several macros to enable extra checks of the
interpreter and extension modules.  These checks tend to add a large
amount of overhead to the runtime so they are not enabled by default.

  A full list of the various types of debugging builds is in the file
‘Misc/SpecialBuilds.txt’ in the Python source distribution.  Builds are
available that support tracing of reference counts, debugging the memory
allocator, or low-level profiling of the main interpreter loop.  Only
the most frequently-used builds will be described in the remainder of
this section.

  Compiling the interpreter with the ‘Py_DEBUG’ macro defined produces
what is generally meant by "a debug build" of Python.  ‘Py_DEBUG’ is
enabled in the Unix build by adding ‘--with-pydebug’ to the
‘./configure’ command.  It is also implied by the presence of the
not-Python-specific ‘_DEBUG’ macro.  When ‘Py_DEBUG’ is enabled in the
Unix build, compiler optimization is disabled.

  In addition to the reference count debugging described below, the
following extra checks are performed:

   * Extra checks are added to the object allocator.

   * Extra checks are added to the parser and compiler.

   * Downcasts from wide types to narrow types are checked for loss of
     information.

   * A number of assertions are added to the dictionary and set
     implementations.  In addition, the set object acquires a
     ‘test_c_api()’ method.

   * Sanity checks of the input arguments are added to frame creation.

   * The storage for long ints is initialized with a known invalid
     pattern to catch reference to uninitialized digits.

   * Low-level tracing and extra exception checking are added to the
     runtime virtual machine.

   * Extra checks are added to the memory arena implementation.

   * Extra debugging is added to the thread module.

  There may be additional checks not mentioned here.

  Defining ‘Py_TRACE_REFS’ enables reference tracing.  When defined, a
circular doubly linked list of active objects is maintained by adding
two extra fields to every *note PyObject: 3a6.  Total allocations are
tracked as well.  Upon exit, all existing references are printed.  (In
interactive mode this happens after every statement run by the
interpreter.)  Implied by ‘Py_DEBUG’.

  Please refer to ‘Misc/SpecialBuilds.txt’ in the Python source
distribution for more detailed information.


File: python.info,  Node: The Very High Level Layer,  Next: Reference Counting,  Prev: Introduction<10>,  Up: Python/C API Reference Manual

7.2 The Very High Level Layer
=============================

The functions in this chapter will let you execute Python source code
given in a file or a buffer, but they will not let you interact in a
more detailed way with the interpreter.

  Several of these functions accept a start symbol from the grammar as a
parameter.  The available start symbols are ‘Py_eval_input’,
‘Py_file_input’, and ‘Py_single_input’.  These are described following
the functions which accept them as parameters.

  Note also that several of these functions take ‘FILE*’ parameters.
One particular issue which needs to be handled carefully is that the
‘FILE’ structure for different C libraries can be different and
incompatible.  Under Windows (at least), it is possible for dynamically
linked extensions to actually use different libraries, so care should be
taken that ‘FILE*’ parameters are only passed to these functions if it
is certain that they were created by the same library that the Python
runtime is using.

 -- C Function: int Py_Main (int argc, char **argv)

     The main program for the standard interpreter.  This is made
     available for programs which embed Python.  The _argc_ and _argv_
     parameters should be prepared exactly as those which are passed to
     a C program’s ‘main()’ function.  It is important to note that the
     argument list may be modified (but the contents of the strings
     pointed to by the argument list are not).  The return value will be
     ‘0’ if the interpreter exits normally (ie, without an exception),
     ‘1’ if the interpreter exits due to an exception, or ‘2’ if the
     parameter list does not represent a valid Python command line.

     Note that if an otherwise unhandled *note SystemExit: 332. is
     raised, this function will not return ‘1’, but exit the process, as
     long as ‘Py_InspectFlag’ is not set.

 -- C Function: int PyRun_AnyFile (FILE *fp, const char *filename)

     This is a simplified interface to *note PyRun_AnyFileExFlags():
     2a57. below, leaving _closeit_ set to ‘0’ and _flags_ set to
     _NULL_.

 -- C Function: int PyRun_AnyFileFlags (FILE *fp, const char *filename,
          PyCompilerFlags *flags)

     This is a simplified interface to *note PyRun_AnyFileExFlags():
     2a57. below, leaving the _closeit_ argument set to ‘0’.

 -- C Function: int PyRun_AnyFileEx (FILE *fp, const char *filename,
          int closeit)

     This is a simplified interface to *note PyRun_AnyFileExFlags():
     2a57. below, leaving the _flags_ argument set to _NULL_.

 -- C Function: int PyRun_AnyFileExFlags (FILE *fp, const
          char *filename, int closeit, PyCompilerFlags *flags)

     If _fp_ refers to a file associated with an interactive device
     (console or terminal input or Unix pseudo-terminal), return the
     value of *note PyRun_InteractiveLoop(): 2a5a, otherwise return the
     result of *note PyRun_SimpleFile(): 2a22.  If _filename_ is _NULL_,
     this function uses ‘"???"’ as the filename.

 -- C Function: int PyRun_SimpleString (const char *command)

     This is a simplified interface to *note PyRun_SimpleStringFlags():
     2a5b. below, leaving the _PyCompilerFlags*_ argument set to NULL.

 -- C Function: int PyRun_SimpleStringFlags (const char *command,
          PyCompilerFlags *flags)

     Executes the Python source code from _command_ in the *note
     __main__: 2. module according to the _flags_ argument.  If *note
     __main__: 2. does not already exist, it is created.  Returns ‘0’ on
     success or ‘-1’ if an exception was raised.  If there was an error,
     there is no way to get the exception information.  For the meaning
     of _flags_, see below.

     Note that if an otherwise unhandled *note SystemExit: 332. is
     raised, this function will not return ‘-1’, but exit the process,
     as long as ‘Py_InspectFlag’ is not set.

 -- C Function: int PyRun_SimpleFile (FILE *fp, const char *filename)

     This is a simplified interface to *note PyRun_SimpleFileExFlags():
     2a5c. below, leaving _closeit_ set to ‘0’ and _flags_ set to
     _NULL_.

 -- C Function: int PyRun_SimpleFileFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)

     This is a simplified interface to *note PyRun_SimpleFileExFlags():
     2a5c. below, leaving _closeit_ set to ‘0’.

 -- C Function: int PyRun_SimpleFileEx (FILE *fp, const char *filename,
          int closeit)

     This is a simplified interface to *note PyRun_SimpleFileExFlags():
     2a5c. below, leaving _flags_ set to _NULL_.

 -- C Function: int PyRun_SimpleFileExFlags (FILE *fp, const
          char *filename, int closeit, PyCompilerFlags *flags)

     Similar to *note PyRun_SimpleStringFlags(): 2a5b, but the Python
     source code is read from _fp_ instead of an in-memory string.
     _filename_ should be the name of the file.  If _closeit_ is true,
     the file is closed before PyRun_SimpleFileExFlags returns.

 -- C Function: int PyRun_InteractiveOne (FILE *fp, const
          char *filename)

     This is a simplified interface to *note
     PyRun_InteractiveOneFlags(): 2a60. below, leaving _flags_ set to
     _NULL_.

 -- C Function: int PyRun_InteractiveOneFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)

     Read and execute a single statement from a file associated with an
     interactive device according to the _flags_ argument.  The user
     will be prompted using ‘sys.ps1’ and ‘sys.ps2’.  Returns ‘0’ when
     the input was executed successfully, ‘-1’ if there was an
     exception, or an error code from the ‘errcode.h’ include file
     distributed as part of Python if there was a parse error.  (Note
     that ‘errcode.h’ is not included by ‘Python.h’, so must be included
     specifically if needed.)

 -- C Function: int PyRun_InteractiveLoop (FILE *fp, const
          char *filename)

     This is a simplified interface to *note
     PyRun_InteractiveLoopFlags(): 2a61. below, leaving _flags_ set to
     _NULL_.

 -- C Function: int PyRun_InteractiveLoopFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)

     Read and execute statements from a file associated with an
     interactive device until EOF is reached.  The user will be prompted
     using ‘sys.ps1’ and ‘sys.ps2’.  Returns ‘0’ at EOF.

 -- C Function: struct _node* PyParser_SimpleParseString (const
          char *str, int start)

     This is a simplified interface to *note
     PyParser_SimpleParseStringFlagsFilename(): 2a63. below, leaving
     _filename_ set to _NULL_ and _flags_ set to ‘0’.

 -- C Function: struct _node* PyParser_SimpleParseStringFlags (const
          char *str, int start, int flags)

     This is a simplified interface to *note
     PyParser_SimpleParseStringFlagsFilename(): 2a63. below, leaving
     _filename_ set to _NULL_.

 -- C Function: struct _node* PyParser_SimpleParseStringFlagsFilename
          (const char *str, const char *filename, int start, int flags)

     Parse Python source code from _str_ using the start token _start_
     according to the _flags_ argument.  The result can be used to
     create a code object which can be evaluated efficiently.  This is
     useful if a code fragment must be evaluated many times.

 -- C Function: struct _node* PyParser_SimpleParseFile (FILE *fp, const
          char *filename, int start)

     This is a simplified interface to *note
     PyParser_SimpleParseFileFlags(): 2a66. below, leaving _flags_ set
     to ‘0’

 -- C Function: struct _node* PyParser_SimpleParseFileFlags (FILE *fp,
          const char *filename, int start, int flags)

     Similar to *note PyParser_SimpleParseStringFlagsFilename(): 2a63,
     but the Python source code is read from _fp_ instead of an
     in-memory string.

 -- C Function: PyObject* PyRun_String (const char *str, int start,
          PyObject *globals, PyObject *locals)

     Return value: New reference.

     This is a simplified interface to *note PyRun_StringFlags(): 2a68.
     below, leaving _flags_ set to _NULL_.

 -- C Function: PyObject* PyRun_StringFlags (const char *str, int start,
          PyObject *globals, PyObject *locals, PyCompilerFlags *flags)

     Return value: New reference.

     Execute Python source code from _str_ in the context specified by
     the dictionaries _globals_ and _locals_ with the compiler flags
     specified by _flags_.  The parameter _start_ specifies the start
     token that should be used to parse the source code.

     Returns the result of executing the code as a Python object, or
     _NULL_ if an exception was raised.

 -- C Function: PyObject* PyRun_File (FILE *fp, const char *filename,
          int start, PyObject *globals, PyObject *locals)

     Return value: New reference.

     This is a simplified interface to *note PyRun_FileExFlags(): 2a6a.
     below, leaving _closeit_ set to ‘0’ and _flags_ set to _NULL_.

 -- C Function: PyObject* PyRun_FileEx (FILE *fp, const char *filename,
          int start, PyObject *globals, PyObject *locals, int closeit)

     Return value: New reference.

     This is a simplified interface to *note PyRun_FileExFlags(): 2a6a.
     below, leaving _flags_ set to _NULL_.

 -- C Function: PyObject* PyRun_FileFlags (FILE *fp, const
          char *filename, int start, PyObject *globals,
          PyObject *locals, PyCompilerFlags *flags)

     Return value: New reference.

     This is a simplified interface to *note PyRun_FileExFlags(): 2a6a.
     below, leaving _closeit_ set to ‘0’.

 -- C Function: PyObject* PyRun_FileExFlags (FILE *fp, const
          char *filename, int start, PyObject *globals,
          PyObject *locals, int closeit, PyCompilerFlags *flags)

     Return value: New reference.

     Similar to *note PyRun_StringFlags(): 2a68, but the Python source
     code is read from _fp_ instead of an in-memory string.  _filename_
     should be the name of the file.  If _closeit_ is true, the file is
     closed before *note PyRun_FileExFlags(): 2a6a. returns.

 -- C Function: PyObject* Py_CompileString (const char *str, const
          char *filename, int start)

     Return value: New reference.

     This is a simplified interface to *note Py_CompileStringFlags():
     2a6e. below, leaving _flags_ set to _NULL_.

 -- C Function: PyObject* Py_CompileStringFlags (const char *str, const
          char *filename, int start, PyCompilerFlags *flags)

     Return value: New reference.

     Parse and compile the Python source code in _str_, returning the
     resulting code object.  The start token is given by _start_; this
     can be used to constrain the code which can be compiled and should
     be ‘Py_eval_input’, ‘Py_file_input’, or ‘Py_single_input’.  The
     filename specified by _filename_ is used to construct the code
     object and may appear in tracebacks or *note SyntaxError: 498.
     exception messages.  This returns _NULL_ if the code cannot be
     parsed or compiled.

 -- C Function: PyObject* PyEval_EvalCode (PyCodeObject *co,
          PyObject *globals, PyObject *locals)

     Return value: New reference.

     This is a simplified interface to *note PyEval_EvalCodeEx(): 2a70,
     with just the code object, and the dictionaries of global and local
     variables.  The other arguments are set to _NULL_.

 -- C Function: PyObject* PyEval_EvalCodeEx (PyCodeObject *co,
          PyObject *globals, PyObject *locals, PyObject **args,
          int argcount, PyObject **kws, int kwcount, PyObject **defs,
          int defcount, PyObject *closure)

     Evaluate a precompiled code object, given a particular environment
     for its evaluation.  This environment consists of dictionaries of
     global and local variables, arrays of arguments, keywords and
     defaults, and a closure tuple of cells.

 -- C Function: PyObject* PyEval_EvalFrame (PyFrameObject *f)

     Evaluate an execution frame.  This is a simplified interface to
     PyEval_EvalFrameEx, for backward compatibility.

 -- C Function: PyObject* PyEval_EvalFrameEx (PyFrameObject *f,
          int throwflag)

     This is the main, unvarnished function of Python interpretation.
     It is literally 2000 lines long.  The code object associated with
     the execution frame _f_ is executed, interpreting bytecode and
     executing calls as needed.  The additional _throwflag_ parameter
     can mostly be ignored - if true, then it causes an exception to
     immediately be thrown; this is used for the *note throw(): 7a5.
     methods of generator objects.

 -- C Function: int PyEval_MergeCompilerFlags (PyCompilerFlags *cf)

     This function changes the flags of the current evaluation frame,
     and returns true on success, false on failure.

 -- C Variable: int Py_eval_input

     The start symbol from the Python grammar for isolated expressions;
     for use with *note Py_CompileString(): 2a6d.

 -- C Variable: int Py_file_input

     The start symbol from the Python grammar for sequences of
     statements as read from a file or other source; for use with *note
     Py_CompileString(): 2a6d.  This is the symbol to use when compiling
     arbitrarily long Python source code.

 -- C Variable: int Py_single_input

     The start symbol from the Python grammar for a single statement;
     for use with *note Py_CompileString(): 2a6d.  This is the symbol
     used for the interactive interpreter loop.

 -- C Type: struct PyCompilerFlags

     This is the structure used to hold compiler flags.  In cases where
     code is only being compiled, it is passed as ‘int flags’, and in
     cases where code is being executed, it is passed as
     ‘PyCompilerFlags *flags’.  In this case, ‘from __future__ import’
     can modify _flags_.

     Whenever ‘PyCompilerFlags *flags’ is _NULL_, ‘cf_flags’ is treated
     as equal to ‘0’, and any modification due to ‘from __future__
     import’ is discarded.

          struct PyCompilerFlags {
              int cf_flags;
          }

 -- C Variable: int CO_FUTURE_DIVISION

     This bit can be set in _flags_ to cause division operator ‘/’ to be
     interpreted as "true division" according to PEP 238(1).

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0238


File: python.info,  Node: Reference Counting,  Next: Exception Handling,  Prev: The Very High Level Layer,  Up: Python/C API Reference Manual

7.3 Reference Counting
======================

The macros in this section are used for managing reference counts of
Python objects.

 -- C Function: void Py_INCREF (PyObject *o)

     Increment the reference count for object _o_.  The object must not
     be _NULL_; if you aren’t sure that it isn’t _NULL_, use *note
     Py_XINCREF(): 29b0.

 -- C Function: void Py_XINCREF (PyObject *o)

     Increment the reference count for object _o_.  The object may be
     _NULL_, in which case the macro has no effect.

 -- C Function: void Py_DECREF (PyObject *o)

     Decrement the reference count for object _o_.  The object must not
     be _NULL_; if you aren’t sure that it isn’t _NULL_, use *note
     Py_XDECREF(): 29a0.  If the reference count reaches zero, the
     object’s type’s deallocation function (which must not be _NULL_) is
     invoked.

          Warning: The deallocation function can cause arbitrary Python
          code to be invoked (e.g.  when a class instance with a *note
          __del__(): 709. method is deallocated).  While exceptions in
          such code are not propagated, the executed code has free
          access to all Python global variables.  This means that any
          object that is reachable from a global variable should be in a
          consistent state before *note Py_DECREF(): 29a1. is invoked.
          For example, code to delete an object from a list should copy
          a reference to the deleted object in a temporary variable,
          update the list data structure, and then call *note
          Py_DECREF(): 29a1. for the temporary variable.

 -- C Function: void Py_XDECREF (PyObject *o)

     Decrement the reference count for object _o_.  The object may be
     _NULL_, in which case the macro has no effect; otherwise the effect
     is the same as for *note Py_DECREF(): 29a1, and the same warning
     applies.

 -- C Function: void Py_CLEAR (PyObject *o)

     Decrement the reference count for object _o_.  The object may be
     _NULL_, in which case the macro has no effect; otherwise the effect
     is the same as for *note Py_DECREF(): 29a1, except that the
     argument is also set to _NULL_. The warning for *note Py_DECREF():
     29a1. does not apply with respect to the object passed because the
     macro carefully uses a temporary variable and sets the argument to
     _NULL_ before decrementing its reference count.

     It is a good idea to use this macro whenever decrementing the value
     of a variable that might be traversed during garbage collection.

     New in version 2.4.

  The following functions are for runtime dynamic embedding of Python:
‘Py_IncRef(PyObject *o)’, ‘Py_DecRef(PyObject *o)’.  They are simply
exported function versions of *note Py_XINCREF(): 29b0. and *note
Py_XDECREF(): 29a0, respectively.

  The following functions or macros are only for use within the
interpreter core: ‘_Py_Dealloc()’, ‘_Py_ForgetReference()’,
‘_Py_NewReference()’, as well as the global variable ‘_Py_RefTotal’.


File: python.info,  Node: Exception Handling,  Next: Utilities,  Prev: Reference Counting,  Up: Python/C API Reference Manual

7.4 Exception Handling
======================

The functions described in this chapter will let you handle and raise
Python exceptions.  It is important to understand some of the basics of
Python exception handling.  It works somewhat like the Unix ‘errno’
variable: there is a global indicator (per thread) of the last error
that occurred.  Most functions don’t clear this on success, but will set
it to indicate the cause of the error on failure.  Most functions also
return an error indicator, usually _NULL_ if they are supposed to return
a pointer, or ‘-1’ if they return an integer (exception: the ‘PyArg_*()’
functions return ‘1’ for success and ‘0’ for failure).

  When a function must fail because some function it called failed, it
generally doesn’t set the error indicator; the function it called
already set it.  It is responsible for either handling the error and
clearing the exception or returning after cleaning up any resources it
holds (such as object references or memory allocations); it should _not_
continue normally if it is not prepared to handle the error.  If
returning due to an error, it is important to indicate to the caller
that an error has been set.  If the error is not handled or carefully
propagated, additional calls into the Python/C API may not behave as
intended and may fail in mysterious ways.

  The error indicator consists of three Python objects corresponding to
the Python variables ‘sys.exc_type’, ‘sys.exc_value’ and
‘sys.exc_traceback’.  API functions exist to interact with the error
indicator in various ways.  There is a separate error indicator for each
thread.

 -- C Function: void PyErr_PrintEx (int set_sys_last_vars)

     Print a standard traceback to ‘sys.stderr’ and clear the error
     indicator.  Call this function only when the error indicator is
     set.  (Otherwise it will cause a fatal error!)

     If _set_sys_last_vars_ is nonzero, the variables *note
     sys.last_type: 23c1, *note sys.last_value: 23c2. and *note
     sys.last_traceback: 2337. will be set to the type, value and
     traceback of the printed exception, respectively.

 -- C Function: void PyErr_Print ()

     Alias for ‘PyErr_PrintEx(1)’.

 -- C Function: PyObject* PyErr_Occurred ()

     Return value: Borrowed reference.

     Test whether the error indicator is set.  If set, return the
     exception _type_ (the first argument to the last call to one of the
     ‘PyErr_Set*()’ functions or to *note PyErr_Restore(): 29f9.).  If
     not set, return _NULL_. You do not own a reference to the return
     value, so you do not need to *note Py_DECREF(): 29a1. it.

          Note: Do not compare the return value to a specific exception;
          use *note PyErr_ExceptionMatches(): 2a48. instead, shown
          below.  (The comparison could easily fail since the exception
          may be an instance instead of a class, in the case of a class
          exception, or it may the a subclass of the expected
          exception.)

 -- C Function: int PyErr_ExceptionMatches (PyObject *exc)

     Equivalent to ‘PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)’.
     This should only be called when an exception is actually set; a
     memory access violation will occur if no exception has been raised.

 -- C Function: int PyErr_GivenExceptionMatches (PyObject *given,
          PyObject *exc)

     Return true if the _given_ exception matches the exception in
     _exc_.  If _exc_ is a class object, this also returns true when
     _given_ is an instance of a subclass.  If _exc_ is a tuple, all
     exceptions in the tuple (and recursively in subtuples) are searched
     for a match.

 -- C Function: void PyErr_NormalizeException (PyObject**exc,
          PyObject**val, PyObject**tb)

     Under certain circumstances, the values returned by *note
     PyErr_Fetch(): 29f8. below can be "unnormalized", meaning that
     ‘*exc’ is a class object but ‘*val’ is not an instance of the same
     class.  This function can be used to instantiate the class in that
     case.  If the values are already normalized, nothing happens.  The
     delayed normalization is implemented to improve performance.

 -- C Function: void PyErr_Clear ()

     Clear the error indicator.  If the error indicator is not set,
     there is no effect.

 -- C Function: void PyErr_Fetch (PyObject **ptype, PyObject **pvalue,
          PyObject **ptraceback)

     Retrieve the error indicator into three variables whose addresses
     are passed.  If the error indicator is not set, set all three
     variables to _NULL_. If it is set, it will be cleared and you own a
     reference to each object retrieved.  The value and traceback object
     may be _NULL_ even when the type object is not.

          Note: This function is normally only used by code that needs
          to handle exceptions or by code that needs to save and restore
          the error indicator temporarily.

 -- C Function: void PyErr_Restore (PyObject *type, PyObject *value,
          PyObject *traceback)

     Set the error indicator from the three objects.  If the error
     indicator is already set, it is cleared first.  If the objects are
     _NULL_, the error indicator is cleared.  Do not pass a _NULL_ type
     and non-_NULL_ value or traceback.  The exception type should be a
     class.  Do not pass an invalid exception type or value.  (Violating
     these rules will cause subtle problems later.)  This call takes
     away a reference to each object: you must own a reference to each
     object before the call and after the call you no longer own these
     references.  (If you don’t understand this, don’t use this
     function.  I warned you.)

          Note: This function is normally only used by code that needs
          to save and restore the error indicator temporarily; use *note
          PyErr_Fetch(): 29f8. to save the current exception state.

 -- C Function: void PyErr_SetString (PyObject *type, const
          char *message)

     This is the most common way to set the error indicator.  The first
     argument specifies the exception type; it is normally one of the
     standard exceptions, e.g.  ‘PyExc_RuntimeError’.  You need not
     increment its reference count.  The second argument is an error
     message; it is converted to a string object.

 -- C Function: void PyErr_SetObject (PyObject *type, PyObject *value)

     This function is similar to *note PyErr_SetString(): 2998. but lets
     you specify an arbitrary Python object for the "value" of the
     exception.

 -- C Function: PyObject* PyErr_Format (PyObject *exception, const
          char *format, ...)

     Return value: Always NULL.

     This function sets the error indicator and returns _NULL_.
     _exception_ should be a Python exception class.  The _format_ and
     subsequent parameters help format the error message; they have the
     same meaning and values as in *note PyString_FromFormat(): 2a82.

 -- C Function: void PyErr_SetNone (PyObject *type)

     This is a shorthand for ‘PyErr_SetObject(type, Py_None)’.

 -- C Function: int PyErr_BadArgument ()

     This is a shorthand for ‘PyErr_SetString(PyExc_TypeError,
     message)’, where _message_ indicates that a built-in operation was
     invoked with an illegal argument.  It is mostly for internal use.

 -- C Function: PyObject* PyErr_NoMemory ()

     Return value: Always NULL.

     This is a shorthand for ‘PyErr_SetNone(PyExc_MemoryError)’; it
     returns _NULL_ so an object allocation function can write ‘return
     PyErr_NoMemory();’ when it runs out of memory.

 -- C Function: PyObject* PyErr_SetFromErrno (PyObject *type)

     Return value: Always NULL.

     This is a convenience function to raise an exception when a C
     library function has returned an error and set the C variable
     ‘errno’.  It constructs a tuple object whose first item is the
     integer ‘errno’ value and whose second item is the corresponding
     error message (gotten from ‘strerror()’), and then calls
     ‘PyErr_SetObject(type, object)’.  On Unix, when the ‘errno’ value
     is ‘EINTR’, indicating an interrupted system call, this calls *note
     PyErr_CheckSignals(): 2a85, and if that set the error indicator,
     leaves it set to that.  The function always returns _NULL_, so a
     wrapper function around a system call can write ‘return
     PyErr_SetFromErrno(type);’ when the system call returns an error.

 -- C Function: PyObject* PyErr_SetFromErrnoWithFilenameObject
          (PyObject *type, PyObject *filenameObject)

     Similar to *note PyErr_SetFromErrno(): 2999, with the additional
     behavior that if _filenameObject_ is not _NULL_, it is passed to
     the constructor of _type_ as a third parameter.  In the case of
     exceptions such as *note IOError: 1fa. and *note OSError: 231, this
     is used to define the ‘filename’ attribute of the exception
     instance.

 -- C Function: PyObject* PyErr_SetFromErrnoWithFilename
          (PyObject *type, const char *filename)

     Return value: Always NULL.

     Similar to *note PyErr_SetFromErrnoWithFilenameObject(): 2a86, but
     the filename is given as a C string.

 -- C Function: PyObject* PyErr_SetFromWindowsErr (int ierr)

     Return value: Always NULL.

     This is a convenience function to raise *note WindowsError: 95b.
     If called with _ierr_ of ‘0’, the error code returned by a call to
     ‘GetLastError()’ is used instead.  It calls the Win32 function
     ‘FormatMessage()’ to retrieve the Windows description of error code
     given by _ierr_ or ‘GetLastError()’, then it constructs a tuple
     object whose first item is the _ierr_ value and whose second item
     is the corresponding error message (gotten from ‘FormatMessage()’),
     and then calls ‘PyErr_SetObject(PyExc_WindowsError, object)’.  This
     function always returns _NULL_. Availability: Windows.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErr (PyObject *type,
          int ierr)

     Return value: Always NULL.

     Similar to *note PyErr_SetFromWindowsErr(): 2a88, with an
     additional parameter specifying the exception type to be raised.
     Availability: Windows.

     New in version 2.3.

 -- C Function: PyObject* PyErr_SetFromWindowsErrWithFilenameObject
          (int ierr, PyObject *filenameObject)

     Similar to *note PyErr_SetFromWindowsErr(): 2a88, with the
     additional behavior that if _filenameObject_ is not _NULL_, it is
     passed to the constructor of *note WindowsError: 95b. as a third
     parameter.  Availability: Windows.

 -- C Function: PyObject* PyErr_SetFromWindowsErrWithFilename (int ierr,
          const char *filename)

     Return value: Always NULL.

     Similar to *note PyErr_SetFromWindowsErrWithFilenameObject(): 2a8a,
     but the filename is given as a C string.  Availability: Windows.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErrWithFilenameObject
          (PyObject *type, int ierr, PyObject *filename)

     Similar to *note PyErr_SetFromWindowsErrWithFilenameObject(): 2a8a,
     with an additional parameter specifying the exception type to be
     raised.  Availability: Windows.

     New in version 2.3.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErrWithFilename
          (PyObject *type, int ierr, const char *filename)

     Return value: Always NULL.

     Similar to *note PyErr_SetFromWindowsErrWithFilename(): 2a8b, with
     an additional parameter specifying the exception type to be raised.
     Availability: Windows.

     New in version 2.3.

 -- C Function: void PyErr_BadInternalCall ()

     This is a shorthand for ‘PyErr_SetString(PyExc_SystemError,
     message)’, where _message_ indicates that an internal operation
     (e.g.  a Python/C API function) was invoked with an illegal
     argument.  It is mostly for internal use.

 -- C Function: int PyErr_WarnEx (PyObject *category, char *message,
          int stacklevel)

     Issue a warning message.  The _category_ argument is a warning
     category (see below) or _NULL_; the _message_ argument is a message
     string.  _stacklevel_ is a positive number giving a number of stack
     frames; the warning will be issued from the currently executing
     line of code in that stack frame.  A _stacklevel_ of 1 is the
     function calling *note PyErr_WarnEx(): 3e7, 2 is the function above
     that, and so forth.

     This function normally prints a warning message to _sys.stderr_;
     however, it is also possible that the user has specified that
     warnings are to be turned into errors, and in that case this will
     raise an exception.  It is also possible that the function raises
     an exception because of a problem with the warning machinery (the
     implementation imports the *note warnings: 193. module to do the
     heavy lifting).  The return value is ‘0’ if no exception is raised,
     or ‘-1’ if an exception is raised.  (It is not possible to
     determine whether a warning message is actually printed, nor what
     the reason is for the exception; this is intentional.)  If an
     exception is raised, the caller should do its normal exception
     handling (for example, *note Py_DECREF(): 29a1. owned references
     and return an error value).

     Warning categories must be subclasses of ‘Warning’; the default
     warning category is ‘RuntimeWarning’.  The standard Python warning
     categories are available as global variables whose names are
     ‘PyExc_’ followed by the Python exception name.  These have the
     type *note PyObject*: 3a6.; they are all class objects.  Their
     names are ‘PyExc_Warning’, ‘PyExc_UserWarning’,
     ‘PyExc_UnicodeWarning’, ‘PyExc_DeprecationWarning’,
     ‘PyExc_SyntaxWarning’, ‘PyExc_RuntimeWarning’, and
     ‘PyExc_FutureWarning’.  ‘PyExc_Warning’ is a subclass of
     ‘PyExc_Exception’; the other warning categories are subclasses of
     ‘PyExc_Warning’.

     For information about warning control, see the documentation for
     the *note warnings: 193. module and the *note -W: 1bd. option in
     the command line documentation.  There is no C API for warning
     control.

 -- C Function: int PyErr_Warn (PyObject *category, char *message)

     Issue a warning message.  The _category_ argument is a warning
     category (see below) or _NULL_; the _message_ argument is a message
     string.  The warning will appear to be issued from the function
     calling *note PyErr_Warn(): 3e6, equivalent to calling *note
     PyErr_WarnEx(): 3e7. with a _stacklevel_ of 1.

     Deprecated; use *note PyErr_WarnEx(): 3e7. instead.

 -- C Function: int PyErr_WarnExplicit (PyObject *category, const
          char *message, const char *filename, int lineno, const
          char *module, PyObject *registry)

     Issue a warning message with explicit control over all warning
     attributes.  This is a straightforward wrapper around the Python
     function *note warnings.warn_explicit(): 23fb, see there for more
     information.  The _module_ and _registry_ arguments may be set to
     _NULL_ to get the default effect described there.

 -- C Function: int PyErr_WarnPy3k (char *message, int stacklevel)

     Issue a *note DeprecationWarning: 1bc. with the given _message_ and
     _stacklevel_ if the ‘Py_Py3kWarningFlag’ flag is enabled.

     New in version 2.6.

 -- C Function: int PyErr_CheckSignals ()

     This function interacts with Python’s signal handling.  It checks
     whether a signal has been sent to the processes and if so, invokes
     the corresponding signal handler.  If the *note signal: 155. module
     is supported, this can invoke a signal handler written in Python.
     In all cases, the default effect for ‘SIGINT’ is to raise the *note
     KeyboardInterrupt: 251. exception.  If an exception is raised the
     error indicator is set and the function returns ‘-1’; otherwise the
     function returns ‘0’.  The error indicator may or may not be
     cleared if it was previously set.

 -- C Function: void PyErr_SetInterrupt ()

     This function simulates the effect of a ‘SIGINT’ signal arriving —
     the next time *note PyErr_CheckSignals(): 2a85. is called, *note
     KeyboardInterrupt: 251. will be raised.  It may be called without
     holding the interpreter lock.

 -- C Function: int PySignal_SetWakeupFd (int fd)

     This utility function specifies a file descriptor to which a ‘'\0'’
     byte will be written whenever a signal is received.  It returns the
     previous such file descriptor.  The value ‘-1’ disables the
     feature; this is the initial state.  This is equivalent to *note
     signal.set_wakeup_fd(): 1784. in Python, but without any error
     checking.  _fd_ should be a valid file descriptor.  The function
     should only be called from the main thread.

     New in version 2.6.

 -- C Function: PyObject* PyErr_NewException (char *name,
          PyObject *base, PyObject *dict)

     Return value: New reference.

     This utility function creates and returns a new exception class.
     The _name_ argument must be the name of the new exception, a C
     string of the form ‘module.classname’.  The _base_ and _dict_
     arguments are normally _NULL_. This creates a class object derived
     from *note Exception: 339. (accessible in C as ‘PyExc_Exception’).

     The ‘__module__’ attribute of the new class is set to the first
     part (up to the last dot) of the _name_ argument, and the class
     name is set to the last part (after the last dot).  The _base_
     argument can be used to specify alternate base classes; it can
     either be only one class or a tuple of classes.  The _dict_
     argument can be used to specify a dictionary of class variables and
     methods.

 -- C Function: PyObject* PyErr_NewExceptionWithDoc (char *name,
          char *doc, PyObject *base, PyObject *dict)

     Return value: New reference.

     Same as *note PyErr_NewException(): 2ba, except that the new
     exception class can easily be given a docstring: If _doc_ is
     non-_NULL_, it will be used as the docstring for the exception
     class.

     New in version 2.7.

 -- C Function: void PyErr_WriteUnraisable (PyObject *obj)

     This utility function prints a warning message to ‘sys.stderr’ when
     an exception has been set but it is impossible for the interpreter
     to actually raise the exception.  It is used, for example, when an
     exception occurs in an *note __del__(): 709. method.

     The function is called with a single argument _obj_ that identifies
     the context in which the unraisable exception occurred.  The repr
     of _obj_ will be printed in the warning message.

* Menu:

* Unicode Exception Objects:: 
* Recursion Control:: 
* Standard Exceptions:: 
* String Exceptions:: 


File: python.info,  Node: Unicode Exception Objects,  Next: Recursion Control,  Up: Exception Handling

7.4.1 Unicode Exception Objects
-------------------------------

The following functions are used to create and modify Unicode exceptions
from C.

 -- C Function: PyObject* PyUnicodeDecodeError_Create (const
          char *encoding, const char *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)

     Create a ‘UnicodeDecodeError’ object with the attributes
     _encoding_, _object_, _length_, _start_, _end_ and _reason_.

 -- C Function: PyObject* PyUnicodeEncodeError_Create (const
          char *encoding, const Py_UNICODE *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)

     Create a ‘UnicodeEncodeError’ object with the attributes
     _encoding_, _object_, _length_, _start_, _end_ and _reason_.

 -- C Function: PyObject* PyUnicodeTranslateError_Create (const
          Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start,
          Py_ssize_t end, const char *reason)

     Create a ‘UnicodeTranslateError’ object with the attributes
     _object_, _length_, _start_, _end_ and _reason_.

 -- C Function: PyObject* PyUnicodeDecodeError_GetEncoding
          (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetEncoding
          (PyObject *exc)

     Return the _encoding_ attribute of the given exception object.

 -- C Function: PyObject* PyUnicodeDecodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetObject
          (PyObject *exc)

     Return the _object_ attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeEncodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeTranslateError_GetStart (PyObject *exc,
          Py_ssize_t *start)

     Get the _start_ attribute of the given exception object and place
     it into _*start_.  _start_ must not be _NULL_. Return ‘0’ on
     success, ‘-1’ on failure.

 -- C Function: int PyUnicodeDecodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeEncodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeTranslateError_SetStart (PyObject *exc,
          Py_ssize_t start)

     Set the _start_ attribute of the given exception object to _start_.
     Return ‘0’ on success, ‘-1’ on failure.

 -- C Function: int PyUnicodeDecodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeEncodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeTranslateError_GetEnd (PyObject *exc,
          Py_ssize_t *end)

     Get the _end_ attribute of the given exception object and place it
     into _*end_.  _end_ must not be _NULL_. Return ‘0’ on success, ‘-1’
     on failure.

 -- C Function: int PyUnicodeDecodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeEncodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeTranslateError_SetEnd (PyObject *exc,
          Py_ssize_t end)

     Set the _end_ attribute of the given exception object to _end_.
     Return ‘0’ on success, ‘-1’ on failure.

 -- C Function: PyObject* PyUnicodeDecodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetReason
          (PyObject *exc)

     Return the _reason_ attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_SetReason (PyObject *exc, const
          char *reason)
 -- C Function: int PyUnicodeEncodeError_SetReason (PyObject *exc, const
          char *reason)
 -- C Function: int PyUnicodeTranslateError_SetReason (PyObject *exc,
          const char *reason)

     Set the _reason_ attribute of the given exception object to
     _reason_.  Return ‘0’ on success, ‘-1’ on failure.


File: python.info,  Node: Recursion Control,  Next: Standard Exceptions,  Prev: Unicode Exception Objects,  Up: Exception Handling

7.4.2 Recursion Control
-----------------------

These two functions provide a way to perform safe recursive calls at the
C level, both in the core and in extension modules.  They are needed if
the recursive code does not necessarily invoke Python code (which tracks
its recursion depth automatically).

 -- C Function: int Py_EnterRecursiveCall (char *where)

     Marks a point where a recursive C-level call is about to be
     performed.

     If ‘USE_STACKCHECK’ is defined, this function checks if the OS
     stack overflowed using *note PyOS_CheckStack(): 2ab1.  In this is
     the case, it sets a *note MemoryError: 94d. and returns a nonzero
     value.

     The function then checks if the recursion limit is reached.  If
     this is the case, a *note RuntimeError: 39b. is set and a nonzero
     value is returned.  Otherwise, zero is returned.

     _where_ should be a string such as ‘" in instance check"’ to be
     concatenated to the *note RuntimeError: 39b. message caused by the
     recursion depth limit.

 -- C Function: void Py_LeaveRecursiveCall ()

     Ends a *note Py_EnterRecursiveCall(): 2ab0.  Must be called once
     for each _successful_ invocation of *note Py_EnterRecursiveCall():
     2ab0.


File: python.info,  Node: Standard Exceptions,  Next: String Exceptions,  Prev: Recursion Control,  Up: Exception Handling

7.4.3 Standard Exceptions
-------------------------

All standard Python exceptions are available as global variables whose
names are ‘PyExc_’ followed by the Python exception name.  These have
the type *note PyObject*: 3a6.; they are all class objects.  For
completeness, here are all the variables:

C Name                                    Python Name                      Notes
                                                                           
------------------------------------------------------------------------------------------
                                                                           
‘PyExc_BaseException’                     *note BaseException: 338.        (1), (4)
                                                                           
                                                                           
‘PyExc_Exception’                         *note Exception: 339.            (1)
                                                                           
                                                                           
‘PyExc_StandardError’                     *note StandardError: 382.        (1)
                                                                           
                                                                           
‘PyExc_ArithmeticError’                   *note ArithmeticError: 947.      (1)
                                                                           
                                                                           
‘PyExc_LookupError’                       *note LookupError: 891.          (1)
                                                                           
                                                                           
‘PyExc_AssertionError’                    *note AssertionError: 80c.
                                          
                                                                           
‘PyExc_AttributeError’                    *note AttributeError: 1f8.
                                          
                                                                           
‘PyExc_EOFError’                          *note EOFError: 88a.
                                          
                                                                           
‘PyExc_EnvironmentError’                  *note EnvironmentError: 94c.     (1)
                                                                           
                                                                           
‘PyExc_FloatingPointError’                *note FloatingPointError: 948.
                                          
                                                                           
‘PyExc_IOError’                           *note IOError: 1fa.
                                          
                                                                           
‘PyExc_ImportError’                       *note ImportError: 370.
                                          
                                                                           
‘PyExc_IndexError’                        *note IndexError: 4e1.
                                          
                                                                           
‘PyExc_KeyError’                          *note KeyError: 205.
                                          
                                                                           
‘PyExc_KeyboardInterrupt’                 *note KeyboardInterrupt: 251.
                                          
                                                                           
‘PyExc_MemoryError’                       *note MemoryError: 94d.
                                          
                                                                           
‘PyExc_NameError’                         *note NameError: 3a3.
                                          
                                                                           
‘PyExc_NotImplementedError’               *note NotImplementedError:
                                          94e.
                                          
                                                                           
‘PyExc_OSError’                           *note OSError: 231.
                                          
                                                                           
‘PyExc_OverflowError’                     *note OverflowError: 2db.
                                          
                                                                           
‘PyExc_ReferenceError’                    *note ReferenceError: 4b2.       (2)
                                                                           
                                                                           
‘PyExc_RuntimeError’                      *note RuntimeError: 39b.
                                          
                                                                           
‘PyExc_SyntaxError’                       *note SyntaxError: 498.
                                          
                                                                           
‘PyExc_SystemError’                       *note SystemError: 950.
                                          
                                                                           
‘PyExc_SystemExit’                        *note SystemExit: 332.
                                          
                                                                           
‘PyExc_TypeError’                         *note TypeError: 218.
                                          
                                                                           
‘PyExc_ValueError’                        *note ValueError: 236.
                                          
                                                                           
‘PyExc_WindowsError’                      *note WindowsError: 95b.         (3)
                                                                           
                                                                           
‘PyExc_ZeroDivisionError’                 *note ZeroDivisionError: 5ac.
                                          

  Notes:

  1. This is a base class for other standard exceptions.

  2. This is the same as *note weakref.ReferenceError: 4c3.

  3. Only defined on Windows; protect code that uses this by testing
     that the preprocessor macro ‘MS_WINDOWS’ is defined.

  4. New in version 2.5.


File: python.info,  Node: String Exceptions,  Prev: Standard Exceptions,  Up: Exception Handling

7.4.4 String Exceptions
-----------------------

Changed in version 2.6: All exceptions to be raised or caught must be
derived from *note BaseException: 338.  Trying to raise a string
exception now raises *note TypeError: 218.


File: python.info,  Node: Utilities,  Next: Abstract Objects Layer,  Prev: Exception Handling,  Up: Python/C API Reference Manual

7.5 Utilities
=============

The functions in this chapter perform various utility tasks, ranging
from helping C code be more portable across platforms, using Python
modules from C, and parsing function arguments and constructing Python
values from C values.

* Menu:

* Operating System Utilities:: 
* System Functions:: 
* Process Control:: 
* Importing Modules: Importing Modules<2>. 
* Data marshalling support:: 
* Parsing arguments and building values:: 
* String conversion and formatting:: 
* Reflection:: 
* Codec registry and support functions:: 


File: python.info,  Node: Operating System Utilities,  Next: System Functions,  Up: Utilities

7.5.1 Operating System Utilities
--------------------------------

 -- C Function: int Py_FdIsInteractive (FILE *fp, const char *filename)

     Return true (nonzero) if the standard I/O file _fp_ with name
     _filename_ is deemed interactive.  This is the case for files for
     which ‘isatty(fileno(fp))’ is true.  If the global flag
     ‘Py_InteractiveFlag’ is true, this function also returns true if
     the _filename_ pointer is _NULL_ or if the name is equal to one of
     the strings ‘'<stdin>'’ or ‘'???'’.

 -- C Function: void PyOS_AfterFork ()

     Function to update some internal state after a process fork; this
     should be called in the new process if the Python interpreter will
     continue to be used.  If a new executable is loaded into the new
     process, this function does not need to be called.

 -- C Function: int PyOS_CheckStack ()

     Return true when the interpreter runs out of stack space.  This is
     a reliable check, but is only available when ‘USE_STACKCHECK’ is
     defined (currently on Windows using the Microsoft Visual C++
     compiler).  ‘USE_STACKCHECK’ will be defined automatically; you
     should never change the definition in your own code.

 -- C Function: PyOS_sighandler_t PyOS_getsig (int i)

     Return the current signal handler for signal _i_.  This is a thin
     wrapper around either ‘sigaction()’ or ‘signal()’.  Do not call
     those functions directly!  ‘PyOS_sighandler_t’ is a typedef alias
     for ‘void (*)(int)’.

 -- C Function: PyOS_sighandler_t PyOS_setsig (int i,
          PyOS_sighandler_t h)

     Set the signal handler for signal _i_ to be _h_; return the old
     signal handler.  This is a thin wrapper around either ‘sigaction()’
     or ‘signal()’.  Do not call those functions directly!
     ‘PyOS_sighandler_t’ is a typedef alias for ‘void (*)(int)’.


File: python.info,  Node: System Functions,  Next: Process Control,  Prev: Operating System Utilities,  Up: Utilities

7.5.2 System Functions
----------------------

These are utility functions that make functionality from the *note sys:
16d. module accessible to C code.  They all work with the current
interpreter thread’s *note sys: 16d. module’s dict, which is contained
in the internal thread state structure.

 -- C Function: PyObject *PySys_GetObject (char *name)

     Return value: Borrowed reference.

     Return the object _name_ from the *note sys: 16d. module or _NULL_
     if it does not exist, without setting an exception.

 -- C Function: FILE *PySys_GetFile (char *name, FILE *def)

     Return the ‘FILE*’ associated with the object _name_ in the *note
     sys: 16d. module, or _def_ if _name_ is not in the module or is not
     associated with a ‘FILE*’.

 -- C Function: int PySys_SetObject (char *name, PyObject *v)

     Set _name_ in the *note sys: 16d. module to _v_ unless _v_ is
     _NULL_, in which case _name_ is deleted from the sys module.
     Returns ‘0’ on success, ‘-1’ on error.

 -- C Function: void PySys_ResetWarnOptions ()

     Reset *note sys.warnoptions: 23d0. to an empty list.

 -- C Function: void PySys_AddWarnOption (char *s)

     Append _s_ to *note sys.warnoptions: 23d0.

 -- C Function: void PySys_SetPath (char *path)

     Set *note sys.path: 57f. to a list object of paths found in _path_
     which should be a list of paths separated with the platform’s
     search path delimiter (‘:’ on Unix, ‘;’ on Windows).

 -- C Function: void PySys_WriteStdout (const char *format, ...)

     Write the output string described by _format_ to *note sys.stdout:
     889.  No exceptions are raised, even if truncation occurs (see
     below).

     _format_ should limit the total size of the formatted output string
     to 1000 bytes or less – after 1000 bytes, the output string is
     truncated.  In particular, this means that no unrestricted "%s"
     formats should occur; these should be limited using "%.<N>s" where
     <N> is a decimal number calculated so that <N> plus the maximum
     size of other formatted text does not exceed 1000 bytes.  Also
     watch out for "%f", which can print hundreds of digits for very
     large numbers.

     If a problem occurs, or *note sys.stdout: 889. is unset, the
     formatted message is written to the real (C level) _stdout_.

 -- C Function: void PySys_WriteStderr (const char *format, ...)

     As above, but write to *note sys.stderr: 647. or _stderr_ instead.


File: python.info,  Node: Process Control,  Next: Importing Modules<2>,  Prev: System Functions,  Up: Utilities

7.5.3 Process Control
---------------------

 -- C Function: void Py_FatalError (const char *message)

     Print a fatal error message and kill the process.  No cleanup is
     performed.  This function should only be invoked when a condition
     is detected that would make it dangerous to continue using the
     Python interpreter; e.g., when the object administration appears to
     be corrupted.  On Unix, the standard C library function ‘abort()’
     is called which will attempt to produce a ‘core’ file.

 -- C Function: void Py_Exit (int status)

     Exit the current process.  This calls *note Py_Finalize(): 2c3. and
     then calls the standard C library function ‘exit(status)’.

 -- C Function: int Py_AtExit (void (*func) ())

     Register a cleanup function to be called by *note Py_Finalize():
     2c3.  The cleanup function will be called with no arguments and
     should return no value.  At most 32 cleanup functions can be
     registered.  When the registration is successful, *note
     Py_AtExit(): 2ace. returns ‘0’; on failure, it returns ‘-1’.  The
     cleanup function registered last is called first.  Each cleanup
     function will be called at most once.  Since Python’s internal
     finalization will have completed before the cleanup function, no
     Python APIs should be called by _func_.


File: python.info,  Node: Importing Modules<2>,  Next: Data marshalling support,  Prev: Process Control,  Up: Utilities

7.5.4 Importing Modules
-----------------------

 -- C Function: PyObject* PyImport_ImportModule (const char *name)

     Return value: New reference.

     This is a simplified interface to *note PyImport_ImportModuleEx():
     2ad2. below, leaving the _globals_ and _locals_ arguments set to
     _NULL_ and _level_ set to 0.  When the _name_ argument contains a
     dot (when it specifies a submodule of a package), the _fromlist_
     argument is set to the list ‘['*']’ so that the return value is the
     named module rather than the top-level package containing it as
     would otherwise be the case.  (Unfortunately, this has an
     additional side effect when _name_ in fact specifies a subpackage
     instead of a submodule: the submodules specified in the package’s
     ‘__all__’ variable are loaded.)  Return a new reference to the
     imported module, or _NULL_ with an exception set on failure.
     Before Python 2.4, the module may still be created in the failure
     case — examine ‘sys.modules’ to find out.  Starting with Python
     2.4, a failing import of a module no longer leaves the module in
     ‘sys.modules’.

     Changed in version 2.4: Failing imports remove incomplete module
     objects.

     Changed in version 2.6: Always uses absolute imports.

 -- C Function: PyObject* PyImport_ImportModuleNoBlock (const
          char *name)

     This version of *note PyImport_ImportModule(): 380. does not block.
     It’s intended to be used in C functions that import other modules
     to execute a function.  The import may block if another thread
     holds the import lock.  The function *note
     PyImport_ImportModuleNoBlock(): 371. never blocks.  It first tries
     to fetch the module from sys.modules and falls back to *note
     PyImport_ImportModule(): 380. unless the lock is held, in which
     case the function will raise an *note ImportError: 370.

     New in version 2.6.

 -- C Function: PyObject* PyImport_ImportModuleEx (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist)

     Return value: New reference.

     Import a module.  This is best described by referring to the
     built-in Python function *note __import__(): 37e, as the standard
     *note __import__(): 37e. function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or _NULL_ with an exception set on failure
     (before Python 2.4, the module may still be created in this case).
     Like for *note __import__(): 37e, the return value when a submodule
     of a package was requested is normally the top-level package,
     unless a non-empty _fromlist_ was given.

     Changed in version 2.4: Failing imports remove incomplete module
     objects.

     Changed in version 2.6: The function is an alias for *note
     PyImport_ImportModuleLevel(): 2ad3. with -1 as level, meaning
     relative import.

 -- C Function: PyObject* PyImport_ImportModuleLevel (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist,
          int level)

     Return value: New reference.

     Import a module.  This is best described by referring to the
     built-in Python function *note __import__(): 37e, as the standard
     *note __import__(): 37e. function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or _NULL_ with an exception set on failure.
     Like for *note __import__(): 37e, the return value when a submodule
     of a package was requested is normally the top-level package,
     unless a non-empty _fromlist_ was given.

     New in version 2.5.

 -- C Function: PyObject* PyImport_Import (PyObject *name)

     Return value: New reference.

     This is a higher-level interface that calls the current "import
     hook function".  It invokes the *note __import__(): 37e. function
     from the ‘__builtins__’ of the current globals.  This means that
     the import is done using whatever import hooks are installed in the
     current environment, e.g.  by *note rexec: 147. or ‘ihooks’.

     Changed in version 2.6: Always uses absolute imports.

 -- C Function: PyObject* PyImport_ReloadModule (PyObject *m)

     Return value: New reference.

     Reload a module.  This is best described by referring to the
     built-in Python function *note reload(): 57a, as the standard *note
     reload(): 57a. function calls this function directly.  Return a new
     reference to the reloaded module, or _NULL_ with an exception set
     on failure (the module still exists in this case).

 -- C Function: PyObject* PyImport_AddModule (const char *name)

     Return value: Borrowed reference.

     Return the module object corresponding to a module name.  The
     _name_ argument may be of the form ‘package.module’.  First check
     the modules dictionary if there’s one there, and if not, create a
     new one and insert it in the modules dictionary.  Return _NULL_
     with an exception set on failure.

          Note: This function does not load or import the module; if the
          module wasn’t already loaded, you will get an empty module
          object.  Use *note PyImport_ImportModule(): 380. or one of its
          variants to import a module.  Package structures implied by a
          dotted name for _name_ are not created if not already present.

 -- C Function: PyObject* PyImport_ExecCodeModule (char *name,
          PyObject *co)

     Return value: New reference.

     Given a module name (possibly of the form ‘package.module’) and a
     code object read from a Python bytecode file or obtained from the
     built-in function *note compile(): 1fb, load the module.  Return a
     new reference to the module object, or _NULL_ with an exception set
     if an error occurred.  Before Python 2.4, the module could still be
     created in error cases.  Starting with Python 2.4, _name_ is
     removed from *note sys.modules: 824. in error cases, and even if
     _name_ was already in *note sys.modules: 824. on entry to *note
     PyImport_ExecCodeModule(): 2ad5.  Leaving incompletely initialized
     modules in *note sys.modules: 824. is dangerous, as imports of such
     modules have no way to know that the module object is an unknown
     (and probably damaged with respect to the module author’s intents)
     state.

     The module’s ‘__file__’ attribute will be set to the code object’s
     ‘co_filename’.

     This function will reload the module if it was already imported.
     See *note PyImport_ReloadModule(): 2ad4. for the intended way to
     reload a module.

     If _name_ points to a dotted name of the form ‘package.module’, any
     package structures not already created will still not be created.

     Changed in version 2.4: _name_ is removed from *note sys.modules:
     824. in error cases.

 -- C Function: PyObject* PyImport_ExecCodeModuleEx (char *name,
          PyObject *co, char *pathname)

     Return value: New reference.

     Like *note PyImport_ExecCodeModule(): 2ad5, but the ‘__file__’
     attribute of the module object is set to _pathname_ if it is
     non-‘NULL’.

 -- C Function: long PyImport_GetMagicNumber ()

     Return the magic number for Python bytecode files (a.k.a.  ‘.pyc’
     and ‘.pyo’ files).  The magic number should be present in the first
     four bytes of the bytecode file, in little-endian byte order.

 -- C Function: PyObject* PyImport_GetModuleDict ()

     Return value: Borrowed reference.

     Return the dictionary used for the module administration (a.k.a.
     ‘sys.modules’).  Note that this is a per-interpreter variable.

 -- C Function: PyObject* PyImport_GetImporter (PyObject *path)

     Return an importer object for a *note sys.path: 57f./‘pkg.__path__’
     item _path_, possibly by fetching it from the *note
     sys.path_importer_cache: 829. dict.  If it wasn’t yet cached,
     traverse *note sys.path_hooks: 828. until a hook is found that can
     handle the path item.  Return ‘None’ if no hook could; this tells
     our caller it should fall back to the built-in import mechanism.
     Cache the result in *note sys.path_importer_cache: 829.  Return a
     new reference to the importer object.

     New in version 2.6.

 -- C Function: void _PyImport_Init ()

     Initialize the import mechanism.  For internal use only.

 -- C Function: void PyImport_Cleanup ()

     Empty the module table.  For internal use only.

 -- C Function: void _PyImport_Fini ()

     Finalize the import mechanism.  For internal use only.

 -- C Function: PyObject* _PyImport_FindExtension (char *, char *)

     For internal use only.

 -- C Function: PyObject* _PyImport_FixupExtension (char *, char *)

     For internal use only.

 -- C Function: int PyImport_ImportFrozenModule (char *name)

     Load a frozen module named _name_.  Return ‘1’ for success, ‘0’ if
     the module is not found, and ‘-1’ with an exception set if the
     initialization failed.  To access the imported module on a
     successful load, use *note PyImport_ImportModule(): 380.  (Note the
     misnomer — this function would reload the module if it was already
     imported.)

 -- C Type: struct _frozen

     This is the structure type definition for frozen module
     descriptors, as generated by the *freeze* utility (see
     ‘Tools/freeze/’ in the Python source distribution).  Its
     definition, found in ‘Include/import.h’, is:

          struct _frozen {
              char *name;
              unsigned char *code;
              int size;
          };

 -- C Variable: struct _frozen* PyImport_FrozenModules

     This pointer is initialized to point to an array of ‘struct
     _frozen’ records, terminated by one whose members are all _NULL_ or
     zero.  When a frozen module is imported, it is searched in this
     table.  Third-party code could play tricks with this to provide a
     dynamically created collection of frozen modules.

 -- C Function: int PyImport_AppendInittab (const char *name,
          void (*initfunc)(void))

     Add a single module to the existing table of built-in modules.
     This is a convenience wrapper around *note
     PyImport_ExtendInittab(): 2ae3, returning ‘-1’ if the table could
     not be extended.  The new module can be imported by the name
     _name_, and uses the function _initfunc_ as the initialization
     function called on the first attempted import.  This should be
     called before *note Py_Initialize(): 29a9.

 -- C Type: struct _inittab

     Structure describing a single entry in the list of built-in
     modules.  Each of these structures gives the name and
     initialization function for a module built into the interpreter.
     Programs which embed Python may use an array of these structures in
     conjunction with *note PyImport_ExtendInittab(): 2ae3. to provide
     additional built-in modules.  The structure is defined in
     ‘Include/import.h’ as:

          struct _inittab {
              char *name;
              void (*initfunc)(void);
          };

 -- C Function: int PyImport_ExtendInittab (struct _inittab *newtab)

     Add a collection of modules to the table of built-in modules.  The
     _newtab_ array must end with a sentinel entry which contains _NULL_
     for the ‘name’ field; failure to provide the sentinel value can
     result in a memory fault.  Returns ‘0’ on success or ‘-1’ if
     insufficient memory could be allocated to extend the internal
     table.  In the event of failure, no modules are added to the
     internal table.  This should be called before *note
     Py_Initialize(): 29a9.


File: python.info,  Node: Data marshalling support,  Next: Parsing arguments and building values,  Prev: Importing Modules<2>,  Up: Utilities

7.5.5 Data marshalling support
------------------------------

These routines allow C code to work with serialized objects using the
same data format as the *note marshal: 10b. module.  There are functions
to write data into the serialization format, and additional functions
that can be used to read the data back.  Files used to store marshalled
data must be opened in binary mode.

  Numeric values are stored with the least significant byte first.

  The module supports two versions of the data format: version 0 is the
historical version, version 1 (new in Python 2.4) shares interned
strings in the file, and upon unmarshalling.  Version 2 (new in Python
2.5) uses a binary format for floating point numbers.
_Py_MARSHAL_VERSION_ indicates the current file format (currently 2).

 -- C Function: void PyMarshal_WriteLongToFile (long value, FILE *file,
          int version)

     Marshal a ‘long’ integer, _value_, to _file_.  This will only write
     the least-significant 32 bits of _value_; regardless of the size of
     the native ‘long’ type.

     Changed in version 2.4: _version_ indicates the file format.

 -- C Function: void PyMarshal_WriteObjectToFile (PyObject *value,
          FILE *file, int version)

     Marshal a Python object, _value_, to _file_.

     Changed in version 2.4: _version_ indicates the file format.

 -- C Function: PyObject* PyMarshal_WriteObjectToString
          (PyObject *value, int version)

     Return value: New reference.

     Return a string object containing the marshalled representation of
     _value_.

     Changed in version 2.4: _version_ indicates the file format.

  The following functions allow marshalled values to be read back in.

  XXX What about error detection?  It appears that reading past the end
of the file will always result in a negative numeric value (where that’s
relevant), but it’s not clear that negative values won’t be handled
properly when there’s no error.  What’s the right way to tell?  Should
only non-negative values be written using these routines?

 -- C Function: long PyMarshal_ReadLongFromFile (FILE *file)

     Return a C ‘long’ from the data stream in a ‘FILE*’ opened for
     reading.  Only a 32-bit value can be read in using this function,
     regardless of the native size of ‘long’.

 -- C Function: int PyMarshal_ReadShortFromFile (FILE *file)

     Return a C ‘short’ from the data stream in a ‘FILE*’ opened for
     reading.  Only a 16-bit value can be read in using this function,
     regardless of the native size of ‘short’.

 -- C Function: PyObject* PyMarshal_ReadObjectFromFile (FILE *file)

     Return value: New reference.

     Return a Python object from the data stream in a ‘FILE*’ opened for
     reading.  On error, sets the appropriate exception (*note EOFError:
     88a. or *note TypeError: 218.) and returns _NULL_.

 -- C Function: PyObject* PyMarshal_ReadLastObjectFromFile (FILE *file)

     Return value: New reference.

     Return a Python object from the data stream in a ‘FILE*’ opened for
     reading.  Unlike *note PyMarshal_ReadObjectFromFile(): 2aed, this
     function assumes that no further objects will be read from the
     file, allowing it to aggressively load file data into memory so
     that the de-serialization can operate from data in memory rather
     than reading a byte at a time from the file.  Only use these
     variant if you are certain that you won’t be reading anything else
     from the file.  On error, sets the appropriate exception (*note
     EOFError: 88a. or *note TypeError: 218.) and returns _NULL_.

 -- C Function: PyObject* PyMarshal_ReadObjectFromString (char *string,
          Py_ssize_t len)

     Return value: New reference.

     Return a Python object from the data stream in a character buffer
     containing _len_ bytes pointed to by _string_.  On error, sets the
     appropriate exception (*note EOFError: 88a. or *note TypeError:
     218.) and returns _NULL_.

     Changed in version 2.5: This function used an ‘int’ type for _len_.
     This might require changes in your code for properly supporting
     64-bit systems.


File: python.info,  Node: Parsing arguments and building values,  Next: String conversion and formatting,  Prev: Data marshalling support,  Up: Utilities

7.5.6 Parsing arguments and building values
-------------------------------------------

These functions are useful when creating your own extensions functions
and methods.  Additional information and examples are available in *note
Extending and Embedding the Python Interpreter: 4fa.

  The first three of these functions described, *note
PyArg_ParseTuple(): 31b, *note PyArg_ParseTupleAndKeywords(): 41c, and
*note PyArg_Parse(): 2af2, all use _format strings_ which are used to
tell the function about the expected arguments.  The format strings use
the same syntax for each of these functions.

  A format string consists of zero or more "format units."  A format
unit describes one Python object; it is usually a single character or a
parenthesized sequence of format units.  With a few exceptions, a format
unit that is not a parenthesized sequence normally corresponds to a
single address argument to these functions.  In the following
description, the quoted form is the format unit; the entry in (round)
parentheses is the Python object type that matches the format unit; and
the entry in [square] brackets is the type of the C variable(s) whose
address should be passed.

  These formats allow to access an object as a contiguous chunk of
memory.  You don’t have to provide raw storage for the returned unicode
or bytes area.  Also, you won’t have to release any memory yourself,
except with the ‘es’, ‘es#’, ‘et’ and ‘et#’ formats.

‘s’ (string or Unicode) [const char *]

     Convert a Python string or Unicode object to a C pointer to a
     character string.  You must not provide storage for the string
     itself; a pointer to an existing string is stored into the
     character pointer variable whose address you pass.  The C string is
     NUL-terminated.  The Python string must not contain embedded NUL
     bytes; if it does, a *note TypeError: 218. exception is raised.
     Unicode objects are converted to C strings using the default
     encoding.  If this conversion fails, a *note UnicodeError: 433. is
     raised.

‘s#’ (string, Unicode or any read buffer compatible object) [const char *, int (or ‘Py_ssize_t’, see below)]

     This variant on ‘s’ stores into two C variables, the first one a
     pointer to a character string, the second one its length.  In this
     case the Python string may contain embedded null bytes.  Unicode
     objects pass back a pointer to the default encoded string version
     of the object if such a conversion is possible.  All other
     read-buffer compatible objects pass back a reference to the raw
     internal data representation.

     Starting with Python 2.5 the type of the length argument can be
     controlled by defining the macro ‘PY_SSIZE_T_CLEAN’ before
     including ‘Python.h’.  If the macro is defined, length is a
     ‘Py_ssize_t’ rather than an int.

‘s*’ (string, Unicode, or any buffer compatible object) [Py_buffer]

     Similar to ‘s#’, this code fills a Py_buffer structure provided by
     the caller.  The buffer gets locked, so that the caller can
     subsequently use the buffer even inside a ‘Py_BEGIN_ALLOW_THREADS’
     block; the caller is responsible for calling ‘PyBuffer_Release’
     with the structure after it has processed the data.

     New in version 2.6.

‘z’ (string, Unicode or ‘None’) [const char *]

     Like ‘s’, but the Python object may also be ‘None’, in which case
     the C pointer is set to _NULL_.

‘z#’ (string, Unicode, ‘None’ or any read buffer compatible object) [const char *, int]

     This is to ‘s#’ as ‘z’ is to ‘s’.

‘z*’ (string, Unicode, ‘None’ or any buffer compatible object) [Py_buffer]

     This is to ‘s*’ as ‘z’ is to ‘s’.

     New in version 2.6.

‘u’ (Unicode) [Py_UNICODE *]

     Convert a Python Unicode object to a C pointer to a NUL-terminated
     buffer of 16-bit Unicode (UTF-16) data.  As with ‘s’, there is no
     need to provide storage for the Unicode data buffer; a pointer to
     the existing Unicode data is stored into the *note Py_UNICODE: a88.
     pointer variable whose address you pass.

‘u#’ (Unicode) [Py_UNICODE *, int]

     This variant on ‘u’ stores into two C variables, the first one a
     pointer to a Unicode data buffer, the second one its length.
     Non-Unicode objects are handled by interpreting their read-buffer
     pointer as pointer to a *note Py_UNICODE: a88. array.

‘es’ (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer]

     This variant on ‘s’ is used for encoding Unicode and objects
     convertible to Unicode into a character buffer.  It only works for
     encoded data without embedded NUL bytes.

     This format requires two arguments.  The first is only used as
     input, and must be a ‘const char*’ which points to the name of an
     encoding as a NUL-terminated string, or _NULL_, in which case the
     default encoding is used.  An exception is raised if the named
     encoding is not known to Python.  The second argument must be a
     ‘char**’; the value of the pointer it references will be set to a
     buffer with the contents of the argument text.  The text will be
     encoded in the encoding specified by the first argument.

     *note PyArg_ParseTuple(): 31b. will allocate a buffer of the needed
     size, copy the encoded data into this buffer and adjust _*buffer_
     to reference the newly allocated storage.  The caller is
     responsible for calling *note PyMem_Free(): 3df. to free the
     allocated buffer after use.

‘et’ (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer]

     Same as ‘es’ except that 8-bit string objects are passed through
     without recoding them.  Instead, the implementation assumes that
     the string object uses the encoding passed in as parameter.

‘es#’ (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer, int *buffer_length]

     This variant on ‘s#’ is used for encoding Unicode and objects
     convertible to Unicode into a character buffer.  Unlike the ‘es’
     format, this variant allows input data which contains NUL
     characters.

     It requires three arguments.  The first is only used as input, and
     must be a ‘const char*’ which points to the name of an encoding as
     a NUL-terminated string, or _NULL_, in which case the default
     encoding is used.  An exception is raised if the named encoding is
     not known to Python.  The second argument must be a ‘char**’; the
     value of the pointer it references will be set to a buffer with the
     contents of the argument text.  The text will be encoded in the
     encoding specified by the first argument.  The third argument must
     be a pointer to an integer; the referenced integer will be set to
     the number of bytes in the output buffer.

     There are two modes of operation:

     If _*buffer_ points a _NULL_ pointer, the function will allocate a
     buffer of the needed size, copy the encoded data into this buffer
     and set _*buffer_ to reference the newly allocated storage.  The
     caller is responsible for calling *note PyMem_Free(): 3df. to free
     the allocated buffer after usage.

     If _*buffer_ points to a non-_NULL_ pointer (an already allocated
     buffer), *note PyArg_ParseTuple(): 31b. will use this location as
     the buffer and interpret the initial value of _*buffer_length_ as
     the buffer size.  It will then copy the encoded data into the
     buffer and NUL-terminate it.  If the buffer is not large enough, a
     *note ValueError: 236. will be set.

     In both cases, _*buffer_length_ is set to the length of the encoded
     data without the trailing NUL byte.

‘et#’ (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer, int *buffer_length]

     Same as ‘es#’ except that string objects are passed through without
     recoding them.  Instead, the implementation assumes that the string
     object uses the encoding passed in as parameter.

‘b’ (integer) [unsigned char]

     Convert a nonnegative Python integer to an unsigned tiny int,
     stored in a C ‘unsigned char’.

‘B’ (integer) [unsigned char]

     Convert a Python integer to a tiny int without overflow checking,
     stored in a C ‘unsigned char’.

     New in version 2.3.

‘h’ (integer) [short int]

     Convert a Python integer to a C ‘short int’.

‘H’ (integer) [unsigned short int]

     Convert a Python integer to a C ‘unsigned short int’, without
     overflow checking.

     New in version 2.3.

‘i’ (integer) [int]

     Convert a Python integer to a plain C ‘int’.

‘I’ (integer) [unsigned int]

     Convert a Python integer to a C ‘unsigned int’, without overflow
     checking.

     New in version 2.3.

‘l’ (integer) [long int]

     Convert a Python integer to a C ‘long int’.

‘k’ (integer) [unsigned long]

     Convert a Python integer or long integer to a C ‘unsigned long’
     without overflow checking.

     New in version 2.3.

‘L’ (integer) [PY_LONG_LONG]

     Convert a Python integer to a C ‘long long’.  This format is only
     available on platforms that support ‘long long’ (or ‘_int64’ on
     Windows).

‘K’ (integer) [unsigned PY_LONG_LONG]

     Convert a Python integer or long integer to a C ‘unsigned long
     long’ without overflow checking.  This format is only available on
     platforms that support ‘unsigned long long’ (or ‘unsigned _int64’
     on Windows).

     New in version 2.3.

‘n’ (integer) [Py_ssize_t]

     Convert a Python integer or long integer to a C ‘Py_ssize_t’.

     New in version 2.5.

‘c’ (string of length 1) [char]

     Convert a Python character, represented as a string of length 1, to
     a C ‘char’.

‘f’ (float) [float]

     Convert a Python floating point number to a C ‘float’.

‘d’ (float) [double]

     Convert a Python floating point number to a C ‘double’.

‘D’ (complex) [Py_complex]

     Convert a Python complex number to a C *note Py_complex: 2af3.
     structure.

‘O’ (object) [PyObject *]

     Store a Python object (without any conversion) in a C object
     pointer.  The C program thus receives the actual object that was
     passed.  The object’s reference count is not increased.  The
     pointer stored is not _NULL_.

‘O!’ (object) [_typeobject_, PyObject *]

     Store a Python object in a C object pointer.  This is similar to
     ‘O’, but takes two C arguments: the first is the address of a
     Python type object, the second is the address of the C variable (of
     type *note PyObject*: 3a6.) into which the object pointer is
     stored.  If the Python object does not have the required type,
     *note TypeError: 218. is raised.

‘O&’ (object) [_converter_, _anything_]

     Convert a Python object to a C variable through a _converter_
     function.  This takes two arguments: the first is a function, the
     second is the address of a C variable (of arbitrary type),
     converted to ‘void *’.  The _converter_ function in turn is called
     as follows:

          status = converter(object, address);

     where _object_ is the Python object to be converted and _address_
     is the ‘void*’ argument that was passed to the *note
     PyArg_Parse*(): 2af2. function.  The returned _status_ should be
     ‘1’ for a successful conversion and ‘0’ if the conversion has
     failed.  When the conversion fails, the _converter_ function should
     raise an exception and leave the content of _address_ unmodified.

‘S’ (string) [PyStringObject *]

     Like ‘O’ but requires that the Python object is a string object.
     Raises *note TypeError: 218. if the object is not a string object.
     The C variable may also be declared as *note PyObject*: 3a6.

‘U’ (Unicode string) [PyUnicodeObject *]

     Like ‘O’ but requires that the Python object is a Unicode object.
     Raises *note TypeError: 218. if the object is not a Unicode object.
     The C variable may also be declared as *note PyObject*: 3a6.

‘t#’ (read-only character buffer) [char *, int]

     Like ‘s#’, but accepts any object which implements the read-only
     buffer interface.  The ‘char*’ variable is set to point to the
     first byte of the buffer, and the ‘int’ is set to the length of the
     buffer.  Only single-segment buffer objects are accepted; *note
     TypeError: 218. is raised for all others.

‘w’ (read-write character buffer) [char *]

     Similar to ‘s’, but accepts any object which implements the
     read-write buffer interface.  The caller must determine the length
     of the buffer by other means, or use ‘w#’ instead.  Only
     single-segment buffer objects are accepted; *note TypeError: 218.
     is raised for all others.

‘w#’ (read-write character buffer) [char *, Py_ssize_t]

     Like ‘s#’, but accepts any object which implements the read-write
     buffer interface.  The ‘char *’ variable is set to point to the
     first byte of the buffer, and the ‘Py_ssize_t’ is set to the length
     of the buffer.  Only single-segment buffer objects are accepted;
     *note TypeError: 218. is raised for all others.

‘w*’ (read-write byte-oriented buffer) [Py_buffer]

     This is to ‘w’ what ‘s*’ is to ‘s’.

     New in version 2.6.

‘(items)’ (tuple) [_matching-items_]

     The object must be a Python sequence whose length is the number of
     format units in _items_.  The C arguments must correspond to the
     individual format units in _items_.  Format units for sequences may
     be nested.

          Note: Prior to Python version 1.5.2, this format specifier
          only accepted a tuple containing the individual parameters,
          not an arbitrary sequence.  Code which previously caused *note
          TypeError: 218. to be raised here may now proceed without an
          exception.  This is not expected to be a problem for existing
          code.

  It is possible to pass Python long integers where integers are
requested; however no proper range checking is done — the most
significant bits are silently truncated when the receiving field is too
small to receive the value (actually, the semantics are inherited from
downcasts in C — your mileage may vary).

  A few other characters have a meaning in a format string.  These may
not occur inside nested parentheses.  They are:

‘|’

     Indicates that the remaining arguments in the Python argument list
     are optional.  The C variables corresponding to optional arguments
     should be initialized to their default value — when an optional
     argument is not specified, *note PyArg_ParseTuple(): 31b. does not
     touch the contents of the corresponding C variable(s).

‘:’

     The list of format units ends here; the string after the colon is
     used as the function name in error messages (the "associated value"
     of the exception that *note PyArg_ParseTuple(): 31b. raises).

‘;’

     The list of format units ends here; the string after the semicolon
     is used as the error message _instead_ of the default error
     message.  ‘:’ and ‘;’ mutually exclude each other.

  Note that any Python object references which are provided to the
caller are _borrowed_ references; do not decrement their reference
count!

  Additional arguments passed to these functions must be addresses of
variables whose type is determined by the format string; these are used
to store values from the input tuple.  There are a few cases, as
described in the list of format units above, where these parameters are
used as input values; they should match what is specified for the
corresponding format unit in that case.

  For the conversion to succeed, the _arg_ object must match the format
and the format must be exhausted.  On success, the *note PyArg_Parse*():
2af2. functions return true, otherwise they return false and raise an
appropriate exception.  When the *note PyArg_Parse*(): 2af2. functions
fail due to conversion failure in one of the format units, the variables
at the addresses corresponding to that and the following format units
are left untouched.

 -- C Function: int PyArg_ParseTuple (PyObject *args, const
          char *format, ...)

     Parse the parameters of a function that takes only positional
     parameters into local variables.  Returns true on success; on
     failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParse (PyObject *args, const char *format,
          va_list vargs)

     Identical to *note PyArg_ParseTuple(): 31b, except that it accepts
     a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[], ...)

     Parse the parameters of a function that takes both positional and
     keyword parameters into local variables.  Returns true on success;
     on failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[],
          va_list vargs)

     Identical to *note PyArg_ParseTupleAndKeywords(): 41c, except that
     it accepts a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_Parse (PyObject *args, const char *format,
          ...)

     Function used to deconstruct the argument lists of "old-style"
     functions — these are functions which use the *note METH_OLDARGS:
     4ad. parameter parsing method.  This is not recommended for use in
     parameter parsing in new code, and most code in the standard
     interpreter has been modified to no longer use this for that
     purpose.  It does remain a convenient way to decompose other
     tuples, however, and may continue to be used for that purpose.

 -- C Function: int PyArg_UnpackTuple (PyObject *args, const char *name,
          Py_ssize_t min, Py_ssize_t max, ...)

     A simpler form of parameter retrieval which does not use a format
     string to specify the types of the arguments.  Functions which use
     this method to retrieve their parameters should be declared as
     *note METH_VARARGS: 4ac. in function or method tables.  The tuple
     containing the actual parameters should be passed as _args_; it
     must actually be a tuple.  The length of the tuple must be at least
     _min_ and no more than _max_; _min_ and _max_ may be equal.
     Additional arguments must be passed to the function, each of which
     should be a pointer to a *note PyObject*: 3a6. variable; these will
     be filled in with the values from _args_; they will contain
     borrowed references.  The variables which correspond to optional
     parameters not given by _args_ will not be filled in; these should
     be initialized by the caller.  This function returns true on
     success and false if _args_ is not a tuple or contains the wrong
     number of elements; an exception will be set if there was a
     failure.

     This is an example of the use of this function, taken from the
     sources for the ‘_weakref’ helper module for weak references:

          static PyObject *
          weakref_ref(PyObject *self, PyObject *args)
          {
              PyObject *object;
              PyObject *callback = NULL;
              PyObject *result = NULL;

              if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
                  result = PyWeakref_NewRef(object, callback);
              }
              return result;
          }

     The call to *note PyArg_UnpackTuple(): 4aa. in this example is
     entirely equivalent to this call to *note PyArg_ParseTuple(): 31b.:

          PyArg_ParseTuple(args, "O|O:ref", &object, &callback)

     New in version 2.2.

     Changed in version 2.5: This function used an ‘int’ type for _min_
     and _max_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* Py_BuildValue (const char *format, ...)

     Return value: New reference.

     Create a new value based on a format string similar to those
     accepted by the *note PyArg_Parse*(): 2af2. family of functions and
     a sequence of values.  Returns the value or _NULL_ in the case of
     an error; an exception will be raised if _NULL_ is returned.

     *note Py_BuildValue(): 3a8. does not always build a tuple.  It
     builds a tuple only if its format string contains two or more
     format units.  If the format string is empty, it returns ‘None’; if
     it contains exactly one format unit, it returns whatever object is
     described by that format unit.  To force it to return a tuple of
     size 0 or one, parenthesize the format string.

     When memory buffers are passed as parameters to supply data to
     build objects, as for the ‘s’ and ‘s#’ formats, the required data
     is copied.  Buffers provided by the caller are never referenced by
     the objects created by *note Py_BuildValue(): 3a8.  In other words,
     if your code invokes ‘malloc()’ and passes the allocated memory to
     *note Py_BuildValue(): 3a8, your code is responsible for calling
     ‘free()’ for that memory once *note Py_BuildValue(): 3a8. returns.

     In the following description, the quoted form is the format unit;
     the entry in (round) parentheses is the Python object type that the
     format unit will return; and the entry in [square] brackets is the
     type of the C value(s) to be passed.

     The characters space, tab, colon and comma are ignored in format
     strings (but not within format units such as ‘s#’).  This can be
     used to make long format strings a tad more readable.

     ‘s’ (string) [char *]

          Convert a null-terminated C string to a Python object.  If the
          C string pointer is _NULL_, ‘None’ is used.

     ‘s#’ (string) [char *, int]

          Convert a C string and its length to a Python object.  If the
          C string pointer is _NULL_, the length is ignored and ‘None’
          is returned.

     ‘z’ (string or ‘None’) [char *]

          Same as ‘s’.

     ‘z#’ (string or ‘None’) [char *, int]

          Same as ‘s#’.

     ‘u’ (Unicode string) [Py_UNICODE *]

          Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)
          data to a Python Unicode object.  If the Unicode buffer
          pointer is _NULL_, ‘None’ is returned.

     ‘u#’ (Unicode string) [Py_UNICODE *, int]

          Convert a Unicode (UCS-2 or UCS-4) data buffer and its length
          to a Python Unicode object.  If the Unicode buffer pointer is
          _NULL_, the length is ignored and ‘None’ is returned.

     ‘i’ (integer) [int]

          Convert a plain C ‘int’ to a Python integer object.

     ‘b’ (integer) [char]

          Convert a plain C ‘char’ to a Python integer object.

     ‘h’ (integer) [short int]

          Convert a plain C ‘short int’ to a Python integer object.

     ‘l’ (integer) [long int]

          Convert a C ‘long int’ to a Python integer object.

     ‘B’ (integer) [unsigned char]

          Convert a C ‘unsigned char’ to a Python integer object.

     ‘H’ (integer) [unsigned short int]

          Convert a C ‘unsigned short int’ to a Python integer object.

     ‘I’ (integer/long) [unsigned int]

          Convert a C ‘unsigned int’ to a Python integer object or a
          Python long integer object, if it is larger than ‘sys.maxint’.

     ‘k’ (integer/long) [unsigned long]

          Convert a C ‘unsigned long’ to a Python integer object or a
          Python long integer object, if it is larger than ‘sys.maxint’.

     ‘L’ (long) [PY_LONG_LONG]

          Convert a C ‘long long’ to a Python long integer object.  Only
          available on platforms that support ‘long long’.

     ‘K’ (long) [unsigned PY_LONG_LONG]

          Convert a C ‘unsigned long long’ to a Python long integer
          object.  Only available on platforms that support ‘unsigned
          long long’.

     ‘n’ (int) [Py_ssize_t]

          Convert a C ‘Py_ssize_t’ to a Python integer or long integer.

          New in version 2.5.

     ‘c’ (string of length 1) [char]

          Convert a C ‘int’ representing a character to a Python string
          of length 1.

     ‘d’ (float) [double]

          Convert a C ‘double’ to a Python floating point number.

     ‘f’ (float) [float]

          Same as ‘d’.

     ‘D’ (complex) [Py_complex *]

          Convert a C *note Py_complex: 2af3. structure to a Python
          complex number.

     ‘O’ (object) [PyObject *]

          Pass a Python object untouched (except for its reference
          count, which is incremented by one).  If the object passed in
          is a _NULL_ pointer, it is assumed that this was caused
          because the call producing the argument found an error and set
          an exception.  Therefore, *note Py_BuildValue(): 3a8. will
          return _NULL_ but won’t raise an exception.  If no exception
          has been raised yet, *note SystemError: 950. is set.

     ‘S’ (object) [PyObject *]

          Same as ‘O’.

     ‘N’ (object) [PyObject *]

          Same as ‘O’, except it doesn’t increment the reference count
          on the object.  Useful when the object is created by a call to
          an object constructor in the argument list.

     ‘O&’ (object) [_converter_, _anything_]

          Convert _anything_ to a Python object through a _converter_
          function.  The function is called with _anything_ (which
          should be compatible with ‘void *’) as its argument and should
          return a "new" Python object, or _NULL_ if an error occurred.

     ‘(items)’ (tuple) [_matching-items_]

          Convert a sequence of C values to a Python tuple with the same
          number of items.

     ‘[items]’ (list) [_matching-items_]

          Convert a sequence of C values to a Python list with the same
          number of items.

     ‘{items}’ (dictionary) [_matching-items_]

          Convert a sequence of C values to a Python dictionary.  Each
          pair of consecutive C values adds one item to the dictionary,
          serving as key and value, respectively.

     If there is an error in the format string, the *note SystemError:
     950. exception is set and _NULL_ returned.

 -- C Function: PyObject* Py_VaBuildValue (const char *format,
          va_list vargs)

     Identical to *note Py_BuildValue(): 3a8, except that it accepts a
     va_list rather than a variable number of arguments.


File: python.info,  Node: String conversion and formatting,  Next: Reflection,  Prev: Parsing arguments and building values,  Up: Utilities

7.5.7 String conversion and formatting
--------------------------------------

Functions for number conversion and formatted string output.

 -- C Function: int PyOS_snprintf (char *str, size_t size, const
          char *format, ...)

     Output not more than _size_ bytes to _str_ according to the format
     string _format_ and the extra arguments.  See the Unix man page
     ‘snprintf(2)’.

 -- C Function: int PyOS_vsnprintf (char *str, size_t size, const
          char *format, va_list va)

     Output not more than _size_ bytes to _str_ according to the format
     string _format_ and the variable argument list _va_.  Unix man page
     ‘vsnprintf(2)’.

  *note PyOS_snprintf(): 4ae. and *note PyOS_vsnprintf(): 4af. wrap the
Standard C library functions ‘snprintf()’ and ‘vsnprintf()’.  Their
purpose is to guarantee consistent behavior in corner cases, which the
Standard C functions do not.

  The wrappers ensure that _str*[*size_-1] is always ‘'\0'’ upon return.
They never write more than _size_ bytes (including the trailing ‘'\0'’
into str.  Both functions require that ‘str != NULL’, ‘size > 0’ and
‘format != NULL’.

  If the platform doesn’t have ‘vsnprintf()’ and the buffer size needed
to avoid truncation exceeds _size_ by more than 512 bytes, Python aborts
with a _Py_FatalError_.

  The return value (_rv_) for these functions should be interpreted as
follows:

   * When ‘0 <= rv < size’, the output conversion was successful and
     _rv_ characters were written to _str_ (excluding the trailing
     ‘'\0'’ byte at _str*[*rv_]).

   * When ‘rv >= size’, the output conversion was truncated and a buffer
     with ‘rv + 1’ bytes would have been needed to succeed.
     _str*[*size_-1] is ‘'\0'’ in this case.

   * When ‘rv < 0’, "something bad happened."  _str*[*size_-1] is ‘'\0'’
     in this case too, but the rest of _str_ is undefined.  The exact
     cause of the error depends on the underlying platform.

  The following functions provide locale-independent string to number
conversions.

 -- C Function: double PyOS_string_to_double (const char *s,
          char **endptr, PyObject *overflow_exception)

     Convert a string ‘s’ to a ‘double’, raising a Python exception on
     failure.  The set of accepted strings corresponds to the set of
     strings accepted by Python’s *note float(): 1eb. constructor,
     except that ‘s’ must not have leading or trailing whitespace.  The
     conversion is independent of the current locale.

     If ‘endptr’ is ‘NULL’, convert the whole string.  Raise ValueError
     and return ‘-1.0’ if the string is not a valid representation of a
     floating-point number.

     If endptr is not ‘NULL’, convert as much of the string as possible
     and set ‘*endptr’ to point to the first unconverted character.  If
     no initial segment of the string is the valid representation of a
     floating-point number, set ‘*endptr’ to point to the beginning of
     the string, raise ValueError, and return ‘-1.0’.

     If ‘s’ represents a value that is too large to store in a float
     (for example, ‘"1e500"’ is such a string on many platforms) then if
     ‘overflow_exception’ is ‘NULL’ return ‘Py_HUGE_VAL’ (with an
     appropriate sign) and don’t set any exception.  Otherwise,
     ‘overflow_exception’ must point to a Python exception object; raise
     that exception and return ‘-1.0’.  In both cases, set ‘*endptr’ to
     point to the first character after the converted value.

     If any other error occurs during the conversion (for example an
     out-of-memory error), set the appropriate Python exception and
     return ‘-1.0’.

     New in version 2.7.

 -- C Function: double PyOS_ascii_strtod (const char *nptr,
          char **endptr)

     Convert a string to a ‘double’.  This function behaves like the
     Standard C function ‘strtod()’ does in the C locale.  It does this
     without changing the current locale, since that would not be
     thread-safe.

     *note PyOS_ascii_strtod(): 2be. should typically be used for
     reading configuration files or other non-user input that should be
     locale independent.

     See the Unix man page ‘strtod(2)’ for details.

     New in version 2.4.

     Deprecated since version 2.7: Use *note PyOS_string_to_double():
     2bd. instead.

 -- C Function: char* PyOS_ascii_formatd (char *buffer, size_t buf_len,
          const char *format, double d)

     Convert a ‘double’ to a string using the ‘'.'’ as the decimal
     separator.  _format_ is a ‘printf()’-style format string specifying
     the number format.  Allowed conversion characters are ‘'e'’, ‘'E'’,
     ‘'f'’, ‘'F'’, ‘'g'’ and ‘'G'’.

     The return value is a pointer to _buffer_ with the converted string
     or NULL if the conversion failed.

     New in version 2.4.

     Deprecated since version 2.7: This function is removed in Python
     2.7 and 3.1.  Use ‘PyOS_double_to_string()’ instead.

 -- C Function: char* PyOS_double_to_string (double val,
          char format_code, int precision, int flags, int *ptype)

     Convert a ‘double’ _val_ to a string using supplied _format_code_,
     _precision_, and _flags_.

     _format_code_ must be one of ‘'e'’, ‘'E'’, ‘'f'’, ‘'F'’, ‘'g'’,
     ‘'G'’ or ‘'r'’.  For ‘'r'’, the supplied _precision_ must be 0 and
     is ignored.  The ‘'r'’ format code specifies the standard *note
     repr(): 145. format.

     _flags_ can be zero or more of the values _Py_DTSF_SIGN_,
     _Py_DTSF_ADD_DOT_0_, or _Py_DTSF_ALT_, or-ed together:

        * _Py_DTSF_SIGN_ means to always precede the returned string
          with a sign character, even if _val_ is non-negative.

        * _Py_DTSF_ADD_DOT_0_ means to ensure that the returned string
          will not look like an integer.

        * _Py_DTSF_ALT_ means to apply "alternate" formatting rules.
          See the documentation for the *note PyOS_snprintf(): 4ae.
          ‘'#'’ specifier for details.

     If _ptype_ is non-NULL, then the value it points to will be set to
     one of _Py_DTST_FINITE_, _Py_DTST_INFINITE_, or _Py_DTST_NAN_,
     signifying that _val_ is a finite number, an infinite number, or
     not a number, respectively.

     The return value is a pointer to _buffer_ with the converted string
     or _NULL_ if the conversion failed.  The caller is responsible for
     freeing the returned string by calling *note PyMem_Free(): 3df.

     New in version 2.7.

 -- C Function: double PyOS_ascii_atof (const char *nptr)

     Convert a string to a ‘double’ in a locale-independent way.

     See the Unix man page ‘atof(2)’ for details.

     New in version 2.4.

     Deprecated since version 3.1: Use *note PyOS_string_to_double():
     2bd. instead.

 -- C Function: char* PyOS_stricmp (char *s1, char *s2)

     Case insensitive comparison of strings.  The function works almost
     identically to ‘strcmp()’ except that it ignores the case.

     New in version 2.6.

 -- C Function: char* PyOS_strnicmp (char *s1, char *s2, Py_ssize_t
           size)

     Case insensitive comparison of strings.  The function works almost
     identically to ‘strncmp()’ except that it ignores the case.

     New in version 2.6.


File: python.info,  Node: Reflection,  Next: Codec registry and support functions,  Prev: String conversion and formatting,  Up: Utilities

7.5.8 Reflection
----------------

 -- C Function: PyObject* PyEval_GetBuiltins ()

     Return value: Borrowed reference.

     Return a dictionary of the builtins in the current execution frame,
     or the interpreter of the thread state if no frame is currently
     executing.

 -- C Function: PyObject* PyEval_GetLocals ()

     Return value: Borrowed reference.

     Return a dictionary of the local variables in the current execution
     frame, or _NULL_ if no frame is currently executing.

 -- C Function: PyObject* PyEval_GetGlobals ()

     Return value: Borrowed reference.

     Return a dictionary of the global variables in the current
     execution frame, or _NULL_ if no frame is currently executing.

 -- C Function: PyFrameObject* PyEval_GetFrame ()

     Return value: Borrowed reference.

     Return the current thread state’s frame, which is _NULL_ if no
     frame is currently executing.

 -- C Function: int PyFrame_GetLineNumber (PyFrameObject *frame)

     Return the line number that _frame_ is currently executing.

 -- C Function: int PyEval_GetRestricted ()

     If there is a current frame and it is executing in restricted mode,
     return true, otherwise false.

 -- C Function: const char* PyEval_GetFuncName (PyObject *func)

     Return the name of _func_ if it is a function, class or instance
     object, else the name of _func_s type.

 -- C Function: const char* PyEval_GetFuncDesc (PyObject *func)

     Return a description string, depending on the type of _func_.
     Return values include "()" for functions and methods, "
     constructor", " instance", and " object".  Concatenated with the
     result of *note PyEval_GetFuncName(): 2b05, the result will be a
     description of _func_.


File: python.info,  Node: Codec registry and support functions,  Prev: Reflection,  Up: Utilities

7.5.9 Codec registry and support functions
------------------------------------------

 -- C Function: int PyCodec_Register (PyObject *search_function)

     Register a new codec search function.

     As side effect, this tries to load the ‘encodings’ package, if not
     yet done, to make sure that it is always first in the list of
     search functions.

 -- C Function: int PyCodec_KnownEncoding (const char *encoding)

     Return ‘1’ or ‘0’ depending on whether there is a registered codec
     for the given _encoding_.

 -- C Function: PyObject* PyCodec_Encode (PyObject *object, const
          char *encoding, const char *errors)

     Generic codec based encoding API.

     _object_ is passed through the encoder function found for the given
     _encoding_ using the error handling method defined by _errors_.
     _errors_ may be _NULL_ to use the default method defined for the
     codec.  Raises a *note LookupError: 891. if no encoder can be
     found.

 -- C Function: PyObject* PyCodec_Decode (PyObject *object, const
          char *encoding, const char *errors)

     Generic codec based decoding API.

     _object_ is passed through the decoder function found for the given
     _encoding_ using the error handling method defined by _errors_.
     _errors_ may be _NULL_ to use the default method defined for the
     codec.  Raises a *note LookupError: 891. if no encoder can be
     found.

* Menu:

* Codec lookup API:: 
* Registry API for Unicode encoding error handlers:: 


File: python.info,  Node: Codec lookup API,  Next: Registry API for Unicode encoding error handlers,  Up: Codec registry and support functions

7.5.9.1 Codec lookup API
........................

In the following functions, the _encoding_ string is looked up converted
to all lower-case characters, which makes encodings looked up through
this mechanism effectively case-insensitive.  If no codec is found, a
*note KeyError: 205. is set and _NULL_ returned.

 -- C Function: PyObject* PyCodec_Encoder (const char *encoding)

     Get an encoder function for the given _encoding_.

 -- C Function: PyObject* PyCodec_Decoder (const char *encoding)

     Get a decoder function for the given _encoding_.

 -- C Function: PyObject* PyCodec_IncrementalEncoder (const
          char *encoding, const char *errors)

     Get an *note IncrementalEncoder: a4e. object for the given
     _encoding_.

 -- C Function: PyObject* PyCodec_IncrementalDecoder (const
          char *encoding, const char *errors)

     Get an *note IncrementalDecoder: a4f. object for the given
     _encoding_.

 -- C Function: PyObject* PyCodec_StreamReader (const char *encoding,
          PyObject *stream, const char *errors)

     Get a *note StreamReader: a50. factory function for the given
     _encoding_.

 -- C Function: PyObject* PyCodec_StreamWriter (const char *encoding,
          PyObject *stream, const char *errors)

     Get a *note StreamWriter: a51. factory function for the given
     _encoding_.


File: python.info,  Node: Registry API for Unicode encoding error handlers,  Prev: Codec lookup API,  Up: Codec registry and support functions

7.5.9.2 Registry API for Unicode encoding error handlers
........................................................

 -- C Function: int PyCodec_RegisterError (const char *name,
          PyObject *error)

     Register the error handling callback function _error_ under the
     given _name_.  This callback function will be called by a codec
     when it encounters unencodable characters/undecodable bytes and
     _name_ is specified as the error parameter in the call to the
     encode/decode function.

     The callback gets a single argument, an instance of *note
     UnicodeEncodeError: 957, *note UnicodeDecodeError: 958. or *note
     UnicodeTranslateError: 959. that holds information about the
     problematic sequence of characters or bytes and their offset in the
     original string (see *note Unicode Exception Objects: 2a94. for
     functions to extract this information).  The callback must either
     raise the given exception, or return a two-item tuple containing
     the replacement for the problematic sequence, and an integer giving
     the offset in the original string at which encoding/decoding should
     be resumed.

     Return ‘0’ on success, ‘-1’ on error.

 -- C Function: PyObject* PyCodec_LookupError (const char *name)

     Lookup the error handling callback function registered under
     _name_.  As a special case _NULL_ can be passed, in which case the
     error handling callback for "strict" will be returned.

 -- C Function: PyObject* PyCodec_StrictErrors (PyObject *exc)

     Raise _exc_ as an exception.

 -- C Function: PyObject* PyCodec_IgnoreErrors (PyObject *exc)

     Ignore the unicode error, skipping the faulty input.

 -- C Function: PyObject* PyCodec_ReplaceErrors (PyObject *exc)

     Replace the unicode encode error with ‘?’ or ‘U+FFFD’.

 -- C Function: PyObject* PyCodec_XMLCharRefReplaceErrors
          (PyObject *exc)

     Replace the unicode encode error with XML character references.

 -- C Function: PyObject* PyCodec_BackslashReplaceErrors (PyObject *exc)

     Replace the unicode encode error with backslash escapes (‘\x’, ‘\u’
     and ‘\U’).


File: python.info,  Node: Abstract Objects Layer,  Next: Concrete Objects Layer,  Prev: Utilities,  Up: Python/C API Reference Manual

7.6 Abstract Objects Layer
==========================

The functions in this chapter interact with Python objects regardless of
their type, or with wide classes of object types (e.g.  all numerical
types, or all sequence types).  When used on object types for which they
do not apply, they will raise a Python exception.

  It is not possible to use these functions on objects that are not
properly initialized, such as a list object that has been created by
*note PyList_New(): 2a41, but whose items have not been set to some
non-‘NULL’ value yet.

* Menu:

* Object Protocol:: 
* Number Protocol:: 
* Sequence Protocol:: 
* Mapping Protocol:: 
* Iterator Protocol:: 
* Old Buffer Protocol:: 


File: python.info,  Node: Object Protocol,  Next: Number Protocol,  Up: Abstract Objects Layer

7.6.1 Object Protocol
---------------------

 -- C Function: int PyObject_Print (PyObject *o, FILE *fp, int flags)

     Print an object _o_, on file _fp_.  Returns ‘-1’ on error.  The
     flags argument is used to enable certain printing options.  The
     only option currently supported is ‘Py_PRINT_RAW’; if given, the
     *note str(): 1ea. of the object is written instead of the *note
     repr(): 145.

 -- C Function: int PyObject_HasAttr (PyObject *o, PyObject *attr_name)

     Returns ‘1’ if _o_ has the attribute _attr_name_, and ‘0’
     otherwise.  This is equivalent to the Python expression ‘hasattr(o,
     attr_name)’.  This function always succeeds.

 -- C Function: int PyObject_HasAttrString (PyObject *o, const
          char *attr_name)

     Returns ‘1’ if _o_ has the attribute _attr_name_, and ‘0’
     otherwise.  This is equivalent to the Python expression ‘hasattr(o,
     attr_name)’.  This function always succeeds.

 -- C Function: PyObject* PyObject_GetAttr (PyObject *o,
          PyObject *attr_name)

     Return value: New reference.

     Retrieve an attribute named _attr_name_ from object _o_.  Returns
     the attribute value on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression ‘o.attr_name’.

 -- C Function: PyObject* PyObject_GetAttrString (PyObject *o, const
          char *attr_name)

     Return value: New reference.

     Retrieve an attribute named _attr_name_ from object _o_.  Returns
     the attribute value on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression ‘o.attr_name’.

 -- C Function: PyObject* PyObject_GenericGetAttr (PyObject *o,
          PyObject *name)

     Generic attribute getter function that is meant to be put into a
     type object’s ‘tp_getattro’ slot.  It looks for a descriptor in the
     dictionary of classes in the object’s MRO as well as an attribute
     in the object’s *note __dict__: 6fe. (if present).  As outlined in
     *note Implementing Descriptors: 6fb, data descriptors take
     preference over instance attributes, while non-data descriptors
     don’t.  Otherwise, an *note AttributeError: 1f8. is raised.

 -- C Function: int PyObject_SetAttr (PyObject *o, PyObject *attr_name,
          PyObject *v)

     Set the value of the attribute named _attr_name_, for object _o_,
     to the value _v_.  Returns ‘-1’ on failure.  This is the equivalent
     of the Python statement ‘o.attr_name = v’.

 -- C Function: int PyObject_SetAttrString (PyObject *o, const
          char *attr_name, PyObject *v)

     Set the value of the attribute named _attr_name_, for object _o_,
     to the value _v_.  Returns ‘-1’ on failure.  This is the equivalent
     of the Python statement ‘o.attr_name = v’.

 -- C Function: int PyObject_GenericSetAttr (PyObject *o,
          PyObject *name, PyObject *value)

     Generic attribute setter function that is meant to be put into a
     type object’s ‘tp_setattro’ slot.  It looks for a data descriptor
     in the dictionary of classes in the object’s MRO, and if found it
     takes preference over setting the attribute in the instance
     dictionary.  Otherwise, the attribute is set in the object’s *note
     __dict__: 6fe. (if present).  Otherwise, an *note AttributeError:
     1f8. is raised and ‘-1’ is returned.

 -- C Function: int PyObject_DelAttr (PyObject *o, PyObject *attr_name)

     Delete attribute named _attr_name_, for object _o_.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘del
     o.attr_name’.

 -- C Function: int PyObject_DelAttrString (PyObject *o, const
          char *attr_name)

     Delete attribute named _attr_name_, for object _o_.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘del
     o.attr_name’.

 -- C Function: PyObject* PyObject_RichCompare (PyObject *o1,
          PyObject *o2, int opid)

     Return value: New reference.

     Compare the values of _o1_ and _o2_ using the operation specified
     by _opid_, which must be one of ‘Py_LT’, ‘Py_LE’, ‘Py_EQ’, ‘Py_NE’,
     ‘Py_GT’, or ‘Py_GE’, corresponding to ‘<’, ‘<=’, ‘==’, ‘!=’, ‘>’,
     or ‘>=’ respectively.  This is the equivalent of the Python
     expression ‘o1 op o2’, where ‘op’ is the operator corresponding to
     _opid_.  Returns the value of the comparison on success, or _NULL_
     on failure.

 -- C Function: int PyObject_RichCompareBool (PyObject *o1,
          PyObject *o2, int opid)

     Compare the values of _o1_ and _o2_ using the operation specified
     by _opid_, which must be one of ‘Py_LT’, ‘Py_LE’, ‘Py_EQ’, ‘Py_NE’,
     ‘Py_GT’, or ‘Py_GE’, corresponding to ‘<’, ‘<=’, ‘==’, ‘!=’, ‘>’,
     or ‘>=’ respectively.  Returns ‘-1’ on error, ‘0’ if the result is
     false, ‘1’ otherwise.  This is the equivalent of the Python
     expression ‘o1 op o2’, where ‘op’ is the operator corresponding to
     _opid_.

     Note: If _o1_ and _o2_ are the same object, *note
     PyObject_RichCompareBool(): 2b2c. will always return ‘1’ for
     ‘Py_EQ’ and ‘0’ for ‘Py_NE’.

 -- C Function: int PyObject_Cmp (PyObject *o1, PyObject *o2,
          int *result)

     Compare the values of _o1_ and _o2_ using a routine provided by
     _o1_, if one exists, otherwise with a routine provided by _o2_.
     The result of the comparison is returned in _result_.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘result
     = cmp(o1, o2)’.

 -- C Function: int PyObject_Compare (PyObject *o1, PyObject *o2)

     Compare the values of _o1_ and _o2_ using a routine provided by
     _o1_, if one exists, otherwise with a routine provided by _o2_.
     Returns the result of the comparison on success.  On error, the
     value returned is undefined; use *note PyErr_Occurred(): 299c. to
     detect an error.  This is equivalent to the Python expression
     ‘cmp(o1, o2)’.

 -- C Function: PyObject* PyObject_Repr (PyObject *o)

     Return value: New reference.

     Compute a string representation of object _o_.  Returns the string
     representation on success, _NULL_ on failure.  This is the
     equivalent of the Python expression ‘repr(o)’.  Called by the *note
     repr(): 145. built-in function and by reverse quotes.

 -- C Function: PyObject* PyObject_Str (PyObject *o)

     Return value: New reference.

     Compute a string representation of object _o_.  Returns the string
     representation on success, _NULL_ on failure.  This is the
     equivalent of the Python expression ‘str(o)’.  Called by the *note
     str(): 1ea. built-in function and by the *note print: 4e0.
     statement.

 -- C Function: PyObject* PyObject_Bytes (PyObject *o)

     Compute a bytes representation of object _o_.  In 2.x, this is just
     a alias for *note PyObject_Str(): 2b2e.

 -- C Function: PyObject* PyObject_Unicode (PyObject *o)

     Return value: New reference.

     Compute a Unicode string representation of object _o_.  Returns the
     Unicode string representation on success, _NULL_ on failure.  This
     is the equivalent of the Python expression ‘unicode(o)’.  Called by
     the *note unicode(): 1f5. built-in function.

 -- C Function: int PyObject_IsInstance (PyObject *inst, PyObject *cls)

     Returns ‘1’ if _inst_ is an instance of the class _cls_ or a
     subclass of _cls_, or ‘0’ if not.  On error, returns ‘-1’ and sets
     an exception.  If _cls_ is a type object rather than a class
     object, *note PyObject_IsInstance(): 2b31. returns ‘1’ if _inst_ is
     of type _cls_.  If _cls_ is a tuple, the check will be done against
     every entry in _cls_.  The result will be ‘1’ when at least one of
     the checks returns ‘1’, otherwise it will be ‘0’.  If _inst_ is not
     a class instance and _cls_ is neither a type object, nor a class
     object, nor a tuple, _inst_ must have a *note __class__: 6ff.
     attribute — the class relationship of the value of that attribute
     with _cls_ will be used to determine the result of this function.

     New in version 2.1.

     Changed in version 2.2: Support for a tuple as the second argument
     added.

  Subclass determination is done in a fairly straightforward way, but
includes a wrinkle that implementors of extensions to the class system
may want to be aware of.  If ‘A’ and ‘B’ are class objects, ‘B’ is a
subclass of ‘A’ if it inherits from ‘A’ either directly or indirectly.
If either is not a class object, a more general mechanism is used to
determine the class relationship of the two objects.  When testing if
_B_ is a subclass of _A_, if _A_ is _B_, *note PyObject_IsSubclass():
2b32. returns true.  If _A_ and _B_ are different objects, _B_’s *note
__bases__: 6fc. attribute is searched in a depth-first fashion for _A_ —
the presence of the *note __bases__: 6fc. attribute is considered
sufficient for this determination.

 -- C Function: int PyObject_IsSubclass (PyObject *derived,
          PyObject *cls)

     Returns ‘1’ if the class _derived_ is identical to or derived from
     the class _cls_, otherwise returns ‘0’.  In case of an error,
     returns ‘-1’.  If _cls_ is a tuple, the check will be done against
     every entry in _cls_.  The result will be ‘1’ when at least one of
     the checks returns ‘1’, otherwise it will be ‘0’.  If either
     _derived_ or _cls_ is not an actual class object (or tuple), this
     function uses the generic algorithm described above.

     New in version 2.1.

     Changed in version 2.3: Older versions of Python did not support a
     tuple as the second argument.

 -- C Function: int PyCallable_Check (PyObject *o)

     Determine if the object _o_ is callable.  Return ‘1’ if the object
     is callable and ‘0’ otherwise.  This function always succeeds.

 -- C Function: PyObject* PyObject_Call (PyObject *callable_object,
          PyObject *args, PyObject *kw)

     Return value: New reference.

     Call a callable Python object _callable_object_, with arguments
     given by the tuple _args_, and named arguments given by the
     dictionary _kw_.  If no named arguments are needed, _kw_ may be
     _NULL_. _args_ must not be _NULL_, use an empty tuple if no
     arguments are needed.  Returns the result of the call on success,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression ‘apply(callable_object, args, kw)’ or
     ‘callable_object(*args, **kw)’.

     New in version 2.2.

 -- C Function: PyObject* PyObject_CallObject
          (PyObject *callable_object, PyObject *args)

     Return value: New reference.

     Call a callable Python object _callable_object_, with arguments
     given by the tuple _args_.  If no arguments are needed, then _args_
     may be _NULL_. Returns the result of the call on success, or _NULL_
     on failure.  This is the equivalent of the Python expression
     ‘apply(callable_object, args)’ or ‘callable_object(*args)’.

 -- C Function: PyObject* PyObject_CallFunction (PyObject *callable,
          char *format, ...)

     Return value: New reference.

     Call a callable Python object _callable_, with a variable number of
     C arguments.  The C arguments are described using a *note
     Py_BuildValue(): 3a8. style format string.  The format may be
     _NULL_, indicating that no arguments are provided.  Returns the
     result of the call on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression ‘apply(callable, args)’ or
     ‘callable(*args)’.  Note that if you only pass *note PyObject *:
     3a6. args, *note PyObject_CallFunctionObjArgs(): 2b35. is a faster
     alternative.

 -- C Function: PyObject* PyObject_CallMethod (PyObject *o,
          char *method, char *format, ...)

     Return value: New reference.

     Call the method named _method_ of object _o_ with a variable number
     of C arguments.  The C arguments are described by a *note
     Py_BuildValue(): 3a8. format string that should produce a tuple.
     The format may be _NULL_, indicating that no arguments are
     provided.  Returns the result of the call on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression
     ‘o.method(args)’.  Note that if you only pass *note PyObject *:
     3a6. args, *note PyObject_CallMethodObjArgs(): 2b37. is a faster
     alternative.

 -- C Function: PyObject* PyObject_CallFunctionObjArgs
          (PyObject *callable, ..., NULL)

     Return value: New reference.

     Call a callable Python object _callable_, with a variable number of
     *note PyObject*: 3a6. arguments.  The arguments are provided as a
     variable number of parameters followed by _NULL_. Returns the
     result of the call on success, or _NULL_ on failure.

     New in version 2.2.

 -- C Function: PyObject* PyObject_CallMethodObjArgs (PyObject *o,
          PyObject *name, ..., NULL)

     Return value: New reference.

     Calls a method of the object _o_, where the name of the method is
     given as a Python string object in _name_.  It is called with a
     variable number of *note PyObject*: 3a6. arguments.  The arguments
     are provided as a variable number of parameters followed by _NULL_.
     Returns the result of the call on success, or _NULL_ on failure.

     New in version 2.2.

 -- C Function: long PyObject_Hash (PyObject *o)

     Compute and return the hash value of an object _o_.  On failure,
     return ‘-1’.  This is the equivalent of the Python expression
     ‘hash(o)’.

 -- C Function: long PyObject_HashNotImplemented (PyObject *o)

     Set a *note TypeError: 218. indicating that ‘type(o)’ is not
     hashable and return ‘-1’.  This function receives special treatment
     when stored in a ‘tp_hash’ slot, allowing a type to explicitly
     indicate to the interpreter that it is not hashable.

     New in version 2.6.

 -- C Function: int PyObject_IsTrue (PyObject *o)

     Returns ‘1’ if the object _o_ is considered to be true, and ‘0’
     otherwise.  This is equivalent to the Python expression ‘not not
     o’.  On failure, return ‘-1’.

 -- C Function: int PyObject_Not (PyObject *o)

     Returns ‘0’ if the object _o_ is considered to be true, and ‘1’
     otherwise.  This is equivalent to the Python expression ‘not o’.
     On failure, return ‘-1’.

 -- C Function: PyObject* PyObject_Type (PyObject *o)

     Return value: New reference.

     When _o_ is non-_NULL_, returns a type object corresponding to the
     object type of object _o_.  On failure, raises *note SystemError:
     950. and returns _NULL_. This is equivalent to the Python
     expression ‘type(o)’.  This function increments the reference count
     of the return value.  There’s really no reason to use this function
     instead of the common expression ‘o->ob_type’, which returns a
     pointer of type *note PyTypeObject*: 29d9, except when the
     incremented reference count is needed.

 -- C Function: int PyObject_TypeCheck (PyObject *o, PyTypeObject *type)

     Return true if the object _o_ is of type _type_ or a subtype of
     _type_.  Both parameters must be non-_NULL_.

     New in version 2.2.

 -- C Function: Py_ssize_t PyObject_Length (PyObject *o)
 -- C Function: Py_ssize_t PyObject_Size (PyObject *o)

     Return the length of object _o_.  If the object _o_ provides either
     the sequence and mapping protocols, the sequence length is
     returned.  On error, ‘-1’ is returned.  This is the equivalent to
     the Python expression ‘len(o)’.

     Changed in version 2.5: These functions returned an ‘int’ type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyObject_GetItem (PyObject *o, PyObject *key)

     Return value: New reference.

     Return element of _o_ corresponding to the object _key_ or _NULL_
     on failure.  This is the equivalent of the Python expression
     ‘o[key]’.

 -- C Function: int PyObject_SetItem (PyObject *o, PyObject *key,
          PyObject *v)

     Map the object _key_ to the value _v_.  Returns ‘-1’ on failure.
     This is the equivalent of the Python statement ‘o[key] = v’.

 -- C Function: int PyObject_DelItem (PyObject *o, PyObject *key)

     Delete the mapping for _key_ from _o_.  Returns ‘-1’ on failure.
     This is the equivalent of the Python statement ‘del o[key]’.

 -- C Function: int PyObject_AsFileDescriptor (PyObject *o)

     Derives a file descriptor from a Python object.  If the object is
     an integer or long integer, its value is returned.  If not, the
     object’s ‘fileno()’ method is called if it exists; the method must
     return an integer or long integer, which is returned as the file
     descriptor value.  Returns ‘-1’ on failure.

 -- C Function: PyObject* PyObject_Dir (PyObject *o)

     Return value: New reference.

     This is equivalent to the Python expression ‘dir(o)’, returning a
     (possibly empty) list of strings appropriate for the object
     argument, or _NULL_ if there was an error.  If the argument is
     _NULL_, this is like the Python ‘dir()’, returning the names of the
     current locals; in this case, if no execution frame is active then
     _NULL_ is returned but *note PyErr_Occurred(): 299c. will return
     false.

 -- C Function: PyObject* PyObject_GetIter (PyObject *o)

     Return value: New reference.

     This is equivalent to the Python expression ‘iter(o)’.  It returns
     a new iterator for the object argument, or the object itself if the
     object is already an iterator.  Raises *note TypeError: 218. and
     returns _NULL_ if the object cannot be iterated.


File: python.info,  Node: Number Protocol,  Next: Sequence Protocol,  Prev: Object Protocol,  Up: Abstract Objects Layer

7.6.2 Number Protocol
---------------------

 -- C Function: int PyNumber_Check (PyObject *o)

     Returns ‘1’ if the object _o_ provides numeric protocols, and false
     otherwise.  This function always succeeds.

 -- C Function: PyObject* PyNumber_Add (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the result of adding _o1_ and _o2_, or _NULL_ on failure.
     This is the equivalent of the Python expression ‘o1 + o2’.

 -- C Function: PyObject* PyNumber_Subtract (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the result of subtracting _o2_ from _o1_, or _NULL_ on
     failure.  This is the equivalent of the Python expression ‘o1 -
     o2’.

 -- C Function: PyObject* PyNumber_Multiply (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the result of multiplying _o1_ and _o2_, or _NULL_ on
     failure.  This is the equivalent of the Python expression ‘o1 *
     o2’.

 -- C Function: PyObject* PyNumber_Divide (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the result of dividing _o1_ by _o2_, or _NULL_ on failure.
     This is the equivalent of the Python expression ‘o1 / o2’.

 -- C Function: PyObject* PyNumber_FloorDivide (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Return the floor of _o1_ divided by _o2_, or _NULL_ on failure.
     This is equivalent to the "classic" division of integers.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_TrueDivide (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Return a reasonable approximation for the mathematical value of
     _o1_ divided by _o2_, or _NULL_ on failure.  The return value is
     "approximate" because binary floating point numbers are
     approximate; it is not possible to represent all real numbers in
     base two.  This function can return a floating point value when
     passed two integers.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_Remainder (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the remainder of dividing _o1_ by _o2_, or _NULL_ on
     failure.  This is the equivalent of the Python expression ‘o1 %
     o2’.

 -- C Function: PyObject* PyNumber_Divmod (PyObject *o1, PyObject *o2)

     Return value: New reference.

     See the built-in function *note divmod(): 73d.  Returns _NULL_ on
     failure.  This is the equivalent of the Python expression
     ‘divmod(o1, o2)’.

 -- C Function: PyObject* PyNumber_Power (PyObject *o1, PyObject *o2,
          PyObject *o3)

     Return value: New reference.

     See the built-in function *note pow(): 4b5.  Returns _NULL_ on
     failure.  This is the equivalent of the Python expression ‘pow(o1,
     o2, o3)’, where _o3_ is optional.  If _o3_ is to be ignored, pass
     *note Py_None: 29a4. in its place (passing _NULL_ for _o3_ would
     cause an illegal memory access).

 -- C Function: PyObject* PyNumber_Negative (PyObject *o)

     Return value: New reference.

     Returns the negation of _o_ on success, or _NULL_ on failure.  This
     is the equivalent of the Python expression ‘-o’.

 -- C Function: PyObject* PyNumber_Positive (PyObject *o)

     Return value: New reference.

     Returns _o_ on success, or _NULL_ on failure.  This is the
     equivalent of the Python expression ‘+o’.

 -- C Function: PyObject* PyNumber_Absolute (PyObject *o)

     Return value: New reference.

     Returns the absolute value of _o_, or _NULL_ on failure.  This is
     the equivalent of the Python expression ‘abs(o)’.

 -- C Function: PyObject* PyNumber_Invert (PyObject *o)

     Return value: New reference.

     Returns the bitwise negation of _o_ on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression ‘~o’.

 -- C Function: PyObject* PyNumber_Lshift (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the result of left shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python expression
     ‘o1 << o2’.

 -- C Function: PyObject* PyNumber_Rshift (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the result of right shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python expression
     ‘o1 >> o2’.

 -- C Function: PyObject* PyNumber_And (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the "bitwise and" of _o1_ and _o2_ on success and _NULL_ on
     failure.  This is the equivalent of the Python expression ‘o1 &
     o2’.

 -- C Function: PyObject* PyNumber_Xor (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the "bitwise exclusive or" of _o1_ by _o2_ on success, or
     _NULL_ on failure.  This is the equivalent of the Python expression
     ‘o1 ^ o2’.

 -- C Function: PyObject* PyNumber_Or (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Returns the "bitwise or" of _o1_ and _o2_ on success, or _NULL_ on
     failure.  This is the equivalent of the Python expression ‘o1 |
     o2’.

 -- C Function: PyObject* PyNumber_InPlaceAdd (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the result of adding _o1_ and _o2_, or _NULL_ on failure.
     The operation is done _in-place_ when _o1_ supports it.  This is
     the equivalent of the Python statement ‘o1 += o2’.

 -- C Function: PyObject* PyNumber_InPlaceSubtract (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the result of subtracting _o2_ from _o1_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement ‘o1 -= o2’.

 -- C Function: PyObject* PyNumber_InPlaceMultiply (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the result of multiplying _o1_ and _o2_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement ‘o1 *= o2’.

 -- C Function: PyObject* PyNumber_InPlaceDivide (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the result of dividing _o1_ by _o2_, or _NULL_ on failure.
     The operation is done _in-place_ when _o1_ supports it.  This is
     the equivalent of the Python statement ‘o1 /= o2’.

 -- C Function: PyObject* PyNumber_InPlaceFloorDivide (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the mathematical floor of dividing _o1_ by _o2_, or _NULL_
     on failure.  The operation is done _in-place_ when _o1_ supports
     it.  This is the equivalent of the Python statement ‘o1 //= o2’.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_InPlaceTrueDivide (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Return a reasonable approximation for the mathematical value of
     _o1_ divided by _o2_, or _NULL_ on failure.  The return value is
     "approximate" because binary floating point numbers are
     approximate; it is not possible to represent all real numbers in
     base two.  This function can return a floating point value when
     passed two integers.  The operation is done _in-place_ when _o1_
     supports it.

     New in version 2.2.

 -- C Function: PyObject* PyNumber_InPlaceRemainder (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the remainder of dividing _o1_ by _o2_, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement ‘o1 %= o2’.

 -- C Function: PyObject* PyNumber_InPlacePower (PyObject *o1,
          PyObject *o2, PyObject *o3)

     Return value: New reference.

     See the built-in function *note pow(): 4b5.  Returns _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement ‘o1 **= o2’ when o3
     is *note Py_None: 29a4, or an in-place variant of ‘pow(o1, o2, o3)’
     otherwise.  If _o3_ is to be ignored, pass *note Py_None: 29a4. in
     its place (passing _NULL_ for _o3_ would cause an illegal memory
     access).

 -- C Function: PyObject* PyNumber_InPlaceLshift (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the result of left shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement ‘o1
     <<= o2’.

 -- C Function: PyObject* PyNumber_InPlaceRshift (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the result of right shifting _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement ‘o1
     >>= o2’.

 -- C Function: PyObject* PyNumber_InPlaceAnd (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the "bitwise and" of _o1_ and _o2_ on success and _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement ‘o1 &= o2’.

 -- C Function: PyObject* PyNumber_InPlaceXor (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the "bitwise exclusive or" of _o1_ by _o2_ on success, or
     _NULL_ on failure.  The operation is done _in-place_ when _o1_
     supports it.  This is the equivalent of the Python statement ‘o1 ^=
     o2’.

 -- C Function: PyObject* PyNumber_InPlaceOr (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Returns the "bitwise or" of _o1_ and _o2_ on success, or _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python statement ‘o1 |= o2’.

 -- C Function: int PyNumber_Coerce (PyObject **p1, PyObject **p2)

     This function takes the addresses of two variables of type *note
     PyObject*: 3a6.  If the objects pointed to by ‘*p1’ and ‘*p2’ have
     the same type, increment their reference count and return ‘0’
     (success).  If the objects can be converted to a common numeric
     type, replace ‘*p1’ and ‘*p2’ by their converted value (with ’new’
     reference counts), and return ‘0’.  If no conversion is possible,
     or if some other error occurs, return ‘-1’ (failure) and don’t
     increment the reference counts.  The call ‘PyNumber_Coerce(&o1,
     &o2)’ is equivalent to the Python statement ‘o1, o2 = coerce(o1,
     o2)’.

 -- C Function: int PyNumber_CoerceEx (PyObject **p1, PyObject **p2)

     This function is similar to *note PyNumber_Coerce(): 2b65, except
     that it returns ‘1’ when the conversion is not possible and when no
     error is raised.  Reference counts are still not increased in this
     case.

 -- C Function: PyObject* PyNumber_Int (PyObject *o)

     Return value: New reference.

     Returns the _o_ converted to an integer object on success, or
     _NULL_ on failure.  If the argument is outside the integer range a
     long object will be returned instead.  This is the equivalent of
     the Python expression ‘int(o)’.

 -- C Function: PyObject* PyNumber_Long (PyObject *o)

     Return value: New reference.

     Returns the _o_ converted to a long integer object on success, or
     _NULL_ on failure.  This is the equivalent of the Python expression
     ‘long(o)’.

 -- C Function: PyObject* PyNumber_Float (PyObject *o)

     Return value: New reference.

     Returns the _o_ converted to a float object on success, or _NULL_
     on failure.  This is the equivalent of the Python expression
     ‘float(o)’.

 -- C Function: PyObject* PyNumber_Index (PyObject *o)

     Returns the _o_ converted to a Python int or long on success or
     _NULL_ with a *note TypeError: 218. exception raised on failure.

     New in version 2.5.

 -- C Function: PyObject* PyNumber_ToBase (PyObject *n, int base)

     Returns the integer _n_ converted to _base_ as a string with a base
     marker of ‘'0b'’, ‘'0o'’, or ‘'0x'’ if applicable.  When _base_ is
     not 2, 8, 10, or 16, the format is ‘'x#num'’ where x is the base.
     If _n_ is not an int object, it is converted with *note
     PyNumber_Index(): 2b6a. first.

     New in version 2.6.

 -- C Function: Py_ssize_t PyNumber_AsSsize_t (PyObject *o,
          PyObject *exc)

     Returns _o_ converted to a Py_ssize_t value if _o_ can be
     interpreted as an integer.  If _o_ can be converted to a Python int
     or long but the attempt to convert to a Py_ssize_t value would
     raise an *note OverflowError: 2db, then the _exc_ argument is the
     type of exception that will be raised (usually *note IndexError:
     4e1. or *note OverflowError: 2db.).  If _exc_ is _NULL_, then the
     exception is cleared and the value is clipped to _PY_SSIZE_T_MIN_
     for a negative integer or _PY_SSIZE_T_MAX_ for a positive integer.

     New in version 2.5.

 -- C Function: int PyIndex_Check (PyObject *o)

     Returns True if _o_ is an index integer (has the nb_index slot of
     the tp_as_number structure filled in).

     New in version 2.5.


File: python.info,  Node: Sequence Protocol,  Next: Mapping Protocol,  Prev: Number Protocol,  Up: Abstract Objects Layer

7.6.3 Sequence Protocol
-----------------------

 -- C Function: int PySequence_Check (PyObject *o)

     Return ‘1’ if the object provides sequence protocol, and ‘0’
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PySequence_Size (PyObject *o)
 -- C Function: Py_ssize_t PySequence_Length (PyObject *o)

     Returns the number of objects in sequence _o_ on success, and ‘-1’
     on failure.  For objects that do not provide sequence protocol,
     this is equivalent to the Python expression ‘len(o)’.

     Changed in version 2.5: These functions returned an ‘int’ type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PySequence_Concat (PyObject *o1, PyObject *o2)

     Return value: New reference.

     Return the concatenation of _o1_ and _o2_ on success, and _NULL_ on
     failure.  This is the equivalent of the Python expression ‘o1 +
     o2’.

 -- C Function: PyObject* PySequence_Repeat (PyObject *o,
          Py_ssize_t count)

     Return value: New reference.

     Return the result of repeating sequence object _o_ _count_ times,
     or _NULL_ on failure.  This is the equivalent of the Python
     expression ‘o * count’.

     Changed in version 2.5: This function used an ‘int’ type for
     _count_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PySequence_InPlaceConcat (PyObject *o1,
          PyObject *o2)

     Return value: New reference.

     Return the concatenation of _o1_ and _o2_ on success, and _NULL_ on
     failure.  The operation is done _in-place_ when _o1_ supports it.
     This is the equivalent of the Python expression ‘o1 += o2’.

 -- C Function: PyObject* PySequence_InPlaceRepeat (PyObject *o,
          Py_ssize_t count)

     Return value: New reference.

     Return the result of repeating sequence object _o_ _count_ times,
     or _NULL_ on failure.  The operation is done _in-place_ when _o_
     supports it.  This is the equivalent of the Python expression ‘o *=
     count’.

     Changed in version 2.5: This function used an ‘int’ type for
     _count_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PySequence_GetItem (PyObject *o, Py_ssize_t i)

     Return value: New reference.

     Return the _i_th element of _o_, or _NULL_ on failure.  This is the
     equivalent of the Python expression ‘o[i]’.

     Changed in version 2.5: This function used an ‘int’ type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PySequence_GetSlice (PyObject *o,
          Py_ssize_t i1, Py_ssize_t i2)

     Return value: New reference.

     Return the slice of sequence object _o_ between _i1_ and _i2_, or
     _NULL_ on failure.  This is the equivalent of the Python expression
     ‘o[i1:i2]’.

     Changed in version 2.5: This function used an ‘int’ type for _i1_
     and _i2_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PySequence_SetItem (PyObject *o, Py_ssize_t i,
          PyObject *v)

     Assign object _v_ to the _i_th element of _o_.  Returns ‘-1’ on
     failure.  This is the equivalent of the Python statement ‘o[i] =
     v’.  This function _does not_ steal a reference to _v_.

     Changed in version 2.5: This function used an ‘int’ type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PySequence_DelItem (PyObject *o, Py_ssize_t i)

     Delete the _i_th element of object _o_.  Returns ‘-1’ on failure.
     This is the equivalent of the Python statement ‘del o[i]’.

     Changed in version 2.5: This function used an ‘int’ type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PySequence_SetSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2, PyObject *v)

     Assign the sequence object _v_ to the slice in sequence object _o_
     from _i1_ to _i2_.  This is the equivalent of the Python statement
     ‘o[i1:i2] = v’.

     Changed in version 2.5: This function used an ‘int’ type for _i1_
     and _i2_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PySequence_DelSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2)

     Delete the slice in sequence object _o_ from _i1_ to _i2_.  Returns
     ‘-1’ on failure.  This is the equivalent of the Python statement
     ‘del o[i1:i2]’.

     Changed in version 2.5: This function used an ‘int’ type for _i1_
     and _i2_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: Py_ssize_t PySequence_Count (PyObject *o,
          PyObject *value)

     Return the number of occurrences of _value_ in _o_, that is, return
     the number of keys for which ‘o[key] == value’.  On failure, return
     ‘-1’.  This is equivalent to the Python expression
     ‘o.count(value)’.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PySequence_Contains (PyObject *o, PyObject *value)

     Determine if _o_ contains _value_.  If an item in _o_ is equal to
     _value_, return ‘1’, otherwise return ‘0’.  On error, return ‘-1’.
     This is equivalent to the Python expression ‘value in o’.

 -- C Function: Py_ssize_t PySequence_Index (PyObject *o,
          PyObject *value)

     Return the first index _i_ for which ‘o[i] == value’.  On error,
     return ‘-1’.  This is equivalent to the Python expression
     ‘o.index(value)’.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PySequence_List (PyObject *o)

     Return value: New reference.

     Return a list object with the same contents as the arbitrary
     sequence _o_.  The returned list is guaranteed to be new.

 -- C Function: PyObject* PySequence_Tuple (PyObject *o)

     Return value: New reference.

     Return a tuple object with the same contents as the arbitrary
     sequence _o_ or _NULL_ on failure.  If _o_ is a tuple, a new
     reference will be returned, otherwise a tuple will be constructed
     with the appropriate contents.  This is equivalent to the Python
     expression ‘tuple(o)’.

 -- C Function: PyObject* PySequence_Fast (PyObject *o, const char *m)

     Return value: New reference.

     Return the sequence _o_ as a list, unless it is already a tuple or
     list, in which case _o_ is returned.  Use *note
     PySequence_Fast_GET_ITEM(): 2b82. to access the members of the
     result.  Returns _NULL_ on failure.  If the object is not a
     sequence, raises *note TypeError: 218. with _m_ as the message
     text.

 -- C Function: PyObject* PySequence_Fast_GET_ITEM (PyObject *o,
          Py_ssize_t i)

     Return value: Borrowed reference.

     Return the _i_th element of _o_, assuming that _o_ was returned by
     *note PySequence_Fast(): 2b81, _o_ is not _NULL_, and that _i_ is
     within bounds.

     Changed in version 2.5: This function used an ‘int’ type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject** PySequence_Fast_ITEMS (PyObject *o)

     Return the underlying array of PyObject pointers.  Assumes that _o_
     was returned by *note PySequence_Fast(): 2b81. and _o_ is not
     _NULL_.

     Note, if a list gets resized, the reallocation may relocate the
     items array.  So, only use the underlying array pointer in contexts
     where the sequence cannot change.

     New in version 2.4.

 -- C Function: PyObject* PySequence_ITEM (PyObject *o, Py_ssize_t i)

     Return value: New reference.

     Return the _i_th element of _o_ or _NULL_ on failure.  Macro form
     of *note PySequence_GetItem(): 2a43. but without checking that
     *note PySequence_Check(): 2b71. on _o_ is true and without
     adjustment for negative indices.

     New in version 2.3.

     Changed in version 2.5: This function used an ‘int’ type for _i_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: Py_ssize_t PySequence_Fast_GET_SIZE (PyObject *o)

     Returns the length of _o_, assuming that _o_ was returned by *note
     PySequence_Fast(): 2b81. and that _o_ is not _NULL_. The size can
     also be gotten by calling *note PySequence_Size(): 2b72. on _o_,
     but *note PySequence_Fast_GET_SIZE(): 2b85. is faster because it
     can assume _o_ is a list or tuple.


File: python.info,  Node: Mapping Protocol,  Next: Iterator Protocol,  Prev: Sequence Protocol,  Up: Abstract Objects Layer

7.6.4 Mapping Protocol
----------------------

 -- C Function: int PyMapping_Check (PyObject *o)

     Return ‘1’ if the object provides mapping protocol, and ‘0’
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PyMapping_Size (PyObject *o)
 -- C Function: Py_ssize_t PyMapping_Length (PyObject *o)

     Returns the number of keys in object _o_ on success, and ‘-1’ on
     failure.  For objects that do not provide mapping protocol, this is
     equivalent to the Python expression ‘len(o)’.

     Changed in version 2.5: These functions returned an ‘int’ type.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PyMapping_DelItemString (PyObject *o, char *key)

     Remove the mapping for object _key_ from the object _o_.  Return
     ‘-1’ on failure.  This is equivalent to the Python statement ‘del
     o[key]’.

 -- C Function: int PyMapping_DelItem (PyObject *o, PyObject *key)

     Remove the mapping for object _key_ from the object _o_.  Return
     ‘-1’ on failure.  This is equivalent to the Python statement ‘del
     o[key]’.

 -- C Function: int PyMapping_HasKeyString (PyObject *o, char *key)

     On success, return ‘1’ if the mapping object has the key _key_ and
     ‘0’ otherwise.  This is equivalent to ‘o[key]’, returning ‘True’ on
     success and ‘False’ on an exception.  This function always
     succeeds.

 -- C Function: int PyMapping_HasKey (PyObject *o, PyObject *key)

     Return ‘1’ if the mapping object has the key _key_ and ‘0’
     otherwise.  This is equivalent to ‘o[key]’, returning ‘True’ on
     success and ‘False’ on an exception.  This function always
     succeeds.

 -- C Function: PyObject* PyMapping_Keys (PyObject *o)

     Return value: New reference.

     On success, return a list of the keys in object _o_.  On failure,
     return _NULL_. This is equivalent to the Python expression
     ‘o.keys()’.

 -- C Function: PyObject* PyMapping_Values (PyObject *o)

     Return value: New reference.

     On success, return a list of the values in object _o_.  On failure,
     return _NULL_. This is equivalent to the Python expression
     ‘o.values()’.

 -- C Function: PyObject* PyMapping_Items (PyObject *o)

     Return value: New reference.

     On success, return a list of the items in object _o_, where each
     item is a tuple containing a key-value pair.  On failure, return
     _NULL_. This is equivalent to the Python expression ‘o.items()’.

 -- C Function: PyObject* PyMapping_GetItemString (PyObject *o,
          char *key)

     Return value: New reference.

     Return element of _o_ corresponding to the object _key_ or _NULL_
     on failure.  This is the equivalent of the Python expression
     ‘o[key]’.

 -- C Function: int PyMapping_SetItemString (PyObject *o, char *key,
          PyObject *v)

     Map the object _key_ to the value _v_ in object _o_.  Returns ‘-1’
     on failure.  This is the equivalent of the Python statement ‘o[key]
     = v’.


File: python.info,  Node: Iterator Protocol,  Next: Old Buffer Protocol,  Prev: Mapping Protocol,  Up: Abstract Objects Layer

7.6.5 Iterator Protocol
-----------------------

New in version 2.2.

  There are two functions specifically for working with iterators.

 -- C Function: int PyIter_Check (PyObject *o)

     Return true if the object _o_ supports the iterator protocol.

 -- C Function: PyObject* PyIter_Next (PyObject *o)

     Return value: New reference.

     Return the next value from the iteration _o_.  The object must be
     an iterator (it is up to the caller to check this).  If there are
     no remaining values, returns _NULL_ with no exception set.  If an
     error occurs while retrieving the item, returns _NULL_ and passes
     along the exception.

  To write a loop which iterates over an iterator, the C code should
look something like this:

     PyObject *iterator = PyObject_GetIter(obj);
     PyObject *item;

     if (iterator == NULL) {
         /* propagate error */
     }

     while (item = PyIter_Next(iterator)) {
         /* do something with item */
         ...
         /* release reference when done */
         Py_DECREF(item);
     }

     Py_DECREF(iterator);

     if (PyErr_Occurred()) {
         /* propagate error */
     }
     else {
         /* continue doing useful work */
     }


File: python.info,  Node: Old Buffer Protocol,  Prev: Iterator Protocol,  Up: Abstract Objects Layer

7.6.6 Old Buffer Protocol
-------------------------

This section describes the legacy buffer protocol, which has been
introduced in Python 1.6.  It is still supported but deprecated in the
Python 2.x series.  Python 3 introduces a new buffer protocol which
fixes weaknesses and shortcomings of the protocol, and has been
backported to Python 2.6.  See *note Buffers and Memoryview Objects:
94a. for more information.

 -- C Function: int PyObject_AsCharBuffer (PyObject *obj, const
          char **buffer, Py_ssize_t *buffer_len)

     Returns a pointer to a read-only memory location usable as
     character-based input.  The _obj_ argument must support the
     single-segment character buffer interface.  On success, returns
     ‘0’, sets _buffer_ to the memory location and _buffer_len_ to the
     buffer length.  Returns ‘-1’ and sets a *note TypeError: 218. on
     error.

     New in version 1.6.

     Changed in version 2.5: This function used an ‘int *’ type for
     _buffer_len_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyObject_AsReadBuffer (PyObject *obj, const
          void **buffer, Py_ssize_t *buffer_len)

     Returns a pointer to a read-only memory location containing
     arbitrary data.  The _obj_ argument must support the single-segment
     readable buffer interface.  On success, returns ‘0’, sets _buffer_
     to the memory location and _buffer_len_ to the buffer length.
     Returns ‘-1’ and sets a *note TypeError: 218. on error.

     New in version 1.6.

     Changed in version 2.5: This function used an ‘int *’ type for
     _buffer_len_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyObject_CheckReadBuffer (PyObject *o)

     Returns ‘1’ if _o_ supports the single-segment readable buffer
     interface.  Otherwise returns ‘0’.

     New in version 2.2.

 -- C Function: int PyObject_AsWriteBuffer (PyObject *obj,
          void **buffer, Py_ssize_t *buffer_len)

     Returns a pointer to a writeable memory location.  The _obj_
     argument must support the single-segment, character buffer
     interface.  On success, returns ‘0’, sets _buffer_ to the memory
     location and _buffer_len_ to the buffer length.  Returns ‘-1’ and
     sets a *note TypeError: 218. on error.

     New in version 1.6.

     Changed in version 2.5: This function used an ‘int *’ type for
     _buffer_len_.  This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: Concrete Objects Layer,  Next: Initialization Finalization and Threads,  Prev: Abstract Objects Layer,  Up: Python/C API Reference Manual

7.7 Concrete Objects Layer
==========================

The functions in this chapter are specific to certain Python object
types.  Passing them an object of the wrong type is not a good idea; if
you receive an object from a Python program and you are not sure that it
has the right type, you must perform a type check first; for example, to
check that an object is a dictionary, use *note PyDict_Check(): 2ba4.
The chapter is structured like the "family tree" of Python object types.

     Warning: While the functions described in this chapter carefully
     check the type of the objects which are passed in, many of them do
     not check for _NULL_ being passed instead of a valid object.
     Allowing _NULL_ to be passed in can cause memory access violations
     and immediate termination of the interpreter.

* Menu:

* Fundamental Objects:: 
* Numeric Objects:: 
* Sequence Objects:: 
* Mapping Objects:: 
* Other Objects:: 

Fundamental Objects

* Type Objects: Type Objects<2>. 
* The None Object:: 

Numeric Objects

* Plain Integer Objects:: 
* Boolean Objects: Boolean Objects<2>. 
* Long Integer Objects:: 
* Floating Point Objects:: 
* Complex Number Objects:: 

Complex Number Objects

* Complex Numbers as C Structures:: 
* Complex Numbers as Python Objects:: 

Sequence Objects

* Byte Array Objects:: 
* String/Bytes Objects:: 
* Unicode Objects and Codecs:: 
* Buffers and Memoryview Objects:: 
* Tuple Objects:: 
* List Objects:: 

Byte Array Objects

* Type check macros:: 
* Direct API functions:: 
* Macros:: 

Unicode Objects and Codecs

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 

Unicode Objects

* Unicode Type:: 
* Unicode Character Properties:: 
* Plain Py_UNICODE:: 
* wchar_t Support:: 

Built-in Codecs

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 

Buffers and Memoryview Objects

* The new-style Py_buffer struct:: 
* Buffer related functions:: 
* MemoryView objects:: 
* Old-style buffer objects:: 

Mapping Objects

* Dictionary Objects:: 

Other Objects

* Class and Instance Objects:: 
* Function Objects: Function Objects<2>. 
* Method Objects: Method Objects<2>. 
* File Objects: File Objects<2>. 
* Module Objects:: 
* Iterator Objects:: 
* Descriptor Objects:: 
* Slice Objects:: 
* Weak Reference Objects: Weak Reference Objects<2>. 
* Capsules: Capsules<2>. 
* CObjects:: 
* Cell Objects:: 
* Generator Objects:: 
* DateTime Objects: DateTime Objects<2>. 
* Set Objects: Set Objects<2>. 
* Code Objects: Code Objects<2>. 


File: python.info,  Node: Fundamental Objects,  Next: Numeric Objects,  Up: Concrete Objects Layer

7.7.1 Fundamental Objects
-------------------------

This section describes Python type objects and the singleton object
‘None’.

* Menu:

* Type Objects: Type Objects<2>. 
* The None Object:: 


File: python.info,  Node: Type Objects<2>,  Next: The None Object,  Up: Fundamental Objects

7.7.1.1 Type Objects
....................

 -- C Type: PyTypeObject

     The C structure of the objects used to describe built-in types.

 -- C Variable: PyObject* PyType_Type

     This is the type object for type objects; it is the same object as
     ‘type’ and ‘types.TypeType’ in the Python layer.

 -- C Function: int PyType_Check (PyObject *o)

     Return true if the object _o_ is a type object, including instances
     of types derived from the standard type object.  Return false in
     all other cases.

 -- C Function: int PyType_CheckExact (PyObject *o)

     Return true if the object _o_ is a type object, but not a subtype
     of the standard type object.  Return false in all other cases.

     New in version 2.2.

 -- C Function: unsigned int PyType_ClearCache ()

     Clear the internal lookup cache.  Return the current version tag.

     New in version 2.6.

 -- C Function: void PyType_Modified (PyTypeObject *type)

     Invalidate the internal lookup cache for the type and all of its
     subtypes.  This function must be called after any manual
     modification of the attributes or base classes of the type.

     New in version 2.6.

 -- C Function: int PyType_HasFeature (PyObject *o, int feature)

     Return true if the type object _o_ sets the feature _feature_.
     Type features are denoted by single bit flags.

 -- C Function: int PyType_IS_GC (PyObject *o)

     Return true if the type object includes support for the cycle
     detector; this tests the type flag *note Py_TPFLAGS_HAVE_GC: 29ef.

     New in version 2.0.

 -- C Function: int PyType_IsSubtype (PyTypeObject *a, PyTypeObject *b)

     Return true if _a_ is a subtype of _b_.

     New in version 2.2.

 -- C Function: PyObject* PyType_GenericAlloc (PyTypeObject *type,
          Py_ssize_t nitems)

     Return value: New reference.

     New in version 2.2.

     Changed in version 2.5: This function used an ‘int’ type for
     _nitems_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyType_GenericNew (PyTypeObject *type,
          PyObject *args, PyObject *kwds)

     Return value: New reference.

     New in version 2.2.

 -- C Function: int PyType_Ready (PyTypeObject *type)

     Finalize a type object.  This should be called on all type objects
     to finish their initialization.  This function is responsible for
     adding inherited slots from a type’s base class.  Return ‘0’ on
     success, or return ‘-1’ and sets an exception on error.

     New in version 2.2.


File: python.info,  Node: The None Object,  Prev: Type Objects<2>,  Up: Fundamental Objects

7.7.1.2 The None Object
.......................

Note that the *note PyTypeObject: 29d9. for ‘None’ is not directly
exposed in the Python/C API. Since ‘None’ is a singleton, testing for
object identity (using ‘==’ in C) is sufficient.  There is no
‘PyNone_Check()’ function for the same reason.

 -- C Variable: PyObject* Py_None

     The Python ‘None’ object, denoting lack of value.  This object has
     no methods.  It needs to be treated just like any other object with
     respect to reference counts.

 -- C Macro: Py_RETURN_NONE

     Properly handle returning *note Py_None: 29a4. from within a C
     function.

     New in version 2.4.


File: python.info,  Node: Numeric Objects,  Next: Sequence Objects,  Prev: Fundamental Objects,  Up: Concrete Objects Layer

7.7.2 Numeric Objects
---------------------

* Menu:

* Plain Integer Objects:: 
* Boolean Objects: Boolean Objects<2>. 
* Long Integer Objects:: 
* Floating Point Objects:: 
* Complex Number Objects:: 


File: python.info,  Node: Plain Integer Objects,  Next: Boolean Objects<2>,  Up: Numeric Objects

7.7.2.1 Plain Integer Objects
.............................

 -- C Type: PyIntObject

     This subtype of *note PyObject: 3a6. represents a Python integer
     object.

 -- C Variable: PyTypeObject PyInt_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     plain integer type.  This is the same object as ‘int’ and
     ‘types.IntType’.

 -- C Function: int PyInt_Check (PyObject *o)

     Return true if _o_ is of type *note PyInt_Type: 2bbc. or a subtype
     of *note PyInt_Type: 2bbc.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyInt_CheckExact (PyObject *o)

     Return true if _o_ is of type *note PyInt_Type: 2bbc, but not a
     subtype of *note PyInt_Type: 2bbc.

     New in version 2.2.

 -- C Function: PyObject* PyInt_FromString (char *str, char **pend,
          int base)

     Return value: New reference.

     Return a new *note PyIntObject: 2bbb. or *note PyLongObject: 2bc0.
     based on the string value in _str_, which is interpreted according
     to the radix in _base_.  If _pend_ is non-_NULL_, ‘*pend’ will
     point to the first character in _str_ which follows the
     representation of the number.  If _base_ is ‘0’, the radix will be
     determined based on the leading characters of _str_: if _str_
     starts with ‘'0x'’ or ‘'0X'’, radix 16 will be used; if _str_
     starts with ‘'0'’, radix 8 will be used; otherwise radix 10 will be
     used.  If _base_ is not ‘0’, it must be between ‘2’ and ‘36’,
     inclusive.  Leading spaces are ignored.  If there are no digits,
     *note ValueError: 236. will be raised.  If the string represents a
     number too large to be contained within the machine’s ‘long int’
     type and overflow warnings are being suppressed, a *note
     PyLongObject: 2bc0. will be returned.  If overflow warnings are not
     being suppressed, _NULL_ will be returned in this case.

 -- C Function: PyObject* PyInt_FromLong (long ival)

     Return value: New reference.

     Create a new integer object with a value of _ival_.

     The current implementation keeps an array of integer objects for
     all integers between ‘-5’ and ‘256’, when you create an int in that
     range you actually just get back a reference to the existing
     object.  So it should be possible to change the value of ‘1’.  I
     suspect the behaviour of Python in this case is undefined.  :-)

 -- C Function: PyObject* PyInt_FromSsize_t (Py_ssize_t ival)

     Return value: New reference.

     Create a new integer object with a value of _ival_.  If the value
     is larger than ‘LONG_MAX’ or smaller than ‘LONG_MIN’, a long
     integer object is returned.

     New in version 2.5.

 -- C Function: PyObject* PyInt_FromSize_t (size_t ival)

     Create a new integer object with a value of _ival_.  If the value
     exceeds ‘LONG_MAX’, a long integer object is returned.

     New in version 2.5.

 -- C Function: long PyInt_AsLong (PyObject *io)

     Will first attempt to cast the object to a *note PyIntObject: 2bbb,
     if it is not already one, and then return its value.  If there is
     an error, ‘-1’ is returned, and the caller should check
     ‘PyErr_Occurred()’ to find out whether there was an error, or
     whether the value just happened to be -1.

 -- C Function: long PyInt_AS_LONG (PyObject *io)

     Return the value of the object _io_.  No error checking is
     performed.

 -- C Function: unsigned long PyInt_AsUnsignedLongMask (PyObject *io)

     Will first attempt to cast the object to a *note PyIntObject: 2bbb.
     or *note PyLongObject: 2bc0, if it is not already one, and then
     return its value as unsigned long.  This function does not check
     for overflow.

     New in version 2.3.

 -- C Function: unsigned PY_LONG_LONG PyInt_AsUnsignedLongLongMask
          (PyObject *io)

     Will first attempt to cast the object to a *note PyIntObject: 2bbb.
     or *note PyLongObject: 2bc0, if it is not already one, and then
     return its value as unsigned long long, without checking for
     overflow.

     New in version 2.3.

 -- C Function: Py_ssize_t PyInt_AsSsize_t (PyObject *io)

     Will first attempt to cast the object to a *note PyIntObject: 2bbb.
     or *note PyLongObject: 2bc0, if it is not already one, and then
     return its value as ‘Py_ssize_t’.

     New in version 2.5.

 -- C Function: long PyInt_GetMax ()

     Return the system’s idea of the largest integer it can handle
     (‘LONG_MAX’, as defined in the system header files).

 -- C Function: int PyInt_ClearFreeList ()

     Clear the integer free list.  Return the number of items that could
     not be freed.

     New in version 2.6.


File: python.info,  Node: Boolean Objects<2>,  Next: Long Integer Objects,  Prev: Plain Integer Objects,  Up: Numeric Objects

7.7.2.2 Boolean Objects
.......................

Booleans in Python are implemented as a subclass of integers.  There are
only two booleans, ‘Py_False’ and ‘Py_True’.  As such, the normal
creation and deletion functions don’t apply to booleans.  The following
macros are available, however.

 -- C Function: int PyBool_Check (PyObject *o)

     Return true if _o_ is of type ‘PyBool_Type’.

     New in version 2.3.

 -- C Variable: PyObject* Py_False

     The Python ‘False’ object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Variable: PyObject* Py_True

     The Python ‘True’ object.  This object has no methods.  It needs to
     be treated just like any other object with respect to reference
     counts.

 -- C Macro: Py_RETURN_FALSE

     Return ‘Py_False’ from a function, properly incrementing its
     reference count.

     New in version 2.4.

 -- C Macro: Py_RETURN_TRUE

     Return ‘Py_True’ from a function, properly incrementing its
     reference count.

     New in version 2.4.

 -- C Function: PyObject* PyBool_FromLong (long v)

     Return value: New reference.

     Return a new reference to ‘Py_True’ or ‘Py_False’ depending on the
     truth value of _v_.

     New in version 2.3.


File: python.info,  Node: Long Integer Objects,  Next: Floating Point Objects,  Prev: Boolean Objects<2>,  Up: Numeric Objects

7.7.2.3 Long Integer Objects
............................

 -- C Type: PyLongObject

     This subtype of *note PyObject: 3a6. represents a Python long
     integer object.

 -- C Variable: PyTypeObject PyLong_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     long integer type.  This is the same object as ‘long’ and
     ‘types.LongType’.

 -- C Function: int PyLong_Check (PyObject *p)

     Return true if its argument is a *note PyLongObject: 2bc0. or a
     subtype of *note PyLongObject: 2bc0.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyLong_CheckExact (PyObject *p)

     Return true if its argument is a *note PyLongObject: 2bc0, but not
     a subtype of *note PyLongObject: 2bc0.

     New in version 2.2.

 -- C Function: PyObject* PyLong_FromLong (long v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from _v_, or _NULL_
     on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLong (unsigned long v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from a C ‘unsigned
     long’, or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from a C
     ‘Py_ssize_t’, or _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromSize_t (size_t v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from a C ‘size_t’, or
     _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)

     Return a new *note PyLongObject: 2bc0. object with a value of _v_,
     or _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromSize_t (size_t v)

     Return a new *note PyLongObject: 2bc0. object with a value of _v_,
     or _NULL_ on failure.

     New in version 2.6.

 -- C Function: PyObject* PyLong_FromLongLong (PY_LONG_LONG v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from a C ‘long long’,
     or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLongLong (unsigned
          PY_LONG_LONG v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from a C ‘unsigned
     long long’, or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromDouble (double v)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. object from the integer part
     of _v_, or _NULL_ on failure.

 -- C Function: PyObject* PyLong_FromString (char *str, char **pend,
          int base)

     Return value: New reference.

     Return a new *note PyLongObject: 2bc0. based on the string value in
     _str_, which is interpreted according to the radix in _base_.  If
     _pend_ is non-_NULL_, _*pend_ will point to the first character in
     _str_ which follows the representation of the number.  If _base_ is
     ‘0’, the radix will be determined based on the leading characters
     of _str_: if _str_ starts with ‘'0x'’ or ‘'0X'’, radix 16 will be
     used; if _str_ starts with ‘'0'’, radix 8 will be used; otherwise
     radix 10 will be used.  If _base_ is not ‘0’, it must be between
     ‘2’ and ‘36’, inclusive.  Leading spaces are ignored.  If there are
     no digits, *note ValueError: 236. will be raised.

 -- C Function: PyObject* PyLong_FromUnicode (Py_UNICODE *u,
          Py_ssize_t length, int base)

     Return value: New reference.

     Convert a sequence of Unicode digits to a Python long integer
     value.  The first parameter, _u_, points to the first character of
     the Unicode string, _length_ gives the number of characters, and
     _base_ is the radix for the conversion.  The radix must be in the
     range [2, 36]; if it is out of range, *note ValueError: 236. will
     be raised.

     New in version 1.6.

     Changed in version 2.5: This function used an ‘int’ for _length_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyLong_FromVoidPtr (void *p)

     Return value: New reference.

     Create a Python integer or long integer from the pointer _p_.  The
     pointer value can be retrieved from the resulting value using *note
     PyLong_AsVoidPtr(): 2be1.

     New in version 1.5.2.

     Changed in version 2.5: If the integer is larger than LONG_MAX, a
     positive long integer is returned.

 -- C Function: long PyLong_AsLong (PyObject *pylong)

     Return a C ‘long’ representation of the contents of _pylong_.  If
     _pylong_ is greater than ‘LONG_MAX’, an *note OverflowError: 2db.
     is raised and ‘-1’ will be returned.

 -- C Function: long PyLong_AsLongAndOverflow (PyObject *pylong,
          int *overflow)

     Return a C ‘long’ representation of the contents of _pylong_.  If
     _pylong_ is greater than ‘LONG_MAX’ or less than ‘LONG_MIN’, set
     _*overflow_ to ‘1’ or ‘-1’, respectively, and return ‘-1’;
     otherwise, set _*overflow_ to ‘0’.  If any other exception occurs
     (for example a TypeError or MemoryError), then ‘-1’ will be
     returned and _*overflow_ will be ‘0’.

     New in version 2.7.

 -- C Function: PY_LONG_LONG PyLong_AsLongLongAndOverflow
          (PyObject *pylong, int *overflow)

     Return a C ‘long long’ representation of the contents of _pylong_.
     If _pylong_ is greater than ‘PY_LLONG_MAX’ or less than
     ‘PY_LLONG_MIN’, set _*overflow_ to ‘1’ or ‘-1’, respectively, and
     return ‘-1’; otherwise, set _*overflow_ to ‘0’.  If any other
     exception occurs (for example a TypeError or MemoryError), then
     ‘-1’ will be returned and _*overflow_ will be ‘0’.

     New in version 2.7.

 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)

     Return a C ‘Py_ssize_t’ representation of the contents of _pylong_.
     If _pylong_ is greater than ‘PY_SSIZE_T_MAX’, an *note
     OverflowError: 2db. is raised and ‘-1’ will be returned.

     New in version 2.6.

 -- C Function: unsigned long PyLong_AsUnsignedLong (PyObject *pylong)

     Return a C ‘unsigned long’ representation of the contents of
     _pylong_.  If _pylong_ is greater than ‘ULONG_MAX’, an *note
     OverflowError: 2db. is raised.

 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)

     Return a ‘Py_ssize_t’ representation of the contents of _pylong_.
     If _pylong_ is greater than ‘PY_SSIZE_T_MAX’, an *note
     OverflowError: 2db. is raised.

     New in version 2.6.

 -- C Function: PY_LONG_LONG PyLong_AsLongLong (PyObject *pylong)

     Return a C ‘long long’ from a Python long integer.  If _pylong_
     cannot be represented as a ‘long long’, an *note OverflowError:
     2db. is raised and ‘-1’ is returned.

     New in version 2.2.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLong
          (PyObject *pylong)

     Return a C ‘unsigned long long’ from a Python long integer.  If
     _pylong_ cannot be represented as an ‘unsigned long long’, an *note
     OverflowError: 2db. is raised and ‘(unsigned long long)-1’ is
     returned.

     New in version 2.2.

     Changed in version 2.7: A negative _pylong_ now raises *note
     OverflowError: 2db, not *note TypeError: 218.

 -- C Function: unsigned long PyLong_AsUnsignedLongMask (PyObject *io)

     Return a C ‘unsigned long’ from a Python long integer, without
     checking for overflow.

     New in version 2.3.

 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLongMask
          (PyObject *io)

     Return a C ‘unsigned long long’ from a Python long integer, without
     checking for overflow.

     New in version 2.3.

 -- C Function: double PyLong_AsDouble (PyObject *pylong)

     Return a C ‘double’ representation of the contents of _pylong_.  If
     _pylong_ cannot be approximately represented as a ‘double’, an
     *note OverflowError: 2db. exception is raised and ‘-1.0’ will be
     returned.

 -- C Function: void* PyLong_AsVoidPtr (PyObject *pylong)

     Convert a Python integer or long integer _pylong_ to a C ‘void’
     pointer.  If _pylong_ cannot be converted, an *note OverflowError:
     2db. will be raised.  This is only assured to produce a usable
     ‘void’ pointer for values created with *note PyLong_FromVoidPtr():
     2be0.

     New in version 1.5.2.

     Changed in version 2.5: For values outside 0..LONG_MAX, both signed
     and unsigned integers are accepted.


File: python.info,  Node: Floating Point Objects,  Next: Complex Number Objects,  Prev: Long Integer Objects,  Up: Numeric Objects

7.7.2.4 Floating Point Objects
..............................

 -- C Type: PyFloatObject

     This subtype of *note PyObject: 3a6. represents a Python floating
     point object.

 -- C Variable: PyTypeObject PyFloat_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     floating point type.  This is the same object as ‘float’ and
     ‘types.FloatType’.

 -- C Function: int PyFloat_Check (PyObject *p)

     Return true if its argument is a *note PyFloatObject: 2bed. or a
     subtype of *note PyFloatObject: 2bed.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyFloat_CheckExact (PyObject *p)

     Return true if its argument is a *note PyFloatObject: 2bed, but not
     a subtype of *note PyFloatObject: 2bed.

     New in version 2.2.

 -- C Function: PyObject* PyFloat_FromString (PyObject *str,
          char **pend)

     Return value: New reference.

     Create a *note PyFloatObject: 2bed. object based on the string
     value in _str_, or _NULL_ on failure.  The _pend_ argument is
     ignored.  It remains only for backward compatibility.

 -- C Function: PyObject* PyFloat_FromDouble (double v)

     Return value: New reference.

     Create a *note PyFloatObject: 2bed. object from _v_, or _NULL_ on
     failure.

 -- C Function: double PyFloat_AsDouble (PyObject *pyfloat)

     Return a C ‘double’ representation of the contents of _pyfloat_.
     If _pyfloat_ is not a Python floating point object but has a *note
     __float__(): 75a. method, this method will first be called to
     convert _pyfloat_ into a float.  This method returns ‘-1.0’ upon
     failure, so one should call *note PyErr_Occurred(): 299c. to check
     for errors.

 -- C Function: double PyFloat_AS_DOUBLE (PyObject *pyfloat)

     Return a C ‘double’ representation of the contents of _pyfloat_,
     but without error checking.

 -- C Function: PyObject* PyFloat_GetInfo (void)

     Return a structseq instance which contains information about the
     precision, minimum and maximum values of a float.  It’s a thin
     wrapper around the header file ‘float.h’.

     New in version 2.6.

 -- C Function: double PyFloat_GetMax ()

     Return the maximum representable finite float _DBL_MAX_ as C
     ‘double’.

     New in version 2.6.

 -- C Function: double PyFloat_GetMin ()

     Return the minimum normalized positive float _DBL_MIN_ as C
     ‘double’.

     New in version 2.6.

 -- C Function: int PyFloat_ClearFreeList ()

     Clear the float free list.  Return the number of items that could
     not be freed.

     New in version 2.6.

 -- C Function: void PyFloat_AsString (char *buf, PyFloatObject *v)

     Convert the argument _v_ to a string, using the same rules as *note
     str(): 1ea.  The length of _buf_ should be at least 100.

     This function is unsafe to call because it writes to a buffer whose
     length it does not know.

     Deprecated since version 2.7: Use ‘PyObject_Str()’ or
     ‘PyOS_double_to_string()’ instead.

 -- C Function: void PyFloat_AsReprString (char *buf, PyFloatObject *v)

     Same as PyFloat_AsString, except uses the same rules as *note
     repr(): 145.  The length of _buf_ should be at least 100.

     This function is unsafe to call because it writes to a buffer whose
     length it does not know.

     Deprecated since version 2.7: Use ‘PyObject_Repr()’ or
     ‘PyOS_double_to_string()’ instead.


File: python.info,  Node: Complex Number Objects,  Prev: Floating Point Objects,  Up: Numeric Objects

7.7.2.5 Complex Number Objects
..............................

Python’s complex number objects are implemented as two distinct types
when viewed from the C API: one is the Python object exposed to Python
programs, and the other is a C structure which represents the actual
complex number value.  The API provides functions for working with both.

* Menu:

* Complex Numbers as C Structures:: 
* Complex Numbers as Python Objects:: 


File: python.info,  Node: Complex Numbers as C Structures,  Next: Complex Numbers as Python Objects,  Up: Complex Number Objects

7.7.2.6 Complex Numbers as C Structures
.......................................

Note that the functions which accept these structures as parameters and
return them as results do so _by value_ rather than dereferencing them
through pointers.  This is consistent throughout the API.

 -- C Type: Py_complex

     The C structure which corresponds to the value portion of a Python
     complex number object.  Most of the functions for dealing with
     complex number objects use structures of this type as input or
     output values, as appropriate.  It is defined as:

          typedef struct {
             double real;
             double imag;
          } Py_complex;

 -- C Function: Py_complex _Py_c_sum (Py_complex left, Py_complex right)

     Return the sum of two complex numbers, using the C *note
     Py_complex: 2af3. representation.

 -- C Function: Py_complex _Py_c_diff (Py_complex left,
          Py_complex right)

     Return the difference between two complex numbers, using the C
     *note Py_complex: 2af3. representation.

 -- C Function: Py_complex _Py_c_neg (Py_complex complex)

     Return the negation of the complex number _complex_, using the C
     *note Py_complex: 2af3. representation.

 -- C Function: Py_complex _Py_c_prod (Py_complex left,
          Py_complex right)

     Return the product of two complex numbers, using the C *note
     Py_complex: 2af3. representation.

 -- C Function: Py_complex _Py_c_quot (Py_complex dividend,
          Py_complex divisor)

     Return the quotient of two complex numbers, using the C *note
     Py_complex: 2af3. representation.

     If _divisor_ is null, this method returns zero and sets ‘errno’ to
     ‘EDOM’.

 -- C Function: Py_complex _Py_c_pow (Py_complex num, Py_complex exp)

     Return the exponentiation of _num_ by _exp_, using the C *note
     Py_complex: 2af3. representation.

     If _num_ is null and _exp_ is not a positive real number, this
     method returns zero and sets ‘errno’ to ‘EDOM’.


File: python.info,  Node: Complex Numbers as Python Objects,  Prev: Complex Numbers as C Structures,  Up: Complex Number Objects

7.7.2.7 Complex Numbers as Python Objects
.........................................

 -- C Type: PyComplexObject

     This subtype of *note PyObject: 3a6. represents a Python complex
     number object.

 -- C Variable: PyTypeObject PyComplex_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     complex number type.  It is the same object as ‘complex’ and
     ‘types.ComplexType’.

 -- C Function: int PyComplex_Check (PyObject *p)

     Return true if its argument is a *note PyComplexObject: 2c03. or a
     subtype of *note PyComplexObject: 2c03.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyComplex_CheckExact (PyObject *p)

     Return true if its argument is a *note PyComplexObject: 2c03, but
     not a subtype of *note PyComplexObject: 2c03.

     New in version 2.2.

 -- C Function: PyObject* PyComplex_FromCComplex (Py_complex v)

     Return value: New reference.

     Create a new Python complex number object from a C *note
     Py_complex: 2af3. value.

 -- C Function: PyObject* PyComplex_FromDoubles (double real,
          double imag)

     Return value: New reference.

     Return a new *note PyComplexObject: 2c03. object from _real_ and
     _imag_.

 -- C Function: double PyComplex_RealAsDouble (PyObject *op)

     Return the real part of _op_ as a C ‘double’.

 -- C Function: double PyComplex_ImagAsDouble (PyObject *op)

     Return the imaginary part of _op_ as a C ‘double’.

 -- C Function: Py_complex PyComplex_AsCComplex (PyObject *op)

     Return the *note Py_complex: 2af3. value of the complex number
     _op_.  Upon failure, this method returns ‘-1.0’ as a real value.

     Changed in version 2.6: If _op_ is not a Python complex number
     object but has a *note __complex__(): 2e7. method, this method will
     first be called to convert _op_ to a Python complex number object.


File: python.info,  Node: Sequence Objects,  Next: Mapping Objects,  Prev: Numeric Objects,  Up: Concrete Objects Layer

7.7.3 Sequence Objects
----------------------

Generic operations on sequence objects were discussed in the previous
chapter; this section deals with the specific kinds of sequence objects
that are intrinsic to the Python language.

* Menu:

* Byte Array Objects:: 
* String/Bytes Objects:: 
* Unicode Objects and Codecs:: 
* Buffers and Memoryview Objects:: 
* Tuple Objects:: 
* List Objects:: 

Byte Array Objects

* Type check macros:: 
* Direct API functions:: 
* Macros:: 

Unicode Objects and Codecs

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 

Unicode Objects

* Unicode Type:: 
* Unicode Character Properties:: 
* Plain Py_UNICODE:: 
* wchar_t Support:: 

Built-in Codecs

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 

Buffers and Memoryview Objects

* The new-style Py_buffer struct:: 
* Buffer related functions:: 
* MemoryView objects:: 
* Old-style buffer objects:: 


File: python.info,  Node: Byte Array Objects,  Next: String/Bytes Objects,  Up: Sequence Objects

7.7.3.1 Byte Array Objects
..........................

New in version 2.6.

 -- C Type: PyByteArrayObject

     This subtype of *note PyObject: 3a6. represents a Python bytearray
     object.

 -- C Variable: PyTypeObject PyByteArray_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     bytearray type; it is the same object as ‘bytearray’ in the Python
     layer.

* Menu:

* Type check macros:: 
* Direct API functions:: 
* Macros:: 


File: python.info,  Node: Type check macros,  Next: Direct API functions,  Up: Byte Array Objects

7.7.3.2 Type check macros
.........................

 -- C Function: int PyByteArray_Check (PyObject *o)

     Return true if the object _o_ is a bytearray object or an instance
     of a subtype of the bytearray type.

 -- C Function: int PyByteArray_CheckExact (PyObject *o)

     Return true if the object _o_ is a bytearray object, but not an
     instance of a subtype of the bytearray type.


File: python.info,  Node: Direct API functions,  Next: Macros,  Prev: Type check macros,  Up: Byte Array Objects

7.7.3.3 Direct API functions
............................

 -- C Function: PyObject* PyByteArray_FromObject (PyObject *o)

     Return a new bytearray object from any object, _o_, that implements
     the buffer protocol.

 -- C Function: PyObject* PyByteArray_FromStringAndSize (const
          char *string, Py_ssize_t len)

     Create a new bytearray object from _string_ and its length, _len_.
     On failure, _NULL_ is returned.

 -- C Function: PyObject* PyByteArray_Concat (PyObject *a, PyObject *b)

     Concat bytearrays _a_ and _b_ and return a new bytearray with the
     result.

 -- C Function: Py_ssize_t PyByteArray_Size (PyObject *bytearray)

     Return the size of _bytearray_ after checking for a _NULL_ pointer.

 -- C Function: char* PyByteArray_AsString (PyObject *bytearray)

     Return the contents of _bytearray_ as a char array after checking
     for a _NULL_ pointer.

 -- C Function: int PyByteArray_Resize (PyObject *bytearray,
          Py_ssize_t len)

     Resize the internal buffer of _bytearray_ to _len_.


File: python.info,  Node: Macros,  Prev: Direct API functions,  Up: Byte Array Objects

7.7.3.4 Macros
..............

These macros trade safety for speed and they don’t check pointers.

 -- C Function: char* PyByteArray_AS_STRING (PyObject *bytearray)

     Macro version of *note PyByteArray_AsString(): 2c18.

 -- C Function: Py_ssize_t PyByteArray_GET_SIZE (PyObject *bytearray)

     Macro version of *note PyByteArray_Size(): 2c17.


File: python.info,  Node: String/Bytes Objects,  Next: Unicode Objects and Codecs,  Prev: Byte Array Objects,  Up: Sequence Objects

7.7.3.5 String/Bytes Objects
............................

These functions raise *note TypeError: 218. when expecting a string
parameter and are called with a non-string parameter.

     Note: These functions have been renamed to PyBytes_* in Python 3.x.
     Unless otherwise noted, the PyBytes functions available in 3.x are
     aliased to their PyString_* equivalents to help porting.

 -- C Type: PyStringObject

     This subtype of *note PyObject: 3a6. represents a Python string
     object.

 -- C Variable: PyTypeObject PyString_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     string type; it is the same object as ‘str’ and ‘types.StringType’
     in the Python layer.  .

 -- C Function: int PyString_Check (PyObject *o)

     Return true if the object _o_ is a string object or an instance of
     a subtype of the string type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyString_CheckExact (PyObject *o)

     Return true if the object _o_ is a string object, but not an
     instance of a subtype of the string type.

     New in version 2.2.

 -- C Function: PyObject* PyString_FromString (const char *v)

     Return value: New reference.

     Return a new string object with a copy of the string _v_ as value
     on success, and _NULL_ on failure.  The parameter _v_ must not be
     _NULL_; it will not be checked.

 -- C Function: PyObject* PyString_FromStringAndSize (const char *v,
          Py_ssize_t len)

     Return value: New reference.

     Return a new string object with a copy of the string _v_ as value
     and length _len_ on success, and _NULL_ on failure.  If _v_ is
     _NULL_, the contents of the string are uninitialized.

     Changed in version 2.5: This function used an ‘int’ type for _len_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyString_FromFormat (const char *format, ...)

     Return value: New reference.

     Take a C ‘printf()’-style _format_ string and a variable number of
     arguments, calculate the size of the resulting Python string and
     return a string with the values formatted into it.  The variable
     arguments must be C types and must correspond exactly to the format
     characters in the _format_ string.  The following format characters
     are allowed:

     Format Characters       Type                Comment
                                                 
     ---------------------------------------------------------------------------------
                                                 
     ‘%%’                    _n/a_               The literal % character.
                                                 
                                                 
     ‘%c’                    int                 A single character, represented as
                                                 an C int.
                                                 
                                                 
     ‘%d’                    int                 Exactly equivalent to
                                                 ‘printf("%d")’.
                                                 
                                                 
     ‘%u’                    unsigned int        Exactly equivalent to
                                                 ‘printf("%u")’.
                                                 
                                                 
     ‘%ld’                   long                Exactly equivalent to
                                                 ‘printf("%ld")’.
                                                 
                                                 
     ‘%lu’                   unsigned long       Exactly equivalent to
                                                 ‘printf("%lu")’.
                                                 
                                                 
     ‘%lld’                  long long           Exactly equivalent to
                                                 ‘printf("%lld")’.
                                                 
                                                 
     ‘%llu’                  unsigned long       Exactly equivalent to
                             long                ‘printf("%llu")’.
                                                 
                                                 
     ‘%zd’                   Py_ssize_t          Exactly equivalent to
                                                 ‘printf("%zd")’.
                                                 
                                                 
     ‘%zu’                   size_t              Exactly equivalent to
                                                 ‘printf("%zu")’.
                                                 
                                                 
     ‘%i’                    int                 Exactly equivalent to
                                                 ‘printf("%i")’.
                                                 
                                                 
     ‘%x’                    int                 Exactly equivalent to
                                                 ‘printf("%x")’.
                                                 
                                                 
     ‘%s’                    char*               A null-terminated C character
                                                 array.
                                                 
                                                 
     ‘%p’                    void*               The hex representation of a C
                                                 pointer.  Mostly equivalent to
                                                 ‘printf("%p")’ except that it is
                                                 guaranteed to start with the
                                                 literal ‘0x’ regardless of what
                                                 the platform’s ‘printf’ yields.
                                                 

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

          Note: The ‘"%lld"’ and ‘"%llu"’ format specifiers are only
          available when ‘HAVE_LONG_LONG’ is defined.

     Changed in version 2.7: Support for ‘"%lld"’ and ‘"%llu"’ added.

 -- C Function: PyObject* PyString_FromFormatV (const char *format,
          va_list vargs)

     Return value: New reference.

     Identical to *note PyString_FromFormat(): 2a82. except that it
     takes exactly two arguments.

 -- C Function: Py_ssize_t PyString_Size (PyObject *string)

     Return the length of the string in string object _string_.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyString_GET_SIZE (PyObject *string)

     Macro form of *note PyString_Size(): 2c25. but without error
     checking.

     Changed in version 2.5: This macro returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: char* PyString_AsString (PyObject *string)

     Return a NUL-terminated representation of the contents of _string_.
     The pointer refers to the internal buffer of _string_, not a copy.
     The data must not be modified in any way, unless the string was
     just created using ‘PyString_FromStringAndSize(NULL, size)’.  It
     must not be deallocated.  If _string_ is a Unicode object, this
     function computes the default encoding of _string_ and operates on
     that.  If _string_ is not a string object at all, *note
     PyString_AsString(): 2c27. returns _NULL_ and raises *note
     TypeError: 218.

 -- C Function: char* PyString_AS_STRING (PyObject *string)

     Macro form of *note PyString_AsString(): 2c27. but without error
     checking.  Only string objects are supported; no Unicode objects
     should be passed.

 -- C Function: int PyString_AsStringAndSize (PyObject *obj,
          char **buffer, Py_ssize_t *length)

     Return a NUL-terminated representation of the contents of the
     object _obj_ through the output variables _buffer_ and _length_.

     The function accepts both string and Unicode objects as input.  For
     Unicode objects it returns the default encoded version of the
     object.  If _length_ is _NULL_, the resulting buffer may not
     contain NUL characters; if it does, the function returns ‘-1’ and a
     *note TypeError: 218. is raised.

     The buffer refers to an internal string buffer of _obj_, not a
     copy.  The data must not be modified in any way, unless the string
     was just created using ‘PyString_FromStringAndSize(NULL, size)’.
     It must not be deallocated.  If _string_ is a Unicode object, this
     function computes the default encoding of _string_ and operates on
     that.  If _string_ is not a string object at all, *note
     PyString_AsStringAndSize(): 2c29. returns ‘-1’ and raises *note
     TypeError: 218.

     Changed in version 2.5: This function used an ‘int *’ type for
     _length_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: void PyString_Concat (PyObject **string,
          PyObject *newpart)

     Create a new string object in _*string_ containing the contents of
     _newpart_ appended to _string_; the caller will own the new
     reference.  The reference to the old value of _string_ will be
     stolen.  If the new string cannot be created, the old reference to
     _string_ will still be discarded and the value of _*string_ will be
     set to _NULL_; the appropriate exception will be set.

 -- C Function: void PyString_ConcatAndDel (PyObject **string,
          PyObject *newpart)

     Create a new string object in _*string_ containing the contents of
     _newpart_ appended to _string_.  This version decrements the
     reference count of _newpart_.

 -- C Function: int _PyString_Resize (PyObject **string,
          Py_ssize_t newsize)

     A way to resize a string object even though it is "immutable".
     Only use this to build up a brand new string object; don’t use this
     if the string may already be known in other parts of the code.  It
     is an error to call this function if the refcount on the input
     string object is not one.  Pass the address of an existing string
     object as an lvalue (it may be written into), and the new size
     desired.  On success, _*string_ holds the resized string object and
     ‘0’ is returned; the address in _*string_ may differ from its input
     value.  If the reallocation fails, the original string object at
     _*string_ is deallocated, _*string_ is set to _NULL_, a memory
     exception is set, and ‘-1’ is returned.

     Changed in version 2.5: This function used an ‘int’ type for
     _newsize_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_Format (PyObject *format,
          PyObject *args)

     Return value: New reference.

     Return a new string object from _format_ and _args_.  Analogous to
     ‘format % args’.  The _args_ argument must be a tuple or dict.

 -- C Function: void PyString_InternInPlace (PyObject **string)

     Intern the argument _*string_ in place.  The argument must be the
     address of a pointer variable pointing to a Python string object.
     If there is an existing interned string that is the same as
     _*string_, it sets _*string_ to it (decrementing the reference
     count of the old string object and incrementing the reference count
     of the interned string object), otherwise it leaves _*string_ alone
     and interns it (incrementing its reference count).  (Clarification:
     even though there is a lot of talk about reference counts, think of
     this function as reference-count-neutral; you own the object after
     the call if and only if you owned it before the call.)

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_InternFromString (const char *v)

     Return value: New reference.

     A combination of *note PyString_FromString(): 2a2a. and *note
     PyString_InternInPlace(): 2c2e, returning either a new string
     object that has been interned, or a new ("owned") reference to an
     earlier interned string object with the same value.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)

     Return value: New reference.

     Create an object by decoding _size_ bytes of the encoded buffer _s_
     using the codec registered for _encoding_.  _encoding_ and _errors_
     have the same meaning as the parameters of the same name in the
     *note unicode(): 1f5. built-in function.  The codec to be used is
     looked up using the Python codec registry.  Return _NULL_ if an
     exception was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_AsDecodedObject (PyObject *str, const
          char *encoding, const char *errors)

     Return value: New reference.

     Decode a string object by passing it to the codec registered for
     _encoding_ and return the result as Python object.  _encoding_ and
     _errors_ have the same meaning as the parameters of the same name
     in the string ‘encode()’ method.  The codec to be used is looked up
     using the Python codec registry.  Return _NULL_ if an exception was
     raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_Encode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)

     Return value: New reference.

     Encode the ‘char’ buffer of the given size by passing it to the
     codec registered for _encoding_ and return a Python object.
     _encoding_ and _errors_ have the same meaning as the parameters of
     the same name in the string ‘encode()’ method.  The codec to be
     used is looked up using the Python codec registry.  Return _NULL_
     if an exception was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyString_AsEncodedObject (PyObject *str, const
          char *encoding, const char *errors)

     Return value: New reference.

     Encode a string object using the codec registered for _encoding_
     and return the result as Python object.  _encoding_ and _errors_
     have the same meaning as the parameters of the same name in the
     string ‘encode()’ method.  The codec to be used is looked up using
     the Python codec registry.  Return _NULL_ if an exception was
     raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.


File: python.info,  Node: Unicode Objects and Codecs,  Next: Buffers and Memoryview Objects,  Prev: String/Bytes Objects,  Up: Sequence Objects

7.7.3.6 Unicode Objects and Codecs
..................................

* Menu:

* Unicode Objects:: 
* Built-in Codecs:: 
* Methods and Slot Functions:: 

Unicode Objects

* Unicode Type:: 
* Unicode Character Properties:: 
* Plain Py_UNICODE:: 
* wchar_t Support:: 

Built-in Codecs

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 


File: python.info,  Node: Unicode Objects,  Next: Built-in Codecs,  Up: Unicode Objects and Codecs

7.7.3.7 Unicode Objects
.......................

* Menu:

* Unicode Type:: 
* Unicode Character Properties:: 
* Plain Py_UNICODE:: 
* wchar_t Support:: 


File: python.info,  Node: Unicode Type,  Next: Unicode Character Properties,  Up: Unicode Objects

7.7.3.8 Unicode Type
....................

These are the basic Unicode object types used for the Unicode
implementation in Python:

 -- C Type: Py_UNICODE

     This type represents the storage type which is used by Python
     internally as basis for holding Unicode ordinals.  Python’s default
     builds use a 16-bit type for *note Py_UNICODE: a88. and store
     Unicode values internally as UCS2.  It is also possible to build a
     UCS4 version of Python (most recent Linux distributions come with
     UCS4 builds of Python).  These builds then use a 32-bit type for
     *note Py_UNICODE: a88. and store Unicode data internally as UCS4.
     On platforms where ‘wchar_t’ is available and compatible with the
     chosen Python Unicode build variant, *note Py_UNICODE: a88. is a
     typedef alias for ‘wchar_t’ to enhance native platform
     compatibility.  On all other platforms, *note Py_UNICODE: a88. is a
     typedef alias for either ‘unsigned short’ (UCS2) or ‘unsigned long’
     (UCS4).

  Note that UCS2 and UCS4 Python builds are not binary compatible.
Please keep this in mind when writing extensions or interfaces.

 -- C Type: PyUnicodeObject

     This subtype of *note PyObject: 3a6. represents a Python Unicode
     object.

 -- C Variable: PyTypeObject PyUnicode_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     Unicode type.  It is exposed to Python code as ‘unicode’ and
     ‘types.UnicodeType’.

  The following APIs are really C macros and can be used to do fast
checks and to access internal read-only data of Unicode objects:

 -- C Function: int PyUnicode_Check (PyObject *o)

     Return true if the object _o_ is a Unicode object or an instance of
     a Unicode subtype.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyUnicode_CheckExact (PyObject *o)

     Return true if the object _o_ is a Unicode object, but not an
     instance of a subtype.

     New in version 2.2.

 -- C Function: Py_ssize_t PyUnicode_GET_SIZE (PyObject *o)

     Return the size of the object.  _o_ has to be a *note
     PyUnicodeObject: 2c39. (not checked).

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyUnicode_GET_DATA_SIZE (PyObject *o)

     Return the size of the object’s internal buffer in bytes.  _o_ has
     to be a *note PyUnicodeObject: 2c39. (not checked).

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_UNICODE* PyUnicode_AS_UNICODE (PyObject *o)

     Return a pointer to the internal *note Py_UNICODE: a88. buffer of
     the object.  _o_ has to be a *note PyUnicodeObject: 2c39. (not
     checked).

 -- C Function: const char* PyUnicode_AS_DATA (PyObject *o)

     Return a pointer to the internal buffer of the object.  _o_ has to
     be a *note PyUnicodeObject: 2c39. (not checked).

 -- C Function: int PyUnicode_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

     New in version 2.6.

