This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Unicode Character Properties,  Next: Plain Py_UNICODE,  Prev: Unicode Type,  Up: Unicode Objects

7.7.3.9 Unicode Character Properties
....................................

Unicode provides many different character properties.  The most often
needed ones are available through these macros which are mapped to C
functions depending on the Python configuration.

 -- C Function: int Py_UNICODE_ISSPACE (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a whitespace character.

 -- C Function: int Py_UNICODE_ISLOWER (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a lowercase character.

 -- C Function: int Py_UNICODE_ISUPPER (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is an uppercase character.

 -- C Function: int Py_UNICODE_ISTITLE (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a titlecase character.

 -- C Function: int Py_UNICODE_ISLINEBREAK (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a linebreak character.

 -- C Function: int Py_UNICODE_ISDECIMAL (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a decimal character.

 -- C Function: int Py_UNICODE_ISDIGIT (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a digit character.

 -- C Function: int Py_UNICODE_ISNUMERIC (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is a numeric character.

 -- C Function: int Py_UNICODE_ISALPHA (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is an alphabetic character.

 -- C Function: int Py_UNICODE_ISALNUM (Py_UNICODE ch)

     Return 1 or 0 depending on whether _ch_ is an alphanumeric
     character.

  These APIs can be used for fast direct character conversions:

 -- C Function: Py_UNICODE Py_UNICODE_TOLOWER (Py_UNICODE ch)

     Return the character _ch_ converted to lower case.

 -- C Function: Py_UNICODE Py_UNICODE_TOUPPER (Py_UNICODE ch)

     Return the character _ch_ converted to upper case.

 -- C Function: Py_UNICODE Py_UNICODE_TOTITLE (Py_UNICODE ch)

     Return the character _ch_ converted to title case.

 -- C Function: int Py_UNICODE_TODECIMAL (Py_UNICODE ch)

     Return the character _ch_ converted to a decimal positive integer.
     Return ‘-1’ if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: int Py_UNICODE_TODIGIT (Py_UNICODE ch)

     Return the character _ch_ converted to a single digit integer.
     Return ‘-1’ if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: double Py_UNICODE_TONUMERIC (Py_UNICODE ch)

     Return the character _ch_ converted to a double.  Return ‘-1.0’ if
     this is not possible.  This macro does not raise exceptions.


File: python.info,  Node: Plain Py_UNICODE,  Next: wchar_t Support,  Prev: Unicode Character Properties,  Up: Unicode Objects

7.7.3.10 Plain Py_UNICODE
.........................

To create Unicode objects and access their basic sequence properties,
use these APIs:

 -- C Function: PyObject* PyUnicode_FromUnicode (const Py_UNICODE *u,
          Py_ssize_t size)

     Return value: New reference.

     Create a Unicode object from the Py_UNICODE buffer _u_ of the given
     size.  _u_ may be _NULL_ which causes the contents to be undefined.
     It is the user’s responsibility to fill in the needed data.  The
     buffer is copied into the new object.  If the buffer is not _NULL_,
     the return value might be a shared object.  Therefore, modification
     of the resulting Unicode object is only allowed when _u_ is _NULL_.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_FromStringAndSize (const char *u,
          Py_ssize_t size)

     Return value: New reference.

     Create a Unicode object from the char buffer _u_.  The bytes will
     be interpreted as being UTF-8 encoded.  _u_ may also be _NULL_
     which causes the contents to be undefined.  It is the user’s
     responsibility to fill in the needed data.  The buffer is copied
     into the new object.  If the buffer is not _NULL_, the return value
     might be a shared object.  Therefore, modification of the resulting
     Unicode object is only allowed when _u_ is _NULL_.

     New in version 2.6.

 -- C Function: PyObject *PyUnicode_FromString (const char *u)

     Return value: New reference.

     Create a Unicode object from an UTF-8 encoded null-terminated char
     buffer _u_.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_FromFormat (const char *format, ...)

     Return value: New reference.

     Take a C ‘printf()’-style _format_ string and a variable number of
     arguments, calculate the size of the resulting Python unicode
     string and return a string with the values formatted into it.  The
     variable arguments must be C types and must correspond exactly to
     the format characters in the _format_ string.  The following format
     characters are allowed:

     Format Characters       Type                      Comment
                                                       
     ---------------------------------------------------------------------------------------
                                                       
     ‘%%’                    _n/a_                     The literal % character.
                                                       
                                                       
     ‘%c’                    int                       A single character, represented as
                                                       an C int.
                                                       
                                                       
     ‘%d’                    int                       Exactly equivalent to
                                                       ‘printf("%d")’.
                                                       
                                                       
     ‘%u’                    unsigned int              Exactly equivalent to
                                                       ‘printf("%u")’.
                                                       
                                                       
     ‘%ld’                   long                      Exactly equivalent to
                                                       ‘printf("%ld")’.
                                                       
                                                       
     ‘%lu’                   unsigned long             Exactly equivalent to
                                                       ‘printf("%lu")’.
                                                       
                                                       
     ‘%zd’                   Py_ssize_t                Exactly equivalent to
                                                       ‘printf("%zd")’.
                                                       
                                                       
     ‘%zu’                   size_t                    Exactly equivalent to
                                                       ‘printf("%zu")’.
                                                       
                                                       
     ‘%i’                    int                       Exactly equivalent to
                                                       ‘printf("%i")’.
                                                       
                                                       
     ‘%x’                    int                       Exactly equivalent to
                                                       ‘printf("%x")’.
                                                       
                                                       
     ‘%s’                    char*                     A null-terminated C character
                                                       array.
                                                       
                                                       
     ‘%p’                    void*                     The hex representation of a C
                                                       pointer.  Mostly equivalent to
                                                       ‘printf("%p")’ except that it is
                                                       guaranteed to start with the
                                                       literal ‘0x’ regardless of what
                                                       the platform’s ‘printf’ yields.
                                                       
                                                       
     ‘%U’                    PyObject*                 A unicode object.
                                                       
                                                       
     ‘%V’                    PyObject*, char *         A unicode object (which may be
                                                       _NULL_) and a null-terminated C
                                                       character array as a second
                                                       parameter (which will be used, if
                                                       the first parameter is _NULL_).
                                                       
                                                       
     ‘%S’                    PyObject*                 The result of calling
                                                       ‘PyObject_Unicode()’.
                                                       
                                                       
     ‘%R’                    PyObject*                 The result of calling
                                                       ‘PyObject_Repr()’.
                                                       

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_FromFormatV (const char *format,
          va_list vargs)

     Return value: New reference.

     Identical to ‘PyUnicode_FromFormat()’ except that it takes exactly
     two arguments.

     New in version 2.6.

 -- C Function: Py_UNICODE* PyUnicode_AsUnicode (PyObject *unicode)

     Return a read-only pointer to the Unicode object’s internal *note
     Py_UNICODE: a88. buffer, _NULL_ if _unicode_ is not a Unicode
     object.  Note that the resulting *note Py_UNICODE*: a88. string may
     contain embedded null characters, which would cause the string to
     be truncated when used in most C functions.

 -- C Function: Py_ssize_t PyUnicode_GetSize (PyObject *unicode)

     Return the length of the Unicode object.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PyUnicode_FromEncodedObject (PyObject *obj,
          const char *encoding, const char *errors)

     Return value: New reference.

     Coerce an encoded object _obj_ to an Unicode object and return a
     reference with incremented refcount.

     String and other char buffer compatible objects are decoded
     according to the given encoding and using the error handling
     defined by errors.  Both can be _NULL_ to have the interface use
     the default values (see the next section for details).

     All other objects, including Unicode objects, cause a *note
     TypeError: 218. to be set.

     The API returns _NULL_ if there was an error.  The caller is
     responsible for decref’ing the returned objects.

 -- C Function: PyObject* PyUnicode_FromObject (PyObject *obj)

     Return value: New reference.

     Shortcut for ‘PyUnicode_FromEncodedObject(obj, NULL, "strict")’
     which is used throughout the interpreter whenever coercion to
     Unicode is needed.

  If the platform supports ‘wchar_t’ and provides a header file wchar.h,
Python can interface directly to this type using the following
functions.  Support is optimized if Python’s own *note Py_UNICODE: a88.
type is identical to the system’s ‘wchar_t’.


File: python.info,  Node: wchar_t Support,  Prev: Plain Py_UNICODE,  Up: Unicode Objects

7.7.3.11 wchar_t Support
........................

‘wchar_t’ support for platforms which support it:

 -- C Function: PyObject* PyUnicode_FromWideChar (const wchar_t *w,
          Py_ssize_t size)

     Return value: New reference.

     Create a Unicode object from the ‘wchar_t’ buffer _w_ of the given
     _size_.  Return _NULL_ on failure.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: Py_ssize_t PyUnicode_AsWideChar
          (PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)

     Copy the Unicode object contents into the ‘wchar_t’ buffer _w_.  At
     most _size_ ‘wchar_t’ characters are copied (excluding a possibly
     trailing 0-termination character).  Return the number of ‘wchar_t’
     characters copied or -1 in case of an error.  Note that the
     resulting ‘wchar_t’ string may or may not be 0-terminated.  It is
     the responsibility of the caller to make sure that the ‘wchar_t’
     string is 0-terminated in case this is required by the application.
     Also, note that the ‘wchar_t*’ string might contain null
     characters, which would cause the string to be truncated when used
     with most C functions.

     Changed in version 2.5: This function returned an ‘int’ type and
     used an ‘int’ type for _size_.  This might require changes in your
     code for properly supporting 64-bit systems.


File: python.info,  Node: Built-in Codecs,  Next: Methods and Slot Functions,  Prev: Unicode Objects,  Up: Unicode Objects and Codecs

7.7.3.12 Built-in Codecs
........................

Python provides a set of built-in codecs which are written in C for
speed.  All of these codecs are directly usable via the following
functions.

  Many of the following APIs take two arguments encoding and errors, and
they have the same semantics as the ones of the built-in *note
unicode(): 1f5. Unicode object constructor.

  Setting encoding to _NULL_ causes the default encoding to be used
which is ASCII. The file system calls should use
‘Py_FileSystemDefaultEncoding’ as the encoding for file names.  This
variable should be treated as read-only: on some systems, it will be a
pointer to a static string, on others, it will change at run-time (such
as when the application invokes setlocale).

  Error handling is set by errors which may also be set to _NULL_
meaning to use the default handling defined for the codec.  Default
error handling for all built-in codecs is "strict" (*note ValueError:
236. is raised).

  The codecs all use a similar interface.  Only deviation from the
following generic ones are documented for simplicity.

* Menu:

* Generic Codecs:: 
* UTF-8 Codecs:: 
* UTF-32 Codecs:: 
* UTF-16 Codecs:: 
* UTF-7 Codecs:: 
* Unicode-Escape Codecs:: 
* Raw-Unicode-Escape Codecs:: 
* Latin-1 Codecs:: 
* ASCII Codecs:: 
* Character Map Codecs:: 
* MBCS codecs for Windows:: 
* Methods & Slots:: 


File: python.info,  Node: Generic Codecs,  Next: UTF-8 Codecs,  Up: Built-in Codecs

7.7.3.13 Generic Codecs
.......................

These are the generic codec APIs:

 -- C Function: PyObject* PyUnicode_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the encoded
     string _s_.  _encoding_ and _errors_ have the same meaning as the
     parameters of the same name in the *note unicode(): 1f5. built-in
     function.  The codec to be used is looked up using the Python codec
     registry.  Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_Encode (const Py_UNICODE *s,
          Py_ssize_t size, const char *encoding, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer _s_ of the given _size_
     and return a Python string object.  _encoding_ and _errors_ have
     the same meaning as the parameters of the same name in the Unicode
     ‘encode()’ method.  The codec to be used is looked up using the
     Python codec registry.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsEncodedString (PyObject *unicode,
          const char *encoding, const char *errors)

     Return value: New reference.

     Encode a Unicode object and return the result as Python string
     object.  _encoding_ and _errors_ have the same meaning as the
     parameters of the same name in the Unicode ‘encode()’ method.  The
     codec to be used is looked up using the Python codec registry.
     Return _NULL_ if an exception was raised by the codec.


File: python.info,  Node: UTF-8 Codecs,  Next: UTF-32 Codecs,  Prev: Generic Codecs,  Up: Built-in Codecs

7.7.3.14 UTF-8 Codecs
.....................

These are the UTF-8 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF8 (const char *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the UTF-8
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_DecodeUTF8Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)

     Return value: New reference.

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF8():
     2c67.  If _consumed_ is not _NULL_, trailing incomplete UTF-8 byte
     sequences will not be treated as an error.  Those bytes will not be
     decoded and the number of bytes that have been decoded will be
     stored in _consumed_.

     New in version 2.4.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeUTF8 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer _s_ of the given _size_
     using UTF-8 and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsUTF8String (PyObject *unicode)

     Return value: New reference.

     Encode a Unicode object using UTF-8 and return the result as Python
     string object.  Error handling is "strict".  Return _NULL_ if an
     exception was raised by the codec.


File: python.info,  Node: UTF-32 Codecs,  Next: UTF-16 Codecs,  Prev: UTF-8 Codecs,  Up: Built-in Codecs

7.7.3.15 UTF-32 Codecs
......................

These are the UTF-32 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF32 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)

     Decode _size_ bytes from a UTF-32 encoded buffer string and return
     the corresponding Unicode object.  _errors_ (if non-_NULL_) defines
     the error handling.  It defaults to "strict".

     If _byteorder_ is non-_NULL_, the decoder starts decoding using the
     given byte order:

          *byteorder == -1: little endian
          *byteorder == 0:  native order
          *byteorder == 1:  big endian

     If ‘*byteorder’ is zero, and the first four bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If ‘*byteorder’ is ‘-1’ or ‘1’, any byte order mark is copied to
     the output.

     After completion, _*byteorder_ is set to the current byte order at
     the end of input data.

     In a narrow build codepoints outside the BMP will be decoded as
     surrogate pairs.

     If _byteorder_ is _NULL_, the codec starts in native order mode.

     Return _NULL_ if an exception was raised by the codec.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_DecodeUTF32Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF32():
     2c6c.  If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeUTF32Stateful(): 2c6d. will not treat trailing
     incomplete UTF-32 byte sequences (such as a number of bytes not
     divisible by four) as an error.  Those bytes will not be decoded
     and the number of bytes that have been decoded will be stored in
     _consumed_.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_EncodeUTF32 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)

     Return a Python bytes object holding the UTF-32 encoded value of
     the Unicode data in _s_.  Output is written according to the
     following byte order:

          byteorder == -1: little endian
          byteorder == 0:  native byte order (writes a BOM mark)
          byteorder == 1:  big endian

     If byteorder is ‘0’, the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If _Py_UNICODE_WIDE_ is not defined, surrogate pairs will be output
     as a single codepoint.

     Return _NULL_ if an exception was raised by the codec.

     New in version 2.6.

 -- C Function: PyObject* PyUnicode_AsUTF32String (PyObject *unicode)

     Return a Python string using the UTF-32 encoding in native byte
     order.  The string always starts with a BOM mark.  Error handling
     is "strict".  Return _NULL_ if an exception was raised by the
     codec.

     New in version 2.6.


File: python.info,  Node: UTF-16 Codecs,  Next: UTF-7 Codecs,  Prev: UTF-32 Codecs,  Up: Built-in Codecs

7.7.3.16 UTF-16 Codecs
......................

These are the UTF-16 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF16 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)

     Return value: New reference.

     Decode _size_ bytes from a UTF-16 encoded buffer string and return
     the corresponding Unicode object.  _errors_ (if non-_NULL_) defines
     the error handling.  It defaults to "strict".

     If _byteorder_ is non-_NULL_, the decoder starts decoding using the
     given byte order:

          *byteorder == -1: little endian
          *byteorder == 0:  native order
          *byteorder == 1:  big endian

     If ‘*byteorder’ is zero, and the first two bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If ‘*byteorder’ is ‘-1’ or ‘1’, any byte order mark is copied to
     the output (where it will result in either a ‘\ufeff’ or a ‘\ufffe’
     character).

     After completion, _*byteorder_ is set to the current byte order at
     the end of input data.

     If _byteorder_ is _NULL_, the codec starts in native order mode.

     Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_DecodeUTF16Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)

     Return value: New reference.

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF16():
     2c71.  If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeUTF16Stateful(): 2c72. will not treat trailing
     incomplete UTF-16 byte sequences (such as an odd number of bytes or
     a split surrogate pair) as an error.  Those bytes will not be
     decoded and the number of bytes that have been decoded will be
     stored in _consumed_.

     New in version 2.4.

     Changed in version 2.5: This function used an ‘int’ type for _size_
     and an ‘int *’ type for _consumed_.  This might require changes in
     your code for properly supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeUTF16 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)

     Return value: New reference.

     Return a Python string object holding the UTF-16 encoded value of
     the Unicode data in _s_.  Output is written according to the
     following byte order:

          byteorder == -1: little endian
          byteorder == 0:  native byte order (writes a BOM mark)
          byteorder == 1:  big endian

     If byteorder is ‘0’, the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If _Py_UNICODE_WIDE_ is defined, a single *note Py_UNICODE: a88.
     value may get represented as a surrogate pair.  If it is not
     defined, each *note Py_UNICODE: a88. values is interpreted as an
     UCS-2 character.

     Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsUTF16String (PyObject *unicode)

     Return value: New reference.

     Return a Python string using the UTF-16 encoding in native byte
     order.  The string always starts with a BOM mark.  Error handling
     is "strict".  Return _NULL_ if an exception was raised by the
     codec.


File: python.info,  Node: UTF-7 Codecs,  Next: Unicode-Escape Codecs,  Prev: UTF-16 Codecs,  Up: Built-in Codecs

7.7.3.17 UTF-7 Codecs
.....................

These are the UTF-7 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF7 (const char *s,
          Py_ssize_t size, const char *errors)

     Create a Unicode object by decoding _size_ bytes of the UTF-7
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF7Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeUTF7():
     2c76.  If _consumed_ is not _NULL_, trailing incomplete UTF-7
     base-64 sections will not be treated as an error.  Those bytes will
     not be decoded and the number of bytes that have been decoded will
     be stored in _consumed_.

 -- C Function: PyObject* PyUnicode_EncodeUTF7 (const Py_UNICODE *s,
          Py_ssize_t size, int base64SetO, int base64WhiteSpace, const
          char *errors)

     Encode the *note Py_UNICODE: a88. buffer of the given size using
     UTF-7 and return a Python bytes object.  Return _NULL_ if an
     exception was raised by the codec.

     If _base64SetO_ is nonzero, "Set O" (punctuation that has no
     otherwise special meaning) will be encoded in base-64.  If
     _base64WhiteSpace_ is nonzero, whitespace will be encoded in
     base-64.  Both are set to zero for the Python "utf-7" codec.


File: python.info,  Node: Unicode-Escape Codecs,  Next: Raw-Unicode-Escape Codecs,  Prev: UTF-7 Codecs,  Up: Built-in Codecs

7.7.3.18 Unicode-Escape Codecs
..............................

These are the "Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUnicodeEscape (const char *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the
     Unicode-Escape encoded string _s_.  Return _NULL_ if an exception
     was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer of the given _size_ using
     Unicode-Escape and return a Python string object.  Return _NULL_ if
     an exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsUnicodeEscapeString
          (PyObject *unicode)

     Return value: New reference.

     Encode a Unicode object using Unicode-Escape and return the result
     as Python string object.  Error handling is "strict".  Return
     _NULL_ if an exception was raised by the codec.


File: python.info,  Node: Raw-Unicode-Escape Codecs,  Next: Latin-1 Codecs,  Prev: Unicode-Escape Codecs,  Up: Built-in Codecs

7.7.3.19 Raw-Unicode-Escape Codecs
..................................

These are the "Raw Unicode Escape" codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeRawUnicodeEscape (const
          char *s, Py_ssize_t size, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the
     Raw-Unicode-Escape encoded string _s_.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeRawUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer of the given _size_ using
     Raw-Unicode-Escape and return a Python string object.  Return
     _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsRawUnicodeEscapeString
          (PyObject *unicode)

     Return value: New reference.

     Encode a Unicode object using Raw-Unicode-Escape and return the
     result as Python string object.  Error handling is "strict".
     Return _NULL_ if an exception was raised by the codec.


File: python.info,  Node: Latin-1 Codecs,  Next: ASCII Codecs,  Prev: Raw-Unicode-Escape Codecs,  Up: Built-in Codecs

7.7.3.20 Latin-1 Codecs
.......................

These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256
Unicode ordinals and only these are accepted by the codecs during
encoding.

 -- C Function: PyObject* PyUnicode_DecodeLatin1 (const char *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the Latin-1
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeLatin1 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer of the given _size_ using
     Latin-1 and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsLatin1String (PyObject *unicode)

     Return value: New reference.

     Encode a Unicode object using Latin-1 and return the result as
     Python string object.  Error handling is "strict".  Return _NULL_
     if an exception was raised by the codec.


File: python.info,  Node: ASCII Codecs,  Next: Character Map Codecs,  Prev: Latin-1 Codecs,  Up: Built-in Codecs

7.7.3.21 ASCII Codecs
.....................

These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted.  All
other codes generate errors.

 -- C Function: PyObject* PyUnicode_DecodeASCII (const char *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the ASCII
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeASCII (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer of the given _size_ using
     ASCII and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsASCIIString (PyObject *unicode)

     Return value: New reference.

     Encode a Unicode object using ASCII and return the result as Python
     string object.  Error handling is "strict".  Return _NULL_ if an
     exception was raised by the codec.


File: python.info,  Node: Character Map Codecs,  Next: MBCS codecs for Windows,  Prev: ASCII Codecs,  Up: Built-in Codecs

7.7.3.22 Character Map Codecs
.............................

This codec is special in that it can be used to implement many different
codecs (and this is in fact what was done to obtain most of the standard
codecs included in the ‘encodings’ package).  The codec uses mapping to
encode and decode characters.

  Decoding mappings must map single string characters to single Unicode
characters, integers (which are then interpreted as Unicode ordinals) or
None (meaning "undefined mapping" and causing an error).

  Encoding mappings must map single Unicode characters to single string
characters, integers (which are then interpreted as Latin-1 ordinals) or
None (meaning "undefined mapping" and causing an error).

  The mapping objects provided must only support the __getitem__ mapping
interface.

  If a character lookup fails with a LookupError, the character is
copied as-is meaning that its ordinal value will be interpreted as
Unicode or Latin-1 ordinal resp.  Because of this, mappings only need to
contain those mappings which map characters to different code points.

  These are the mapping codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeCharmap (const char *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the encoded
     string _s_ using the given _mapping_ object.  Return _NULL_ if an
     exception was raised by the codec.  If _mapping_ is _NULL_ latin-1
     decoding will be done.  Else it can be a dictionary mapping byte or
     a unicode string, which is treated as a lookup table.  Byte values
     greater that the length of the string and U+FFFE "characters" are
     treated as "undefined mapping".

     Changed in version 2.4: Allowed unicode string as mapping argument.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_EncodeCharmap (const Py_UNICODE *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer of the given _size_ using
     the given _mapping_ object and return a Python string object.
     Return _NULL_ if an exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsCharmapString (PyObject *unicode,
          PyObject *mapping)

     Return value: New reference.

     Encode a Unicode object using the given _mapping_ object and return
     the result as Python string object.  Error handling is "strict".
     Return _NULL_ if an exception was raised by the codec.

  The following codec API is special in that maps Unicode to Unicode.

 -- C Function: PyObject* PyUnicode_TranslateCharmap (const
          Py_UNICODE *s, Py_ssize_t size, PyObject *table, const
          char *errors)

     Return value: New reference.

     Translate a *note Py_UNICODE: a88. buffer of the given _size_ by
     applying a character mapping _table_ to it and return the resulting
     Unicode object.  Return _NULL_ when an exception was raised by the
     codec.

     The _mapping_ table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the *note __getitem__(): 44f.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *note LookupError: 891.) are
     left untouched and are copied as-is.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: MBCS codecs for Windows,  Next: Methods & Slots,  Prev: Character Map Codecs,  Up: Built-in Codecs

7.7.3.23 MBCS codecs for Windows
................................

These are the MBCS codec APIs.  They are currently only available on
Windows and use the Win32 MBCS converters to implement the conversions.
Note that MBCS (or DBCS) is a class of encodings, not just one.  The
target encoding is defined by the user settings on the machine running
the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCS (const char *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Create a Unicode object by decoding _size_ bytes of the MBCS
     encoded string _s_.  Return _NULL_ if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_DecodeMBCSStateful (const char *s,
          int size, const char *errors, int *consumed)

     If _consumed_ is _NULL_, behave like *note PyUnicode_DecodeMBCS():
     2c8f.  If _consumed_ is not _NULL_, *note
     PyUnicode_DecodeMBCSStateful(): 2c90. will not decode trailing lead
     byte and the number of bytes that have been decoded will be stored
     in _consumed_.

     New in version 2.5.

 -- C Function: PyObject* PyUnicode_EncodeMBCS (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)

     Return value: New reference.

     Encode the *note Py_UNICODE: a88. buffer of the given _size_ using
     MBCS and return a Python string object.  Return _NULL_ if an
     exception was raised by the codec.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_AsMBCSString (PyObject *unicode)

     Return value: New reference.

     Encode a Unicode object using MBCS and return the result as Python
     string object.  Error handling is "strict".  Return _NULL_ if an
     exception was raised by the codec.


File: python.info,  Node: Methods & Slots,  Prev: MBCS codecs for Windows,  Up: Built-in Codecs

7.7.3.24 Methods & Slots
........................


File: python.info,  Node: Methods and Slot Functions,  Prev: Built-in Codecs,  Up: Unicode Objects and Codecs

7.7.3.25 Methods and Slot Functions
...................................

The following APIs are capable of handling Unicode objects and strings
on input (we refer to them as strings in the descriptions) and return
Unicode objects or integers as appropriate.

  They all return _NULL_ or ‘-1’ if an exception occurs.

 -- C Function: PyObject* PyUnicode_Concat (PyObject *left,
          PyObject *right)

     Return value: New reference.

     Concat two strings giving a new Unicode string.

 -- C Function: PyObject* PyUnicode_Split (PyObject *s, PyObject *sep,
          Py_ssize_t maxsplit)

     Return value: New reference.

     Split a string giving a list of Unicode strings.  If _sep_ is
     _NULL_, splitting will be done at all whitespace substrings.
     Otherwise, splits occur at the given separator.  At most _maxsplit_
     splits will be done.  If negative, no limit is set.  Separators are
     not included in the resulting list.

     Changed in version 2.5: This function used an ‘int’ type for
     _maxsplit_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_Splitlines (PyObject *s,
          int keepend)

     Return value: New reference.

     Split a Unicode string at line breaks, returning a list of Unicode
     strings.  CRLF is considered to be one line break.  If _keepend_ is
     0, the Line break characters are not included in the resulting
     strings.

 -- C Function: PyObject* PyUnicode_Translate (PyObject *str,
          PyObject *table, const char *errors)

     Return value: New reference.

     Translate a string by applying a character mapping table to it and
     return the resulting Unicode object.

     The mapping table must map Unicode ordinal integers to Unicode
     ordinal integers or None (causing deletion of the character).

     Mapping tables need only provide the *note __getitem__(): 44f.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *note LookupError: 891.) are
     left untouched and are copied as-is.

     _errors_ has the usual meaning for codecs.  It may be _NULL_ which
     indicates to use the default error handling.

 -- C Function: PyObject* PyUnicode_Join (PyObject *separator,
          PyObject *seq)

     Return value: New reference.

     Join a sequence of strings using the given _separator_ and return
     the resulting Unicode string.

 -- C Function: int PyUnicode_Tailmatch (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)

     Return 1 if _substr_ matches ‘str[start:end]’ at the given tail end
     (_direction_ == -1 means to do a prefix match, _direction_ == 1 a
     suffix match), 0 otherwise.  Return ‘-1’ if an error occurred.

     Changed in version 2.5: This function used an ‘int’ type for
     _start_ and _end_.  This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: Py_ssize_t PyUnicode_Find (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)

     Return the first position of _substr_ in ‘str[start:end]’ using the
     given _direction_ (_direction_ == 1 means to do a forward search,
     _direction_ == -1 a backward search).  The return value is the
     index of the first match; a value of ‘-1’ indicates that no match
     was found, and ‘-2’ indicates that an error occurred and an
     exception has been set.

     Changed in version 2.5: This function used an ‘int’ type for
     _start_ and _end_.  This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: Py_ssize_t PyUnicode_Count (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end)

     Return the number of non-overlapping occurrences of _substr_ in
     ‘str[start:end]’.  Return ‘-1’ if an error occurred.

     Changed in version 2.5: This function returned an ‘int’ type and
     used an ‘int’ type for _start_ and _end_.  This might require
     changes in your code for properly supporting 64-bit systems.

 -- C Function: PyObject* PyUnicode_Replace (PyObject *str,
          PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)

     Return value: New reference.

     Replace at most _maxcount_ occurrences of _substr_ in _str_ with
     _replstr_ and return the resulting Unicode object.  _maxcount_ ==
     -1 means replace all occurrences.

     Changed in version 2.5: This function used an ‘int’ type for
     _maxcount_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyUnicode_Compare (PyObject *left, PyObject *right)

     Compare two strings and return -1, 0, 1 for less than, equal, and
     greater than, respectively.

 -- C Function: int PyUnicode_RichCompare (PyObject *left,
          PyObject *right, int op)

     Rich compare two unicode strings and return one of the following:

        * ‘NULL’ in case an exception was raised

        * ‘Py_True’ or ‘Py_False’ for successful comparisons

        * ‘Py_NotImplemented’ in case the type combination is unknown

     Note that ‘Py_EQ’ and ‘Py_NE’ comparisons can cause a *note
     UnicodeWarning: 95f. in case the conversion of the arguments to
     Unicode fails with a *note UnicodeDecodeError: 958.

     Possible values for _op_ are ‘Py_GT’, ‘Py_GE’, ‘Py_EQ’, ‘Py_NE’,
     ‘Py_LT’, and ‘Py_LE’.

 -- C Function: PyObject* PyUnicode_Format (PyObject *format,
          PyObject *args)

     Return value: New reference.

     Return a new string object from _format_ and _args_; this is
     analogous to ‘format % args’.  The _args_ argument must be a tuple.

 -- C Function: int PyUnicode_Contains (PyObject *container,
          PyObject *element)

     Check whether _element_ is contained in _container_ and return true
     or false accordingly.

     _element_ has to coerce to a one element Unicode string.  ‘-1’ is
     returned if there was an error.


File: python.info,  Node: Buffers and Memoryview Objects,  Next: Tuple Objects,  Prev: Unicode Objects and Codecs,  Up: Sequence Objects

7.7.3.26 Buffers and Memoryview Objects
.......................................

Python objects implemented in C can export a group of functions called
the "buffer interface."  These functions can be used by an object to
expose its data in a raw, byte-oriented format.  Clients of the object
can use the buffer interface to access the object data directly, without
needing to copy it first.

  Two examples of objects that support the buffer interface are strings
and arrays.  The string object exposes the character contents in the
buffer interface’s byte-oriented form.  An array can only expose its
contents via the old-style buffer interface.  This limitation does not
apply to Python 3, where *note memoryview: 1c3. objects can be
constructed from arrays, too.  Array elements may be multi-byte values.

  An example user of the buffer interface is the file object’s ‘write()’
method.  Any object that can export a series of bytes through the buffer
interface can be written to a file.  There are a number of format codes
to *note PyArg_ParseTuple(): 31b. that operate against an object’s
buffer interface, returning data from the target object.

  Starting from version 1.6, Python has been providing Python-level
buffer objects and a C-level buffer API so that any built-in or
used-defined type can expose its characteristics.  Both, however, have
been deprecated because of various shortcomings, and have been
officially removed in Python 3 in favour of a new C-level buffer API and
a new Python-level object named *note memoryview: 1c3.

  The new buffer API has been backported to Python 2.6, and the *note
memoryview: 1c3. object has been backported to Python 2.7.  It is
strongly advised to use them rather than the old APIs, unless you are
blocked from doing so for compatibility reasons.

* Menu:

* The new-style Py_buffer struct:: 
* Buffer related functions:: 
* MemoryView objects:: 
* Old-style buffer objects:: 


File: python.info,  Node: The new-style Py_buffer struct,  Next: Buffer related functions,  Up: Buffers and Memoryview Objects

7.7.3.27 The new-style Py_buffer struct
.......................................

 -- C Type: Py_buffer

      -- C Member: void *buf

          A pointer to the start of the memory for the object.

      -- C Member: Py_ssize_t len

          The total length of the memory in bytes.

      -- C Member: int readonly

          An indicator of whether the buffer is read only.

      -- C Member: const char *format

          A _NULL_ terminated string in *note struct: 166. module style
          syntax giving the contents of the elements available through
          the buffer.  If this is _NULL_, ‘"B"’ (unsigned bytes) is
          assumed.

      -- C Member: int ndim

          The number of dimensions the memory represents as a
          multi-dimensional array.  If it is 0, ‘strides’ and
          ‘suboffsets’ must be _NULL_.

      -- C Member: Py_ssize_t *shape

          An array of ‘Py_ssize_t’s the length of ‘ndim’ giving the
          shape of the memory as a multi-dimensional array.  Note that
          ‘((*shape)[0] * ... * (*shape)[ndims-1])*itemsize’ should be
          equal to ‘len’.

      -- C Member: Py_ssize_t *strides

          An array of ‘Py_ssize_t’s the length of ‘ndim’ giving the
          number of bytes to skip to get to a new element in each
          dimension.

      -- C Member: Py_ssize_t *suboffsets

          An array of ‘Py_ssize_t’s the length of ‘ndim’.  If these
          suboffset numbers are greater than or equal to 0, then the
          value stored along the indicated dimension is a pointer and
          the suboffset value dictates how many bytes to add to the
          pointer after de-referencing.  A suboffset value that it
          negative indicates that no de-referencing should occur
          (striding in a contiguous memory block).

          Here is a function that returns a pointer to the element in an
          N-D array pointed to by an N-dimesional index when there are
          both non-NULL strides and suboffsets:

               void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,
                   Py_ssize_t *suboffsets, Py_ssize_t *indices) {
                   char *pointer = (char*)buf;
                   int i;
                   for (i = 0; i < ndim; i++) {
                       pointer += strides[i] * indices[i];
                       if (suboffsets[i] >=0 ) {
                           pointer = *((char**)pointer) + suboffsets[i];
                       }
                   }
                   return (void*)pointer;
                }

      -- C Member: Py_ssize_t itemsize

          This is a storage for the itemsize (in bytes) of each element
          of the shared memory.  It is technically un-necessary as it
          can be obtained using *note PyBuffer_SizeFromFormat(): 2cae,
          however an exporter may know this information without parsing
          the format string and it is necessary to know the itemsize for
          proper interpretation of striding.  Therefore, storing it is
          more convenient and faster.

      -- C Member: void *internal

          This is for use internally by the exporting object.  For
          example, this might be re-cast as an integer by the exporter
          and used to store flags about whether or not the shape,
          strides, and suboffsets arrays must be freed when the buffer
          is released.  The consumer should never alter this value.


File: python.info,  Node: Buffer related functions,  Next: MemoryView objects,  Prev: The new-style Py_buffer struct,  Up: Buffers and Memoryview Objects

7.7.3.28 Buffer related functions
.................................

 -- C Function: int PyObject_CheckBuffer (PyObject *obj)

     Return 1 if _obj_ supports the buffer interface otherwise 0.

 -- C Function: int PyObject_GetBuffer (PyObject *obj, Py_buffer *view,
          int flags)

     Export _obj_ into a *note Py_buffer: 2ca6, _view_.  These arguments
     must never be _NULL_. The _flags_ argument is a bit field
     indicating what kind of buffer the caller is prepared to deal with
     and therefore what kind of buffer the exporter is allowed to
     return.  The buffer interface allows for complicated memory sharing
     possibilities, but some caller may not be able to handle all the
     complexity but may want to see if the exporter will let them take a
     simpler view to its memory.

     Some exporters may not be able to share memory in every possible
     way and may need to raise errors to signal to some consumers that
     something is just not possible.  These errors should be a *note
     BufferError: 949. unless there is another error that is actually
     causing the problem.  The exporter can use flags information to
     simplify how much of the *note Py_buffer: 2ca6. structure is filled
     in with non-default values and/or raise an error if the object
     can’t support a simpler view of its memory.

     0 is returned on success and -1 on error.

     The following table gives possible values to the _flags_ arguments.

     Flag                                Description
                                         
     --------------------------------------------------------------------------------------------
                                         
     ‘PyBUF_SIMPLE’                      This is the default flag state.  The returned buffer
                                         may or may not have writable memory.  The format of
                                         the data will be assumed to be unsigned bytes.  This
                                         is a "stand-alone" flag constant.  It never needs to
                                         be ’|’d to the others.  The exporter will raise an
                                         error if it cannot provide such a contiguous buffer
                                         of bytes.
                                         
                                         
     ‘PyBUF_WRITABLE’                    The returned buffer must be writable.  If it is not
                                         writable, then raise an error.
                                         
                                         
     ‘PyBUF_STRIDES’                     This implies ‘PyBUF_ND’.  The returned buffer must
                                         provide strides information (i.e.  the strides cannot
                                         be NULL). This would be used when the consumer can
                                         handle strided, discontiguous arrays.  Handling
                                         strides automatically assumes you can handle shape.
                                         The exporter can raise an error if a strided
                                         representation of the data is not possible (i.e.
                                         without the suboffsets).
                                         
                                         
     ‘PyBUF_ND’                          The returned buffer must provide shape information.
                                         The memory will be assumed C-style contiguous (last
                                         dimension varies the fastest).  The exporter may
                                         raise an error if it cannot provide this kind of
                                         contiguous buffer.  If this is not given then shape
                                         will be _NULL_.
                                         
                                         
     ‘PyBUF_C_CONTIGUOUS’                These flags indicate that the contiguity returned
     ‘PyBUF_F_CONTIGUOUS’                buffer must be respectively, C-contiguous (last
     ‘PyBUF_ANY_CONTIGUOUS’              dimension varies the fastest), Fortran contiguous
                                         (first dimension varies the fastest) or either one.
                                         All of these flags imply ‘PyBUF_STRIDES’ and
                                         guarantee that the strides buffer info structure will
                                         be filled in correctly.
                                         
                                         
     ‘PyBUF_INDIRECT’                    This flag indicates the returned buffer must have
                                         suboffsets information (which can be NULL if no
                                         suboffsets are needed).  This can be used when the
                                         consumer can handle indirect array referencing
                                         implied by these suboffsets.  This implies
                                         ‘PyBUF_STRIDES’.
                                         
                                         
     ‘PyBUF_FORMAT’                      The returned buffer must have true format information
                                         if this flag is provided.  This would be used when
                                         the consumer is going to be checking for what ’kind’
                                         of data is actually stored.  An exporter should
                                         always be able to provide this information if
                                         requested.  If format is not explicitly requested
                                         then the format must be returned as _NULL_ (which
                                         means ‘'B'’, or unsigned bytes)
                                         
                                         
     ‘PyBUF_STRIDED’                     This is equivalent to ‘(PyBUF_STRIDES |
                                         PyBUF_WRITABLE)’.
                                         
                                         
     ‘PyBUF_STRIDED_RO’                  This is equivalent to ‘(PyBUF_STRIDES)’.
                                         
                                         
     ‘PyBUF_RECORDS’                     This is equivalent to ‘(PyBUF_STRIDES | PyBUF_FORMAT
                                         | PyBUF_WRITABLE)’.
                                         
                                         
     ‘PyBUF_RECORDS_RO’                  This is equivalent to ‘(PyBUF_STRIDES |
                                         PyBUF_FORMAT)’.
                                         
                                         
     ‘PyBUF_FULL’                        This is equivalent to ‘(PyBUF_INDIRECT | PyBUF_FORMAT
                                         | PyBUF_WRITABLE)’.
                                         
                                         
     ‘PyBUF_FULL_RO’                     This is equivalent to ‘(PyBUF_INDIRECT |
                                         PyBUF_FORMAT)’.
                                         
                                         
     ‘PyBUF_CONTIG’                      This is equivalent to ‘(PyBUF_ND | PyBUF_WRITABLE)’.
                                         
                                         
     ‘PyBUF_CONTIG_RO’                   This is equivalent to ‘(PyBUF_ND)’.
                                         

 -- C Function: void PyBuffer_Release (Py_buffer *view)

     Release the buffer _view_.  This should be called when the buffer
     is no longer being used as it may free memory from it.

 -- C Function: Py_ssize_t PyBuffer_SizeFromFormat (const char *)

     Return the implied *note itemsize: 2cad. from the struct-stype
     ‘format’.

 -- C Function: int PyBuffer_IsContiguous (Py_buffer *view,
          char fortran)

     Return 1 if the memory defined by the _view_ is C-style (_fortran_
     is ‘'C'’) or Fortran-style (_fortran_ is ‘'F'’) contiguous or
     either one (_fortran_ is ‘'A'’).  Return 0 otherwise.

 -- C Function: void PyBuffer_FillContiguousStrides (int ndim,
          Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize,
          char fortran)

     Fill the _strides_ array with byte-strides of a contiguous (C-style
     if _fortran_ is ‘'C'’ or Fortran-style if _fortran_ is ‘'F'’) array
     of the given shape with the given number of bytes per element.

 -- C Function: int PyBuffer_FillInfo (Py_buffer *view, PyObject *obj,
          void *buf, Py_ssize_t len, int readonly, int infoflags)

     Fill in a buffer-info structure, _view_, correctly for an exporter
     that can only share a contiguous chunk of memory of "unsigned
     bytes" of the given length.  Return 0 on success and -1 (with
     raising an error) on error.


File: python.info,  Node: MemoryView objects,  Next: Old-style buffer objects,  Prev: Buffer related functions,  Up: Buffers and Memoryview Objects

7.7.3.29 MemoryView objects
...........................

New in version 2.7.

  A *note memoryview: 1c3. object exposes the new C level buffer
interface as a Python object which can then be passed around like any
other object.

 -- C Function: PyObject *PyMemoryView_FromObject (PyObject *obj)

     Create a memoryview object from an object that defines the new
     buffer interface.

 -- C Function: PyObject *PyMemoryView_FromBuffer (Py_buffer *view)

     Create a memoryview object wrapping the given buffer-info structure
     _view_.  The memoryview object then owns the buffer, which means
     you shouldn’t try to release it yourself: it will be released on
     deallocation of the memoryview object.

 -- C Function: PyObject *PyMemoryView_GetContiguous (PyObject *obj,
          int buffertype, char order)

     Create a memoryview object to a contiguous chunk of memory (in
     either ’C’ or ’F’ortran _order_) from an object that defines the
     buffer interface.  If memory is contiguous, the memoryview object
     points to the original memory.  Otherwise copy is made and the
     memoryview points to a new bytes object.

 -- C Function: int PyMemoryView_Check (PyObject *obj)

     Return true if the object _obj_ is a memoryview object.  It is not
     currently allowed to create subclasses of *note memoryview: 1c3.

 -- C Function: Py_buffer *PyMemoryView_GET_BUFFER (PyObject *obj)

     Return a pointer to the buffer-info structure wrapped by the given
     object.  The object *must* be a memoryview instance; this macro
     doesn’t check its type, you must do it yourself or you will risk
     crashes.


File: python.info,  Node: Old-style buffer objects,  Prev: MemoryView objects,  Up: Buffers and Memoryview Objects

7.7.3.30 Old-style buffer objects
.................................

More information on the old buffer interface is provided in the section
*note Buffer Object Structures: 2cbc, under the description for *note
PyBufferProcs: 2cbd.

  A "buffer object" is defined in the ‘bufferobject.h’ header (included
by ‘Python.h’).  These objects look very similar to string objects at
the Python programming level: they support slicing, indexing,
concatenation, and some other standard string operations.  However,
their data can come from one of two sources: from a block of memory, or
from another object which exports the buffer interface.

  Buffer objects are useful as a way to expose the data from another
object’s buffer interface to the Python programmer.  They can also be
used as a zero-copy slicing mechanism.  Using their ability to reference
a block of memory, it is possible to expose any data to the Python
programmer quite easily.  The memory could be a large, constant array in
a C extension, it could be a raw block of memory for manipulation before
passing to an operating system library, or it could be used to pass
around structured data in its native, in-memory format.

 -- C Type: PyBufferObject

     This subtype of *note PyObject: 3a6. represents a buffer object.

 -- C Variable: PyTypeObject PyBuffer_Type

     The instance of *note PyTypeObject: 29d9. which represents the
     Python buffer type; it is the same object as ‘buffer’ and
     ‘types.BufferType’ in the Python layer.  .

 -- C Variable: int Py_END_OF_BUFFER

     This constant may be passed as the _size_ parameter to *note
     PyBuffer_FromObject(): 2cc1. or *note
     PyBuffer_FromReadWriteObject(): 2cc2.  It indicates that the new
     *note PyBufferObject: 2cbe. should refer to _base_ object from the
     specified _offset_ to the end of its exported buffer.  Using this
     enables the caller to avoid querying the _base_ object for its
     length.

 -- C Function: int PyBuffer_Check (PyObject *p)

     Return true if the argument has type *note PyBuffer_Type: 2cbf.

 -- C Function: PyObject* PyBuffer_FromObject (PyObject *base,
          Py_ssize_t offset, Py_ssize_t size)

     Return value: New reference.

     Return a new read-only buffer object.  This raises *note TypeError:
     218. if _base_ doesn’t support the read-only buffer protocol or
     doesn’t provide exactly one buffer segment, or it raises *note
     ValueError: 236. if _offset_ is less than zero.  The buffer will
     hold a reference to the _base_ object, and the buffer’s contents
     will refer to the _base_ object’s buffer interface, starting as
     position _offset_ and extending for _size_ bytes.  If _size_ is
     ‘Py_END_OF_BUFFER’, then the new buffer’s contents extend to the
     length of the _base_ object’s exported buffer data.

     Changed in version 2.5: This function used an ‘int’ type for
     _offset_ and _size_.  This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_FromReadWriteObject (PyObject *base,
          Py_ssize_t offset, Py_ssize_t size)

     Return value: New reference.

     Return a new writable buffer object.  Parameters and exceptions are
     similar to those for *note PyBuffer_FromObject(): 2cc1.  If the
     _base_ object does not export the writeable buffer protocol, then
     *note TypeError: 218. is raised.

     Changed in version 2.5: This function used an ‘int’ type for
     _offset_ and _size_.  This might require changes in your code for
     properly supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_FromMemory (void *ptr,
          Py_ssize_t size)

     Return value: New reference.

     Return a new read-only buffer object that reads from a specified
     location in memory, with a specified size.  The caller is
     responsible for ensuring that the memory buffer, passed in as
     _ptr_, is not deallocated while the returned buffer object exists.
     Raises *note ValueError: 236. if _size_ is less than zero.  Note
     that ‘Py_END_OF_BUFFER’ may _not_ be passed for the _size_
     parameter; *note ValueError: 236. will be raised in that case.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_FromReadWriteMemory (void *ptr,
          Py_ssize_t size)

     Return value: New reference.

     Similar to *note PyBuffer_FromMemory(): 2cc4, but the returned
     buffer is writable.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: PyObject* PyBuffer_New (Py_ssize_t size)

     Return value: New reference.

     Return a new writable buffer object that maintains its own memory
     buffer of _size_ bytes.  *note ValueError: 236. is returned if
     _size_ is not zero or positive.  Note that the memory buffer (as
     returned by *note PyObject_AsWriteBuffer(): 2ba0.) is not
     specifically aligned.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.


File: python.info,  Node: Tuple Objects,  Next: List Objects,  Prev: Buffers and Memoryview Objects,  Up: Sequence Objects

7.7.3.31 Tuple Objects
......................

 -- C Type: PyTupleObject

     This subtype of *note PyObject: 3a6. represents a Python tuple
     object.

 -- C Variable: PyTypeObject PyTuple_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     tuple type; it is the same object as ‘tuple’ and ‘types.TupleType’
     in the Python layer..

 -- C Function: int PyTuple_Check (PyObject *p)

     Return true if _p_ is a tuple object or an instance of a subtype of
     the tuple type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyTuple_CheckExact (PyObject *p)

     Return true if _p_ is a tuple object, but not an instance of a
     subtype of the tuple type.

     New in version 2.2.

 -- C Function: PyObject* PyTuple_New (Py_ssize_t len)

     Return value: New reference.

     Return a new tuple object of size _len_, or _NULL_ on failure.

     Changed in version 2.5: This function used an ‘int’ type for _len_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyTuple_Pack (Py_ssize_t n, ...)

     Return value: New reference.

     Return a new tuple object of size _n_, or _NULL_ on failure.  The
     tuple values are initialized to the subsequent _n_ C arguments
     pointing to Python objects.  ‘PyTuple_Pack(2, a, b)’ is equivalent
     to ‘Py_BuildValue("(OO)", a, b)’.

     New in version 2.4.

     Changed in version 2.5: This function used an ‘int’ type for _n_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: Py_ssize_t PyTuple_Size (PyObject *p)

     Take a pointer to a tuple object, and return the size of that
     tuple.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyTuple_GET_SIZE (PyObject *p)

     Return the size of the tuple _p_, which must be non-_NULL_ and
     point to a tuple; no error checking is performed.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PyTuple_GetItem (PyObject *p, Py_ssize_t pos)

     Return value: Borrowed reference.

     Return the object at position _pos_ in the tuple pointed to by _p_.
     If _pos_ is out of bounds, return _NULL_ and sets an *note
     IndexError: 4e1. exception.

     Changed in version 2.5: This function used an ‘int’ type for _pos_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyTuple_GET_ITEM (PyObject *p, Py_ssize_t pos)

     Return value: Borrowed reference.

     Like *note PyTuple_GetItem(): 29c0, but does no checking of its
     arguments.

     Changed in version 2.5: This function used an ‘int’ type for _pos_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyTuple_GetSlice (PyObject *p, Py_ssize_t low,
          Py_ssize_t high)

     Return value: New reference.

     Take a slice of the tuple pointed to by _p_ from _low_ to _high_
     and return it as a new tuple.

     Changed in version 2.5: This function used an ‘int’ type for _low_
     and _high_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyTuple_SetItem (PyObject *p, Py_ssize_t pos,
          PyObject *o)

     Insert a reference to object _o_ at position _pos_ of the tuple
     pointed to by _p_.  Return ‘0’ on success.

          Note: This function "steals" a reference to _o_.

     Changed in version 2.5: This function used an ‘int’ type for _pos_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: void PyTuple_SET_ITEM (PyObject *p, Py_ssize_t pos,
          PyObject *o)

     Like *note PyTuple_SetItem(): 29c5, but does no error checking, and
     should _only_ be used to fill in brand new tuples.

          Note: This function "steals" a reference to _o_.

     Changed in version 2.5: This function used an ‘int’ type for _pos_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int _PyTuple_Resize (PyObject **p, Py_ssize_t newsize)

     Can be used to resize a tuple.  _newsize_ will be the new length of
     the tuple.  Because tuples are _supposed_ to be immutable, this
     should only be used if there is only one reference to the object.
     Do _not_ use this if the tuple may already be known to some other
     part of the code.  The tuple will always grow or shrink at the end.
     Think of this as destroying the old tuple and creating a new one,
     only more efficiently.  Returns ‘0’ on success.  Client code should
     never assume that the resulting value of ‘*p’ will be the same as
     before calling this function.  If the object referenced by ‘*p’ is
     replaced, the original ‘*p’ is destroyed.  On failure, returns ‘-1’
     and sets ‘*p’ to _NULL_, and raises *note MemoryError: 94d. or
     *note SystemError: 950.

     Changed in version 2.2: Removed unused third parameter,
     _last_is_sticky_.

     Changed in version 2.5: This function used an ‘int’ type for
     _newsize_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyTuple_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

     New in version 2.6.


File: python.info,  Node: List Objects,  Prev: Tuple Objects,  Up: Sequence Objects

7.7.3.32 List Objects
.....................

 -- C Type: PyListObject

     This subtype of *note PyObject: 3a6. represents a Python list
     object.

 -- C Variable: PyTypeObject PyList_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     list type.  This is the same object as ‘list’ in the Python layer.

 -- C Function: int PyList_Check (PyObject *p)

     Return true if _p_ is a list object or an instance of a subtype of
     the list type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyList_CheckExact (PyObject *p)

     Return true if _p_ is a list object, but not an instance of a
     subtype of the list type.

     New in version 2.2.

 -- C Function: PyObject* PyList_New (Py_ssize_t len)

     Return value: New reference.

     Return a new list of length _len_ on success, or _NULL_ on failure.

          Note: If _len_ is greater than zero, the returned list
          object’s items are set to ‘NULL’.  Thus you cannot use
          abstract API functions such as *note PySequence_SetItem():
          2a3f. or expose the object to Python code before setting all
          items to a real object with *note PyList_SetItem(): 29c6.

     Changed in version 2.5: This function used an ‘int’ for _size_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: Py_ssize_t PyList_Size (PyObject *list)

     Return the length of the list object in _list_; this is equivalent
     to ‘len(list)’ on a list object.

     Changed in version 2.5: This function returned an ‘int’.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PyList_GET_SIZE (PyObject *list)

     Macro form of *note PyList_Size(): 3a7. without error checking.

     Changed in version 2.5: This macro returned an ‘int’.  This might
     require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: PyObject* PyList_GetItem (PyObject *list,
          Py_ssize_t index)

     Return value: Borrowed reference.

     Return the object at position _index_ in the list pointed to by
     _list_.  The position must be positive, indexing from the end of
     the list is not supported.  If _index_ is out of bounds, return
     _NULL_ and set an *note IndexError: 4e1. exception.

     Changed in version 2.5: This function used an ‘int’ for _index_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: PyObject* PyList_GET_ITEM (PyObject *list, Py_ssize_t i)

     Return value: Borrowed reference.

     Macro form of *note PyList_GetItem(): 29c1. without error checking.

     Changed in version 2.5: This macro used an ‘int’ for _i_.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PyList_SetItem (PyObject *list, Py_ssize_t index,
          PyObject *item)

     Set the item at index _index_ in list to _item_.  Return ‘0’ on
     success or ‘-1’ on failure.

          Note: This function "steals" a reference to _item_ and
          discards a reference to an item already in the list at the
          affected position.

     Changed in version 2.5: This function used an ‘int’ for _index_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: void PyList_SET_ITEM (PyObject *list, Py_ssize_t i,
          PyObject *o)

     Macro form of *note PyList_SetItem(): 29c6. without error checking.
     This is normally only used to fill in new lists where there is no
     previous content.

          Note: This macro "steals" a reference to _item_, and, unlike
          *note PyList_SetItem(): 29c6, does _not_ discard a reference
          to any item that it being replaced; any reference in _list_ at
          position _i_ will be leaked.

     Changed in version 2.5: This macro used an ‘int’ for _i_.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PyList_Insert (PyObject *list, Py_ssize_t index,
          PyObject *item)

     Insert the item _item_ into list _list_ in front of index _index_.
     Return ‘0’ if successful; return ‘-1’ and set an exception if
     unsuccessful.  Analogous to ‘list.insert(index, item)’.

     Changed in version 2.5: This function used an ‘int’ for _index_.
     This might require changes in your code for properly supporting
     64-bit systems.

 -- C Function: int PyList_Append (PyObject *list, PyObject *item)

     Append the object _item_ at the end of list _list_.  Return ‘0’ if
     successful; return ‘-1’ and set an exception if unsuccessful.
     Analogous to ‘list.append(item)’.

 -- C Function: PyObject* PyList_GetSlice (PyObject *list,
          Py_ssize_t low, Py_ssize_t high)

     Return value: New reference.

     Return a list of the objects in _list_ containing the objects
     _between_ _low_ and _high_.  Return _NULL_ and set an exception if
     unsuccessful.  Analogous to ‘list[low:high]’.  Negative indices, as
     when slicing from Python, are not supported.

     Changed in version 2.5: This function used an ‘int’ for _low_ and
     _high_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyList_SetSlice (PyObject *list, Py_ssize_t low,
          Py_ssize_t high, PyObject *itemlist)

     Set the slice of _list_ between _low_ and _high_ to the contents of
     _itemlist_.  Analogous to ‘list[low:high] = itemlist’.  The
     _itemlist_ may be _NULL_, indicating the assignment of an empty
     list (slice deletion).  Return ‘0’ on success, ‘-1’ on failure.
     Negative indices, as when slicing from Python, are not supported.

     Changed in version 2.5: This function used an ‘int’ for _low_ and
     _high_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyList_Sort (PyObject *list)

     Sort the items of _list_ in place.  Return ‘0’ on success, ‘-1’ on
     failure.  This is equivalent to ‘list.sort()’.

 -- C Function: int PyList_Reverse (PyObject *list)

     Reverse the items of _list_ in place.  Return ‘0’ on success, ‘-1’
     on failure.  This is the equivalent of ‘list.reverse()’.

 -- C Function: PyObject* PyList_AsTuple (PyObject *list)

     Return value: New reference.

     Return a new tuple object containing the contents of _list_;
     equivalent to ‘tuple(list)’.


File: python.info,  Node: Mapping Objects,  Next: Other Objects,  Prev: Sequence Objects,  Up: Concrete Objects Layer

7.7.4 Mapping Objects
---------------------

* Menu:

* Dictionary Objects:: 


File: python.info,  Node: Dictionary Objects,  Up: Mapping Objects

7.7.4.1 Dictionary Objects
..........................

 -- C Type: PyDictObject

     This subtype of *note PyObject: 3a6. represents a Python dictionary
     object.

 -- C Variable: PyTypeObject PyDict_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     dictionary type.  This is exposed to Python programs as ‘dict’ and
     ‘types.DictType’.

 -- C Function: int PyDict_Check (PyObject *p)

     Return true if _p_ is a dict object or an instance of a subtype of
     the dict type.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyDict_CheckExact (PyObject *p)

     Return true if _p_ is a dict object, but not an instance of a
     subtype of the dict type.

     New in version 2.4.

 -- C Function: PyObject* PyDict_New ()

     Return value: New reference.

     Return a new empty dictionary, or _NULL_ on failure.

 -- C Function: PyObject* PyDictProxy_New (PyObject *dict)

     Return value: New reference.

     Return a proxy object for a mapping which enforces read-only
     behavior.  This is normally used to create a proxy to prevent
     modification of the dictionary for non-dynamic class types.

     New in version 2.2.

 -- C Function: void PyDict_Clear (PyObject *p)

     Empty an existing dictionary of all key-value pairs.

 -- C Function: int PyDict_Contains (PyObject *p, PyObject *key)

     Determine if dictionary _p_ contains _key_.  If an item in _p_ is
     matches _key_, return ‘1’, otherwise return ‘0’.  On error, return
     ‘-1’.  This is equivalent to the Python expression ‘key in p’.

     New in version 2.4.

 -- C Function: PyObject* PyDict_Copy (PyObject *p)

     Return value: New reference.

     Return a new dictionary that contains the same key-value pairs as
     _p_.

     New in version 1.6.

 -- C Function: int PyDict_SetItem (PyObject *p, PyObject *key,
          PyObject *val)

     Insert _value_ into the dictionary _p_ with a key of _key_.  _key_
     must be *note hashable: 6f5.; if it isn’t, *note TypeError: 218.
     will be raised.  Return ‘0’ on success or ‘-1’ on failure.

 -- C Function: int PyDict_SetItemString (PyObject *p, const char *key,
          PyObject *val)

     Insert _value_ into the dictionary _p_ using _key_ as a key.  _key_
     should be a ‘char*’.  The key object is created using
     ‘PyString_FromString(key)’.  Return ‘0’ on success or ‘-1’ on
     failure.

 -- C Function: int PyDict_DelItem (PyObject *p, PyObject *key)

     Remove the entry in dictionary _p_ with key _key_.  _key_ must be
     hashable; if it isn’t, *note TypeError: 218. is raised.  Return ‘0’
     on success or ‘-1’ on failure.

 -- C Function: int PyDict_DelItemString (PyObject *p, char *key)

     Remove the entry in dictionary _p_ which has a key specified by the
     string _key_.  Return ‘0’ on success or ‘-1’ on failure.

 -- C Function: PyObject* PyDict_GetItem (PyObject *p, PyObject *key)

     Return value: Borrowed reference.

     Return the object from dictionary _p_ which has a key _key_.
     Return _NULL_ if the key _key_ is not present, but _without_
     setting an exception.

 -- C Function: PyObject* PyDict_GetItemString (PyObject *p, const
          char *key)

     Return value: Borrowed reference.

     This is the same as *note PyDict_GetItem(): 29c2, but _key_ is
     specified as a ‘char*’, rather than a *note PyObject*: 3a6.

 -- C Function: PyObject* PyDict_Items (PyObject *p)

     Return value: New reference.

     Return a *note PyListObject: 2cd9. containing all the items from
     the dictionary, as in the dictionary method *note dict.items():
     1e3.

 -- C Function: PyObject* PyDict_Keys (PyObject *p)

     Return value: New reference.

     Return a *note PyListObject: 2cd9. containing all the keys from the
     dictionary, as in the dictionary method *note dict.keys(): 1e1.

 -- C Function: PyObject* PyDict_Values (PyObject *p)

     Return value: New reference.

     Return a *note PyListObject: 2cd9. containing all the values from
     the dictionary _p_, as in the dictionary method *note
     dict.values(): 1e2.

 -- C Function: Py_ssize_t PyDict_Size (PyObject *p)

     Return the number of items in the dictionary.  This is equivalent
     to ‘len(p)’ on a dictionary.

     Changed in version 2.5: This function returned an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PyDict_Next (PyObject *p, Py_ssize_t *ppos,
          PyObject **pkey, PyObject **pvalue)

     Iterate over all key-value pairs in the dictionary _p_.  The
     ‘Py_ssize_t’ referred to by _ppos_ must be initialized to ‘0’ prior
     to the first call to this function to start the iteration; the
     function returns true for each pair in the dictionary, and false
     once all pairs have been reported.  The parameters _pkey_ and
     _pvalue_ should either point to *note PyObject*: 3a6. variables
     that will be filled in with each key and value, respectively, or
     may be _NULL_. Any references returned through them are borrowed.
     _ppos_ should not be altered during iteration.  Its value
     represents offsets within the internal dictionary structure, and
     since the structure is sparse, the offsets are not consecutive.

     For example:

          PyObject *key, *value;
          Py_ssize_t pos = 0;

          while (PyDict_Next(self->dict, &pos, &key, &value)) {
              /* do something interesting with the values... */
              ...
          }

     The dictionary _p_ should not be mutated during iteration.  It is
     safe (since Python 2.1) to modify the values of the keys as you
     iterate over the dictionary, but only so long as the set of keys
     does not change.  For example:

          PyObject *key, *value;
          Py_ssize_t pos = 0;

          while (PyDict_Next(self->dict, &pos, &key, &value)) {
              int i = PyInt_AS_LONG(value) + 1;
              PyObject *o = PyInt_FromLong(i);
              if (o == NULL)
                  return -1;
              if (PyDict_SetItem(self->dict, key, o) < 0) {
                  Py_DECREF(o);
                  return -1;
              }
              Py_DECREF(o);
          }

     Changed in version 2.5: This function used an ‘int *’ type for
     _ppos_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: int PyDict_Merge (PyObject *a, PyObject *b,
          int override)

     Iterate over mapping object _b_ adding key-value pairs to
     dictionary _a_.  _b_ may be a dictionary, or any object supporting
     *note PyMapping_Keys(): 2b90. and *note PyObject_GetItem(): 2a42.
     If _override_ is true, existing pairs in _a_ will be replaced if a
     matching key is found in _b_, otherwise pairs will only be added if
     there is not a matching key in _a_.  Return ‘0’ on success or ‘-1’
     if an exception was raised.

     New in version 2.2.

 -- C Function: int PyDict_Update (PyObject *a, PyObject *b)

     This is the same as ‘PyDict_Merge(a, b, 1)’ in C, and is similar to
     ‘a.update(b)’ in Python except that *note PyDict_Update(): 2cfc.
     doesn’t fall back to the iterating over a sequence of key value
     pairs if the second argument has no "keys" attribute.  Return ‘0’
     on success or ‘-1’ if an exception was raised.

     New in version 2.2.

 -- C Function: int PyDict_MergeFromSeq2 (PyObject *a, PyObject *seq2,
          int override)

     Update or merge into dictionary _a_, from the key-value pairs in
     _seq2_.  _seq2_ must be an iterable object producing iterable
     objects of length 2, viewed as key-value pairs.  In case of
     duplicate keys, the last wins if _override_ is true, else the first
     wins.  Return ‘0’ on success or ‘-1’ if an exception was raised.
     Equivalent Python (except for the return value):

          def PyDict_MergeFromSeq2(a, seq2, override):
              for key, value in seq2:
                  if override or key not in a:
                      a[key] = value

     New in version 2.2.


File: python.info,  Node: Other Objects,  Prev: Mapping Objects,  Up: Concrete Objects Layer

7.7.5 Other Objects
-------------------

* Menu:

* Class and Instance Objects:: 
* Function Objects: Function Objects<2>. 
* Method Objects: Method Objects<2>. 
* File Objects: File Objects<2>. 
* Module Objects:: 
* Iterator Objects:: 
* Descriptor Objects:: 
* Slice Objects:: 
* Weak Reference Objects: Weak Reference Objects<2>. 
* Capsules: Capsules<2>. 
* CObjects:: 
* Cell Objects:: 
* Generator Objects:: 
* DateTime Objects: DateTime Objects<2>. 
* Set Objects: Set Objects<2>. 
* Code Objects: Code Objects<2>. 


File: python.info,  Node: Class and Instance Objects,  Next: Function Objects<2>,  Up: Other Objects

7.7.5.1 Class and Instance Objects
..................................

Note that the class objects described here represent old-style classes,
which will go away in Python 3.  When creating new types for extension
modules, you will want to work with type objects (section *note Type
Objects: 2ba9.).

 -- C Type: PyClassObject

     The C structure of the objects used to describe built-in classes.

 -- C Variable: PyObject* PyClass_Type

     This is the type object for class objects; it is the same object as
     ‘types.ClassType’ in the Python layer.

 -- C Function: int PyClass_Check (PyObject *o)

     Return true if the object _o_ is a class object, including
     instances of types derived from the standard class object.  Return
     false in all other cases.

 -- C Function: int PyClass_IsSubclass (PyObject *klass, PyObject *base)

     Return true if _klass_ is a subclass of _base_.  Return false in
     all other cases.

  There are very few functions specific to instance objects.

 -- C Variable: PyTypeObject PyInstance_Type

     Type object for class instances.

 -- C Function: int PyInstance_Check (PyObject *obj)

     Return true if _obj_ is an instance.

 -- C Function: PyObject* PyInstance_New (PyObject *class,
          PyObject *arg, PyObject *kw)

     Return value: New reference.

     Create a new instance of a specific class.  The parameters _arg_
     and _kw_ are used as the positional and keyword parameters to the
     object’s constructor.

 -- C Function: PyObject* PyInstance_NewRaw (PyObject *class,
          PyObject *dict)

     Return value: New reference.

     Create a new instance of a specific class without calling its
     constructor.  _class_ is the class of new object.  The _dict_
     parameter will be used as the object’s ‘__dict__’; if _NULL_, a new
     dictionary will be created for the instance.


File: python.info,  Node: Function Objects<2>,  Next: Method Objects<2>,  Prev: Class and Instance Objects,  Up: Other Objects

7.7.5.2 Function Objects
........................

There are a few functions specific to Python functions.

 -- C Type: PyFunctionObject

     The C structure used for functions.

 -- C Variable: PyTypeObject PyFunction_Type

     This is an instance of *note PyTypeObject: 29d9. and represents the
     Python function type.  It is exposed to Python programmers as
     ‘types.FunctionType’.

 -- C Function: int PyFunction_Check (PyObject *o)

     Return true if _o_ is a function object (has type *note
     PyFunction_Type: 2d0f.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyFunction_New (PyObject *code,
          PyObject *globals)

     Return value: New reference.

     Return a new function object associated with the code object
     _code_.  _globals_ must be a dictionary with the global variables
     accessible to the function.

     The function’s docstring, name and ___module___ are retrieved from
     the code object, the argument defaults and closure are set to
     _NULL_.

 -- C Function: PyObject* PyFunction_GetCode (PyObject *op)

     Return value: Borrowed reference.

     Return the code object associated with the function object _op_.

 -- C Function: PyObject* PyFunction_GetGlobals (PyObject *op)

     Return value: Borrowed reference.

     Return the globals dictionary associated with the function object
     _op_.

 -- C Function: PyObject* PyFunction_GetModule (PyObject *op)

     Return value: Borrowed reference.

     Return the ___module___ attribute of the function object _op_.
     This is normally a string containing the module name, but can be
     set to any other object by Python code.

 -- C Function: PyObject* PyFunction_GetDefaults (PyObject *op)

     Return value: Borrowed reference.

     Return the argument default values of the function object _op_.
     This can be a tuple of arguments or _NULL_.

 -- C Function: int PyFunction_SetDefaults (PyObject *op,
          PyObject *defaults)

     Set the argument default values for the function object _op_.
     _defaults_ must be _Py_None_ or a tuple.

     Raises *note SystemError: 950. and returns ‘-1’ on failure.

 -- C Function: PyObject* PyFunction_GetClosure (PyObject *op)

     Return value: Borrowed reference.

     Return the closure associated with the function object _op_.  This
     can be _NULL_ or a tuple of cell objects.

 -- C Function: int PyFunction_SetClosure (PyObject *op,
          PyObject *closure)

     Set the closure associated with the function object _op_.
     _closure_ must be _Py_None_ or a tuple of cell objects.

     Raises *note SystemError: 950. and returns ‘-1’ on failure.


File: python.info,  Node: Method Objects<2>,  Next: File Objects<2>,  Prev: Function Objects<2>,  Up: Other Objects

7.7.5.3 Method Objects
......................

There are some useful functions that are useful for working with method
objects.

 -- C Variable: PyTypeObject PyMethod_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     method type.  This is exposed to Python programs as
     ‘types.MethodType’.

 -- C Function: int PyMethod_Check (PyObject *o)

     Return true if _o_ is a method object (has type *note
     PyMethod_Type: 2d1c.).  The parameter must not be _NULL_.

 -- C Function: PyObject* PyMethod_New (PyObject *func, PyObject *self,
          PyObject *class)

     Return value: New reference.

     Return a new method object, with _func_ being any callable object;
     this is the function that will be called when the method is called.
     If this method should be bound to an instance, _self_ should be the
     instance and _class_ should be the class of _self_, otherwise
     _self_ should be _NULL_ and _class_ should be the class which
     provides the unbound method..

 -- C Function: PyObject* PyMethod_Class (PyObject *meth)

     Return value: Borrowed reference.

     Return the class object from which the method _meth_ was created;
     if this was created from an instance, it will be the class of the
     instance.

 -- C Function: PyObject* PyMethod_GET_CLASS (PyObject *meth)

     Return value: Borrowed reference.

     Macro version of *note PyMethod_Class(): 2d1f. which avoids error
     checking.

 -- C Function: PyObject* PyMethod_Function (PyObject *meth)

     Return value: Borrowed reference.

     Return the function object associated with the method _meth_.

 -- C Function: PyObject* PyMethod_GET_FUNCTION (PyObject *meth)

     Return value: Borrowed reference.

     Macro version of *note PyMethod_Function(): 2d21. which avoids
     error checking.

 -- C Function: PyObject* PyMethod_Self (PyObject *meth)

     Return value: Borrowed reference.

     Return the instance associated with the method _meth_ if it is
     bound, otherwise return _NULL_.

 -- C Function: PyObject* PyMethod_GET_SELF (PyObject *meth)

     Return value: Borrowed reference.

     Macro version of *note PyMethod_Self(): 2d23. which avoids error
     checking.

 -- C Function: int PyMethod_ClearFreeList ()

     Clear the free list.  Return the total number of freed items.

     New in version 2.6.


File: python.info,  Node: File Objects<2>,  Next: Module Objects,  Prev: Method Objects<2>,  Up: Other Objects

7.7.5.4 File Objects
....................

Python’s built-in file objects are implemented entirely on the ‘FILE*’
support from the C standard library.  This is an implementation detail
and may change in future releases of Python.

 -- C Type: PyFileObject

     This subtype of *note PyObject: 3a6. represents a Python file
     object.

 -- C Variable: PyTypeObject PyFile_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     file type.  This is exposed to Python programs as ‘file’ and
     ‘types.FileType’.

 -- C Function: int PyFile_Check (PyObject *p)

     Return true if its argument is a *note PyFileObject: 2d29. or a
     subtype of *note PyFileObject: 2d29.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyFile_CheckExact (PyObject *p)

     Return true if its argument is a *note PyFileObject: 2d29, but not
     a subtype of *note PyFileObject: 2d29.

     New in version 2.2.

 -- C Function: PyObject* PyFile_FromString (char *filename, char *mode)

     Return value: New reference.

     On success, return a new file object that is opened on the file
     given by _filename_, with a file mode given by _mode_, where _mode_
     has the same semantics as the standard C routine ‘fopen()’.  On
     failure, return _NULL_.

 -- C Function: PyObject* PyFile_FromFile (FILE *fp, char *name,
          char *mode, int (*close)(FILE*))

     Return value: New reference.

     Create a new *note PyFileObject: 2d29. from the already-open
     standard C file pointer, _fp_.  The function _close_ will be called
     when the file should be closed.  Return _NULL_ and close the file
     using _close_ on failure.  _close_ is optional and can be set to
     _NULL_.

 -- C Function: FILE* PyFile_AsFile (PyObject *p)

     Return the file object associated with _p_ as a ‘FILE*’.

     If the caller will ever use the returned ‘FILE*’ object while the
     *note GIL: 2d30. is released it must also call the *note
     PyFile_IncUseCount(): 36e. and *note PyFile_DecUseCount(): 36f.
     functions described below as appropriate.

 -- C Function: void PyFile_IncUseCount (PyFileObject *p)

     Increments the PyFileObject’s internal use count to indicate that
     the underlying ‘FILE*’ is being used.  This prevents Python from
     calling f_close() on it from another thread.  Callers of this must
     call *note PyFile_DecUseCount(): 36f. when they are finished with
     the ‘FILE*’.  Otherwise the file object will never be closed by
     Python.

     The *note GIL: 2d30. must be held while calling this function.

     The suggested use is to call this after *note PyFile_AsFile():
     2d2f. and before you release the GIL:

          FILE *fp = PyFile_AsFile(p);
          PyFile_IncUseCount(p);
          /* ... */
          Py_BEGIN_ALLOW_THREADS
          do_something(fp);
          Py_END_ALLOW_THREADS
          /* ... */
          PyFile_DecUseCount(p);

     New in version 2.6.

 -- C Function: void PyFile_DecUseCount (PyFileObject *p)

     Decrements the PyFileObject’s internal unlocked_count member to
     indicate that the caller is done with its own use of the ‘FILE*’.
     This may only be called to undo a prior call to *note
     PyFile_IncUseCount(): 36e.

     The *note GIL: 2d30. must be held while calling this function (see
     the example above).

     New in version 2.6.

 -- C Function: PyObject* PyFile_GetLine (PyObject *p, int n)

     Return value: New reference.

     Equivalent to ‘p.readline([n])’, this function reads one line from
     the object _p_.  _p_ may be a file object or any object with a
     *note readline(): 11b9. method.  If _n_ is ‘0’, exactly one line is
     read, regardless of the length of the line.  If _n_ is greater than
     ‘0’, no more than _n_ bytes will be read from the file; a partial
     line can be returned.  In both cases, an empty string is returned
     if the end of the file is reached immediately.  If _n_ is less than
     ‘0’, however, one line is read regardless of length, but *note
     EOFError: 88a. is raised if the end of the file is reached
     immediately.

 -- C Function: PyObject* PyFile_Name (PyObject *p)

     Return value: Borrowed reference.

     Return the name of the file specified by _p_ as a string object.

 -- C Function: void PyFile_SetBufSize (PyFileObject *p, int n)

     Available on systems with ‘setvbuf()’ only.  This should only be
     called immediately after file object creation.

 -- C Function: int PyFile_SetEncoding (PyFileObject *p, const
          char *enc)

     Set the file’s encoding for Unicode output to _enc_.  Return 1 on
     success and 0 on failure.

     New in version 2.3.

 -- C Function: int PyFile_SetEncodingAndErrors (PyFileObject *p, const
          char *enc, *errors)

     Set the file’s encoding for Unicode output to _enc_, and its error
     mode to _err_.  Return 1 on success and 0 on failure.

     New in version 2.6.

 -- C Function: int PyFile_SoftSpace (PyObject *p, int newflag)

     This function exists for internal use by the interpreter.  Set the
     ‘softspace’ attribute of _p_ to _newflag_ and return the previous
     value.  _p_ does not have to be a file object for this function to
     work properly; any object is supported (thought its only
     interesting if the ‘softspace’ attribute can be set).  This
     function clears any errors, and will return ‘0’ as the previous
     value if the attribute either does not exist or if there were
     errors in retrieving it.  There is no way to detect errors from
     this function, but doing so should not be needed.

 -- C Function: int PyFile_WriteObject (PyObject *obj, PyObject *p,
          int flags)

     Write object _obj_ to file object _p_.  The only supported flag for
     _flags_ is ‘Py_PRINT_RAW’; if given, the *note str(): 1ea. of the
     object is written instead of the *note repr(): 145.  Return ‘0’ on
     success or ‘-1’ on failure; the appropriate exception will be set.

 -- C Function: int PyFile_WriteString (const char *s, PyObject *p)

     Write string _s_ to file object _p_.  Return ‘0’ on success or ‘-1’
     on failure; the appropriate exception will be set.


File: python.info,  Node: Module Objects,  Next: Iterator Objects,  Prev: File Objects<2>,  Up: Other Objects

7.7.5.5 Module Objects
......................

There are only a few functions special to module objects.

 -- C Variable: PyTypeObject PyModule_Type

     This instance of *note PyTypeObject: 29d9. represents the Python
     module type.  This is exposed to Python programs as
     ‘types.ModuleType’.

 -- C Function: int PyModule_Check (PyObject *p)

     Return true if _p_ is a module object, or a subtype of a module
     object.

     Changed in version 2.2: Allowed subtypes to be accepted.

 -- C Function: int PyModule_CheckExact (PyObject *p)

     Return true if _p_ is a module object, but not a subtype of *note
     PyModule_Type: 2d3c.

     New in version 2.2.

 -- C Function: PyObject* PyModule_New (const char *name)

     Return value: New reference.

     Return a new module object with the ‘__name__’ attribute set to
     _name_.  Only the module’s ‘__doc__’ and ‘__name__’ attributes are
     filled in; the caller is responsible for providing a ‘__file__’
     attribute.

 -- C Function: PyObject* PyModule_GetDict (PyObject *module)

     Return value: Borrowed reference.

     Return the dictionary object that implements _module_’s namespace;
     this object is the same as the ‘__dict__’ attribute of the module
     object.  This function never fails.  It is recommended extensions
     use other ‘PyModule_*()’ and ‘PyObject_*()’ functions rather than
     directly manipulate a module’s ‘__dict__’.

 -- C Function: char* PyModule_GetName (PyObject *module)

     Return _module_’s ‘__name__’ value.  If the module does not provide
     one, or if it is not a string, *note SystemError: 950. is raised
     and _NULL_ is returned.

 -- C Function: char* PyModule_GetFilename (PyObject *module)

     Return the name of the file from which _module_ was loaded using
     _module_’s ‘__file__’ attribute.  If this is not defined, or if it
     is not a string, raise *note SystemError: 950. and return _NULL_.

 -- C Function: int PyModule_AddObject (PyObject *module, const
          char *name, PyObject *value)

     Add an object to _module_ as _name_.  This is a convenience
     function which can be used from the module’s initialization
     function.  This steals a reference to _value_.  Return ‘-1’ on
     error, ‘0’ on success.

     New in version 2.0.

 -- C Function: int PyModule_AddIntConstant (PyObject *module, const
          char *name, long value)

     Add an integer constant to _module_ as _name_.  This convenience
     function can be used from the module’s initialization function.
     Return ‘-1’ on error, ‘0’ on success.

     New in version 2.0.

 -- C Function: int PyModule_AddStringConstant (PyObject *module, const
          char *name, const char *value)

     Add a string constant to _module_ as _name_.  This convenience
     function can be used from the module’s initialization function.
     The string _value_ must be null-terminated.  Return ‘-1’ on error,
     ‘0’ on success.

     New in version 2.0.

 -- C Function: int PyModule_AddIntMacro (PyObject *module, macro)

     Add an int constant to _module_.  The name and the value are taken
     from _macro_.  For example ‘PyModule_AddIntMacro(module, AF_INET)’
     adds the int constant _AF_INET_ with the value of _AF_INET_ to
     _module_.  Return ‘-1’ on error, ‘0’ on success.

     New in version 2.6.

 -- C Function: int PyModule_AddStringMacro (PyObject *module, macro)

          Add a string constant to _module_.

     New in version 2.6.


File: python.info,  Node: Iterator Objects,  Next: Descriptor Objects,  Prev: Module Objects,  Up: Other Objects

7.7.5.6 Iterator Objects
........................

Python provides two general-purpose iterator objects.  The first, a
sequence iterator, works with an arbitrary sequence supporting the *note
__getitem__(): 44f. method.  The second works with a callable object and
a sentinel value, calling the callable for each item in the sequence,
and ending the iteration when the sentinel value is returned.

 -- C Variable: PyTypeObject PySeqIter_Type

     Type object for iterator objects returned by *note PySeqIter_New():
     2d4b. and the one-argument form of the *note iter(): 320. built-in
     function for built-in sequence types.

     New in version 2.2.

 -- C Function: int PySeqIter_Check (op)

     Return true if the type of _op_ is *note PySeqIter_Type: 2d4a.

     New in version 2.2.

 -- C Function: PyObject* PySeqIter_New (PyObject *seq)

     Return value: New reference.

     Return an iterator that works with a general sequence object,
     _seq_.  The iteration ends when the sequence raises *note
     IndexError: 4e1. for the subscripting operation.

     New in version 2.2.

 -- C Variable: PyTypeObject PyCallIter_Type

     Type object for iterator objects returned by *note
     PyCallIter_New(): 2d4e. and the two-argument form of the *note
     iter(): 320. built-in function.

     New in version 2.2.

 -- C Function: int PyCallIter_Check (op)

     Return true if the type of _op_ is *note PyCallIter_Type: 2d4d.

     New in version 2.2.

 -- C Function: PyObject* PyCallIter_New (PyObject *callable,
          PyObject *sentinel)

     Return value: New reference.

     Return a new iterator.  The first parameter, _callable_, can be any
     Python callable object that can be called with no parameters; each
     call to it should return the next item in the iteration.  When
     _callable_ returns a value equal to _sentinel_, the iteration will
     be terminated.

     New in version 2.2.


File: python.info,  Node: Descriptor Objects,  Next: Slice Objects,  Prev: Iterator Objects,  Up: Other Objects

7.7.5.7 Descriptor Objects
..........................

"Descriptors" are objects that describe some attribute of an object.
They are found in the dictionary of type objects.

 -- C Variable: PyTypeObject PyProperty_Type

     The type object for the built-in descriptor types.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewGetSet (PyTypeObject *type, struct
          PyGetSetDef *getset)

     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewMember (PyTypeObject *type, struct
          PyMemberDef *meth)

     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewMethod (PyTypeObject *type, struct
          PyMethodDef *meth)

     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewWrapper (PyTypeObject *type, struct
          wrapperbase *wrapper, void *wrapped)

     Return value: New reference.

     New in version 2.2.

 -- C Function: PyObject* PyDescr_NewClassMethod (PyTypeObject *type,
          PyMethodDef *method)

     Return value: New reference.

     New in version 2.3.

 -- C Function: int PyDescr_IsData (PyObject *descr)

     Return true if the descriptor objects _descr_ describes a data
     attribute, or false if it describes a method.  _descr_ must be a
     descriptor object; there is no error checking.

     New in version 2.2.

 -- C Function: PyObject* PyWrapper_New (PyObject *, PyObject *)

     Return value: New reference.

     New in version 2.2.


File: python.info,  Node: Slice Objects,  Next: Weak Reference Objects<2>,  Prev: Descriptor Objects,  Up: Other Objects

7.7.5.8 Slice Objects
.....................

 -- C Variable: PyTypeObject PySlice_Type

     The type object for slice objects.  This is the same as ‘slice’ and
     ‘types.SliceType’.

 -- C Function: int PySlice_Check (PyObject *ob)

     Return true if _ob_ is a slice object; _ob_ must not be _NULL_.

 -- C Function: PyObject* PySlice_New (PyObject *start, PyObject *stop,
          PyObject *step)

     Return value: New reference.

     Return a new slice object with the given values.  The _start_,
     _stop_, and _step_ parameters are used as the values of the slice
     object attributes of the same names.  Any of the values may be
     _NULL_, in which case the ‘None’ will be used for the corresponding
     attribute.  Return _NULL_ if the new object could not be allocated.

 -- C Function: int PySlice_GetIndices (PySliceObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step)

     Retrieve the start, stop and step indices from the slice object
     _slice_, assuming a sequence of length _length_.  Treats indices
     greater than _length_ as errors.

     Returns 0 on success and -1 on error with no exception set (unless
     one of the indices was not *note None: 39a. and failed to be
     converted to an integer, in which case -1 is returned with an
     exception set).

     You probably do not want to use this function.  If you want to use
     slice objects in versions of Python prior to 2.3, you would
     probably do well to incorporate the source of *note
     PySlice_GetIndicesEx(): 2d62, suitably renamed, in the source of
     your extension.

     Changed in version 2.5: This function used an ‘int’ type for
     _length_ and an ‘int *’ type for _start_, _stop_, and _step_.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: int PySlice_GetIndicesEx (PySliceObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step, Py_ssize_t *slicelength)

     Usable replacement for *note PySlice_GetIndices(): 2d61.  Retrieve
     the start, stop, and step indices from the slice object _slice_
     assuming a sequence of length _length_, and store the length of the
     slice in _slicelength_.  Out of bounds indices are clipped in a
     manner consistent with the handling of normal slices.

     Returns 0 on success and -1 on error with exception set.

     New in version 2.3.

     Changed in version 2.5: This function used an ‘int’ type for
     _length_ and an ‘int *’ type for _start_, _stop_, _step_, and
     _slicelength_.  This might require changes in your code for
     properly supporting 64-bit systems.


File: python.info,  Node: Weak Reference Objects<2>,  Next: Capsules<2>,  Prev: Slice Objects,  Up: Other Objects

7.7.5.9 Weak Reference Objects
..............................

Python supports _weak references_ as first-class objects.  There are two
specific object types which directly implement weak references.  The
first is a simple reference object, and the second acts as a proxy for
the original object as much as it can.

 -- C Function: int PyWeakref_Check (ob)

     Return true if _ob_ is either a reference or proxy object.

     New in version 2.2.

 -- C Function: int PyWeakref_CheckRef (ob)

     Return true if _ob_ is a reference object.

     New in version 2.2.

 -- C Function: int PyWeakref_CheckProxy (ob)

     Return true if _ob_ is a proxy object.

     New in version 2.2.

 -- C Function: PyObject* PyWeakref_NewRef (PyObject *ob,
          PyObject *callback)

     Return value: New reference.

     Return a weak reference object for the object _ob_.  This will
     always return a new reference, but is not guaranteed to create a
     new object; an existing reference object may be returned.  The
     second parameter, _callback_, can be a callable object that
     receives notification when _ob_ is garbage collected; it should
     accept a single parameter, which will be the weak reference object
     itself.  _callback_ may also be ‘None’ or _NULL_. If _ob_ is not a
     weakly-referencable object, or if _callback_ is not callable,
     ‘None’, or _NULL_, this will return _NULL_ and raise *note
     TypeError: 218.

     New in version 2.2.

 -- C Function: PyObject* PyWeakref_NewProxy (PyObject *ob,
          PyObject *callback)

     Return value: New reference.

     Return a weak reference proxy object for the object _ob_.  This
     will always return a new reference, but is not guaranteed to create
     a new object; an existing proxy object may be returned.  The second
     parameter, _callback_, can be a callable object that receives
     notification when _ob_ is garbage collected; it should accept a
     single parameter, which will be the weak reference object itself.
     _callback_ may also be ‘None’ or _NULL_. If _ob_ is not a
     weakly-referencable object, or if _callback_ is not callable,
     ‘None’, or _NULL_, this will return _NULL_ and raise *note
     TypeError: 218.

     New in version 2.2.

 -- C Function: PyObject* PyWeakref_GetObject (PyObject *ref)

     Return value: Borrowed reference.

     Return the referenced object from a weak reference, _ref_.  If the
     referent is no longer live, returns ‘Py_None’.

     New in version 2.2.

          Warning: This function returns a *borrowed reference* to the
          referenced object.  This means that you should always call
          *note Py_INCREF(): 299b. on the object except if you know that
          it cannot be destroyed while you are still using it.

 -- C Function: PyObject* PyWeakref_GET_OBJECT (PyObject *ref)

     Return value: Borrowed reference.

     Similar to *note PyWeakref_GetObject(): 2d6b, but implemented as a
     macro that does no error checking.

     New in version 2.2.


File: python.info,  Node: Capsules<2>,  Next: CObjects,  Prev: Weak Reference Objects<2>,  Up: Other Objects

7.7.5.10 Capsules
.................

Refer to *note Providing a C API for an Extension Module: 2c9. for more
information on using these objects.

 -- C Type: PyCapsule

     This subtype of *note PyObject: 3a6. represents an opaque value,
     useful for C extension modules who need to pass an opaque value (as
     a ‘void*’ pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Type: PyCapsule_Destructor

     The type of a destructor callback for a capsule.  Defined as:

          typedef void (*PyCapsule_Destructor)(PyObject *);

     See *note PyCapsule_New(): 29d1. for the semantics of
     PyCapsule_Destructor callbacks.

 -- C Function: int PyCapsule_CheckExact (PyObject *p)

     Return true if its argument is a *note PyCapsule: 1c6.

 -- C Function: PyObject* PyCapsule_New (void *pointer, const
          char *name, PyCapsule_Destructor destructor)

     Return value: New reference.

     Create a *note PyCapsule: 1c6. encapsulating the _pointer_.  The
     _pointer_ argument may not be _NULL_.

     On failure, set an exception and return _NULL_.

     The _name_ string may either be _NULL_ or a pointer to a valid C
     string.  If non-_NULL_, this string must outlive the capsule.
     (Though it is permitted to free it inside the _destructor_.)

     If the _destructor_ argument is not _NULL_, it will be called with
     the capsule as its argument when it is destroyed.

     If this capsule will be stored as an attribute of a module, the
     _name_ should be specified as ‘modulename.attributename’.  This
     will enable other modules to import the capsule using *note
     PyCapsule_Import(): 29d2.

 -- C Function: void* PyCapsule_GetPointer (PyObject *capsule, const
          char *name)

     Retrieve the _pointer_ stored in the capsule.  On failure, set an
     exception and return _NULL_.

     The _name_ parameter must compare exactly to the name stored in the
     capsule.  If the name stored in the capsule is _NULL_, the _name_
     passed in must also be _NULL_. Python uses the C function
     ‘strcmp()’ to compare capsule names.

 -- C Function: PyCapsule_Destructor PyCapsule_GetDestructor
          (PyObject *capsule)

     Return the current destructor stored in the capsule.  On failure,
     set an exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ destructor.  This makes
     a _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 2c8. or *note PyErr_Occurred(): 299c. to
     disambiguate.

 -- C Function: void* PyCapsule_GetContext (PyObject *capsule)

     Return the current context stored in the capsule.  On failure, set
     an exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ context.  This makes a
     _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 2c8. or *note PyErr_Occurred(): 299c. to
     disambiguate.

 -- C Function: const char* PyCapsule_GetName (PyObject *capsule)

     Return the current name stored in the capsule.  On failure, set an
     exception and return _NULL_.

     It is legal for a capsule to have a _NULL_ name.  This makes a
     _NULL_ return code somewhat ambiguous; use *note
     PyCapsule_IsValid(): 2c8. or *note PyErr_Occurred(): 299c. to
     disambiguate.

 -- C Function: void* PyCapsule_Import (const char *name, int no_block)

     Import a pointer to a C object from a capsule attribute in a
     module.  The _name_ parameter should specify the full name to the
     attribute, as in ‘module.attribute’.  The _name_ stored in the
     capsule must match this string exactly.  If _no_block_ is true,
     import the module without blocking (using *note
     PyImport_ImportModuleNoBlock(): 371.).  If _no_block_ is false,
     import the module conventionally (using *note
     PyImport_ImportModule(): 380.).

     Return the capsule’s internal _pointer_ on success.  On failure,
     set an exception and return _NULL_. However, if *note
     PyCapsule_Import(): 29d2. failed to import the module, and
     _no_block_ was true, no exception is set.

 -- C Function: int PyCapsule_IsValid (PyObject *capsule, const
          char *name)

     Determines whether or not _capsule_ is a valid capsule.  A valid
     capsule is non-_NULL_, passes *note PyCapsule_CheckExact(): 2d70,
     has a non-_NULL_ pointer stored in it, and its internal name
     matches the _name_ parameter.  (See *note PyCapsule_GetPointer():
     2d71. for information on how capsule names are compared.)

     In other words, if *note PyCapsule_IsValid(): 2c8. returns a true
     value, calls to any of the accessors (any function starting with
     ‘PyCapsule_Get()’) are guaranteed to succeed.

     Return a nonzero value if the object is valid and matches the name
     passed in.  Return 0 otherwise.  This function will not fail.

 -- C Function: int PyCapsule_SetContext (PyObject *capsule,
          void *context)

     Set the context pointer inside _capsule_ to _context_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetDestructor (PyObject *capsule,
          PyCapsule_Destructor destructor)

     Set the destructor inside _capsule_ to _destructor_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetName (PyObject *capsule, const
          char *name)

     Set the name inside _capsule_ to _name_.  If non-_NULL_, the name
     must outlive the capsule.  If the previous _name_ stored in the
     capsule was not _NULL_, no attempt is made to free it.

     Return 0 on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetPointer (PyObject *capsule,
          void *pointer)

     Set the void pointer inside _capsule_ to _pointer_.  The pointer
     may not be _NULL_.

     Return 0 on success.  Return nonzero and set an exception on
     failure.


File: python.info,  Node: CObjects,  Next: Cell Objects,  Prev: Capsules<2>,  Up: Other Objects

7.7.5.11 CObjects
.................

     Warning: The CObject API is deprecated as of Python 2.7.  Please
     switch to the new *note Capsules: 29d3. API.

 -- C Type: PyCObject

     This subtype of *note PyObject: 3a6. represents an opaque value,
     useful for C extension modules who need to pass an opaque value (as
     a ‘void*’ pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Function: int PyCObject_Check (PyObject *p)

     Return true if its argument is a *note PyCObject: 2c7.

 -- C Function: PyObject* PyCObject_FromVoidPtr (void* cobj, void
          (*destr)(void *))

     Return value: New reference.

     Create a *note PyCObject: 2c7. from the ‘void *’ _cobj_.  The
     _destr_ function will be called when the object is reclaimed,
     unless it is _NULL_.

 -- C Function: PyObject* PyCObject_FromVoidPtrAndDesc (void* cobj,
          void* desc, void (*destr)(void *, void *))

     Return value: New reference.

     Create a *note PyCObject: 2c7. from the ‘void *’ _cobj_.  The
     _destr_ function will be called when the object is reclaimed.  The
     _desc_ argument can be used to pass extra callback data for the
     destructor function.

 -- C Function: void* PyCObject_AsVoidPtr (PyObject* self)

     Return the object ‘void *’ that the *note PyCObject: 2c7. _self_
     was created with.

 -- C Function: void* PyCObject_GetDesc (PyObject* self)

     Return the description ‘void *’ that the *note PyCObject: 2c7.
     _self_ was created with.

 -- C Function: int PyCObject_SetVoidPtr (PyObject* self, void* cobj)

     Set the void pointer inside _self_ to _cobj_.  The *note PyCObject:
     2c7. must not have an associated destructor.  Return true on
     success, false on failure.


File: python.info,  Node: Cell Objects,  Next: Generator Objects,  Prev: CObjects,  Up: Other Objects

7.7.5.12 Cell Objects
.....................

"Cell" objects are used to implement variables referenced by multiple
scopes.  For each such variable, a cell object is created to store the
value; the local variables of each stack frame that references the value
contains a reference to the cells from outer scopes which also use that
variable.  When the value is accessed, the value contained in the cell
is used instead of the cell object itself.  This de-referencing of the
cell object requires support from the generated byte-code; these are not
automatically de-referenced when accessed.  Cell objects are not likely
to be useful elsewhere.

 -- C Type: PyCellObject

     The C structure used for cell objects.

 -- C Variable: PyTypeObject PyCell_Type

     The type object corresponding to cell objects.

 -- C Function: int PyCell_Check (ob)

     Return true if _ob_ is a cell object; _ob_ must not be _NULL_.

 -- C Function: PyObject* PyCell_New (PyObject *ob)

     Return value: New reference.

     Create and return a new cell object containing the value _ob_.  The
     parameter may be _NULL_.

 -- C Function: PyObject* PyCell_Get (PyObject *cell)

     Return value: New reference.

     Return the contents of the cell _cell_.

 -- C Function: PyObject* PyCell_GET (PyObject *cell)

     Return value: Borrowed reference.

     Return the contents of the cell _cell_, but without checking that
     _cell_ is non-_NULL_ and a cell object.

 -- C Function: int PyCell_Set (PyObject *cell, PyObject *value)

     Set the contents of the cell object _cell_ to _value_.  This
     releases the reference to any current content of the cell.  _value_
     may be _NULL_. _cell_ must be non-_NULL_; if it is not a cell
     object, ‘-1’ will be returned.  On success, ‘0’ will be returned.

 -- C Function: void PyCell_SET (PyObject *cell, PyObject *value)

     Sets the value of the cell object _cell_ to _value_.  No reference
     counts are adjusted, and no checks are made for safety; _cell_ must
     be non-_NULL_ and must be a cell object.


File: python.info,  Node: Generator Objects,  Next: DateTime Objects<2>,  Prev: Cell Objects,  Up: Other Objects

7.7.5.13 Generator Objects
..........................

Generator objects are what Python uses to implement generator iterators.
They are normally created by iterating over a function that yields
values, rather than explicitly calling *note PyGen_New(): 2d8f.

 -- C Type: PyGenObject

     The C structure used for generator objects.

 -- C Variable: PyTypeObject PyGen_Type

     The type object corresponding to generator objects

 -- C Function: int PyGen_Check (ob)

     Return true if _ob_ is a generator object; _ob_ must not be _NULL_.

 -- C Function: int PyGen_CheckExact (ob)

     Return true if _ob_’s type is _PyGen_Type_ is a generator object;
     _ob_ must not be _NULL_.

 -- C Function: PyObject* PyGen_New (PyFrameObject *frame)

     Return value: New reference.

     Create and return a new generator object based on the _frame_
     object.  A reference to _frame_ is stolen by this function.  The
     parameter must not be _NULL_.


File: python.info,  Node: DateTime Objects<2>,  Next: Set Objects<2>,  Prev: Generator Objects,  Up: Other Objects

7.7.5.14 DateTime Objects
.........................

Various date and time objects are supplied by the *note datetime: 7d.
module.  Before using any of these functions, the header file
‘datetime.h’ must be included in your source (note that this is not
included by ‘Python.h’), and the macro ‘PyDateTime_IMPORT’ must be
invoked, usually as part of the module initialisation function.  The
macro puts a pointer to a C structure into a static variable,
‘PyDateTimeAPI’, that is used by the following macros.

  Type-check macros:

 -- C Function: int PyDate_Check (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_DateType’ or a subtype
     of ‘PyDateTime_DateType’.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDate_CheckExact (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_DateType’.  _ob_ must
     not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDateTime_Check (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_DateTimeType’ or a
     subtype of ‘PyDateTime_DateTimeType’.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDateTime_CheckExact (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_DateTimeType’.  _ob_
     must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTime_Check (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_TimeType’ or a subtype
     of ‘PyDateTime_TimeType’.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTime_CheckExact (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_TimeType’.  _ob_ must
     not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDelta_Check (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_DeltaType’ or a subtype
     of ‘PyDateTime_DeltaType’.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyDelta_CheckExact (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_DeltaType’.  _ob_ must
     not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTZInfo_Check (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_TZInfoType’ or a subtype
     of ‘PyDateTime_TZInfoType’.  _ob_ must not be _NULL_.

     New in version 2.4.

 -- C Function: int PyTZInfo_CheckExact (PyObject *ob)

     Return true if _ob_ is of type ‘PyDateTime_TZInfoType’.  _ob_ must
     not be _NULL_.

     New in version 2.4.

  Macros to create objects:

 -- C Function: PyObject* PyDate_FromDate (int year, int month, int day)

     Return value: New reference.

     Return a ‘datetime.date’ object with the specified year, month and
     day.

     New in version 2.4.

 -- C Function: PyObject* PyDateTime_FromDateAndTime (int year,
          int month, int day, int hour, int minute, int second,
          int usecond)

     Return value: New reference.

     Return a ‘datetime.datetime’ object with the specified year, month,
     day, hour, minute, second and microsecond.

     New in version 2.4.

 -- C Function: PyObject* PyTime_FromTime (int hour, int minute,
          int second, int usecond)

     Return value: New reference.

     Return a ‘datetime.time’ object with the specified hour, minute,
     second and microsecond.

     New in version 2.4.

 -- C Function: PyObject* PyDelta_FromDSU (int days, int seconds,
          int useconds)

     Return value: New reference.

     Return a ‘datetime.timedelta’ object representing the given number
     of days, seconds and microseconds.  Normalization is performed so
     that the resulting number of microseconds and seconds lie in the
     ranges documented for ‘datetime.timedelta’ objects.

     New in version 2.4.

  Macros to extract fields from date objects.  The argument must be an
instance of ‘PyDateTime_Date’, including subclasses (such as
‘PyDateTime_DateTime’).  The argument must not be _NULL_, and the type
is not checked:

 -- C Function: int PyDateTime_GET_YEAR (PyDateTime_Date *o)

     Return the year, as a positive int.

     New in version 2.4.

 -- C Function: int PyDateTime_GET_MONTH (PyDateTime_Date *o)

     Return the month, as an int from 1 through 12.

     New in version 2.4.

 -- C Function: int PyDateTime_GET_DAY (PyDateTime_Date *o)

     Return the day, as an int from 1 through 31.

     New in version 2.4.

  Macros to extract fields from datetime objects.  The argument must be
an instance of ‘PyDateTime_DateTime’, including subclasses.  The
argument must not be _NULL_, and the type is not checked:

 -- C Function: int PyDateTime_DATE_GET_HOUR (PyDateTime_DateTime *o)

     Return the hour, as an int from 0 through 23.

     New in version 2.4.

 -- C Function: int PyDateTime_DATE_GET_MINUTE (PyDateTime_DateTime *o)

     Return the minute, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_DATE_GET_SECOND (PyDateTime_DateTime *o)

     Return the second, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_DATE_GET_MICROSECOND
          (PyDateTime_DateTime *o)

     Return the microsecond, as an int from 0 through 999999.

     New in version 2.4.

  Macros to extract fields from time objects.  The argument must be an
instance of ‘PyDateTime_Time’, including subclasses.  The argument must
not be _NULL_, and the type is not checked:

 -- C Function: int PyDateTime_TIME_GET_HOUR (PyDateTime_Time *o)

     Return the hour, as an int from 0 through 23.

     New in version 2.4.

 -- C Function: int PyDateTime_TIME_GET_MINUTE (PyDateTime_Time *o)

     Return the minute, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_TIME_GET_SECOND (PyDateTime_Time *o)

     Return the second, as an int from 0 through 59.

     New in version 2.4.

 -- C Function: int PyDateTime_TIME_GET_MICROSECOND (PyDateTime_Time *o)

     Return the microsecond, as an int from 0 through 999999.

     New in version 2.4.

  Macros for the convenience of modules implementing the DB API:

 -- C Function: PyObject* PyDateTime_FromTimestamp (PyObject *args)

     Return value: New reference.

     Create and return a new ‘datetime.datetime’ object given an
     argument tuple suitable for passing to
     ‘datetime.datetime.fromtimestamp()’.

     New in version 2.4.

 -- C Function: PyObject* PyDate_FromTimestamp (PyObject *args)

     Return value: New reference.

     Create and return a new ‘datetime.date’ object given an argument
     tuple suitable for passing to ‘datetime.date.fromtimestamp()’.

     New in version 2.4.


File: python.info,  Node: Set Objects<2>,  Next: Code Objects<2>,  Prev: DateTime Objects<2>,  Up: Other Objects

7.7.5.15 Set Objects
....................

New in version 2.5.

  This section details the public API for *note set: 36a. and *note
frozenset: 36b. objects.  Any functionality not listed below is best
accessed using the either the abstract object protocol (including *note
PyObject_CallMethod(): 2b36, *note PyObject_RichCompareBool(): 2b2c,
*note PyObject_Hash(): 2b38, *note PyObject_Repr(): 2b2d, *note
PyObject_IsTrue(): 2b39, *note PyObject_Print(): 2b21, and *note
PyObject_GetIter(): 2b41.) or the abstract number protocol (including
*note PyNumber_And(): 2b55, *note PyNumber_Subtract(): 2b47, *note
PyNumber_Or(): 2b57, *note PyNumber_Xor(): 2b56, *note
PyNumber_InPlaceAnd(): 2b62, *note PyNumber_InPlaceSubtract(): 2b59,
*note PyNumber_InPlaceOr(): 2b64, and *note PyNumber_InPlaceXor():
2b63.).

 -- C Type: PySetObject

     This subtype of *note PyObject: 3a6. is used to hold the internal
     data for both *note set: 36a. and *note frozenset: 36b. objects.
     It is like a *note PyDictObject: 2ceb. in that it is a fixed size
     for small sets (much like tuple storage) and will point to a
     separate, variable sized block of memory for medium and large sized
     sets (much like list storage).  None of the fields of this
     structure should be considered public and are subject to change.
     All access should be done through the documented API rather than by
     manipulating the values in the structure.

 -- C Variable: PyTypeObject PySet_Type

     This is an instance of *note PyTypeObject: 29d9. representing the
     Python *note set: 36a. type.

 -- C Variable: PyTypeObject PyFrozenSet_Type

     This is an instance of *note PyTypeObject: 29d9. representing the
     Python *note frozenset: 36b. type.

  The following type check macros work on pointers to any Python object.
Likewise, the constructor functions work with any iterable Python
object.

 -- C Function: int PySet_Check (PyObject *p)

     Return true if _p_ is a *note set: 36a. object or an instance of a
     subtype.

     New in version 2.6.

 -- C Function: int PyFrozenSet_Check (PyObject *p)

     Return true if _p_ is a *note frozenset: 36b. object or an instance
     of a subtype.

     New in version 2.6.

 -- C Function: int PyAnySet_Check (PyObject *p)

     Return true if _p_ is a *note set: 36a. object, a *note frozenset:
     36b. object, or an instance of a subtype.

 -- C Function: int PyAnySet_CheckExact (PyObject *p)

     Return true if _p_ is a *note set: 36a. object or a *note
     frozenset: 36b. object but not an instance of a subtype.

 -- C Function: int PyFrozenSet_CheckExact (PyObject *p)

     Return true if _p_ is a *note frozenset: 36b. object but not an
     instance of a subtype.

 -- C Function: PyObject* PySet_New (PyObject *iterable)

     Return value: New reference.

     Return a new *note set: 36a. containing objects returned by the
     _iterable_.  The _iterable_ may be _NULL_ to create a new empty
     set.  Return the new set on success or _NULL_ on failure.  Raise
     *note TypeError: 218. if _iterable_ is not actually iterable.  The
     constructor is also useful for copying a set (‘c=set(s)’).

 -- C Function: PyObject* PyFrozenSet_New (PyObject *iterable)

     Return value: New reference.

     Return a new *note frozenset: 36b. containing objects returned by
     the _iterable_.  The _iterable_ may be _NULL_ to create a new empty
     frozenset.  Return the new set on success or _NULL_ on failure.
     Raise *note TypeError: 218. if _iterable_ is not actually iterable.

     Changed in version 2.6: Now guaranteed to return a brand-new *note
     frozenset: 36b.  Formerly, frozensets of zero-length were a
     singleton.  This got in the way of building-up new frozensets with
     ‘PySet_Add()’.

  The following functions and macros are available for instances of
*note set: 36a. or *note frozenset: 36b. or instances of their subtypes.

 -- C Function: Py_ssize_t PySet_Size (PyObject *anyset)

     Return the length of a *note set: 36a. or *note frozenset: 36b.
     object.  Equivalent to ‘len(anyset)’.  Raises a ‘PyExc_SystemError’
     if _anyset_ is not a *note set: 36a, *note frozenset: 36b, or an
     instance of a subtype.

     Changed in version 2.5: This function returned an ‘int’.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Function: Py_ssize_t PySet_GET_SIZE (PyObject *anyset)

     Macro form of *note PySet_Size(): 3e5. without error checking.

 -- C Function: int PySet_Contains (PyObject *anyset, PyObject *key)

     Return 1 if found, 0 if not found, and -1 if an error is
     encountered.  Unlike the Python *note __contains__(): 322. method,
     this function does not automatically convert unhashable sets into
     temporary frozensets.  Raise a *note TypeError: 218. if the _key_
     is unhashable.  Raise ‘PyExc_SystemError’ if _anyset_ is not a
     *note set: 36a, *note frozenset: 36b, or an instance of a subtype.

 -- C Function: int PySet_Add (PyObject *set, PyObject *key)

     Add _key_ to a *note set: 36a. instance.  Does not apply to *note
     frozenset: 36b. instances.  Return 0 on success or -1 on failure.
     Raise a *note TypeError: 218. if the _key_ is unhashable.  Raise a
     *note MemoryError: 94d. if there is no room to grow.  Raise a *note
     SystemError: 950. if _set_ is an not an instance of *note set: 36a.
     or its subtype.

     Changed in version 2.6: Now works with instances of *note
     frozenset: 36b. or its subtypes.  Like *note PyTuple_SetItem():
     29c5. in that it can be used to fill-in the values of brand new
     frozensets before they are exposed to other code.

  The following functions are available for instances of *note set: 36a.
or its subtypes but not for instances of *note frozenset: 36b. or its
subtypes.

 -- C Function: int PySet_Discard (PyObject *set, PyObject *key)

     Return 1 if found and removed, 0 if not found (no action taken),
     and -1 if an error is encountered.  Does not raise *note KeyError:
     205. for missing keys.  Raise a *note TypeError: 218. if the _key_
     is unhashable.  Unlike the Python *note discard(): 8f2. method,
     this function does not automatically convert unhashable sets into
     temporary frozensets.  Raise ‘PyExc_SystemError’ if _set_ is an not
     an instance of *note set: 36a. or its subtype.

 -- C Function: PyObject* PySet_Pop (PyObject *set)

     Return value: New reference.

     Return a new reference to an arbitrary object in the _set_, and
     removes the object from the _set_.  Return _NULL_ on failure.
     Raise *note KeyError: 205. if the set is empty.  Raise a *note
     SystemError: 950. if _set_ is an not an instance of *note set: 36a.
     or its subtype.

 -- C Function: int PySet_Clear (PyObject *set)

     Empty an existing set of all elements.


File: python.info,  Node: Code Objects<2>,  Prev: Set Objects<2>,  Up: Other Objects

7.7.5.16 Code Objects
.....................

Code objects are a low-level detail of the CPython implementation.  Each
one represents a chunk of executable code that hasn’t yet been bound
into a function.

 -- C Type: PyCodeObject

     The C structure of the objects used to describe code objects.  The
     fields of this type are subject to change at any time.

 -- C Variable: PyTypeObject PyCode_Type

     This is an instance of *note PyTypeObject: 29d9. representing the
     Python *note code: 62. type.

 -- C Function: int PyCode_Check (PyObject *co)

     Return true if _co_ is a *note code: 62. object

 -- C Function: int PyCode_GetNumFree (PyObject *co)

     Return the number of free variables in _co_.

 -- C Function: PyCodeObject *PyCode_New (int argcount, int nlocals,
          int stacksize, int flags, PyObject *code, PyObject *consts,
          PyObject *names, PyObject *varnames, PyObject *freevars,
          PyObject *cellvars, PyObject *filename, PyObject *name,
          int firstlineno, PyObject *lnotab)

     Return a new code object.  If you need a dummy code object to
     create a frame, use *note PyCode_NewEmpty(): 2b7. instead.  Calling
     *note PyCode_New(): 2b8. directly can bind you to a precise Python
     version since the definition of the bytecode changes often.

 -- C Function: int PyCode_NewEmpty (const char *filename, const
          char *funcname, int firstlineno)

     Return a new empty code object with the specified filename,
     function name, and first line number.  It is illegal to *note exec:
     404. or *note eval(): 360. the resulting code object.


File: python.info,  Node: Initialization Finalization and Threads,  Next: Memory Management,  Prev: Concrete Objects Layer,  Up: Python/C API Reference Manual

7.8 Initialization, Finalization, and Threads
=============================================

* Menu:

* Initializing and finalizing the interpreter:: 
* Process-wide parameters:: 
* Thread State and the Global Interpreter Lock:: 
* Sub-interpreter support:: 
* Asynchronous Notifications:: 
* Profiling and Tracing:: 
* Advanced Debugger Support:: 


File: python.info,  Node: Initializing and finalizing the interpreter,  Next: Process-wide parameters,  Up: Initialization Finalization and Threads

7.8.1 Initializing and finalizing the interpreter
-------------------------------------------------

 -- C Function: void Py_Initialize ()

     Initialize the Python interpreter.  In an application embedding
     Python, this should be called before using any other Python/C API
     functions; with the exception of *note Py_SetProgramName(): 2a25,
     *note Py_SetPythonHome(): 2dcb, *note PyEval_InitThreads(): 2dcc,
     *note PyEval_ReleaseLock(): 2dcd, and *note PyEval_AcquireLock():
     2dce.  This initializes the table of loaded modules
     (‘sys.modules’), and creates the fundamental modules *note
     __builtin__: 0, *note __main__: 2. and *note sys: 16d.  It also
     initializes the module search path (‘sys.path’).  It does not set
     ‘sys.argv’; use *note PySys_SetArgvEx(): 2c0. for that.  This is a
     no-op when called for a second time (without calling *note
     Py_Finalize(): 2c3. first).  There is no return value; it is a
     fatal error if the initialization fails.

 -- C Function: void Py_InitializeEx (int initsigs)

     This function works like *note Py_Initialize(): 29a9. if _initsigs_
     is 1.  If _initsigs_ is 0, it skips initialization registration of
     signal handlers, which might be useful when Python is embedded.

     New in version 2.4.

 -- C Function: int Py_IsInitialized ()

     Return true (nonzero) when the Python interpreter has been
     initialized, false (zero) if not.  After *note Py_Finalize(): 2c3.
     is called, this returns false until *note Py_Initialize(): 29a9. is
     called again.

 -- C Function: void Py_Finalize ()

     Undo all initializations made by *note Py_Initialize(): 29a9. and
     subsequent use of Python/C API functions, and destroy all
     sub-interpreters (see *note Py_NewInterpreter(): 2dd0. below) that
     were created and not yet destroyed since the last call to *note
     Py_Initialize(): 29a9.  Ideally, this frees all memory allocated by
     the Python interpreter.  This is a no-op when called for a second
     time (without calling *note Py_Initialize(): 29a9. again first).
     There is no return value; errors during finalization are ignored.

     This function is provided for a number of reasons.  An embedding
     application might want to restart Python without having to restart
     the application itself.  An application that has loaded the Python
     interpreter from a dynamically loadable library (or DLL) might want
     to free all memory allocated by Python before unloading the DLL.
     During a hunt for memory leaks in an application a developer might
     want to free all memory allocated by Python before exiting from the
     application.

     *Bugs and caveats:* The destruction of modules and objects in
     modules is done in random order; this may cause destructors (*note
     __del__(): 709. methods) to fail when they depend on other objects
     (even functions) or modules.  Dynamically loaded extension modules
     loaded by Python are not unloaded.  Small amounts of memory
     allocated by the Python interpreter may not be freed (if you find a
     leak, please report it).  Memory tied up in circular references
     between objects is not freed.  Some memory allocated by extension
     modules may not be freed.  Some extensions may not work properly if
     their initialization routine is called more than once; this can
     happen if an application calls *note Py_Initialize(): 29a9. and
     *note Py_Finalize(): 2c3. more than once.


File: python.info,  Node: Process-wide parameters,  Next: Thread State and the Global Interpreter Lock,  Prev: Initializing and finalizing the interpreter,  Up: Initialization Finalization and Threads

7.8.2 Process-wide parameters
-----------------------------

 -- C Function: void Py_SetProgramName (char *name)

     This function should be called before *note Py_Initialize(): 29a9.
     is called for the first time, if it is called at all.  It tells the
     interpreter the value of the ‘argv[0]’ argument to the ‘main()’
     function of the program.  This is used by *note Py_GetPath(): 2a4b.
     and some other functions below to find the Python run-time
     libraries relative to the interpreter executable.  The default
     value is ‘'python'’.  The argument should point to a
     zero-terminated character string in static storage whose contents
     will not change for the duration of the program’s execution.  No
     code in the Python interpreter will change the contents of this
     storage.

 -- C Function: char* Py_GetProgramName ()

     Return the program name set with *note Py_SetProgramName(): 2a25,
     or the default.  The returned string points into static storage;
     the caller should not modify its value.

 -- C Function: char* Py_GetPrefix ()

     Return the _prefix_ for installed platform-independent files.  This
     is derived through a number of complicated rules from the program
     name set with *note Py_SetProgramName(): 2a25. and some environment
     variables; for example, if the program name is
     ‘'/usr/local/bin/python'’, the prefix is ‘'/usr/local'’.  The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the *prefix* variable in the
     top-level ‘Makefile’ and the ‘--prefix’ argument to the *configure*
     script at build time.  The value is available to Python code as
     ‘sys.prefix’.  It is only useful on Unix.  See also the next
     function.

 -- C Function: char* Py_GetExecPrefix ()

     Return the _exec-prefix_ for installed platform-_dependent_ files.
     This is derived through a number of complicated rules from the
     program name set with *note Py_SetProgramName(): 2a25. and some
     environment variables; for example, if the program name is
     ‘'/usr/local/bin/python'’, the exec-prefix is ‘'/usr/local'’.  The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the *exec_prefix* variable
     in the top-level ‘Makefile’ and the ‘--exec-prefix’ argument to the
     *configure* script at build time.  The value is available to Python
     code as ‘sys.exec_prefix’.  It is only useful on Unix.

     Background: The exec-prefix differs from the prefix when platform
     dependent files (such as executables and shared libraries) are
     installed in a different directory tree.  In a typical
     installation, platform dependent files may be installed in the
     ‘/usr/local/plat’ subtree while platform independent may be
     installed in ‘/usr/local’.

     Generally speaking, a platform is a combination of hardware and
     software families, e.g.  Sparc machines running the Solaris 2.x
     operating system are considered the same platform, but Intel
     machines running Solaris 2.x are another platform, and Intel
     machines running Linux are yet another platform.  Different major
     revisions of the same operating system generally also form
     different platforms.  Non-Unix operating systems are a different
     story; the installation strategies on those systems are so
     different that the prefix and exec-prefix are meaningless, and set
     to the empty string.  Note that compiled Python bytecode files are
     platform independent (but not independent from the Python version
     by which they were compiled!).

     System administrators will know how to configure the *mount* or
     *automount* programs to share ‘/usr/local’ between platforms while
     having ‘/usr/local/plat’ be a different filesystem for each
     platform.

 -- C Function: char* Py_GetProgramFullPath ()

     Return the full program name of the Python executable; this is
     computed as a side-effect of deriving the default module search
     path from the program name (set by *note Py_SetProgramName(): 2a25.
     above).  The returned string points into static storage; the caller
     should not modify its value.  The value is available to Python code
     as ‘sys.executable’.

 -- C Function: char* Py_GetPath ()

     Return the default module search path; this is computed from the
     program name (set by *note Py_SetProgramName(): 2a25. above) and
     some environment variables.  The returned string consists of a
     series of directory names separated by a platform dependent
     delimiter character.  The delimiter character is ‘':'’ on Unix and
     Mac OS X, ‘';'’ on Windows.  The returned string points into static
     storage; the caller should not modify its value.  The list *note
     sys.path: 57f. is initialized with this value on interpreter
     startup; it can be (and usually is) modified later to change the
     search path for loading modules.

 -- C Function: const char* Py_GetVersion ()

     Return the version of this Python interpreter.  This is a string
     that looks something like

          "1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"

     The first word (up to the first space character) is the current
     Python version; the first three characters are the major and minor
     version separated by a period.  The returned string points into
     static storage; the caller should not modify its value.  The value
     is available to Python code as ‘sys.version’.

 -- C Function: const char* Py_GetPlatform ()

     Return the platform identifier for the current platform.  On Unix,
     this is formed from the "official" name of the operating system,
     converted to lower case, followed by the major revision number;
     e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value
     is ‘'sunos5'’.  On Mac OS X, it is ‘'darwin'’.  On Windows, it is
     ‘'win'’.  The returned string points into static storage; the
     caller should not modify its value.  The value is available to
     Python code as ‘sys.platform’.

 -- C Function: const char* Py_GetCopyright ()

     Return the official copyright string for the current Python
     version, for example

     ‘'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'’

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     ‘sys.copyright’.

 -- C Function: const char* Py_GetCompiler ()

     Return an indication of the compiler used to build the current
     Python version, in square brackets, for example:

          "[GCC 2.7.2.2]"

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable ‘sys.version’.

 -- C Function: const char* Py_GetBuildInfo ()

     Return information about the sequence number and build date and
     time of the current Python interpreter instance, for example

          "#67, Aug  1 1997, 22:34:28"

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable ‘sys.version’.

 -- C Function: void PySys_SetArgvEx (int argc, char **argv,
          int updatepath)

     Set *note sys.argv: 634. based on _argc_ and _argv_.  These
     parameters are similar to those passed to the program’s ‘main()’
     function with the difference that the first entry should refer to
     the script file to be executed rather than the executable hosting
     the Python interpreter.  If there isn’t a script that will be run,
     the first entry in _argv_ can be an empty string.  If this function
     fails to initialize *note sys.argv: 634, a fatal condition is
     signalled using *note Py_FatalError(): 2acc.

     If _updatepath_ is zero, this is all the function does.  If
     _updatepath_ is non-zero, the function also modifies *note
     sys.path: 57f. according to the following algorithm:

        - If the name of an existing script is passed in ‘argv[0]’, the
          absolute path of the directory where the script is located is
          prepended to *note sys.path: 57f.

        - Otherwise (that is, if _argc_ is 0 or ‘argv[0]’ doesn’t point
          to an existing file name), an empty string is prepended to
          *note sys.path: 57f, which is the same as prepending the
          current working directory (‘"."’).

          Note: It is recommended that applications embedding the Python
          interpreter for purposes other than executing a single script
          pass 0 as _updatepath_, and update *note sys.path: 57f.
          themselves if desired.  See CVE-2008-5983(1).

          On versions before 2.6.6, you can achieve the same effect by
          manually popping the first *note sys.path: 57f. element after
          having called *note PySys_SetArgv(): 2c1, for example using:

               PyRun_SimpleString("import sys; sys.path.pop(0)\n");

     New in version 2.6.6.

 -- C Function: void PySys_SetArgv (int argc, char **argv)

     This function works like *note PySys_SetArgvEx(): 2c0. with
     _updatepath_ set to 1.

 -- C Function: void Py_SetPythonHome (char *home)

     Set the default "home" directory, that is, the location of the
     standard Python libraries.  See *note PYTHONHOME: 63d. for the
     meaning of the argument string.

     The argument should point to a zero-terminated character string in
     static storage whose contents will not change for the duration of
     the program’s execution.  No code in the Python interpreter will
     change the contents of this storage.

 -- C Function: char* Py_GetPythonHome ()

     Return the default "home", that is, the value set by a previous
     call to *note Py_SetPythonHome(): 2dcb, or the value of the *note
     PYTHONHOME: 63d. environment variable if it is set.

   ---------- Footnotes ----------

   (1) http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983


File: python.info,  Node: Thread State and the Global Interpreter Lock,  Next: Sub-interpreter support,  Prev: Process-wide parameters,  Up: Initialization Finalization and Threads

7.8.3 Thread State and the Global Interpreter Lock
--------------------------------------------------

The Python interpreter is not fully thread-safe.  In order to support
multi-threaded Python programs, there’s a global lock, called the *note
global interpreter lock: 154e. or *note GIL: 2d30, that must be held by
the current thread before it can safely access Python objects.  Without
the lock, even the simplest operations could cause problems in a
multi-threaded program: for example, when two threads simultaneously
increment the reference count of the same object, the reference count
could end up being incremented only once instead of twice.

  Therefore, the rule exists that only the thread that has acquired the
*note GIL: 2d30. may operate on Python objects or call Python/C API
functions.  In order to emulate concurrency of execution, the
interpreter regularly tries to switch threads (see *note
sys.setcheckinterval(): 23bd.).  The lock is also released around
potentially blocking I/O operations like reading or writing a file, so
that other Python threads can run in the meantime.

  The Python interpreter keeps some thread-specific bookkeeping
information inside a data structure called *note PyThreadState: 2dda.
There’s also one global variable pointing to the current *note
PyThreadState: 2dda.: it can be retrieved using *note
PyThreadState_Get(): 2ddb.

* Menu:

* Releasing the GIL from extension code:: 
* Non-Python created threads:: 
* High-level API:: 
* Low-level API:: 


File: python.info,  Node: Releasing the GIL from extension code,  Next: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

7.8.3.1 Releasing the GIL from extension code
.............................................

Most extension code manipulating the *note GIL: 2d30. has the following
simple structure:

     Save the thread state in a local variable.
     Release the global interpreter lock.
     ... Do some blocking I/O operation ...
     Reacquire the global interpreter lock.
     Restore the thread state from the local variable.

  This is so common that a pair of macros exists to simplify it:

     Py_BEGIN_ALLOW_THREADS
     ... Do some blocking I/O operation ...
     Py_END_ALLOW_THREADS

  The *note Py_BEGIN_ALLOW_THREADS: 29ca. macro opens a new block and
declares a hidden local variable; the *note Py_END_ALLOW_THREADS: 29cb.
macro closes the block.  These two macros are still available when
Python is compiled without thread support (they simply have an empty
expansion).

  When thread support is enabled, the block above expands to the
following code:

     PyThreadState *_save;

     _save = PyEval_SaveThread();
     ...Do some blocking I/O operation...
     PyEval_RestoreThread(_save);

  Here is how these functions work: the global interpreter lock is used
to protect the pointer to the current thread state.  When releasing the
lock and saving the thread state, the current thread state pointer must
be retrieved before the lock is released (since another thread could
immediately acquire the lock and store its own thread state in the
global variable).  Conversely, when acquiring the lock and restoring the
thread state, the lock must be acquired before storing the thread state
pointer.

     Note: Calling system I/O functions is the most common use case for
     releasing the GIL, but it can also be useful before calling
     long-running computations which don’t need access to Python
     objects, such as compression or cryptographic functions operating
     over memory buffers.  For example, the standard *note zlib: 1ad.
     and *note hashlib: e6. modules release the GIL when compressing or
     hashing data.


File: python.info,  Node: Non-Python created threads,  Next: High-level API,  Prev: Releasing the GIL from extension code,  Up: Thread State and the Global Interpreter Lock

7.8.3.2 Non-Python created threads
..................................

When threads are created using the dedicated Python APIs (such as the
*note threading: 179. module), a thread state is automatically
associated to them and the code showed above is therefore correct.
However, when threads are created from C (for example by a third-party
library with its own thread management), they don’t hold the GIL, nor is
there a thread state structure for them.

  If you need to call Python code from these threads (often this will be
part of a callback API provided by the aforementioned third-party
library), you must first register these threads with the interpreter by
creating a thread state data structure, then acquiring the GIL, and
finally storing their thread state pointer, before you can start using
the Python/C API. When you are done, you should reset the thread state
pointer, release the GIL, and finally free the thread state data
structure.

  The *note PyGILState_Ensure(): 2ddf. and *note PyGILState_Release():
2de0. functions do all of the above automatically.  The typical idiom
for calling into Python from a C thread is:

     PyGILState_STATE gstate;
     gstate = PyGILState_Ensure();

     /* Perform Python actions here. */
     result = CallSomeFunction();
     /* evaluate result or handle exception */

     /* Release the thread. No Python API allowed beyond this point. */
     PyGILState_Release(gstate);

  Note that the ‘PyGILState_*()’ functions assume there is only one
global interpreter (created automatically by *note Py_Initialize():
29a9.).  Python supports the creation of additional interpreters (using
*note Py_NewInterpreter(): 2dd0.), but mixing multiple interpreters and
the ‘PyGILState_*()’ API is unsupported.

  Another important thing to note about threads is their behaviour in
the face of the C ‘fork()’ call.  On most systems with ‘fork()’, after a
process forks only the thread that issued the fork will exist.  That
also means any locks held by other threads will never be released.
Python solves this for *note os.fork(): 244. by acquiring the locks it
uses internally before the fork, and releasing them afterwards.  In
addition, it resets any *note Lock Objects: 15cb. in the child.  When
extending or embedding Python, there is no way to inform Python of
additional (non-Python) locks that need to be acquired before or reset
after a fork.  OS facilities such as ‘pthread_atfork()’ would need to be
used to accomplish the same thing.  Additionally, when extending or
embedding Python, calling ‘fork()’ directly rather than through *note
os.fork(): 244. (and returning to or calling into Python) may result in
a deadlock by one of Python’s internal locks being held by a thread that
is defunct after the fork.  *note PyOS_AfterFork(): 2abd. tries to reset
the necessary locks, but is not always able to.


File: python.info,  Node: High-level API,  Next: Low-level API,  Prev: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

7.8.3.3 High-level API
......................

These are the most commonly used types and functions when writing C
extension code, or when embedding the Python interpreter:

 -- C Type: PyInterpreterState

     This data structure represents the state shared by a number of
     cooperating threads.  Threads belonging to the same interpreter
     share their module administration and a few other internal items.
     There are no public members in this structure.

     Threads belonging to different interpreters initially share
     nothing, except process state like available memory, open file
     descriptors and such.  The global interpreter lock is also shared
     by all threads, regardless of to which interpreter they belong.

 -- C Type: PyThreadState

     This data structure represents the state of a single thread.  The
     only public data member is *note PyInterpreterState *:
     2de2.‘interp’, which points to this thread’s interpreter state.

 -- C Function: void PyEval_InitThreads ()

     Initialize and acquire the global interpreter lock.  It should be
     called in the main thread before creating a second thread or
     engaging in any other thread operations such as *note
     PyEval_ReleaseLock(): 2dcd. or ‘PyEval_ReleaseThread(tstate)’.  It
     is not needed before calling *note PyEval_SaveThread(): 2de3. or
     *note PyEval_RestoreThread(): 2de4.

     This is a no-op when called for a second time.  It is safe to call
     this function before calling *note Py_Initialize(): 29a9.

          Note: When only the main thread exists, no GIL operations are
          needed.  This is a common situation (most Python programs do
          not use threads), and the lock operations slow the interpreter
          down a bit.  Therefore, the lock is not created initially.
          This situation is equivalent to having acquired the lock: when
          there is only a single thread, all object accesses are safe.
          Therefore, when this function initializes the global
          interpreter lock, it also acquires it.  Before the Python
          ‘_thread’ module creates a new thread, knowing that either it
          has the lock or the lock hasn’t been created yet, it calls
          *note PyEval_InitThreads(): 2dcc.  When this call returns, it
          is guaranteed that the lock has been created and that the
          calling thread has acquired it.

          It is *not* safe to call this function when it is unknown
          which thread (if any) currently has the global interpreter
          lock.

          This function is not available when thread support is disabled
          at compile time.

 -- C Function: int PyEval_ThreadsInitialized ()

     Returns a non-zero value if *note PyEval_InitThreads(): 2dcc. has
     been called.  This function can be called without holding the GIL,
     and therefore can be used to avoid calls to the locking API when
     running single-threaded.  This function is not available when
     thread support is disabled at compile time.

     New in version 2.4.

 -- C Function: PyThreadState* PyEval_SaveThread ()

     Release the global interpreter lock (if it has been created and
     thread support is enabled) and reset the thread state to _NULL_,
     returning the previous thread state (which is not _NULL_). If the
     lock has been created, the current thread must have acquired it.
     (This function is available even when thread support is disabled at
     compile time.)

 -- C Function: void PyEval_RestoreThread (PyThreadState *tstate)

     Acquire the global interpreter lock (if it has been created and
     thread support is enabled) and set the thread state to _tstate_,
     which must not be _NULL_. If the lock has been created, the current
     thread must not have acquired it, otherwise deadlock ensues.  (This
     function is available even when thread support is disabled at
     compile time.)

 -- C Function: PyThreadState* PyThreadState_Get ()

     Return the current thread state.  The global interpreter lock must
     be held.  When the current thread state is _NULL_, this issues a
     fatal error (so that the caller needn’t check for _NULL_).

 -- C Function: PyThreadState* PyThreadState_Swap
          (PyThreadState *tstate)

     Swap the current thread state with the thread state given by the
     argument _tstate_, which may be _NULL_. The global interpreter lock
     must be held and is not released.

 -- C Function: void PyEval_ReInitThreads ()

     This function is called from *note PyOS_AfterFork(): 2abd. to
     ensure that newly created child processes don’t hold locks
     referring to threads which are not running in the child process.

  The following functions use thread-local storage, and are not
compatible with sub-interpreters:

 -- C Function: PyGILState_STATE PyGILState_Ensure ()

     Ensure that the current thread is ready to call the Python C API
     regardless of the current state of Python, or of the global
     interpreter lock.  This may be called as many times as desired by a
     thread as long as each call is matched with a call to *note
     PyGILState_Release(): 2de0.  In general, other thread-related APIs
     may be used between *note PyGILState_Ensure(): 2ddf. and *note
     PyGILState_Release(): 2de0. calls as long as the thread state is
     restored to its previous state before the Release().  For example,
     normal usage of the *note Py_BEGIN_ALLOW_THREADS: 29ca. and *note
     Py_END_ALLOW_THREADS: 29cb. macros is acceptable.

     The return value is an opaque "handle" to the thread state when
     *note PyGILState_Ensure(): 2ddf. was called, and must be passed to
     *note PyGILState_Release(): 2de0. to ensure Python is left in the
     same state.  Even though recursive calls are allowed, these handles
     _cannot_ be shared - each unique call to *note PyGILState_Ensure():
     2ddf. must save the handle for its call to *note
     PyGILState_Release(): 2de0.

     When the function returns, the current thread will hold the GIL and
     be able to call arbitrary Python code.  Failure is a fatal error.

     New in version 2.3.

 -- C Function: void PyGILState_Release (PyGILState_STATE)

     Release any resources previously acquired.  After this call,
     Python’s state will be the same as it was prior to the
     corresponding *note PyGILState_Ensure(): 2ddf. call (but generally
     this state will be unknown to the caller, hence the use of the
     GILState API).

     Every call to *note PyGILState_Ensure(): 2ddf. must be matched by a
     call to *note PyGILState_Release(): 2de0. on the same thread.

     New in version 2.3.

 -- C Function: PyThreadState PyGILState_GetThisThreadState ()

     Get the current thread state for this thread.  May return ‘NULL’ if
     no GILState API has been used on the current thread.  Note that the
     main thread always has such a thread-state, even if no
     auto-thread-state call has been made on the main thread.  This is
     mainly a helper/diagnostic function.

     New in version 2.3.

  The following macros are normally used without a trailing semicolon;
look for example usage in the Python source distribution.

 -- C Macro: Py_BEGIN_ALLOW_THREADS

     This macro expands to ‘{ PyThreadState *_save; _save =
     PyEval_SaveThread();’.  Note that it contains an opening brace; it
     must be matched with a following *note Py_END_ALLOW_THREADS: 29cb.
     macro.  See above for further discussion of this macro.  It is a
     no-op when thread support is disabled at compile time.

 -- C Macro: Py_END_ALLOW_THREADS

     This macro expands to ‘PyEval_RestoreThread(_save); }’.  Note that
     it contains a closing brace; it must be matched with an earlier
     *note Py_BEGIN_ALLOW_THREADS: 29ca. macro.  See above for further
     discussion of this macro.  It is a no-op when thread support is
     disabled at compile time.

 -- C Macro: Py_BLOCK_THREADS

     This macro expands to ‘PyEval_RestoreThread(_save);’: it is
     equivalent to *note Py_END_ALLOW_THREADS: 29cb. without the closing
     brace.  It is a no-op when thread support is disabled at compile
     time.

 -- C Macro: Py_UNBLOCK_THREADS

     This macro expands to ‘_save = PyEval_SaveThread();’: it is
     equivalent to *note Py_BEGIN_ALLOW_THREADS: 29ca. without the
     opening brace and variable declaration.  It is a no-op when thread
     support is disabled at compile time.


File: python.info,  Node: Low-level API,  Prev: High-level API,  Up: Thread State and the Global Interpreter Lock

7.8.3.4 Low-level API
.....................

All of the following functions are only available when thread support is
enabled at compile time, and must be called only when the global
interpreter lock has been created.

 -- C Function: PyInterpreterState* PyInterpreterState_New ()

     Create a new interpreter state object.  The global interpreter lock
     need not be held, but may be held if it is necessary to serialize
     calls to this function.

 -- C Function: void PyInterpreterState_Clear
          (PyInterpreterState *interp)

     Reset all information in an interpreter state object.  The global
     interpreter lock must be held.

 -- C Function: void PyInterpreterState_Delete
          (PyInterpreterState *interp)

     Destroy an interpreter state object.  The global interpreter lock
     need not be held.  The interpreter state must have been reset with
     a previous call to *note PyInterpreterState_Clear(): 2dec.

 -- C Function: PyThreadState* PyThreadState_New
          (PyInterpreterState *interp)

     Create a new thread state object belonging to the given interpreter
     object.  The global interpreter lock need not be held, but may be
     held if it is necessary to serialize calls to this function.

 -- C Function: void PyThreadState_Clear (PyThreadState *tstate)

     Reset all information in a thread state object.  The global
     interpreter lock must be held.

 -- C Function: void PyThreadState_Delete (PyThreadState *tstate)

     Destroy a thread state object.  The global interpreter lock need
     not be held.  The thread state must have been reset with a previous
     call to *note PyThreadState_Clear(): 2def.

 -- C Function: PyObject* PyThreadState_GetDict ()

     Return value: Borrowed reference.

     Return a dictionary in which extensions can store thread-specific
     state information.  Each extension should use a unique key to use
     to store state in the dictionary.  It is okay to call this function
     when no current thread state is available.  If this function
     returns _NULL_, no exception has been raised and the caller should
     assume no current thread state is available.

     Changed in version 2.3: Previously this could only be called when a
     current thread is active, and _NULL_ meant that an exception was
     raised.

 -- C Function: int PyThreadState_SetAsyncExc (long id, PyObject *exc)

     Asynchronously raise an exception in a thread.  The _id_ argument
     is the thread id of the target thread; _exc_ is the exception
     object to be raised.  This function does not steal any references
     to _exc_.  To prevent naive misuse, you must write your own C
     extension to call this.  Must be called with the GIL held.  Returns
     the number of thread states modified; this is normally one, but
     will be zero if the thread id isn’t found.  If _exc_ is ‘NULL’, the
     pending exception (if any) for the thread is cleared.  This raises
     no exceptions.

     New in version 2.3.

 -- C Function: void PyEval_AcquireThread (PyThreadState *tstate)

     Acquire the global interpreter lock and set the current thread
     state to _tstate_, which should not be _NULL_. The lock must have
     been created earlier.  If this thread already has the lock,
     deadlock ensues.

     *note PyEval_RestoreThread(): 2de4. is a higher-level function
     which is always available (even when thread support isn’t enabled
     or when threads have not been initialized).

 -- C Function: void PyEval_ReleaseThread (PyThreadState *tstate)

     Reset the current thread state to _NULL_ and release the global
     interpreter lock.  The lock must have been created earlier and must
     be held by the current thread.  The _tstate_ argument, which must
     not be _NULL_, is only used to check that it represents the current
     thread state — if it isn’t, a fatal error is reported.

     *note PyEval_SaveThread(): 2de3. is a higher-level function which
     is always available (even when thread support isn’t enabled or when
     threads have not been initialized).

 -- C Function: void PyEval_AcquireLock ()

     Acquire the global interpreter lock.  The lock must have been
     created earlier.  If this thread already has the lock, a deadlock
     ensues.

          Warning: This function does not change the current thread
          state.  Please use *note PyEval_RestoreThread(): 2de4. or
          *note PyEval_AcquireThread(): 2df3. instead.

 -- C Function: void PyEval_ReleaseLock ()

     Release the global interpreter lock.  The lock must have been
     created earlier.

          Warning: This function does not change the current thread
          state.  Please use *note PyEval_SaveThread(): 2de3. or *note
          PyEval_ReleaseThread(): 2df4. instead.


File: python.info,  Node: Sub-interpreter support,  Next: Asynchronous Notifications,  Prev: Thread State and the Global Interpreter Lock,  Up: Initialization Finalization and Threads

7.8.4 Sub-interpreter support
-----------------------------

While in most uses, you will only embed a single Python interpreter,
there are cases where you need to create several independent
interpreters in the same process and perhaps even in the same thread.
Sub-interpreters allow you to do that.  You can switch between
sub-interpreters using the *note PyThreadState_Swap(): 2de5. function.
You can create and destroy them using the following functions:

 -- C Function: PyThreadState* Py_NewInterpreter ()

     Create a new sub-interpreter.  This is an (almost) totally separate
     environment for the execution of Python code.  In particular, the
     new interpreter has separate, independent versions of all imported
     modules, including the fundamental modules ‘builtins’, *note
     __main__: 2. and *note sys: 16d.  The table of loaded modules
     (‘sys.modules’) and the module search path (‘sys.path’) are also
     separate.  The new environment has no ‘sys.argv’ variable.  It has
     new standard I/O stream file objects ‘sys.stdin’, ‘sys.stdout’ and
     ‘sys.stderr’ (however these refer to the same underlying file
     descriptors).

     The return value points to the first thread state created in the
     new sub-interpreter.  This thread state is made in the current
     thread state.  Note that no actual thread is created; see the
     discussion of thread states below.  If creation of the new
     interpreter is unsuccessful, _NULL_ is returned; no exception is
     set since the exception state is stored in the current thread state
     and there may not be a current thread state.  (Like all other
     Python/C API functions, the global interpreter lock must be held
     before calling this function and is still held when it returns;
     however, unlike most other Python/C API functions, there needn’t be
     a current thread state on entry.)

     Extension modules are shared between (sub-)interpreters as follows:
     the first time a particular extension is imported, it is
     initialized normally, and a (shallow) copy of its module’s
     dictionary is squirreled away.  When the same extension is imported
     by another (sub-)interpreter, a new module is initialized and
     filled with the contents of this copy; the extension’s ‘init’
     function is not called.  Note that this is different from what
     happens when an extension is imported after the interpreter has
     been completely re-initialized by calling *note Py_Finalize(): 2c3.
     and *note Py_Initialize(): 29a9.; in that case, the extension’s
     ‘initmodule’ function _is_ called again.

 -- C Function: void Py_EndInterpreter (PyThreadState *tstate)

     Destroy the (sub-)interpreter represented by the given thread
     state.  The given thread state must be the current thread state.
     See the discussion of thread states below.  When the call returns,
     the current thread state is _NULL_. All thread states associated
     with this interpreter are destroyed.  (The global interpreter lock
     must be held before calling this function and is still held when it
     returns.)  *note Py_Finalize(): 2c3. will destroy all
     sub-interpreters that haven’t been explicitly destroyed at that
     point.

* Menu:

* Bugs and caveats:: 


File: python.info,  Node: Bugs and caveats,  Up: Sub-interpreter support

7.8.4.1 Bugs and caveats
........................

Because sub-interpreters (and the main interpreter) are part of the same
process, the insulation between them isn’t perfect — for example, using
low-level file operations like *note os.close(): 110c. they can
(accidentally or maliciously) affect each other’s open files.  Because
of the way extensions are shared between (sub-)interpreters, some
extensions may not work properly; this is especially likely when the
extension makes use of (static) global variables, or when the extension
manipulates its module’s dictionary after its initialization.  It is
possible to insert objects created in one sub-interpreter into a
namespace of another sub-interpreter; this should be done with great
care to avoid sharing user-defined functions, methods, instances or
classes between sub-interpreters, since import operations executed by
such objects may affect the wrong (sub-)interpreter’s dictionary of
loaded modules.

  Also note that combining this functionality with ‘PyGILState_*()’ APIs
is delicate, because these APIs assume a bijection between Python thread
states and OS-level threads, an assumption broken by the presence of
sub-interpreters.  It is highly recommended that you don’t switch
sub-interpreters between a pair of matching *note PyGILState_Ensure():
2ddf. and *note PyGILState_Release(): 2de0. calls.  Furthermore,
extensions (such as *note ctypes: 78.) using these APIs to allow calling
of Python code from non-Python created threads will probably be broken
when using sub-interpreters.


File: python.info,  Node: Asynchronous Notifications,  Next: Profiling and Tracing,  Prev: Sub-interpreter support,  Up: Initialization Finalization and Threads

7.8.5 Asynchronous Notifications
--------------------------------

A mechanism is provided to make asynchronous notifications to the main
interpreter thread.  These notifications take the form of a function
pointer and a void pointer argument.

 -- C Function: int Py_AddPendingCall (int (*func)(void *), void *arg)

     Schedule a function to be called from the main interpreter thread.
     On success, 0 is returned and _func_ is queued for being called in
     the main thread.  On failure, -1 is returned without setting any
     exception.

     When successfully queued, _func_ will be _eventually_ called from
     the main interpreter thread with the argument _arg_.  It will be
     called asynchronously with respect to normally running Python code,
     but with both these conditions met:

        * on a *note bytecode: 583. boundary;

        * with the main thread holding the *note global interpreter
          lock: 154e. (_func_ can therefore use the full C API).

     _func_ must return 0 on success, or -1 on failure with an exception
     set.  _func_ won’t be interrupted to perform another asynchronous
     notification recursively, but it can still be interrupted to switch
     threads if the global interpreter lock is released.

     This function doesn’t need a current thread state to run, and it
     doesn’t need the global interpreter lock.

          Warning: This is a low-level function, only useful for very
          special cases.  There is no guarantee that _func_ will be
          called as quick as possible.  If the main thread is busy
          executing a system call, _func_ won’t be called before the
          system call returns.  This function is generally *not*
          suitable for calling Python code from arbitrary C threads.
          Instead, use the *note PyGILState API: 2dde.

     New in version 2.7.


File: python.info,  Node: Profiling and Tracing,  Next: Advanced Debugger Support,  Prev: Asynchronous Notifications,  Up: Initialization Finalization and Threads

7.8.6 Profiling and Tracing
---------------------------

The Python interpreter provides some low-level support for attaching
profiling and execution tracing facilities.  These are used for
profiling, debugging, and coverage analysis tools.

  Starting with Python 2.2, the implementation of this facility was
substantially revised, and an interface from C was added.  This C
interface allows the profiling or tracing code to avoid the overhead of
calling through Python-level callable objects, making a direct C
function call instead.  The essential attributes of the facility have
not changed; the interface allows trace functions to be installed
per-thread, and the basic events reported to the trace function are the
same as had been reported to the Python-level trace functions in
previous versions.

 -- C Type: int (*Py_tracefunc) (PyObject *obj, PyFrameObject *frame,
          int what, PyObject *arg)

     The type of the trace function registered using *note
     PyEval_SetProfile(): 49d. and *note PyEval_SetTrace(): 49e.  The
     first parameter is the object passed to the registration function
     as _obj_, _frame_ is the frame object to which the event pertains,
     _what_ is one of the constants ‘PyTrace_CALL’, ‘PyTrace_EXCEPTION’,
     ‘PyTrace_LINE’, ‘PyTrace_RETURN’, ‘PyTrace_C_CALL’,
     ‘PyTrace_C_EXCEPTION’, or ‘PyTrace_C_RETURN’, and _arg_ depends on
     the value of _what_:

     Value of _what_                    Meaning of _arg_
                                        
     ------------------------------------------------------------------------------
                                        
     ‘PyTrace_CALL’                     Always _NULL_.
                                        
                                        
     ‘PyTrace_EXCEPTION’                Exception information as returned by
                                        *note sys.exc_info(): 2f3.
                                        
                                        
     ‘PyTrace_LINE’                     Always _NULL_.
                                        
                                        
     ‘PyTrace_RETURN’                   Value being returned to the caller, or
                                        _NULL_ if caused by an exception.
                                        
                                        
     ‘PyTrace_C_CALL’                   Function object being called.
                                        
                                        
     ‘PyTrace_C_EXCEPTION’              Function object being called.
                                        
                                        
     ‘PyTrace_C_RETURN’                 Function object being called.
                                        

 -- C Variable: int PyTrace_CALL

     The value of the _what_ parameter to a *note Py_tracefunc: 2dfb.
     function when a new call to a function or method is being reported,
     or a new entry into a generator.  Note that the creation of the
     iterator for a generator function is not reported as there is no
     control transfer to the Python bytecode in the corresponding frame.

 -- C Variable: int PyTrace_EXCEPTION

     The value of the _what_ parameter to a *note Py_tracefunc: 2dfb.
     function when an exception has been raised.  The callback function
     is called with this value for _what_ when after any bytecode is
     processed after which the exception becomes set within the frame
     being executed.  The effect of this is that as exception
     propagation causes the Python stack to unwind, the callback is
     called upon return to each frame as the exception propagates.  Only
     trace functions receives these events; they are not needed by the
     profiler.

 -- C Variable: int PyTrace_LINE

     The value passed as the _what_ parameter to a trace function (but
     not a profiling function) when a line-number event is being
     reported.

 -- C Variable: int PyTrace_RETURN

     The value for the _what_ parameter to *note Py_tracefunc: 2dfb.
     functions when a call is returning without propagating an
     exception.

 -- C Variable: int PyTrace_C_CALL

     The value for the _what_ parameter to *note Py_tracefunc: 2dfb.
     functions when a C function is about to be called.

 -- C Variable: int PyTrace_C_EXCEPTION

     The value for the _what_ parameter to *note Py_tracefunc: 2dfb.
     functions when a C function has raised an exception.

 -- C Variable: int PyTrace_C_RETURN

     The value for the _what_ parameter to *note Py_tracefunc: 2dfb.
     functions when a C function has returned.

 -- C Function: void PyEval_SetProfile (Py_tracefunc func,
          PyObject *obj)

     Set the profiler function to _func_.  The _obj_ parameter is passed
     to the function as its first parameter, and may be any Python
     object, or _NULL_. If the profile function needs to maintain state,
     using a different value for _obj_ for each thread provides a
     convenient and thread-safe place to store it.  The profile function
     is called for all monitored events except the line-number events.

 -- C Function: void PyEval_SetTrace (Py_tracefunc func, PyObject *obj)

     Set the tracing function to _func_.  This is similar to *note
     PyEval_SetProfile(): 49d, except the tracing function does receive
     line-number events.

 -- C Function: PyObject* PyEval_GetCallStats (PyObject *self)

     Return a tuple of function call counts.  There are constants
     defined for the positions within the tuple:

     Name                                Value
                                         
     ------------------------------------------------
                                         
     ‘PCALL_ALL’                         0
                                         
                                         
     ‘PCALL_FUNCTION’                    1
                                         
                                         
     ‘PCALL_FAST_FUNCTION’               2
                                         
                                         
     ‘PCALL_FASTER_FUNCTION’             3
                                         
                                         
     ‘PCALL_METHOD’                      4
                                         
                                         
     ‘PCALL_BOUND_METHOD’                5
                                         
                                         
     ‘PCALL_CFUNCTION’                   6
                                         
                                         
     ‘PCALL_TYPE’                        7
                                         
                                         
     ‘PCALL_GENERATOR’                   8
                                         
                                         
     ‘PCALL_OTHER’                       9
                                         
                                         
     ‘PCALL_POP’                         10
                                         

     ‘PCALL_FAST_FUNCTION’ means no argument tuple needs to be created.
     ‘PCALL_FASTER_FUNCTION’ means that the fast-path frame setup code
     is used.

     If there is a method call where the call can be optimized by
     changing the argument tuple and calling the function directly, it
     gets recorded twice.

     This function is only present if Python is compiled with
     ‘CALL_PROFILE’ defined.


File: python.info,  Node: Advanced Debugger Support,  Prev: Profiling and Tracing,  Up: Initialization Finalization and Threads

7.8.7 Advanced Debugger Support
-------------------------------

These functions are only intended to be used by advanced debugging
tools.

 -- C Function: PyInterpreterState* PyInterpreterState_Head ()

     Return the interpreter state object at the head of the list of all
     such objects.

     New in version 2.2.

 -- C Function: PyInterpreterState* PyInterpreterState_Next
          (PyInterpreterState *interp)

     Return the next interpreter state object after _interp_ from the
     list of all such objects.

     New in version 2.2.

 -- C Function: PyThreadState * PyInterpreterState_ThreadHead
          (PyInterpreterState *interp)

     Return the a pointer to the first *note PyThreadState: 2dda. object
     in the list of threads associated with the interpreter _interp_.

     New in version 2.2.

 -- C Function: PyThreadState* PyThreadState_Next
          (PyThreadState *tstate)

     Return the next thread state object after _tstate_ from the list of
     all such objects belonging to the same *note PyInterpreterState:
     2de2. object.

     New in version 2.2.


File: python.info,  Node: Memory Management,  Next: Object Implementation Support,  Prev: Initialization Finalization and Threads,  Up: Python/C API Reference Manual

7.9 Memory Management
=====================

* Menu:

* Overview:: 
* Memory Interface:: 
* Examples: Examples<23>. 


File: python.info,  Node: Overview,  Next: Memory Interface,  Up: Memory Management

7.9.1 Overview
--------------

Memory management in Python involves a private heap containing all
Python objects and data structures.  The management of this private heap
is ensured internally by the _Python memory manager_.  The Python memory
manager has different components which deal with various dynamic storage
management aspects, like sharing, segmentation, preallocation or
caching.

  At the lowest level, a raw memory allocator ensures that there is
enough room in the private heap for storing all Python-related data by
interacting with the memory manager of the operating system.  On top of
the raw memory allocator, several object-specific allocators operate on
the same heap and implement distinct memory management policies adapted
to the peculiarities of every object type.  For example, integer objects
are managed differently within the heap than strings, tuples or
dictionaries because integers imply different storage requirements and
speed/space tradeoffs.  The Python memory manager thus delegates some of
the work to the object-specific allocators, but ensures that the latter
operate within the bounds of the private heap.

  It is important to understand that the management of the Python heap
is performed by the interpreter itself and that the user has no control
over it, even if she regularly manipulates object pointers to memory
blocks inside that heap.  The allocation of heap space for Python
objects and other internal buffers is performed on demand by the Python
memory manager through the Python/C API functions listed in this
document.

  To avoid memory corruption, extension writers should never try to
operate on Python objects with the functions exported by the C library:
‘malloc()’, ‘calloc()’, ‘realloc()’ and ‘free()’.  This will result in
mixed calls between the C allocator and the Python memory manager with
fatal consequences, because they implement different algorithms and
operate on different heaps.  However, one may safely allocate and
release memory blocks with the C library allocator for individual
purposes, as shown in the following example:

     PyObject *res;
     char *buf = (char *) malloc(BUFSIZ); /* for I/O */

     if (buf == NULL)
         return PyErr_NoMemory();
     ...Do some I/O operation involving buf...
     res = PyString_FromString(buf);
     free(buf); /* malloc'ed */
     return res;

  In this example, the memory request for the I/O buffer is handled by
the C library allocator.  The Python memory manager is involved only in
the allocation of the string object returned as a result.

  In most situations, however, it is recommended to allocate memory from
the Python heap specifically because the latter is under control of the
Python memory manager.  For example, this is required when the
interpreter is extended with new object types written in C. Another
reason for using the Python heap is the desire to _inform_ the Python
memory manager about the memory needs of the extension module.  Even
when the requested memory is used exclusively for internal,
highly-specific purposes, delegating all memory requests to the Python
memory manager causes the interpreter to have a more accurate image of
its memory footprint as a whole.  Consequently, under certain
circumstances, the Python memory manager may or may not trigger
appropriate actions, like garbage collection, memory compaction or other
preventive procedures.  Note that by using the C library allocator as
shown in the previous example, the allocated memory for the I/O buffer
escapes completely the Python memory manager.


File: python.info,  Node: Memory Interface,  Next: Examples<23>,  Prev: Overview,  Up: Memory Management

7.9.2 Memory Interface
----------------------

The following function sets, modeled after the ANSI C standard, but
specifying behavior when requesting zero bytes, are available for
allocating and releasing memory from the Python heap:

 -- C Function: void* PyMem_Malloc (size_t n)

     Allocates _n_ bytes and returns a pointer of type ‘void*’ to the
     allocated memory, or _NULL_ if the request fails.  Requesting zero
     bytes returns a distinct non-_NULL_ pointer if possible, as if
     ‘PyMem_Malloc(1)’ had been called instead.  The memory will not
     have been initialized in any way.

 -- C Function: void* PyMem_Realloc (void *p, size_t n)

     Resizes the memory block pointed to by _p_ to _n_ bytes.  The
     contents will be unchanged to the minimum of the old and the new
     sizes.  If _p_ is _NULL_, the call is equivalent to
     ‘PyMem_Malloc(n)’; else if _n_ is equal to zero, the memory block
     is resized but is not freed, and the returned pointer is
     non-_NULL_. Unless _p_ is _NULL_, it must have been returned by a
     previous call to *note PyMem_Malloc(): 3dd. or *note
     PyMem_Realloc(): 3de.  If the request fails, *note PyMem_Realloc():
     3de. returns _NULL_ and _p_ remains a valid pointer to the previous
     memory area.

 -- C Function: void PyMem_Free (void *p)

     Frees the memory block pointed to by _p_, which must have been
     returned by a previous call to *note PyMem_Malloc(): 3dd. or *note
     PyMem_Realloc(): 3de.  Otherwise, or if ‘PyMem_Free(p)’ has been
     called before, undefined behavior occurs.  If _p_ is _NULL_, no
     operation is performed.

  The following type-oriented macros are provided for convenience.  Note
that _TYPE_ refers to any C type.

 -- C Function: TYPE* PyMem_New (TYPE, size_t n)

     Same as *note PyMem_Malloc(): 3dd, but allocates ‘(n *
     sizeof(TYPE))’ bytes of memory.  Returns a pointer cast to ‘TYPE*’.
     The memory will not have been initialized in any way.

 -- C Function: TYPE* PyMem_Resize (void *p, TYPE, size_t n)

     Same as *note PyMem_Realloc(): 3de, but the memory block is resized
     to ‘(n * sizeof(TYPE))’ bytes.  Returns a pointer cast to ‘TYPE*’.
     On return, _p_ will be a pointer to the new memory area, or _NULL_
     in the event of failure.  This is a C preprocessor macro; p is
     always reassigned.  Save the original value of p to avoid losing
     memory when handling errors.

 -- C Function: void PyMem_Del (void *p)

     Same as *note PyMem_Free(): 3df.

  In addition, the following macro sets are provided for calling the
Python memory allocator directly, without involving the C API functions
listed above.  However, note that their use does not preserve binary
compatibility across Python versions and is therefore deprecated in
extension modules.

  ‘PyMem_MALLOC()’, ‘PyMem_REALLOC()’, ‘PyMem_FREE()’.

  ‘PyMem_NEW()’, ‘PyMem_RESIZE()’, ‘PyMem_DEL()’.


File: python.info,  Node: Examples<23>,  Prev: Memory Interface,  Up: Memory Management

7.9.3 Examples
--------------

Here is the example from section *note Overview: 2e0a, rewritten so that
the I/O buffer is allocated from the Python heap by using the first
function set:

     PyObject *res;
     char *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */

     if (buf == NULL)
         return PyErr_NoMemory();
     /* ...Do some I/O operation involving buf... */
     res = PyString_FromString(buf);
     PyMem_Free(buf); /* allocated with PyMem_Malloc */
     return res;

  The same code using the type-oriented function set:

     PyObject *res;
     char *buf = PyMem_New(char, BUFSIZ); /* for I/O */

     if (buf == NULL)
         return PyErr_NoMemory();
     /* ...Do some I/O operation involving buf... */
     res = PyString_FromString(buf);
     PyMem_Del(buf); /* allocated with PyMem_New */
     return res;

  Note that in the two examples above, the buffer is always manipulated
via functions belonging to the same set.  Indeed, it is required to use
the same memory API family for a given memory block, so that the risk of
mixing different allocators is reduced to a minimum.  The following code
sequence contains two errors, one of which is labeled as _fatal_ because
it mixes two different allocators operating on different heaps.

     char *buf1 = PyMem_New(char, BUFSIZ);
     char *buf2 = (char *) malloc(BUFSIZ);
     char *buf3 = (char *) PyMem_Malloc(BUFSIZ);
     ...
     PyMem_Del(buf3);  /* Wrong -- should be PyMem_Free() */
     free(buf2);       /* Right -- allocated via malloc() */
     free(buf1);       /* Fatal -- should be PyMem_Del()  */

  In addition to the functions aimed at handling raw memory blocks from
the Python heap, objects in Python are allocated and released with *note
PyObject_New(): 46b, *note PyObject_NewVar(): 46c. and *note
PyObject_Del(): 46d.

  These will be explained in the next chapter on defining and
implementing new object types in C.


File: python.info,  Node: Object Implementation Support,  Prev: Memory Management,  Up: Python/C API Reference Manual

7.10 Object Implementation Support
==================================

This chapter describes the functions, types, and macros used when
defining new object types.

* Menu:

* Allocating Objects on the Heap:: 
* Common Object Structures:: 
* Type Objects: Type Objects<3>. 
* Number Object Structures:: 
* Mapping Object Structures:: 
* Sequence Object Structures:: 
* Buffer Object Structures:: 
* Supporting Cyclic Garbage Collection:: 


File: python.info,  Node: Allocating Objects on the Heap,  Next: Common Object Structures,  Up: Object Implementation Support

7.10.1 Allocating Objects on the Heap
-------------------------------------

 -- C Function: PyObject* _PyObject_New (PyTypeObject *type)

     Return value: New reference.

 -- C Function: PyVarObject* _PyObject_NewVar (PyTypeObject *type,
          Py_ssize_t size)

     Return value: New reference.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: void _PyObject_Del (PyObject *op)

 -- C Function: PyObject* PyObject_Init (PyObject *op,
          PyTypeObject *type)

     Return value: Borrowed reference.

     Initialize a newly-allocated object _op_ with its type and initial
     reference.  Returns the initialized object.  If _type_ indicates
     that the object participates in the cyclic garbage detector, it is
     added to the detector’s set of observed objects.  Other fields of
     the object are not affected.

 -- C Function: PyVarObject* PyObject_InitVar (PyVarObject *op,
          PyTypeObject *type, Py_ssize_t size)

     Return value: Borrowed reference.

     This does everything *note PyObject_Init(): 2e1b. does, and also
     initializes the length information for a variable-size object.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: TYPE* PyObject_New (TYPE, PyTypeObject *type)

     Return value: New reference.

     Allocate a new Python object using the C structure type _TYPE_ and
     the Python type object _type_.  Fields not defined by the Python
     object header are not initialized; the object’s reference count
     will be one.  The size of the memory allocation is determined from
     the *note tp_basicsize: 29db. field of the type object.

 -- C Function: TYPE* PyObject_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)

     Return value: New reference.

     Allocate a new Python object using the C structure type _TYPE_ and
     the Python type object _type_.  Fields not defined by the Python
     object header are not initialized.  The allocated memory allows for
     the _TYPE_ structure plus _size_ fields of the size given by the
     *note tp_itemsize: 29f6. field of _type_.  This is useful for
     implementing objects like tuples, which are able to determine their
     size at construction time.  Embedding the array of fields into the
     same allocation decreases the number of allocations, improving the
     memory management efficiency.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: void PyObject_Del (PyObject *op)

     Releases memory allocated to an object using *note PyObject_New():
     46b. or *note PyObject_NewVar(): 46c.  This is normally called from
     the *note tp_dealloc: 29e1. handler specified in the object’s type.
     The fields of the object should not be accessed after this call as
     the memory is no longer a valid Python object.

 -- C Function: PyObject* Py_InitModule (char *name,
          PyMethodDef *methods)

     Return value: Borrowed reference.

     Create a new module object based on a name and table of functions,
     returning the new module object.

     Changed in version 2.3: Older versions of Python did not support
     _NULL_ as the value for the _methods_ argument.

 -- C Function: PyObject* Py_InitModule3 (char *name,
          PyMethodDef *methods, char *doc)

     Return value: Borrowed reference.

     Create a new module object based on a name and table of functions,
     returning the new module object.  If _doc_ is non-_NULL_, it will
     be used to define the docstring for the module.

     Changed in version 2.3: Older versions of Python did not support
     _NULL_ as the value for the _methods_ argument.

 -- C Function: PyObject* Py_InitModule4 (char *name,
          PyMethodDef *methods, char *doc, PyObject *self, int apiver)

     Return value: Borrowed reference.

     Create a new module object based on a name and table of functions,
     returning the new module object.  If _doc_ is non-_NULL_, it will
     be used to define the docstring for the module.  If _self_ is
     non-_NULL_, it will passed to the functions of the module as their
     (otherwise _NULL_) first parameter.  (This was added as an
     experimental feature, and there are no known uses in the current
     version of Python.)  For _apiver_, the only value which should be
     passed is defined by the constant ‘PYTHON_API_VERSION’.

          Note: Most uses of this function should probably be using the
          *note Py_InitModule3(): 29e9. instead; only use this if you
          are sure you need it.

     Changed in version 2.3: Older versions of Python did not support
     _NULL_ as the value for the _methods_ argument.

 -- C Variable: PyObject _Py_NoneStruct

     Object which is visible in Python as ‘None’.  This should only be
     accessed using the ‘Py_None’ macro, which evaluates to a pointer to
     this object.


File: python.info,  Node: Common Object Structures,  Next: Type Objects<3>,  Prev: Allocating Objects on the Heap,  Up: Object Implementation Support

7.10.2 Common Object Structures
-------------------------------

There are a large number of structures which are used in the definition
of object types for Python.  This section describes these structures and
how they are used.

  All Python objects ultimately share a small number of fields at the
beginning of the object’s representation in memory.  These are
represented by the *note PyObject: 3a6. and *note PyVarObject: 2e22.
types, which are defined, in turn, by the expansions of some macros also
used, whether directly or indirectly, in the definition of all other
Python objects.

 -- C Type: PyObject

     All object types are extensions of this type.  This is a type which
     contains the information Python needs to treat a pointer to an
     object as an object.  In a normal "release" build, it contains only
     the object’s reference count and a pointer to the corresponding
     type object.  It corresponds to the fields defined by the expansion
     of the ‘PyObject_HEAD’ macro.

 -- C Type: PyVarObject

     This is an extension of *note PyObject: 3a6. that adds the
     ‘ob_size’ field.  This is only used for objects that have some
     notion of _length_.  This type does not often appear in the
     Python/C API. It corresponds to the fields defined by the expansion
     of the ‘PyObject_VAR_HEAD’ macro.

  These macros are used in the definition of *note PyObject: 3a6. and
*note PyVarObject: 2e22.:

 -- C Macro: PyObject_HEAD

     This is a macro which expands to the declarations of the fields of
     the *note PyObject: 3a6. type; it is used when declaring new types
     which represent objects without a varying length.  The specific
     fields it expands to depend on the definition of ‘Py_TRACE_REFS’.
     By default, that macro is not defined, and *note PyObject_HEAD:
     29f1. expands to:

          Py_ssize_t ob_refcnt;
          PyTypeObject *ob_type;

     When ‘Py_TRACE_REFS’ is defined, it expands to:

          PyObject *_ob_next, *_ob_prev;
          Py_ssize_t ob_refcnt;
          PyTypeObject *ob_type;

 -- C Macro: PyObject_VAR_HEAD

     This is a macro which expands to the declarations of the fields of
     the *note PyVarObject: 2e22. type; it is used when declaring new
     types which represent objects with a length that varies from
     instance to instance.  This macro always expands to:

          PyObject_HEAD
          Py_ssize_t ob_size;

     Note that *note PyObject_HEAD: 29f1. is part of the expansion, and
     that its own expansion varies depending on the definition of
     ‘Py_TRACE_REFS’.

 -- C Macro: PyObject_HEAD_INIT (type)

     This is a macro which expands to initialization values for a new
     *note PyObject: 3a6. type.  This macro expands to:

          _PyObject_EXTRA_INIT
          1, type,

 -- C Macro: PyVarObject_HEAD_INIT (type, size)

     This is a macro which expands to initialization values for a new
     *note PyVarObject: 2e22. type, including the ‘ob_size’ field.  This
     macro expands to:

          _PyObject_EXTRA_INIT
          1, type, size,

 -- C Type: PyCFunction

     Type of the functions used to implement most Python callables in C.
     Functions of this type take two *note PyObject*: 3a6. parameters
     and return one such value.  If the return value is _NULL_, an
     exception shall have been set.  If not _NULL_, the return value is
     interpreted as the return value of the function as exposed in
     Python.  The function must return a new reference.

 -- C Type: PyMethodDef

     Structure used to describe a method of an extension type.  This
     structure has four fields:

     Field                  C Type            Meaning
                                              
     -----------------------------------------------------------------------------
                                              
     ‘ml_name’              char *            name of the method
                                              
                                              
     ‘ml_meth’              PyCFunction       pointer to the C implementation
                                              
                                              
     ‘ml_flags’             int               flag bits indicating how the call
                                              should be constructed
                                              
                                              
     ‘ml_doc’               char *            points to the contents of the
                                              docstring
                                              

  The ‘ml_meth’ is a C function pointer.  The functions may be of
different types, but they always return *note PyObject*: 3a6.  If the
function is not of the *note PyCFunction: 41d, the compiler will require
a cast in the method table.  Even though *note PyCFunction: 41d. defines
the first parameter as *note PyObject*: 3a6, it is common that the
method implementation uses a the specific C type of the _self_ object.

  The ‘ml_flags’ field is a bitfield which can include the following
flags.  The individual flags indicate either a calling convention or a
binding convention.  Of the calling convention flags, only *note
METH_VARARGS: 4ac. and *note METH_KEYWORDS: 29a7. can be combined (but
note that *note METH_KEYWORDS: 29a7. alone is equivalent to
‘METH_VARARGS | METH_KEYWORDS’).  Any of the calling convention flags
can be combined with a binding flag.

 -- Data: METH_VARARGS

     This is the typical calling convention, where the methods have the
     type *note PyCFunction: 41d.  The function expects two *note
     PyObject*: 3a6. values.  The first one is the _self_ object for
     methods; for module functions, it is the module object.  The second
     parameter (often called _args_) is a tuple object representing all
     arguments.  This parameter is typically processed using *note
     PyArg_ParseTuple(): 31b. or *note PyArg_UnpackTuple(): 4aa.

 -- Data: METH_KEYWORDS

     Methods with these flags must be of type ‘PyCFunctionWithKeywords’.
     The function expects three parameters: _self_, _args_, and a
     dictionary of all the keyword arguments.  The flag is typically
     combined with *note METH_VARARGS: 4ac, and the parameters are
     typically processed using *note PyArg_ParseTupleAndKeywords(): 41c.

 -- Data: METH_NOARGS

     Methods without parameters don’t need to check whether arguments
     are given if they are listed with the *note METH_NOARGS: 46f. flag.
     They need to be of type *note PyCFunction: 41d.  The first
     parameter is typically named ‘self’ and will hold a reference to
     the module or object instance.  In all cases the second parameter
     will be _NULL_.

 -- Data: METH_O

     Methods with a single object argument can be listed with the *note
     METH_O: 4ab. flag, instead of invoking *note PyArg_ParseTuple():
     31b. with a ‘"O"’ argument.  They have the type *note PyCFunction:
     41d, with the _self_ parameter, and a *note PyObject*: 3a6.
     parameter representing the single argument.

 -- Data: METH_OLDARGS

     This calling convention is deprecated.  The method must be of type
     *note PyCFunction: 41d.  The second argument is _NULL_ if no
     arguments are given, a single object if exactly one argument is
     given, and a tuple of objects if more than one argument is given.
     There is no way for a function using this convention to distinguish
     between a call with multiple arguments and a call with a tuple as
     the only argument.

  These two constants are not used to indicate the calling convention
but the binding when use with methods of classes.  These may not be used
for functions defined for modules.  At most one of these flags may be
set for any given method.

 -- Data: METH_CLASS

     The method will be passed the type object as the first parameter
     rather than an instance of the type.  This is used to create _class
     methods_, similar to what is created when using the *note
     classmethod(): 3f6. built-in function.

     New in version 2.3.

 -- Data: METH_STATIC

     The method will be passed _NULL_ as the first parameter rather than
     an instance of the type.  This is used to create _static methods_,
     similar to what is created when using the *note staticmethod():
     3f5. built-in function.

     New in version 2.3.

  One other constant controls whether a method is loaded in place of
another definition with the same method name.

 -- Data: METH_COEXIST

     The method will be loaded in place of existing definitions.
     Without _METH_COEXIST_, the default is to skip repeated
     definitions.  Since slot wrappers are loaded before the method
     table, the existence of a _sq_contains_ slot, for example, would
     generate a wrapped method named *note __contains__(): 322. and
     preclude the loading of a corresponding PyCFunction with the same
     name.  With the flag defined, the PyCFunction will be loaded in
     place of the wrapper object and will co-exist with the slot.  This
     is helpful because calls to PyCFunctions are optimized more than
     wrapper object calls.

     New in version 2.4.

 -- C Type: PyMemberDef

     Structure which describes an attribute of a type which corresponds
     to a C struct member.  Its fields are:

     Field                  C Type            Meaning
                                              
     -----------------------------------------------------------------------------
                                              
     ‘name’                 char *            name of the member
                                              
                                              
     *note type: 490.       int               the type of the member in the C
                                              struct
                                              
                                              
     ‘offset’               Py_ssize_t        the offset in bytes that the
                                              member is located on the type’s
                                              object struct
                                              
                                              
     ‘flags’                int               flag bits indicating if the field
                                              should be read-only or writable
                                              
                                              
     ‘doc’                  char *            points to the contents of the
                                              docstring
                                              

     *note type: 490. can be one of many ‘T_’ macros corresponding to
     various C types.  When the member is accessed in Python, it will be
     converted to the equivalent Python type.

     Macro name          C type
                         
     -------------------------------------------
                         
     T_SHORT             short
                         
                         
     T_INT               int
                         
                         
     T_LONG              long
                         
                         
     T_FLOAT             float
                         
                         
     T_DOUBLE            double
                         
                         
     T_STRING            char *
                         
                         
     T_OBJECT            PyObject *
                         
                         
     T_OBJECT_EX         PyObject *
                         
                         
     T_CHAR              char
                         
                         
     T_BYTE              char
                         
                         
     T_UBYTE             unsigned char
                         
                         
     T_UINT              unsigned int
                         
                         
     T_USHORT            unsigned short
                         
                         
     T_ULONG             unsigned long
                         
                         
     T_BOOL              char
                         
                         
     T_LONGLONG          long long
                         
                         
     T_ULONGLONG         unsigned long long
                         
                         
     T_PYSSIZET          Py_ssize_t
                         

     ‘T_OBJECT’ and ‘T_OBJECT_EX’ differ in that ‘T_OBJECT’ returns
     ‘None’ if the member is _NULL_ and ‘T_OBJECT_EX’ raises an *note
     AttributeError: 1f8.  Try to use ‘T_OBJECT_EX’ over ‘T_OBJECT’
     because ‘T_OBJECT_EX’ handles use of the *note del: 568. statement
     on that attribute more correctly than ‘T_OBJECT’.

     ‘flags’ can be 0 for write and read access or ‘READONLY’ for
     read-only access.  Using ‘T_STRING’ for *note type: 490. implies
     ‘READONLY’.  Only ‘T_OBJECT’ and ‘T_OBJECT_EX’ members can be
     deleted.  (They are set to _NULL_).

 -- C Function: PyObject* Py_FindMethod (PyMethodDef table[],
          PyObject *ob, char *name)

     Return value: New reference.

     Return a bound method object for an extension type implemented in
     C. This can be useful in the implementation of a *note tp_getattro:
     2a00. or *note tp_getattr: 2a03. handler that does not use the
     *note PyObject_GenericGetAttr(): 2b25. function.


File: python.info,  Node: Type Objects<3>,  Next: Number Object Structures,  Prev: Common Object Structures,  Up: Object Implementation Support

7.10.3 Type Objects
-------------------

Perhaps one of the most important structures of the Python object system
is the structure that defines a new type: the *note PyTypeObject: 29d9.
structure.  Type objects can be handled using any of the ‘PyObject_*()’
or ‘PyType_*()’ functions, but do not offer much that’s interesting to
most Python applications.  These objects are fundamental to how objects
behave, so they are very important to the interpreter itself and to any
extension module that implements new types.

  Type objects are fairly large compared to most of the standard types.
The reason for the size is that each type object stores a large number
of values, mostly C function pointers, each of which implements a small
part of the type’s functionality.  The fields of the type object are
examined in detail in this section.  The fields will be described in the
order in which they occur in the structure.

  Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, coercion,
intargfunc, intintargfunc, intobjargproc, intintobjargproc,
objobjargproc, destructor, freefunc, printfunc, getattrfunc,
getattrofunc, setattrfunc, setattrofunc, cmpfunc, reprfunc, hashfunc

  The structure definition for *note PyTypeObject: 29d9. can be found in
‘Include/object.h’.  For convenience of reference, this repeats the
definition found there:

     typedef struct _typeobject {
         PyObject_VAR_HEAD
         char *tp_name; /* For printing, in format "<module>.<name>" */
         int tp_basicsize, tp_itemsize; /* For allocation */

         /* Methods to implement standard operations */

         destructor tp_dealloc;
         printfunc tp_print;
         getattrfunc tp_getattr;
         setattrfunc tp_setattr;
         cmpfunc tp_compare;
         reprfunc tp_repr;

         /* Method suites for standard classes */

         PyNumberMethods *tp_as_number;
         PySequenceMethods *tp_as_sequence;
         PyMappingMethods *tp_as_mapping;

         /* More standard operations (here for binary compatibility) */

         hashfunc tp_hash;
         ternaryfunc tp_call;
         reprfunc tp_str;
         getattrofunc tp_getattro;
         setattrofunc tp_setattro;

         /* Functions to access object as input/output buffer */
         PyBufferProcs *tp_as_buffer;

         /* Flags to define presence of optional/expanded features */
         long tp_flags;

         char *tp_doc; /* Documentation string */

         /* Assigned meaning in release 2.0 */
         /* call function for all accessible objects */
         traverseproc tp_traverse;

         /* delete references to contained objects */
         inquiry tp_clear;

         /* Assigned meaning in release 2.1 */
         /* rich comparisons */
         richcmpfunc tp_richcompare;

         /* weak reference enabler */
         long tp_weaklistoffset;

         /* Added in release 2.2 */
         /* Iterators */
         getiterfunc tp_iter;
         iternextfunc tp_iternext;

         /* Attribute descriptor and subclassing stuff */
         struct PyMethodDef *tp_methods;
         struct PyMemberDef *tp_members;
         struct PyGetSetDef *tp_getset;
         struct _typeobject *tp_base;
         PyObject *tp_dict;
         descrgetfunc tp_descr_get;
         descrsetfunc tp_descr_set;
         long tp_dictoffset;
         initproc tp_init;
         allocfunc tp_alloc;
         newfunc tp_new;
         freefunc tp_free; /* Low-level free-memory routine */
         inquiry tp_is_gc; /* For PyObject_IS_GC */
         PyObject *tp_bases;
         PyObject *tp_mro; /* method resolution order */
         PyObject *tp_cache;
         PyObject *tp_subclasses;
         PyObject *tp_weaklist;

     } PyTypeObject;


  The type object structure extends the *note PyVarObject: 2e22.
structure.  The ‘ob_size’ field is used for dynamic types (created by
‘type_new()’, usually called from a class statement).  Note that *note
PyType_Type: 2baa. (the metatype) initializes *note tp_itemsize: 29f6,
which means that its instances (i.e.  type objects) _must_ have the
‘ob_size’ field.

 -- C Member: PyObject* PyObject._ob_next
 -- C Member: PyObject* PyObject._ob_prev

     These fields are only present when the macro ‘Py_TRACE_REFS’ is
     defined.  Their initialization to _NULL_ is taken care of by the
     ‘PyObject_HEAD_INIT’ macro.  For statically allocated objects,
     these fields always remain _NULL_. For dynamically allocated
     objects, these two fields are used to link the object into a
     doubly-linked list of _all_ live objects on the heap.  This could
     be used for various debugging purposes; currently the only use is
     to print the objects that are still alive at the end of a run when
     the environment variable *note PYTHONDUMPREFS: 658. is set.

     These fields are not inherited by subtypes.

 -- C Member: Py_ssize_t PyObject.ob_refcnt

     This is the type object’s reference count, initialized to ‘1’ by
     the ‘PyObject_HEAD_INIT’ macro.  Note that for statically allocated
     type objects, the type’s instances (objects whose ‘ob_type’ points
     back to the type) do _not_ count as references.  But for
     dynamically allocated type objects, the instances _do_ count as
     references.

     This field is not inherited by subtypes.

     Changed in version 2.5: This field used to be an ‘int’ type.  This
     might require changes in your code for properly supporting 64-bit
     systems.

 -- C Member: PyTypeObject* PyObject.ob_type

     This is the type’s type, in other words its metatype.  It is
     initialized by the argument to the ‘PyObject_HEAD_INIT’ macro, and
     its value should normally be ‘&PyType_Type’.  However, for
     dynamically loadable extension modules that must be usable on
     Windows (at least), the compiler complains that this is not a valid
     initializer.  Therefore, the convention is to pass _NULL_ to the
     ‘PyObject_HEAD_INIT’ macro and to initialize this field explicitly
     at the start of the module’s initialization function, before doing
     anything else.  This is typically done like this:

          Foo_Type.ob_type = &PyType_Type;

     This should be done before any instances of the type are created.
     *note PyType_Ready(): 29da. checks if ‘ob_type’ is _NULL_, and if
     so, initializes it: in Python 2.2, it is set to ‘&PyType_Type’; in
     Python 2.2.1 and later it is initialized to the ‘ob_type’ field of
     the base class.  *note PyType_Ready(): 29da. will not change this
     field if it is non-zero.

     In Python 2.2, this field is not inherited by subtypes.  In 2.2.1,
     and in 2.3 and beyond, it is inherited by subtypes.

 -- C Member: Py_ssize_t PyVarObject.ob_size

     For statically allocated type objects, this should be initialized
     to zero.  For dynamically allocated type objects, this field has a
     special internal meaning.

     This field is not inherited by subtypes.

 -- C Member: char* PyTypeObject.tp_name

     Pointer to a NUL-terminated string containing the name of the type.
     For types that are accessible as module globals, the string should
     be the full module name, followed by a dot, followed by the type
     name; for built-in types, it should be just the type name.  If the
     module is a submodule of a package, the full package name is part
     of the full module name.  For example, a type named ‘T’ defined in
     module ‘M’ in subpackage ‘Q’ in package ‘P’ should have the *note
     tp_name: 29fd. initializer ‘"P.Q.M.T"’.

     For dynamically allocated type objects, this should just be the
     type name, and the module name explicitly stored in the type dict
     as the value for key ‘'__module__'’.

     For statically allocated type objects, the tp_name field should
     contain a dot.  Everything before the last dot is made accessible
     as the ‘__module__’ attribute, and everything after the last dot is
     made accessible as the ‘__name__’ attribute.

     If no dot is present, the entire *note tp_name: 29fd. field is made
     accessible as the ‘__name__’ attribute, and the ‘__module__’
     attribute is undefined (unless explicitly set in the dictionary, as
     explained above).  This means your type will be impossible to
     pickle.

     This field is not inherited by subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_basicsize
 -- C Member: Py_ssize_t PyTypeObject.tp_itemsize

     These fields allow calculating the size in bytes of instances of
     the type.

     There are two kinds of types: types with fixed-length instances
     have a zero *note tp_itemsize: 29f6. field, types with
     variable-length instances have a non-zero *note tp_itemsize: 29f6.
     field.  For a type with fixed-length instances, all instances have
     the same size, given in *note tp_basicsize: 29db.

     For a type with variable-length instances, the instances must have
     an ‘ob_size’ field, and the instance size is *note tp_basicsize:
     29db. plus N times *note tp_itemsize: 29f6, where N is the "length"
     of the object.  The value of N is typically stored in the
     instance’s ‘ob_size’ field.  There are exceptions: for example,
     long ints use a negative ‘ob_size’ to indicate a negative number,
     and N is ‘abs(ob_size)’ there.  Also, the presence of an ‘ob_size’
     field in the instance layout doesn’t mean that the instance
     structure is variable-length (for example, the structure for the
     list type has fixed-length instances, yet those instances have a
     meaningful ‘ob_size’ field).

     The basic size includes the fields in the instance declared by the
     macro *note PyObject_HEAD: 29f1. or *note PyObject_VAR_HEAD: 2e23.
     (whichever is used to declare the instance struct) and this in turn
     includes the ‘_ob_prev’ and ‘_ob_next’ fields if they are present.
     This means that the only correct way to get an initializer for the
     *note tp_basicsize: 29db. is to use the ‘sizeof’ operator on the
     struct used to declare the instance layout.  The basic size does
     not include the GC header size (this is new in Python 2.2; in 2.1
     and 2.0, the GC header size was included in *note tp_basicsize:
     29db.).

     These fields are inherited separately by subtypes.  If the base
     type has a non-zero *note tp_itemsize: 29f6, it is generally not
     safe to set *note tp_itemsize: 29f6. to a different non-zero value
     in a subtype (though this depends on the implementation of the base
     type).

     A note about alignment: if the variable items require a particular
     alignment, this should be taken care of by the value of *note
     tp_basicsize: 29db.  Example: suppose a type implements an array of
     ‘double’.  *note tp_itemsize: 29f6. is ‘sizeof(double)’.  It is the
     programmer’s responsibility that *note tp_basicsize: 29db. is a
     multiple of ‘sizeof(double)’ (assuming this is the alignment
     requirement for ‘double’).

 -- C Member: destructor PyTypeObject.tp_dealloc

     A pointer to the instance destructor function.  This function must
     be defined unless the type guarantees that its instances will never
     be deallocated (as is the case for the singletons ‘None’ and
     ‘Ellipsis’).

     The destructor function is called by the *note Py_DECREF(): 29a1.
     and *note Py_XDECREF(): 29a0. macros when the new reference count
     is zero.  At this point, the instance is still in existence, but
     there are no references to it.  The destructor function should free
     all references which the instance owns, free all memory buffers
     owned by the instance (using the freeing function corresponding to
     the allocation function used to allocate the buffer), and finally
     (as its last action) call the type’s *note tp_free: 29e2. function.
     If the type is not subtypable (doesn’t have the *note
     Py_TPFLAGS_BASETYPE: 29e8. flag bit set), it is permissible to call
     the object deallocator directly instead of via *note tp_free: 29e2.
     The object deallocator should be the one used to allocate the
     instance; this is normally *note PyObject_Del(): 46d. if the
     instance was allocated using *note PyObject_New(): 46b. or
     ‘PyObject_VarNew()’, or *note PyObject_GC_Del(): 4a7. if the
     instance was allocated using *note PyObject_GC_New(): 4a5. or *note
     PyObject_GC_NewVar(): 4a6.

     This field is inherited by subtypes.

 -- C Member: printfunc PyTypeObject.tp_print

     An optional pointer to the instance print function.

     The print function is only called when the instance is printed to a
     _real_ file; when it is printed to a pseudo-file (like a *note
     StringIO: 2dd. instance), the instance’s *note tp_repr: 29fc. or
     *note tp_str: 29fb. function is called to convert it to a string.
     These are also called when the type’s *note tp_print: 2e30. field
     is _NULL_. A type should never implement *note tp_print: 2e30. in a
     way that produces different output than *note tp_repr: 29fc. or
     *note tp_str: 29fb. would.

     The print function is called with the same signature as *note
     PyObject_Print(): 2b21.: ‘int tp_print(PyObject *self, FILE *file,
     int flags)’.  The _self_ argument is the instance to be printed.
     The _file_ argument is the stdio file to which it is to be printed.
     The _flags_ argument is composed of flag bits.  The only flag bit
     currently defined is ‘Py_PRINT_RAW’.  When the ‘Py_PRINT_RAW’ flag
     bit is set, the instance should be printed the same way as *note
     tp_str: 29fb. would format it; when the ‘Py_PRINT_RAW’ flag bit is
     clear, the instance should be printed the same was as *note
     tp_repr: 29fc. would format it.  It should return ‘-1’ and set an
     exception condition when an error occurred during the comparison.

     It is possible that the *note tp_print: 2e30. field will be
     deprecated.  In any case, it is recommended not to define *note
     tp_print: 2e30, but instead to rely on *note tp_repr: 29fc. and
     *note tp_str: 29fb. for printing.

     This field is inherited by subtypes.

 -- C Member: getattrfunc PyTypeObject.tp_getattr

     An optional pointer to the get-attribute-string function.

     This field is deprecated.  When it is defined, it should point to a
     function that acts the same as the *note tp_getattro: 2a00.
     function, but taking a C string instead of a Python string object
     to give the attribute name.  The signature is the same as for *note
     PyObject_GetAttrString(): 29bf.

     This field is inherited by subtypes together with *note
     tp_getattro: 2a00.: a subtype inherits both *note tp_getattr: 2a03.
     and *note tp_getattro: 2a00. from its base type when the subtype’s
     *note tp_getattr: 2a03. and *note tp_getattro: 2a00. are both
     _NULL_.

 -- C Member: setattrfunc PyTypeObject.tp_setattr

     An optional pointer to the set-attribute-string function.

     This field is deprecated.  When it is defined, it should point to a
     function that acts the same as the *note tp_setattro: 2a01.
     function, but taking a C string instead of a Python string object
     to give the attribute name.  The signature is the same as for *note
     PyObject_SetAttrString(): 2b27.

     This field is inherited by subtypes together with *note
     tp_setattro: 2a01.: a subtype inherits both *note tp_setattr: 2a04.
     and *note tp_setattro: 2a01. from its base type when the subtype’s
     *note tp_setattr: 2a04. and *note tp_setattro: 2a01. are both
     _NULL_.

 -- C Member: cmpfunc PyTypeObject.tp_compare

     An optional pointer to the three-way comparison function.

     The signature is the same as for *note PyObject_Compare(): 2a07.
     The function should return ‘1’ if _self_ greater than _other_, ‘0’
     if _self_ is equal to _other_, and ‘-1’ if _self_ less than
     _other_.  It should return ‘-1’ and set an exception condition when
     an error occurred during the comparison.

     This field is inherited by subtypes together with *note
     tp_richcompare: 2e31. and *note tp_hash: 2e32.: a subtypes inherits
     all three of *note tp_compare: 2a06, *note tp_richcompare: 2e31,
     and *note tp_hash: 2e32. when the subtype’s *note tp_compare: 2a06,
     *note tp_richcompare: 2e31, and *note tp_hash: 2e32. are all
     _NULL_.

 -- C Member: reprfunc PyTypeObject.tp_repr

     An optional pointer to a function that implements the built-in
     function *note repr(): 145.

     The signature is the same as for *note PyObject_Repr(): 2b2d.; it
     must return a string or a Unicode object.  Ideally, this function
     should return a string that, when passed to *note eval(): 360,
     given a suitable environment, returns an object with the same
     value.  If this is not feasible, it should return a string starting
     with ‘'<'’ and ending with ‘'>'’ from which both the type and the
     value of the object can be deduced.

     When this field is not set, a string of the form ‘<%s object at
     %p>’ is returned, where ‘%s’ is replaced by the type name, and ‘%p’
     by the object’s memory address.

     This field is inherited by subtypes.

 -- C Member: PyNumberMethods* tp_as_number

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the number protocol.  These fields
     are documented in *note Number Object Structures: 2e34.

     The ‘tp_as_number’ field is not inherited, but the contained fields
     are inherited individually.

 -- C Member: PySequenceMethods* tp_as_sequence

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the sequence protocol.  These
     fields are documented in *note Sequence Object Structures: 2e36.

     The ‘tp_as_sequence’ field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: PyMappingMethods* tp_as_mapping

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the mapping protocol.  These fields
     are documented in *note Mapping Object Structures: 2e38.

     The ‘tp_as_mapping’ field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: hashfunc PyTypeObject.tp_hash

     An optional pointer to a function that implements the built-in
     function *note hash(): 70b.

     The signature is the same as for *note PyObject_Hash(): 2b38.; it
     must return a C long.  The value ‘-1’ should not be returned as a
     normal return value; when an error occurs during the computation of
     the hash value, the function should set an exception and return
     ‘-1’.

     This field can be set explicitly to *note
     PyObject_HashNotImplemented(): 336. to block inheritance of the
     hash method from a parent type.  This is interpreted as the
     equivalent of ‘__hash__ = None’ at the Python level, causing
     ‘isinstance(o, collections.Hashable)’ to correctly return ‘False’.
     Note that the converse is also true - setting ‘__hash__ = None’ on
     a class at the Python level will result in the ‘tp_hash’ slot being
     set to *note PyObject_HashNotImplemented(): 336.

     When this field is not set, two possibilities exist: if the *note
     tp_compare: 2a06. and *note tp_richcompare: 2e31. fields are both
     _NULL_, a default hash value based on the object’s address is
     returned; otherwise, a *note TypeError: 218. is raised.

     This field is inherited by subtypes together with *note
     tp_richcompare: 2e31. and *note tp_compare: 2a06.: a subtypes
     inherits all three of *note tp_compare: 2a06, *note tp_richcompare:
     2e31, and *note tp_hash: 2e32, when the subtype’s *note tp_compare:
     2a06, *note tp_richcompare: 2e31. and *note tp_hash: 2e32. are all
     _NULL_.

 -- C Member: ternaryfunc PyTypeObject.tp_call

     An optional pointer to a function that implements calling the
     object.  This should be _NULL_ if the object is not callable.  The
     signature is the same as for *note PyObject_Call(): 29b3.

     This field is inherited by subtypes.

 -- C Member: reprfunc PyTypeObject.tp_str

     An optional pointer to a function that implements the built-in
     operation *note str(): 1ea.  (Note that *note str: 1ea. is a type
     now, and *note str(): 1ea. calls the constructor for that type.
     This constructor calls *note PyObject_Str(): 2b2e. to do the actual
     work, and *note PyObject_Str(): 2b2e. will call this handler.)

     The signature is the same as for *note PyObject_Str(): 2b2e.; it
     must return a string or a Unicode object.  This function should
     return a "friendly" string representation of the object, as this is
     the representation that will be used by the print statement.

     When this field is not set, *note PyObject_Repr(): 2b2d. is called
     to return a string representation.

     This field is inherited by subtypes.

 -- C Member: getattrofunc PyTypeObject.tp_getattro

     An optional pointer to the get-attribute function.

     The signature is the same as for *note PyObject_GetAttr(): 2b24.
     It is usually convenient to set this field to *note
     PyObject_GenericGetAttr(): 2b25, which implements the normal way of
     looking for object attributes.

     This field is inherited by subtypes together with *note tp_getattr:
     2a03.: a subtype inherits both *note tp_getattr: 2a03. and *note
     tp_getattro: 2a00. from its base type when the subtype’s *note
     tp_getattr: 2a03. and *note tp_getattro: 2a00. are both _NULL_.

 -- C Member: setattrofunc PyTypeObject.tp_setattro

     An optional pointer to the set-attribute function.

     The signature is the same as for *note PyObject_SetAttr(): 2b26.
     It is usually convenient to set this field to *note
     PyObject_GenericSetAttr(): 2b28, which implements the normal way of
     setting object attributes.

     This field is inherited by subtypes together with *note tp_setattr:
     2a04.: a subtype inherits both *note tp_setattr: 2a04. and *note
     tp_setattro: 2a01. from its base type when the subtype’s *note
     tp_setattr: 2a04. and *note tp_setattro: 2a01. are both _NULL_.

 -- C Member: PyBufferProcs* PyTypeObject.tp_as_buffer

     Pointer to an additional structure that contains fields relevant
     only to objects which implement the buffer interface.  These fields
     are documented in *note Buffer Object Structures: 2cbc.

     The *note tp_as_buffer: 2e39. field is not inherited, but the
     contained fields are inherited individually.

 -- C Member: long PyTypeObject.tp_flags

     This field is a bit mask of various flags.  Some flags indicate
     variant semantics for certain situations; others are used to
     indicate that certain fields in the type object (or in the
     extension structures referenced via ‘tp_as_number’,
     ‘tp_as_sequence’, ‘tp_as_mapping’, and *note tp_as_buffer: 2e39.)
     that were historically not always present are valid; if such a flag
     bit is clear, the type fields it guards must not be accessed and
     must be considered to have a zero or _NULL_ value instead.

     Inheritance of this field is complicated.  Most flag bits are
     inherited individually, i.e.  if the base type has a flag bit set,
     the subtype inherits this flag bit.  The flag bits that pertain to
     extension structures are strictly inherited if the extension
     structure is inherited, i.e.  the base type’s value of the flag bit
     is copied into the subtype together with a pointer to the extension
     structure.  The *note Py_TPFLAGS_HAVE_GC: 29ef. flag bit is
     inherited together with the *note tp_traverse: 242a. and *note
     tp_clear: 2e3b. fields, i.e.  if the *note Py_TPFLAGS_HAVE_GC:
     29ef. flag bit is clear in the subtype and the *note tp_traverse:
     242a. and *note tp_clear: 2e3b. fields in the subtype exist (as
     indicated by the *note Py_TPFLAGS_HAVE_RICHCOMPARE: 2e3c. flag bit)
     and have _NULL_ values.

     The following bit masks are currently defined; these can be ORed
     together using the ‘|’ operator to form the value of the *note
     tp_flags: 2e3a. field.  The macro *note PyType_HasFeature(): 2baf.
     takes a type and a flags value, _tp_ and _f_, and checks whether
     ‘tp->tp_flags & f’ is non-zero.

      -- Data: Py_TPFLAGS_HAVE_GETCHARBUFFER

          If this bit is set, the *note PyBufferProcs: 2cbd. struct
          referenced by *note tp_as_buffer: 2e39. has the
          ‘bf_getcharbuffer’ field.

      -- Data: Py_TPFLAGS_HAVE_SEQUENCE_IN

          If this bit is set, the *note PySequenceMethods: 2a0b. struct
          referenced by ‘tp_as_sequence’ has the ‘sq_contains’ field.

      -- Data: Py_TPFLAGS_GC

          This bit is obsolete.  The bit it used to name is no longer in
          use.  The symbol is now defined as zero.

      -- Data: Py_TPFLAGS_HAVE_INPLACEOPS

          If this bit is set, the *note PySequenceMethods: 2a0b. struct
          referenced by ‘tp_as_sequence’ and the *note PyNumberMethods:
          3ab. structure referenced by ‘tp_as_number’ contain the fields
          for in-place operators.  In particular, this means that the
          *note PyNumberMethods: 3ab. structure has the fields
          ‘nb_inplace_add’, ‘nb_inplace_subtract’,
          ‘nb_inplace_multiply’, ‘nb_inplace_divide’,
          ‘nb_inplace_remainder’, ‘nb_inplace_power’,
          ‘nb_inplace_lshift’, ‘nb_inplace_rshift’, ‘nb_inplace_and’,
          ‘nb_inplace_xor’, and ‘nb_inplace_or’; and the *note
          PySequenceMethods: 2a0b. struct has the fields
          ‘sq_inplace_concat’ and ‘sq_inplace_repeat’.

      -- Data: Py_TPFLAGS_CHECKTYPES

          If this bit is set, the binary and ternary operations in the
          *note PyNumberMethods: 3ab. structure referenced by
          ‘tp_as_number’ accept arguments of arbitrary object types, and
          do their own type conversions if needed.  If this bit is
          clear, those operations require that all arguments have the
          current type as their type, and the caller is supposed to
          perform a coercion operation first.  This applies to ‘nb_add’,
          ‘nb_subtract’, ‘nb_multiply’, ‘nb_divide’, ‘nb_remainder’,
          ‘nb_divmod’, ‘nb_power’, ‘nb_lshift’, ‘nb_rshift’, ‘nb_and’,
          ‘nb_xor’, and ‘nb_or’.

      -- Data: Py_TPFLAGS_HAVE_RICHCOMPARE

          If this bit is set, the type object has the *note
          tp_richcompare: 2e31. field, as well as the *note tp_traverse:
          242a. and the *note tp_clear: 2e3b. fields.

      -- Data: Py_TPFLAGS_HAVE_WEAKREFS

          If this bit is set, the *note tp_weaklistoffset: 2a0f. field
          is defined.  Instances of a type are weakly referenceable if
          the type’s *note tp_weaklistoffset: 2a0f. field has a value
          greater than zero.

      -- Data: Py_TPFLAGS_HAVE_ITER

          If this bit is set, the type object has the *note tp_iter:
          48c. and *note tp_iternext: 48d. fields.

      -- Data: Py_TPFLAGS_HAVE_CLASS

          If this bit is set, the type object has several new fields
          defined starting in Python 2.2: *note tp_methods: 29e7, *note
          tp_members: 29e5, *note tp_getset: 29eb, *note tp_base: 29f3,
          *note tp_dict: 2e45, *note tp_descr_get: 2e46, *note
          tp_descr_set: 2e47, *note tp_dictoffset: 2e48, *note tp_init:
          29e4, *note tp_alloc: 29e3, *note tp_new: 29de, *note tp_free:
          29e2, *note tp_is_gc: 2e49, *note tp_bases: 2e4a, *note
          tp_mro: 2e4b, *note tp_cache: 2e4c, *note tp_subclasses: 2e4d,
          and *note tp_weaklist: 2e4e.

      -- Data: Py_TPFLAGS_HEAPTYPE

          This bit is set when the type object itself is allocated on
          the heap.  In this case, the ‘ob_type’ field of its instances
          is considered a reference to the type, and the type object is
          INCREF’ed when a new instance is created, and DECREF’ed when
          an instance is destroyed (this does not apply to instances of
          subtypes; only the type referenced by the instance’s ob_type
          gets INCREF’ed or DECREF’ed).

      -- Data: Py_TPFLAGS_BASETYPE

          This bit is set when the type can be used as the base type of
          another type.  If this bit is clear, the type cannot be
          subtyped (similar to a "final" class in Java).

      -- Data: Py_TPFLAGS_READY

          This bit is set when the type object has been fully
          initialized by *note PyType_Ready(): 29da.

      -- Data: Py_TPFLAGS_READYING

          This bit is set while *note PyType_Ready(): 29da. is in the
          process of initializing the type object.

      -- Data: Py_TPFLAGS_HAVE_GC

          This bit is set when the object supports garbage collection.
          If this bit is set, instances must be created using *note
          PyObject_GC_New(): 4a5. and destroyed using *note
          PyObject_GC_Del(): 4a7.  More information in section *note
          Supporting Cyclic Garbage Collection: 2e52.  This bit also
          implies that the GC-related fields *note tp_traverse: 242a.
          and *note tp_clear: 2e3b. are present in the type object; but
          those fields also exist when *note Py_TPFLAGS_HAVE_GC: 29ef.
          is clear but *note Py_TPFLAGS_HAVE_RICHCOMPARE: 2e3c. is set.

      -- Data: Py_TPFLAGS_DEFAULT

          This is a bitmask of all the bits that pertain to the
          existence of certain fields in the type object and its
          extension structures.  Currently, it includes the following
          bits: *note Py_TPFLAGS_HAVE_GETCHARBUFFER: 2e3d, *note
          Py_TPFLAGS_HAVE_SEQUENCE_IN: 2e3e, *note
          Py_TPFLAGS_HAVE_INPLACEOPS: 2e40, *note
          Py_TPFLAGS_HAVE_RICHCOMPARE: 2e3c, *note
          Py_TPFLAGS_HAVE_WEAKREFS: 2e42, *note Py_TPFLAGS_HAVE_ITER:
          2e43, and *note Py_TPFLAGS_HAVE_CLASS: 2e44.

 -- C Member: char* PyTypeObject.tp_doc

     An optional pointer to a NUL-terminated C string giving the
     docstring for this type object.  This is exposed as the ‘__doc__’
     attribute on the type and instances of the type.

     This field is _not_ inherited by subtypes.

  The following three fields only exist if the *note
Py_TPFLAGS_HAVE_RICHCOMPARE: 2e3c. flag bit is set.

 -- C Member: traverseproc PyTypeObject.tp_traverse

     An optional pointer to a traversal function for the garbage
     collector.  This is only used if the *note Py_TPFLAGS_HAVE_GC:
     29ef. flag bit is set.  More information about Python’s garbage
     collection scheme can be found in section *note Supporting Cyclic
     Garbage Collection: 2e52.

     The *note tp_traverse: 242a. pointer is used by the garbage
     collector to detect reference cycles.  A typical implementation of
     a *note tp_traverse: 242a. function simply calls *note Py_VISIT():
     29ed. on each of the instance’s members that are Python objects.
     For example, this is function ‘local_traverse()’ from the *note
     thread: 178. extension module:

          static int
          local_traverse(localobject *self, visitproc visit, void *arg)
          {
              Py_VISIT(self->args);
              Py_VISIT(self->kw);
              Py_VISIT(self->dict);
              return 0;
          }

     Note that *note Py_VISIT(): 29ed. is called only on those members
     that can participate in reference cycles.  Although there is also a
     ‘self->key’ member, it can only be _NULL_ or a Python string and
     therefore cannot be part of a reference cycle.

     On the other hand, even if you know a member can never be part of a
     cycle, as a debugging aid you may want to visit it anyway just so
     the *note gc: db. module’s *note get_referents(): 2429. function
     will include it.

     Note that *note Py_VISIT(): 29ed. requires the _visit_ and _arg_
     parameters to ‘local_traverse()’ to have these specific names;
     don’t name them just anything.

     This field is inherited by subtypes together with *note tp_clear:
     2e3b. and the *note Py_TPFLAGS_HAVE_GC: 29ef. flag bit: the flag
     bit, *note tp_traverse: 242a, and *note tp_clear: 2e3b. are all
     inherited from the base type if they are all zero in the subtype
     _and_ the subtype has the *note Py_TPFLAGS_HAVE_RICHCOMPARE: 2e3c.
     flag bit set.

 -- C Member: inquiry PyTypeObject.tp_clear

     An optional pointer to a clear function for the garbage collector.
     This is only used if the *note Py_TPFLAGS_HAVE_GC: 29ef. flag bit
     is set.

     The *note tp_clear: 2e3b. member function is used to break
     reference cycles in cyclic garbage detected by the garbage
     collector.  Taken together, all *note tp_clear: 2e3b. functions in
     the system must combine to break all reference cycles.  This is
     subtle, and if in any doubt supply a *note tp_clear: 2e3b.
     function.  For example, the tuple type does not implement a *note
     tp_clear: 2e3b. function, because it’s possible to prove that no
     reference cycle can be composed entirely of tuples.  Therefore the
     *note tp_clear: 2e3b. functions of other types must be sufficient
     to break any cycle containing a tuple.  This isn’t immediately
     obvious, and there’s rarely a good reason to avoid implementing
     *note tp_clear: 2e3b.

     Implementations of *note tp_clear: 2e3b. should drop the instance’s
     references to those of its members that may be Python objects, and
     set its pointers to those members to _NULL_, as in the following
     example:

          static int
          local_clear(localobject *self)
          {
              Py_CLEAR(self->key);
              Py_CLEAR(self->args);
              Py_CLEAR(self->kw);
              Py_CLEAR(self->dict);
              return 0;
          }

     The *note Py_CLEAR(): 29ee. macro should be used, because clearing
     references is delicate: the reference to the contained object must
     not be decremented until after the pointer to the contained object
     is set to _NULL_. This is because decrementing the reference count
     may cause the contained object to become trash, triggering a chain
     of reclamation activity that may include invoking arbitrary Python
     code (due to finalizers, or weakref callbacks, associated with the
     contained object).  If it’s possible for such code to reference
     _self_ again, it’s important that the pointer to the contained
     object be _NULL_ at that time, so that _self_ knows the contained
     object can no longer be used.  The *note Py_CLEAR(): 29ee. macro
     performs the operations in a safe order.

     Because the goal of *note tp_clear: 2e3b. functions is to break
     reference cycles, it’s not necessary to clear contained objects
     like Python strings or Python integers, which can’t participate in
     reference cycles.  On the other hand, it may be convenient to clear
     all contained Python objects, and write the type’s *note
     tp_dealloc: 29e1. function to invoke *note tp_clear: 2e3b.

     More information about Python’s garbage collection scheme can be
     found in section *note Supporting Cyclic Garbage Collection: 2e52.

     This field is inherited by subtypes together with *note
     tp_traverse: 242a. and the *note Py_TPFLAGS_HAVE_GC: 29ef. flag
     bit: the flag bit, *note tp_traverse: 242a, and *note tp_clear:
     2e3b. are all inherited from the base type if they are all zero in
     the subtype _and_ the subtype has the *note
     Py_TPFLAGS_HAVE_RICHCOMPARE: 2e3c. flag bit set.

 -- C Member: richcmpfunc PyTypeObject.tp_richcompare

     An optional pointer to the rich comparison function, whose
     signature is ‘PyObject *tp_richcompare(PyObject *a, PyObject *b,
     int op)’.

     The function should return the result of the comparison (usually
     ‘Py_True’ or ‘Py_False’).  If the comparison is undefined, it must
     return ‘Py_NotImplemented’, if another error occurred it must
     return ‘NULL’ and set an exception condition.

          Note: If you want to implement a type for which only a limited
          set of comparisons makes sense (e.g.  ‘==’ and ‘!=’, but not
          ‘<’ and friends), directly raise *note TypeError: 218. in the
          rich comparison function.

     This field is inherited by subtypes together with *note tp_compare:
     2a06. and *note tp_hash: 2e32.: a subtype inherits all three of
     *note tp_compare: 2a06, *note tp_richcompare: 2e31, and *note
     tp_hash: 2e32, when the subtype’s *note tp_compare: 2a06, *note
     tp_richcompare: 2e31, and *note tp_hash: 2e32. are all _NULL_.

     The following constants are defined to be used as the third
     argument for *note tp_richcompare: 2e31. and for *note
     PyObject_RichCompare(): 2b2b.:

     Constant             Comparison
                          
     --------------------------------------
                          
     ‘Py_LT’              ‘<’
                          
                          
     ‘Py_LE’              ‘<=’
                          
                          
     ‘Py_EQ’              ‘==’
                          
                          
     ‘Py_NE’              ‘!=’
                          
                          
     ‘Py_GT’              ‘>’
                          
                          
     ‘Py_GE’              ‘>=’
                          

  The next field only exists if the *note Py_TPFLAGS_HAVE_WEAKREFS:
2e42. flag bit is set.

 -- C Member: long PyTypeObject.tp_weaklistoffset

     If the instances of this type are weakly referenceable, this field
     is greater than zero and contains the offset in the instance
     structure of the weak reference list head (ignoring the GC header,
     if present); this offset is used by ‘PyObject_ClearWeakRefs()’ and
     the ‘PyWeakref_*()’ functions.  The instance structure needs to
     include a field of type *note PyObject*: 3a6. which is initialized
     to _NULL_.

     Do not confuse this field with *note tp_weaklist: 2e4e.; that is
     the list head for weak references to the type object itself.

     This field is inherited by subtypes, but see the rules listed
     below.  A subtype may override this offset; this means that the
     subtype uses a different weak reference list head than the base
     type.  Since the list head is always found via *note
     tp_weaklistoffset: 2a0f, this should not be a problem.

     When a type defined by a class statement has no ‘__slots__’
     declaration, and none of its base types are weakly referenceable,
     the type is made weakly referenceable by adding a weak reference
     list head slot to the instance layout and setting the *note
     tp_weaklistoffset: 2a0f. of that slot’s offset.

     When a type’s *note __slots__: 489. declaration contains a slot
     named ‘__weakref__’, that slot becomes the weak reference list head
     for instances of the type, and the slot’s offset is stored in the
     type’s *note tp_weaklistoffset: 2a0f.

     When a type’s *note __slots__: 489. declaration does not contain a
     slot named ‘__weakref__’, the type inherits its *note
     tp_weaklistoffset: 2a0f. from its base type.

  The next two fields only exist if the *note Py_TPFLAGS_HAVE_ITER:
2e43. flag bit is set.

 -- C Member: getiterfunc PyTypeObject.tp_iter

     An optional pointer to a function that returns an iterator for the
     object.  Its presence normally signals that the instances of this
     type are iterable (although sequences may be iterable without this
     function, and classic instances always have this function, even if
     they don’t define an *note __iter__(): 321. method).

     This function has the same signature as *note PyObject_GetIter():
     2b41.

     This field is inherited by subtypes.

 -- C Member: iternextfunc PyTypeObject.tp_iternext

     An optional pointer to a function that returns the next item in an
     iterator.  When the iterator is exhausted, it must return _NULL_; a
     *note StopIteration: 333. exception may or may not be set.  When
     another error occurs, it must return _NULL_ too.  Its presence
     normally signals that the instances of this type are iterators
     (although classic instances always have this function, even if they
     don’t define a *note next(): 399. method).

     Iterator types should also define the *note tp_iter: 48c. function,
     and that function should return the iterator instance itself (not a
     new iterator instance).

     This function has the same signature as *note PyIter_Next(): 2b99.

     This field is inherited by subtypes.

  The next fields, up to and including *note tp_weaklist: 2e4e, only
exist if the *note Py_TPFLAGS_HAVE_CLASS: 2e44. flag bit is set.

 -- C Member: struct PyMethodDef* PyTypeObject.tp_methods

     An optional pointer to a static _NULL_-terminated array of *note
     PyMethodDef: 472. structures, declaring regular methods of this
     type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *note tp_dict: 2e45. below) containing a method
     descriptor.

     This field is not inherited by subtypes (methods are inherited
     through a different mechanism).

 -- C Member: struct PyMemberDef* PyTypeObject.tp_members

     An optional pointer to a static _NULL_-terminated array of *note
     PyMemberDef: 2c4. structures, declaring regular data members
     (fields or slots) of instances of this type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *note tp_dict: 2e45. below) containing a member
     descriptor.

     This field is not inherited by subtypes (members are inherited
     through a different mechanism).

 -- C Member: struct PyGetSetDef* PyTypeObject.tp_getset

     An optional pointer to a static _NULL_-terminated array of
     ‘PyGetSetDef’ structures, declaring computed attributes of
     instances of this type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *note tp_dict: 2e45. below) containing a getset
     descriptor.

     This field is not inherited by subtypes (computed attributes are
     inherited through a different mechanism).

     Docs for PyGetSetDef:

          typedef PyObject *(*getter)(PyObject *, void *);
          typedef int (*setter)(PyObject *, PyObject *, void *);

          typedef struct PyGetSetDef {
              char *name;    /* attribute name */
              getter get;    /* C function to get the attribute */
              setter set;    /* C function to set the attribute */
              char *doc;     /* optional doc string */
              void *closure; /* optional additional data for getter and setter */
          } PyGetSetDef;

 -- C Member: PyTypeObject* PyTypeObject.tp_base

     An optional pointer to a base type from which type properties are
     inherited.  At this level, only single inheritance is supported;
     multiple inheritance require dynamically creating a type object by
     calling the metatype.

     This field is not inherited by subtypes (obviously), but it
     defaults to ‘&PyBaseObject_Type’ (which to Python programmers is
     known as the type *note object: 1f1.).

 -- C Member: PyObject* PyTypeObject.tp_dict

     The type’s dictionary is stored here by *note PyType_Ready(): 29da.

     This field should normally be initialized to _NULL_ before
     PyType_Ready is called; it may also be initialized to a dictionary
     containing initial attributes for the type.  Once *note
     PyType_Ready(): 29da. has initialized the type, extra attributes
     for the type may be added to this dictionary only if they don’t
     correspond to overloaded operations (like *note __add__(): 725.).

     This field is not inherited by subtypes (though the attributes
     defined in here are inherited through a different mechanism).

 -- C Member: descrgetfunc PyTypeObject.tp_descr_get

     An optional pointer to a "descriptor get" function.

     The function signature is

          PyObject * tp_descr_get(PyObject *self, PyObject *obj, PyObject *type);

     This field is inherited by subtypes.

 -- C Member: descrsetfunc PyTypeObject.tp_descr_set

     An optional pointer to a "descriptor set" function.

     The function signature is

          int tp_descr_set(PyObject *self, PyObject *obj, PyObject *value);

     This field is inherited by subtypes.

 -- C Member: long PyTypeObject.tp_dictoffset

     If the instances of this type have a dictionary containing instance
     variables, this field is non-zero and contains the offset in the
     instances of the type of the instance variable dictionary; this
     offset is used by *note PyObject_GenericGetAttr(): 2b25.

     Do not confuse this field with *note tp_dict: 2e45.; that is the
     dictionary for attributes of the type object itself.

     If the value of this field is greater than zero, it specifies the
     offset from the start of the instance structure.  If the value is
     less than zero, it specifies the offset from the _end_ of the
     instance structure.  A negative offset is more expensive to use,
     and should only be used when the instance structure contains a
     variable-length part.  This is used for example to add an instance
     variable dictionary to subtypes of *note str: 1ea. or *note tuple:
     408.  Note that the *note tp_basicsize: 29db. field should account
     for the dictionary added to the end in that case, even though the
     dictionary is not included in the basic object layout.  On a system
     with a pointer size of 4 bytes, *note tp_dictoffset: 2e48. should
     be set to ‘-4’ to indicate that the dictionary is at the very end
     of the structure.

     The real dictionary offset in an instance can be computed from a
     negative *note tp_dictoffset: 2e48. as follows:

          dictoffset = tp_basicsize + abs(ob_size)*tp_itemsize + tp_dictoffset
          if dictoffset is not aligned on sizeof(void*):
              round up to sizeof(void*)

     where *note tp_basicsize: 29db, *note tp_itemsize: 29f6. and *note
     tp_dictoffset: 2e48. are taken from the type object, and ‘ob_size’
     is taken from the instance.  The absolute value is taken because
     long ints use the sign of ‘ob_size’ to store the sign of the
     number.  (There’s never a need to do this calculation yourself; it
     is done for you by ‘_PyObject_GetDictPtr()’.)

     This field is inherited by subtypes, but see the rules listed
     below.  A subtype may override this offset; this means that the
     subtype instances store the dictionary at a difference offset than
     the base type.  Since the dictionary is always found via *note
     tp_dictoffset: 2e48, this should not be a problem.

     When a type defined by a class statement has no ‘__slots__’
     declaration, and none of its base types has an instance variable
     dictionary, a dictionary slot is added to the instance layout and
     the *note tp_dictoffset: 2e48. is set to that slot’s offset.

     When a type defined by a class statement has a *note __slots__:
     489. declaration, the type inherits its *note tp_dictoffset: 2e48.
     from its base type.

     (Adding a slot named *note __dict__: 6fe. to the *note __slots__:
     489. declaration does not have the expected effect, it just causes
     confusion.  Maybe this should be added as a feature just like
     ‘__weakref__’ though.)

 -- C Member: initproc PyTypeObject.tp_init

     An optional pointer to an instance initialization function.

     This function corresponds to the *note __init__(): 37c. method of
     classes.  Like *note __init__(): 37c, it is possible to create an
     instance without calling *note __init__(): 37c, and it is possible
     to reinitialize an instance by calling its *note __init__(): 37c.
     method again.

     The function signature is

          int tp_init(PyObject *self, PyObject *args, PyObject *kwds)

     The self argument is the instance to be initialized; the _args_ and
     _kwds_ arguments represent positional and keyword arguments of the
     call to *note __init__(): 37c.

     The *note tp_init: 29e4. function, if not _NULL_, is called when an
     instance is created normally by calling its type, after the type’s
     *note tp_new: 29de. function has returned an instance of the type.
     If the *note tp_new: 29de. function returns an instance of some
     other type that is not a subtype of the original type, no *note
     tp_init: 29e4. function is called; if *note tp_new: 29de. returns
     an instance of a subtype of the original type, the subtype’s *note
     tp_init: 29e4. is called.  (VERSION NOTE: described here is what is
     implemented in Python 2.2.1 and later.  In Python 2.2, the *note
     tp_init: 29e4. of the type of the object returned by *note tp_new:
     29de. was always called, if not _NULL_.)

     This field is inherited by subtypes.

 -- C Member: allocfunc PyTypeObject.tp_alloc

     An optional pointer to an instance allocation function.

     The function signature is

          PyObject *tp_alloc(PyTypeObject *self, Py_ssize_t nitems)

     The purpose of this function is to separate memory allocation from
     memory initialization.  It should return a pointer to a block of
     memory of adequate length for the instance, suitably aligned, and
     initialized to zeros, but with ‘ob_refcnt’ set to ‘1’ and ‘ob_type’
     set to the type argument.  If the type’s *note tp_itemsize: 29f6.
     is non-zero, the object’s ‘ob_size’ field should be initialized to
     _nitems_ and the length of the allocated memory block should be
     ‘tp_basicsize + nitems*tp_itemsize’, rounded up to a multiple of
     ‘sizeof(void*)’; otherwise, _nitems_ is not used and the length of
     the block should be *note tp_basicsize: 29db.

     Do not use this function to do any other instance initialization,
     not even to allocate additional memory; that should be done by
     *note tp_new: 29de.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is always set to *note PyType_GenericAlloc(): 2bb2, to
     force a standard heap allocation strategy.  That is also the
     recommended value for statically defined types.

 -- C Member: newfunc PyTypeObject.tp_new

     An optional pointer to an instance creation function.

     If this function is _NULL_ for a particular type, that type cannot
     be called to create new instances; presumably there is some other
     way to create instances, like a factory function.

     The function signature is

          PyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)

     The subtype argument is the type of the object being created; the
     _args_ and _kwds_ arguments represent positional and keyword
     arguments of the call to the type.  Note that subtype doesn’t have
     to equal the type whose *note tp_new: 29de. function is called; it
     may be a subtype of that type (but not an unrelated type).

     The *note tp_new: 29de. function should call
     ‘subtype->tp_alloc(subtype, nitems)’ to allocate space for the
     object, and then do only as much further initialization as is
     absolutely necessary.  Initialization that can safely be ignored or
     repeated should be placed in the *note tp_init: 29e4. handler.  A
     good rule of thumb is that for immutable types, all initialization
     should take place in *note tp_new: 29de, while for mutable types,
     most initialization should be deferred to *note tp_init: 29e4.

     This field is inherited by subtypes, except it is not inherited by
     static types whose *note tp_base: 29f3. is _NULL_ or
     ‘&PyBaseObject_Type’.  The latter exception is a precaution so that
     old extension types don’t become callable simply by being linked
     with Python 2.2.

 -- C Member: destructor PyTypeObject.tp_free

     An optional pointer to an instance deallocation function.

     The signature of this function has changed slightly: in Python 2.2
     and 2.2.1, its signature is ‘destructor’:

          void tp_free(PyObject *)

     In Python 2.3 and beyond, its signature is ‘freefunc’:

          void tp_free(void *)

     The only initializer that is compatible with both versions is
     ‘_PyObject_Del’, whose definition has suitably adapted in Python
     2.3.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is set to a deallocator suitable to match *note
     PyType_GenericAlloc(): 2bb2. and the value of the *note
     Py_TPFLAGS_HAVE_GC: 29ef. flag bit.

 -- C Member: inquiry PyTypeObject.tp_is_gc

     An optional pointer to a function called by the garbage collector.

     The garbage collector needs to know whether a particular object is
     collectible or not.  Normally, it is sufficient to look at the
     object’s type’s *note tp_flags: 2e3a. field, and check the *note
     Py_TPFLAGS_HAVE_GC: 29ef. flag bit.  But some types have a mixture
     of statically and dynamically allocated instances, and the
     statically allocated instances are not collectible.  Such types
     should define this function; it should return ‘1’ for a collectible
     instance, and ‘0’ for a non-collectible instance.  The signature is

          int tp_is_gc(PyObject *self)

     (The only example of this are types themselves.  The metatype,
     *note PyType_Type: 2baa, defines this function to distinguish
     between statically and dynamically allocated types.)

     This field is inherited by subtypes.  (VERSION NOTE: in Python 2.2,
     it was not inherited.  It is inherited in 2.2.1 and later
     versions.)

 -- C Member: PyObject* PyTypeObject.tp_bases

     Tuple of base types.

     This is set for types created by a class statement.  It should be
     _NULL_ for statically defined types.

     This field is not inherited.

 -- C Member: PyObject* PyTypeObject.tp_mro

     Tuple containing the expanded set of base types, starting with the
     type itself and ending with *note object: 1f1, in Method Resolution
     Order.

     This field is not inherited; it is calculated fresh by *note
     PyType_Ready(): 29da.

 -- C Member: PyObject* PyTypeObject.tp_cache

     Unused.  Not inherited.  Internal use only.

 -- C Member: PyObject* PyTypeObject.tp_subclasses

     List of weak references to subclasses.  Not inherited.  Internal
     use only.

 -- C Member: PyObject* PyTypeObject.tp_weaklist

     Weak reference list head, for weak references to this type object.
     Not inherited.  Internal use only.

  The remaining fields are only defined if the feature test macro
‘COUNT_ALLOCS’ is defined, and are for internal use only.  They are
documented here for completeness.  None of these fields are inherited by
subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_allocs

     Number of allocations.

 -- C Member: Py_ssize_t PyTypeObject.tp_frees

     Number of frees.

 -- C Member: Py_ssize_t PyTypeObject.tp_maxalloc

     Maximum simultaneously allocated objects.

 -- C Member: PyTypeObject* PyTypeObject.tp_next

     Pointer to the next type object with a non-zero *note tp_allocs:
     2e53. field.

  Also, note that, in a garbage collected Python, tp_dealloc may be
called from any Python thread, not just the thread which created the
object (if the object becomes part of a refcount cycle, that cycle might
be collected by a garbage collection on any thread).  This is not a
problem for Python API calls, since the thread on which tp_dealloc is
called will own the Global Interpreter Lock (GIL). However, if the
object being destroyed in turn destroys objects from some other C or C++
library, care should be taken to ensure that destroying those objects on
the thread which called tp_dealloc will not violate any assumptions of
the library.


File: python.info,  Node: Number Object Structures,  Next: Mapping Object Structures,  Prev: Type Objects<3>,  Up: Object Implementation Support

7.10.4 Number Object Structures
-------------------------------

 -- C Type: PyNumberMethods

     This structure holds pointers to the functions which an object uses
     to implement the number protocol.  Almost every function below is
     used by the function of similar name documented in the *note Number
     Protocol: 2b43. section.

     Here is the structure definition:

          typedef struct {
               binaryfunc nb_add;
               binaryfunc nb_subtract;
               binaryfunc nb_multiply;
               binaryfunc nb_divide;
               binaryfunc nb_remainder;
               binaryfunc nb_divmod;
               ternaryfunc nb_power;
               unaryfunc nb_negative;
               unaryfunc nb_positive;
               unaryfunc nb_absolute;
               inquiry nb_nonzero;       /* Used by PyObject_IsTrue */
               unaryfunc nb_invert;
               binaryfunc nb_lshift;
               binaryfunc nb_rshift;
               binaryfunc nb_and;
               binaryfunc nb_xor;
               binaryfunc nb_or;
               coercion nb_coerce;       /* Used by the coerce() function */
               unaryfunc nb_int;
               unaryfunc nb_long;
               unaryfunc nb_float;
               unaryfunc nb_oct;
               unaryfunc nb_hex;

               /* Added in release 2.0 */
               binaryfunc nb_inplace_add;
               binaryfunc nb_inplace_subtract;
               binaryfunc nb_inplace_multiply;
               binaryfunc nb_inplace_divide;
               binaryfunc nb_inplace_remainder;
               ternaryfunc nb_inplace_power;
               binaryfunc nb_inplace_lshift;
               binaryfunc nb_inplace_rshift;
               binaryfunc nb_inplace_and;
               binaryfunc nb_inplace_xor;
               binaryfunc nb_inplace_or;

               /* Added in release 2.2 */
               binaryfunc nb_floor_divide;
               binaryfunc nb_true_divide;
               binaryfunc nb_inplace_floor_divide;
               binaryfunc nb_inplace_true_divide;

               /* Added in release 2.5 */
               unaryfunc nb_index;
          } PyNumberMethods;

  Binary and ternary functions may receive different kinds of arguments,
depending on the flag bit *note Py_TPFLAGS_CHECKTYPES: 2e41.:

   - If *note Py_TPFLAGS_CHECKTYPES: 2e41. is not set, the function
     arguments are guaranteed to be of the object’s type; the caller is
     responsible for calling the coercion method specified by the
     ‘nb_coerce’ member to convert the arguments:

      -- C Member: coercion PyNumberMethods.nb_coerce

          This function is used by *note PyNumber_CoerceEx(): 2b66. and
          has the same signature.  The first argument is always a
          pointer to an object of the defined type.  If the conversion
          to a common "larger" type is possible, the function replaces
          the pointers with new references to the converted objects and
          returns ‘0’.  If the conversion is not possible, the function
          returns ‘1’.  If an error condition is set, it will return
          ‘-1’.

   - If the *note Py_TPFLAGS_CHECKTYPES: 2e41. flag is set, binary and
     ternary functions must check the type of all their operands, and
     implement the necessary conversions (at least one of the operands
     is an instance of the defined type).  This is the recommended way;
     with Python 3 coercion will disappear completely.

  If the operation is not defined for the given operands, binary and
ternary functions must return ‘Py_NotImplemented’, if another error
occurred they must return ‘NULL’ and set an exception.


File: python.info,  Node: Mapping Object Structures,  Next: Sequence Object Structures,  Prev: Number Object Structures,  Up: Object Implementation Support

7.10.5 Mapping Object Structures
--------------------------------

 -- C Type: PyMappingMethods

     This structure holds pointers to the functions which an object uses
     to implement the mapping protocol.  It has three members:

 -- C Member: lenfunc PyMappingMethods.mp_length

     This function is used by *note PyMapping_Length(): 2b8b. and *note
     PyObject_Size(): 2b3d, and has the same signature.  This slot may
     be set to _NULL_ if the object has no defined length.

 -- C Member: binaryfunc PyMappingMethods.mp_subscript

     This function is used by *note PyObject_GetItem(): 2a42. and has
     the same signature.  This slot must be filled for the *note
     PyMapping_Check(): 2b89. function to return ‘1’, it can be _NULL_
     otherwise.

 -- C Member: objobjargproc PyMappingMethods.mp_ass_subscript

     This function is used by *note PyObject_SetItem(): 2a40. and has
     the same signature.  If this slot is _NULL_, the object does not
     support item assignment.


File: python.info,  Node: Sequence Object Structures,  Next: Buffer Object Structures,  Prev: Mapping Object Structures,  Up: Object Implementation Support

7.10.6 Sequence Object Structures
---------------------------------

 -- C Type: PySequenceMethods

     This structure holds pointers to the functions which an object uses
     to implement the sequence protocol.

 -- C Member: lenfunc PySequenceMethods.sq_length

     This function is used by *note PySequence_Size(): 2b72. and *note
     PyObject_Size(): 2b3d, and has the same signature.

 -- C Member: binaryfunc PySequenceMethods.sq_concat

     This function is used by *note PySequence_Concat(): 2b74. and has
     the same signature.  It is also used by the ‘+’ operator, after
     trying the numeric addition via the ‘nb_add’ slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_repeat

     This function is used by *note PySequence_Repeat(): 2b75. and has
     the same signature.  It is also used by the ‘*’ operator, after
     trying numeric multiplication via the ‘nb_multiply’ slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_item

     This function is used by *note PySequence_GetItem(): 2a43. and has
     the same signature.  This slot must be filled for the *note
     PySequence_Check(): 2b71. function to return ‘1’, it can be _NULL_
     otherwise.

     Negative indexes are handled as follows: if the ‘sq_length’ slot is
     filled, it is called and the sequence length is used to compute a
     positive index which is passed to ‘sq_item’.  If ‘sq_length’ is
     _NULL_, the index is passed as is to the function.

 -- C Member: ssizeobjargproc PySequenceMethods.sq_ass_item

     This function is used by *note PySequence_SetItem(): 2a3f. and has
     the same signature.  This slot may be left to _NULL_ if the object
     does not support item assignment.

 -- C Member: objobjproc PySequenceMethods.sq_contains

     This function may be used by *note PySequence_Contains(): 2b7d. and
     has the same signature.  This slot may be left to _NULL_, in this
     case *note PySequence_Contains(): 2b7d. simply traverses the
     sequence until it finds a match.

 -- C Member: binaryfunc PySequenceMethods.sq_inplace_concat

     This function is used by *note PySequence_InPlaceConcat(): 2b76.
     and has the same signature.  It should modify its first operand,
     and return it.

 -- C Member: ssizeargfunc PySequenceMethods.sq_inplace_repeat

     This function is used by *note PySequence_InPlaceRepeat(): 2b77.
     and has the same signature.  It should modify its first operand,
     and return it.


File: python.info,  Node: Buffer Object Structures,  Next: Supporting Cyclic Garbage Collection,  Prev: Sequence Object Structures,  Up: Object Implementation Support

7.10.7 Buffer Object Structures
-------------------------------

The buffer interface exports a model where an object can expose its
internal data as a set of chunks of data, where each chunk is specified
as a pointer/length pair.  These chunks are called _segments_ and are
presumed to be non-contiguous in memory.

  If an object does not export the buffer interface, then its *note
tp_as_buffer: 2e39. member in the *note PyTypeObject: 29d9. structure
should be _NULL_. Otherwise, the *note tp_as_buffer: 2e39. will point to
a *note PyBufferProcs: 2cbd. structure.

     Note: It is very important that your *note PyTypeObject: 29d9.
     structure uses *note Py_TPFLAGS_DEFAULT: 29dc. for the value of the
     *note tp_flags: 2e3a. member rather than ‘0’.  This tells the
     Python runtime that your *note PyBufferProcs: 2cbd. structure
     contains the ‘bf_getcharbuffer’ slot.  Older versions of Python did
     not have this member, so a new Python interpreter using an old
     extension needs to be able to test for its presence before using
     it.

 -- C Type: PyBufferProcs

     Structure used to hold the function pointers which define an
     implementation of the buffer protocol.

     The first slot is ‘bf_getreadbuffer’, of type ‘getreadbufferproc’.
     If this slot is _NULL_, then the object does not support reading
     from the internal data.  This is non-sensical, so implementors
     should fill this in, but callers should test that the slot contains
     a non-_NULL_ value.

     The next slot is ‘bf_getwritebuffer’ having type
     ‘getwritebufferproc’.  This slot may be _NULL_ if the object does
     not allow writing into its returned buffers.

     The third slot is ‘bf_getsegcount’, with type ‘getsegcountproc’.
     This slot must not be _NULL_ and is used to inform the caller how
     many segments the object contains.  Simple objects such as *note
     PyString_Type: 2c20. and *note PyBuffer_Type: 2cbf. objects contain
     a single segment.

     The last slot is ‘bf_getcharbuffer’, of type ‘getcharbufferproc’.
     This slot will only be present if the *note
     Py_TPFLAGS_HAVE_GETCHARBUFFER: 2e3d. flag is present in the *note
     tp_flags: 2e3a. field of the object’s *note PyTypeObject: 29d9.
     Before using this slot, the caller should test whether it is
     present by using the *note PyType_HasFeature(): 2baf. function.  If
     the flag is present, ‘bf_getcharbuffer’ may be _NULL_, indicating
     that the object’s contents cannot be used as _8-bit characters_.
     The slot function may also raise an error if the object’s contents
     cannot be interpreted as 8-bit characters.  For example, if the
     object is an array which is configured to hold floating point
     values, an exception may be raised if a caller attempts to use
     ‘bf_getcharbuffer’ to fetch a sequence of 8-bit characters.  This
     notion of exporting the internal buffers as "text" is used to
     distinguish between objects that are binary in nature, and those
     which have character-based content.

          Note: The current policy seems to state that these characters
          may be multi-byte characters.  This implies that a buffer size
          of _N_ does not mean there are _N_ characters present.

 -- Data: Py_TPFLAGS_HAVE_GETCHARBUFFER

     Flag bit set in the type structure to indicate that the
     ‘bf_getcharbuffer’ slot is known.  This being set does not indicate
     that the object supports the buffer interface or that the
     ‘bf_getcharbuffer’ slot is non-_NULL_.

 -- C Type: Py_ssize_t (*readbufferproc) (PyObject *self,
          Py_ssize_t segment, void **ptrptr)

     Return a pointer to a readable segment of the buffer in ‘*ptrptr’.
     This function is allowed to raise an exception, in which case it
     must return ‘-1’.  The _segment_ which is specified must be zero or
     positive, and strictly less than the number of segments returned by
     the ‘bf_getsegcount’ slot function.  On success, it returns the
     length of the segment, and sets ‘*ptrptr’ to a pointer to that
     memory.

 -- C Type: Py_ssize_t (*writebufferproc) (PyObject *self,
          Py_ssize_t segment, void **ptrptr)

     Return a pointer to a writable memory buffer in ‘*ptrptr’, and the
     length of that segment as the function return value.  The memory
     buffer must correspond to buffer segment _segment_.  Must return
     ‘-1’ and set an exception on error.  *note TypeError: 218. should
     be raised if the object only supports read-only buffers, and *note
     SystemError: 950. should be raised when _segment_ specifies a
     segment that doesn’t exist.

 -- C Type: Py_ssize_t (*segcountproc) (PyObject *self,
          Py_ssize_t *lenp)

     Return the number of memory segments which comprise the buffer.  If
     _lenp_ is not _NULL_, the implementation must report the sum of the
     sizes (in bytes) of all segments in ‘*lenp’.  The function cannot
     fail.

 -- C Type: Py_ssize_t (*charbufferproc) (PyObject *self,
          Py_ssize_t segment, const char **ptrptr)

     Return the size of the segment _segment_ that _ptrptr_ is set to.
     ‘*ptrptr’ is set to the memory buffer.  Returns ‘-1’ on error.


File: python.info,  Node: Supporting Cyclic Garbage Collection,  Prev: Buffer Object Structures,  Up: Object Implementation Support

7.10.8 Supporting Cyclic Garbage Collection
-------------------------------------------

Python’s support for detecting and collecting garbage which involves
circular references requires support from object types which are
"containers" for other objects which may also be containers.  Types
which do not store references to other objects, or which only store
references to atomic types (such as numbers or strings), do not need to
provide any explicit support for garbage collection.

  To create a container type, the *note tp_flags: 2e3a. field of the
type object must include the *note Py_TPFLAGS_HAVE_GC: 29ef. and provide
an implementation of the *note tp_traverse: 242a. handler.  If instances
of the type are mutable, a *note tp_clear: 2e3b. implementation must
also be provided.

 -- Data: Py_TPFLAGS_HAVE_GC

     Objects with a type with this flag set must conform with the rules
     documented here.  For convenience these objects will be referred to
     as container objects.

  Constructors for container types must conform to two rules:

  1. The memory for the object must be allocated using *note
     PyObject_GC_New(): 4a5. or *note PyObject_GC_NewVar(): 4a6.

  2. Once all the fields which may contain references to other
     containers are initialized, it must call *note PyObject_GC_Track():
     4a8.

 -- C Function: TYPE* PyObject_GC_New (TYPE, PyTypeObject *type)

     Analogous to *note PyObject_New(): 46b. but for container objects
     with the *note Py_TPFLAGS_HAVE_GC: 29ef. flag set.

 -- C Function: TYPE* PyObject_GC_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)

     Analogous to *note PyObject_NewVar(): 46c. but for container
     objects with the *note Py_TPFLAGS_HAVE_GC: 29ef. flag set.

     Changed in version 2.5: This function used an ‘int’ type for
     _size_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: TYPE* PyObject_GC_Resize (TYPE, PyVarObject *op,
          Py_ssize_t newsize)

     Resize an object allocated by *note PyObject_NewVar(): 46c.
     Returns the resized object or _NULL_ on failure.

     Changed in version 2.5: This function used an ‘int’ type for
     _newsize_.  This might require changes in your code for properly
     supporting 64-bit systems.

 -- C Function: void PyObject_GC_Track (PyObject *op)

     Adds the object _op_ to the set of container objects tracked by the
     collector.  The collector can run at unexpected times so objects
     must be valid while being tracked.  This should be called once all
     the fields followed by the *note tp_traverse: 242a. handler become
     valid, usually near the end of the constructor.

 -- C Function: void _PyObject_GC_TRACK (PyObject *op)

     A macro version of *note PyObject_GC_Track(): 4a8.  It should not
     be used for extension modules.

  Similarly, the deallocator for the object must conform to a similar
pair of rules:

  1. Before fields which refer to other containers are invalidated,
     *note PyObject_GC_UnTrack(): 4a9. must be called.

  2. The object’s memory must be deallocated using *note
     PyObject_GC_Del(): 4a7.

 -- C Function: void PyObject_GC_Del (void *op)

     Releases memory allocated to an object using *note
     PyObject_GC_New(): 4a5. or *note PyObject_GC_NewVar(): 4a6.

 -- C Function: void PyObject_GC_UnTrack (void *op)

     Remove the object _op_ from the set of container objects tracked by
     the collector.  Note that *note PyObject_GC_Track(): 4a8. can be
     called again on this object to add it back to the set of tracked
     objects.  The deallocator (*note tp_dealloc: 29e1. handler) should
     call this for the object before any of the fields used by the *note
     tp_traverse: 242a. handler become invalid.

 -- C Function: void _PyObject_GC_UNTRACK (PyObject *op)

     A macro version of *note PyObject_GC_UnTrack(): 4a9.  It should not
     be used for extension modules.

  The *note tp_traverse: 242a. handler accepts a function parameter of
this type:

 -- C Type: int (*visitproc) (PyObject *object, void *arg)

     Type of the visitor function passed to the *note tp_traverse: 242a.
     handler.  The function should be called with an object to traverse
     as _object_ and the third parameter to the *note tp_traverse: 242a.
     handler as _arg_.  The Python core uses several visitor functions
     to implement cyclic garbage detection; it’s not expected that users
     will need to write their own visitor functions.

  The *note tp_traverse: 242a. handler must have the following type:

 -- C Type: int (*traverseproc) (PyObject *self, visitproc visit,
          void *arg)

     Traversal function for a container object.  Implementations must
     call the _visit_ function for each object directly contained by
     _self_, with the parameters to _visit_ being the contained object
     and the _arg_ value passed to the handler.  The _visit_ function
     must not be called with a _NULL_ object argument.  If _visit_
     returns a non-zero value that value should be returned immediately.

  To simplify writing *note tp_traverse: 242a. handlers, a *note
Py_VISIT(): 29ed. macro is provided.  In order to use this macro, the
*note tp_traverse: 242a. implementation must name its arguments exactly
_visit_ and _arg_:

 -- C Function: void Py_VISIT (PyObject *o)

     Call the _visit_ callback, with arguments _o_ and _arg_.  If
     _visit_ returns a non-zero value, then return it.  Using this
     macro, *note tp_traverse: 242a. handlers look like:

          static int
          my_traverse(Noddy *self, visitproc visit, void *arg)
          {
              Py_VISIT(self->foo);
              Py_VISIT(self->bar);
              return 0;
          }

     New in version 2.4.

  The *note tp_clear: 2e3b. handler must be of the *note inquiry: 2e72.
type, or _NULL_ if the object is immutable.

 -- C Type: int (*inquiry) (PyObject *self)

     Drop references that may have created reference cycles.  Immutable
     objects do not have to define this method since they can never
     directly create reference cycles.  Note that the object must still
     be valid after calling this method (don’t just call *note
     Py_DECREF(): 29a1. on a reference).  The collector will call this
     method if it detects that this object is involved in a reference
     cycle.

