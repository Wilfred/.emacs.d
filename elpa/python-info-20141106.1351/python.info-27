This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: What is delegation?,  Next: How do I call a method defined in a base class from a derived class that overrides it?,  Prev: How do I check if an object is an instance of a given class or of a subclass of it?,  Up: Objects

11.2.6.5 What is delegation?
............................

Delegation is an object oriented technique (also called a design
pattern).  Let’s say you have an object ‘x’ and want to change the
behaviour of just one of its methods.  You can create a new class that
provides a new implementation of the method you’re interested in
changing and delegates all other methods to the corresponding method of
‘x’.

  Python programmers can easily implement delegation.  For example, the
following class implements a class that behaves like a file but converts
all written data to uppercase:

     class UpperOut:

         def __init__(self, outfile):
             self._outfile = outfile

         def write(self, s):
             self._outfile.write(s.upper())

         def __getattr__(self, name):
             return getattr(self._outfile, name)

  Here the ‘UpperOut’ class redefines the ‘write()’ method to convert
the argument string to uppercase before calling the underlying
‘self.__outfile.write()’ method.  All other methods are delegated to the
underlying ‘self.__outfile’ object.  The delegation is accomplished via
the ‘__getattr__’ method; consult *note the language reference: 70e. for
more information about controlling attribute access.

  Note that for more general cases delegation can get trickier.  When
attributes must be set as well as retrieved, the class must define a
*note __setattr__(): 488. method too, and it must do so carefully.  The
basic implementation of *note __setattr__(): 488. is roughly equivalent
to the following:

     class X:
         ...
         def __setattr__(self, name, value):
             self.__dict__[name] = value
         ...

  Most *note __setattr__(): 488. implementations must modify
‘self.__dict__’ to store local state for self without causing an
infinite recursion.


File: python.info,  Node: How do I call a method defined in a base class from a derived class that overrides it?,  Next: How can I organize my code to make it easier to change the base class?,  Prev: What is delegation?,  Up: Objects

11.2.6.6 How do I call a method defined in a base class from a derived class that overrides it?
...............................................................................................

If you’re using new-style classes, use the built-in *note super(): 37d.
function:

     class Derived(Base):
         def meth (self):
             super(Derived, self).meth()

  If you’re using classic classes: For a class definition such as ‘class
Derived(Base): ...’ you can call method ‘meth()’ defined in ‘Base’ (or
one of ‘Base’’s base classes) as ‘Base.meth(self, arguments...)’.  Here,
‘Base.meth’ is an unbound method, so you need to provide the ‘self’
argument.


File: python.info,  Node: How can I organize my code to make it easier to change the base class?,  Next: How do I create static class data and static class methods?,  Prev: How do I call a method defined in a base class from a derived class that overrides it?,  Up: Objects

11.2.6.7 How can I organize my code to make it easier to change the base class?
...............................................................................

You could define an alias for the base class, assign the real base class
to it before your class definition, and use the alias throughout your
class.  Then all you have to change is the value assigned to the alias.
Incidentally, this trick is also handy if you want to decide dynamically
(e.g.  depending on availability of resources) which base class to use.
Example:

     BaseAlias = <real base class>

     class Derived(BaseAlias):
         def meth(self):
             BaseAlias.meth(self)
             ...


File: python.info,  Node: How do I create static class data and static class methods?,  Next: How can I overload constructors or methods in Python?,  Prev: How can I organize my code to make it easier to change the base class?,  Up: Objects

11.2.6.8 How do I create static class data and static class methods?
....................................................................

Both static data and static methods (in the sense of C++ or Java) are
supported in Python.

  For static data, simply define a class attribute.  To assign a new
value to the attribute, you have to explicitly use the class name in the
assignment:

     class C:
         count = 0   # number of times C.__init__ called

         def __init__(self):
             C.count = C.count + 1

         def getcount(self):
             return C.count  # or return self.count

  ‘c.count’ also refers to ‘C.count’ for any ‘c’ such that
‘isinstance(c, C)’ holds, unless overridden by ‘c’ itself or by some
class on the base-class search path from ‘c.__class__’ back to ‘C’.

  Caution: within a method of C, an assignment like ‘self.count = 42’
creates a new and unrelated instance named "count" in ‘self’’s own dict.
Rebinding of a class-static data name must always specify the class
whether inside a method or not:

     C.count = 314

  Static methods are possible since Python 2.2:

     class C:
         def static(arg1, arg2, arg3):
             # No 'self' parameter!
             ...
         static = staticmethod(static)

  With Python 2.4’s decorators, this can also be written as

     class C:
         @staticmethod
         def static(arg1, arg2, arg3):
             # No 'self' parameter!
             ...

  However, a far more straightforward way to get the effect of a static
method is via a simple module-level function:

     def getcount():
         return C.count

  If your code is structured so as to define one class (or tightly
related class hierarchy) per module, this supplies the desired
encapsulation.


File: python.info,  Node: How can I overload constructors or methods in Python?,  Next: I try to use __spam and I get an error about _SomeClassName__spam,  Prev: How do I create static class data and static class methods?,  Up: Objects

11.2.6.9 How can I overload constructors (or methods) in Python?
................................................................

This answer actually applies to all methods, but the question usually
comes up first in the context of constructors.

  In C++ you’d write

     class C {
         C() { cout << "No arguments\n"; }
         C(int i) { cout << "Argument is " << i << "\n"; }
     }

  In Python you have to write a single constructor that catches all
cases using default arguments.  For example:

     class C:
         def __init__(self, i=None):
             if i is None:
                 print "No arguments"
             else:
                 print "Argument is", i

  This is not entirely equivalent, but close enough in practice.

  You could also try a variable-length argument list, e.g.

     def __init__(self, *args):
         ...

  The same approach works for all method definitions.


File: python.info,  Node: I try to use __spam and I get an error about _SomeClassName__spam,  Next: My class defines __del__ but it is not called when I delete the object,  Prev: How can I overload constructors or methods in Python?,  Up: Objects

11.2.6.10 I try to use __spam and I get an error about _SomeClassName__spam.
............................................................................

Variable names with double leading underscores are "mangled" to provide
a simple but effective way to define class private variables.  Any
identifier of the form ‘__spam’ (at least two leading underscores, at
most one trailing underscore) is textually replaced with
‘_classname__spam’, where ‘classname’ is the current class name with any
leading underscores stripped.

  This doesn’t guarantee privacy: an outside user can still deliberately
access the "_classname__spam" attribute, and private values are visible
in the object’s ‘__dict__’.  Many Python programmers never bother to use
private variable names at all.


File: python.info,  Node: My class defines __del__ but it is not called when I delete the object,  Next: How do I get a list of all instances of a given class?,  Prev: I try to use __spam and I get an error about _SomeClassName__spam,  Up: Objects

11.2.6.11 My class defines __del__ but it is not called when I delete the object.
.................................................................................

There are several possible reasons for this.

  The del statement does not necessarily call *note __del__(): 709. – it
simply decrements the object’s reference count, and if this reaches zero
*note __del__(): 709. is called.

  If your data structures contain circular links (e.g.  a tree where
each child has a parent reference and each parent has a list of
children) the reference counts will never go back to zero.  Once in a
while Python runs an algorithm to detect such cycles, but the garbage
collector might run some time after the last reference to your data
structure vanishes, so your *note __del__(): 709. method may be called
at an inconvenient and random time.  This is inconvenient if you’re
trying to reproduce a problem.  Worse, the order in which object’s *note
__del__(): 709. methods are executed is arbitrary.  You can run *note
gc.collect(): 3c0. to force a collection, but there _are_ pathological
cases where objects will never be collected.

  Despite the cycle collector, it’s still a good idea to define an
explicit ‘close()’ method on objects to be called whenever you’re done
with them.  The ‘close()’ method can then remove attributes that refer
to subobjecs.  Don’t call *note __del__(): 709. directly – *note
__del__(): 709. should call ‘close()’ and ‘close()’ should make sure
that it can be called more than once for the same object.

  Another way to avoid cyclical references is to use the *note weakref:
195. module, which allows you to point to objects without incrementing
their reference count.  Tree data structures, for instance, should use
weak references for their parent and sibling references (if they need
them!).

  If the object has ever been a local variable in a function that caught
an expression in an except clause, chances are that a reference to the
object still exists in that function’s stack frame as contained in the
stack trace.  Normally, calling *note sys.exc_clear(): 464. will take
care of this by clearing the last recorded exception.

  Finally, if your *note __del__(): 709. method raises an exception, a
warning message is printed to *note sys.stderr: 647.


File: python.info,  Node: How do I get a list of all instances of a given class?,  Next: Why does the result of id appear to be not unique?,  Prev: My class defines __del__ but it is not called when I delete the object,  Up: Objects

11.2.6.12 How do I get a list of all instances of a given class?
................................................................

Python does not keep track of all instances of a class (or of a built-in
type).  You can program the class’s constructor to keep track of all
instances by keeping a list of weak references to each instance.


File: python.info,  Node: Why does the result of id appear to be not unique?,  Prev: How do I get a list of all instances of a given class?,  Up: Objects

11.2.6.13 Why does the result of ‘id()’ appear to be not unique?
................................................................

The *note id(): 3b2. builtin returns an integer that is guaranteed to be
unique during the lifetime of the object.  Since in CPython, this is the
object’s memory address, it happens frequently that after an object is
deleted from memory, the next freshly created object is allocated at the
same position in memory.  This is illustrated by this example:

     >>> id(1000)
     13901272
     >>> id(2000)
     13901272

  The two ids belong to different integer objects that are created
before, and deleted immediately after execution of the ‘id()’ call.  To
be sure that objects whose id you want to examine are still alive,
create another reference to the object:

     >>> a = 1000; b = 2000
     >>> id(a)
     13901272
     >>> id(b)
     13891296


File: python.info,  Node: Modules<3>,  Prev: Objects,  Up: Programming FAQ

11.2.7 Modules
--------------

* Menu:

* How do I create a .pyc file?: How do I create a pyc file?. 
* How do I find the current module name?:: 
* How can I have modules that mutually import each other?:: 
* __import__(’x.y.z’) returns <module ’x’>; how do I get z?: __import__ 'x y z' returns <module 'x'>; how do I get z?. 
* When I edit an imported module and reimport it, the changes don’t show up. Why does this happen?: When I edit an imported module and reimport it the changes don't show up Why does this happen?. 


File: python.info,  Node: How do I create a pyc file?,  Next: How do I find the current module name?,  Up: Modules<3>

11.2.7.1 How do I create a .pyc file?
.....................................

When a module is imported for the first time (or when the source is more
recent than the current compiled file) a ‘.pyc’ file containing the
compiled code should be created in the same directory as the ‘.py’ file.

  One reason that a ‘.pyc’ file may not be created is permissions
problems with the directory.  This can happen, for example, if you
develop as one user but run as another, such as if you are testing with
a web server.  Creation of a .pyc file is automatic if you’re importing
a module and Python has the ability (permissions, free space, etc...)
to write the compiled module back to the directory.

  Running Python on a top level script is not considered an import and
no ‘.pyc’ will be created.  For example, if you have a top-level module
‘foo.py’ that imports another module ‘xyz.py’, when you run ‘foo’,
‘xyz.pyc’ will be created since ‘xyz’ is imported, but no ‘foo.pyc’ file
will be created since ‘foo.py’ isn’t being imported.

  If you need to create ‘foo.pyc’ – that is, to create a ‘.pyc’ file for
a module that is not imported – you can, using the *note py_compile:
13d. and *note compileall: 69. modules.

  The *note py_compile: 13d. module can manually compile any module.
One way is to use the ‘compile()’ function in that module interactively:

     >>> import py_compile
     >>> py_compile.compile('foo.py')                 # doctest: +SKIP

  This will write the ‘.pyc’ to the same location as ‘foo.py’ (or you
can override that with the optional parameter ‘cfile’).

  You can also automatically compile all files in a directory or
directories using the *note compileall: 69. module.  You can do it from
the shell prompt by running ‘compileall.py’ and providing the path of a
directory containing Python files to compile:

     python -m compileall .


File: python.info,  Node: How do I find the current module name?,  Next: How can I have modules that mutually import each other?,  Prev: How do I create a pyc file?,  Up: Modules<3>

11.2.7.2 How do I find the current module name?
...............................................

A module can find out its own module name by looking at the predefined
global variable ‘__name__’.  If this has the value ‘'__main__'’, the
program is running as a script.  Many modules that are usually used by
importing them also provide a command-line interface or a self-test, and
only execute this code after checking ‘__name__’:

     def main():
         print 'Running test...'
         ...

     if __name__ == '__main__':
         main()


File: python.info,  Node: How can I have modules that mutually import each other?,  Next: __import__ 'x y z' returns <module 'x'>; how do I get z?,  Prev: How do I find the current module name?,  Up: Modules<3>

11.2.7.3 How can I have modules that mutually import each other?
................................................................

Suppose you have the following modules:

  foo.py:

     from bar import bar_var
     foo_var = 1

  bar.py:

     from foo import foo_var
     bar_var = 2

  The problem is that the interpreter will perform the following steps:

   * main imports foo

   * Empty globals for foo are created

   * foo is compiled and starts executing

   * foo imports bar

   * Empty globals for bar are created

   * bar is compiled and starts executing

   * bar imports foo (which is a no-op since there already is a module
     named foo)

   * bar.foo_var = foo.foo_var

  The last step fails, because Python isn’t done with interpreting ‘foo’
yet and the global symbol dictionary for ‘foo’ is still empty.

  The same thing happens when you use ‘import foo’, and then try to
access ‘foo.foo_var’ in global code.

  There are (at least) three possible workarounds for this problem.

  Guido van Rossum recommends avoiding all uses of ‘from <module> import
...’, and placing all code inside functions.  Initializations of global
variables and class variables should use constants or built-in functions
only.  This means everything from an imported module is referenced as
‘<module>.<name>’.

  Jim Roskind suggests performing steps in the following order in each
module:

   * exports (globals, functions, and classes that don’t need imported
     base classes)

   * ‘import’ statements

   * active code (including globals that are initialized from imported
     values).

  van Rossum doesn’t like this approach much because the imports appear
in a strange place, but it does work.

  Matthias Urlichs recommends restructuring your code so that the
recursive import is not necessary in the first place.

  These solutions are not mutually exclusive.


File: python.info,  Node: __import__ 'x y z' returns <module 'x'>; how do I get z?,  Next: When I edit an imported module and reimport it the changes don't show up Why does this happen?,  Prev: How can I have modules that mutually import each other?,  Up: Modules<3>

11.2.7.4 __import__(’x.y.z’) returns <module ’x’>; how do I get z?
..................................................................

Try:

     __import__('x.y.z').y.z

  For more realistic situations, you may have to do something like

     m = __import__(s)
     for i in s.split(".")[1:]:
         m = getattr(m, i)

  See *note importlib: f6. for a convenience function called *note
import_module(): 271.


File: python.info,  Node: When I edit an imported module and reimport it the changes don't show up Why does this happen?,  Prev: __import__ 'x y z' returns <module 'x'>; how do I get z?,  Up: Modules<3>

11.2.7.5 When I edit an imported module and reimport it, the changes don’t show up. Why does this happen?
.........................................................................................................

For reasons of efficiency as well as consistency, Python only reads the
module file on the first time a module is imported.  If it didn’t, in a
program consisting of many modules where each one imports the same basic
module, the basic module would be parsed and re-parsed many times.  To
force rereading of a changed module, do this:

     import modname
     reload(modname)

  Warning: this technique is not 100% fool-proof.  In particular,
modules containing statements like

     from modname import some_objects

  will continue to work with the old version of the imported objects.
If the module contains class definitions, existing class instances will
_not_ be updated to use the new class definition.  This can result in
the following paradoxical behaviour:

     >>> import cls
     >>> c = cls.C()                # Create an instance of C
     >>> reload(cls)
     <module 'cls' from 'cls.pyc'>
     >>> isinstance(c, cls.C)       # isinstance is false?!?
     False

  The nature of the problem is made clear if you print out the class
objects:

     >>> c.__class__
     <class cls.C at 0x7352a0>
     >>> cls.C
     <class cls.C at 0x4198d0>


File: python.info,  Node: Design and History FAQ,  Next: Library and Extension FAQ,  Prev: Programming FAQ,  Up: Python Frequently Asked Questions

11.3 Design and History FAQ
===========================

* Menu:

* Why does Python use indentation for grouping of statements?:: 
* Why am I getting strange results with simple arithmetic operations?:: 
* Why are floating point calculations so inaccurate?:: 
* Why are Python strings immutable?:: 
* Why must 'self' be used explicitly in method definitions and calls?:: 
* Why can't I use an assignment in an expression?:: 
* Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?: Why does Python use methods for some functionality e g list index but functions for other e g len list ?. 
* Why is join() a string method instead of a list or tuple method?: Why is join a string method instead of a list or tuple method?. 
* How fast are exceptions?:: 
* Why isn't there a switch or case statement in Python?:: 
* Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?:: 
* Why can't lambda expressions contain statements?:: 
* Can Python be compiled to machine code, C or some other language?: Can Python be compiled to machine code C or some other language?. 
* How does Python manage memory?:: 
* Why isn't all memory freed when Python exits?:: 
* Why are there separate tuple and list data types?:: 
* How are lists implemented?:: 
* How are dictionaries implemented?:: 
* Why must dictionary keys be immutable?:: 
* Why doesn’t list.sort() return the sorted list?: Why doesn't list sort return the sorted list?. 
* How do you specify and enforce an interface spec in Python?:: 
* Why are default values shared between objects?:: 
* Why is there no goto?:: 
* Why can’t raw strings (r-strings) end with a backslash?: Why can't raw strings r-strings end with a backslash?. 
* Why doesn't Python have a "with" statement for attribute assignments?:: 
* Why are colons required for the if/while/def/class statements?:: 
* Why does Python allow commas at the end of lists and tuples?:: 


File: python.info,  Node: Why does Python use indentation for grouping of statements?,  Next: Why am I getting strange results with simple arithmetic operations?,  Up: Design and History FAQ

11.3.1 Why does Python use indentation for grouping of statements?
------------------------------------------------------------------

Guido van Rossum believes that using indentation for grouping is
extremely elegant and contributes a lot to the clarity of the average
Python program.  Most people learn to love this feature after a while.

  Since there are no begin/end brackets there cannot be a disagreement
between grouping perceived by the parser and the human reader.
Occasionally C programmers will encounter a fragment of code like this:

     if (x <= y)
             x++;
             y--;
     z++;

  Only the ‘x++’ statement is executed if the condition is true, but the
indentation leads you to believe otherwise.  Even experienced C
programmers will sometimes stare at it a long time wondering why ‘y’ is
being decremented even for ‘x > y’.

  Because there are no begin/end brackets, Python is much less prone to
coding-style conflicts.  In C there are many different ways to place the
braces.  If you’re used to reading and writing code that uses one style,
you will feel at least slightly uneasy when reading (or being required
to write) another style.

  Many coding styles place begin/end brackets on a line by themselves.
This makes programs considerably longer and wastes valuable screen
space, making it harder to get a good overview of a program.  Ideally, a
function should fit on one screen (say, 20-30 lines).  20 lines of
Python can do a lot more work than 20 lines of C. This is not solely due
to the lack of begin/end brackets – the lack of declarations and the
high-level data types are also responsible – but the indentation-based
syntax certainly helps.


File: python.info,  Node: Why am I getting strange results with simple arithmetic operations?,  Next: Why are floating point calculations so inaccurate?,  Prev: Why does Python use indentation for grouping of statements?,  Up: Design and History FAQ

11.3.2 Why am I getting strange results with simple arithmetic operations?
--------------------------------------------------------------------------

See the next question.


File: python.info,  Node: Why are floating point calculations so inaccurate?,  Next: Why are Python strings immutable?,  Prev: Why am I getting strange results with simple arithmetic operations?,  Up: Design and History FAQ

11.3.3 Why are floating point calculations so inaccurate?
---------------------------------------------------------

People are often very surprised by results like this:

     >>> 1.2 - 1.0
     0.199999999999999996

  and think it is a bug in Python.  It’s not.  This has nothing to do
with Python, but with how the underlying C platform handles floating
point numbers, and ultimately with the inaccuracies introduced when
writing down numbers as a string of a fixed number of digits.

  The internal representation of floating point numbers uses a fixed
number of binary digits to represent a decimal number.  Some decimal
numbers can’t be represented exactly in binary, resulting in small
roundoff errors.

  In decimal math, there are many numbers that can’t be represented with
a fixed number of decimal digits, e.g.  1/3 = 0.3333333333.......

  In base 2, 1/2 = 0.1, 1/4 = 0.01, 1/8 = 0.001, etc.  .2 equals 2/10
equals 1/5, resulting in the binary fractional number
0.001100110011001...

  Floating point numbers only have 32 or 64 bits of precision, so the
digits are cut off at some point, and the resulting number is
0.199999999999999996 in decimal, not 0.2.

  A floating point number’s ‘repr()’ function prints as many digits are
necessary to make ‘eval(repr(f)) == f’ true for any float f.  The
‘str()’ function prints fewer digits and this often results in the more
sensible number that was probably intended:

     >>> 1.1 - 0.9
     0.20000000000000007
     >>> print 1.1 - 0.9
     0.2

  One of the consequences of this is that it is error-prone to compare
the result of some computation to a float with ‘==’.  Tiny inaccuracies
may mean that ‘==’ fails.  Instead, you have to check that the
difference between the two numbers is less than a certain threshold:

     epsilon = 0.0000000000001  # Tiny allowed error
     expected_result = 0.4

     if expected_result-epsilon <= computation() <= expected_result+epsilon:
         ...

  Please see the chapter on *note floating point arithmetic: 624. in the
Python tutorial for more information.


File: python.info,  Node: Why are Python strings immutable?,  Next: Why must 'self' be used explicitly in method definitions and calls?,  Prev: Why are floating point calculations so inaccurate?,  Up: Design and History FAQ

11.3.4 Why are Python strings immutable?
----------------------------------------

There are several advantages.

  One is performance: knowing that a string is immutable means we can
allocate space for it at creation time, and the storage requirements are
fixed and unchanging.  This is also one of the reasons for the
distinction between tuples and lists.

  Another advantage is that strings in Python are considered as
"elemental" as numbers.  No amount of activity will change the value 8
to anything else, and in Python, no amount of activity will change the
string "eight" to anything else.


File: python.info,  Node: Why must 'self' be used explicitly in method definitions and calls?,  Next: Why can't I use an assignment in an expression?,  Prev: Why are Python strings immutable?,  Up: Design and History FAQ

11.3.5 Why must ’self’ be used explicitly in method definitions and calls?
--------------------------------------------------------------------------

The idea was borrowed from Modula-3.  It turns out to be very useful,
for a variety of reasons.

  First, it’s more obvious that you are using a method or instance
attribute instead of a local variable.  Reading ‘self.x’ or
‘self.meth()’ makes it absolutely clear that an instance variable or
method is used even if you don’t know the class definition by heart.  In
C++, you can sort of tell by the lack of a local variable declaration
(assuming globals are rare or easily recognizable) – but in Python,
there are no local variable declarations, so you’d have to look up the
class definition to be sure.  Some C++ and Java coding standards call
for instance attributes to have an ‘m_’ prefix, so this explicitness is
still useful in those languages, too.

  Second, it means that no special syntax is necessary if you want to
explicitly reference or call the method from a particular class.  In
C++, if you want to use a method from a base class which is overridden
in a derived class, you have to use the ‘::’ operator – in Python you
can write ‘baseclass.methodname(self, <argument list>)’.  This is
particularly useful for *note __init__(): 37c. methods, and in general
in cases where a derived class method wants to extend the base class
method of the same name and thus has to call the base class method
somehow.

  Finally, for instance variables it solves a syntactic problem with
assignment: since local variables in Python are (by definition!)  those
variables to which a value is assigned in a function body (and that
aren’t explicitly declared global), there has to be some way to tell the
interpreter that an assignment was meant to assign to an instance
variable instead of to a local variable, and it should preferably be
syntactic (for efficiency reasons).  C++ does this through declarations,
but Python doesn’t have declarations and it would be a pity having to
introduce them just for this purpose.  Using the explicit ‘self.var’
solves this nicely.  Similarly, for using instance variables, having to
write ‘self.var’ means that references to unqualified names inside a
method don’t have to search the instance’s directories.  To put it
another way, local variables and instance variables live in two
different namespaces, and you need to tell Python which namespace to
use.


File: python.info,  Node: Why can't I use an assignment in an expression?,  Next: Why does Python use methods for some functionality e g list index but functions for other e g len list ?,  Prev: Why must 'self' be used explicitly in method definitions and calls?,  Up: Design and History FAQ

11.3.6 Why can’t I use an assignment in an expression?
------------------------------------------------------

Many people used to C or Perl complain that they want to use this C
idiom:

     while (line = readline(f)) {
         // do something with line
     }

  where in Python you’re forced to write this:

     while True:
         line = f.readline()
         if not line:
             break
         ... # do something with line

  The reason for not allowing assignment in Python expressions is a
common, hard-to-find bug in those other languages, caused by this
construct:

     if (x = 0) {
         // error handling
     }
     else {
         // code that only works for nonzero x
     }

  The error is a simple typo: ‘x = 0’, which assigns 0 to the variable
‘x’, was written while the comparison ‘x == 0’ is certainly what was
intended.

  Many alternatives have been proposed.  Most are hacks that save some
typing but use arbitrary or cryptic syntax or keywords, and fail the
simple criterion for language change proposals: it should intuitively
suggest the proper meaning to a human reader who has not yet been
introduced to the construct.

  An interesting phenomenon is that most experienced Python programmers
recognize the ‘while True’ idiom and don’t seem to be missing the
assignment in expression construct much; it’s only newcomers who express
a strong desire to add this to the language.

  There’s an alternative way of spelling this that seems attractive but
is generally less robust than the "while True" solution:

     line = f.readline()
     while line:
         ... # do something with line...
         line = f.readline()

  The problem with this is that if you change your mind about exactly
how you get the next line (e.g.  you want to change it into
‘sys.stdin.readline()’) you have to remember to change two places in
your program – the second occurrence is hidden at the bottom of the
loop.

  The best approach is to use iterators, making it possible to loop
through objects using the ‘for’ statement.  For example, in the current
version of Python file objects support the iterator protocol, so you can
now write simply:

     for line in f:
         ... # do something with line...


File: python.info,  Node: Why does Python use methods for some functionality e g list index but functions for other e g len list ?,  Next: Why is join a string method instead of a list or tuple method?,  Prev: Why can't I use an assignment in an expression?,  Up: Design and History FAQ

11.3.7 Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?
-----------------------------------------------------------------------------------------------------------------------

The major reason is history.  Functions were used for those operations
that were generic for a group of types and which were intended to work
even for objects that didn’t have methods at all (e.g.  tuples).  It is
also convenient to have a function that can readily be applied to an
amorphous collection of objects when you use the functional features of
Python (‘map()’, ‘zip()’ et al).

  In fact, implementing ‘len()’, ‘max()’, ‘min()’ as a built-in function
is actually less code than implementing them as methods for each type.
One can quibble about individual cases but it’s a part of Python, and
it’s too late to make such fundamental changes now.  The functions have
to remain to avoid massive code breakage.

     Note: For string operations, Python has moved from external
     functions (the ‘string’ module) to methods.  However, ‘len()’ is
     still a function.


File: python.info,  Node: Why is join a string method instead of a list or tuple method?,  Next: How fast are exceptions?,  Prev: Why does Python use methods for some functionality e g list index but functions for other e g len list ?,  Up: Design and History FAQ

11.3.8 Why is join() a string method instead of a list or tuple method?
-----------------------------------------------------------------------

Strings became much more like other standard types starting in Python
1.6, when methods were added which give the same functionality that has
always been available using the functions of the string module.  Most of
these new methods have been widely accepted, but the one which appears
to make some programmers feel uncomfortable is:

     ", ".join(['1', '2', '4', '8', '16'])

  which gives the result:

     "1, 2, 4, 8, 16"

  There are two common arguments against this usage.

  The first runs along the lines of: "It looks really ugly using a
method of a string literal (string constant)", to which the answer is
that it might, but a string literal is just a fixed value.  If the
methods are to be allowed on names bound to strings there is no logical
reason to make them unavailable on literals.

  The second objection is typically cast as: "I am really telling a
sequence to join its members together with a string constant".  Sadly,
you aren’t.  For some reason there seems to be much less difficulty with
having *note split(): 8d5. as a string method, since in that case it is
easy to see that

     "1, 2, 4, 8, 16".split(", ")

  is an instruction to a string literal to return the substrings
delimited by the given separator (or, by default, arbitrary runs of
white space).  In this case a Unicode string returns a list of Unicode
strings, an ASCII string returns a list of ASCII strings, and everyone
is happy.

  *note join(): 8ba. is a string method because in using it you are
telling the separator string to iterate over a sequence of strings and
insert itself between adjacent elements.  This method can be used with
any argument which obeys the rules for sequence objects, including any
new classes you might define yourself.

  Because this is a string method it can work for Unicode strings as
well as plain ASCII strings.  If ‘join()’ were a method of the sequence
types then the sequence types would have to decide which type of string
to return depending on the type of the separator.

  If none of these arguments persuade you, then for the moment you can
continue to use the ‘join()’ function from the string module, which
allows you to write

     string.join(['1', '2', '4', '8', '16'], ", ")


File: python.info,  Node: How fast are exceptions?,  Next: Why isn't there a switch or case statement in Python?,  Prev: Why is join a string method instead of a list or tuple method?,  Up: Design and History FAQ

11.3.9 How fast are exceptions?
-------------------------------

A try/except block is extremely efficient if no exceptions are raised.
Actually catching an exception is expensive.  In versions of Python
prior to 2.0 it was common to use this idiom:

     try:
         value = mydict[key]
     except KeyError:
         mydict[key] = getvalue(key)
         value = mydict[key]

  This only made sense when you expected the dict to have the key almost
all the time.  If that wasn’t the case, you coded it like this:

     if key in mydict:
         value = mydict[key]
     else:
         value = mydict[key] = getvalue(key)

     Note: In Python 2.0 and higher, you can code this as ‘value =
     mydict.setdefault(key, getvalue(key))’.


File: python.info,  Node: Why isn't there a switch or case statement in Python?,  Next: Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Prev: How fast are exceptions?,  Up: Design and History FAQ

11.3.10 Why isn’t there a switch or case statement in Python?
-------------------------------------------------------------

You can do this easily enough with a sequence of ‘if... elif... elif...
else’.  There have been some proposals for switch statement syntax, but
there is no consensus (yet) on whether and how to do range tests.  See
PEP 275(1) for complete details and the current status.

  For cases where you need to choose from a very large number of
possibilities, you can create a dictionary mapping case values to
functions to call.  For example:

     def function_1(...):
         ...

     functions = {'a': function_1,
                  'b': function_2,
                  'c': self.method_1, ...}

     func = functions[value]
     func()

  For calling methods on objects, you can simplify yet further by using
the *note getattr(): 875. built-in to retrieve methods with a particular
name:

     def visit_a(self, ...):
         ...
     ...

     def dispatch(self, value):
         method_name = 'visit_' + str(value)
         method = getattr(self, method_name)
         method()

  It’s suggested that you use a prefix for the method names, such as
‘visit_’ in this example.  Without such a prefix, if values are coming
from an untrusted source, an attacker would be able to call any method
on your object.

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0275


File: python.info,  Node: Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Next: Why can't lambda expressions contain statements?,  Prev: Why isn't there a switch or case statement in Python?,  Up: Design and History FAQ

11.3.11 Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?
----------------------------------------------------------------------------------------------------------------

Answer 1: Unfortunately, the interpreter pushes at least one C stack
frame for each Python stack frame.  Also, extensions can call back into
Python at almost random moments.  Therefore, a complete threads
implementation requires thread support for C.

  Answer 2: Fortunately, there is Stackless Python(1), which has a
completely redesigned interpreter loop that avoids the C stack.

   ---------- Footnotes ----------

   (1) http://www.stackless.com


File: python.info,  Node: Why can't lambda expressions contain statements?,  Next: Can Python be compiled to machine code C or some other language?,  Prev: Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Up: Design and History FAQ

11.3.12 Why can’t lambda expressions contain statements?
--------------------------------------------------------

Python lambda expressions cannot contain statements because Python’s
syntactic framework can’t handle statements nested inside expressions.
However, in Python, this is not a serious problem.  Unlike lambda forms
in other languages, where they add functionality, Python lambdas are
only a shorthand notation if you’re too lazy to define a function.

  Functions are already first class objects in Python, and can be
declared in a local scope.  Therefore the only advantage of using a
lambda instead of a locally-defined function is that you don’t need to
invent a name for the function – but that’s just a local variable to
which the function object (which is exactly the same type of object that
a lambda expression yields) is assigned!


File: python.info,  Node: Can Python be compiled to machine code C or some other language?,  Next: How does Python manage memory?,  Prev: Why can't lambda expressions contain statements?,  Up: Design and History FAQ

11.3.13 Can Python be compiled to machine code, C or some other language?
-------------------------------------------------------------------------

Not easily.  Python’s high level data types, dynamic typing of objects
and run-time invocation of the interpreter (using *note eval(): 360. or
*note exec: 404.) together mean that a "compiled" Python program would
probably consist mostly of calls into the Python run-time system, even
for seemingly simple operations like ‘x+1’.

  Several projects described in the Python newsgroup or at past Python
conferences(1) have shown that this approach is feasible, although the
speedups reached so far are only modest (e.g.  2x).  Jython uses the
same strategy for compiling to Java bytecode.  (Jim Hugunin has
demonstrated that in combination with whole-program analysis, speedups
of 1000x are feasible for small demo programs.  See the proceedings from
the 1997 Python conference(2) for more information.)

  Internally, Python source code is always translated into a bytecode
representation, and this bytecode is then executed by the Python virtual
machine.  In order to avoid the overhead of repeatedly parsing and
translating modules that rarely change, this byte code is written into a
file whose name ends in ".pyc" whenever a module is parsed.  When the
corresponding .py file is changed, it is parsed and translated again and
the .pyc file is rewritten.

  There is no performance difference once the .pyc file has been loaded,
as the bytecode read from the .pyc file is exactly the same as the
bytecode created by direct translation.  The only difference is that
loading code from a .pyc file is faster than parsing and translating a
.py file, so the presence of precompiled .pyc files improves the
start-up time of Python scripts.  If desired, the Lib/compileall.py
module can be used to create valid .pyc files for a given set of
modules.

  Note that the main script executed by Python, even if its filename
ends in .py, is not compiled to a .pyc file.  It is compiled to
bytecode, but the bytecode is not saved to a file.  Usually main scripts
are quite short, so this doesn’t cost much speed.

  There are also several programs which make it easier to intermingle
Python and C code in various ways to increase performance.  See, for
example, Psyco(3), Pyrex(4), PyInline(5), Py2Cmod(6), and Weave(7).

   ---------- Footnotes ----------

   (1) http://python.org/community/workshops/

   (2) http://python.org/workshops/1997-10/proceedings/

   (3) http://psyco.sourceforge.net/

   (4) http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/

   (5) http://pyinline.sourceforge.net/

   (6) http://sourceforge.net/projects/py2cmod/

   (7) http://www.scipy.org/Weave


File: python.info,  Node: How does Python manage memory?,  Next: Why isn't all memory freed when Python exits?,  Prev: Can Python be compiled to machine code C or some other language?,  Up: Design and History FAQ

11.3.14 How does Python manage memory?
--------------------------------------

The details of Python memory management depend on the implementation.
The standard C implementation of Python uses reference counting to
detect inaccessible objects, and another mechanism to collect reference
cycles, periodically executing a cycle detection algorithm which looks
for inaccessible cycles and deletes the objects involved.  The *note gc:
db. module provides functions to perform a garbage collection, obtain
debugging statistics, and tune the collector’s parameters.

  Jython relies on the Java runtime so the JVM’s garbage collector is
used.  This difference can cause some subtle porting problems if your
Python code depends on the behavior of the reference counting
implementation.

  Sometimes objects get stuck in tracebacks temporarily and hence are
not deallocated when you might expect.  Clear the tracebacks with:

     import sys
     sys.exc_clear()
     sys.exc_traceback = sys.last_traceback = None

  Tracebacks are used for reporting errors, implementing debuggers and
related things.  They contain a portion of the program state extracted
during the handling of an exception (usually the most recent exception).

  In the absence of circularities and tracebacks, Python programs do not
need to manage memory explicitly.

  Why doesn’t Python use a more traditional garbage collection scheme?
For one thing, this is not a C standard feature and hence it’s not
portable.  (Yes, we know about the Boehm GC library.  It has bits of
assembler code for _most_ common platforms, not for all of them, and
although it is mostly transparent, it isn’t completely transparent;
patches are required to get Python to work with it.)

  Traditional GC also becomes a problem when Python is embedded into
other applications.  While in a standalone Python it’s fine to replace
the standard malloc() and free() with versions provided by the GC
library, an application embedding Python may want to have its _own_
substitute for malloc() and free(), and may not want Python’s.  Right
now, Python works with anything that implements malloc() and free()
properly.

  In Jython, the following code (which is fine in CPython) will probably
run out of file descriptors long before it runs out of memory:

     for file in very_long_list_of_files:
         f = open(file)
         c = f.read(1)

  Using the current reference counting and destructor scheme, each new
assignment to f closes the previous file.  Using GC, this is not
guaranteed.  If you want to write code that will work with any Python
implementation, you should explicitly close the file or use the *note
with: 1c0. statement; this will work regardless of GC:

     for file in very_long_list_of_files:
         with open(file) as f:
             c = f.read(1)


File: python.info,  Node: Why isn't all memory freed when Python exits?,  Next: Why are there separate tuple and list data types?,  Prev: How does Python manage memory?,  Up: Design and History FAQ

11.3.15 Why isn’t all memory freed when Python exits?
-----------------------------------------------------

Objects referenced from the global namespaces of Python modules are not
always deallocated when Python exits.  This may happen if there are
circular references.  There are also certain bits of memory that are
allocated by the C library that are impossible to free (e.g.  a tool
like Purify will complain about these).  Python is, however, aggressive
about cleaning up memory on exit and does try to destroy every single
object.

  If you want to force Python to delete certain things on deallocation
use the *note atexit: 12. module to run a function that will force those
deletions.


File: python.info,  Node: Why are there separate tuple and list data types?,  Next: How are lists implemented?,  Prev: Why isn't all memory freed when Python exits?,  Up: Design and History FAQ

11.3.16 Why are there separate tuple and list data types?
---------------------------------------------------------

Lists and tuples, while similar in many respects, are generally used in
fundamentally different ways.  Tuples can be thought of as being similar
to Pascal records or C structs; they’re small collections of related
data which may be of different types which are operated on as a group.
For example, a Cartesian coordinate is appropriately represented as a
tuple of two or three numbers.

  Lists, on the other hand, are more like arrays in other languages.
They tend to hold a varying number of objects all of which have the same
type and which are operated on one-by-one.  For example,
‘os.listdir('.')’ returns a list of strings representing the files in
the current directory.  Functions which operate on this output would
generally not break if you added another file or two to the directory.

  Tuples are immutable, meaning that once a tuple has been created, you
can’t replace any of its elements with a new value.  Lists are mutable,
meaning that you can always change a list’s elements.  Only immutable
elements can be used as dictionary keys, and hence only tuples and not
lists can be used as keys.


File: python.info,  Node: How are lists implemented?,  Next: How are dictionaries implemented?,  Prev: Why are there separate tuple and list data types?,  Up: Design and History FAQ

11.3.17 How are lists implemented?
----------------------------------

Python’s lists are really variable-length arrays, not Lisp-style linked
lists.  The implementation uses a contiguous array of references to
other objects, and keeps a pointer to this array and the array’s length
in a list head structure.

  This makes indexing a list ‘a[i]’ an operation whose cost is
independent of the size of the list or the value of the index.

  When items are appended or inserted, the array of references is
resized.  Some cleverness is applied to improve the performance of
appending items repeatedly; when the array must be grown, some extra
space is allocated so the next few times don’t require an actual resize.


File: python.info,  Node: How are dictionaries implemented?,  Next: Why must dictionary keys be immutable?,  Prev: How are lists implemented?,  Up: Design and History FAQ

11.3.18 How are dictionaries implemented?
-----------------------------------------

Python’s dictionaries are implemented as resizable hash tables.
Compared to B-trees, this gives better performance for lookup (the most
common operation by far) under most circumstances, and the
implementation is simpler.

  Dictionaries work by computing a hash code for each key stored in the
dictionary using the *note hash(): 70b. built-in function.  The hash
code varies widely depending on the key; for example, "Python" hashes to
-539294296 while "python", a string that differs by a single bit, hashes
to 1142331976.  The hash code is then used to calculate a location in an
internal array where the value will be stored.  Assuming that you’re
storing keys that all have different hash values, this means that
dictionaries take constant time – O(1), in computer science notation –
to retrieve a key.  It also means that no sorted order of the keys is
maintained, and traversing the array as the ‘.keys()’ and ‘.items()’ do
will output the dictionary’s content in some arbitrary jumbled order.


File: python.info,  Node: Why must dictionary keys be immutable?,  Next: Why doesn't list sort return the sorted list?,  Prev: How are dictionaries implemented?,  Up: Design and History FAQ

11.3.19 Why must dictionary keys be immutable?
----------------------------------------------

The hash table implementation of dictionaries uses a hash value
calculated from the key value to find the key.  If the key were a
mutable object, its value could change, and thus its hash could also
change.  But since whoever changes the key object can’t tell that it was
being used as a dictionary key, it can’t move the entry around in the
dictionary.  Then, when you try to look up the same object in the
dictionary it won’t be found because its hash value is different.  If
you tried to look up the old value it wouldn’t be found either, because
the value of the object found in that hash bin would be different.

  If you want a dictionary indexed with a list, simply convert the list
to a tuple first; the function ‘tuple(L)’ creates a tuple with the same
entries as the list ‘L’.  Tuples are immutable and can therefore be used
as dictionary keys.

  Some unacceptable solutions that have been proposed:

   - Hash lists by their address (object ID). This doesn’t work because
     if you construct a new list with the same value it won’t be found;
     e.g.:

          mydict = {[1, 2]: '12'}
          print mydict[[1, 2]]

     would raise a KeyError exception because the id of the ‘[1, 2]’
     used in the second line differs from that in the first line.  In
     other words, dictionary keys should be compared using ‘==’, not
     using *note is: 6eb.

   - Make a copy when using a list as a key.  This doesn’t work because
     the list, being a mutable object, could contain a reference to
     itself, and then the copying code would run into an infinite loop.

   - Allow lists as keys but tell the user not to modify them.  This
     would allow a class of hard-to-track bugs in programs when you
     forgot or modified a list by accident.  It also invalidates an
     important invariant of dictionaries: every value in ‘d.keys()’ is
     usable as a key of the dictionary.

   - Mark lists as read-only once they are used as a dictionary key.
     The problem is that it’s not just the top-level object that could
     change its value; you could use a tuple containing a list as a key.
     Entering anything as a key into a dictionary would require marking
     all objects reachable from there as read-only – and again,
     self-referential objects could cause an infinite loop.

  There is a trick to get around this if you need to, but use it at your
own risk: You can wrap a mutable structure inside a class instance which
has both a *note __eq__(): 21c. and a *note __hash__(): 335. method.
You must then make sure that the hash value for all such wrapper objects
that reside in a dictionary (or other hash based structure), remain
fixed while the object is in the dictionary (or other structure).

     class ListWrapper:
         def __init__(self, the_list):
             self.the_list = the_list
         def __eq__(self, other):
             return self.the_list == other.the_list
         def __hash__(self):
             l = self.the_list
             result = 98767 - len(l)*555
             for i, el in enumerate(l):
                 try:
                     result = result + (hash(el) % 9999999) * 1001 + i
                 except Exception:
                     result = (result % 7777777) + i * 333
             return result

  Note that the hash computation is complicated by the possibility that
some members of the list may be unhashable and also by the possibility
of arithmetic overflow.

  Furthermore it must always be the case that if ‘o1 == o2’ (ie
‘o1.__eq__(o2) is True’) then ‘hash(o1) == hash(o2)’ (ie, ‘o1.__hash__()
== o2.__hash__()’), regardless of whether the object is in a dictionary
or not.  If you fail to meet these restrictions dictionaries and other
hash based structures will misbehave.

  In the case of ListWrapper, whenever the wrapper object is in a
dictionary the wrapped list must not change to avoid anomalies.  Don’t
do this unless you are prepared to think hard about the requirements and
the consequences of not meeting them correctly.  Consider yourself
warned.


File: python.info,  Node: Why doesn't list sort return the sorted list?,  Next: How do you specify and enforce an interface spec in Python?,  Prev: Why must dictionary keys be immutable?,  Up: Design and History FAQ

11.3.20 Why doesn’t list.sort() return the sorted list?
-------------------------------------------------------

In situations where performance matters, making a copy of the list just
to sort it would be wasteful.  Therefore, ‘list.sort()’ sorts the list
in place.  In order to remind you of that fact, it does not return the
sorted list.  This way, you won’t be fooled into accidentally
overwriting a list when you need a sorted copy but also need to keep the
unsorted version around.

  In Python 2.4 a new built-in function – *note sorted(): 223. – has
been added.  This function creates a new list from a provided iterable,
sorts it and returns it.  For example, here’s how to iterate over the
keys of a dictionary in sorted order:

     for key in sorted(mydict):
         ... # do whatever with mydict[key]...


File: python.info,  Node: How do you specify and enforce an interface spec in Python?,  Next: Why are default values shared between objects?,  Prev: Why doesn't list sort return the sorted list?,  Up: Design and History FAQ

11.3.21 How do you specify and enforce an interface spec in Python?
-------------------------------------------------------------------

An interface specification for a module as provided by languages such as
C++ and Java describes the prototypes for the methods and functions of
the module.  Many feel that compile-time enforcement of interface
specifications helps in the construction of large programs.

  Python 2.6 adds an *note abc: 4. module that lets you define Abstract
Base Classes (ABCs).  You can then use *note isinstance(): 31e. and
*note issubclass(): 31f. to check whether an instance or a class
implements a particular ABC. The *note collections: 65. module defines a
set of useful ABCs such as *note Iterable: b79, *note Container: b77,
and *note MutableMapping: b81.

  For Python, many of the advantages of interface specifications can be
obtained by an appropriate test discipline for components.  There is
also a tool, PyChecker, which can be used to find problems due to
subclassing.

  A good test suite for a module can both provide a regression test and
serve as a module interface specification and a set of examples.  Many
Python modules can be run as a script to provide a simple "self test."
Even modules which use complex external interfaces can often be tested
in isolation using trivial "stub" emulations of the external interface.
The *note doctest: b5. and *note unittest: 187. modules or third-party
test frameworks can be used to construct exhaustive test suites that
exercise every line of code in a module.

  An appropriate testing discipline can help build large complex
applications in Python as well as having interface specifications would.
In fact, it can be better because an interface specification cannot test
certain properties of a program.  For example, the ‘append()’ method is
expected to add new elements to the end of some internal list; an
interface specification cannot test that your ‘append()’ implementation
will actually do this correctly, but it’s trivial to check this property
in a test suite.

  Writing test suites is very helpful, and you might want to design your
code with an eye to making it easily tested.  One increasingly popular
technique, test-directed development, calls for writing parts of the
test suite first, before you write any of the actual code.  Of course
Python allows you to be sloppy and not write test cases at all.


File: python.info,  Node: Why are default values shared between objects?,  Next: Why is there no goto?,  Prev: How do you specify and enforce an interface spec in Python?,  Up: Design and History FAQ

11.3.22 Why are default values shared between objects?
------------------------------------------------------

This type of bug commonly bites neophyte programmers.  Consider this
function:

     def foo(mydict={}):  # Danger: shared reference to one dict for all calls
         ... compute something ...
         mydict[key] = value
         return mydict

  The first time you call this function, ‘mydict’ contains a single
item.  The second time, ‘mydict’ contains two items because when ‘foo()’
begins executing, ‘mydict’ starts out with an item already in it.

  It is often expected that a function call creates new objects for
default values.  This is not what happens.  Default values are created
exactly once, when the function is defined.  If that object is changed,
like the dictionary in this example, subsequent calls to the function
will refer to this changed object.

  By definition, immutable objects such as numbers, strings, tuples, and
‘None’, are safe from change.  Changes to mutable objects such as
dictionaries, lists, and class instances can lead to confusion.

  Because of this feature, it is good programming practice to not use
mutable objects as default values.  Instead, use ‘None’ as the default
value and inside the function, check if the parameter is ‘None’ and
create a new list/dictionary/whatever if it is.  For example, don’t
write:

     def foo(mydict={}):
         ...

  but:

     def foo(mydict=None):
         if mydict is None:
             mydict = {}  # create a new dict for local namespace

  This feature can be useful.  When you have a function that’s
time-consuming to compute, a common technique is to cache the parameters
and the resulting value of each call to the function, and return the
cached value if the same value is requested again.  This is called
"memoizing", and can be implemented like this:

     # Callers will never provide a third parameter for this function.
     def expensive(arg1, arg2, _cache={}):
         if (arg1, arg2) in _cache:
             return _cache[(arg1, arg2)]

         # Calculate the value
         result = ... expensive computation ...
         _cache[(arg1, arg2)] = result           # Store result in the cache
         return result

  You could use a global variable containing a dictionary instead of the
default value; it’s a matter of taste.


File: python.info,  Node: Why is there no goto?,  Next: Why can't raw strings r-strings end with a backslash?,  Prev: Why are default values shared between objects?,  Up: Design and History FAQ

11.3.23 Why is there no goto?
-----------------------------

You can use exceptions to provide a "structured goto" that even works
across function calls.  Many feel that exceptions can conveniently
emulate all reasonable uses of the "go" or "goto" constructs of C,
Fortran, and other languages.  For example:

     class label: pass  # declare a label

     try:
          ...
          if condition: raise label()  # goto label
          ...
     except label:  # where to goto
          pass
     ...

  This doesn’t allow you to jump into the middle of a loop, but that’s
usually considered an abuse of goto anyway.  Use sparingly.


File: python.info,  Node: Why can't raw strings r-strings end with a backslash?,  Next: Why doesn't Python have a "with" statement for attribute assignments?,  Prev: Why is there no goto?,  Up: Design and History FAQ

11.3.24 Why can’t raw strings (r-strings) end with a backslash?
---------------------------------------------------------------

More precisely, they can’t end with an odd number of backslashes: the
unpaired backslash at the end escapes the closing quote character,
leaving an unterminated string.

  Raw strings were designed to ease creating input for processors
(chiefly regular expression engines) that want to do their own backslash
escape processing.  Such processors consider an unmatched trailing
backslash to be an error anyway, so raw strings disallow that.  In
return, they allow you to pass on the string quote character by escaping
it with a backslash.  These rules work well when r-strings are used for
their intended purpose.

  If you’re trying to build Windows pathnames, note that all Windows
system calls accept forward slashes too:

     f = open("/mydir/file.txt")  # works fine!

  If you’re trying to build a pathname for a DOS command, try e.g.  one
of

     dir = r"\this\is\my\dos\dir" "\\"
     dir = r"\this\is\my\dos\dir\ "[:-1]
     dir = "\\this\\is\\my\\dos\\dir\\"


File: python.info,  Node: Why doesn't Python have a "with" statement for attribute assignments?,  Next: Why are colons required for the if/while/def/class statements?,  Prev: Why can't raw strings r-strings end with a backslash?,  Up: Design and History FAQ

11.3.25 Why doesn’t Python have a "with" statement for attribute assignments?
-----------------------------------------------------------------------------

Python has a ’with’ statement that wraps the execution of a block,
calling code on the entrance and exit from the block.  Some language
have a construct that looks like this:

     with obj:
         a = 1               # equivalent to obj.a = 1
         total = total + 1   # obj.total = obj.total + 1

  In Python, such a construct would be ambiguous.

  Other languages, such as Object Pascal, Delphi, and C++, use static
types, so it’s possible to know, in an unambiguous way, what member is
being assigned to.  This is the main point of static typing – the
compiler _always_ knows the scope of every variable at compile time.

  Python uses dynamic types.  It is impossible to know in advance which
attribute will be referenced at runtime.  Member attributes may be added
or removed from objects on the fly.  This makes it impossible to know,
from a simple reading, what attribute is being referenced: a local one,
a global one, or a member attribute?

  For instance, take the following incomplete snippet:

     def foo(a):
         with a:
             print x

  The snippet assumes that "a" must have a member attribute called "x".
However, there is nothing in Python that tells the interpreter this.
What should happen if "a" is, let us say, an integer?  If there is a
global variable named "x", will it be used inside the with block?  As
you see, the dynamic nature of Python makes such choices much harder.

  The primary benefit of "with" and similar language features (reduction
of code volume) can, however, easily be achieved in Python by
assignment.  Instead of:

     function(args).mydict[index][index].a = 21
     function(args).mydict[index][index].b = 42
     function(args).mydict[index][index].c = 63

  write this:

     ref = function(args).mydict[index][index]
     ref.a = 21
     ref.b = 42
     ref.c = 63

  This also has the side-effect of increasing execution speed because
name bindings are resolved at run-time in Python, and the second version
only needs to perform the resolution once.


File: python.info,  Node: Why are colons required for the if/while/def/class statements?,  Next: Why does Python allow commas at the end of lists and tuples?,  Prev: Why doesn't Python have a "with" statement for attribute assignments?,  Up: Design and History FAQ

11.3.26 Why are colons required for the if/while/def/class statements?
----------------------------------------------------------------------

The colon is required primarily to enhance readability (one of the
results of the experimental ABC language).  Consider this:

     if a == b
         print a

  versus

     if a == b:
         print a

  Notice how the second one is slightly easier to read.  Notice further
how a colon sets off the example in this FAQ answer; it’s a standard
usage in English.

  Another minor reason is that the colon makes it easier for editors
with syntax highlighting; they can look for colons to decide when
indentation needs to be increased instead of having to do a more
elaborate parsing of the program text.


File: python.info,  Node: Why does Python allow commas at the end of lists and tuples?,  Prev: Why are colons required for the if/while/def/class statements?,  Up: Design and History FAQ

11.3.27 Why does Python allow commas at the end of lists and tuples?
--------------------------------------------------------------------

Python lets you add a trailing comma at the end of lists, tuples, and
dictionaries:

     [1, 2, 3,]
     ('a', 'b', 'c',)
     d = {
         "A": [1, 5],
         "B": [6, 7],  # last trailing comma is optional but good style
     }

  There are several reasons to allow this.

  When you have a literal value for a list, tuple, or dictionary spread
across multiple lines, it’s easier to add more elements because you
don’t have to remember to add a comma to the previous line.  The lines
can also be reordered without creating a syntax error.

  Accidentally omitting the comma can lead to errors that are hard to
diagnose.  For example:

     x = [
       "fee",
       "fie"
       "foo",
       "fum"
     ]

  This list looks like it has four elements, but it actually contains
three: "fee", "fiefoo" and "fum".  Always adding the comma avoids this
source of error.

  Allowing the trailing comma may also make programmatic code generation
easier.


File: python.info,  Node: Library and Extension FAQ,  Next: Extending/Embedding FAQ,  Prev: Design and History FAQ,  Up: Python Frequently Asked Questions

11.4 Library and Extension FAQ
==============================

* Menu:

* General Library Questions:: 
* Common tasks:: 
* Threads:: 
* Input and Output: Input and Output<2>. 
* Network/Internet Programming:: 
* Databases:: 
* Mathematics and Numerics:: 

General Library Questions

* How do I find a module or application to perform task X?:: 
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?. 
* How do I make a Python script executable on Unix?:: 
* Is there a curses/termcap package for Python?:: 
* Is there an equivalent to C’s onexit() in Python?: Is there an equivalent to C's onexit in Python?. 
* Why don't my signal handlers work?:: 

Common tasks

* How do I test a Python program or component?:: 
* How do I create documentation from doc strings?:: 
* How do I get a single keypress at a time?:: 

Threads

* How do I program using threads?:: 
* None of my threads seem to run; why?: None of my threads seem to run why?. 
* How do I parcel out work among a bunch of worker threads?:: 
* What kinds of global value mutation are thread-safe?:: 
* Can't we get rid of the Global Interpreter Lock?:: 

Input and Output

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions. 
* How do I copy a file?:: 
* How do I read (or write) binary data?: How do I read or write binary data?. 
* I can’t seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?. 
* How do I run a subprocess with pipes connected to both input and output?:: 
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?. 
* Why doesn’t closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?. 

Network/Internet Programming

* What WWW tools are there for Python?:: 
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?. 
* What module should I use to help with generating HTML?:: 
* How do I send mail from a Python script?:: 
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?. 

Databases

* Are there any interfaces to database packages in Python?:: 
* How do you implement persistent objects in Python?:: 
* Why is cPickle so slow?:: 
* If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?. 
* I tried to open Berkeley DB file, but bsddb produces bsddb.error; (22, ’Invalid argument’). Help! How can I restore my data?: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?. 

Mathematics and Numerics

* How do I generate random numbers in Python?:: 


File: python.info,  Node: General Library Questions,  Next: Common tasks,  Up: Library and Extension FAQ

11.4.1 General Library Questions
--------------------------------

* Menu:

* How do I find a module or application to perform task X?:: 
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?. 
* How do I make a Python script executable on Unix?:: 
* Is there a curses/termcap package for Python?:: 
* Is there an equivalent to C’s onexit() in Python?: Is there an equivalent to C's onexit in Python?. 
* Why don't my signal handlers work?:: 


File: python.info,  Node: How do I find a module or application to perform task X?,  Next: Where is the math py socket py regex py etc source file?,  Up: General Library Questions

11.4.1.1 How do I find a module or application to perform task X?
.................................................................

Check *note the Library Reference: 4f8. to see if there’s a relevant
standard library module.  (Eventually you’ll learn what’s in the
standard library and will be able to skip this step.)

  For third-party packages, search the Python Package Index(1) or try
Google(2) or another Web search engine.  Searching for "Python" plus a
keyword or two for your topic of interest will usually find something
helpful.

   ---------- Footnotes ----------

   (1) http://pypi.python.org/pypi

   (2) http://www.google.com


File: python.info,  Node: Where is the math py socket py regex py etc source file?,  Next: How do I make a Python script executable on Unix?,  Prev: How do I find a module or application to perform task X?,  Up: General Library Questions

11.4.1.2 Where is the math.py (socket.py, regex.py, etc.) source file?
......................................................................

If you can’t find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled
language.  In this case you may not have the source file or it may be
something like ‘mathmodule.c’, somewhere in a C source directory (not on
the Python Path).

  There are (at least) three kinds of modules in Python:

  1. modules written in Python (.py);

  2. modules written in C and dynamically loaded (.dll, .pyd, .so, .sl,
     etc);

  3. modules written in C and linked with the interpreter; to get a list
     of these, type:

          import sys
          print sys.builtin_module_names


File: python.info,  Node: How do I make a Python script executable on Unix?,  Next: Is there a curses/termcap package for Python?,  Prev: Where is the math py socket py regex py etc source file?,  Up: General Library Questions

11.4.1.3 How do I make a Python script executable on Unix?
..........................................................

You need to do two things: the script file’s mode must be executable and
the first line must begin with ‘#!’ followed by the path of the Python
interpreter.

  The first is done by executing ‘chmod +x scriptfile’ or perhaps ‘chmod
755 scriptfile’.

  The second can be done in a number of ways.  The most straightforward
way is to write

     #!/usr/local/bin/python

  as the very first line of your file, using the pathname for where the
Python interpreter is installed on your platform.

  If you would like the script to be independent of where the Python
interpreter lives, you can use the *env* program.  Almost all Unix
variants support the following, assuming the Python interpreter is in a
directory on the user’s ‘PATH’:

     #!/usr/bin/env python

  _Don’t_ do this for CGI scripts.  The ‘PATH’ variable for CGI scripts
is often very minimal, so you need to use the actual absolute pathname
of the interpreter.

  Occasionally, a user’s environment is so full that the */usr/bin/env*
program fails; or there’s no env program at all.  In that case, you can
try the following hack (due to Alex Rezinsky):

     #! /bin/sh
     """:"
     exec python $0 ${1+"$@"}
     """

  The minor disadvantage is that this defines the script’s __doc__
string.  However, you can fix that by adding

     __doc__ = """...Whatever..."""


File: python.info,  Node: Is there a curses/termcap package for Python?,  Next: Is there an equivalent to C's onexit in Python?,  Prev: How do I make a Python script executable on Unix?,  Up: General Library Questions

11.4.1.4 Is there a curses/termcap package for Python?
......................................................

For Unix variants the standard Python source distribution comes with a
curses module in the Modules(1) subdirectory, though it’s not compiled
by default.  (Note that this is not available in the Windows
distribution – there is no curses module for Windows.)

  The *note curses: 79. module supports basic curses features as well as
many additional functions from ncurses and SYSV curses such as colour,
alternative character set support, pads, and mouse support.  This means
the module isn’t compatible with operating systems that only have BSD
curses, but there don’t seem to be any currently maintained OSes that
fall into this category.

  For Windows: use the consolelib module(2).

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Modules

   (2) http://effbot.org/zone/console-index.htm


File: python.info,  Node: Is there an equivalent to C's onexit in Python?,  Next: Why don't my signal handlers work?,  Prev: Is there a curses/termcap package for Python?,  Up: General Library Questions

11.4.1.5 Is there an equivalent to C’s onexit() in Python?
..........................................................

The *note atexit: 12. module provides a register function that is
similar to C’s ‘onexit()’.


File: python.info,  Node: Why don't my signal handlers work?,  Prev: Is there an equivalent to C's onexit in Python?,  Up: General Library Questions

11.4.1.6 Why don’t my signal handlers work?
...........................................

The most common problem is that the signal handler is declared with the
wrong argument list.  It is called as

     handler(signum, frame)

  so it should be declared with two arguments:

     def handler(signum, frame):
         ...


File: python.info,  Node: Common tasks,  Next: Threads,  Prev: General Library Questions,  Up: Library and Extension FAQ

11.4.2 Common tasks
-------------------

* Menu:

* How do I test a Python program or component?:: 
* How do I create documentation from doc strings?:: 
* How do I get a single keypress at a time?:: 


File: python.info,  Node: How do I test a Python program or component?,  Next: How do I create documentation from doc strings?,  Up: Common tasks

11.4.2.1 How do I test a Python program or component?
.....................................................

Python comes with two testing frameworks.  The *note doctest: b5. module
finds examples in the docstrings for a module and runs them, comparing
the output with the expected output given in the docstring.

  The *note unittest: 187. module is a fancier testing framework
modelled on Java and Smalltalk testing frameworks.

  To make testing easier, you should use good modular design in your
program.  Your program should have almost all functionality encapsulated
in either functions or class methods – and this sometimes has the
surprising and delightful effect of making the program run faster
(because local variable accesses are faster than global accesses).
Furthermore the program should avoid depending on mutating global
variables, since this makes testing much more difficult to do.

  The "global main logic" of your program may be as simple as

     if __name__ == "__main__":
         main_logic()

  at the bottom of the main module of your program.

  Once your program is organized as a tractable collection of functions
and class behaviours you should write test functions that exercise the
behaviours.  A test suite that automates a sequence of tests can be
associated with each module.  This sounds like a lot of work, but since
Python is so terse and flexible it’s surprisingly easy.  You can make
coding much more pleasant and fun by writing your test functions in
parallel with the "production code", since this makes it easy to find
bugs and even design flaws earlier.

  "Support modules" that are not intended to be the main module of a
program may include a self-test of the module.

     if __name__ == "__main__":
         self_test()

  Even programs that interact with complex external interfaces may be
tested when the external interfaces are unavailable by using "fake"
interfaces implemented in Python.


File: python.info,  Node: How do I create documentation from doc strings?,  Next: How do I get a single keypress at a time?,  Prev: How do I test a Python program or component?,  Up: Common tasks

11.4.2.2 How do I create documentation from doc strings?
........................................................

The *note pydoc: 13f. module can create HTML from the doc strings in
your Python source code.  An alternative for creating API documentation
purely from docstrings is epydoc(1).  Sphinx(2) can also include
docstring content.

   ---------- Footnotes ----------

   (1) http://epydoc.sf.net/

   (2) http://sphinx.pocoo.org


File: python.info,  Node: How do I get a single keypress at a time?,  Prev: How do I create documentation from doc strings?,  Up: Common tasks

11.4.2.3 How do I get a single keypress at a time?
..................................................

For Unix variants there are several solutions.  It’s straightforward to
do this using curses, but curses is a fairly large module to learn.
Here’s a solution without curses:

     import termios, fcntl, sys, os
     fd = sys.stdin.fileno()

     oldterm = termios.tcgetattr(fd)
     newattr = termios.tcgetattr(fd)
     newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
     termios.tcsetattr(fd, termios.TCSANOW, newattr)

     oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
     fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

     try:
         while 1:
             try:
                 c = sys.stdin.read(1)
                 print "Got character", repr(c)
             except IOError: pass
     finally:
         termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
         fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

  You need the *note termios: 174. and the *note fcntl: ca. module for
any of this to work, and I’ve only tried it on Linux, though it should
work elsewhere.  In this code, characters are read and printed one at a
time.

  *note termios.tcsetattr(): 27a5. turns off stdin’s echoing and
disables canonical mode.  ‘fcntl.fnctl()’ is used to obtain stdin’s file
descriptor flags and modify them for non-blocking mode.  Since reading
stdin when it is empty results in an *note IOError: 1fa, this error is
caught and ignored.


File: python.info,  Node: Threads,  Next: Input and Output<2>,  Prev: Common tasks,  Up: Library and Extension FAQ

11.4.3 Threads
--------------

* Menu:

* How do I program using threads?:: 
* None of my threads seem to run; why?: None of my threads seem to run why?. 
* How do I parcel out work among a bunch of worker threads?:: 
* What kinds of global value mutation are thread-safe?:: 
* Can't we get rid of the Global Interpreter Lock?:: 


File: python.info,  Node: How do I program using threads?,  Next: None of my threads seem to run why?,  Up: Threads

11.4.3.1 How do I program using threads?
........................................

Be sure to use the *note threading: 179. module and not the *note
thread: 178. module.  The *note threading: 179. module builds convenient
abstractions on top of the low-level primitives provided by the *note
thread: 178. module.

  Aahz has a set of slides from his threading tutorial that are helpful;
see ‘http://www.pythoncraft.com/OSCON2001/’.


File: python.info,  Node: None of my threads seem to run why?,  Next: How do I parcel out work among a bunch of worker threads?,  Prev: How do I program using threads?,  Up: Threads

11.4.3.2 None of my threads seem to run: why?
.............................................

As soon as the main thread exits, all threads are killed.  Your main
thread is running too quickly, giving the threads no time to do any
work.

  A simple fix is to add a sleep to the end of the program that’s long
enough for all the threads to finish:

     import threading, time

     def thread_task(name, n):
         for i in range(n): print name, i

     for i in range(10):
         T = threading.Thread(target=thread_task, args=(str(i), i))
         T.start()

     time.sleep(10) # <----------------------------!

  But now (on many platforms) the threads don’t run in parallel, but
appear to run sequentially, one at a time!  The reason is that the OS
thread scheduler doesn’t start a new thread until the previous thread is
blocked.

  A simple fix is to add a tiny sleep to the start of the run function:

     def thread_task(name, n):
         time.sleep(0.001) # <---------------------!
         for i in range(n): print name, i

     for i in range(10):
         T = threading.Thread(target=thread_task, args=(str(i), i))
         T.start()

     time.sleep(10)

  Instead of trying to guess a good delay value for *note time.sleep():
11f1, it’s better to use some kind of semaphore mechanism.  One idea is
to use the *note Queue: 140. module to create a queue object, let each
thread append a token to the queue when it finishes, and let the main
thread read as many tokens from the queue as there are threads.


File: python.info,  Node: How do I parcel out work among a bunch of worker threads?,  Next: What kinds of global value mutation are thread-safe?,  Prev: None of my threads seem to run why?,  Up: Threads

11.4.3.3 How do I parcel out work among a bunch of worker threads?
..................................................................

Use the *note Queue: 140. module to create a queue containing a list of
jobs.  The *note Queue: 609. class maintains a list of objects and has a
‘.put(obj)’ method that adds items to the queue and a ‘.get()’ method to
return them.  The class will take care of the locking necessary to
ensure that each job is handed out exactly once.

  Here’s a trivial example:

     import threading, Queue, time

     # The worker thread gets jobs off the queue.  When the queue is empty, it
     # assumes there will be no more work and exits.
     # (Realistically workers will run until terminated.)
     def worker():
         print 'Running worker'
         time.sleep(0.1)
         while True:
             try:
                 arg = q.get(block=False)
             except Queue.Empty:
                 print 'Worker', threading.currentThread(),
                 print 'queue empty'
                 break
             else:
                 print 'Worker', threading.currentThread(),
                 print 'running with argument', arg
                 time.sleep(0.5)

     # Create queue
     q = Queue.Queue()

     # Start a pool of 5 workers
     for i in range(5):
         t = threading.Thread(target=worker, name='worker %i' % (i+1))
         t.start()

     # Begin adding work to the queue
     for i in range(50):
         q.put(i)

     # Give threads time to run
     print 'Main thread sleeping'
     time.sleep(5)

  When run, this will produce the following output:

     Running worker
     Running worker
     Running worker
     Running worker
     Running worker
     Main thread sleeping
     Worker <Thread(worker 1, started)> running with argument 0
     Worker <Thread(worker 2, started)> running with argument 1
     Worker <Thread(worker 3, started)> running with argument 2
     Worker <Thread(worker 4, started)> running with argument 3
     Worker <Thread(worker 5, started)> running with argument 4
     Worker <Thread(worker 1, started)> running with argument 5
     ...

  Consult the module’s documentation for more details; the *note Queue:
609. class provides a featureful interface.


File: python.info,  Node: What kinds of global value mutation are thread-safe?,  Next: Can't we get rid of the Global Interpreter Lock?,  Prev: How do I parcel out work among a bunch of worker threads?,  Up: Threads

11.4.3.4 What kinds of global value mutation are thread-safe?
.............................................................

A *note global interpreter lock: 154e. (GIL) is used internally to
ensure that only one thread runs in the Python VM at a time.  In
general, Python offers to switch among threads only between bytecode
instructions; how frequently it switches can be set via *note
sys.setcheckinterval(): 23bd.  Each bytecode instruction and therefore
all the C implementation code reached from each instruction is therefore
atomic from the point of view of a Python program.

  In theory, this means an exact accounting requires an exact
understanding of the PVM bytecode implementation.  In practice, it means
that operations on shared variables of built-in data types (ints, lists,
dicts, etc) that "look atomic" really are.

  For example, the following operations are all atomic (L, L1, L2 are
lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):

     L.append(x)
     L1.extend(L2)
     x = L[i]
     x = L.pop()
     L1[i:j] = L2
     L.sort()
     x = y
     x.field = y
     D[x] = y
     D1.update(D2)
     D.keys()

  These aren’t:

     i = i+1
     L.append(L[-1])
     L[i] = L[j]
     D[x] = D[x] + 1

  Operations that replace other objects may invoke those other objects’
*note __del__(): 709. method when their reference count reaches zero,
and that can affect things.  This is especially true for the mass
updates to dictionaries and lists.  When in doubt, use a mutex!


File: python.info,  Node: Can't we get rid of the Global Interpreter Lock?,  Prev: What kinds of global value mutation are thread-safe?,  Up: Threads

11.4.3.5 Can’t we get rid of the Global Interpreter Lock?
.........................................................

The *note global interpreter lock: 154e. (GIL) is often seen as a
hindrance to Python’s deployment on high-end multiprocessor server
machines, because a multi-threaded Python program effectively only uses
one CPU, due to the insistence that (almost) all Python code can only
run while the GIL is held.

  Back in the days of Python 1.5, Greg Stein actually implemented a
comprehensive patch set (the "free threading" patches) that removed the
GIL and replaced it with fine-grained locking.  Unfortunately, even on
Windows (where locks are very efficient) this ran ordinary Python code
about twice as slow as the interpreter using the GIL. On Linux the
performance loss was even worse because pthread locks aren’t as
efficient.

  Since then, the idea of getting rid of the GIL has occasionally come
up but nobody has found a way to deal with the expected slowdown, and
users who don’t use threads would not be happy if their code ran at half
the speed.  Greg’s free threading patch set has not been kept up-to-date
for later Python versions.

  This doesn’t mean that you can’t make good use of Python on multi-CPU
machines!  You just have to be creative with dividing the work up
between multiple _processes_ rather than multiple _threads_.  Judicious
use of C extensions will also help; if you use a C extension to perform
a time-consuming task, the extension can release the GIL while the
thread of execution is in the C code and allow other threads to get some
work done.

  It has been suggested that the GIL should be a per-interpreter-state
lock rather than truly global; interpreters then wouldn’t be able to
share objects.  Unfortunately, this isn’t likely to happen either.  It
would be a tremendous amount of work, because many object
implementations currently have global state.  For example, small
integers and short strings are cached; these caches would have to be
moved to the interpreter state.  Other object types have their own free
list; these free lists would have to be moved to the interpreter state.
And so on.

  And I doubt that it can even be done in finite time, because the same
problem exists for 3rd party extensions.  It is likely that 3rd party
extensions are being written at a faster rate than you can convert them
to store all their global state in the interpreter state.

  And finally, once you have multiple interpreters not sharing any
state, what have you gained over running each interpreter in a separate
process?


File: python.info,  Node: Input and Output<2>,  Next: Network/Internet Programming,  Prev: Threads,  Up: Library and Extension FAQ

11.4.4 Input and Output
-----------------------

* Menu:

* How do I delete a file? (And other file questions...): How do I delete a file? And other file questions. 
* How do I copy a file?:: 
* How do I read (or write) binary data?: How do I read or write binary data?. 
* I can’t seem to use os.read() on a pipe created with os.popen(); why?: I can't seem to use os read on a pipe created with os popen ; why?. 
* How do I run a subprocess with pipes connected to both input and output?:: 
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?. 
* Why doesn’t closing sys.stdout (stdin, stderr) really close it?: Why doesn't closing sys stdout stdin stderr really close it?. 


File: python.info,  Node: How do I delete a file? And other file questions,  Next: How do I copy a file?,  Up: Input and Output<2>

11.4.4.1 How do I delete a file? (And other file questions...)
..............................................................

Use ‘os.remove(filename)’ or ‘os.unlink(filename)’; for documentation,
see the *note os: 128. module.  The two functions are identical;
‘unlink()’ is simply the name of the Unix system call for this function.

  To remove a directory, use *note os.rmdir(): ead.; use *note
os.mkdir(): 114f. to create one.  ‘os.makedirs(path)’ will create any
intermediate directories in ‘path’ that don’t exist.
‘os.removedirs(path)’ will remove intermediate directories as long as
they’re empty; if you want to delete an entire directory tree and its
contents, use *note shutil.rmtree(): eab.

  To rename a file, use ‘os.rename(old_path, new_path)’.

  To truncate a file, open it using ‘f = open(filename, "r+")’, and use
‘f.truncate(offset)’; offset defaults to the current seek position.
There’s also ‘os.ftruncate(fd, offset)’ for files opened with *note
os.open(): 5e4, where _fd_ is the file descriptor (a small integer).

  The *note shutil: 154. module also contains a number of functions to
work on files including *note copyfile(): 24c, *note copytree(): 24d,
and *note rmtree(): eab.


File: python.info,  Node: How do I copy a file?,  Next: How do I read or write binary data?,  Prev: How do I delete a file? And other file questions,  Up: Input and Output<2>

11.4.4.2 How do I copy a file?
..............................

The *note shutil: 154. module contains a *note copyfile(): 24c.
function.  Note that on MacOS 9 it doesn’t copy the resource fork and
Finder info.


File: python.info,  Node: How do I read or write binary data?,  Next: I can't seem to use os read on a pipe created with os popen ; why?,  Prev: How do I copy a file?,  Up: Input and Output<2>

11.4.4.3 How do I read (or write) binary data?
..............................................

To read or write complex binary data formats, it’s best to use the *note
struct: 166. module.  It allows you to take a string containing binary
data (usually numbers) and convert it to Python objects; and vice versa.

  For example, the following code reads two 2-byte integers and one
4-byte integer in big-endian format from a file:

     import struct

     f = open(filename, "rb")  # Open in binary mode for portability
     s = f.read(8)
     x, y, z = struct.unpack(">hhl", s)

  The ’>’ in the format string forces big-endian data; the letter ’h’
reads one "short integer" (2 bytes), and ’l’ reads one "long integer" (4
bytes) from the string.

  For data that is more regular (e.g.  a homogeneous list of ints or
floats), you can also use the *note array: e. module.


File: python.info,  Node: I can't seem to use os read on a pipe created with os popen ; why?,  Next: How do I run a subprocess with pipes connected to both input and output?,  Prev: How do I read or write binary data?,  Up: Input and Output<2>

11.4.4.4 I can’t seem to use os.read() on a pipe created with os.popen(); why?
..............................................................................

*note os.read(): 90c. is a low-level function which takes a file
descriptor, a small integer representing the opened file.  *note
os.popen(): 700. creates a high-level file object, the same type
returned by the built-in *note open(): 2d6. function.  Thus, to read _n_
bytes from a pipe _p_ created with *note os.popen(): 700, you need to
use ‘p.read(n)’.


File: python.info,  Node: How do I run a subprocess with pipes connected to both input and output?,  Next: How do I access the serial RS232 port?,  Prev: I can't seem to use os read on a pipe created with os popen ; why?,  Up: Input and Output<2>

11.4.4.5 How do I run a subprocess with pipes connected to both input and output?
.................................................................................

Use the *note popen2: 134. module.  For example:

     import popen2
     fromchild, tochild = popen2.popen2("command")
     tochild.write("input\n")
     tochild.flush()
     output = fromchild.readline()

  Warning: in general it is unwise to do this because you can easily
cause a deadlock where your process is blocked waiting for output from
the child while the child is blocked waiting for input from you.  This
can be caused by the parent expecting the child to output more text than
it does or by data being stuck in stdio buffers due to lack of flushing.
The Python parent can of course explicitly flush the data it sends to
the child before it reads any output, but if the child is a naive C
program it may have been written to never explicitly flush its output,
even if it is interactive, since flushing is normally automatic.

  Note that a deadlock is also possible if you use ‘popen3()’ to read
stdout and stderr.  If one of the two is too large for the internal
buffer (increasing the buffer size does not help) and you ‘read()’ the
other one first, there is a deadlock, too.

  Note on a bug in popen2: unless your program calls ‘wait()’ or
‘waitpid()’, finished child processes are never removed, and eventually
calls to popen2 will fail because of a limit on the number of child
processes.  Calling *note os.waitpid(): 1186. with the *note os.WNOHANG:
118e. option can prevent this; a good place to insert such a call would
be before calling ‘popen2’ again.

  In many cases, all you really need is to run some data through a
command and get the result back.  Unless the amount of data is very
large, the easiest way to do this is to write it to a temporary file and
run the command with that temporary file as input.  The standard module
*note tempfile: 173. exports a *note mktemp(): e8a. function to generate
unique temporary file names.

     import tempfile
     import os

     class Popen3:
         """
         This is a deadlock-safe version of popen that returns
         an object with errorlevel, out (a string) and err (a string).
         (capturestderr may not work under windows.)
         Example: print Popen3('grep spam','\n\nhere spam\n\n').out
         """
         def __init__(self,command,input=None,capturestderr=None):
             outfile=tempfile.mktemp()
             command="( %s ) > %s" % (command,outfile)
             if input:
                 infile=tempfile.mktemp()
                 open(infile,"w").write(input)
                 command=command+" <"+infile
             if capturestderr:
                 errfile=tempfile.mktemp()
                 command=command+" 2>"+errfile
             self.errorlevel=os.system(command) >> 8
             self.out=open(outfile,"r").read()
             os.remove(outfile)
             if input:
                 os.remove(infile)
             if capturestderr:
                 self.err=open(errfile,"r").read()
                 os.remove(errfile)

  Note that many interactive programs (e.g.  vi) don’t work well with
pipes substituted for standard input and output.  You will have to use
pseudo ttys ("ptys") instead of pipes.  Or you can use a Python
interface to Don Libes’ "expect" library.  A Python extension that
interfaces to expect is called "expy" and available from
‘http://expectpy.sourceforge.net’.  A pure Python solution that works
like expect is pexpect(1).

   ---------- Footnotes ----------

   (1) http://pypi.python.org/pypi/pexpect/


File: python.info,  Node: How do I access the serial RS232 port?,  Next: Why doesn't closing sys stdout stdin stderr really close it?,  Prev: How do I run a subprocess with pipes connected to both input and output?,  Up: Input and Output<2>

11.4.4.6 How do I access the serial (RS232) port?
.................................................

For Win32, POSIX (Linux, BSD, etc.), Jython:

     ‘http://pyserial.sourceforge.net’

  For Unix, see a Usenet post by Mitch Chapman:

     ‘http://groups.google.com/groups?selm=34A04430.CF9@ohioee.com’


File: python.info,  Node: Why doesn't closing sys stdout stdin stderr really close it?,  Prev: How do I access the serial RS232 port?,  Up: Input and Output<2>

11.4.4.7 Why doesn’t closing sys.stdout (stdin, stderr) really close it?
........................................................................

Python file objects are a high-level layer of abstraction on top of C
streams, which in turn are a medium-level layer of abstraction on top of
(among other things) low-level C file descriptors.

  For most file objects you create in Python via the built-in ‘file’
constructor, ‘f.close()’ marks the Python file object as being closed
from Python’s point of view, and also arranges to close the underlying C
stream.  This also happens automatically in ‘f’’s destructor, when ‘f’
becomes garbage.

  But stdin, stdout and stderr are treated specially by Python, because
of the special status also given to them by C. Running
‘sys.stdout.close()’ marks the Python-level file object as being closed,
but does _not_ close the associated C stream.

  To close the underlying C stream for one of these three, you should
first be sure that’s what you really want to do (e.g., you may confuse
extension modules trying to do I/O). If it is, use os.close:

     os.close(0)   # close C's stdin stream
     os.close(1)   # close C's stdout stream
     os.close(2)   # close C's stderr stream


File: python.info,  Node: Network/Internet Programming,  Next: Databases,  Prev: Input and Output<2>,  Up: Library and Extension FAQ

11.4.5 Network/Internet Programming
-----------------------------------

* Menu:

* What WWW tools are there for Python?:: 
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?. 
* What module should I use to help with generating HTML?:: 
* How do I send mail from a Python script?:: 
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?. 


File: python.info,  Node: What WWW tools are there for Python?,  Next: How can I mimic CGI form submission METHOD=POST ?,  Up: Network/Internet Programming

11.4.5.1 What WWW tools are there for Python?
.............................................

See the chapters titled *note Internet Protocols and Support: 1bce. and
*note Internet Data Handling: 17c9. in the Library Reference Manual.
Python has many modules that will help you build server-side and
client-side web systems.

  A summary of available frameworks is maintained by Paul Boddie at
‘http://wiki.python.org/moin/WebProgramming’.

  Cameron Laird maintains a useful set of pages about Python web
technologies at ‘http://phaseit.net/claird/comp.lang.python/web_python’.


File: python.info,  Node: How can I mimic CGI form submission METHOD=POST ?,  Next: What module should I use to help with generating HTML?,  Prev: What WWW tools are there for Python?,  Up: Network/Internet Programming

11.4.5.2 How can I mimic CGI form submission (METHOD=POST)?
...........................................................

I would like to retrieve web pages that are the result of POSTing a
form.  Is there existing code that would let me do this easily?

  Yes.  Here’s a simple example that uses httplib:

     #!/usr/local/bin/python

     import httplib, sys, time

     ### build the query string
     qs = "First=Josephine&MI=Q&Last=Public"

     ### connect and send the server a path
     httpobj = httplib.HTTP('www.some-server.out-there', 80)
     httpobj.putrequest('POST', '/cgi-bin/some-cgi-script')
     ### now generate the rest of the HTTP headers...
     httpobj.putheader('Accept', '*/*')
     httpobj.putheader('Connection', 'Keep-Alive')
     httpobj.putheader('Content-type', 'application/x-www-form-urlencoded')
     httpobj.putheader('Content-length', '%d' % len(qs))
     httpobj.endheaders()
     httpobj.send(qs)
     ### find out what the server said in response...
     reply, msg, hdrs = httpobj.getreply()
     if reply != 200:
         sys.stdout.write(httpobj.getfile().read())

  Note that in general for percent-encoded POST operations, query
strings must be quoted using *note urllib.urlencode(): 1383.  For
example, to send ‘name=Guy Steele, Jr.’:

     >>> import urllib
     >>> urllib.urlencode({'name': 'Guy Steele, Jr.'})
     'name=Guy+Steele%2C+Jr.'


File: python.info,  Node: What module should I use to help with generating HTML?,  Next: How do I send mail from a Python script?,  Prev: How can I mimic CGI form submission METHOD=POST ?,  Up: Network/Internet Programming

11.4.5.3 What module should I use to help with generating HTML?
...............................................................

You can find a collection of useful links on the Web Programming wiki
page(1).

   ---------- Footnotes ----------

   (1) http://wiki.python.org/moin/WebProgramming


File: python.info,  Node: How do I send mail from a Python script?,  Next: How do I avoid blocking in the connect method of a socket?,  Prev: What module should I use to help with generating HTML?,  Up: Network/Internet Programming

11.4.5.4 How do I send mail from a Python script?
.................................................

Use the standard library module *note smtplib: 15a.

  Here’s a very simple interactive mail sender that uses it.  This
method will work on any host that supports an SMTP listener.

     import sys, smtplib

     fromaddr = raw_input("From: ")
     toaddrs  = raw_input("To: ").split(',')
     print "Enter message, end with ^D:"
     msg = ''
     while True:
         line = sys.stdin.readline()
         if not line:
             break
         msg += line

     # The actual mail send
     server = smtplib.SMTP('localhost')
     server.sendmail(fromaddr, toaddrs, msg)
     server.quit()

  A Unix-only alternative uses sendmail.  The location of the sendmail
program varies between systems; sometimes it is ‘/usr/lib/sendmail’,
sometimes ‘/usr/sbin/sendmail’.  The sendmail manual page will help you
out.  Here’s some sample code:

     SENDMAIL = "/usr/sbin/sendmail" # sendmail location
     import os
     p = os.popen("%s -t -i" % SENDMAIL, "w")
     p.write("To: receiver@example.com\n")
     p.write("Subject: test\n")
     p.write("\n") # blank line separating headers from body
     p.write("Some text\n")
     p.write("some more text\n")
     sts = p.close()
     if sts != 0:
         print "Sendmail exit status", sts


File: python.info,  Node: How do I avoid blocking in the connect method of a socket?,  Prev: How do I send mail from a Python script?,  Up: Network/Internet Programming

11.4.5.5 How do I avoid blocking in the connect() method of a socket?
.....................................................................

The select module is commonly used to help with asynchronous I/O on
sockets.

  To prevent the TCP connect from blocking, you can set the socket to
non-blocking mode.  Then when you do the ‘connect()’, you will either
connect immediately (unlikely) or get an exception that contains the
error number as ‘.errno’.  ‘errno.EINPROGRESS’ indicates that the
connection is in progress, but hasn’t finished yet.  Different OSes will
return different values, so you’re going to have to check what’s
returned on your system.

  You can use the ‘connect_ex()’ method to avoid creating an exception.
It will just return the errno value.  To poll, you can call
‘connect_ex()’ again later – 0 or ‘errno.EISCONN’ indicate that you’re
connected – or you can pass this socket to select to check if it’s
writable.


File: python.info,  Node: Databases,  Next: Mathematics and Numerics,  Prev: Network/Internet Programming,  Up: Library and Extension FAQ

11.4.6 Databases
----------------

* Menu:

* Are there any interfaces to database packages in Python?:: 
* How do you implement persistent objects in Python?:: 
* Why is cPickle so slow?:: 
* If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?. 
* I tried to open Berkeley DB file, but bsddb produces bsddb.error; (22, ’Invalid argument’). Help! How can I restore my data?: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?. 


File: python.info,  Node: Are there any interfaces to database packages in Python?,  Next: How do you implement persistent objects in Python?,  Up: Databases

11.4.6.1 Are there any interfaces to database packages in Python?
.................................................................

Yes.

  Python 2.3 includes the *note bsddb: 1c. package which provides an
interface to the BerkeleyDB library.  Interfaces to disk-based hashes
such as *note DBM: 7f. and *note GDBM: dc. are also included with
standard Python.

  Support for most relational databases is available.  See the
DatabaseProgramming wiki page(1) for details.

   ---------- Footnotes ----------

   (1) http://wiki.python.org/moin/DatabaseProgramming


File: python.info,  Node: How do you implement persistent objects in Python?,  Next: Why is cPickle so slow?,  Prev: Are there any interfaces to database packages in Python?,  Up: Databases

11.4.6.2 How do you implement persistent objects in Python?
...........................................................

The *note pickle: 12d. library module solves this in a very general way
(though you still can’t store things like open files, sockets or
windows), and the *note shelve: 152. library module uses pickle and
(g)dbm to create persistent mappings containing arbitrary Python
objects.  For better performance, you can use the *note cPickle: 73.
module.

  A more awkward way of doing things is to use pickle’s little sister,
marshal.  The *note marshal: 10b. module provides very fast ways to
store noncircular basic Python types to files and strings, and back
again.  Although marshal does not do fancy things like store instances
or handle shared references properly, it does run extremely fast.  For
example, loading a half megabyte of data may take less than a third of a
second.  This often beats doing something more complex and general such
as using gdbm with pickle/shelve.


File: python.info,  Node: Why is cPickle so slow?,  Next: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Prev: How do you implement persistent objects in Python?,  Up: Databases

11.4.6.3 Why is cPickle so slow?
................................

By default *note pickle: 12d. uses a relatively old and slow format for
backward compatibility.  You can however specify other protocol versions
that are faster:

     largeString = 'z' * (100 * 1024)
     myPickle = cPickle.dumps(largeString, protocol=1)


File: python.info,  Node: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Next: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?,  Prev: Why is cPickle so slow?,  Up: Databases

11.4.6.4 If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?
...................................................................................................

Databases opened for write access with the bsddb module (and often by
the anydbm module, since it will preferentially use bsddb) must
explicitly be closed using the ‘.close()’ method of the database.  The
underlying library caches database contents which need to be converted
to on-disk form and written.

  If you have initialized a new bsddb database but not written anything
to it before the program crashes, you will often wind up with a
zero-length file and encounter an exception the next time the file is
opened.


File: python.info,  Node: I tried to open Berkeley DB file but bsddb produces bsddb error 22 'Invalid argument' Help! How can I restore my data?,  Prev: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Up: Databases

11.4.6.5 I tried to open Berkeley DB file, but bsddb produces bsddb.error: (22, ’Invalid argument’). Help! How can I restore my data?
.....................................................................................................................................

Don’t panic!  Your data is probably intact.  The most frequent cause for
the error is that you tried to open an earlier Berkeley DB file with a
later version of the Berkeley DB library.

  Many Linux systems now have all three versions of Berkeley DB
available.  If you are migrating from version 1 to a newer version use
db_dump185 to dump a plain text version of the database.  If you are
migrating from version 2 to version 3 use db2_dump to create a plain
text version of the database.  In either case, use db_load to create a
new native database for the latest version installed on your computer.
If you have version 3 of Berkeley DB installed, you should be able to
use db2_load to create a native version 2 database.

  You should move away from Berkeley DB version 1 files because the hash
file code contains known bugs that can corrupt your data.


File: python.info,  Node: Mathematics and Numerics,  Prev: Databases,  Up: Library and Extension FAQ

11.4.7 Mathematics and Numerics
-------------------------------

* Menu:

* How do I generate random numbers in Python?:: 


File: python.info,  Node: How do I generate random numbers in Python?,  Up: Mathematics and Numerics

11.4.7.1 How do I generate random numbers in Python?
....................................................

The standard module *note random: 142. implements a random number
generator.  Usage is simple:

     import random
     random.random()

  This returns a random floating point number in the range [0, 1).

  There are also many other specialized generators in this module, such
as:

   * ‘randrange(a, b)’ chooses an integer in the range [a, b).

   * ‘uniform(a, b)’ chooses a floating point number in the range [a,
     b).

   * ‘normalvariate(mean, sdev)’ samples the normal (Gaussian)
     distribution.

  Some higher-level functions operate on sequences directly, such as:

   * ‘choice(S)’ chooses random element from a given sequence

   * ‘shuffle(L)’ shuffles a list in-place, i.e.  permutes it randomly

  There’s also a ‘Random’ class you can instantiate to create
independent multiple random number generators.


File: python.info,  Node: Extending/Embedding FAQ,  Next: Python on Windows FAQ,  Prev: Library and Extension FAQ,  Up: Python Frequently Asked Questions

11.5 Extending/Embedding FAQ
============================

* Menu:

* Can I create my own functions in C?:: 
* Can I create my own functions in C++?:: 
* Writing C is hard; are there any alternatives?:: 
* How can I execute arbitrary Python statements from C?:: 
* How can I evaluate an arbitrary Python expression from C?:: 
* How do I extract C values from a Python object?:: 
* How do I use Py_BuildValue() to create a tuple of arbitrary length?: How do I use Py_BuildValue to create a tuple of arbitrary length?. 
* How do I call an object's method from C?:: 
* How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?. 
* How do I access a module written in Python from C?:: 
* How do I interface to C++ objects from Python?:: 
* I added a module using the Setup file and the make fails; why?:: 
* How do I debug an extension?:: 
* I want to compile a Python module on my Linux system, but some files are missing. Why?: I want to compile a Python module on my Linux system but some files are missing Why?. 
* What does "SystemError; _PyImport_FixupExtension; module yourmodule not loaded" mean?: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?. 
* How do I tell "incomplete input" from "invalid input"?:: 
* How do I find undefined g++ symbols __builtin_new or __pure_virtual?:: 
* Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?. 
* When importing module X, why do I get "undefined symbol; PyUnicodeUCS2*"?: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?. 


File: python.info,  Node: Can I create my own functions in C?,  Next: Can I create my own functions in C++?,  Up: Extending/Embedding FAQ

11.5.1 Can I create my own functions in C?
------------------------------------------

Yes, you can create built-in modules containing functions, variables,
exceptions and even new types in C. This is explained in the document
*note Extending and Embedding the Python Interpreter: 4fa.

  Most intermediate or advanced Python books will also cover this topic.


File: python.info,  Node: Can I create my own functions in C++?,  Next: Writing C is hard; are there any alternatives?,  Prev: Can I create my own functions in C?,  Up: Extending/Embedding FAQ

11.5.2 Can I create my own functions in C++?
--------------------------------------------

Yes, using the C compatibility features found in C++.  Place ‘extern "C"
{ ... }’ around the Python include files and put ‘extern "C"’ before
each function that is going to be called by the Python interpreter.
Global or static C++ objects with constructors are probably not a good
idea.


File: python.info,  Node: Writing C is hard; are there any alternatives?,  Next: How can I execute arbitrary Python statements from C?,  Prev: Can I create my own functions in C++?,  Up: Extending/Embedding FAQ

11.5.3 Writing C is hard; are there any alternatives?
-----------------------------------------------------

There are a number of alternatives to writing your own C extensions,
depending on what you’re trying to do.

  If you need more speed, Psyco(1) generates x86 assembly code from
Python bytecode.  You can use Psyco to compile the most time-critical
functions in your code, and gain a significant improvement with very
little effort, as long as you’re running on a machine with an
x86-compatible processor.

  Pyrex(2) is a compiler that accepts a slightly modified form of Python
and generates the corresponding C code.  Pyrex makes it possible to
write an extension without having to learn Python’s C API.

  If you need to interface to some C or C++ library for which no Python
extension currently exists, you can try wrapping the library’s data
types and functions with a tool such as SWIG(3). SIP(4), CXX(5)
Boost(6), or Weave(7) are also alternatives for wrapping C++ libraries.

   ---------- Footnotes ----------

   (1) http://psyco.sourceforge.net/

   (2) http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/

   (3) http://www.swig.org

   (4) http://www.riverbankcomputing.co.uk/software/sip/

   (5) http://cxx.sourceforge.net/

   (6) http://www.boost.org/libs/python/doc/index.html

   (7) http://www.scipy.org/Weave


File: python.info,  Node: How can I execute arbitrary Python statements from C?,  Next: How can I evaluate an arbitrary Python expression from C?,  Prev: Writing C is hard; are there any alternatives?,  Up: Extending/Embedding FAQ

11.5.4 How can I execute arbitrary Python statements from C?
------------------------------------------------------------

The highest-level function to do this is *note PyRun_SimpleString():
2a21. which takes a single string argument to be executed in the context
of the module ‘__main__’ and returns 0 for success and -1 when an
exception occurred (including ‘SyntaxError’).  If you want more control,
use *note PyRun_String(): 2a67.; see the source for *note
PyRun_SimpleString(): 2a21. in ‘Python/pythonrun.c’.


File: python.info,  Node: How can I evaluate an arbitrary Python expression from C?,  Next: How do I extract C values from a Python object?,  Prev: How can I execute arbitrary Python statements from C?,  Up: Extending/Embedding FAQ

11.5.5 How can I evaluate an arbitrary Python expression from C?
----------------------------------------------------------------

Call the function *note PyRun_String(): 2a67. from the previous question
with the start symbol *note Py_eval_input: 2a74.; it parses an
expression, evaluates it and returns its value.


File: python.info,  Node: How do I extract C values from a Python object?,  Next: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Prev: How can I evaluate an arbitrary Python expression from C?,  Up: Extending/Embedding FAQ

11.5.6 How do I extract C values from a Python object?
------------------------------------------------------

That depends on the object’s type.  If it’s a tuple, *note
PyTuple_Size(): 2cd0. returns its length and *note PyTuple_GetItem():
29c0. returns the item at a specified index.  Lists have similar
functions, ‘PyListSize()’ and *note PyList_GetItem(): 29c1.

  For strings, *note PyString_Size(): 2c25. returns its length and *note
PyString_AsString(): 2c27. a pointer to its value.  Note that Python
strings may contain null bytes so C’s ‘strlen()’ should not be used.

  To test the type of an object, first make sure it isn’t _NULL_, and
then use *note PyString_Check(): 2c21, *note PyTuple_Check(): 2ccc,
*note PyList_Check(): 2cda, etc.

  There is also a high-level API to Python objects which is provided by
the so-called ’abstract’ interface – read ‘Include/abstract.h’ for
further details.  It allows interfacing with any kind of Python sequence
using calls like *note PySequence_Length(): 2b73, *note
PySequence_GetItem(): 2a43, etc.)  as well as many other useful
protocols.


File: python.info,  Node: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Next: How do I call an object's method from C?,  Prev: How do I extract C values from a Python object?,  Up: Extending/Embedding FAQ

11.5.7 How do I use Py_BuildValue() to create a tuple of arbitrary length?
--------------------------------------------------------------------------

You can’t.  Use ‘t = PyTuple_New(n)’ instead, and fill it with objects
using ‘PyTuple_SetItem(t, i, o)’ – note that this "eats" a reference
count of ‘o’, so you have to *note Py_INCREF(): 299b. it.  Lists have
similar functions ‘PyList_New(n)’ and ‘PyList_SetItem(l, i, o)’.  Note
that you _must_ set all the tuple items to some value before you pass
the tuple to Python code – ‘PyTuple_New(n)’ initializes them to NULL,
which isn’t a valid Python value.


File: python.info,  Node: How do I call an object's method from C?,  Next: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Prev: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Up: Extending/Embedding FAQ

11.5.8 How do I call an object’s method from C?
-----------------------------------------------

The *note PyObject_CallMethod(): 2b36. function can be used to call an
arbitrary method of an object.  The parameters are the object, the name
of the method to call, a format string like that used with *note
Py_BuildValue(): 3a8, and the argument values:

     PyObject *
     PyObject_CallMethod(PyObject *object, char *method_name,
                         char *arg_format, ...);

  This works for any object that has methods – whether built-in or
user-defined.  You are responsible for eventually *note Py_DECREF():
29a1.’ing the return value.

  To call, e.g., a file object’s "seek" method with arguments 10, 0
(assuming the file object pointer is "f"):

     res = PyObject_CallMethod(f, "seek", "(ii)", 10, 0);
     if (res == NULL) {
             ... an exception occurred ...
     }
     else {
             Py_DECREF(res);
     }

  Note that since *note PyObject_CallObject(): 29b2. _always_ wants a
tuple for the argument list, to call a function without arguments, pass
"()" for the format, and to call a function with one argument, surround
the argument in parentheses, e.g.  "(i)".


File: python.info,  Node: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Next: How do I access a module written in Python from C?,  Prev: How do I call an object's method from C?,  Up: Extending/Embedding FAQ

11.5.9 How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?
-----------------------------------------------------------------------------------------------

In Python code, define an object that supports the ‘write()’ method.
Assign this object to *note sys.stdout: 889. and *note sys.stderr: 647.
Call print_error, or just allow the standard traceback mechanism to
work.  Then, the output will go wherever your ‘write()’ method sends it.

  The easiest way to do this is to use the StringIO class in the
standard library.

  Sample code and use for catching stdout:

     >>> class StdoutCatcher:
     ...     def __init__(self):
     ...         self.data = ''
     ...     def write(self, stuff):
     ...         self.data = self.data + stuff
     ...
     >>> import sys
     >>> sys.stdout = StdoutCatcher()
     >>> print 'foo'
     >>> print 'hello world!'
     >>> sys.stderr.write(sys.stdout.data)
     foo
     hello world!


File: python.info,  Node: How do I access a module written in Python from C?,  Next: How do I interface to C++ objects from Python?,  Prev: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Up: Extending/Embedding FAQ

11.5.10 How do I access a module written in Python from C?
----------------------------------------------------------

You can get a pointer to the module object as follows:

     module = PyImport_ImportModule("<modulename>");

  If the module hasn’t been imported yet (i.e.  it is not yet present in
*note sys.modules: 824.), this initializes the module; otherwise it
simply returns the value of ‘sys.modules["<modulename>"]’.  Note that it
doesn’t enter the module into any namespace – it only ensures it has
been initialized and is stored in *note sys.modules: 824.

  You can then access the module’s attributes (i.e.  any name defined in
the module) as follows:

     attr = PyObject_GetAttrString(module, "<attrname>");

  Calling *note PyObject_SetAttrString(): 2b27. to assign to variables
in the module also works.


File: python.info,  Node: How do I interface to C++ objects from Python?,  Next: I added a module using the Setup file and the make fails; why?,  Prev: How do I access a module written in Python from C?,  Up: Extending/Embedding FAQ

11.5.11 How do I interface to C++ objects from Python?
------------------------------------------------------

Depending on your requirements, there are many approaches.  To do this
manually, begin by reading *note the "Extending and Embedding" document:
4fa.  Realize that for the Python run-time system, there isn’t a whole
lot of difference between C and C++ – so the strategy of building a new
Python type around a C structure (pointer) type will also work for C++
objects.

  For C++ libraries, see *note Writing C is hard; are there any
alternatives?: 316e.


File: python.info,  Node: I added a module using the Setup file and the make fails; why?,  Next: How do I debug an extension?,  Prev: How do I interface to C++ objects from Python?,  Up: Extending/Embedding FAQ

11.5.12 I added a module using the Setup file and the make fails; why?
----------------------------------------------------------------------

Setup must end in a newline, if there is no newline there, the build
process fails.  (Fixing this requires some ugly shell script hackery,
and this bug is so minor that it doesn’t seem worth the effort.)


File: python.info,  Node: How do I debug an extension?,  Next: I want to compile a Python module on my Linux system but some files are missing Why?,  Prev: I added a module using the Setup file and the make fails; why?,  Up: Extending/Embedding FAQ

11.5.13 How do I debug an extension?
------------------------------------

When using GDB with dynamically loaded extensions, you can’t set a
breakpoint in your extension until your extension is loaded.

  In your ‘.gdbinit’ file (or interactively), add the command:

     br _PyImport_LoadDynamicModule

  Then, when you run GDB:

     $ gdb /local/bin/python
     gdb) run myscript.py
     gdb) continue # repeat until your extension is loaded
     gdb) finish   # so that your extension is loaded
     gdb) br myfunction.c:50
     gdb) continue


File: python.info,  Node: I want to compile a Python module on my Linux system but some files are missing Why?,  Next: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?,  Prev: How do I debug an extension?,  Up: Extending/Embedding FAQ

11.5.14 I want to compile a Python module on my Linux system, but some files are missing. Why?
----------------------------------------------------------------------------------------------

Most packaged versions of Python don’t include the
‘/usr/lib/python2._x_/config/’ directory, which contains various files
required for compiling Python extensions.

  For Red Hat, install the python-devel RPM to get the necessary files.

  For Debian, run ‘apt-get install python-dev’.


File: python.info,  Node: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?,  Next: How do I tell "incomplete input" from "invalid input"?,  Prev: I want to compile a Python module on my Linux system but some files are missing Why?,  Up: Extending/Embedding FAQ

11.5.15 What does "SystemError: _PyImport_FixupExtension: module yourmodule not loaded" mean?
---------------------------------------------------------------------------------------------

This means that you have created an extension module named "yourmodule",
but your module init function does not initialize with that name.

  Every module init function will have a line similar to:

     module = Py_InitModule("yourmodule", yourmodule_functions);

  If the string passed to this function is not the same name as your
extension module, the *note SystemError: 950. exception will be raised.


File: python.info,  Node: How do I tell "incomplete input" from "invalid input"?,  Next: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Prev: What does "SystemError _PyImport_FixupExtension module yourmodule not loaded" mean?,  Up: Extending/Embedding FAQ

11.5.16 How do I tell "incomplete input" from "invalid input"?
--------------------------------------------------------------

Sometimes you want to emulate the Python interactive interpreter’s
behavior, where it gives you a continuation prompt when the input is
incomplete (e.g.  you typed the start of an "if" statement or you didn’t
close your parentheses or triple string quotes), but it gives you a
syntax error message immediately when the input is invalid.

  In Python you can use the *note codeop: 64. module, which approximates
the parser’s behavior sufficiently.  IDLE uses this, for example.

  The easiest way to do it in C is to call *note
PyRun_InteractiveLoop(): 2a5a. (perhaps in a separate thread) and let
the Python interpreter handle the input for you.  You can also set the
‘PyOS_ReadlineFunctionPointer()’ to point at your custom input function.
See ‘Modules/readline.c’ and ‘Parser/myreadline.c’ for more hints.

  However sometimes you have to run the embedded Python interpreter in
the same thread as your rest application and you can’t allow the *note
PyRun_InteractiveLoop(): 2a5a. to stop while waiting for user input.
The one solution then is to call ‘PyParser_ParseString()’ and test for
‘e.error’ equal to ‘E_EOF’, which means the input is incomplete).
Here’s a sample code fragment, untested, inspired by code from Alex
Farber:

     #include <Python.h>
     #include <node.h>
     #include <errcode.h>
     #include <grammar.h>
     #include <parsetok.h>
     #include <compile.h>

     int testcomplete(char *code)
       /* code should end in \n */
       /* return -1 for error, 0 for incomplete, 1 for complete */
     {
       node *n;
       perrdetail e;

       n = PyParser_ParseString(code, &_PyParser_Grammar,
                                Py_file_input, &e);
       if (n == NULL) {
         if (e.error == E_EOF)
           return 0;
         return -1;
       }

       PyNode_Free(n);
       return 1;
     }

  Another solution is trying to compile the received string with *note
Py_CompileString(): 2a6d.  If it compiles without errors, try to execute
the returned code object by calling *note PyEval_EvalCode(): 2a6f.
Otherwise save the input for later.  If the compilation fails, find out
if it’s an error or just more input is required - by extracting the
message string from the exception tuple and comparing it to the string
"unexpected EOF while parsing".  Here is a complete example using the
GNU readline library (you may want to ignore *SIGINT* while calling
readline()):

     #include <stdio.h>
     #include <readline.h>

     #include <Python.h>
     #include <object.h>
     #include <compile.h>
     #include <eval.h>

     int main (int argc, char* argv[])
     {
       int i, j, done = 0;                          /* lengths of line, code */
       char ps1[] = ">>> ";
       char ps2[] = "... ";
       char *prompt = ps1;
       char *msg, *line, *code = NULL;
       PyObject *src, *glb, *loc;
       PyObject *exc, *val, *trb, *obj, *dum;

       Py_Initialize ();
       loc = PyDict_New ();
       glb = PyDict_New ();
       PyDict_SetItemString (glb, "__builtins__", PyEval_GetBuiltins ());

       while (!done)
       {
         line = readline (prompt);

         if (NULL == line)                          /* CTRL-D pressed */
         {
           done = 1;
         }
         else
         {
           i = strlen (line);

           if (i > 0)
             add_history (line);                    /* save non-empty lines */

           if (NULL == code)                        /* nothing in code yet */
             j = 0;
           else
             j = strlen (code);

           code = realloc (code, i + j + 2);
           if (NULL == code)                        /* out of memory */
             exit (1);

           if (0 == j)                              /* code was empty, so */
             code[0] = '\0';                        /* keep strncat happy */

           strncat (code, line, i);                 /* append line to code */
           code[i + j] = '\n';                      /* append '\n' to code */
           code[i + j + 1] = '\0';

           src = Py_CompileString (code, "<stdin>", Py_single_input);

           if (NULL != src)                         /* compiled just fine - */
           {
             if (ps1  == prompt ||                  /* ">>> " or */
                 '\n' == code[i + j - 1])           /* "... " and double '\n' */
             {                                               /* so execute it */
               dum = PyEval_EvalCode ((PyCodeObject *)src, glb, loc);
               Py_XDECREF (dum);
               Py_XDECREF (src);
               free (code);
               code = NULL;
               if (PyErr_Occurred ())
                 PyErr_Print ();
               prompt = ps1;
             }
           }                                        /* syntax error or E_EOF? */
           else if (PyErr_ExceptionMatches (PyExc_SyntaxError))
           {
             PyErr_Fetch (&exc, &val, &trb);        /* clears exception! */

             if (PyArg_ParseTuple (val, "sO", &msg, &obj) &&
                 !strcmp (msg, "unexpected EOF while parsing")) /* E_EOF */
             {
               Py_XDECREF (exc);
               Py_XDECREF (val);
               Py_XDECREF (trb);
               prompt = ps2;
             }
             else                                   /* some other syntax error */
             {
               PyErr_Restore (exc, val, trb);
               PyErr_Print ();
               free (code);
               code = NULL;
               prompt = ps1;
             }
           }
           else                                     /* some non-syntax error */
           {
             PyErr_Print ();
             free (code);
             code = NULL;
             prompt = ps1;
           }

           free (line);
         }
       }

       Py_XDECREF(glb);
       Py_XDECREF(loc);
       Py_Finalize();
       exit(0);
     }


File: python.info,  Node: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Next: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Prev: How do I tell "incomplete input" from "invalid input"?,  Up: Extending/Embedding FAQ

11.5.17 How do I find undefined g++ symbols __builtin_new or __pure_virtual?
----------------------------------------------------------------------------

To dynamically load g++ extension modules, you must recompile Python,
relink it using g++ (change LINKCC in the Python Modules Makefile), and
link your extension module using g++ (e.g., ‘g++ -shared -o mymodule.so
mymodule.o’).


File: python.info,  Node: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Next: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?,  Prev: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Up: Extending/Embedding FAQ

11.5.18 Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?
------------------------------------------------------------------------------------------------------------------------

In Python 2.2, you can inherit from built-in classes such as *note int:
1f2, *note list: 3bc, *note dict: 305, etc.

  The Boost Python Library (BPL,
‘http://www.boost.org/libs/python/doc/index.html’) provides a way of
doing this from C++ (i.e.  you can inherit from an extension class
written in C++ using the BPL).


File: python.info,  Node: When importing module X why do I get "undefined symbol PyUnicodeUCS2*"?,  Prev: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Up: Extending/Embedding FAQ

11.5.19 When importing module X, why do I get "undefined symbol: PyUnicodeUCS2*"?
---------------------------------------------------------------------------------

You are using a version of Python that uses a 4-byte representation for
Unicode characters, but some C extension module you are importing was
compiled using a Python that uses a 2-byte representation for Unicode
characters (the default).

  If instead the name of the undefined symbol starts with
‘PyUnicodeUCS4’, the problem is the reverse: Python was built using
2-byte Unicode characters, and the extension module was compiled using a
Python with 4-byte Unicode characters.

  This can easily occur when using pre-built extension packages.  RedHat
Linux 7.x, in particular, provided a "python2" binary that is compiled
with 4-byte Unicode.  This only causes the link failure if the extension
uses any of the ‘PyUnicode_*()’ functions.  It is also a problem if an
extension uses any of the Unicode-related format specifiers for *note
Py_BuildValue(): 3a8. (or similar) or parameter specifications for *note
PyArg_ParseTuple(): 31b.

  You can check the size of the Unicode character a Python interpreter
is using by checking the value of sys.maxunicode:

     >>> import sys
     >>> if sys.maxunicode > 65535:
     ...     print 'UCS4 build'
     ... else:
     ...     print 'UCS2 build'

  The only way to solve this problem is to use extension modules
compiled with a Python binary built using the same size for Unicode
characters.


File: python.info,  Node: Python on Windows FAQ,  Next: Graphic User Interface FAQ,  Prev: Extending/Embedding FAQ,  Up: Python Frequently Asked Questions

11.6 Python on Windows FAQ
==========================

* Menu:

* How do I run a Python program under Windows?:: 
* How do I make Python scripts executable?:: 
* Why does Python sometimes take so long to start?:: 
* How do I make an executable from a Python script?:: 
* Is a *.pyd file the same as a DLL?: Is a * pyd file the same as a DLL?. 
* How can I embed Python into a Windows application?:: 
* How do I keep editors from inserting tabs into my Python source?:: 
* How do I check for a keypress without blocking?:: 
* How do I emulate os.kill() in Windows?: How do I emulate os kill in Windows?. 
* How do I extract the downloaded documentation on Windows?:: 


File: python.info,  Node: How do I run a Python program under Windows?,  Next: How do I make Python scripts executable?,  Up: Python on Windows FAQ

11.6.1 How do I run a Python program under Windows?
---------------------------------------------------

This is not necessarily a straightforward question.  If you are already
familiar with running programs from the Windows command line then
everything will seem obvious; otherwise, you might need a little more
guidance.

Python Development on XP
........................

Python Development on XP(1)

  This series of screencasts aims to get you up and running with Python
on Windows XP. The knowledge is distilled into 1.5 hours and will get
you up and running with the right Python distribution, coding in your
choice of IDE, and debugging and writing solid code with unit-tests.

  Unless you use some sort of integrated development environment, you
will end up _typing_ Windows commands into what is variously referred to
as a "DOS window" or "Command prompt window".  Usually you can create
such a window from your Start menu; under Windows 7 the menu selection
is _Start ‣ Programs ‣ Accessories ‣ Command Prompt_.  You should be
able to recognize when you have started such a window because you will
see a Windows "command prompt", which usually looks like this:

     C:\>

  The letter may be different, and there might be other things after it,
so you might just as easily see something like:

     D:\YourName\Projects\Python>

  depending on how your computer has been set up and what else you have
recently done with it.  Once you have started such a window, you are
well on the way to running Python programs.

  You need to realize that your Python scripts have to be processed by
another program called the Python _interpreter_.  The interpreter reads
your script, compiles it into bytecodes, and then executes the bytecodes
to run your program.  So, how do you arrange for the interpreter to
handle your Python?

  First, you need to make sure that your command window recognises the
word "python" as an instruction to start the interpreter.  If you have
opened a command window, you should try entering the command ‘python’
and hitting return.:

     C:\Users\YourName> python

  You should then see something like:

     Python 2.7.3 (default, Apr 10 2012, 22.71:26) [MSC v.1500 32 bit (Intel)] on win32
     Type "help", "copyright", "credits" or "license" for more information.
     >>>

  You have started the interpreter in "interactive mode".  That means
you can enter Python statements or expressions interactively and have
them executed or evaluated while you wait.  This is one of Python’s
strongest features.  Check it by entering a few expressions of your
choice and seeing the results:

     >>> print "Hello"
     Hello
     >>> "Hello" * 3
     HelloHelloHello

  Many people use the interactive mode as a convenient yet highly
programmable calculator.  When you want to end your interactive Python
session, hold the Ctrl key down while you enter a Z, then hit the
"Enter" key to get back to your Windows command prompt.

  You may also find that you have a Start-menu entry such as _Start ‣
Programs ‣ Python 2.7 ‣ Python (command line)_ that results in you
seeing the ‘>>>’ prompt in a new window.  If so, the window will
disappear after you enter the Ctrl-Z character; Windows is running a
single "python" command in the window, and closes it when you terminate
the interpreter.

  If the ‘python’ command, instead of displaying the interpreter prompt
‘>>>’, gives you a message like:

     'python' is not recognized as an internal or external command, operable program or batch file.

Adding Python to DOS Path
.........................

Adding Python to DOS Path(2)

  Python is not added to the DOS path by default.  This screencast will
walk you through the steps to add the correct entry to the ‘System
Path’, allowing Python to be executed from the command-line by all
users.

  or:

     Bad command or filename

  then you need to make sure that your computer knows where to find the
Python interpreter.  To do this you will have to modify a setting called
PATH, which is a list of directories where Windows will look for
programs.

  You should arrange for Python’s installation directory to be added to
the PATH of every command window as it starts.  If you installed Python
fairly recently then the command

     dir C:\py*

  will probably tell you where it is installed; the usual location is
something like ‘C:\Python27’.  Otherwise you will be reduced to a search
of your whole disk ...  use _Tools ‣ Find_ or hit the _Search_ button
and look for "python.exe".  Supposing you discover that Python is
installed in the ‘C:\Python27’ directory (the default at the time of
writing), you should make sure that entering the command

     c:\Python27\python

  starts up the interpreter as above (and don’t forget you’ll need a
"CTRL-Z" and an "Enter" to get out of it).  Once you have verified the
directory, you can add it to the system path to make it easier to start
Python by just running the ‘python’ command.  This is currently an
option in the installer as of CPython 2.7.

  More information about environment variables can be found on the *note
Using Python on Windows: 66c. page.

   ---------- Footnotes ----------

   (1) 
http://www.showmedo.com/videos/series?name=pythonOzsvaldPyNewbieSeries

   (2) http://showmedo.com/videos/video?name=960000&fromSeriesID=96


File: python.info,  Node: How do I make Python scripts executable?,  Next: Why does Python sometimes take so long to start?,  Prev: How do I run a Python program under Windows?,  Up: Python on Windows FAQ

11.6.2 How do I make Python scripts executable?
-----------------------------------------------

On Windows, the standard Python installer already associates the .py
extension with a file type (Python.File) and gives that file type an
open command that runs the interpreter (‘D:\Program
Files\Python\python.exe "%1" %*’).  This is enough to make scripts
executable from the command prompt as ’foo.py’.  If you’d rather be able
to execute the script by simple typing ’foo’ with no extension you need
to add .py to the PATHEXT environment variable.


File: python.info,  Node: Why does Python sometimes take so long to start?,  Next: How do I make an executable from a Python script?,  Prev: How do I make Python scripts executable?,  Up: Python on Windows FAQ

11.6.3 Why does Python sometimes take so long to start?
-------------------------------------------------------

Usually Python starts very quickly on Windows, but occasionally there
are bug reports that Python suddenly begins to take a long time to start
up.  This is made even more puzzling because Python will work fine on
other Windows systems which appear to be configured identically.

  The problem may be caused by a misconfiguration of virus checking
software on the problem machine.  Some virus scanners have been known to
introduce startup overhead of two orders of magnitude when the scanner
is configured to monitor all reads from the filesystem.  Try checking
the configuration of virus scanning software on your systems to ensure
that they are indeed configured identically.  McAfee, when configured to
scan all file system read activity, is a particular offender.


File: python.info,  Node: How do I make an executable from a Python script?,  Next: Is a * pyd file the same as a DLL?,  Prev: Why does Python sometimes take so long to start?,  Up: Python on Windows FAQ

11.6.4 How do I make an executable from a Python script?
--------------------------------------------------------

See ‘http://www.py2exe.org/’ for a distutils extension that allows you
to create console and GUI executables from Python code.


File: python.info,  Node: Is a * pyd file the same as a DLL?,  Next: How can I embed Python into a Windows application?,  Prev: How do I make an executable from a Python script?,  Up: Python on Windows FAQ

11.6.5 Is a ‘*.pyd’ file the same as a DLL?
-------------------------------------------

Yes, .pyd files are dll’s, but there are a few differences.  If you have
a DLL named ‘foo.pyd’, then it must have a function ‘initfoo()’.  You
can then write Python "import foo", and Python will search for foo.pyd
(as well as foo.py, foo.pyc) and if it finds it, will attempt to call
‘initfoo()’ to initialize it.  You do not link your .exe with foo.lib,
as that would cause Windows to require the DLL to be present.

  Note that the search path for foo.pyd is PYTHONPATH, not the same as
the path that Windows uses to search for foo.dll.  Also, foo.pyd need
not be present to run your program, whereas if you linked your program
with a dll, the dll is required.  Of course, foo.pyd is required if you
want to say ‘import foo’.  In a DLL, linkage is declared in the source
code with ‘__declspec(dllexport)’.  In a .pyd, linkage is defined in a
list of available functions.


File: python.info,  Node: How can I embed Python into a Windows application?,  Next: How do I keep editors from inserting tabs into my Python source?,  Prev: Is a * pyd file the same as a DLL?,  Up: Python on Windows FAQ

11.6.6 How can I embed Python into a Windows application?
---------------------------------------------------------

Embedding the Python interpreter in a Windows app can be summarized as
follows:

  1. Do _not_ build Python into your .exe file directly.  On Windows,
     Python must be a DLL to handle importing modules that are
     themselves DLL’s.  (This is the first key undocumented fact.)
     Instead, link to ‘python_NN_.dll’; it is typically installed in
     ‘C:\Windows\System’.  _NN_ is the Python version, a number such as
     "27" for Python 2.7.

     You can link to Python in two different ways.  Load-time linking
     means linking against ‘python_NN_.lib’, while run-time linking
     means linking against ‘python_NN_.dll’.  (General note:
     ‘python_NN_.lib’ is the so-called "import lib" corresponding to
     ‘python_NN_.dll’.  It merely defines symbols for the linker.)

     Run-time linking greatly simplifies link options; everything
     happens at run time.  Your code must load ‘python_NN_.dll’ using
     the Windows ‘LoadLibraryEx()’ routine.  The code must also use
     access routines and data in ‘python_NN_.dll’ (that is, Python’s C
     API’s) using pointers obtained by the Windows ‘GetProcAddress()’
     routine.  Macros can make using these pointers transparent to any C
     code that calls routines in Python’s C API.

     Borland note: convert ‘python_NN_.lib’ to OMF format using
     Coff2Omf.exe first.

  2. If you use SWIG, it is easy to create a Python "extension module"
     that will make the app’s data and methods available to Python.
     SWIG will handle just about all the grungy details for you.  The
     result is C code that you link _into_ your .exe file (!)  You do
     _not_ have to create a DLL file, and this also simplifies linking.

  3. SWIG will create an init function (a C function) whose name depends
     on the name of the extension module.  For example, if the name of
     the module is leo, the init function will be called initleo().  If
     you use SWIG shadow classes, as you should, the init function will
     be called initleoc().  This initializes a mostly hidden helper
     class used by the shadow class.

     The reason you can link the C code in step 2 into your .exe file is
     that calling the initialization function is equivalent to importing
     the module into Python!  (This is the second key undocumented
     fact.)

  4. In short, you can use the following code to initialize the Python
     interpreter with your extension module.

          #include "python.h"
          ...
          Py_Initialize();  // Initialize Python.
          initmyAppc();  // Initialize (import) the helper class.
          PyRun_SimpleString("import myApp");  // Import the shadow class.

  5. There are two problems with Python’s C API which will become
     apparent if you use a compiler other than MSVC, the compiler used
     to build pythonNN.dll.

     Problem 1: The so-called "Very High Level" functions that take FILE
     * arguments will not work in a multi-compiler environment because
     each compiler’s notion of a struct FILE will be different.  From an
     implementation standpoint these are very _low_ level functions.

     Problem 2: SWIG generates the following code when generating
     wrappers to void functions:

          Py_INCREF(Py_None);
          _resultobj = Py_None;
          return _resultobj;

     Alas, Py_None is a macro that expands to a reference to a complex
     data structure called _Py_NoneStruct inside pythonNN.dll.  Again,
     this code will fail in a mult-compiler environment.  Replace such
     code by:

          return Py_BuildValue("");

     It may be possible to use SWIG’s ‘%typemap’ command to make the
     change automatically, though I have not been able to get this to
     work (I’m a complete SWIG newbie).

  6. Using a Python shell script to put up a Python interpreter window
     from inside your Windows app is not a good idea; the resulting
     window will be independent of your app’s windowing system.  Rather,
     you (or the wxPythonWindow class) should create a "native"
     interpreter window.  It is easy to connect that window to the
     Python interpreter.  You can redirect Python’s i/o to _any_ object
     that supports read and write, so all you need is a Python object
     (defined in your extension module) that contains read() and write()
     methods.


File: python.info,  Node: How do I keep editors from inserting tabs into my Python source?,  Next: How do I check for a keypress without blocking?,  Prev: How can I embed Python into a Windows application?,  Up: Python on Windows FAQ

11.6.7 How do I keep editors from inserting tabs into my Python source?
-----------------------------------------------------------------------

The FAQ does not recommend using tabs, and the Python style guide, PEP
8(1), recommends 4 spaces for distributed Python code; this is also the
Emacs python-mode default.

  Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no
different in this respect, and is easily configured to use spaces: Take
_Tools ‣ Options ‣ Tabs_, and for file type "Default" set "Tab size" and
"Indent size" to 4, and select the "Insert spaces" radio button.

  If you suspect mixed tabs and spaces are causing problems in leading
whitespace, run Python with the *note -t: 3d0. switch or run
‘Tools/Scripts/tabnanny.py’ to check a directory tree in batch mode.

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0008


File: python.info,  Node: How do I check for a keypress without blocking?,  Next: How do I emulate os kill in Windows?,  Prev: How do I keep editors from inserting tabs into my Python source?,  Up: Python on Windows FAQ

11.6.8 How do I check for a keypress without blocking?
------------------------------------------------------

Use the msvcrt module.  This is a standard Windows-specific extension
module.  It defines a function ‘kbhit()’ which checks whether a keyboard
hit is present, and ‘getch()’ which gets one character without echoing
it.


File: python.info,  Node: How do I emulate os kill in Windows?,  Next: How do I extract the downloaded documentation on Windows?,  Prev: How do I check for a keypress without blocking?,  Up: Python on Windows FAQ

11.6.9 How do I emulate os.kill() in Windows?
---------------------------------------------

Prior to Python 2.7 and 3.2, to terminate a process, you can use *note
ctypes: 78.:

     import ctypes

     def kill(pid):
         """kill function for Win32"""
         kernel32 = ctypes.windll.kernel32
         handle = kernel32.OpenProcess(1, 0, pid)
         return (0 != kernel32.TerminateProcess(handle, 0))

  In 2.7 and 3.2, *note os.kill(): 2d1. is implemented similar to the
above function, with the additional feature of being able to send CTRL+C
and CTRL+BREAK to console subprocesses which are designed to handle
those signals.  See *note os.kill(): 2d1. for further details.


File: python.info,  Node: How do I extract the downloaded documentation on Windows?,  Prev: How do I emulate os kill in Windows?,  Up: Python on Windows FAQ

11.6.10 How do I extract the downloaded documentation on Windows?
-----------------------------------------------------------------

Sometimes, when you download the documentation package to a Windows
machine using a web browser, the file extension of the saved file ends
up being .EXE. This is a mistake; the extension should be .TGZ.

  Simply rename the downloaded file to have the .TGZ extension, and
WinZip will be able to handle it.  (If your copy of WinZip doesn’t, get
a newer one from ‘http://www.winzip.com’.)


File: python.info,  Node: Graphic User Interface FAQ,  Next: "Why is Python Installed on my Computer?" FAQ,  Prev: Python on Windows FAQ,  Up: Python Frequently Asked Questions

11.7 Graphic User Interface FAQ
===============================

* Menu:

* What platform-independent GUI toolkits exist for Python?:: 
* What platform-specific GUI toolkits exist for Python?:: 
* Tkinter questions:: 

What platform-independent GUI toolkits exist for Python?

* Tkinter:: 
* wxWidgets:: 
* Qt:: 
* Gtk+:: 
* FLTK:: 
* FOX:: 
* OpenGL:: 

Tkinter questions

* How do I freeze Tkinter applications?:: 
* Can I have Tk events handled while waiting for I/O?:: 
* I can’t get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?. 


File: python.info,  Node: What platform-independent GUI toolkits exist for Python?,  Next: What platform-specific GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

11.7.1 What platform-independent GUI toolkits exist for Python?
---------------------------------------------------------------

Depending on what platform(s) you are aiming at, there are several.

* Menu:

* Tkinter:: 
* wxWidgets:: 
* Qt:: 
* Gtk+:: 
* FLTK:: 
* FOX:: 
* OpenGL:: 


File: python.info,  Node: Tkinter,  Next: wxWidgets,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.1 Tkinter
................

Standard builds of Python include an object-oriented interface to the
Tcl/Tk widget set, called Tkinter.  This is probably the easiest to
install and use.  For more info about Tk, including pointers to the
source, see the Tcl/Tk home page at ‘http://www.tcl.tk’.  Tcl/Tk is
fully portable to the Mac OS X, Windows, and Unix platforms.


File: python.info,  Node: wxWidgets,  Next: Qt,  Prev: Tkinter,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.2 wxWidgets
..................

wxWidgets (‘http://www.wxwidgets.org’) is a free, portable GUI class
library written in C++ that provides a native look and feel on a number
of platforms, with Windows, Mac OS X, GTK, X11, all listed as current
stable targets.  Language bindings are available for a number of
languages including Python, Perl, Ruby, etc.

  wxPython (‘http://www.wxpython.org’) is the Python binding for
wxwidgets.  While it often lags slightly behind the official wxWidgets
releases, it also offers a number of features via pure Python extensions
that are not available in other language bindings.  There is an active
wxPython user and developer community.

  Both wxWidgets and wxPython are free, open source, software with
permissive licences that allow their use in commercial products as well
as in freeware or shareware.


File: python.info,  Node: Qt,  Next: Gtk+,  Prev: wxWidgets,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.3 Qt
...........

There are bindings available for the Qt toolkit (using either PyQt(1) or
PySide(2)) and for KDE (PyKDE(3)). PyQt is currently more mature than
PySide, but you must buy a PyQt license from Riverbank Computing(4) if
you want to write proprietary applications.  PySide is free for all
applications.

  Qt 4.5 upwards is licensed under the LGPL license; also, commercial
licenses are available from Nokia(5).

   ---------- Footnotes ----------

   (1) http://www.riverbankcomputing.co.uk/software/pyqt/

   (2) http://www.pyside.org/

   (3) http://www.riverbankcomputing.co.uk/software/pykde/intro

   (4) http://www.riverbankcomputing.co.uk/software/pyqt/license

   (5) http://qt.nokia.com/


File: python.info,  Node: Gtk+,  Next: FLTK,  Prev: Qt,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.4 Gtk+
.............

PyGtk bindings for the Gtk+ toolkit(1) have been implemented by James
Henstridge; see <‘http://www.pygtk.org’>.

   ---------- Footnotes ----------

   (1) http://www.gtk.org


File: python.info,  Node: FLTK,  Next: FOX,  Prev: Gtk+,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.5 FLTK
.............

Python bindings for the FLTK toolkit(1), a simple yet powerful and
mature cross-platform windowing system, are available from the PyFLTK
project(2).

   ---------- Footnotes ----------

   (1) http://www.fltk.org

   (2) http://pyfltk.sourceforge.net


File: python.info,  Node: FOX,  Next: OpenGL,  Prev: FLTK,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.6 FOX
............

A wrapper for the FOX toolkit(1) called FXpy(2) is available.  FOX
supports both Unix variants and Windows.

   ---------- Footnotes ----------

   (1) http://www.fox-toolkit.org/

   (2) http://fxpy.sourceforge.net/


File: python.info,  Node: OpenGL,  Prev: FOX,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.7 OpenGL
...............

For OpenGL bindings, see PyOpenGL(1).

   ---------- Footnotes ----------

   (1) http://pyopengl.sourceforge.net


File: python.info,  Node: What platform-specific GUI toolkits exist for Python?,  Next: Tkinter questions,  Prev: What platform-independent GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

11.7.2 What platform-specific GUI toolkits exist for Python?
------------------------------------------------------------

By installing the PyObjc Objective-C bridge(1), Python programs can use
Mac OS X’s Cocoa libraries.

  *note Pythonwin: 317f. by Mark Hammond includes an interface to the
Microsoft Foundation Classes and a Python programming environment that’s
written mostly in Python using the MFC classes.

   ---------- Footnotes ----------

   (1) http://pyobjc.sourceforge.net


File: python.info,  Node: Tkinter questions,  Prev: What platform-specific GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

11.7.3 Tkinter questions
------------------------

* Menu:

* How do I freeze Tkinter applications?:: 
* Can I have Tk events handled while waiting for I/O?:: 
* I can’t get key bindings to work in Tkinter; why?: I can't get key bindings to work in Tkinter why?. 


File: python.info,  Node: How do I freeze Tkinter applications?,  Next: Can I have Tk events handled while waiting for I/O?,  Up: Tkinter questions

11.7.3.1 How do I freeze Tkinter applications?
..............................................

Freeze is a tool to create stand-alone applications.  When freezing
Tkinter applications, the applications will not be truly stand-alone, as
the application will still need the Tcl and Tk libraries.

  One solution is to ship the application with the Tcl and Tk libraries,
and point to them at run-time using the ‘TCL_LIBRARY’ and ‘TK_LIBRARY’
environment variables.

  To get truly stand-alone applications, the Tcl scripts that form the
library have to be integrated into the application as well.  One tool
supporting that is SAM (stand-alone modules), which is part of the Tix
distribution (‘http://tix.sourceforge.net/’).

  Build Tix with SAM enabled, perform the appropriate call to
‘Tclsam_init()’, etc.  inside Python’s ‘Modules/tkappinit.c’, and link
with libtclsam and libtksam (you might include the Tix libraries as
well).


File: python.info,  Node: Can I have Tk events handled while waiting for I/O?,  Next: I can't get key bindings to work in Tkinter why?,  Prev: How do I freeze Tkinter applications?,  Up: Tkinter questions

11.7.3.2 Can I have Tk events handled while waiting for I/O?
............................................................

Yes, and you don’t even need threads!  But you’ll have to restructure
your I/O code a bit.  Tk has the equivalent of Xt’s ‘XtAddInput()’ call,
which allows you to register a callback function which will be called
from the Tk mainloop when I/O is possible on a file descriptor.  Here’s
what you need:

     from Tkinter import tkinter
     tkinter.createfilehandler(file, mask, callback)

  The file may be a Python file or socket object (actually, anything
with a fileno() method), or an integer file descriptor.  The mask is one
of the constants tkinter.READABLE or tkinter.WRITABLE. The callback is
called as follows:

     callback(file, mask)

  You must unregister the callback when you’re done, using

     tkinter.deletefilehandler(file)

  Note: since you don’t know _how many bytes_ are available for reading,
you can’t use the Python file object’s read or readline methods, since
these will insist on reading a predefined number of bytes.  For sockets,
the ‘recv()’ or ‘recvfrom()’ methods will work fine; for other files,
use ‘os.read(file.fileno(), maxbytecount)’.


File: python.info,  Node: I can't get key bindings to work in Tkinter why?,  Prev: Can I have Tk events handled while waiting for I/O?,  Up: Tkinter questions

11.7.3.3 I can’t get key bindings to work in Tkinter: why?
..........................................................

An often-heard complaint is that event handlers bound to events with the
‘bind()’ method don’t get handled even when the appropriate key is
pressed.

  The most common cause is that the widget to which the binding applies
doesn’t have "keyboard focus".  Check out the Tk documentation for the
focus command.  Usually a widget is given the keyboard focus by clicking
in it (but not for labels; see the takefocus option).


File: python.info,  Node: "Why is Python Installed on my Computer?" FAQ,  Prev: Graphic User Interface FAQ,  Up: Python Frequently Asked Questions

11.8 "Why is Python Installed on my Computer?" FAQ
==================================================

* Menu:

* What is Python?: What is Python?<2>. 
* Why is Python installed on my machine?:: 
* Can I delete Python?:: 


File: python.info,  Node: What is Python?<2>,  Next: Why is Python installed on my machine?,  Up: "Why is Python Installed on my Computer?" FAQ

11.8.1 What is Python?
----------------------

Python is a programming language.  It’s used for many different
applications.  It’s used in some high schools and colleges as an
introductory programming language because Python is easy to learn, but
it’s also used by professional software developers at places such as
Google, NASA, and Lucasfilm Ltd.

  If you wish to learn more about Python, start with the Beginner’s
Guide to Python(1).

   ---------- Footnotes ----------

   (1) http://wiki.python.org/moin/BeginnersGuide


File: python.info,  Node: Why is Python installed on my machine?,  Next: Can I delete Python?,  Prev: What is Python?<2>,  Up: "Why is Python Installed on my Computer?" FAQ

11.8.2 Why is Python installed on my machine?
---------------------------------------------

If you find Python installed on your system but don’t remember
installing it, there are several possible ways it could have gotten
there.

   * Perhaps another user on the computer wanted to learn programming
     and installed it; you’ll have to figure out who’s been using the
     machine and might have installed it.

   * A third-party application installed on the machine might have been
     written in Python and included a Python installation.  For a home
     computer, the most common such application is PySol(1), a solitaire
     game that includes over 1000 different games and variations.

   * Some Windows machines also have Python installed.  At this writing
     we’re aware of computers from Hewlett-Packard and Compaq that
     include Python.  Apparently some of HP/Compaq’s administrative
     tools are written in Python.

   * All Apple computers running Mac OS X have Python installed; it’s
     included in the base installation.

   ---------- Footnotes ----------

   (1) http://pysolfc.sourceforge.net/


File: python.info,  Node: Can I delete Python?,  Prev: Why is Python installed on my machine?,  Up: "Why is Python Installed on my Computer?" FAQ

11.8.3 Can I delete Python?
---------------------------

That depends on where Python came from.

  If someone installed it deliberately, you can remove it without
hurting anything.  On Windows, use the Add/Remove Programs icon in the
Control Panel.

  If Python was installed by a third-party application, you can also
remove it, but that application will no longer work.  You should use
that application’s uninstaller rather than removing Python directly.

  If Python came with your operating system, removing it is not
recommended.  If you remove it, whatever tools were written in Python
will no longer run, and some of them might be important to you.
Reinstalling the whole system would then be required to fix things
again.


File: python.info,  Node: Glossary,  Next: About these documents,  Prev: Python Frequently Asked Questions,  Up: Top

12 Glossary
***********

‘>>>’

     The default Python prompt of the interactive shell.  Often seen for
     code examples which can be executed interactively in the
     interpreter.

‘...’

     The default Python prompt of the interactive shell when entering
     code for an indented code block or within a pair of matching left
     and right delimiters (parentheses, square brackets or curly
     braces).

2to3

     A tool that tries to convert Python 2.x code to Python 3.x code by
     handling most of the incompatibilities which can be detected by
     parsing the source and traversing the parse tree.

     2to3 is available in the standard library as *note lib2to3: fe.; a
     standalone entry point is provided as ‘Tools/scripts/2to3’.  See
     *note 2to3 - Automated Python 2 to 3 code translation: 22a4.

abstract base class

     Abstract base classes complement *note duck-typing: 31a4. by
     providing a way to define interfaces when other techniques like
     *note hasattr(): 330. would be clumsy or subtly wrong (for example
     with *note magic methods: 711.).  ABCs introduce virtual
     subclasses, which are classes that don’t inherit from a class but
     are still recognized by *note isinstance(): 31e. and *note
     issubclass(): 31f.; see the *note abc: 4. module documentation.
     Python comes with many built-in ABCs for data structures (in the
     *note collections: 65. module), numbers (in the *note numbers: 125.
     module), and streams (in the *note io: f9. module).  You can create
     your own ABCs with the *note abc: 4. module.

argument

     A value passed to a *note function: 7bf. (or *note method: 31a5.)
     when calling the function.  There are two types of arguments:

        * _keyword argument_: an argument preceded by an identifier
          (e.g.  ‘name=’) in a function call or passed as a value in a
          dictionary preceded by ‘**’.  For example, ‘3’ and ‘5’ are
          both keyword arguments in the following calls to *note
          complex(): 1ec.:

               complex(real=3, imag=5)
               complex(**{'real': 3, 'imag': 5})

        * _positional argument_: an argument that is not a keyword
          argument.  Positional arguments can appear at the beginning of
          an argument list and/or be passed as elements of an *note
          iterable: 8cc. preceded by ‘*’.  For example, ‘3’ and ‘5’ are
          both positional arguments in the following calls:

               complex(3, 5)
               complex(*(3, 5))

     Arguments are assigned to the named local variables in a function
     body.  See the *note Calls: 6f7. section for the rules governing
     this assignment.  Syntactically, any expression can be used to
     represent an argument; the evaluated value is assigned to the local
     variable.

     See also the *note parameter: 7c6. glossary entry and the FAQ
     question on *note the difference between arguments and parameters:
     30ee.

attribute

     A value associated with an object which is referenced by name using
     dotted expressions.  For example, if an object _o_ has an attribute
     _a_ it would be referenced as _o.a_.

BDFL

     Benevolent Dictator For Life, a.k.a.  Guido van Rossum(1), Python’s
     creator.

bytes-like object

     An object that supports the *note buffer protocol: 94a, like *note
     str: 1ea, *note bytearray: 1f7. or *note memoryview: 1c3.
     Bytes-like objects can be used for various operations that expect
     binary data, such as compression, saving to a binary file or
     sending over a socket.  Some operations need the binary data to be
     mutable, in which case not all bytes-like objects can apply.

bytecode

     Python source code is compiled into bytecode, the internal
     representation of a Python program in the CPython interpreter.  The
     bytecode is also cached in ‘.pyc’ and ‘.pyo’ files so that
     executing the same file is faster the second time (recompilation
     from source to bytecode can be avoided).  This "intermediate
     language" is said to run on a *note virtual machine: 31a8. that
     executes the machine code corresponding to each bytecode.  Do note
     that bytecodes are not expected to work between different Python
     virtual machines, nor to be stable between Python releases.

     A list of bytecode instructions can be found in the documentation
     for *note the dis module: 25f6.

class

     A template for creating user-defined objects.  Class definitions
     normally contain method definitions which operate on instances of
     the class.

classic class

     Any class which does not inherit from *note object: 1f1.  See *note
     new-style class: 5d1.  Classic classes have been removed in Python
     3.

coercion

     The implicit conversion of an instance of one type to another
     during an operation which involves two arguments of the same type.
     For example, ‘int(3.15)’ converts the floating point number to the
     integer ‘3’, but in ‘3+4.5’, each argument is of a different type
     (one int, one float), and both must be converted to the same type
     before they can be added or it will raise a ‘TypeError’.  Coercion
     between two operands can be performed with the ‘coerce’ built-in
     function; thus, ‘3+4.5’ is equivalent to calling
     ‘operator.add(*coerce(3, 4.5))’ and results in ‘operator.add(3.0,
     4.5)’.  Without coercion, all arguments of even compatible types
     would have to be normalized to the same value by the programmer,
     e.g., ‘float(3)+4.5’ rather than just ‘3+4.5’.

complex number

     An extension of the familiar real number system in which all
     numbers are expressed as a sum of a real part and an imaginary
     part.  Imaginary numbers are real multiples of the imaginary unit
     (the square root of ‘-1’), often written ‘i’ in mathematics or ‘j’
     in engineering.  Python has built-in support for complex numbers,
     which are written with this latter notation; the imaginary part is
     written with a ‘j’ suffix, e.g., ‘3+1j’.  To get access to complex
     equivalents of the *note math: 10c. module, use *note cmath: 60.
     Use of complex numbers is a fairly advanced mathematical feature.
     If you’re not aware of a need for them, it’s almost certain you can
     safely ignore them.

context manager

     An object which controls the environment seen in a *note with: 1c0.
     statement by defining *note __enter__(): 1ff. and *note __exit__():
     200. methods.  See PEP 343(2).

CPython

     The canonical implementation of the Python programming language, as
     distributed on python.org(3).  The term "CPython" is used when
     necessary to distinguish this implementation from others such as
     Jython or IronPython.

decorator

     A function returning another function, usually applied as a
     function transformation using the ‘@wrapper’ syntax.  Common
     examples for decorators are *note classmethod(): 3f6. and *note
     staticmethod(): 3f5.

     The decorator syntax is merely syntactic sugar, the following two
     function definitions are semantically equivalent:

          def f(...):
              ...
          f = staticmethod(f)

          @staticmethod
          def f(...):
              ...

     The same concept exists for classes, but is less commonly used
     there.  See the documentation for *note function definitions: 6f8.
     and *note class definitions: 33d. for more about decorators.

descriptor

     Any _new-style_ object which defines the methods *note __get__():
     713, *note __set__(): 714, or *note __delete__(): 715.  When a
     class attribute is a descriptor, its special binding behavior is
     triggered upon attribute lookup.  Normally, using _a.b_ to get, set
     or delete an attribute looks up the object named _b_ in the class
     dictionary for _a_, but if _b_ is a descriptor, the respective
     descriptor method gets called.  Understanding descriptors is a key
     to a deep understanding of Python because they are the basis for
     many features including functions, methods, properties, class
     methods, static methods, and reference to super classes.

     For more information about descriptors’ methods, see *note
     Implementing Descriptors: 6fb.

dictionary

     An associative array, where arbitrary keys are mapped to values.
     The keys can be any object with *note __hash__(): 335. and *note
     __eq__(): 21c. methods.  Called a hash in Perl.

docstring

     A string literal which appears as the first expression in a class,
     function or module.  While ignored when the suite is executed, it
     is recognized by the compiler and put into the ‘__doc__’ attribute
     of the enclosing class, function or module.  Since it is available
     via introspection, it is the canonical place for documentation of
     the object.

duck-typing

     A programming style which does not look at an object’s type to
     determine if it has the right interface; instead, the method or
     attribute is simply called or used ("If it looks like a duck and
     quacks like a duck, it must be a duck.")  By emphasizing interfaces
     rather than specific types, well-designed code improves its
     flexibility by allowing polymorphic substitution.  Duck-typing
     avoids tests using *note type(): 490. or *note isinstance(): 31e.
     (Note, however, that duck-typing can be complemented with *note
     abstract base classes: 886.)  Instead, it typically employs *note
     hasattr(): 330. tests or *note EAFP: 113f. programming.

EAFP

     Easier to ask for forgiveness than permission.  This common Python
     coding style assumes the existence of valid keys or attributes and
     catches exceptions if the assumption proves false.  This clean and
     fast style is characterized by the presence of many *note try: 395.
     and *note except: 397. statements.  The technique contrasts with
     the *note LBYL: 31af. style common to many other languages such as
     C.

expression

     A piece of syntax which can be evaluated to some value.  In other
     words, an expression is an accumulation of expression elements like
     literals, names, attribute access, operators or function calls
     which all return a value.  In contrast to many other languages, not
     all language constructs are expressions.  There are also *note
     statement: dcb.s which cannot be used as expressions, such as *note
     print: 4e0. or *note if: 42c.  Assignments are also statements, not
     expressions.

extension module

     A module written in C or C++, using Python’s C API to interact with
     the core and with user code.

file object

     An object exposing a file-oriented API (with methods such as
     ‘read()’ or ‘write()’) to an underlying resource.  Depending on the
     way it was created, a file object can mediate access to a real
     on-disk file or to another type of storage or communication device
     (for example standard input/output, in-memory buffers, sockets,
     pipes, etc.).  File objects are also called _file-like objects_ or
     _streams_.

     There are actually three categories of file objects: raw binary
     files, buffered binary files and text files.  Their interfaces are
     defined in the *note io: f9. module.  The canonical way to create a
     file object is by using the *note open(): 2d6. function.

file-like object

     A synonym for *note file object: 5a4.

finder

     An object that tries to find the *note loader: 827. for a module.
     It must implement a method named ‘find_module()’.  See PEP 302(4)
     for details.

floor division

     Mathematical division that rounds down to nearest integer.  The
     floor division operator is ‘//’.  For example, the expression ‘11
     // 4’ evaluates to ‘2’ in contrast to the ‘2.75’ returned by float
     true division.  Note that ‘(-11) // 4’ is ‘-3’ because that is
     ‘-2.75’ rounded _downward_.  See PEP 238(5).

function

     A series of statements which returns some value to a caller.  It
     can also be passed zero or more *note arguments: 7c0. which may be
     used in the execution of the body.  See also *note parameter: 7c6,
     *note method: 31a5, and the *note Function definitions: 6f8.
     section.

__future__

     A pseudo-module which programmers can use to enable new language
     features which are not compatible with the current interpreter.
     For example, the expression ‘11/4’ currently evaluates to ‘2’.  If
     the module in which it is executed had enabled _true division_ by
     executing:

          from __future__ import division

     the expression ‘11/4’ would evaluate to ‘2.75’.  By importing the
     *note __future__: 1. module and evaluating its variables, you can
     see when a new feature was first added to the language and when it
     will become the default:

          >>> import __future__
          >>> __future__.division
          _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)

garbage collection

     The process of freeing memory when it is not used anymore.  Python
     performs garbage collection via reference counting and a cyclic
     garbage collector that is able to detect and break reference
     cycles.

generator

     A function which returns an iterator.  It looks like a normal
     function except that it contains *note yield: 2f7. statements for
     producing a series a values usable in a for-loop or that can be
     retrieved one at a time with the *note next(): 399. function.  Each
     *note yield: 2f7. temporarily suspends processing, remembering the
     location execution state (including local variables and pending
     try-statements).  When the generator resumes, it picks-up where it
     left-off (in contrast to functions which start fresh on every
     invocation).

generator expression

     An expression that returns an iterator.  It looks like a normal
     expression followed by a *note for: 2f0. expression defining a loop
     variable, range, and an optional *note if: 42c. expression.  The
     combined expression generates values for an enclosing function:

          >>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81
          285

GIL

     See *note global interpreter lock: 154e.

global interpreter lock

     The mechanism used by the *note CPython: 31ad. interpreter to
     assure that only one thread executes Python *note bytecode: 583. at
     a time.  This simplifies the CPython implementation by making the
     object model (including critical built-in types such as *note dict:
     305.) implicitly safe against concurrent access.  Locking the
     entire interpreter makes it easier for the interpreter to be
     multi-threaded, at the expense of much of the parallelism afforded
     by multi-processor machines.

     However, some extension modules, either standard or third-party,
     are designed so as to release the GIL when doing
     computationally-intensive tasks such as compression or hashing.
     Also, the GIL is always released when doing I/O.

     Past efforts to create a "free-threaded" interpreter (one which
     locks shared data at a much finer granularity) have not been
     successful because performance suffered in the common
     single-processor case.  It is believed that overcoming this
     performance issue would make the implementation much more
     complicated and therefore costlier to maintain.

hashable

     An object is _hashable_ if it has a hash value which never changes
     during its lifetime (it needs a *note __hash__(): 335. method), and
     can be compared to other objects (it needs an *note __eq__(): 21c.
     or *note __cmp__(): 221. method).  Hashable objects which compare
     equal must have the same hash value.

     Hashability makes an object usable as a dictionary key and a set
     member, because these data structures use the hash value
     internally.

     All of Python’s immutable built-in objects are hashable, while no
     mutable containers (such as lists or dictionaries) are.  Objects
     which are instances of user-defined classes are hashable by
     default; they all compare unequal (except with themselves), and
     their hash value is their *note id(): 3b2.

IDLE

     An Integrated Development Environment for Python.  IDLE is a basic
     editor and interpreter environment which ships with the standard
     distribution of Python.

immutable

     An object with a fixed value.  Immutable objects include numbers,
     strings and tuples.  Such an object cannot be altered.  A new
     object has to be created if a different value has to be stored.
     They play an important role in places where a constant hash value
     is needed, for example as a key in a dictionary.

integer division

     Mathematical division discarding any remainder.  For example, the
     expression ‘11/4’ currently evaluates to ‘2’ in contrast to the
     ‘2.75’ returned by float division.  Also called _floor division_.
     When dividing two integers the outcome will always be another
     integer (having the floor function applied to it).  However, if one
     of the operands is another numeric type (such as a *note float:
     1eb.), the result will be coerced (see *note coercion: a8b.) to a
     common type.  For example, an integer divided by a float will
     result in a float value, possibly with a decimal fraction.  Integer
     division can be forced by using the ‘//’ operator instead of the
     ‘/’ operator.  See also *note __future__: 31b2.

importing

     The process by which Python code in one module is made available to
     Python code in another module.

importer

     An object that both finds and loads a module; both a *note finder:
     826. and *note loader: 827. object.

interactive

     Python has an interactive interpreter which means you can enter
     statements and expressions at the interpreter prompt, immediately
     execute them and see their results.  Just launch ‘python’ with no
     arguments (possibly by selecting it from your computer’s main
     menu).  It is a very powerful way to test out new ideas or inspect
     modules and packages (remember ‘help(x)’).

interpreted

     Python is an interpreted language, as opposed to a compiled one,
     though the distinction can be blurry because of the presence of the
     bytecode compiler.  This means that source files can be run
     directly without explicitly creating an executable which is then
     run.  Interpreted languages typically have a shorter
     development/debug cycle than compiled ones, though their programs
     generally also run more slowly.  See also *note interactive: 31b8.

iterable

     An object capable of returning its members one at a time.  Examples
     of iterables include all sequence types (such as *note list: 3bc,
     *note str: 1ea, and *note tuple: 408.) and some non-sequence types
     like *note dict: 305. and *note file: 1f9. and objects of any
     classes you define with an *note __iter__(): 321. or *note
     __getitem__(): 44f. method.  Iterables can be used in a *note for:
     2f0. loop and in many other places where a sequence is needed
     (*note zip(): 405, *note map(): 304, ...).  When an iterable object
     is passed as an argument to the built-in function *note iter():
     320, it returns an iterator for the object.  This iterator is good
     for one pass over the set of values.  When using iterables, it is
     usually not necessary to call *note iter(): 320. or deal with
     iterator objects yourself.  The ‘for’ statement does that
     automatically for you, creating a temporary unnamed variable to
     hold the iterator for the duration of the loop.  See also *note
     iterator: 87f, *note sequence: b86, and *note generator: 5dc.

iterator

     An object representing a stream of data.  Repeated calls to the
     iterator’s *note next(): 399. method return successive items in the
     stream.  When no more data are available a *note StopIteration:
     333. exception is raised instead.  At this point, the iterator
     object is exhausted and any further calls to its *note next(): 399.
     method just raise *note StopIteration: 333. again.  Iterators are
     required to have an *note __iter__(): 321. method that returns the
     iterator object itself so every iterator is also iterable and may
     be used in most places where other iterables are accepted.  One
     notable exception is code which attempts multiple iteration passes.
     A container object (such as a *note list: 3bc.) produces a fresh
     new iterator each time you pass it to the *note iter(): 320.
     function or use it in a *note for: 2f0. loop.  Attempting this with
     an iterator will just return the same exhausted iterator object
     used in the previous iteration pass, making it appear like an empty
     container.

     More information can be found in *note Iterator Types: 72a.

key function

     A key function or collation function is a callable that returns a
     value used for sorting or ordering.  For example, *note
     locale.strxfrm(): 2027. is used to produce a sort key that is aware
     of locale specific sort conventions.

     A number of tools in Python accept key functions to control how
     elements are ordered or grouped.  They include *note min(): 224,
     *note max(): 225, *note sorted(): 223, ‘list.sort()’, *note
     heapq.nsmallest(): b91, *note heapq.nlargest(): b90, and *note
     itertools.groupby(): d6a.

     There are several ways to create a key function.  For example.  the
     *note str.lower(): 8cd. method can serve as a key function for case
     insensitive sorts.  Alternatively, an ad-hoc key function can be
     built from a *note lambda: 403. expression such as ‘lambda r:
     (r[0], r[2])’.  Also, the *note operator: 126. module provides
     three key function constructors: *note attrgetter(): ded, *note
     itemgetter(): dee, and *note methodcaller(): def.  See the *note
     Sorting HOW TO: 3069. for examples of how to create and use key
     functions.

keyword argument

     See *note argument: 7c0.

lambda

     An anonymous inline function consisting of a single *note
     expression: 23b6. which is evaluated when the function is called.
     The syntax to create a lambda function is ‘lambda [arguments]:
     expression’

LBYL

     Look before you leap.  This coding style explicitly tests for
     pre-conditions before making calls or lookups.  This style
     contrasts with the *note EAFP: 113f. approach and is characterized
     by the presence of many *note if: 42c. statements.

     In a multi-threaded environment, the LBYL approach can risk
     introducing a race condition between "the looking" and "the
     leaping".  For example, the code, ‘if key in mapping: return
     mapping[key]’ can fail if another thread removes _key_ from
     _mapping_ after the test, but before the lookup.  This issue can be
     solved with locks or by using the EAFP approach.

list

     A built-in Python *note sequence: b86.  Despite its name it is more
     akin to an array in other languages than to a linked list since
     access to elements are O(1).

list comprehension

     A compact way to process all or part of the elements in a sequence
     and return a list with the results.  ‘result = ["0x%02x" % x for x
     in range(256) if x % 2 == 0]’ generates a list of strings
     containing even hex numbers (0x..)  in the range from 0 to 255.
     The *note if: 42c. clause is optional.  If omitted, all elements in
     ‘range(256)’ are processed.

loader

     An object that loads a module.  It must define a method named
     ‘load_module()’.  A loader is typically returned by a *note finder:
     826.  See PEP 302(6) for details.

mapping

     A container object that supports arbitrary key lookups and
     implements the methods specified in the *note Mapping: 20d. or
     *note MutableMapping: b81. *note abstract base classes: b5b.
     Examples include *note dict: 305, *note collections.defaultdict:
     8f8, *note collections.OrderedDict: 1b5. and *note
     collections.Counter: 1b6.

metaclass

     The class of a class.  Class definitions create a class name, a
     class dictionary, and a list of base classes.  The metaclass is
     responsible for taking those three arguments and creating the
     class.  Most object oriented programming languages provide a
     default implementation.  What makes Python special is that it is
     possible to create custom metaclasses.  Most users never need this
     tool, but when the need arises, metaclasses can provide powerful,
     elegant solutions.  They have been used for logging attribute
     access, adding thread-safety, tracking object creation,
     implementing singletons, and many other tasks.

     More information can be found in *note Customizing class creation:
     71b.

method

     A function which is defined inside a class body.  If called as an
     attribute of an instance of that class, the method will get the
     instance object as its first *note argument: 7c0. (which is usually
     called ‘self’).  See *note function: 7bf. and *note nested scope:
     31bd.

method resolution order

     Method Resolution Order is the order in which base classes are
     searched for a member during lookup.  See The Python 2.3 Method
     Resolution Order(7).

module

     An object that serves as an organizational unit of Python code.
     Modules have a namespace containing arbitrary Python objects.
     Modules are loaded into Python by the process of *note importing:
     31b6.

     See also *note package: 31c0.

MRO

     See *note method resolution order: 31be.

mutable

     Mutable objects can change their value but keep their *note id():
     3b2.  See also *note immutable: 56a.

named tuple

     Any tuple-like class whose indexable elements are also accessible
     using named attributes (for example, *note time.localtime(): ae1.
     returns a tuple-like object where the _year_ is accessible either
     with an index such as ‘t[0]’ or with a named attribute like
     ‘t.tm_year’).

     A named tuple can be a built-in type such as *note
     time.struct_time: ae0, or it can be created with a regular class
     definition.  A full featured named tuple can also be created with
     the factory function *note collections.namedtuple(): 1cf.  The
     latter approach automatically provides extra features such as a
     self-documenting representation like ‘Employee(name='jones',
     title='programmer')’.

namespace

     The place where a variable is stored.  Namespaces are implemented
     as dictionaries.  There are the local, global and built-in
     namespaces as well as nested namespaces in objects (in methods).
     Namespaces support modularity by preventing naming conflicts.  For
     instance, the functions ‘__builtin__.open()’ and *note os.open():
     5e4. are distinguished by their namespaces.  Namespaces also aid
     readability and maintainability by making it clear which module
     implements a function.  For instance, writing *note random.seed():
     d4b. or *note itertools.izip(): 406. makes it clear that those
     functions are implemented by the *note random: 142. and *note
     itertools: fa. modules, respectively.

nested scope

     The ability to refer to a variable in an enclosing definition.  For
     instance, a function defined inside another function can refer to
     variables in the outer function.  Note that nested scopes work only
     for reference and not for assignment which will always write to the
     innermost scope.  In contrast, local variables both read and write
     in the innermost scope.  Likewise, global variables read and write
     to the global namespace.

new-style class

     Any class which inherits from *note object: 1f1.  This includes all
     built-in types like *note list: 3bc. and *note dict: 305.  Only
     new-style classes can use Python’s newer, versatile features like
     ‘__slots__’, descriptors, properties, and *note __getattribute__():
     33b.

     More information can be found in *note New-style and classic
     classes: 704.

object

     Any data with state (attributes or value) and defined behavior
     (methods).  Also the ultimate base class of any *note new-style
     class: 5d1.

package

     A Python *note module: 31bf. which can contain submodules or
     recursively, subpackages.  Technically, a package is a Python
     module with an ‘__path__’ attribute.

parameter

     A named entity in a *note function: 7bf. (or method) definition
     that specifies an *note argument: 7c0. (or in some cases,
     arguments) that the function can accept.  There are four types of
     parameters:

        * _positional-or-keyword_: specifies an argument that can be
          passed either *note positionally: 7c0. or as a *note keyword
          argument: 7c0.  This is the default kind of parameter, for
          example _foo_ and _bar_ in the following:

               def func(foo, bar=None): ...

        * _positional-only_: specifies an argument that can be supplied
          only by position.  Python has no syntax for defining
          positional-only parameters.  However, some built-in functions
          have positional-only parameters (e.g.  *note abs(): 5bf.).

        * _var-positional_: specifies that an arbitrary sequence of
          positional arguments can be provided (in addition to any
          positional arguments already accepted by other parameters).
          Such a parameter can be defined by prepending the parameter
          name with ‘*’, for example _args_ in the following:

               def func(*args, **kwargs): ...

        * _var-keyword_: specifies that arbitrarily many keyword
          arguments can be provided (in addition to any keyword
          arguments already accepted by other parameters).  Such a
          parameter can be defined by prepending the parameter name with
          ‘**’, for example _kwargs_ in the example above.

     Parameters can specify both optional and required arguments, as
     well as default values for some optional arguments.

     See also the *note argument: 7c0. glossary entry, the FAQ question
     on *note the difference between arguments and parameters: 30ee, and
     the *note Function definitions: 6f8. section.

positional argument

     See *note argument: 7c0.

Python 3000

     Nickname for the Python 3.x release line (coined long ago when the
     release of version 3 was something in the distant future.)  This is
     also abbreviated "Py3k".

Pythonic

     An idea or piece of code which closely follows the most common
     idioms of the Python language, rather than implementing code using
     concepts common to other languages.  For example, a common idiom in
     Python is to loop over all elements of an iterable using a *note
     for: 2f0. statement.  Many other languages don’t have this type of
     construct, so people unfamiliar with Python sometimes use a
     numerical counter instead:

          for i in range(len(food)):
              print food[i]

     As opposed to the cleaner, Pythonic method:

          for piece in food:
              print piece

reference count

     The number of references to an object.  When the reference count of
     an object drops to zero, it is deallocated.  Reference counting is
     generally not visible to Python code, but it is a key element of
     the *note CPython: 31ad. implementation.  The *note sys: 16d.
     module defines a *note getrefcount(): 23be. function that
     programmers can call to return the reference count for a particular
     object.

__slots__

     A declaration inside a *note new-style class: 5d1. that saves
     memory by pre-declaring space for instance attributes and
     eliminating instance dictionaries.  Though popular, the technique
     is somewhat tricky to get right and is best reserved for rare cases
     where there are large numbers of instances in a memory-critical
     application.

sequence

     An *note iterable: 8cc. which supports efficient element access
     using integer indices via the *note __getitem__(): 44f. special
     method and defines a *note len(): 520. method that returns the
     length of the sequence.  Some built-in sequence types are *note
     list: 3bc, *note str: 1ea, *note tuple: 408, and *note unicode:
     1f5.  Note that *note dict: 305. also supports *note __getitem__():
     44f. and *note __len__(): 40a, but is considered a mapping rather
     than a sequence because the lookups use arbitrary *note immutable:
     56a. keys rather than integers.

slice

     An object usually containing a portion of a *note sequence: b86.  A
     slice is created using the subscript notation, ‘[]’ with colons
     between numbers when several are given, such as in
     ‘variable_name[1:3:5]’.  The bracket (subscript) notation uses
     *note slice: 450. objects internally (or in older versions, *note
     __getslice__(): 724. and *note __setslice__(): 730.).

special method

     A method that is called implicitly by Python to execute a certain
     operation on a type, such as addition.  Such methods have names
     starting and ending with double underscores.  Special methods are
     documented in *note Special method names: 6b8.

statement

     A statement is part of a suite (a "block" of code).  A statement is
     either an *note expression: 23b6. or one of several constructs with
     a keyword, such as *note if: 42c, *note while: 52b. or *note for:
     2f0.

struct sequence

     A tuple with named elements.  Struct sequences expose an interface
     similiar to *note named tuple: a1f. in that elements can either be
     accessed either by index or as an attribute.  However, they do not
     have any of the named tuple methods like *note _make(): b71. or
     *note _asdict(): 1ce.  Examples of struct sequences include *note
     sys.float_info: 8aa. and the return value of *note os.stat(): 3c4.

triple-quoted string

     A string which is bound by three instances of either a quotation
     mark (") or an apostrophe (’).  While they don’t provide any
     functionality not available with single-quoted strings, they are
     useful for a number of reasons.  They allow you to include
     unescaped single and double quotes within a string and they can
     span multiple lines without the use of the continuation character,
     making them especially useful when writing docstrings.

type

     The type of a Python object determines what kind of object it is;
     every object has a type.  An object’s type is accessible as its
     *note __class__: 6ff. attribute or can be retrieved with
     ‘type(obj)’.

universal newlines

     A manner of interpreting text streams in which all of the following
     are recognized as ending a line: the Unix end-of-line convention
     ‘'\n'’, the Windows convention ‘'\r\n'’, and the old Macintosh
     convention ‘'\r'’.  See PEP 278(8) and PEP 3116(9), as well as
     *note str.splitlines(): 8d7. for an additional use.

view

     The objects returned from *note dict.viewkeys(): 1e4, *note
     dict.viewvalues(): 1e5, and *note dict.viewitems(): 1e6. are called
     dictionary views.  They are lazy sequences that will see changes in
     the underlying dictionary.  To force the dictionary view to become
     a full list use ‘list(dictview)’.  See *note Dictionary view
     objects: 905.

virtual machine

     A computer defined entirely in software.  Python’s virtual machine
     executes the *note bytecode: 583. emitted by the bytecode compiler.

Zen of Python

     Listing of Python design principles and philosophies that are
     helpful in understanding and using the language.  The listing can
     be found by typing "‘import this’" at the interactive prompt.

   ---------- Footnotes ----------

   (1) http://www.python.org/~guido/

   (2) http://www.python.org/dev/peps/pep-0343

   (3) http://python.org

   (4) http://www.python.org/dev/peps/pep-0302

   (5) http://www.python.org/dev/peps/pep-0238

   (6) http://www.python.org/dev/peps/pep-0302

   (7) http://www.python.org/download/releases/2.3/mro/

   (8) http://www.python.org/dev/peps/pep-0278

   (9) http://www.python.org/dev/peps/pep-3116


File: python.info,  Node: About these documents,  Next: Reporting Bugs,  Prev: Glossary,  Up: Top

13 About these documents
************************

These documents are generated from reStructuredText(1) sources by
Sphinx(2), a document processor specifically written for the Python
documentation.

  Development of the documentation and its toolchain is an entirely
volunteer effort, just like Python itself.  If you want to contribute,
please take a look at the *note Reporting Bugs: 2a31. page for
information on how to do so.  New volunteers are always welcome!

  Many thanks go to:

   * Fred L. Drake, Jr., the creator of the original Python
     documentation toolset and writer of much of the content;

   * the Docutils(3) project for creating reStructuredText and the
     Docutils suite;

   * Fredrik Lundh for his Alternative Python Reference(4) project from
     which Sphinx got many good ideas.

* Menu:

* Contributors to the Python Documentation:: 

   ---------- Footnotes ----------

   (1) http://docutils.sf.net/rst.html

   (2) http://sphinx-doc.org/

   (3) http://docutils.sf.net/

   (4) http://effbot.org/zone/pyref.htm


File: python.info,  Node: Contributors to the Python Documentation,  Up: About these documents

13.1 Contributors to the Python Documentation
=============================================

Many people have contributed to the Python language, the Python standard
library, and the Python documentation.  See Misc/ACKS(1) in the Python
source distribution for a partial list of contributors.

  It is only with the input and contributions of the Python community
that Python has such wonderful documentation – Thank You!

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Misc/ACKS


File: python.info,  Node: Reporting Bugs,  Next: Copyright,  Prev: About these documents,  Up: Top

14 Reporting Bugs
*****************

Python is a mature programming language which has established a
reputation for stability.  In order to maintain this reputation, the
developers would like to know of any deficiencies you find in Python.

* Menu:

* Documentation bugs:: 
* Using the Python issue tracker:: 
* Getting started contributing to Python yourself:: 


File: python.info,  Node: Documentation bugs,  Next: Using the Python issue tracker,  Up: Reporting Bugs

14.1 Documentation bugs
=======================

If you find a bug in this documentation or would like to propose an
improvement, please submit a bug report on the *note tracker: 31d4.  If
you have a suggestion how to fix it, include that as well.

  If you’re short on time, you can also email your bug report to
<docs@python.org>.  ’docs@’ is a mailing list run by volunteers; your
request will be noticed, though it may take a while to be processed.

See also
........

Documentation bugs(1) on the Python issue tracker

   ---------- Footnotes ----------

   (1) 
http://bugs.python.org/issue?@filter=status&@filter=components&components=4&status=1&@columns=id,activity,title,status&@sort=-activity


File: python.info,  Node: Using the Python issue tracker,  Next: Getting started contributing to Python yourself,  Prev: Documentation bugs,  Up: Reporting Bugs

14.2 Using the Python issue tracker
===================================

Bug reports for Python itself should be submitted via the Python Bug
Tracker (‘http://bugs.python.org/’).  The bug tracker offers a Web form
which allows pertinent information to be entered and submitted to the
developers.

  The first step in filing a report is to determine whether the problem
has already been reported.  The advantage in doing so, aside from saving
the developers time, is that you learn what has been done to fix it; it
may be that the problem has already been fixed for the next release, or
additional information is needed (in which case you are welcome to
provide it if you can!).  To do this, search the bug database using the
search box on the top of the page.

  If the problem you’re reporting is not already in the bug tracker, go
back to the Python Bug Tracker and log in.  If you don’t already have a
tracker account, select the "Register" link or, if you use OpenID, one
of the OpenID provider logos in the sidebar.  It is not possible to
submit a bug report anonymously.

  Being now logged in, you can submit a bug.  Select the "Create New"
link in the sidebar to open the bug reporting form.

  The submission form has a number of fields.  For the "Title" field,
enter a _very_ short description of the problem; less than ten words is
good.  In the "Type" field, select the type of your problem; also select
the "Component" and "Versions" to which the bug relates.

  In the "Comment" field, describe the problem in detail, including what
you expected to happen and what did happen.  Be sure to include whether
any extension modules were involved, and what hardware and software
platform you were using (including version information as appropriate).

  Each bug report will be assigned to a developer who will determine
what needs to be done to correct the problem.  You will receive an
update each time action is taken on the bug.

See also
........

How to Report Bugs Effectively(1)

     Article which goes into some detail about how to create a useful
     bug report.  This describes what kind of information is useful and
     why it is useful.

Bug Writing Guidelines(2)

     Information about writing a good bug report.  Some of this is
     specific to the Mozilla project, but describes general good
     practices.

   ---------- Footnotes ----------

   (1) http://www.chiark.greenend.org.uk/~sgtatham/bugs.html

   (2) http://developer.mozilla.org/en/docs/Bug_writing_guidelines


File: python.info,  Node: Getting started contributing to Python yourself,  Prev: Using the Python issue tracker,  Up: Reporting Bugs

14.3 Getting started contributing to Python yourself
====================================================

Beyond just reporting bugs that you find, you are also welcome to submit
patches to fix them.  You can find more information on how to get
started patching Python in the Python Developer’s Guide(1).  If you have
questions, the core-mentorship mailing list(2) is a friendly place to
get answers to any and all questions pertaining to the process of fixing
issues in Python.

   ---------- Footnotes ----------

   (1) http://docs.python.org/devguide/

   (2) https://mail.python.org/mailman/listinfo/core-mentorship/


File: python.info,  Node: Copyright,  Next: History and License,  Prev: Reporting Bugs,  Up: Top

15 Copyright
************

Python and this documentation is:

  Copyright © 2001-2014 Python Software Foundation.  All rights
reserved.

  Copyright © 2000 BeOpen.com.  All rights reserved.

  Copyright © 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

  Copyright © 1991-1995 Stichting Mathematisch Centrum.  All rights
reserved.

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  See *note History and License: 31da. for complete license and
permissions information.


File: python.info,  Node: History and License,  Next: Python Module Index,  Prev: Copyright,  Up: Top

16 History and License
**********************

* Menu:

* History of the software:: 
* Terms and conditions for accessing or otherwise using Python:: 
* Licenses and Acknowledgements for Incorporated Software:: 


File: python.info,  Node: History of the software,  Next: Terms and conditions for accessing or otherwise using Python,  Up: History and License

16.1 History of the software
============================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see ‘http://www.cwi.nl/’) in the Netherlands
as a successor of a language called ABC. Guido remains Python’s
principal author, although it includes many contributions from others.

  In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see
‘http://www.cnri.reston.va.us/’) in Reston, Virginia where he released
several versions of the software.

  In May 2000, Guido and the Python core development team moved to
BeOpen.com to form the BeOpen PythonLabs team.  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation; see ‘http://www.zope.com/’).  In 2001, the Python Software
Foundation (PSF, see ‘http://www.python.org/psf/’) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property.  Zope Corporation is a sponsoring member of the
PSF.

  All Python releases are Open Source (see ‘http://www.opensource.org/’
for the Open Source Definition).  Historically, most, but not all,
Python releases have also been GPL-compatible; the table below
summarizes the various releases.

Release              Derived from       Year            Owner            GPL compatible?
                                                                         
-----------------------------------------------------------------------------------------------
                                                                         
0.9.0 thru 1.2       n/a                1991-1995       CWI              yes
                                                                         
                                                                         
1.3 thru 1.5.2       1.2                1995-1999       CNRI             yes
                                                                         
                                                                         
1.6                  1.5.2              2000            CNRI             no
                                                                         
                                                                         
2.0                  1.6                2000            BeOpen.com       no
                                                                         
                                                                         
1.6.1                1.6                2001            CNRI             no
                                                                         
                                                                         
2.1                  2.0+1.6.1          2001            PSF              no
                                                                         
                                                                         
2.0.1                2.0+1.6.1          2001            PSF              yes
                                                                         
                                                                         
2.1.1                2.1+2.0.1          2001            PSF              yes
                                                                         
                                                                         
2.1.2                2.1.1              2002            PSF              yes
                                                                         
                                                                         
2.1.3                2.1.2              2002            PSF              yes
                                                                         
                                                                         
2.2 and above        2.1.1              2001-now        PSF              yes
                                                                         

     Note: GPL-compatible doesn’t mean that we’re distributing Python
     under the GPL. All Python licenses, unlike the GPL, let you
     distribute a modified version without making your changes open
     source.  The GPL-compatible licenses make it possible to combine
     Python with other software that is released under the GPL; the
     others don’t.

  Thanks to the many outside volunteers who have worked under Guido’s
direction to make these releases possible.


File: python.info,  Node: Terms and conditions for accessing or otherwise using Python,  Next: Licenses and Acknowledgements for Incorporated Software,  Prev: History of the software,  Up: History and License

16.2 Terms and conditions for accessing or otherwise using Python
=================================================================

                PSF LICENSE AGREEMENT FOR PYTHON 2.7.8

  1. This LICENSE AGREEMENT is between the Python Software Foundation
     ("PSF"), and the Individual or Organization ("Licensee") accessing
     and otherwise using Python 2.7.8 software in source or binary form
     and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, PSF
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 2.7.8 alone or in any derivative version, provided, however,
     that PSF’s License Agreement and PSF’s notice of copyright, i.e.,
     "Copyright © 2001-2014 Python Software Foundation; All Rights
     Reserved" are retained in Python 2.7.8 alone or in any derivative
     version prepared by Licensee.

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 2.7.8 or any part thereof, and wants to make
     the derivative work available to others as provided herein, then
     Licensee hereby agrees to include in any such work a brief summary
     of the changes made to Python 2.7.8.

  4. PSF is making Python 2.7.8 available to Licensee on an "AS IS"
     basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.8
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     2.7.8 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
     AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON
     2.7.8, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  7. Nothing in this License Agreement shall be deemed to create any
     relationship of agency, partnership, or joint venture between PSF
     and Licensee.  This License Agreement does not grant permission to
     use PSF trademarks or trade name in a trademark sense to endorse or
     promote products or services of Licensee, or any third party.

  8. By copying, installing or otherwise using Python 2.7.8, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

              BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0

         BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

  1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an
     office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
     Individual or Organization ("Licensee") accessing and otherwise
     using this software in source or binary form and its associated
     documentation ("the Software").

  2. Subject to the terms and conditions of this BeOpen Python License
     Agreement, BeOpen hereby grants Licensee a non-exclusive,
     royalty-free, world-wide license to reproduce, analyze, test,
     perform and/or display publicly, prepare derivative works,
     distribute, and otherwise use the Software alone or in any
     derivative version, provided, however, that the BeOpen Python
     License is retained in the Software, alone or in any derivative
     version prepared by Licensee.

  3. BeOpen is making the Software available to Licensee on an "AS IS"
     basis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
     SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE,
     OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY
     THEREOF.

  5. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  6. This License Agreement shall be governed by and interpreted in all
     respects by the law of the State of California, excluding conflict
     of law provisions.  Nothing in this License Agreement shall be
     deemed to create any relationship of agency, partnership, or joint
     venture between BeOpen and Licensee.  This License Agreement does
     not grant permission to use BeOpen trademarks or trade names in a
     trademark sense to endorse or promote products or services of
     Licensee, or any third party.  As an exception, the "BeOpen Python"
     logos available at ‘http://www.pythonlabs.com/logos.html’ may be
     used according to the permissions granted on that web page.

  7. By copying, installing or otherwise using the software, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

                CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1

  1. This LICENSE AGREEMENT is between the Corporation for National
     Research Initiatives, having an office at 1895 Preston White Drive,
     Reston, VA 20191 ("CNRI"), and the Individual or Organization
     ("Licensee") accessing and otherwise using Python 1.6.1 software in
     source or binary form and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, CNRI
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 1.6.1 alone or in any derivative version, provided, however,
     that CNRI’s License Agreement and CNRI’s notice of copyright, i.e.,
     "Copyright © 1995-2001 Corporation for National Research
     Initiatives; All Rights Reserved" are retained in Python 1.6.1
     alone or in any derivative version prepared by Licensee.
     Alternately, in lieu of CNRI’s License Agreement, Licensee may
     substitute the following text (omitting the quotes): "Python 1.6.1
     is made available subject to the terms and conditions in CNRI’s
     License Agreement.  This Agreement together with Python 1.6.1 may
     be located on the Internet using the following unique, persistent
     identifier (known as a handle): 1895.22/1013.  This Agreement may
     also be obtained from a proxy server on the Internet using the
     following URL: ‘http://hdl.handle.net/1895.22/1013’."

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 1.6.1 or any part thereof, and wants to make
     the derivative work available to others as provided herein, then
     Licensee hereby agrees to include in any such work a brief summary
     of the changes made to Python 1.6.1.

  4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS"
     basis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
     AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON
     1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  7. This License Agreement shall be governed by the federal
     intellectual property law of the United States, including without
     limitation the federal copyright law, and, to the extent such U.S.
     federal law does not apply, by the law of the Commonwealth of
     Virginia, excluding Virginia’s conflict of law provisions.
     Notwithstanding the foregoing, with regard to derivative works
     based on Python 1.6.1 that incorporate non-separable material that
     was previously distributed under the GNU General Public License
     (GPL), the law of the Commonwealth of Virginia shall govern this
     License Agreement only as to issues arising under or with respect
     to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
     this License Agreement shall be deemed to create any relationship
     of agency, partnership, or joint venture between CNRI and Licensee.
     This License Agreement does not grant permission to use CNRI
     trademarks or trade name in a trademark sense to endorse or promote
     products or services of Licensee, or any third party.

  8. By clicking on the "ACCEPT" button where indicated, or by copying,
     installing or otherwise using Python 1.6.1, Licensee agrees to be
     bound by the terms and conditions of this License Agreement.

                                ACCEPT

          CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2

  Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands.  All rights reserved.

  Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

  STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python.info,  Node: Licenses and Acknowledgements for Incorporated Software,  Prev: Terms and conditions for accessing or otherwise using Python,  Up: History and License

16.3 Licenses and Acknowledgements for Incorporated Software
============================================================

This section is an incomplete, but growing list of licenses and
acknowledgements for third-party software incorporated in the Python
distribution.

* Menu:

* Mersenne Twister:: 
* Sockets: Sockets<2>. 
* Floating point exception control:: 
* MD5 message digest algorithm:: 
* Asynchronous socket services:: 
* Cookie management:: 
* Execution tracing:: 
* UUencode and UUdecode functions:: 
* XML Remote Procedure Calls:: 
* test_epoll:: 
* Select kqueue:: 
* strtod and dtoa:: 
* OpenSSL:: 
* expat:: 
* libffi:: 
* zlib:: 


File: python.info,  Node: Mersenne Twister,  Next: Sockets<2>,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.1 Mersenne Twister
-----------------------

The ‘_random’ module includes code based on a download from
‘http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html’.
The following are the verbatim comments from the original code:

     A C-program for MT19937, with initialization improved 2002/1/26.
     Coded by Takuji Nishimura and Makoto Matsumoto.

     Before using, initialize the state by using init_genrand(seed)
     or init_by_array(init_key, key_length).

     Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in the
         documentation and/or other materials provided with the distribution.

      3. The names of its contributors may not be used to endorse or promote
         products derived from this software without specific prior written
         permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


     Any feedback is very welcome.
     http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
     email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)


File: python.info,  Node: Sockets<2>,  Next: Floating point exception control,  Prev: Mersenne Twister,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.2 Sockets
--------------

The *note socket: 15c. module uses the functions, ‘getaddrinfo()’, and
‘getnameinfo()’, which are coded in separate source files from the WIDE
Project, ‘http://www.wide.ad.jp/’.

     Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:
     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
     3. Neither the name of the project nor the names of its contributors
        may be used to endorse or promote products derived from this software
        without specific prior written permission.

     THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
     GAI_ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
     FOR GAI_ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON GAI_ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN GAI_ANY WAY
     OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     SUCH DAMAGE.


File: python.info,  Node: Floating point exception control,  Next: MD5 message digest algorithm,  Prev: Sockets<2>,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.3 Floating point exception control
---------------------------------------

The source for the *note fpectl: d4. module includes the following
notice:

       ---------------------------------------------------------------------
      /                       Copyright (c) 1996.                           \
     |          The Regents of the University of California.                 |
     |                        All rights reserved.                           |
     |                                                                       |
     |   Permission to use, copy, modify, and distribute this software for   |
     |   any purpose without fee is hereby granted, provided that this en-   |
     |   tire notice is included in all copies of any software which is or   |
     |   includes  a  copy  or  modification  of  this software and in all   |
     |   copies of the supporting documentation for such software.           |
     |                                                                       |
     |   This  work was produced at the University of California, Lawrence   |
     |   Livermore National Laboratory under  contract  no.  W-7405-ENG-48   |
     |   between  the  U.S.  Department  of  Energy and The Regents of the   |
     |   University of California for the operation of UC LLNL.              |
     |                                                                       |
     |                              DISCLAIMER                               |
     |                                                                       |
     |   This  software was prepared as an account of work sponsored by an   |
     |   agency of the United States Government. Neither the United States   |
     |   Government  nor the University of California nor any of their em-   |
     |   ployees, makes any warranty, express or implied, or  assumes  any   |
     |   liability  or  responsibility  for the accuracy, completeness, or   |
     |   usefulness of any information,  apparatus,  product,  or  process   |
     |   disclosed,   or  represents  that  its  use  would  not  infringe   |
     |   privately-owned rights. Reference herein to any specific  commer-   |
     |   cial  products,  process,  or  service  by trade name, trademark,   |
     |   manufacturer, or otherwise, does not  necessarily  constitute  or   |
     |   imply  its endorsement, recommendation, or favoring by the United   |
     |   States Government or the University of California. The views  and   |
     |   opinions  of authors expressed herein do not necessarily state or   |
     |   reflect those of the United States Government or  the  University   |
     |   of  California,  and shall not be used for advertising or product   |
      \  endorsement purposes.                                              /
       ---------------------------------------------------------------------


File: python.info,  Node: MD5 message digest algorithm,  Next: Asynchronous socket services,  Prev: Floating point exception control,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.4 MD5 message digest algorithm
-----------------------------------

The source code for the *note md5: 10d. module contains the following
notice:

     Copyright (C) 1999, 2002 Aladdin Enterprises.  All rights reserved.

     This software is provided 'as-is', without any express or implied
     warranty.  In no event will the authors be held liable for any damages
     arising from the use of this software.

     Permission is granted to anyone to use this software for any purpose,
     including commercial applications, and to alter it and redistribute it
     freely, subject to the following restrictions:

     1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software. If you use this software
        in a product, an acknowledgment in the product documentation would be
        appreciated but is not required.
     2. Altered source versions must be plainly marked as such, and must not be
        misrepresented as being the original software.
     3. This notice may not be removed or altered from any source distribution.

     L. Peter Deutsch
     ghost@aladdin.com

     Independent implementation of MD5 (RFC 1321).

     This code implements the MD5 Algorithm defined in RFC 1321, whose
     text is available at
           http://www.ietf.org/rfc/rfc1321.txt
     The code is derived from the text of the RFC, including the test suite
     (section A.5) but excluding the rest of Appendix A.  It does not include
     any code or documentation that is identified in the RFC as being
     copyrighted.

     The original and principal author of md5.h is L. Peter Deutsch
     <ghost@aladdin.com>.  Other authors are noted in the change history
     that follows (in reverse chronological order):

     2002-04-13 lpd Removed support for non-ANSI compilers; removed
           references to Ghostscript; clarified derivation from RFC 1321;
           now handles byte order either statically or dynamically.
     1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
     1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);
           added conditionalization for C++ compilation from Martin
           Purschke <purschke@bnl.gov>.
     1999-05-03 lpd Original version.


File: python.info,  Node: Asynchronous socket services,  Next: Cookie management,  Prev: MD5 message digest algorithm,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.5 Asynchronous socket services
-----------------------------------

The *note asynchat: 10. and *note asyncore: 11. modules contain the
following notice:

     Copyright 1996 by Sam Rushing

                             All Rights Reserved

     Permission to use, copy, modify, and distribute this software and
     its documentation for any purpose and without fee is hereby
     granted, provided that the above copyright notice appear in all
     copies and that both that copyright notice and this permission
     notice appear in supporting documentation, and that the name of Sam
     Rushing not be used in advertising or publicity pertaining to
     distribution of the software without specific, written prior
     permission.

     SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
     NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
     CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
     OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
     NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
     CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python.info,  Node: Cookie management,  Next: Execution tracing,  Prev: Asynchronous socket services,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.6 Cookie management
------------------------

The *note Cookie: 6f. module contains the following notice:

     Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>

                    All Rights Reserved

     Permission to use, copy, modify, and distribute this software
     and its documentation for any purpose and without fee is hereby
     granted, provided that the above copyright notice appear in all
     copies and that both that copyright notice and this permission
     notice appear in supporting documentation, and that the name of
     Timothy O'Malley  not be used in advertising or publicity
     pertaining to distribution of the software without specific, written
     prior permission.

     Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
     SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
     AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
     ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
     WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
     ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.


File: python.info,  Node: Execution tracing,  Next: UUencode and UUdecode functions,  Prev: Cookie management,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.7 Execution tracing
------------------------

The *note trace: 180. module contains the following notice:

     portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
     err...  reserved and offered to the public under the terms of the
     Python 2.2 license.
     Author: Zooko O'Whielacronx
     http://zooko.com/
     mailto:zooko@zooko.com

     Copyright 2000, Mojam Media, Inc., all rights reserved.
     Author: Skip Montanaro

     Copyright 1999, Bioreason, Inc., all rights reserved.
     Author: Andrew Dalke

     Copyright 1995-1997, Automatrix, Inc., all rights reserved.
     Author: Skip Montanaro

     Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.


     Permission to use, copy, modify, and distribute this Python software and
     its associated documentation for any purpose without fee is hereby
     granted, provided that the above copyright notice appears in all copies,
     and that both that copyright notice and this permission notice appear in
     supporting documentation, and that the name of neither Automatrix,
     Bioreason or Mojam Media be used in advertising or publicity pertaining to
     distribution of the software without specific, written prior permission.


File: python.info,  Node: UUencode and UUdecode functions,  Next: XML Remote Procedure Calls,  Prev: Execution tracing,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.8 UUencode and UUdecode functions
--------------------------------------

The *note uu: 18f. module contains the following notice:

     Copyright 1994 by Lance Ellinghouse
     Cathedral City, California Republic, United States of America.
                            All Rights Reserved
     Permission to use, copy, modify, and distribute this software and its
     documentation for any purpose and without fee is hereby granted,
     provided that the above copyright notice appear in all copies and that
     both that copyright notice and this permission notice appear in
     supporting documentation, and that the name of Lance Ellinghouse
     not be used in advertising or publicity pertaining to distribution
     of the software without specific, written prior permission.
     LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
     THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
     FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
     OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

     Modified by Jack Jansen, CWI, July 1995:
     - Use binascii module to do the actual line-by-line conversion
       between ascii and binary. This results in a 1000-fold speedup. The C
       version is still 5 times faster, though.
     - Arguments more compliant with Python standard


File: python.info,  Node: XML Remote Procedure Calls,  Next: test_epoll,  Prev: UUencode and UUdecode functions,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.9 XML Remote Procedure Calls
---------------------------------

The *note xmlrpclib: 1aa. module contains the following notice:

         The XML-RPC client interface is

     Copyright (c) 1999-2002 by Secret Labs AB
     Copyright (c) 1999-2002 by Fredrik Lundh

     By obtaining, using, and/or copying this software and/or its
     associated documentation, you agree that you have read, understood,
     and will comply with the following terms and conditions:

     Permission to use, copy, modify, and distribute this software and
     its associated documentation for any purpose and without fee is
     hereby granted, provided that the above copyright notice appears in
     all copies, and that both that copyright notice and this permission
     notice appear in supporting documentation, and that the name of
     Secret Labs AB or the author not be used in advertising or publicity
     pertaining to distribution of the software without specific, written
     prior permission.

     SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
     TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
     ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
     BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
     DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
     WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
     ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
     OF THIS SOFTWARE.


File: python.info,  Node: test_epoll,  Next: Select kqueue,  Prev: XML Remote Procedure Calls,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.10 test_epoll
------------------

The ‘test_epoll’ contains the following notice:

     Copyright (c) 2001-2006 Twisted Matrix Laboratories.

     Permission is hereby granted, free of charge, to any person obtaining
     a copy of this software and associated documentation files (the
     "Software"), to deal in the Software without restriction, including
     without limitation the rights to use, copy, modify, merge, publish,
     distribute, sublicense, and/or sell copies of the Software, and to
     permit persons to whom the Software is furnished to do so, subject to
     the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
     LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
     OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
     WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


File: python.info,  Node: Select kqueue,  Next: strtod and dtoa,  Prev: test_epoll,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.11 Select kqueue
---------------------

The *note select: 14e. and contains the following notice for the kqueue
interface:

     Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:
     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     SUCH DAMAGE.


File: python.info,  Node: strtod and dtoa,  Next: OpenSSL,  Prev: Select kqueue,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.12 strtod and dtoa
-----------------------

The file ‘Python/dtoa.c’, which supplies C functions dtoa and strtod for
conversion of C doubles to and from strings, is derived from the file of
the same name by David M. Gay, currently available from
‘http://www.netlib.org/fp/’.  The original file, as retrieved on March
16, 2009, contains the following copyright and licensing notice:

     /****************************************************************
      *
      * The author of this software is David M. Gay.
      *
      * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
      *
      * Permission to use, copy, modify, and distribute this software for any
      * purpose without fee is hereby granted, provided that this entire notice
      * is included in all copies of any software which is or includes a copy
      * or modification of this software and in all copies of the supporting
      * documentation for such software.
      *
      * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
      * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
      * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
      * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
      *
      ***************************************************************/


File: python.info,  Node: OpenSSL,  Next: expat,  Prev: strtod and dtoa,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.13 OpenSSL
---------------

The modules *note hashlib: e6, *note posix: 136, *note ssl: 160, *note
crypt: 75. use the OpenSSL library for added performance if made
available by the operating system.  Additionally, the Windows installers
for Python include a copy of the OpenSSL libraries, so we include a copy
of the OpenSSL license here:

     LICENSE ISSUES
     ==============

     The OpenSSL toolkit stays under a dual license, i.e. both the conditions of
     the OpenSSL License and the original SSLeay license apply to the toolkit.
     See below for the actual license texts. Actually both licenses are BSD-style
     Open Source licenses. In case of any license issues related to OpenSSL
     please contact openssl-core@openssl.org.

     OpenSSL License
     ---------------

       /* ====================================================================
        * Copyright (c) 1998-2008 The OpenSSL Project.  All rights reserved.
        *
        * Redistribution and use in source and binary forms, with or without
        * modification, are permitted provided that the following conditions
        * are met:
        *
        * 1. Redistributions of source code must retain the above copyright
        *    notice, this list of conditions and the following disclaimer.
        *
        * 2. Redistributions in binary form must reproduce the above copyright
        *    notice, this list of conditions and the following disclaimer in
        *    the documentation and/or other materials provided with the
        *    distribution.
        *
        * 3. All advertising materials mentioning features or use of this
        *    software must display the following acknowledgment:
        *    "This product includes software developed by the OpenSSL Project
        *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        *
        * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        *    endorse or promote products derived from this software without
        *    prior written permission. For written permission, please contact
        *    openssl-core@openssl.org.
        *
        * 5. Products derived from this software may not be called "OpenSSL"
        *    nor may "OpenSSL" appear in their names without prior written
        *    permission of the OpenSSL Project.
        *
        * 6. Redistributions of any form whatsoever must retain the following
        *    acknowledgment:
        *    "This product includes software developed by the OpenSSL Project
        *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        *
        * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        * OF THE POSSIBILITY OF SUCH DAMAGE.
        * ====================================================================
        *
        * This product includes cryptographic software written by Eric Young
        * (eay@cryptsoft.com).  This product includes software written by Tim
        * Hudson (tjh@cryptsoft.com).
        *
        */

     Original SSLeay License
     -----------------------

       /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        * All rights reserved.
        *
        * This package is an SSL implementation written
        * by Eric Young (eay@cryptsoft.com).
        * The implementation was written so as to conform with Netscapes SSL.
        *
        * This library is free for commercial and non-commercial use as long as
        * the following conditions are aheared to.  The following conditions
        * apply to all code found in this distribution, be it the RC4, RSA,
        * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        * included with this distribution is covered by the same copyright terms
        * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        *
        * Copyright remains Eric Young's, and as such any Copyright notices in
        * the code are not to be removed.
        * If this package is used in a product, Eric Young should be given attribution
        * as the author of the parts of the library used.
        * This can be in the form of a textual message at program startup or
        * in documentation (online or textual) provided with the package.
        *
        * Redistribution and use in source and binary forms, with or without
        * modification, are permitted provided that the following conditions
        * are met:
        * 1. Redistributions of source code must retain the copyright
        *    notice, this list of conditions and the following disclaimer.
        * 2. Redistributions in binary form must reproduce the above copyright
        *    notice, this list of conditions and the following disclaimer in the
        *    documentation and/or other materials provided with the distribution.
        * 3. All advertising materials mentioning features or use of this software
        *    must display the following acknowledgement:
        *    "This product includes cryptographic software written by
        *     Eric Young (eay@cryptsoft.com)"
        *    The word 'cryptographic' can be left out if the rouines from the library
        *    being used are not cryptographic related :-).
        * 4. If you include any Windows specific code (or a derivative thereof) from
        *    the apps directory (application code) you must include an acknowledgement:
        *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        *
        * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        * SUCH DAMAGE.
        *
        * The licence and distribution terms for any publically available version or
        * derivative of this code cannot be changed.  i.e. this code cannot simply be
        * copied and put under another distribution licence
        * [including the GNU Public Licence.]
        */


File: python.info,  Node: expat,  Next: libffi,  Prev: OpenSSL,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.14 expat
-------------

The ‘pyexpat’ extension is built using an included copy of the expat
sources unless the build is configured ‘--with-system-expat’:

     Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
                                    and Clark Cooper

     Permission is hereby granted, free of charge, to any person obtaining
     a copy of this software and associated documentation files (the
     "Software"), to deal in the Software without restriction, including
     without limitation the rights to use, copy, modify, merge, publish,
     distribute, sublicense, and/or sell copies of the Software, and to
     permit persons to whom the Software is furnished to do so, subject to
     the following conditions:

     The above copyright notice and this permission notice shall be included
     in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


File: python.info,  Node: libffi,  Next: zlib,  Prev: expat,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.15 libffi
--------------

The ‘_ctypes’ extension is built using an included copy of the libffi
sources unless the build is configured ‘--with-system-libffi’:

     Copyright (c) 1996-2008  Red Hat, Inc and others.

     Permission is hereby granted, free of charge, to any person obtaining
     a copy of this software and associated documentation files (the
     ``Software''), to deal in the Software without restriction, including
     without limitation the rights to use, copy, modify, merge, publish,
     distribute, sublicense, and/or sell copies of the Software, and to
     permit persons to whom the Software is furnished to do so, subject to
     the following conditions:

     The above copyright notice and this permission notice shall be included
     in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.


File: python.info,  Node: zlib,  Prev: libffi,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.16 zlib
------------

The *note zlib: 1ad. extension is built using an included copy of the
zlib sources if the zlib version found on the system is too old to be
used for the build:

     Copyright (C) 1995-2010 Jean-loup Gailly and Mark Adler

     This software is provided 'as-is', without any express or implied
     warranty.  In no event will the authors be held liable for any damages
     arising from the use of this software.

     Permission is granted to anyone to use this software for any purpose,
     including commercial applications, and to alter it and redistribute it
     freely, subject to the following restrictions:

     1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software. If you use this software
        in a product, an acknowledgment in the product documentation would be
        appreciated but is not required.

     2. Altered source versions must be plainly marked as such, and must not be
        misrepresented as being the original software.

     3. This notice may not be removed or altered from any source distribution.

     Jean-loup Gailly        Mark Adler
     jloup@gzip.org          madler@alumni.caltech.edu


File: python.info,  Node: Python Module Index,  Next: Index,  Prev: History and License,  Up: Top

Python Module Index
*******************

* Menu:

* __builtin__: 0. The module that provides the built-in namespace.
* __future__: 1. Future statement definitions
* __main__: 2. The environment where the top-level script is run.
* _winreg: 3. Routines and objects for manipulating the Windows
                        registry.
* abc: 4. Abstract base classes according to PEP 3119.
* aepack: 5. Conversion between Python variables and AppleEvent
                        data containers.
* aetools: 6. Basic support for sending Apple Events
* aetypes: 7. Python representation of the Apple Event Object Model.
* aifc: 8. Read and write audio files in AIFF or AIFC format.
* AL: 9. Constants used with the al module.
* al: a. Audio functions on the SGI.
* anydbm: b. Generic interface to DBM-style database modules.
* applesingle: c. Rudimentary decoder for AppleSingle format files.
* argparse: d. Command-line option and argument parsing library.
* array: e. Space efficient arrays of uniformly typed numeric
                        values.
* ast: f. Abstract Syntax Tree classes and manipulation.
* asynchat: 10. Support for asynchronous command/response protocols.
* asyncore: 11. A base class for developing asynchronous socket
                        handling services.
* atexit: 12. Register and execute cleanup functions.
* audioop: 13. Manipulate raw audio data.
* autoGIL: 14. Global Interpreter Lock handling in event loops.
* base64: 15. RFC 3548: Base16, Base32, Base64 Data
                        Encodings
* BaseHTTPServer: 16. Basic HTTP server (base class for SimpleHTTPServer and
                        CGIHTTPServer).
* Bastion: 17. Providing restricted access to objects.
* bdb: 18. Debugger framework.
* binascii: 19. Tools for converting between binary and various ASCII-
                        encoded binary representations.
* binhex: 1a. Encode and decode files in binhex4 format.
* bisect: 1b. Array bisection algorithms for binary searching.
* bsddb: 1c. Interface to Berkeley DB database library
* buildtools: 1d. Helper module for BuildApplet, BuildApplication
                        and macfreeze.
* bz2: 1e. Interface to compression and decompression routines
                        compatible with bzip2.
* calendar: 1f. Functions for working with calendars, including
                        some emulation of the Unix cal program.
* Carbon.AE: 20. Interface to the Apple Events toolbox.
* Carbon.AH: 21. Interface to the Apple Help manager.
* Carbon.App: 22. Interface to the Appearance Manager.
* Carbon.Appearance: 23. Constant definitions for the interface to the
                        Appearance Manager.
* Carbon.CarbonEvents: 24. Constants for the interface to the Carbon Event
                        Manager.
* Carbon.CarbonEvt: 25. Interface to the Carbon Event Manager.
* Carbon.CF: 26. Interface to the Core Foundation.
* Carbon.CG: 27. Interface to Core Graphics.
* Carbon.Cm: 28. Interface to the Component Manager.
* Carbon.Components: 29. Constants for the interface to the Component Manager.
* Carbon.ControlAccessor: 2a. Accessor functions for the interface to the Control
                          Manager.
* Carbon.Controls: 2b. Constants for the interface to the Control Manager.
* Carbon.CoreFounation: 2c. Constants for the interface to CoreFoundation.
* Carbon.CoreGraphics: 2d. Constants for the interface to CoreGraphics.
* Carbon.Ctl: 2e. Interface to the Control Manager.
* Carbon.Dialogs: 2f. Constants for the interface to the Dialog Manager.
* Carbon.Dlg: 30. Interface to the Dialog Manager.
* Carbon.Drag: 31. Interface to the Drag and Drop Manager.
* Carbon.Dragconst: 32. Constants for the interface to the Drag and Drop
                        Manager.
* Carbon.Events: 33. Constants for the interface to the classic Event
                        Manager.
* Carbon.Evt: 34. Interface to the classic Event Manager.
* Carbon.File: 35. Interface to the File Manager.
* Carbon.Files: 36. Constants for the interface to the File Manager.
* Carbon.Fm: 37. Interface to the Font Manager.
* Carbon.Folder: 38. Interface to the Folder Manager.
* Carbon.Folders: 39. Constants for the interface to the Folder Manager.
* Carbon.Fonts: 3a. Constants for the interface to the Font Manager.
* Carbon.Help: 3b. Interface to the Carbon Help Manager.
* Carbon.IBCarbon: 3c. Interface to the Carbon InterfaceBuilder support
                        libraries.
* Carbon.IBCarbonRuntime: 3d. Constants for the interface to the Carbon
                          InterfaceBuilder support libraries.
* Carbon.Icns: 3e. Interface to the Carbon Icon Manager
* Carbon.Icons: 3f. Constants for the interface to the Carbon Icon Manager
* Carbon.Launch: 40. Interface to the Carbon Launch Services.
* Carbon.LaunchServices: 41. Constants for the interface to the Carbon Launch
                         Services.
* Carbon.List: 42. Interface to the List Manager.
* Carbon.Lists: 43. Constants for the interface to the List Manager.
* Carbon.MacHelp: 44. Constants for the interface to the Carbon Help
                        Manager.
* Carbon.MediaDescr: 45. Parsers and generators for Quicktime Media descriptors
* Carbon.Menu: 46. Interface to the Menu Manager.
* Carbon.Menus: 47. Constants for the interface to the Menu Manager.
* Carbon.Mlte: 48. Interface to the MultiLingual Text Editor.
* Carbon.OSA: 49. Interface to the Carbon OSA Library.
* Carbon.OSAconst: 4a. Constants for the interface to the Carbon OSA Library.
* Carbon.Qd: 4b. Interface to the QuickDraw toolbox.
* Carbon.Qdoffs: 4c. Interface to the QuickDraw Offscreen APIs.
* Carbon.QDOffscreen: 4d. Constants for the interface to the QuickDraw Offscreen
                        APIs.
* Carbon.Qt: 4e. Interface to the QuickTime toolbox.
* Carbon.QuickDraw: 4f. Constants for the interface to the QuickDraw toolbox.
* Carbon.QuickTime: 50. Constants for the interface to the QuickTime toolbox.
* Carbon.Res: 51. Interface to the Resource Manager and Handles.
* Carbon.Resources: 52. Constants for the interface to the Resource Manager
                        and Handles.
* Carbon.Scrap: 53. The Scrap Manager provides basic services for
                        implementing cut & paste and clipboard operations.
* Carbon.Snd: 54. Interface to the Sound Manager.
* Carbon.Sound: 55. Constants for the interface to the Sound Manager.
* Carbon.TE: 56. Interface to TextEdit.
* Carbon.TextEdit: 57. Constants for the interface to TextEdit.
* Carbon.Win: 58. Interface to the Window Manager.
* Carbon.Windows: 59. Constants for the interface to the Window Manager.
* cd: 5a. Interface to the CD-ROM on Silicon Graphics systems.
* cfmfile: 5b. Code Fragment Resource module.
* cgi: 5c. Helpers for running Python scripts via the Common
                        Gateway Interface.
* CGIHTTPServer: 5d. This module provides a request handler for HTTP
                        servers which can run CGI scripts.
* cgitb: 5e. Configurable traceback handler for CGI scripts.
* chunk: 5f. Module to read IFF chunks.
* cmath: 60. Mathematical functions for complex numbers.
* cmd: 61. Build line-oriented command interpreters.
* code: 62. Facilities to implement read-eval-print loops.
* codecs: 63. Encode and decode data and streams.
* codeop: 64. Compile (possibly incomplete) Python code.
* collections: 65. High-performance datatypes
* ColorPicker: 66. Interface to the standard color selection dialog.
* colorsys: 67. Conversion functions between RGB and other color
                        systems.
* commands: 68. Utility functions for running external commands.
* compileall: 69. Tools for byte-compiling all Python source files in a
                        directory tree.
* compiler: 6a. Python code compiler written in Python.
* compiler.ast: 6b. 
* compiler.visitor: 6c. 
* ConfigParser: 6d. Configuration file parser.
* contextlib: 6e. Utilities for with-statement contexts.
* Cookie: 6f. Support for HTTP state management (cookies).
* cookielib: 70. Classes for automatic handling of HTTP cookies.
* copy: 71. Shallow and deep copy operations.
* copy_reg: 72. Register pickle support functions.
* cPickle: 73. Faster version of pickle, but not subclassable.
* cProfile: 74. 
* crypt: 75. The crypt() function used to check Unix passwords.
* cStringIO: 76. Faster version of StringIO, but not
                        subclassable.
* csv: 77. Write and read tabular data to and from delimited
                        files.
* ctypes: 78. A foreign function library for Python.
* curses: 79. An interface to the curses library, providing
                        portable terminal handling.
* curses.ascii: 7a. Constants and set-membership functions for ASCII
                        characters.
* curses.panel: 7b. A panel stack extension that adds depth to curses
                        windows.
* curses.textpad: 7c. Emacs-like input editing in a curses window.
* datetime: 7d. Basic date and time types.
* dbhash: 7e. DBM-style interface to the BSD database library.
* dbm: 7f. The standard "database" interface, based on
                        ndbm.
* decimal: 80. Implementation of the General Decimal Arithmetic
                        Specification.
* DEVICE: 81. Constants used with the gl module.
* difflib: 82. Helpers for computing differences between objects.
* dircache: 83. Return directory listing, with cache mechanism.
* dis: 84. Disassembler for Python bytecode.
* distutils: 85. Support for building and installing Python modules
                        into an existing Python installation.
* distutils.archive_util: 86. Utility functions for creating archive files
                          (tarballs, zip files, ...)
* distutils.bcppcompiler: 87. 
* distutils.ccompiler: 88. Abstract CCompiler class
* distutils.cmd: 89. This module provides the abstract base class Command.
                        This class is subclassed by the modules in the
                        distutils.command subpackage.
* distutils.command: 8a. This subpackage contains one module for each standard
                        Distutils command.
* distutils.command.bdist: 8b. Build a binary installer for a package
* distutils.command.bdist_dumb: 8c. Build a "dumb" installer - a simple archive of
                                files
* distutils.command.bdist_msi: 8d. Build a binary distribution as a Windows MSI
                               file
* distutils.command.bdist_packager: 8e. Abstract base class for packagers
* distutils.command.bdist_rpm: 8f. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: 90. Build a Windows installer
* distutils.command.build: 91. Build all files of a package
* distutils.command.build_clib: 92. Build any C libraries in a package
* distutils.command.build_ext: 93. Build any extensions in a package
* distutils.command.build_py: 94. Build the .py/.pyc files of a package
* distutils.command.build_scripts: 95. Build the scripts of a package
* distutils.command.check: 96. Check the metadata of a package
* distutils.command.clean: 97. Clean a package build area
* distutils.command.config: 98. Perform package configuration
* distutils.command.install: 99. Install a package
* distutils.command.install_data: 9a. Install data files from a package
* distutils.command.install_headers: 9b. Install C/C++ header files from a package
* distutils.command.install_lib: 9c. Install library files from a package
* distutils.command.install_scripts: 9d. Install script files from a package
* distutils.command.register: 9e. Register a module with the Python Package Index
* distutils.command.sdist: 9f. Build a source distribution
* distutils.core: a0. The core Distutils functionality
* distutils.cygwinccompiler: a1. 
* distutils.debug: a2. Provides the debug flag for distutils
* distutils.dep_util: a3. Utility functions for simple dependency checking
* distutils.dir_util: a4. Utility functions for operating on directories and
                        directory trees
* distutils.dist: a5. Provides the Distribution class, which
                        represents the module distribution being
                        built/installed/distributed
* distutils.emxccompiler: a6. OS/2 EMX Compiler support
* distutils.errors: a7. Provides standard distutils exceptions
* distutils.extension: a8. Provides the Extension class, used to describe
                        C/C++ extension modules in setup scripts
* distutils.fancy_getopt: a9. Additional getopt functionality
* distutils.file_util: aa. Utility functions for operating on single files
* distutils.filelist: ab. The FileList class, used for poking about the
                        file system and building lists of files.
* distutils.log: ac. A simple logging mechanism, 282-style
* distutils.msvccompiler: ad. Microsoft Compiler
* distutils.spawn: ae. Provides the spawn() function
* distutils.sysconfig: af. Low-level access to configuration information of the
                        Python interpreter.
* distutils.text_file: b0. provides the TextFile class, a simple interface
                        to text files
* distutils.unixccompiler: b1. UNIX C Compiler
* distutils.util: b2. Miscellaneous other utility functions
* distutils.version: b3. implements classes that represent module version
                        numbers.
* dl: b4. Call C functions in shared objects.
* doctest: b5. Test pieces of code within docstrings.
* DocXMLRPCServer: b6. Self-documenting XML-RPC server implementation.
* dumbdbm: b7. Portable implementation of the simple DBM interface.
* dummy_thread: b8. Drop-in replacement for the thread module.
* dummy_threading: b9. Drop-in replacement for the threading module.
* EasyDialogs: ba. Basic Macintosh dialogs.
* email: bb. Package supporting the parsing,
                        manipulating, and generating email
                        messages, including MIME documents.
* email.charset: bc. Character Sets
* email.encoders: bd. Encoders for email message payloads.
* email.errors: be. The exception classes used by the email package.
* email.generator: bf. Generate flat text email messages from a message
                        structure.
* email.header: c0. Representing non-ASCII headers
* email.iterators: c1. Iterate over a message object tree.
* email.message: c2. The base class representing email messages.
* email.mime: c3. Build MIME messages.
* email.parser: c4. Parse flat text email messages to produce a message
                        object structure.
* email.utils: c5. Miscellaneous email package utilities.
* encodings.idna: c6. Internationalized Domain Names implementation
* encodings.utf_8_sig: c7. UTF-8 codec with BOM signature
* errno: c8. Standard errno system symbols.
* exceptions: c9. Standard exception classes.
* fcntl: ca. The fcntl() and ioctl() system calls.
* filecmp: cb. Compare files efficiently.
* fileinput: cc. Loop over standard input or a list of files.
* findertools: cd. Wrappers around the finder’s Apple Events interface.
* FL: ce. Constants used with the fl module.
* fl: cf. FORMS library for applications with graphical user
                        interfaces.
* flp: d0. Functions for loading stored FORMS designs.
* fm: d1. Font Manager interface for SGI workstations.
* fnmatch: d2. Unix shell style filename pattern matching.
* formatter: d3. Generic output formatter and device interface.
* fpectl: d4. Provide control for floating point exception handling.
* fpformat: d5. General floating point formatting functions.
* fractions: d6. Rational numbers.
* FrameWork: d7. Interactive application framework.
* ftplib: d8. FTP protocol client (requires sockets).
* functools: d9. Higher-order functions and operations on callable
                        objects.
* future_builtins: da. 
* gc: db. Interface to the cycle-detecting garbage collector.
* gdbm: dc. GNU’s reinterpretation of dbm.
* gensuitemodule: dd. Create a stub package from an OSA dictionary
* getopt: de. Portable parser for command line options; support both
                        short and long option names.
* getpass: df. Portable reading of passwords and retrieval of the
                        userid.
* gettext: e0. Multilingual internationalization services.
* gl: e1. Functions from the Silicon Graphics Graphics Library.
* GL: e2. Constants used with the gl module.
* glob: e3. Unix shell style pathname pattern expansion.
* grp: e4. The group database (getgrnam() and friends).
* gzip: e5. Interfaces for gzip compression and decompression
                        using file objects.
* hashlib: e6. Secure hash and message digest algorithms.
* heapq: e7. Heap queue algorithm (a.k.a. priority queue).
* hmac: e8. Keyed-Hashing for Message Authentication (HMAC)
                        implementation for Python.
* hotshot: e9. High performance logging profiler, mostly
                        written in C.
* hotshot.stats: ea. Statistical analysis for Hotshot
* htmlentitydefs: eb. Definitions of HTML general entities.
* htmllib: ec. A parser for HTML documents.
* HTMLParser: ed. A simple parser that can handle HTML and XHTML.
* httplib: ee. HTTP and HTTPS protocol client (requires sockets).
* ic: ef. Access to the Mac OS X Internet Config.
* icopen: f0. Internet Config replacement for open().
* imageop: f1. Manipulate raw image data.
* imaplib: f2. IMAP4 protocol client (requires sockets).
* imgfile: f3. Support for SGI imglib files.
* imghdr: f4. Determine the type of image contained in a file or
                        byte stream.
* imp: f5. Access the implementation of the import statement.
* importlib: f6. Convenience wrappers for __import__
* imputil: f7. Manage and augment the import process.
* inspect: f8. Extract information and source code from live objects.
* io: f9. Core tools for working with streams.
* itertools: fa. Functions creating iterators for efficient looping.
* jpeg: fb. Read and write image files in compressed JPEG format.
* json: fc. Encode and decode the JSON format.
* keyword: fd. Test whether a string is a keyword in Python.
* lib2to3: fe. the 2to3 library
* linecache: ff. This module provides random access to individual lines
                        from text files.
* locale: 100. Internationalization services.
* logging: 101. Flexible event logging system for applications.
* logging.config: 102. Configuration of the logging module.
* logging.handlers: 103. Handlers for the logging module.
* macerrors: 104. Constant definitions for many Mac OS error codes.
* MacOS: 105. Access to Mac OS-specific interpreter features.
* macostools: 106. Convenience routines for file manipulation.
* macpath: 107. Mac OS 9 path manipulation functions.
* macresource: 108. Locate script resources.
* mailbox: 109. Manipulate mailboxes in various formats
* mailcap: 10a. Mailcap file handling.
* marshal: 10b. Convert Python objects to streams of bytes and back
                        (with different constraints).
* math: 10c. Mathematical functions (sin() etc.).
* md5: 10d. RSA’s MD5 message digest algorithm.
* mhlib: 10e. Manipulate MH mailboxes from Python.
* mimetools: 10f. Tools for parsing MIME-style message bodies.
* mimetypes: 110. Mapping of filename extensions to MIME types.
* MimeWriter: 111. Write MIME format files.
* mimify: 112. Mimification and unmimification of mail messages.
* MiniAEFrame: 113. Support to act as an Open Scripting Architecture (OSA)
                        server ("Apple Events").
* mmap: 114. Interface to memory-mapped files for Unix and Windows.
* modulefinder: 115. Find modules used by a script.
* msilib: 116. Creation of Microsoft Installer files, and CAB
                        files.
* msvcrt: 117. Miscellaneous useful routines from the MS VC++
                        runtime.
* multifile: 118. Support for reading files which contain distinct
                        parts, such as some MIME data.
* multiprocessing: 119. Process-based "threading" interface.
* multiprocessing.connection: 11a. API for dealing with sockets.
* multiprocessing.dummy: 11b. Dumb wrapper around threading.
* multiprocessing.managers: 11c. Share data between process with shared objects.
* multiprocessing.pool: 11d. Create pools of processes.
* multiprocessing.sharedctypes: 11e. Allocate ctypes objects from shared memory.
* mutex: 11f. Lock and queue for mutual exclusion.
* Nav: 120. Interface to Navigation Services.
* netrc: 121. Loading of .netrc files.
* new: 122. Interface to the creation of runtime implementation
                        objects.
* nis: 123. Interface to Sun’s NIS (Yellow Pages) library.
* nntplib: 124. NNTP protocol client (requires sockets).
* numbers: 125. Numeric abstract base classes (Complex,
                        Real, Integral, etc.).
* operator: 126. Functions corresponding to the standard operators.
* optparse: 127. Command-line option parsing library.
* os: 128. Miscellaneous operating system interfaces.
* os.path: 129. Operations on pathnames.
* ossaudiodev: 12a. Access to OSS-compatible audio devices.
* parser: 12b. Access parse trees for Python source code.
* pdb: 12c. The Python debugger for interactive interpreters.
* pickle: 12d. Convert Python objects to streams of bytes and back.
* pickletools: 12e. Contains extensive comments about the pickle protocols
                        and pickle-machine opcodes, as well as some
                        useful functions.
* pipes: 12f. A Python interface to Unix shell pipelines.
* PixMapWrapper: 130. Wrapper for PixMap objects.
* pkgutil: 131. Utilities for the import system.
* platform: 132. Retrieves as much platform identifying data as
                        possible.
* plistlib: 133. Generate and parse Mac OS X plist files.
* popen2: 134. Subprocesses with accessible standard I/O streams.
* poplib: 135. POP3 protocol client (requires sockets).
* posix: 136. The most common POSIX system calls (normally used via
                        module os).
* posixfile: 137. A file-like object with support for locking.
* pprint: 138. Data pretty printer.
* profile: 139. Python source profiler.
* pstats: 13a. Statistics object for use with the profiler.
* pty: 13b. Pseudo-Terminal Handling for Linux.
* pwd: 13c. The password database (getpwnam() and friends).
* py_compile: 13d. Generate byte-code files from Python source files.
* pyclbr: 13e. Supports information extraction for a Python class
                        browser.
* pydoc: 13f. Documentation generator and online help system.
* Queue: 140. A synchronized queue class.
* quopri: 141. Encode and decode files using the MIME quoted-
                        printable encoding.
* random: 142. Generate pseudo-random numbers with various common
                        distributions.
* re: 143. Regular expression operations.
* readline: 144. GNU readline support for Python.
* repr: 145. Alternate repr() implementation with size limits.
* resource: 146. An interface to provide resource usage information on
                        the current process.
* rexec: 147. Basic restricted execution framework.
* rfc822: 148. Parse 2822 style mail messages.
* rlcompleter: 149. Python identifier completion, suitable for the
                        GNU readline library.
* robotparser: 14a. Loads a robots.txt file and answers questions about
                        fetchability of other URLs.
* runpy: 14b. Locate and run Python modules without importing them
                        first.
* sched: 14c. General purpose event scheduler.
* ScrolledText: 14d. Text widget with a vertical scroll bar.
* select: 14e. Wait for I/O completion on multiple streams.
* sets: 14f. Implementation of sets of unique elements.
* sgmllib: 150. Only as much of an SGML parser as needed to parse
                        HTML.
* sha: 151. NIST’s secure hash algorithm, SHA.
* shelve: 152. Python object persistence.
* shlex: 153. Simple lexical analysis for Unix shell-like languages.
* shutil: 154. High-level file operations, including copying.
* signal: 155. Set handlers for asynchronous events.
* SimpleHTTPServer: 156. This module provides a basic request handler for HTTP
                        servers.
* SimpleXMLRPCServer: 157. Basic XML-RPC server implementation.
* site: 158. Module responsible for site-specific configuration.
* smtpd: 159. A SMTP server implementation in Python.
* smtplib: 15a. SMTP protocol client (requires sockets).
* sndhdr: 15b. Determine type of a sound file.
* socket: 15c. Low-level networking interface.
* SocketServer: 15d. A framework for network servers.
* spwd: 15e. The shadow password database (getspnam() and friends).
* sqlite3: 15f. A DB-API 2.0 implementation using SQLite 3.x.
* ssl: 160. TLS/SSL wrapper for socket objects
* stat: 161. Utilities for interpreting the results of
                        os.stat(), os.lstat() and os.fstat().
* statvfs: 162. Constants for interpreting the result of os.statvfs().
* string: 163. Common string operations.
* StringIO: 164. Read and write strings as if they were files.
* stringprep: 165. String preparation, as per RFC 3453
* struct: 166. Interpret strings as packed binary data.
* subprocess: 167. Subprocess management.
* sunau: 168. Provide an interface to the Sun AU sound format.
* sunaudiodev: 169. Access to Sun audio hardware.
* SUNAUDIODEV: 16a. Constants for use with sunaudiodev.
* symbol: 16b. Constants representing internal nodes of the parse
                        tree.
* symtable: 16c. Interface to the compiler’s internal symbol tables.
* sys: 16d. Access system-specific parameters and functions.
* sysconfig: 16e. Python’s configuration information
* syslog: 16f. An interface to the Unix syslog library routines.
* tabnanny: 170. Tool for detecting white space related problems in
                        Python source files in a directory tree.
* tarfile: 171. Read and write tar-format archive files.
* telnetlib: 172. Telnet client class.
* tempfile: 173. Generate temporary files and directories.
* termios: 174. POSIX style tty control.
* test: 175. Regression tests package containing the testing suite
                        for Python.
* test.test_support: 176. Support for Python regression tests.
* textwrap: 177. Text wrapping and filling
* thread: 178. Create multiple threads of control within one
                        interpreter.
* threading: 179. Higher-level threading interface.
* time: 17a. Time access and conversions.
* timeit: 17b. Measure the execution time of small code snippets.
* Tix: 17c. Tk Extension Widgets for Tkinter
* Tkinter: 17d. Interface to Tcl/Tk for graphical user interfaces
* token: 17e. Constants representing terminal nodes of the parse
                        tree.
* tokenize: 17f. Lexical scanner for Python source code.
* trace: 180. Trace or track Python statement execution.
* traceback: 181. Print or retrieve a stack traceback.
* ttk: 182. Tk themed widget set
* tty: 183. Utility functions that perform common terminal control
                        operations.
* turtle: 184. Turtle graphics for Tk
* types: 185. Names for built-in types.
* unicodedata: 186. Access the Unicode Database.
* unittest: 187. Unit testing framework for Python.
* urllib: 188. Open an arbitrary network resource by URL (requires
                        sockets).
* urllib2: 189. Next generation URL opening library.
* urlparse: 18a. Parse URLs into or assemble them from components.
* user: 18b. A standard way to reference user-specific modules.
* UserDict: 18c. Class wrapper for dictionary objects.
* UserList: 18d. Class wrapper for list objects.
* UserString: 18e. Class wrapper for string objects.
* uu: 18f. Encode and decode files in uuencode format.
* uuid: 190. UUID objects (universally unique identifiers)
                        according to RFC 4122
* videoreader: 191. Read QuickTime movies frame by frame for further
                        processing.
* W: 192. Widgets for the Mac, built on top of FrameWork.
* warnings: 193. Issue warning messages and control their disposition.
* wave: 194. Provide an interface to the WAV sound format.
* weakref: 195. Support for weak references and weak dictionaries.
* webbrowser: 196. Easy-to-use controller for Web browsers.
* whichdb: 197. Guess which DBM-style module created a given database.
* winsound: 198. Access to the sound-playing machinery for Windows.
* wsgiref: 199. WSGI Utilities and Reference Implementation.
* wsgiref.handlers: 19a. WSGI server/gateway base classes.
* wsgiref.headers: 19b. WSGI response header tools.
* wsgiref.simple_server: 19c. A simple WSGI HTTP server.
* wsgiref.util: 19d. WSGI environment utilities.
* wsgiref.validate: 19e. WSGI conformance checker.
* xdrlib: 19f. Encoders and decoders for the External Data
                        Representation (XDR).
* xml: 1a0. Package containing XML processing modules
* xml.dom: 1a1. Document Object Model API for Python.
* xml.dom.minidom: 1a2. Minimal Document Object Model (DOM) implementation.
* xml.dom.pulldom: 1a3. Support for building partial DOM trees from SAX
                        events.
* xml.etree.ElementTree: 1a4. Implementation of the ElementTree API.
* xml.parsers.expat: 1a5. An interface to the Expat non-validating XML parser.
* xml.sax: 1a6. Package containing SAX2 base classes and convenience
                        functions.
* xml.sax.handler: 1a7. Base classes for SAX event handlers.
* xml.sax.saxutils: 1a8. Convenience functions and classes for use with SAX.
* xml.sax.xmlreader: 1a9. Interface which SAX-compliant XML parsers must
                        implement.
* xmlrpclib: 1aa. XML-RPC client access.
* zipfile: 1ab. Read and write ZIP-format archive files.
* zipimport: 1ac. support for importing Python modules from ZIP
                        archives.
* zlib: 1ad. Low-level interface to compression and decompression
                        routines compatible with gzip.


File: python.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* % formatting:                          String Formatting Operations.
                                                             (line    6)
* % interpolation:                       String Formatting Operations.
                                                             (line    6)
* %=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* %PATH%:                                Finding the Python executable.
                                                             (line    8)
* &=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* **; in function calls:                 Calls.              (line  104)
* **=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* *; in function calls:                  Calls.              (line   76)
* *=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* +=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* -=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* ...:                                   Glossary.           (line   10)
* .ini; file:                            ConfigParser --- Configuration file parser.
                                                             (line   11)
* .pdbrc; file:                          Debugger Commands.  (line   36)
* .pypirc file:                          Uploading Packages. (line   47)
* .pythonrc.py; file:                    user --- User-specific configuration hook.
                                                             (line    9)
* //=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* /=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* 2to3:                                  Glossary.           (line   17)
* <<=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* <protocol>_proxy:                      urllib2 --- extensible library for opening URLs.
                                                             (line  204)
* =; assignment statement:               Assignment statements.
                                                             (line    6)
* >>=; augmented assignment:             Augmented assignment statements.
                                                             (line    6)
* >>>:                                   Glossary.           (line    6)
* ^=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* _anonymous_ (ctypes.Structure attribute): Structured data types.
                                                             (line   80)
* _asdict() (collections.somenamedtuple method): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  140)
* _b_base_ (ctypes._CData attribute):    Data types.         (line   65)
* _b_needsfree_ (ctypes._CData attribute): Data types.       (line   72)
* _callmethod() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line   60)
* _CData (class in ctypes):              Data types.         (line    6)
* _clear_type_cache() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line   50)
* _current_frames() (in module sys):     sys --- System-specific parameters and functions.
                                                             (line   61)
* _exit() (in module os):                Process Management. (line   79)
* _fields (ast.AST attribute):           Node classes.       (line   22)
* _fields (collections.somenamedtuple attribute): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  163)
* _fields_ (ctypes.Structure attribute): Structured data types.
                                                             (line   31)
* _flush() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line   84)
* _frozen (C type):                      Importing Modules<2>.
                                                             (line  222)
* _FuncPtr (class in ctypes):            Foreign functions.  (line   12)
* _getframe() (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  493)
* _getvalue() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line  102)
* _handle (ctypes.PyDLL attribute):      Loading shared libraries.
                                                             (line  111)
* _inittab (C type):                     Importing Modules<2>.
                                                             (line  254)
* _make() (collections.somenamedtuple class method): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  131)
* _makeResult() (unittest.TextTestRunner method): Loading and running tests.
                                                             (line  356)
* _name (ctypes.PyDLL attribute):        Loading shared libraries.
                                                             (line  115)
* _objects (ctypes._CData attribute):    Data types.         (line   77)
* _pack_ (ctypes.Structure attribute):   Structured data types.
                                                             (line   73)
* _parse() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   21)
* _PyImport_FindExtension (C function):  Importing Modules<2>.
                                                             (line  205)
* _PyImport_Fini (C function):           Importing Modules<2>.
                                                             (line  201)
* _PyImport_FixupExtension (C function): Importing Modules<2>.
                                                             (line  209)
* _PyImport_Init (C function):           Importing Modules<2>.
                                                             (line  193)
* _PyObject_Del (C function):            Allocating Objects on the Heap.
                                                             (line   20)
* _PyObject_GC_TRACK (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   69)
* _PyObject_GC_UNTRACK (C function):     Supporting Cyclic Garbage Collection.
                                                             (line   97)
* _PyObject_New (C function):            Allocating Objects on the Heap.
                                                             (line    6)
* _PyObject_NewVar (C function):         Allocating Objects on the Heap.
                                                             (line   10)
* _PyString_Resize (C function):         String/Bytes Objects.
                                                             (line  229)
* _PyTuple_Resize (C function):          Tuple Objects.      (line  135)
* _Py_c_diff (C function):               Complex Numbers as C Structures.
                                                             (line   27)
* _Py_c_neg (C function):                Complex Numbers as C Structures.
                                                             (line   33)
* _Py_c_pow (C function):                Complex Numbers as C Structures.
                                                             (line   53)
* _Py_c_prod (C function):               Complex Numbers as C Structures.
                                                             (line   38)
* _Py_c_quot (C function):               Complex Numbers as C Structures.
                                                             (line   44)
* _Py_c_sum (C function):                Complex Numbers as C Structures.
                                                             (line   22)
* _Py_NoneStruct (C variable):           Allocating Objects on the Heap.
                                                             (line  128)
* _quit() (FrameWork.Application method): Application Objects.
                                                             (line   57)
* _replace() (collections.somenamedtuple method): namedtuple Factory Function for Tuples with Named Fields.
                                                             (line  151)
* _setroot() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   15)
* _SimpleCData (class in ctypes):        Fundamental data types<2>.
                                                             (line    6)
* _start() (aetools.TalkTo method):      aetools --- OSA client support.
                                                             (line   66)
* _structure() (in module email.iterators): email iterators Iterators.
                                                             (line   40)
* _urlopener (in module urllib):         High-level interface.
                                                             (line  157)
* _winreg (module):                      _winreg -- Windows registry access.
                                                             (line    6)
* _write() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line   76)
* __abs__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   75)
* __abs__() (object method):             Emulating numeric types.
                                                             (line  110)
* __add__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   80)
* __add__() (object method):             Emulating numeric types.
                                                             (line   11)
* __add__() (rfc822.AddressList method): AddressList Objects.
                                                             (line   18)
* __all__:                               Importing * From a Package.
                                                             (line    6)
* __all__ (optional module attribute):   The import statement.
                                                             (line  132)
* __all__ (package variable):            Importing Modules<2>.
                                                             (line   10)
* __and__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   85)
* __and__() (object method):             Emulating numeric types.
                                                             (line   11)
* __bases__ (class attribute):           The standard type hierarchy.
                                                             (line  586)
* __bases__ (class attribute) <1>:       Special Attributes. (line   31)
* __builtins__:                          The exec statement. (line   42)
* __builtin__ (module):                  __builtin__ --- Built-in objects.
                                                             (line    6)
* __call__() (object method):            Emulating callable objects.
                                                             (line    6)
* __call__() (object method) <1>:        Calls.              (line  150)
* __class__ (instance attribute):        The standard type hierarchy.
                                                             (line  625)
* __class__ (instance attribute) <1>:    Special Attributes. (line   27)
* __closure__ (function attribute):      The standard type hierarchy.
                                                             (line  366)
* __cmp__() (instance method):           Comparisons<2>.     (line   58)
* __cmp__() (object method):             Basic customization.
                                                             (line  178)
* __code__ (function attribute):         The standard type hierarchy.
                                                             (line  366)
* __coerce__() (object method):          Emulating numeric types.
                                                             (line  141)
* __complex__() (object method):         Emulating numeric types.
                                                             (line  118)
* __concat__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  184)
* __contains__() (email.message.Message method): email message Representing an email message.
                                                             (line  192)
* __contains__() (in module operator):   operator --- Standard operators as functions.
                                                             (line  189)
* __contains__() (mailbox.Mailbox method): Mailbox objects.  (line  177)
* __contains__() (object method):        Emulating container types.
                                                             (line  118)
* __copy__() (copy protocol):            copy --- Shallow and deep copy operations.
                                                             (line   73)
* __debug__:                             The assert statement.
                                                             (line   22)
* __debug__ (built-in variable):         Built-in Constants. (line   40)
* __deepcopy__() (copy protocol):        copy --- Shallow and deep copy operations.
                                                             (line   73)
* __defaults__ (function attribute):     The standard type hierarchy.
                                                             (line  366)
* __delattr__() (object method):         Customizing attribute access.
                                                             (line   46)
* __delete__() (object method):          Implementing Descriptors.
                                                             (line   28)
* __delitem__() (email.message.Message method): email message Representing an email message.
                                                             (line  226)
* __delitem__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  201)
* __delitem__() (mailbox.Mailbox method): Mailbox objects.   (line   74)
* __delitem__() (mailbox.MH method):     MH.                 (line   76)
* __delitem__() (object method):         Emulating container types.
                                                             (line   74)
* __delslice__() (in module operator):   operator --- Standard operators as functions.
                                                             (line  206)
* __delslice__() (object method):        Additional methods for emulation of sequence types.
                                                             (line   41)
* __del__() (io.IOBase method):          I/O Base Classes.   (line  154)
* __del__() (object method):             Basic customization.
                                                             (line   48)
* __dict__ (class attribute):            The standard type hierarchy.
                                                             (line  586)
* __dict__ (function attribute):         The standard type hierarchy.
                                                             (line  366)
* __dict__ (instance attribute):         The standard type hierarchy.
                                                             (line  625)
* __dict__ (instance attribute) <1>:     Customizing attribute access.
                                                             (line   37)
* __dict__ (module attribute):           The standard type hierarchy.
                                                             (line  528)
* __dict__ (module attribute) <1>:       Module Objects.     (line   41)
* __dict__ (object attribute):           Special Attributes. (line   10)
* __displayhook__ (in module sys):       sys --- System-specific parameters and functions.
                                                             (line  119)
* __divmod__() (object method):          Emulating numeric types.
                                                             (line   11)
* __div__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   90)
* __div__() (object method):             Emulating numeric types.
                                                             (line   39)
* __doc__ (class attribute):             The standard type hierarchy.
                                                             (line  586)
* __doc__ (function attribute):          The standard type hierarchy.
                                                             (line  366)
* __doc__ (method attribute):            The standard type hierarchy.
                                                             (line  388)
* __doc__ (module attribute):            The standard type hierarchy.
                                                             (line  537)
* __doc__ (module attribute) <1>:        Module Objects.     (line   32)
* __enter__() (contextmanager method):   Context Manager Types.
                                                             (line   18)
* __enter__() (object method):           With Statement Context Managers.
                                                             (line   23)
* __enter__() (_winreg.PyHKEY method):   Registry Handle Objects.
                                                             (line   53)
* __eq__() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  188)
* __eq__() (email.header.Header method): email header Internationalized headers.
                                                             (line  134)
* __eq__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   19)
* __eq__() (instance method):            Comparisons<2>.     (line   58)
* __eq__() (object method):              Basic customization.
                                                             (line  131)
* __excepthook__ (in module sys):        sys --- System-specific parameters and functions.
                                                             (line  119)
* __exit__() (contextmanager method):    Context Manager Types.
                                                             (line   38)
* __exit__() (object method):            With Statement Context Managers.
                                                             (line   30)
* __exit__() (_winreg.PyHKEY method):    Registry Handle Objects.
                                                             (line   53)
* __file__:                              The import statement.
                                                             (line   96)
* __file__ (module attribute):           The standard type hierarchy.
                                                             (line  537)
* __file__ (module attribute) <1>:       Module Objects.     (line   32)
* __file__ (module attribute) <2>:       Module Objects.     (line   55)
* __float__() (object method):           Emulating numeric types.
                                                             (line  118)
* __floordiv__() (in module operator):   operator --- Standard operators as functions.
                                                             (line   96)
* __floordiv__() (object method):        Emulating numeric types.
                                                             (line   11)
* __format__:                            Built-in Functions. (line  556)
* __format__() (datetime.date method):   date Objects.       (line  222)
* __format__() (datetime.datetime method): datetime Objects. (line  447)
* __format__() (datetime.time method):   time Objects.       (line  123)
* __future__:                            Glossary.           (line  296)
* __future__ (module):                   __future__ --- Future statement definitions.
                                                             (line    6)
* __getattribute__() (object method):    More attribute access for new-style classes.
                                                             (line    8)
* __getattr__() (object method):         Customizing attribute access.
                                                             (line   10)
* __getinitargs__() (object method):     Pickling and unpickling normal class instances.
                                                             (line    6)
* __getitem__() (email.message.Message method): email message Representing an email message.
                                                             (line  201)
* __getitem__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  214)
* __getitem__() (mailbox.Mailbox method): Mailbox objects.   (line  138)
* __getitem__() (mapping object method): Special method names.
                                                             (line    6)
* __getitem__() (object method):         Emulating container types.
                                                             (line   48)
* __getnewargs__() (object method):      Pickling and unpickling normal class instances.
                                                             (line   17)
* __getslice__() (in module operator):   operator --- Standard operators as functions.
                                                             (line  219)
* __getslice__() (object method):        Additional methods for emulation of sequence types.
                                                             (line   11)
* __getstate__() (object method):        Pickling and unpickling normal class instances.
                                                             (line   33)
* __get__() (object method):             Implementing Descriptors.
                                                             (line   13)
* __ge__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   19)
* __ge__() (instance method):            Comparisons<2>.     (line   58)
* __ge__() (object method):              Basic customization.
                                                             (line  131)
* __globals__ (function attribute):      The standard type hierarchy.
                                                             (line  366)
* __gt__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   19)
* __gt__() (instance method):            Comparisons<2>.     (line   58)
* __gt__() (object method):              Basic customization.
                                                             (line  131)
* __hash__() (object method):            Basic customization.
                                                             (line  196)
* __hex__() (object method):             Emulating numeric types.
                                                             (line  127)
* __iadd__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  275)
* __iadd__() (object method):            Emulating numeric types.
                                                             (line   83)
* __iadd__() (rfc822.AddressList method): AddressList Objects.
                                                             (line   24)
* __iand__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  282)
* __iand__() (object method):            Emulating numeric types.
                                                             (line   83)
* __iconcat__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  289)
* __idiv__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  297)
* __idiv__() (object method):            Emulating numeric types.
                                                             (line   83)
* __ifloordiv__() (in module operator):  operator --- Standard operators as functions.
                                                             (line  305)
* __ifloordiv__() (object method):       Emulating numeric types.
                                                             (line   83)
* __ilshift__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  312)
* __ilshift__() (object method):         Emulating numeric types.
                                                             (line   83)
* __imod__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  319)
* __imod__() (object method):            Emulating numeric types.
                                                             (line   83)
* __import__() (built-in function):      Built-in Functions. (line 1650)
* __imul__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  326)
* __imul__() (object method):            Emulating numeric types.
                                                             (line   83)
* __index__() (in module operator):      operator --- Standard operators as functions.
                                                             (line  103)
* __index__() (object method):           Emulating numeric types.
                                                             (line  133)
* __init__() (logging.Handler method):   Handler Objects.    (line   11)
* __init__() (logging.logging.Formatter method): Formatters. (line   13)
* __init__() (object method):            The standard type hierarchy.
                                                             (line  498)
* __init__() (object method) <1>:        Basic customization.
                                                             (line   37)
* __instancecheck__() (class method):    Customizing instance and subclass checks.
                                                             (line   17)
* __int__() (object method):             Emulating numeric types.
                                                             (line  118)
* __invert__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  110)
* __invert__() (object method):          Emulating numeric types.
                                                             (line  110)
* __inv__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  110)
* __ior__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  333)
* __ior__() (object method):             Emulating numeric types.
                                                             (line   83)
* __ipow__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  340)
* __ipow__() (object method):            Emulating numeric types.
                                                             (line   83)
* __irepeat__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  347)
* __irshift__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  357)
* __irshift__() (object method):         Emulating numeric types.
                                                             (line   83)
* __isub__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  364)
* __isub__() (object method):            Emulating numeric types.
                                                             (line   83)
* __isub__() (rfc822.AddressList method): AddressList Objects.
                                                             (line   36)
* __iter__() (container method):         Iterator Types.     (line   16)
* __iter__() (iterator method):          Iterator Types.     (line   31)
* __iter__() (mailbox.Mailbox method):   Mailbox objects.    (line  112)
* __iter__() (object method):            Emulating container types.
                                                             (line   83)
* __iter__() (unittest.TestSuite method): Grouping tests.    (line   60)
* __itruediv__() (in module operator):   operator --- Standard operators as functions.
                                                             (line  371)
* __itruediv__() (object method):        Emulating numeric types.
                                                             (line   83)
* __ixor__() (in module operator):       operator --- Standard operators as functions.
                                                             (line  379)
* __ixor__() (object method):            Emulating numeric types.
                                                             (line   83)
* __len__() (email.message.Message method): email message Representing an email message.
                                                             (line  188)
* __len__() (mailbox.Mailbox method):    Mailbox objects.    (line  183)
* __len__() (mapping object method):     Basic customization.
                                                             (line  247)
* __len__() (object method):             Emulating container types.
                                                             (line   40)
* __len__() (rfc822.AddressList method): AddressList Objects.
                                                             (line    8)
* __le__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   19)
* __le__() (instance method):            Comparisons<2>.     (line   58)
* __le__() (object method):              Basic customization.
                                                             (line  131)
* __loader__:                            The import statement.
                                                             (line   96)
* __long__() (object method):            Emulating numeric types.
                                                             (line  118)
* __lshift__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  121)
* __lshift__() (object method):          Emulating numeric types.
                                                             (line   11)
* __lt__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   19)
* __lt__() (instance method):            Comparisons<2>.     (line   58)
* __lt__() (object method):              Basic customization.
                                                             (line  131)
* __main__ (module):                     __main__ --- Top-level script environment.
                                                             (line    6)
* __members__ (object attribute):        Special Attributes. (line   21)
* __metaclass__ (built-in variable):     Customizing class creation.
                                                             (line   35)
* __methods__ (object attribute):        Special Attributes. (line   15)
* __missing__() (collections.defaultdict method): defaultdict objects.
                                                             (line   24)
* __module__ (class attribute):          The standard type hierarchy.
                                                             (line  586)
* __module__ (function attribute):       The standard type hierarchy.
                                                             (line  366)
* __module__ (method attribute):         The standard type hierarchy.
                                                             (line  388)
* __mod__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  126)
* __mod__() (object method):             Emulating numeric types.
                                                             (line   11)
* __mro__ (class attribute):             Special Attributes. (line   42)
* __mul__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  131)
* __mul__() (object method):             Emulating numeric types.
                                                             (line   11)
* __name__:                              The import statement.
                                                             (line   96)
* __name__ (class attribute):            The standard type hierarchy.
                                                             (line  586)
* __name__ (class attribute) <1>:        Special Attributes. (line   35)
* __name__ (function attribute):         The standard type hierarchy.
                                                             (line  366)
* __name__ (method attribute):           The standard type hierarchy.
                                                             (line  388)
* __name__ (module attribute):           The standard type hierarchy.
                                                             (line  537)
* __name__ (module attribute) <1>:       Module Objects.     (line   32)
* __name__ (module attribute) <2>:       Module Objects.     (line   49)
* __neg__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  136)
* __neg__() (object method):             Emulating numeric types.
                                                             (line  110)
* __new__() (object method):             Basic customization.
                                                             (line    6)
* __ne__() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  193)
* __ne__() (email.header.Header method): email header Internationalized headers.
                                                             (line  139)
* __ne__() (in module operator):         operator --- Standard operators as functions.
                                                             (line   19)
* __ne__() (instance method):            Comparisons<2>.     (line   58)
* __ne__() (object method):              Basic customization.
                                                             (line  131)
* __nonzero__() (object method):         Basic customization.
                                                             (line  245)
* __nonzero__() (object method) <1>:     Emulating container types.
                                                             (line   42)
* __not__() (in module operator):        operator --- Standard operators as functions.
                                                             (line   47)
* __oct__() (object method):             Emulating numeric types.
                                                             (line  127)
* __or__() (in module operator):         operator --- Standard operators as functions.
                                                             (line  141)
* __or__() (object method):              Emulating numeric types.
                                                             (line   11)
* __package__:                           The import statement.
                                                             (line   96)
* __path__:                              The import statement.
                                                             (line   41)
* __path__ <1>:                          The import statement.
                                                             (line   96)
* __pos__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  146)
* __pos__() (object method):             Emulating numeric types.
                                                             (line  110)
* __pow__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  151)
* __pow__() (object method):             Emulating numeric types.
                                                             (line   11)
* __radd__() (object method):            Emulating numeric types.
                                                             (line   49)
* __rand__() (object method):            Emulating numeric types.
                                                             (line   49)
* __rcmp__() (object method):            Basic customization.
                                                             (line  192)
* __rdivmod__() (object method):         Emulating numeric types.
                                                             (line   49)
* __rdiv__() (object method):            Emulating numeric types.
                                                             (line   49)
* __reduce_ex__() (object method):       Pickling and unpickling extension types.
                                                             (line   69)
* __reduce__() (object method):          Pickling and unpickling extension types.
                                                             (line    6)
* __repeat__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  231)
* __repr__() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line  109)
* __repr__() (netrc.netrc method):       netrc Objects.      (line   16)
* __repr__() (object method):            Basic customization.
                                                             (line  105)
* __reversed__() (object method):        Emulating container types.
                                                             (line   95)
* __rfloordiv__() (object method):       Emulating numeric types.
                                                             (line   49)
* __rlshift__() (object method):         Emulating numeric types.
                                                             (line   49)
* __rmod__() (object method):            Emulating numeric types.
                                                             (line   49)
* __rmul__() (object method):            Emulating numeric types.
                                                             (line   49)
* __ror__() (object method):             Emulating numeric types.
                                                             (line   49)
* __rpow__() (object method):            Emulating numeric types.
                                                             (line   49)
* __rrshift__() (object method):         Emulating numeric types.
                                                             (line   49)
* __rshift__() (in module operator):     operator --- Standard operators as functions.
                                                             (line  158)
* __rshift__() (object method):          Emulating numeric types.
                                                             (line   11)
* __rsub__() (object method):            Emulating numeric types.
                                                             (line   49)
* __rtruediv__() (object method):        Emulating numeric types.
                                                             (line   49)
* __rxor__() (object method):            Emulating numeric types.
                                                             (line   49)
* __setattr__() (object method):         Customizing attribute access.
                                                             (line   18)
* __setattr__() (object method) <1>:     Customizing attribute access.
                                                             (line   30)
* __setitem__() (email.message.Message method): email message Representing an email message.
                                                             (line  212)
* __setitem__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  244)
* __setitem__() (mailbox.Mailbox method): Mailbox objects.   (line   88)
* __setitem__() (mailbox.Maildir method): Maildir.           (line   91)
* __setitem__() (object method):         Emulating container types.
                                                             (line   65)
* __setslice__() (in module operator):   operator --- Standard operators as functions.
                                                             (line  249)
* __setslice__() (object method):        Additional methods for emulation of sequence types.
                                                             (line   31)
* __setstate__() (object method):        Pickling and unpickling normal class instances.
                                                             (line   42)
* __set__() (object method):             Implementing Descriptors.
                                                             (line   23)
* __slots__:                             Glossary.           (line  753)
* __slots__ (built-in variable):         __slots__.          (line   17)
* __stderr__ (in module sys):            sys --- System-specific parameters and functions.
                                                             (line 1023)
* __stdin__ (in module sys):             sys --- System-specific parameters and functions.
                                                             (line 1023)
* __stdout__ (in module sys):            sys --- System-specific parameters and functions.
                                                             (line 1023)
* __str__() (datetime.date method):      date Objects.       (line  202)
* __str__() (datetime.datetime method):  datetime Objects.   (line  425)
* __str__() (datetime.time method):      time Objects.       (line  113)
* __str__() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  183)
* __str__() (email.header.Header method): email header Internationalized headers.
                                                             (line  124)
* __str__() (email.message.Message method): email message Representing an email message.
                                                             (line   60)
* __str__() (multiprocessing.managers.BaseProxy method): Proxy Objects.
                                                             (line  113)
* __str__() (object method):             Basic customization.
                                                             (line  122)
* __str__() (rfc822.AddressList method): AddressList Objects.
                                                             (line   12)
* __subclasscheck__() (class method):    Customizing instance and subclass checks.
                                                             (line   23)
* __subclasses__() (class method):       Special Attributes. (line   53)
* __subclasshook__() (abc.ABCMeta method): abc --- Abstract Base Classes.
                                                             (line   60)
* __sub__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  163)
* __sub__() (object method):             Emulating numeric types.
                                                             (line   11)
* __sub__() (rfc822.AddressList method): AddressList Objects.
                                                             (line   30)
* __truediv__() (in module operator):    operator --- Standard operators as functions.
                                                             (line  168)
* __truediv__() (object method):         Emulating numeric types.
                                                             (line   39)
* __unicode__() (email.header.Header method): email header Internationalized headers.
                                                             (line  129)
* __unicode__() (object method):         Basic customization.
                                                             (line  255)
* __xor__() (in module operator):        operator --- Standard operators as functions.
                                                             (line  176)
* __xor__() (object method):             Emulating numeric types.
                                                             (line   11)
* |=; augmented assignment:              Augmented assignment statements.
                                                             (line    6)
* a-LAW:                                 audioop --- Manipulate raw audio data.
                                                             (line   12)
* A-LAW:                                 aifc --- Read and write AIFF and AIFC files.
                                                             (line  157)
* A-LAW <1>:                             sndhdr --- Determine type of sound file.
                                                             (line    6)
* a2b_base64() (in module binascii):     binascii --- Convert between binary and ASCII.
                                                             (line   28)
* a2b_hex() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  127)
* a2b_hqx() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line   60)
* a2b_qp() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   40)
* a2b_uu() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   16)
* abc (module):                          abc --- Abstract Base Classes.
                                                             (line    6)
* ABCMeta (class in abc):                abc --- Abstract Base Classes.
                                                             (line   26)
* abort():                               Process Control.    (line    8)
* abort() (ftplib.FTP method):           FTP Objects.        (line   56)
* abort() (in module os):                Process Management. (line   16)
* above() (curses.panel.Panel method):   Panel Objects.      (line   13)
* abs() (built-in function):             Built-in Functions. (line   75)
* abs() (decimal.Context method):        Context objects.    (line  229)
* abs() (in module operator):            operator --- Standard operators as functions.
                                                             (line   75)
* abspath() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line   36)
* abstract base class:                   Glossary.           (line   27)
* AbstractBasicAuthHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  222)
* AbstractDigestAuthHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  245)
* AbstractFormatter (class in formatter): Formatter Implementations.
                                                             (line   18)
* abstractmethod() (in module abc):      abc --- Abstract Base Classes.
                                                             (line  130)
* abstractproperty() (in module abc):    abc --- Abstract Base Classes.
                                                             (line  163)
* AbstractWriter (class in formatter):   Writer Implementations.
                                                             (line   16)
* accept() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  203)
* accept() (multiprocessing.connection.Listener method): Listeners and Clients.
                                                             (line   90)
* accept() (socket.socket method):       Socket Objects.     (line    9)
* accept2dyear (in module time):         time --- Time access and conversions.
                                                             (line  106)
* access() (in module os):               Files and Directories.
                                                             (line    6)
* acos() (in module cmath):              Trigonometric functions<2>.
                                                             (line    6)
* acos() (in module math):               Trigonometric functions.
                                                             (line    6)
* acosh() (in module cmath):             Hyperbolic functions<2>.
                                                             (line    6)
* acosh() (in module math):              Hyperbolic functions.
                                                             (line    6)
* acquire() (logging.Handler method):    Handler Objects.    (line   23)
* acquire() (thread.lock method):        thread --- Multiple threads of control.
                                                             (line   95)
* acquire() (threading.Condition method): Condition Objects. (line   64)
* acquire() (threading.Lock method):     Lock Objects.       (line   29)
* acquire() (threading.RLock method):    RLock Objects.      (line   19)
* acquire() (threading.Semaphore method): Semaphore Objects. (line   22)
* acquire_lock() (in module imp):        imp --- Access the import internals.
                                                             (line  111)
* action (optparse.Option attribute):    Option attributes.  (line   11)
* ACTIONS (optparse.Option attribute):   Adding new actions. (line   31)
* activate_form() (fl.form method):      Form Objects.       (line   40)
* activeCount() (in module threading):   threading --- Higher-level threading interface.
                                                             (line   40)
* active_children() (in module multiprocessing): Miscellaneous<2>.
                                                             (line    6)
* active_count() (in module threading):  threading --- Higher-level threading interface.
                                                             (line   40)
* add() (decimal.Context method):        Context objects.    (line  233)
* add() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line   26)
* add() (in module operator):            operator --- Standard operators as functions.
                                                             (line   80)
* add() (mailbox.Mailbox method):        Mailbox objects.    (line   59)
* add() (mailbox.Maildir method):        Maildir.            (line   91)
* add() (msilib.RadioButtonGroup method): GUI classes.       (line   34)
* add() (pstats.Stats method):           The Stats Class.    (line   48)
* add() (set method):                    Set Types --- set frozenset.
                                                             (line  200)
* add() (tarfile.TarFile method):        TarFile Objects.    (line  170)
* add() (ttk.Notebook method):           ttk Notebook.       (line    8)
* addch() (curses.window method):        Window Objects.     (line    9)
* addCleanup() (unittest.TestCase method): Test cases.       (line  599)
* addcomponent() (turtle.Shape method):  The public classes of the module turtle.
                                                             (line   62)
* addError() (unittest.TestResult method): Loading and running tests.
                                                             (line  279)
* addExpectedFailure() (unittest.TestResult method): Loading and running tests.
                                                             (line  315)
* addFailure() (unittest.TestResult method): Loading and running tests.
                                                             (line  290)
* addfile() (tarfile.TarFile method):    TarFile Objects.    (line  197)
* addFilter() (logging.Handler method):  Handler Objects.    (line   44)
* addFilter() (logging.Logger method):   Logger Objects.     (line  185)
* addHandler() (logging.Logger method):  Logger Objects.     (line  202)
* addheader() (MimeWriter.MimeWriter method): MimeWriter Objects.
                                                             (line    8)
* addinfo() (hotshot.Profile method):    Profile Objects.    (line    8)
* addition:                              Binary arithmetic operations.
                                                             (line   57)
* addLevelName() (in module logging):    Module-Level Functions.
                                                             (line  144)
* addnstr() (curses.window method):      Window Objects.     (line   24)
* AddPackagePath() (in module modulefinder): modulefinder --- Find modules used by a script.
                                                             (line   18)
* address (multiprocessing.connection.Listener attribute): Listeners and Clients.
                                                             (line  105)
* address (multiprocessing.managers.BaseManager attribute): Managers.
                                                             (line  118)
* AddressList (class in rfc822):         rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   55)
* addresslist (rfc822.AddressList attribute): AddressList Objects.
                                                             (line   44)
* addressof() (in module ctypes):        Utility functions.  (line    6)
* address_family (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   44)
* address_string() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  246)
* addshape() (in module turtle):         Settings and special methods.
                                                             (line   69)
* addsitedir() (in module site):         site --- Site-specific configuration hook.
                                                             (line  133)
* addSkip() (unittest.TestResult method): Loading and running tests.
                                                             (line  307)
* addstr() (curses.window method):       Window Objects.     (line   31)
* addSuccess() (unittest.TestResult method): Loading and running tests.
                                                             (line  301)
* addTest() (unittest.TestSuite method): Grouping tests.     (line   25)
* addTests() (unittest.TestSuite method): Grouping tests.    (line   30)
* addTypeEqualityFunc() (unittest.TestCase method): Test cases.
                                                             (line  421)
* addUnexpectedSuccess() (unittest.TestResult method): Loading and running tests.
                                                             (line  325)
* add_alias() (in module email.charset): email charset Representing character sets.
                                                             (line  231)
* add_argument() (argparse.ArgumentParser method): The add_argument method.
                                                             (line    6)
* add_argument_group() (argparse.ArgumentParser method): Argument groups.
                                                             (line    6)
* add_box() (fl.form method):            Form Objects.       (line   64)
* add_browser() (fl.form method):        Form Objects.       (line  142)
* add_button() (fl.form method):         Form Objects.       (line   76)
* add_cgi_vars() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  100)
* add_charset() (in module email.charset): email charset Representing character sets.
                                                             (line  202)
* add_choice() (fl.form method):         Form Objects.       (line  135)
* add_clock() (fl.form method):          Form Objects.       (line   72)
* add_codec() (in module email.charset): email charset Representing character sets.
                                                             (line  240)
* add_cookie_header() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   11)
* add_counter() (fl.form method):        Form Objects.       (line  118)
* add_data() (in module msilib):         msilib --- Read and write Microsoft Installer files.
                                                             (line   72)
* add_data() (urllib2.Request method):   Request Objects.    (line    9)
* add_dial() (fl.form method):           Form Objects.       (line  105)
* add_fallback() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   28)
* add_file() (msilib.Directory method):  Directory Objects.  (line   30)
* add_flag() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   76)
* add_flag() (mailbox.mboxMessage method): mboxMessage.      (line   79)
* add_flag() (mailbox.MMDFMessage method): MMDFMessage.      (line   78)
* add_flowing_data() (formatter.formatter method): The Formatter Interface.
                                                             (line   43)
* add_folder() (mailbox.Maildir method): Maildir.            (line   71)
* add_folder() (mailbox.MH method):      MH.                 (line   42)
* add_handler() (urllib2.OpenerDirector method): OpenerDirector Objects.
                                                             (line    8)
* add_header() (email.message.Message method): email message Representing an email message.
                                                             (line  265)
* add_header() (urllib2.Request method): Request Objects.    (line   29)
* add_header() (wsgiref.headers.Headers method): wsgiref headers -- WSGI response header tools.
                                                             (line   62)
* add_history() (in module readline):    readline --- GNU readline interface.
                                                             (line  169)
* add_hor_rule() (formatter.formatter method): The Formatter Interface.
                                                             (line   36)
* add_include_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line   97)
* add_input() (fl.form method):          Form Objects.       (line  125)
* add_label() (mailbox.BabylMessage method): BabylMessage.   (line   55)
* add_label_data() (formatter.formatter method): The Formatter Interface.
                                                             (line   59)
* add_library() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  114)
* add_library_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  136)
* add_lightbutton() (fl.form method):    Form Objects.       (line   81)
* add_line_break() (formatter.formatter method): The Formatter Interface.
                                                             (line   31)
* add_link_object() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  181)
* add_literal_data() (formatter.formatter method): The Formatter Interface.
                                                             (line   53)
* add_menu() (fl.form method):           Form Objects.       (line  130)
* add_mutually_exclusive_group() (argparse.ArgumentParser method): Mutual exclusion.
                                                             (line    6)
* add_option() (optparse.OptionParser method): Defining options.
                                                             (line   14)
* add_parent() (urllib2.BaseHandler method): BaseHandler Objects.
                                                             (line   10)
* add_password() (urllib2.HTTPPasswordMgr method): HTTPPasswordMgr Objects.
                                                             (line    9)
* add_positioner() (fl.form method):     Form Objects.       (line  110)
* add_roundbutton() (fl.form method):    Form Objects.       (line   86)
* add_runtime_library_dir() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  151)
* add_section() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   17)
* add_sequence() (mailbox.MHMessage method): MHMessage.      (line   41)
* add_slider() (fl.form method):         Form Objects.       (line   91)
* add_stream() (in module msilib):       msilib --- Read and write Microsoft Installer files.
                                                             (line  102)
* add_subparsers() (argparse.ArgumentParser method): Sub-commands.
                                                             (line    6)
* add_suffix() (imputil.ImportManager method): imputil --- Import utilities.
                                                             (line   26)
* add_tables() (in module msilib):       msilib --- Read and write Microsoft Installer files.
                                                             (line   93)
* add_text() (fl.form method):           Form Objects.       (line   68)
* add_timer() (fl.form method):          Form Objects.       (line  154)
* add_type() (in module mimetypes):      mimetypes --- Map filenames to MIME types.
                                                             (line   98)
* add_unredirected_header() (urllib2.Request method): Request Objects.
                                                             (line   40)
* add_valslider() (fl.form method):      Form Objects.       (line   98)
* adjusted() (decimal.Decimal method):   Decimal objects.    (line  114)
* adler32() (in module zlib):            zlib --- Compression compatible with gzip.
                                                             (line   26)
* ADPCM, Intel/DVI:                      audioop --- Manipulate raw audio data.
                                                             (line   12)
* adpcm2lin() (in module audioop):       audioop --- Manipulate raw audio data.
                                                             (line   33)
* aepack (module):                       aepack --- Conversion between Python variables and AppleEvent data containers.
                                                             (line    6)
* AES; algorithm:                        sha --- SHA-1 message digest algorithm.
                                                             (line   73)
* AEServer (class in MiniAEFrame):       MiniAEFrame --- Open Scripting Architecture server support.
                                                             (line   14)
* AEText (class in aetypes):             aetypes --- AppleEvent objects.
                                                             (line   57)
* aetools (module):                      aetools --- OSA client support.
                                                             (line    6)
* aetypes (module):                      aetypes --- AppleEvent objects.
                                                             (line    6)
* AF_INET (in module socket):            socket --- Low-level networking interface.
                                                             (line  143)
* AF_INET6 (in module socket):           socket --- Low-level networking interface.
                                                             (line  143)
* AF_UNIX (in module socket):            socket --- Low-level networking interface.
                                                             (line  143)
* aifc (module):                         aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* aifc() (aifc.aifc method):             aifc --- Read and write AIFF and AIFC files.
                                                             (line  131)
* AIFF:                                  aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* AIFF <1>:                              chunk --- Read IFF chunked data.
                                                             (line    6)
* aiff() (aifc.aifc method):             aifc --- Read and write AIFF and AIFC files.
                                                             (line  125)
* AIFF-C:                                aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* AIFF-C <1>:                            chunk --- Read IFF chunked data.
                                                             (line    6)
* al (module):                           al --- Audio functions on the SGI.
                                                             (line    6)
* AL (module):                           AL --- Constants used with the al module.
                                                             (line    6)
* alarm() (in module signal):            signal --- Set handlers for asynchronous events.
                                                             (line  129)
* alaw2lin() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line   40)
* alignment() (in module ctypes):        Utility functions.  (line   11)
* all() (built-in function):             Built-in Functions. (line   81)
* allocate_lock() (in module thread):    thread --- Multiple threads of control.
                                                             (line   58)
* allowed_domains() (cookielib.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   65)
* allow_reuse_address (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   70)
* all_errors (in module ftplib):         ftplib --- FTP protocol client.
                                                             (line  105)
* all_features (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   88)
* all_properties (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line  120)
* alt() (in module curses.ascii):        curses ascii --- Utilities for ASCII characters.
                                                             (line  219)
* altsep (in module os):                 Miscellaneous System Information.
                                                             (line   93)
* altzone (in module time):              time --- Time access and conversions.
                                                             (line  113)
* ALT_DIGITS (in module locale):         locale --- Internationalization services.
                                                             (line  287)
* ALWAYS_TYPED_ACTIONS (optparse.Option attribute): Adding new actions.
                                                             (line   43)
* AMPER (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* AMPEREQUAL (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* anchor_bgn() (htmllib.HTMLParser method): HTMLParser Objects.
                                                             (line   23)
* anchor_end() (htmllib.HTMLParser method): HTMLParser Objects.
                                                             (line   32)
* and_() (in module operator):           operator --- Standard operators as functions.
                                                             (line   85)
* annotate() (in module dircache):       dircache --- Cached directory listings.
                                                             (line   33)
* announce() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  504)
* anonymous; function:                   Lambdas.            (line    6)
* answer_challenge() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line   24)
* any() (built-in function):             Built-in Functions. (line   94)
* anydbm (module):                       anydbm --- Generic access to DBM-style databases.
                                                             (line    6)
* api_version (in module sys):           sys --- System-specific parameters and functions.
                                                             (line 1075)
* apop() (poplib.POP3 method):           POP3 Objects.       (line   34)
* APPDATA:                               PEP 370 Per-user site-packages Directory.
                                                             (line   26)
* append() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  103)
* append() (collections.deque method):   deque objects.      (line   39)
* append() (email.header.Header method): email header Internationalized headers.
                                                             (line   84)
* append() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   33)
* append() (list method):                Mutable Sequence Types.
                                                             (line   13)
* append() (msilib.CAB method):          CAB Objects.        (line   15)
* append() (pipes.Template method):      Template Objects.   (line   22)
* append() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   81)
* appendChild() (xml.dom.Node method):   Node Objects.       (line  115)
* appendleft() (collections.deque method): deque objects.    (line   43)
* AppleEvents:                           findertools --- The finder's Apple Events interface.
                                                             (line    6)
* AppleEvents <1>:                       MiniAEFrame --- Open Scripting Architecture server support.
                                                             (line    6)
* applesingle (module):                  applesingle --- AppleSingle decoder.
                                                             (line    6)
* Application() (in module FrameWork):   FrameWork --- Interactive application framework.
                                                             (line   35)
* application_uri() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   32)
* apply (2to3 fixer):                    Fixers.             (line   10)
* apply() (built-in function):           Non-essential Built-in Functions.
                                                             (line   15)
* apply() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line   39)
* apply_async() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line   47)
* architecture() (in module platform):   Cross Platform.     (line    6)
* archive (zipimport.zipimporter attribute): zipimporter Objects.
                                                             (line   66)
* aRepr (in module repr):                repr --- Alternate repr implementation.
                                                             (line   28)
* argparse (module):                     argparse --- Parser for command-line options arguments and sub-commands.
                                                             (line    6)
* args (exceptions.BaseException attribute): Built-in Exceptions.
                                                             (line   55)
* args (functools.partial attribute):    partial Objects.    (line   15)
* argtypes (ctypes._FuncPtr attribute):  Foreign functions.  (line   36)
* argument:                              Glossary.           (line   41)
* argument; call semantics:              Slicings.           (line   56)
* argument; difference from parameter:   How can I pass optional or keyword parameters from one function to another?.
                                                             (line   26)
* argument; function definition:         Function definitions.
                                                             (line   50)
* ArgumentDefaultsHelpFormatter (class in argparse): formatter_class.
                                                             (line   10)
* ArgumentError:                         Foreign functions.  (line   84)
* ArgumentParser (class in argparse):    ArgumentParser objects.
                                                             (line    6)
* argv (in module sys):                  sys --- System-specific parameters and functions.
                                                             (line   10)
* argv (in module sys) <1>:              Process-wide parameters.
                                                             (line  160)
* arithmetic:                            Numeric Types --- int float long complex.
                                                             (line   34)
* arithmetic; conversion:                Arithmetic conversions.
                                                             (line    6)
* ArithmeticError:                       Built-in Exceptions.
                                                             (line   79)
* array (class in array):                array --- Efficient arrays of numeric values.
                                                             (line   66)
* array (module):                        array --- Efficient arrays of numeric values.
                                                             (line    6)
* Array() (in module multiprocessing):   Shared ctypes Objects.
                                                             (line   41)
* Array() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   51)
* Array() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  173)
* arrays:                                array --- Efficient arrays of numeric values.
                                                             (line    6)
* ArrayType (in module array):           array --- Efficient arrays of numeric values.
                                                             (line   81)
* article() (nntplib.NNTP method):       NNTP Objects.       (line  144)
* as; import statement:                  The import statement.
                                                             (line    6)
* as; with statement:                    The with statement. (line    6)
* ascii() (in module curses.ascii):      curses ascii --- Utilities for ASCII characters.
                                                             (line  210)
* ascii() (in module future_builtins):   future_builtins --- Python 3 builtins.
                                                             (line   30)
* ASCII@ASCII:                           Notation.           (line   32)
* ASCII@ASCII <1>:                       String literals.    (line    8)
* ASCII@ASCII <2>:                       String literals.    (line  108)
* ASCII@ASCII <3>:                       Delimiters.         (line   23)
* ASCII@ASCII <4>:                       The standard type hierarchy.
                                                             (line  154)
* ASCII@ASCII <5>:                       The standard type hierarchy.
                                                             (line  166)
* ascii_letters (in module string):      String constants.   (line    8)
* ascii_lowercase (in module string):    String constants.   (line   14)
* ascii_uppercase (in module string):    String constants.   (line   19)
* asctime() (in module time):            time --- Time access and conversions.
                                                             (line  120)
* asin() (in module cmath):              Trigonometric functions<2>.
                                                             (line   13)
* asin() (in module math):               Trigonometric functions.
                                                             (line   10)
* asinh() (in module cmath):             Hyperbolic functions<2>.
                                                             (line   12)
* asinh() (in module math):              Hyperbolic functions.
                                                             (line   12)
* AskFileForOpen() (in module EasyDialogs): EasyDialogs --- Basic Macintosh dialogs.
                                                             (line  110)
* AskFileForSave() (in module EasyDialogs): EasyDialogs --- Basic Macintosh dialogs.
                                                             (line  132)
* AskFolder() (in module EasyDialogs):   EasyDialogs --- Basic Macintosh dialogs.
                                                             (line  144)
* AskPassword() (in module EasyDialogs): EasyDialogs --- Basic Macintosh dialogs.
                                                             (line   36)
* AskString() (in module EasyDialogs):   EasyDialogs --- Basic Macintosh dialogs.
                                                             (line   25)
* AskYesNoCancel() (in module EasyDialogs): EasyDialogs --- Basic Macintosh dialogs.
                                                             (line   43)
* assertAlmostEqual() (unittest.TestCase method): Test cases.
                                                             (line  331)
* assertDictContainsSubset() (unittest.TestCase method): Test cases.
                                                             (line  406)
* assertDictEqual() (unittest.TestCase method): Test cases.  (line  509)
* assertEqual() (unittest.TestCase method): Test cases.      (line  159)
* assertFalse() (unittest.TestCase method): Test cases.      (line  180)
* assertGreater() (unittest.TestCase method): Test cases.    (line  355)
* assertGreaterEqual() (unittest.TestCase method): Test cases.
                                                             (line  355)
* assertIn() (unittest.TestCase method): Test cases.         (line  207)
* AssertionError:                        Built-in Exceptions.
                                                             (line  123)
* assertIs() (unittest.TestCase method): Test cases.         (line  192)
* assertIsInstance() (unittest.TestCase method): Test cases. (line  214)
* assertIsNone() (unittest.TestCase method): Test cases.     (line  200)
* assertIsNot() (unittest.TestCase method): Test cases.      (line  192)
* assertIsNotNone() (unittest.TestCase method): Test cases.  (line  200)
* assertItemsEqual() (unittest.TestCase method): Test cases. (line  389)
* assertLess() (unittest.TestCase method): Test cases.       (line  355)
* assertLessEqual() (unittest.TestCase method): Test cases.  (line  355)
* assertListEqual() (unittest.TestCase method): Test cases.  (line  486)
* assertMultiLineEqual() (unittest.TestCase method): Test cases.
                                                             (line  461)
* assertNotAlmostEqual() (unittest.TestCase method): Test cases.
                                                             (line  331)
* assertNotEqual() (unittest.TestCase method): Test cases.   (line  175)
* assertNotIn() (unittest.TestCase method): Test cases.      (line  207)
* assertNotIsInstance() (unittest.TestCase method): Test cases.
                                                             (line  214)
* assertNotRegexpMatches() (unittest.TestCase method): Test cases.
                                                             (line  379)
* assertRaises() (unittest.TestCase method): Test cases.     (line  238)
* assertRaisesRegexp() (unittest.TestCase method): Test cases.
                                                             (line  271)
* assertRegexpMatches() (unittest.TestCase method): Test cases.
                                                             (line  368)
* assertSequenceEqual() (unittest.TestCase method): Test cases.
                                                             (line  471)
* assertSetEqual() (unittest.TestCase method): Test cases.   (line  497)
* assertTrue() (unittest.TestCase method): Test cases.       (line  180)
* assertTupleEqual() (unittest.TestCase method): Test cases. (line  486)
* assert_line_data() (formatter.formatter method): The Formatter Interface.
                                                             (line  143)
* assignment; statement:                 The standard type hierarchy.
                                                             (line  203)
* assignment; statement <1>:             Assignment statements.
                                                             (line    6)
* AST (class in ast):                    Node classes.       (line    6)
* ast (module):                          ast --- Abstract Syntax Trees.
                                                             (line    6)
* astimezone() (datetime.datetime method): datetime Objects. (line  292)
* ASTVisitor (class in compiler.visitor): Using Visitors to Walk ASTs.
                                                             (line   19)
* asyncevents() (FrameWork.Application method): Application Objects.
                                                             (line   42)
* asynchat (module):                     asynchat --- Asynchronous socket command/response handler.
                                                             (line    6)
* asyncore (module):                     asyncore --- Asynchronous socket handler.
                                                             (line    6)
* AsyncResult (class in multiprocessing.pool): Process Pools.
                                                             (line  120)
* async_chat (class in asynchat):        asynchat --- Asynchronous socket command/response handler.
                                                             (line   23)
* async_chat.ac_in_buffer_size (in module asynchat): asynchat --- Asynchronous socket command/response handler.
                                                             (line   42)
* async_chat.ac_out_buffer_size (in module asynchat): asynchat --- Asynchronous socket command/response handler.
                                                             (line   46)
* as_integer_ratio() (float method):     Additional Methods on Float.
                                                             (line    9)
* AS_IS (in module formatter):           The Formatter Interface.
                                                             (line   12)
* as_string() (email.message.Message method): email message Representing an email message.
                                                             (line   37)
* as_tuple() (decimal.Decimal method):   Decimal objects.    (line  122)
* AT (in module token):                  token --- Constants used with Python parse trees.
                                                             (line   40)
* atan() (in module cmath):              Trigonometric functions<2>.
                                                             (line   18)
* atan() (in module math):               Trigonometric functions.
                                                             (line   14)
* atan2() (in module math):              Trigonometric functions.
                                                             (line   18)
* atanh() (in module cmath):             Hyperbolic functions<2>.
                                                             (line   22)
* atanh() (in module math):              Hyperbolic functions.
                                                             (line   18)
* atexit (module):                       atexit --- Exit handlers.
                                                             (line    6)
* atime (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* atof() (in module locale):             locale --- Internationalization services.
                                                             (line  430)
* atof() (in module string):             Deprecated string functions.
                                                             (line   12)
* atoi() (in module locale):             locale --- Internationalization services.
                                                             (line  435)
* atoi() (in module string):             Deprecated string functions.
                                                             (line   30)
* atol() (in module string):             Deprecated string functions.
                                                             (line   46)
* atom:                                  Atoms.              (line    6)
* attach() (email.message.Message method): email message Representing an email message.
                                                             (line   81)
* AttlistDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  241)
* attrgetter() (in module operator):     operator --- Standard operators as functions.
                                                             (line  433)
* attrib (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   39)
* attribute:                             The standard type hierarchy.
                                                             (line   12)
* attribute <1>:                         Glossary.           (line   74)
* attribute; assignment:                 Assignment statements.
                                                             (line    6)
* attribute; assignment <1>:             Assignment statements.
                                                             (line   68)
* attribute; deletion:                   The del statement<2>.
                                                             (line   24)
* attribute; reference:                  Attribute references.
                                                             (line    6)
* AttributeError:                        Built-in Exceptions.
                                                             (line  127)
* attributes (xml.dom.Node attribute):   Node Objects.       (line   26)
* AttributesImpl (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   67)
* AttributesNSImpl (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   78)
* attroff() (curses.window method):      Window Objects.     (line   38)
* attron() (curses.window method):       Window Objects.     (line   43)
* attrset() (curses.window method):      Window Objects.     (line   48)
* audio (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* Audio Interchange File Format:         aifc --- Read and write AIFF and AIFC files.
                                                             (line    6)
* Audio Interchange File Format <1>:     chunk --- Read IFF chunked data.
                                                             (line    6)
* AUDIODEV:                              ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   51)
* audioop (module):                      audioop --- Manipulate raw audio data.
                                                             (line    6)
* AUDIO_FILE_ENCODING_ADPCM_G721 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ADPCM_G722 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ADPCM_G723_3 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ADPCM_G723_5 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_ALAW_8 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_DOUBLE (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_FLOAT (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   96)
* AUDIO_FILE_ENCODING_LINEAR_16 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_LINEAR_24 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_LINEAR_32 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_LINEAR_8 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_ENCODING_MULAW_8 (in module sunau): sunau --- Read and write Sun AU files.
                                                             (line   86)
* AUDIO_FILE_MAGIC (in module sunau):    sunau --- Read and write Sun AU files.
                                                             (line   80)
* augmented; assignment:                 Augmented assignment statements.
                                                             (line    6)
* auth() (ftplib.FTP_TLS method):        FTP_TLS Objects.    (line   13)
* authenticate() (imaplib.IMAP4 method): IMAP4 Objects.      (line   37)
* AuthenticationError:                   Listeners and Clients.
                                                             (line  116)
* authenticators() (netrc.netrc method): netrc Objects.      (line    8)
* authkey (multiprocessing.Process attribute): Process and exceptions.
                                                             (line  110)
* autoGIL (module):                      autoGIL --- Global Interpreter Lock handling in event loops.
                                                             (line    6)
* AutoGILError:                          autoGIL --- Global Interpreter Lock handling in event loops.
                                                             (line   12)
* avg() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line   48)
* avgpp() (in module audioop):           audioop --- Manipulate raw audio data.
                                                             (line   52)
* b16decode() (in module base64):        base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   98)
* b16encode() (in module base64):        base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   92)
* b2a_base64() (in module binascii):     binascii --- Convert between binary and ASCII.
                                                             (line   33)
* b2a_hex() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  119)
* b2a_hqx() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line   81)
* b2a_qp() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   47)
* b2a_uu() (in module binascii):         binascii --- Convert between binary and ASCII.
                                                             (line   22)
* b32decode() (in module base64):        base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   72)
* b32encode() (in module base64):        base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   67)
* b64decode() (in module base64):        base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   34)
* b64encode() (in module base64):        base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   21)
* Babyl (class in mailbox):              Babyl.              (line    6)
* BabylMailbox (class in mailbox):       Deprecated classes and methods.
                                                             (line   93)
* BabylMessage (class in mailbox):       BabylMessage.       (line    6)
* back() (in module turtle):             Turtle motion.      (line   23)
* back-quotes:                           Basic customization.
                                                             (line  119)
* back-quotes <1>:                       String conversions. (line    6)
* BACKQUOTE (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* backslash character:                   Explicit line joining.
                                                             (line    6)
* backslashreplace_errors() (in module codecs): codecs --- Codec registry and base classes.
                                                             (line  230)
* backward() (in module turtle):         Turtle motion.      (line   23)
* backward; quotes:                      Basic customization.
                                                             (line  119)
* backward; quotes <1>:                  String conversions. (line    6)
* backward_compatible (in module imageop): imageop --- Manipulate raw image data.
                                                             (line   91)
* BadStatusLine:                         httplib --- HTTP protocol client.
                                                             (line  163)
* BadZipfile:                            zipfile --- Work with ZIP archives.
                                                             (line   26)
* Balloon (class in Tix):                Basic Widgets.      (line    6)
* bare except:                           except.             (line   34)
* base64 (module):                       base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line    6)
* base64; encoding:                      base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line    6)
* BaseCGIHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   24)
* BaseCookie (class in Cookie):          Cookie --- HTTP state management.
                                                             (line   41)
* BaseException:                         Built-in Exceptions.
                                                             (line   44)
* BaseHandler (class in urllib2):        urllib2 --- extensible library for opening URLs.
                                                             (line  181)
* BaseHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   56)
* BaseHTTPRequestHandler (class in BaseHTTPServer): BaseHTTPServer --- Basic HTTP server.
                                                             (line   40)
* BaseHTTPServer (module):               BaseHTTPServer --- Basic HTTP server.
                                                             (line    6)
* BaseManager (class in multiprocessing.managers): Managers. (line   22)
* basename() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line   44)
* BaseProxy (class in multiprocessing.managers): Proxy Objects.
                                                             (line   56)
* BaseResult (class in urlparse):        Results of urlparse and urlsplit.
                                                             (line   38)
* BaseServer (class in SocketServer):    Server Objects.     (line    6)
* basestring (2to3 fixer):               Fixers.             (line   15)
* basestring() (built-in function):      Built-in Functions. (line  107)
* basicConfig() (in module logging):     Module-Level Functions.
                                                             (line  177)
* BasicContext (class in decimal):       Context objects.    (line   54)
* Bastion (module):                      Bastion --- Restricting access to objects.
                                                             (line    6)
* Bastion() (in module Bastion):         Bastion --- Restricting access to objects.
                                                             (line   22)
* BastionClass (class in Bastion):       Bastion --- Restricting access to objects.
                                                             (line   41)
* baudrate() (in module curses):         Functions<2>.       (line   18)
* bbox() (ttk.Treeview method):          ttk Treeview.       (line    8)
* Bdb (class in bdb):                    bdb --- Debugger framework.
                                                             (line   71)
* bdb (module):                          bdb --- Debugger framework.
                                                             (line    6)
* BdbQuit:                               bdb --- Debugger framework.
                                                             (line   15)
* BDFL:                                  Glossary.           (line   80)
* bdist_msi (class in distutils.command.bdist_msi): distutils command bdist_msi --- Build a Microsoft Installer binary package.
                                                             (line    6)
* beep() (in module curses):             Functions<2>.       (line   26)
* Beep() (in module winsound):           winsound --- Sound-playing interface for Windows.
                                                             (line   12)
* begin_fill() (in module turtle):       Filling.            (line   21)
* begin_poly() (in module turtle):       Special Turtle methods.
                                                             (line    6)
* below() (curses.panel.Panel method):   Panel Objects.      (line   17)
* benchmarking:                          time --- Time access and conversions.
                                                             (line  136)
* Benchmarking:                          timeit --- Measure execution time of small code snippets.
                                                             (line    8)
* betavariate() (in module random):      random --- Generate pseudo-random numbers.
                                                             (line  220)
* bgcolor() (in module turtle):          Window control.     (line    6)
* bgn_group() (fl.form method):          Form Objects.       (line   48)
* bgpic() (in module turtle):            Window control.     (line   20)
* bias() (in module audioop):            audioop --- Manipulate raw audio data.
                                                             (line   58)
* bidirectional() (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line   51)
* BigEndianStructure (class in ctypes):  Structured data types.
                                                             (line   10)
* bin() (built-in function):             Built-in Functions. (line  117)
* Binary (class in msilib):              msilib --- Read and write Microsoft Installer files.
                                                             (line   87)
* binary literal:                        Numeric literals.   (line    6)
* binary semaphores:                     thread --- Multiple threads of control.
                                                             (line   12)
* binary; arithmetic; operation:         Binary arithmetic operations.
                                                             (line    6)
* binary; bitwise; operation:            Binary bitwise operations.
                                                             (line    6)
* BINARY_ADD (opcode):                   Python Bytecode Instructions.
                                                             (line   96)
* BINARY_AND (opcode):                   Python Bytecode Instructions.
                                                             (line  116)
* BINARY_DIVIDE (opcode):                Python Bytecode Instructions.
                                                             (line   78)
* BINARY_FLOOR_DIVIDE (opcode):          Python Bytecode Instructions.
                                                             (line   83)
* BINARY_LSHIFT (opcode):                Python Bytecode Instructions.
                                                             (line  108)
* BINARY_MODULO (opcode):                Python Bytecode Instructions.
                                                             (line   92)
* BINARY_MULTIPLY (opcode):              Python Bytecode Instructions.
                                                             (line   74)
* BINARY_OR (opcode):                    Python Bytecode Instructions.
                                                             (line  124)
* BINARY_POWER (opcode):                 Python Bytecode Instructions.
                                                             (line   70)
* BINARY_RSHIFT (opcode):                Python Bytecode Instructions.
                                                             (line  112)
* BINARY_SUBSCR (opcode):                Python Bytecode Instructions.
                                                             (line  104)
* BINARY_SUBTRACT (opcode):              Python Bytecode Instructions.
                                                             (line  100)
* BINARY_TRUE_DIVIDE (opcode):           Python Bytecode Instructions.
                                                             (line   87)
* BINARY_XOR (opcode):                   Python Bytecode Instructions.
                                                             (line  120)
* binascii (module):                     binascii --- Convert between binary and ASCII.
                                                             (line    6)
* bind (widgets):                        Bindings and Events.
                                                             (line    6)
* bind() (asyncore.dispatcher method):   asyncore --- Asynchronous socket handler.
                                                             (line  194)
* bind() (socket.socket method):         Socket Objects.     (line   17)
* binding; name:                         Naming and binding. (line    6)
* binding; name <1>:                     Assignment statements.
                                                             (line    6)
* bindtextdomain() (in module gettext):  GNU gettext API.    (line   14)
* bind_textdomain_codeset() (in module gettext): GNU gettext API.
                                                             (line   26)
* binhex (module):                       binhex --- Encode and decode binhex4 files.
                                                             (line    6)
* binhex() (in module binhex):           binhex --- Encode and decode binhex4 files.
                                                             (line   15)
* bisect (module):                       bisect --- Array bisection algorithm.
                                                             (line    6)
* bisect() (in module bisect):           bisect --- Array bisection algorithm.
                                                             (line   36)
* bisect_left() (in module bisect):      bisect --- Array bisection algorithm.
                                                             (line   22)
* bisect_right() (in module bisect):     bisect --- Array bisection algorithm.
                                                             (line   36)
* bitmap() (msilib.Dialog method):       GUI classes.        (line   60)
* bitwise; and:                          Binary bitwise operations.
                                                             (line   13)
* bitwise; operations:                   Bitwise Operations on Integer Types.
                                                             (line    6)
* bitwise; or:                           Binary bitwise operations.
                                                             (line   21)
* bitwise; xor:                          Binary bitwise operations.
                                                             (line   17)
* bit_length() (int method):             Additional Methods on Integer Types.
                                                             (line    9)
* bit_length() (long method):            Additional Methods on Integer Types.
                                                             (line   11)
* bk() (in module turtle):               Turtle motion.      (line   23)
* bkgd() (curses.window method):         Window Objects.     (line   53)
* bkgdset() (curses.window method):      Window Objects.     (line   65)
* blank line:                            Blank lines.        (line    6)
* block:                                 Naming and binding. (line   11)
* blocked_domains() (cookielib.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   52)
* BlockingIOError:                       Module Interface.   (line  154)
* BLOCKSIZE (in module cd):              cd --- CD-ROM access on SGI systems.
                                                             (line   65)
* blocksize (in module sha):             sha --- SHA-1 message digest algorithm.
                                                             (line   24)
* BNF:                                   Notation.           (line    6)
* BNF <1>:                               Expressions.        (line    9)
* body() (nntplib.NNTP method):          NNTP Objects.       (line  134)
* body_encode() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  167)
* body_encoding (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   59)
* body_line_iterator() (in module email.iterators): email iterators Iterators.
                                                             (line   10)
* BOM (in module codecs):                codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_BE (in module codecs):             codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_LE (in module codecs):             codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF16 (in module codecs):          codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF16_BE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF16_LE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF32 (in module codecs):          codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF32_BE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF32_LE (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  302)
* BOM_UTF8 (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line  302)
* bool() (built-in function):            Built-in Functions. (line  126)
* Boolean (class in aetypes):            aetypes --- AppleEvent objects.
                                                             (line   49)
* boolean() (in module xmlrpclib):       Convenience Functions.
                                                             (line    6)
* Boolean; operation:                    Boolean operations. (line    6)
* Boolean; operations:                   Truth Value Testing.
                                                             (line    6)
* Boolean; operations <1>:               Boolean Operations --- and or not.
                                                             (line    6)
* Boolean; type:                         Built-in Functions. (line  135)
* Boolean; values:                       Boolean Values.     (line   15)
* BooleanType (in module types):         types --- Names for built-in types.
                                                             (line   51)
* border() (curses.window method):       Window Objects.     (line   76)
* bottom() (curses.panel.Panel method):  Panel Objects.      (line   21)
* bottom_panel() (in module curses.panel): Functions<3>.     (line    8)
* BoundaryError:                         email errors Exception and Defect classes.
                                                             (line   33)
* BoundedSemaphore (class in multiprocessing): Synchronization primitives.
                                                             (line   13)
* BoundedSemaphore() (in module threading): threading --- Higher-level threading interface.
                                                             (line  129)
* BoundedSemaphore() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  130)
* box() (curses.window method):          Window Objects.     (line  116)
* Breakpoint (class in bdb):             bdb --- Debugger framework.
                                                             (line   22)
* breakpoints:                           Edit context menu.  (line   28)
* break_anywhere() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  196)
* break_here() (bdb.Bdb method):         bdb --- Debugger framework.
                                                             (line  189)
* break_long_words (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  185)
* BREAK_LOOP (opcode):                   Python Bytecode Instructions.
                                                             (line  279)
* break_on_hyphens (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  195)
* BROWSER:                               webbrowser --- Convenient Web-browser controller.
                                                             (line   20)
* BROWSER <1>:                           webbrowser --- Convenient Web-browser controller.
                                                             (line   93)
* bsddb (module):                        bsddb --- Interface to Berkeley DB library.
                                                             (line    6)
* BsdDbShelf (class in shelve):          Restrictions.       (line   41)
* btopen() (in module bsddb):            bsddb --- Interface to Berkeley DB library.
                                                             (line   64)
* buffer (2to3 fixer):                   Fixers.             (line   19)
* buffer (io.TextIOBase attribute):      Text I/O.           (line   32)
* buffer (unittest.TestResult attribute): Loading and running tests.
                                                             (line  215)
* buffer interface:                      Buffers and Memoryview Objects.
                                                             (line    6)
* buffer size, I/O:                      Built-in Functions. (line  918)
* buffer() (built-in function):          Non-essential Built-in Functions.
                                                             (line   33)
* BufferedIOBase (class in io):          I/O Base Classes.   (line  205)
* BufferedRandom (class in io):          Buffered Streams.   (line  106)
* BufferedReader (class in io):          Buffered Streams.   (line   28)
* BufferedRWPair (class in io):          Buffered Streams.   (line  122)
* BufferedWriter (class in io):          Buffered Streams.   (line   64)
* BufferError:                           Built-in Exceptions.
                                                             (line   85)
* BufferingHandler (class in logging.handlers): MemoryHandler.
                                                             (line   19)
* BufferTooShort:                        Process and exceptions.
                                                             (line  163)
* BufferType (in module types):          types --- Names for built-in types.
                                                             (line  180)
* BufferType (in module types) <1>:      Old-style buffer objects.
                                                             (line   32)
* buffer_info() (array.array method):    array --- Efficient arrays of numeric values.
                                                             (line  107)
* buffer_size (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line   88)
* buffer_text (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line   99)
* buffer_used (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  110)
* BUFSIZ (in module macostools):         macostools --- Convenience routines for file manipulation.
                                                             (line   51)
* bufsize() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  204)
* buildtools (module):                   buildtools --- Helper module for BuildApplet and Friends.
                                                             (line    6)
* BUILD_CLASS (opcode):                  Python Bytecode Instructions.
                                                             (line  332)
* BUILD_LIST (opcode):                   Python Bytecode Instructions.
                                                             (line  430)
* BUILD_MAP (opcode):                    Python Bytecode Instructions.
                                                             (line  434)
* build_opener() (in module urllib2):    urllib2 --- extensible library for opening URLs.
                                                             (line   74)
* BUILD_SLICE (opcode):                  Python Bytecode Instructions.
                                                             (line  589)
* BUILD_TUPLE (opcode):                  Python Bytecode Instructions.
                                                             (line  425)
* built-in function; abs:                Emulating numeric types.
                                                             (line  115)
* built-in function; abs <1>:            Number Protocol.    (line  112)
* built-in function; apply:              Object Protocol.    (line  233)
* built-in function; apply <1>:          Object Protocol.    (line  249)
* built-in function; apply <2>:          Object Protocol.    (line  261)
* built-in function; buffer:             types --- Names for built-in types.
                                                             (line  182)
* built-in function; bytes:              Object Protocol.    (line  163)
* built-in function; call:               Calls.              (line  135)
* built-in function; chr:                The standard type hierarchy.
                                                             (line  154)
* built-in function; chr <1>:            The standard type hierarchy.
                                                             (line  166)
* built-in function; classmethod:        Common Object Structures.
                                                             (line  185)
* built-in function; cmp:                Basic customization.
                                                             (line  180)
* built-in function; cmp <1>:            locale --- Internationalization services.
                                                             (line  378)
* built-in function; cmp <2>:            Object Protocol.    (line  127)
* built-in function; cmp <3>:            Object Protocol.    (line  135)
* built-in function; coerce:             Number Protocol.    (line  301)
* built-in function; compile:            The global statement.
                                                             (line   28)
* built-in function; compile <1>:        Code Objects.       (line    6)
* built-in function; compile <2>:        types --- Names for built-in types.
                                                             (line  123)
* built-in function; compile <3>:        Queries on ST Objects.
                                                             (line   14)
* built-in function; compile <4>:        Importing Modules<2>.
                                                             (line  130)
* built-in function; complex:            Emulating numeric types.
                                                             (line  123)
* built-in function; complex <1>:        Numeric Types --- int float long complex.
                                                             (line   34)
* built-in function; divmod:             Emulating numeric types.
                                                             (line   24)
* built-in function; divmod <1>:         Emulating numeric types.
                                                             (line   64)
* built-in function; divmod <2>:         Number Protocol.    (line   78)
* built-in function; eval:               The global statement.
                                                             (line   28)
* built-in function; eval <1>:           The exec statement. (line   48)
* built-in function; eval <2>:           Expression input.   (line    6)
* built-in function; eval <3>:           Code Objects.       (line   14)
* built-in function; eval <4>:           Deprecated string functions.
                                                             (line   35)
* built-in function; eval <5>:           pprint --- Data pretty printer.
                                                             (line  108)
* built-in function; eval <6>:           PrettyPrinter Objects.
                                                             (line   26)
* built-in function; eval <7>:           Converting ST Objects.
                                                             (line   45)
* built-in function; execfile:           The global statement.
                                                             (line   28)
* built-in function; execfile <1>:       user --- User-specific configuration hook.
                                                             (line   21)
* built-in function; file:               File Objects.       (line    6)
* built-in function; float:              Emulating numeric types.
                                                             (line  123)
* built-in function; float <1>:          Numeric Types --- int float long complex.
                                                             (line   34)
* built-in function; float <2>:          Deprecated string functions.
                                                             (line   17)
* built-in function; float <3>:          Number Protocol.    (line  340)
* built-in function; globals:            The exec statement. (line   48)
* built-in function; hash:               Basic customization.
                                                             (line  198)
* built-in function; hash <1>:           Object Protocol.    (line  314)
* built-in function; hash <2>:           Type Objects<3>.    (line  410)
* built-in function; help:               Operating System Interface.
                                                             (line   20)
* built-in function; hex:                Emulating numeric types.
                                                             (line  130)
* built-in function; id:                 Objects values and types.
                                                             (line   11)
* built-in function; input:              Expression input.   (line   13)
* built-in function; input <1>:          sys --- System-specific parameters and functions.
                                                             (line 1009)
* built-in function; int:                Emulating numeric types.
                                                             (line  123)
* built-in function; int <1>:            Numeric Types --- int float long complex.
                                                             (line   34)
* built-in function; int <2>:            Number Protocol.    (line  323)
* built-in function; len:                The standard type hierarchy.
                                                             (line  125)
* built-in function; len <1>:            The standard type hierarchy.
                                                             (line  229)
* built-in function; len <2>:            The standard type hierarchy.
                                                             (line  259)
* built-in function; len <3>:            Emulating container types.
                                                             (line   42)
* built-in function; len <4>:            Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* built-in function; len <5>:            Mapping Types --- dict.
                                                             (line    6)
* built-in function; len <6>:            Object Protocol.    (line  362)
* built-in function; len <7>:            Sequence Protocol.  (line   14)
* built-in function; len <8>:            Mapping Protocol.   (line   14)
* built-in function; len <9>:            List Objects.       (line   48)
* built-in function; len <10>:           Dictionary Objects. (line  136)
* built-in function; len <11>:           Set Objects<2>.     (line  105)
* built-in function; locals:             The exec statement. (line   48)
* built-in function; long:               Emulating numeric types.
                                                             (line  123)
* built-in function; long <1>:           Numeric Types --- int float long complex.
                                                             (line   34)
* built-in function; long <2>:           Deprecated string functions.
                                                             (line   51)
* built-in function; long <3>:           Number Protocol.    (line  332)
* built-in function; max:                Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* built-in function; min:                Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* built-in function; oct:                Emulating numeric types.
                                                             (line  130)
* built-in function; open:               Reading and Writing Files.
                                                             (line    6)
* built-in function; open <1>:           The standard type hierarchy.
                                                             (line  630)
* built-in function; ord:                The standard type hierarchy.
                                                             (line  154)
* built-in function; ord <1>:            The standard type hierarchy.
                                                             (line  166)
* built-in function; ord <2>:            The standard type hierarchy.
                                                             (line  175)
* built-in function; pow:                Emulating numeric types.
                                                             (line   24)
* built-in function; pow <1>:            Emulating numeric types.
                                                             (line   24)
* built-in function; pow <2>:            Emulating numeric types.
                                                             (line   64)
* built-in function; pow <3>:            Emulating numeric types.
                                                             (line   74)
* built-in function; pow <4>:            Number Protocol.    (line   88)
* built-in function; pow <5>:            Number Protocol.    (line  243)
* built-in function; range:              The for statement.  (line   31)
* built-in function; raw_input:          Expression input.   (line   19)
* built-in function; raw_input <1>:      sys --- System-specific parameters and functions.
                                                             (line 1009)
* built-in function; reload:             sys --- System-specific parameters and functions.
                                                             (line  705)
* built-in function; reload <1>:         imp --- Access the import internals.
                                                             (line   72)
* built-in function; reload <2>:         Examples<18>.       (line   33)
* built-in function; reload <3>:         Importing Modules<2>.
                                                             (line  103)
* built-in function; repr:               Basic customization.
                                                             (line  107)
* built-in function; repr <1>:           String conversions. (line   32)
* built-in function; repr <2>:           Expression statements.
                                                             (line   18)
* built-in function; repr <3>:           Object Presentation.
                                                             (line    6)
* built-in function; repr <4>:           Object Protocol.    (line  146)
* built-in function; repr <5>:           Type Objects<3>.    (line  364)
* built-in function; slice:              The standard type hierarchy.
                                                             (line  758)
* built-in function; slice <1>:          types --- Names for built-in types.
                                                             (line  164)
* built-in function; slice <2>:          Python Bytecode Instructions.
                                                             (line  591)
* built-in function; staticmethod:       Common Object Structures.
                                                             (line  194)
* built-in function; str:                Basic customization.
                                                             (line  124)
* built-in function; str <1>:            String conversions. (line   32)
* built-in function; str <2>:            Object Presentation.
                                                             (line    6)
* built-in function; str <3>:            Object Protocol.    (line  155)
* built-in function; tuple:              Sequence Protocol.  (line  177)
* built-in function; tuple <1>:          List Objects.       (line  179)
* built-in function; type:               Objects values and types.
                                                             (line   11)
* built-in function; type <1>:           Type Objects.       (line    6)
* built-in function; type <2>:           types --- Names for built-in types.
                                                             (line   48)
* built-in function; type <3>:           Object Protocol.    (line  343)
* built-in function; unichr:             The standard type hierarchy.
                                                             (line  175)
* built-in function; unicode:            Unicode Strings.    (line   62)
* built-in function; unicode <1>:        The standard type hierarchy.
                                                             (line  175)
* built-in function; unicode <2>:        Basic customization.
                                                             (line  257)
* built-in function; unicode <3>:        Object Protocol.    (line  170)
* built-in function; xrange:             types --- Names for built-in types.
                                                             (line  159)
* built-in function; __import__:         Importing Modules<2>.
                                                             (line   50)
* built-in method; call:                 Calls.              (line  135)
* built-in; method:                      The standard type hierarchy.
                                                             (line  480)
* built-in; types:                       Built-in Types.     (line   14)
* BuiltinFunctionType (in module types): types --- Names for built-in types.
                                                             (line  141)
* BuiltinImporter (class in imputil):    imputil --- Import utilities.
                                                             (line   78)
* BuiltinMethodType (in module types):   types --- Names for built-in types.
                                                             (line  141)
* builtin_module_names (in module sys):  sys --- System-specific parameters and functions.
                                                             (line   32)
* ButtonBox (class in Tix):              Basic Widgets.      (line   13)
* bye() (in module turtle):              Methods specific to Screen not inherited from TurtleScreen.
                                                             (line    6)
* byref() (in module ctypes):            Utility functions.  (line   16)
* byte:                                  The standard type hierarchy.
                                                             (line  154)
* bytearray:                             The standard type hierarchy.
                                                             (line  218)
* bytearray() (built-in function):       Built-in Functions. (line  140)
* bytecode:                              The standard type hierarchy.
                                                             (line  648)
* bytecode <1>:                          Glossary.           (line   94)
* byteorder (in module sys):             sys --- System-specific parameters and functions.
                                                             (line   23)
* bytes (uuid.UUID attribute):           uuid --- UUID objects according to RFC 4122.
                                                             (line   48)
* bytes-like object:                     Glossary.           (line   85)
* BytesIO (class in io):                 Buffered Streams.   (line    9)
* byteswap() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  127)
* bytes_le (uuid.UUID attribute):        uuid --- UUID objects according to RFC 4122.
                                                             (line   53)
* byte_compile() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  132)
* bz2 (module):                          bz2 --- Compression compatible with bzip2.
                                                             (line    6)
* BZ2Compressor (class in bz2):          Sequential de compression.
                                                             (line    9)
* BZ2Decompressor (class in bz2):        Sequential de compression.
                                                             (line   31)
* BZ2File (class in bz2):                De compression of files.
                                                             (line    9)
* C:                                     String literals.    (line   49)
* C; language:                           The standard type hierarchy.
                                                             (line    6)
* C; language <1>:                       The standard type hierarchy.
                                                             (line  105)
* C; language <2>:                       The standard type hierarchy.
                                                             (line  468)
* C; language <3>:                       Comparisons.        (line    6)
* C; language <4>:                       Numeric Types --- int float long complex.
                                                             (line    6)
* C; structures:                         struct --- Interpret strings as packed binary data.
                                                             (line    6)
* CAB (class in msilib):                 CAB Objects.        (line    6)
* CacheFTPHandler (class in urllib2):    urllib2 --- extensible library for opening URLs.
                                                             (line  284)
* calcsize() (in module struct):         Functions and Exceptions.
                                                             (line   44)
* Calendar (class in calendar):          calendar --- General calendar-related functions.
                                                             (line   26)
* calendar (module):                     calendar --- General calendar-related functions.
                                                             (line    6)
* calendar() (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  267)
* call:                                  Slicings.           (line   57)
* call() (dl.dl method):                 Dl Objects.         (line   27)
* call() (in module subprocess):         Using the subprocess Module.
                                                             (line   10)
* call; instance:                        Emulating callable objects.
                                                             (line    8)
* callable (2to3 fixer):                 Fixers.             (line   25)
* Callable (class in collections):       Collections Abstract Base Classes.
                                                             (line   76)
* callable() (built-in function):        Built-in Functions. (line  170)
* CallableProxyType (in module weakref): weakref --- Weak references.
                                                             (line  218)
* callback (optparse.Option attribute):  Option attributes.  (line   60)
* callback() (MiniAEFrame.AEServer method): AEServer Objects.
                                                             (line   13)
* callback_args (optparse.Option attribute): Option attributes.
                                                             (line   66)
* callback_kwargs (optparse.Option attribute): Option attributes.
                                                             (line   66)
* CalledProcessError:                    Using the subprocess Module.
                                                             (line  136)
* calloc():                              Overview.           (line   33)
* CALL_FUNCTION (opcode):                Python Bytecode Instructions.
                                                             (line  563)
* CALL_FUNCTION_KW (opcode):             Python Bytecode Instructions.
                                                             (line  609)
* CALL_FUNCTION_VAR (opcode):            Python Bytecode Instructions.
                                                             (line  603)
* CALL_FUNCTION_VAR_KW (opcode):         Python Bytecode Instructions.
                                                             (line  615)
* call_tracing() (in module sys):        sys --- System-specific parameters and functions.
                                                             (line   39)
* cancel() (sched.scheduler method):     Scheduler Objects.  (line   28)
* cancel() (threading.Timer method):     Timer Objects.      (line   30)
* cancel_join_thread() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  175)
* CannotSendHeader:                      httplib --- HTTP protocol client.
                                                             (line  151)
* CannotSendRequest:                     httplib --- HTTP protocol client.
                                                             (line  145)
* canonic() (bdb.Bdb method):            bdb --- Debugger framework.
                                                             (line   91)
* canonical() (decimal.Context method):  Context objects.    (line  237)
* canonical() (decimal.Decimal method):  Decimal objects.    (line  129)
* can_change_color() (in module curses): Functions<2>.       (line   30)
* can_fetch() (robotparser.RobotFileParser method): robotparser --- Parser for robots txt.
                                                             (line   34)
* capitalize() (in module string):       Deprecated string functions.
                                                             (line   59)
* capitalize() (str method):             String Methods<2>.  (line   17)
* captured_stdout() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line  180)
* captureWarnings() (in module logging): Integration with the warnings module.
                                                             (line    9)
* capwords() (in module string):         String functions.   (line    9)
* Carbon.AE (module):                    Carbon AE --- Apple Events.
                                                             (line    5)
* Carbon.AH (module):                    Carbon AH --- Apple Help.
                                                             (line    5)
* Carbon.App (module):                   Carbon App --- Appearance Manager.
                                                             (line    5)
* Carbon.Appearance (module):            Carbon Appearance --- Appearance Manager constants.
                                                             (line    5)
* Carbon.CarbonEvents (module):          Carbon CarbonEvents --- Carbon Event Manager constants.
                                                             (line    5)
* Carbon.CarbonEvt (module):             Carbon CarbonEvt --- Carbon Event Manager.
                                                             (line    5)
* Carbon.CF (module):                    Carbon CF --- Core Foundation.
                                                             (line    6)
* Carbon.CG (module):                    Carbon CG --- Core Graphics.
                                                             (line    5)
* Carbon.Cm (module):                    Carbon Cm --- Component Manager.
                                                             (line    5)
* Carbon.Components (module):            Carbon Components --- Component Manager constants.
                                                             (line    5)
* Carbon.ControlAccessor (module):       Carbon ControlAccessor --- Control Manager accssors.
                                                             (line    5)
* Carbon.Controls (module):              Carbon Controls --- Control Manager constants.
                                                             (line    5)
* Carbon.CoreFounation (module):         Carbon CoreFounation --- CoreFounation constants.
                                                             (line    5)
* Carbon.CoreGraphics (module):          Carbon CoreGraphics --- CoreGraphics constants.
                                                             (line    5)
* Carbon.Ctl (module):                   Carbon Ctl --- Control Manager.
                                                             (line    5)
* Carbon.Dialogs (module):               Carbon Dialogs --- Dialog Manager constants.
                                                             (line    5)
* Carbon.Dlg (module):                   Carbon Dlg --- Dialog Manager.
                                                             (line    5)
* Carbon.Drag (module):                  Carbon Drag --- Drag and Drop Manager.
                                                             (line    5)
* Carbon.Dragconst (module):             Carbon Dragconst --- Drag and Drop Manager constants.
                                                             (line    5)
* Carbon.Events (module):                Carbon Events --- Event Manager constants.
                                                             (line    5)
* Carbon.Evt (module):                   Carbon Evt --- Event Manager.
                                                             (line    5)
* Carbon.File (module):                  Carbon File --- File Manager.
                                                             (line    5)
* Carbon.Files (module):                 Carbon Files --- File Manager constants.
                                                             (line    5)
* Carbon.Fm (module):                    Carbon Fm --- Font Manager.
                                                             (line    5)
* Carbon.Folder (module):                Carbon Folder --- Folder Manager.
                                                             (line    5)
* Carbon.Folders (module):               Carbon Folders --- Folder Manager constants.
                                                             (line    5)
* Carbon.Fonts (module):                 Carbon Fonts --- Font Manager constants.
                                                             (line    5)
* Carbon.Help (module):                  Carbon Help --- Help Manager.
                                                             (line    5)
* Carbon.IBCarbon (module):              Carbon IBCarbon --- Carbon InterfaceBuilder.
                                                             (line    5)
* Carbon.IBCarbonRuntime (module):       Carbon IBCarbonRuntime --- Carbon InterfaceBuilder constants.
                                                             (line    5)
* Carbon.Icns (module):                  Carbon Icn --- Carbon Icon Manager.
                                                             (line    5)
* Carbon.Icons (module):                 Carbon Icons --- Carbon Icon Manager constants.
                                                             (line    5)
* Carbon.Launch (module):                Carbon Launch --- Carbon Launch Services.
                                                             (line    5)
* Carbon.LaunchServices (module):        Carbon LaunchServices --- Carbon Launch Services constants.
                                                             (line    5)
* Carbon.List (module):                  Carbon List --- List Manager.
                                                             (line    5)
* Carbon.Lists (module):                 Carbon Lists --- List Manager constants.
                                                             (line    5)
* Carbon.MacHelp (module):               Carbon MacHelp --- Help Manager constants.
                                                             (line    5)
* Carbon.MediaDescr (module):            Carbon MediaDescr --- Parsers and generators for Quicktime Media descriptors.
                                                             (line    5)
* Carbon.Menu (module):                  Carbon Menu --- Menu Manager.
                                                             (line    5)
* Carbon.Menus (module):                 Carbon Menus --- Menu Manager constants.
                                                             (line    5)
* Carbon.Mlte (module):                  Carbon Mlte --- MultiLingual Text Editor.
                                                             (line    5)
* Carbon.OSA (module):                   Carbon OSA --- Carbon OSA Interface.
                                                             (line    5)
* Carbon.OSAconst (module):              Carbon OSAconst --- Carbon OSA Interface constants.
                                                             (line    5)
* Carbon.Qd (module):                    Carbon Qd --- QuickDraw.
                                                             (line    5)
* Carbon.Qdoffs (module):                Carbon Qdoffs --- QuickDraw Offscreen.
                                                             (line    5)
* Carbon.QDOffscreen (module):           Carbon QDOffscreen --- QuickDraw Offscreen constants.
                                                             (line    5)
* Carbon.Qt (module):                    Carbon Qt --- QuickTime.
                                                             (line    5)
* Carbon.QuickDraw (module):             Carbon QuickDraw --- QuickDraw constants.
                                                             (line    5)
* Carbon.QuickTime (module):             Carbon QuickTime --- QuickTime constants.
                                                             (line    5)
* Carbon.Res (module):                   Carbon Res --- Resource Manager and Handles.
                                                             (line    5)
* Carbon.Resources (module):             Carbon Resources --- Resource Manager and Handles constants.
                                                             (line    5)
* Carbon.Scrap (module):                 Carbon Scrap --- Scrap Manager.
                                                             (line    6)
* Carbon.Snd (module):                   Carbon Snd --- Sound Manager.
                                                             (line    5)
* Carbon.Sound (module):                 Carbon Sound --- Sound Manager constants.
                                                             (line    5)
* Carbon.TE (module):                    Carbon TE --- TextEdit.
                                                             (line    5)
* Carbon.TextEdit (module):              Carbon TextEdit --- TextEdit constants.
                                                             (line    5)
* Carbon.Win (module):                   Carbon Win --- Window Manager.
                                                             (line    5)
* Carbon.Windows (module):               Carbon Windows --- Window Manager constants.
                                                             (line    5)
* cast() (in module ctypes):             Utility functions.  (line   32)
* cat() (in module nis):                 nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   28)
* catalog (in module cd):                cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* catch_warnings (class in warnings):    Available Context Managers.
                                                             (line    6)
* category() (in module unicodedata):    unicodedata --- Unicode Database.
                                                             (line   46)
* cbreak() (in module curses):           Functions<2>.       (line   35)
* CC:                                    New Improved and Deprecated Modules<2>.
                                                             (line   58)
* CCompiler (class in distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   68)
* cd (module):                           cd --- CD-ROM access on SGI systems.
                                                             (line    6)
* CDLL (class in ctypes):                Loading shared libraries.
                                                             (line    9)
* CDROM (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line   79)
* ceil() (in module math):               Numeric Types --- int float long complex.
                                                             (line  114)
* ceil() (in module math) <1>:           Number-theoretic and representation functions.
                                                             (line    6)
* center() (in module string):           Deprecated string functions.
                                                             (line  209)
* center() (str method):                 String Methods<2>.  (line   24)
* certificates:                          SSLSocket Objects.  (line  126)
* CERT_NONE (in module ssl):             Functions Constants and Exceptions.
                                                             (line  193)
* CERT_OPTIONAL (in module ssl):         Functions Constants and Exceptions.
                                                             (line  199)
* CERT_REQUIRED (in module ssl):         Functions Constants and Exceptions.
                                                             (line  207)
* cert_time_to_seconds() (in module ssl): Functions Constants and Exceptions.
                                                             (line  154)
* CFLAGS:                                New Improved and Deprecated Modules<2>.
                                                             (line   58)
* CFLAGS <1>:                            Tweaking compiler/linker flags.
                                                             (line   66)
* CFLAGS <2>:                            Tweaking compiler/linker flags.
                                                             (line   67)
* cfmfile (module):                      cfmfile --- Code Fragment Resource module.
                                                             (line    6)
* CFUNCTYPE() (in module ctypes):        Function prototypes.
                                                             (line   13)
* cgi (module):                          cgi --- Common Gateway Interface support.
                                                             (line    6)
* CGI; debugging:                        Debugging CGI scripts.
                                                             (line    6)
* CGI; exceptions:                       cgitb --- Traceback manager for CGI scripts.
                                                             (line    8)
* CGI; protocol:                         cgi --- Common Gateway Interface support.
                                                             (line    6)
* CGI; security:                         Caring about security.
                                                             (line    6)
* CGI; tracebacks:                       cgitb --- Traceback manager for CGI scripts.
                                                             (line    8)
* CGIHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   11)
* CGIHTTPRequestHandler (class in CGIHTTPServer): CGIHTTPServer --- CGI-capable HTTP request handler.
                                                             (line   26)
* CGIHTTPServer (module):                CGIHTTPServer --- CGI-capable HTTP request handler.
                                                             (line    6)
* cgitb (module):                        cgitb --- Traceback manager for CGI scripts.
                                                             (line    6)
* CGIXMLRPCRequestHandler (class in SimpleXMLRPCServer): SimpleXMLRPCServer --- Basic XML-RPC server.
                                                             (line   48)
* cgi_directories (CGIHTTPServer.CGIHTTPRequestHandler attribute): CGIHTTPServer --- CGI-capable HTTP request handler.
                                                             (line   47)
* chain() (in module itertools):         Itertool functions. (line   10)
* chaining; comparisons:                 Comparisons.        (line   18)
* chaining; comparisons <1>:             Comparisons<2>.     (line    6)
* change_root() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   69)
* channels() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  123)
* character:                             The standard type hierarchy.
                                                             (line  154)
* character <1>:                         The standard type hierarchy.
                                                             (line  175)
* character <2>:                         Subscriptions.      (line   27)
* character <3>:                         unicodedata --- Unicode Database.
                                                             (line    6)
* character set:                         The standard type hierarchy.
                                                             (line  166)
* CharacterDataHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  271)
* characters() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  129)
* characters_written (io.BlockingIOError attribute): Module Interface.
                                                             (line  162)
* charbufferproc (C type):               Buffer Object Structures.
                                                             (line  104)
* Charset (class in email.charset):      email charset Representing character sets.
                                                             (line   16)
* CHARSET (in module mimify):            mimify --- MIME processing of mail messages.
                                                             (line   65)
* charset() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   83)
* CHAR_MAX (in module locale):           locale --- Internationalization services.
                                                             (line  486)
* chdir() (in module os):                Files and Directories.
                                                             (line   70)
* check() (imaplib.IMAP4 method):        IMAP4 Objects.      (line   54)
* check() (in module tabnanny):          tabnanny --- Detection of ambiguous indentation.
                                                             (line   17)
* checkbox() (msilib.Dialog method):     GUI classes.        (line   78)
* checkcache() (in module linecache):    linecache --- Random access to text lines.
                                                             (line   37)
* checkfuncname() (in module bdb):       bdb --- Debugger framework.
                                                             (line  369)
* CheckList (class in Tix):              Hierarchical ListBox.
                                                             (line   13)
* checksum; Cyclic Redundancy Check:     zlib --- Compression compatible with gzip.
                                                             (line   90)
* checksum; MD5:                         md5 --- MD5 message digest algorithm.
                                                             (line    8)
* checksum; SHA:                         sha --- SHA-1 message digest algorithm.
                                                             (line    8)
* check_call() (in module subprocess):   Using the subprocess Module.
                                                             (line   40)
* check_environ() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   76)
* check_forms() (in module fl):          Functions Defined in Module fl.
                                                             (line   21)
* check_output() (doctest.OutputChecker method): OutputChecker objects.
                                                             (line   19)
* check_output() (in module subprocess): Using the subprocess Module.
                                                             (line   76)
* check_py3k_warnings() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line  164)
* check_unused_args() (string.Formatter method): String Formatting.
                                                             (line   91)
* check_warnings() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   93)
* chflags() (in module os):              Files and Directories.
                                                             (line  100)
* chgat() (curses.window method):        Window Objects.     (line  122)
* childerr (popen2.Popen3 attribute):    Popen3 and Popen4 Objects.
                                                             (line   35)
* childNodes (xml.dom.Node attribute):   Node Objects.       (line   49)
* chmod() (in module os):                Files and Directories.
                                                             (line  141)
* choice() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  153)
* choices (optparse.Option attribute):   Option attributes.  (line   55)
* choose_boundary() (in module mimetools): mimetools --- Tools for parsing MIME messages.
                                                             (line   24)
* chown() (in module os):                Files and Directories.
                                                             (line  192)
* chr() (built-in function):             Built-in Functions. (line  179)
* chroot() (in module os):               Files and Directories.
                                                             (line  134)
* Chunk (class in chunk):                chunk --- Read IFF chunked data.
                                                             (line   45)
* chunk (module):                        chunk --- Read IFF chunked data.
                                                             (line    6)
* cipher() (ssl.SSLSocket method):       SSLSocket Objects.  (line   89)
* cipher; DES:                           crypt --- Function to check Unix passwords.
                                                             (line    6)
* circle() (in module turtle):           Turtle motion.      (line  169)
* CIRCUMFLEX (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* CIRCUMFLEXEQUAL (in module token):     token --- Constants used with Python parse trees.
                                                             (line   40)
* Clamped (class in decimal):            Signals.            (line   20)
* class:                                 Glossary.           (line  109)
* Class (class in symtable):             Examining Symbol Tables.
                                                             (line   93)
* Class browser:                         File menu.          (line   26)
* class instance; attribute:             The standard type hierarchy.
                                                             (line  596)
* class instance; attribute; assignment: The standard type hierarchy.
                                                             (line  616)
* class instance; call:                  Calls.              (line  144)
* class object; call:                    The standard type hierarchy.
                                                             (line  498)
* class object; call <1>:                The standard type hierarchy.
                                                             (line  566)
* class object; call <2>:                The standard type hierarchy.
                                                             (line  583)
* class object; call <3>:                Calls.              (line  140)
* class; attribute:                      The standard type hierarchy.
                                                             (line  566)
* class; attribute; assignment:          The standard type hierarchy.
                                                             (line  580)
* class; classic:                        New-style and classic classes.
                                                             (line   46)
* class; constructor:                    Basic customization.
                                                             (line   39)
* class; definition:                     The return statement.
                                                             (line    6)
* class; definition <1>:                 Class definitions.  (line    6)
* class; instance:                       The standard type hierarchy.
                                                             (line  596)
* class; name:                           Class definitions.  (line    6)
* class; new-style:                      New-style and classic classes.
                                                             (line   46)
* class; old-style:                      New-style and classic classes.
                                                             (line   46)
* classic class:                         Glossary.           (line  115)
* classmethod() (built-in function):     Built-in Functions. (line  187)
* classobj() (in module new):            new --- Creation of runtime internal objects.
                                                             (line   56)
* ClassType (in module types):           types --- Names for built-in types.
                                                             (line  125)
* ClassType (in module types) <1>:       Class and Instance Objects.
                                                             (line   17)
* clause:                                Compound statements.
                                                             (line   17)
* clean() (mailbox.Maildir method):      Maildir.            (line   82)
* cleandoc() (in module inspect):        Retrieving source code.
                                                             (line   51)
* cleanup functions:                     Process Control.    (line   22)
* Clear Breakpoint:                      Edit context menu.  (line   29)
* clear() (collections.deque method):    deque objects.      (line   47)
* clear() (cookielib.CookieJar method):  CookieJar and FileCookieJar Objects.
                                                             (line   69)
* clear() (curses.window method):        Window Objects.     (line  138)
* clear() (dict method):                 Mapping Types --- dict.
                                                             (line  122)
* clear() (in module turtle):            More drawing control.
                                                             (line   23)
* clear() (in module turtle) <1>:        Window control.     (line   37)
* clear() (mailbox.Mailbox method):      Mailbox objects.    (line  187)
* clear() (set method):                  Set Types --- set frozenset.
                                                             (line  218)
* clear() (threading.Event method):      Event Objects.      (line   30)
* clear() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   52)
* clearcache() (in module linecache):    linecache --- Random access to text lines.
                                                             (line   32)
* ClearData() (msilib.Record method):    Record Objects.     (line   37)
* clearok() (curses.window method):      Window Objects.     (line  143)
* clearscreen() (in module turtle):      Window control.     (line   37)
* clearstamp() (in module turtle):       Turtle motion.      (line  239)
* clearstamps() (in module turtle):      Turtle motion.      (line  257)
* clear_all_breaks() (bdb.Bdb method):   bdb --- Debugger framework.
                                                             (line  297)
* clear_all_file_breaks() (bdb.Bdb method): bdb --- Debugger framework.
                                                             (line  292)
* clear_bpbynumber() (bdb.Bdb method):   bdb --- Debugger framework.
                                                             (line  286)
* clear_break() (bdb.Bdb method):        bdb --- Debugger framework.
                                                             (line  281)
* clear_flags() (decimal.Context method): Context objects.   (line  157)
* clear_history() (in module readline):  readline --- GNU readline interface.
                                                             (line   51)
* clear_memo() (pickle.Pickler method):  Usage.              (line  126)
* clear_session_cookies() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   81)
* Client() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line   33)
* client_address (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   60)
* clock() (in module time):              time --- Time access and conversions.
                                                             (line  134)
* clone() (email.generator.Generator method): email generator Generating MIME documents.
                                                             (line   73)
* clone() (in module turtle):            Special Turtle methods.
                                                             (line   32)
* clone() (pipes.Template method):       Template Objects.   (line   12)
* cloneNode() (xml.dom.minidom.Node method): DOM Objects.    (line   73)
* cloneNode() (xml.dom.Node method):     Node Objects.       (line  149)
* close() (aifc.aifc method):            aifc --- Read and write AIFF and AIFC files.
                                                             (line  113)
* close() (aifc.aifc method) <1>:        aifc --- Read and write AIFF and AIFC files.
                                                             (line  193)
* close() (asyncore.dispatcher method):  asyncore --- Asynchronous socket handler.
                                                             (line  215)
* close() (bsddb.bsddbobject method):    Hash BTree and Record Objects.
                                                             (line   12)
* close() (bz2.BZ2File method):          De compression of files.
                                                             (line   40)
* close() (chunk.Chunk method):          chunk --- Read IFF chunked data.
                                                             (line   73)
* close() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line   96)
* close() (dl.dl method):                Dl Objects.         (line    9)
* close() (email.parser.FeedParser method): FeedParser API.  (line   46)
* close() (file method):                 File Objects.       (line   22)
* close() (FrameWork.Window method):     Window Objects<2>.  (line   14)
* close() (ftplib.FTP method):           FTP Objects.        (line  223)
* close() (generator method):            Generator-iterator methods.
                                                             (line   50)
* close() (hotshot.Profile method):      Profile Objects.    (line   12)
* close() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   16)
* close() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   51)
* close() (imaplib.IMAP4 method):        IMAP4 Objects.      (line   58)
* close() (in module anydbm):            anydbm --- Generic access to DBM-style databases.
                                                             (line   93)
* close() (in module dbm):               dbm --- Simple "database" interface.
                                                             (line   70)
* close() (in module dumbdbm):           dumbdbm --- Portable DBM implementation.
                                                             (line   50)
* close() (in module fileinput):         fileinput --- Iterate over lines from multiple input streams.
                                                             (line  113)
* close() (in module gdbm):              gdbm --- GNU's reinterpretation of dbm.
                                                             (line  117)
* close() (in module mmap):              mmap --- Memory-mapped file support.
                                                             (line  147)
* close() (in module os):                File Descriptor Operations.
                                                             (line   21)
* close() (in module os) <1>:            Sub-interpreter support.
                                                             (line   50)
* close() (io.IOBase method):            I/O Base Classes.   (line   48)
* close() (logging.FileHandler method):  FileHandler.        (line   22)
* close() (logging.Handler method):      Handler Objects.    (line   65)
* close() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   48)
* close() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   29)
* close() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   16)
* close() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line   39)
* close() (mailbox.Mailbox method):      Mailbox objects.    (line  246)
* close() (mailbox.Maildir method):      Maildir.            (line  113)
* close() (mailbox.MH method):           MH.                 (line  104)
* Close() (msilib.View method):          View Objects.       (line   35)
* close() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   35)
* close() (multiprocessing.connection.Listener method): Listeners and Clients.
                                                             (line   97)
* close() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line  102)
* close() (multiprocessing.Queue method): Pipes and Queues.  (line  156)
* close() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   22)
* close() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line    8)
* close() (select.epoll method):         Edge and Level Trigger Polling epoll Objects.
                                                             (line   52)
* close() (select.kqueue method):        Kqueue Objects.     (line    6)
* close() (sgmllib.SGMLParser method):   sgmllib --- Simple SGML parser.
                                                             (line   66)
* close() (shelve.Shelf method):         shelve --- Python object persistence.
                                                             (line   68)
* close() (socket.socket method):        Socket Objects.     (line   28)
* close() (sqlite3.Connection method):   Connection Objects. (line   37)
* close() (StringIO.StringIO method):    StringIO --- Read and write strings as files.
                                                             (line   37)
* close() (sunau.AU_read method):        AU_read Objects.    (line    9)
* close() (sunau.AU_write method):       AU_write Objects.   (line   51)
* close() (tarfile.TarFile method):      TarFile Objects.    (line  216)
* close() (telnetlib.Telnet method):     Telnet Objects.     (line   89)
* close() (urllib2.BaseHandler method):  BaseHandler Objects.
                                                             (line   14)
* close() (wave.Wave_read method):       Wave_read Objects.  (line    9)
* close() (wave.Wave_write method):      Wave_write Objects. (line    9)
* close() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   15)
* close() (xml.etree.ElementTree.XMLParser method): XMLParser Objects.
                                                             (line   16)
* close() (xml.sax.xmlreader.IncrementalParser method): IncrementalParser Objects.
                                                             (line   13)
* close() (zipfile.ZipFile method):      ZipFile Objects.    (line   50)
* Close() (_winreg.PyHKEY method):       Registry Handle Objects.
                                                             (line   34)
* closed (file attribute):               File Objects.       (line  219)
* closed (io.IOBase attribute):          I/O Base Classes.   (line   58)
* closed (ossaudiodev.oss_audio_device attribute): Audio Device Objects.
                                                             (line  220)
* CloseKey() (in module _winreg):        _winreg -- Windows registry access.
                                                             (line   19)
* closelog() (in module syslog):         syslog --- Unix syslog library routines.
                                                             (line   46)
* closerange() (in module os):           File Descriptor Operations.
                                                             (line   34)
* close_when_done() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   68)
* closing() (in module contextlib):      contextlib --- Utilities for with-statement contexts.
                                                             (line  115)
* clrtobot() (curses.window method):     Window Objects.     (line  148)
* clrtoeol() (curses.window method):     Window Objects.     (line  154)
* cmath (module):                        cmath --- Mathematical functions for complex numbers.
                                                             (line    6)
* Cmd (class in cmd):                    cmd --- Support for line-oriented command interpreters.
                                                             (line   15)
* cmd (module):                          cmd --- Support for line-oriented command interpreters.
                                                             (line    6)
* cmd (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  145)
* cmdloop() (cmd.Cmd method):            Cmd Objects.        (line    8)
* cmp() (built-in function):             Built-in Functions. (line  220)
* cmp() (in module filecmp):             filecmp --- File and Directory Comparisons.
                                                             (line   16)
* cmpfiles() (in module filecmp):        filecmp --- File and Directory Comparisons.
                                                             (line   30)
* cmp_op (in module dis):                dis --- Disassembler for Python bytecode.
                                                             (line  103)
* cmp_to_key() (in module functools):    functools --- Higher-order functions and operations on callable objects.
                                                             (line   19)
* code (module):                         code --- Interpreter base classes.
                                                             (line    6)
* code (urllib2.HTTPError attribute):    urllib2 --- extensible library for opening URLs.
                                                             (line  117)
* code (xml.parsers.expat.ExpatError attribute): ExpatError Exceptions.
                                                             (line    9)
* code() (in module new):                new --- Creation of runtime internal objects.
                                                             (line   44)
* code; block:                           Naming and binding. (line    6)
* Codecs:                                codecs --- Codec registry and base classes.
                                                             (line    6)
* codecs (module):                       codecs --- Codec registry and base classes.
                                                             (line    6)
* Codecs; decode:                        codecs --- Codec registry and base classes.
                                                             (line    6)
* Codecs; encode:                        codecs --- Codec registry and base classes.
                                                             (line    6)
* coded_value (Cookie.Morsel attribute): Morsel Objects.     (line   42)
* codeop (module):                       codeop --- Compile Python code.
                                                             (line    6)
* codepoint2name (in module htmlentitydefs): htmlentitydefs --- Definitions of HTML general entities.
                                                             (line   33)
* CODESET (in module locale):            locale --- Internationalization services.
                                                             (line  175)
* CodeType (in module types):            types --- Names for built-in types.
                                                             (line  121)
* coding; style:                         Intermezzo Coding Style.
                                                             (line    6)
* coerce() (built-in function):          Non-essential Built-in Functions.
                                                             (line   43)
* coercion:                              Glossary.           (line  121)
* collapse_rfc2231_value() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  119)
* collect() (in module gc):              gc --- Garbage Collector interface.
                                                             (line   32)
* collections (module):                  collections --- High-performance container datatypes.
                                                             (line    6)
* collect_incoming_data() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   73)
* COLON (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* color() (in module fl):                Functions Defined in Module fl.
                                                             (line   95)
* color() (in module turtle):            Color control.      (line  105)
* colormode() (in module turtle):        Settings and special methods.
                                                             (line   33)
* ColorPicker (module):                  ColorPicker --- Color selection dialog.
                                                             (line    6)
* colorsys (module):                     colorsys --- Conversions between color systems.
                                                             (line    6)
* color_content() (in module curses):    Functions<2>.       (line   45)
* color_pair() (in module curses):       Functions<2>.       (line   53)
* column() (ttk.Treeview method):        ttk Treeview.       (line   35)
* COLUMNS:                               Functions<2>.       (line  529)
* COLUMNS <1>:                           Functions<2>.       (line  532)
* col_offset (ast.AST attribute):        Node classes.       (line   39)
* combinations() (in module itertools):  Itertool functions. (line   37)
* combinations_with_replacement() (in module itertools): Itertool functions.
                                                             (line   89)
* combine() (datetime.datetime class method): datetime Objects.
                                                             (line  110)
* combining() (in module unicodedata):   unicodedata --- Unicode Database.
                                                             (line   57)
* ComboBox (class in Tix):               Basic Widgets.      (line   18)
* Combobox (class in ttk):               ttk Combobox.       (line    6)
* comma:                                 Parenthesized forms.
                                                             (line   21)
* COMMA (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* command (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   69)
* Command (class in distutils.cmd):      distutils cmd --- Abstract base class for Distutils commands.
                                                             (line    8)
* Command (class in distutils.core):     distutils core --- Core Distutils functionality.
                                                             (line  294)
* command line:                          Complete Python programs.
                                                             (line   25)
* command line option; -3:               Miscellaneous options.
                                                             (line  237)
* command line option; -B:               Miscellaneous options.
                                                             (line    6)
* command line option; -c <command>:     Interface options.  (line   36)
* command line option; -d:               Miscellaneous options.
                                                             (line   14)
* command line option; -E:               Miscellaneous options.
                                                             (line   19)
* command line option; -h:               Generic options.    (line    6)
* command line option; –help:            Generic options.    (line    6)
* command line option; -i:               Miscellaneous options.
                                                             (line   26)
* command line option; -J:               Options you shouldn't use.
                                                             (line    6)
* command line option; -m <module-name>: Interface options.  (line   47)
* command line option; -O:               Miscellaneous options.
                                                             (line   37)
* command line option; -OO:              Miscellaneous options.
                                                             (line   43)
* command line option; -Q <arg>:         Miscellaneous options.
                                                             (line   47)
* command line option; -R:               Miscellaneous options.
                                                             (line   78)
* command line option; -s:               Miscellaneous options.
                                                             (line  102)
* command line option; -S:               Miscellaneous options.
                                                             (line  114)
* command line option; -t:               Miscellaneous options.
                                                             (line  120)
* command line option; -u:               Miscellaneous options.
                                                             (line  127)
* command line option; -U:               Options you shouldn't use.
                                                             (line   10)
* command line option; -V:               Generic options.    (line   14)
* command line option; -v:               Miscellaneous options.
                                                             (line  140)
* command line option; –version:         Generic options.    (line   14)
* command line option; -W arg:           Miscellaneous options.
                                                             (line  148)
* command line option; -x:               Miscellaneous options.
                                                             (line  230)
* command line option; -X:               Options you shouldn't use.
                                                             (line   22)
* CommandCompiler (class in codeop):     codeop --- Compile Python code.
                                                             (line   59)
* commands (module):                     commands --- Utilities for running commands.
                                                             (line    6)
* comment:                               Comments.           (line    6)
* comment (cookielib.Cookie attribute):  Cookie Objects.     (line   57)
* COMMENT (in module tokenize):          tokenize --- Tokenizer for Python source.
                                                             (line   70)
* comment (zipfile.ZipFile attribute):   ZipFile Objects.    (line  232)
* comment (zipfile.ZipInfo attribute):   ZipInfo Objects.    (line   51)
* Comment() (in module xml.etree.ElementTree): Functions<4>. (line    6)
* commenters (shlex.shlex attribute):    shlex Objects.      (line   89)
* CommentHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  328)
* comment_url (cookielib.Cookie attribute): Cookie Objects.  (line   62)
* commit() (msilib.CAB method):          CAB Objects.        (line   24)
* Commit() (msilib.Database method):     Database Objects<2>.
                                                             (line   11)
* commit() (sqlite3.Connection method):  Connection Objects. (line   24)
* common (filecmp.dircmp attribute):     The dircmp class.   (line   60)
* Common Gateway Interface:              cgi --- Common Gateway Interface support.
                                                             (line    6)
* commonprefix() (in module os.path):    os path --- Common pathname manipulations.
                                                             (line   53)
* common_dirs (filecmp.dircmp attribute): The dircmp class.  (line   72)
* common_files (filecmp.dircmp attribute): The dircmp class. (line   76)
* common_funny (filecmp.dircmp attribute): The dircmp class. (line   80)
* common_types (in module mimetypes):    mimetypes --- Map filenames to MIME types.
                                                             (line  135)
* communicate() (subprocess.Popen method): Popen Objects.    (line   24)
* compare() (decimal.Context method):    Context objects.    (line  241)
* compare() (decimal.Decimal method):    Decimal objects.    (line  137)
* compare() (difflib.Differ method):     Differ Objects.     (line   32)
* compare_digest() (in module hmac):     hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   64)
* COMPARE_OP (opcode):                   Python Bytecode Instructions.
                                                             (line  443)
* compare_signal() (decimal.Context method): Context objects.
                                                             (line  245)
* compare_signal() (decimal.Decimal method): Decimal objects.
                                                             (line  150)
* compare_total() (decimal.Context method): Context objects. (line  249)
* compare_total() (decimal.Decimal method): Decimal objects. (line  159)
* compare_total_mag() (decimal.Context method): Context objects.
                                                             (line  253)
* compare_total_mag() (decimal.Decimal method): Decimal objects.
                                                             (line  181)
* comparison:                            Comparisons.        (line    6)
* Comparison (class in aetypes):         aetypes --- AppleEvent objects.
                                                             (line  102)
* comparisons:                           Basic customization.
                                                             (line  140)
* comparisons <1>:                       Basic customization.
                                                             (line  180)
* COMPARISON_FLAGS (in module doctest):  Option Flags.       (line  114)
* Compile (class in codeop):             codeop --- Compile Python code.
                                                             (line   50)
* compile() (built-in function):         Built-in Functions. (line  226)
* compile() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  270)
* compile() (in module compiler):        The basic interface.
                                                             (line   29)
* compile() (in module py_compile):      py_compile --- Compile Python source files.
                                                             (line   24)
* compile() (in module re):              Module Contents.    (line   11)
* compile() (parser.ST method):          ST Objects.         (line   17)
* compileall (module):                   compileall --- Byte-compile Python libraries.
                                                             (line    6)
* compileall command line option; -d destdir: Command-line use.
                                                             (line   29)
* compileall command line option; -f:    Command-line use.   (line   21)
* compileall command line option; -i list: Command-line use. (line   43)
* compileall command line option; -l:    Command-line use.   (line   16)
* compileall command line option; -q:    Command-line use.   (line   25)
* compileall command line option; -x regex: Command-line use.
                                                             (line   37)
* compileFile() (in module compiler):    The basic interface.
                                                             (line   46)
* compiler (module):                     The basic interface.
                                                             (line    6)
* compiler.ast (module):                 AST Nodes.          (line    6)
* compiler.visitor (module):             Using Visitors to Walk ASTs.
                                                             (line    6)
* compilest() (in module parser):        Converting ST Objects.
                                                             (line   43)
* compile_command() (in module code):    code --- Interpreter base classes.
                                                             (line   40)
* compile_command() (in module codeop):  codeop --- Compile Python code.
                                                             (line   25)
* compile_dir() (in module compileall):  Public functions.   (line    6)
* compile_file() (in module compileall): Public functions.   (line   31)
* compile_path() (in module compileall): Public functions.   (line   51)
* complete() (rlcompleter.Completer method): Completer Objects.
                                                             (line    8)
* completedefault() (cmd.Cmd method):    Cmd Objects.        (line   80)
* complete_statement() (in module sqlite3): Module functions and constants.
                                                             (line  115)
* Complex (class in numbers):            The numeric tower.  (line    6)
* complex number:                        Glossary.           (line  136)
* complex number; literals:              Numeric Types --- int float long complex.
                                                             (line   23)
* complex() (built-in function):         Built-in Functions. (line  282)
* complex; literal:                      Numeric literals.   (line    6)
* complex; number:                       The standard type hierarchy.
                                                             (line  117)
* ComplexType (in module types):         types --- Names for built-in types.
                                                             (line   73)
* ComponentItem (class in aetypes):      aetypes --- AppleEvent objects.
                                                             (line  109)
* compound; statement:                   Compound statements.
                                                             (line    6)
* compress() (bz2.BZ2Compressor method): Sequential de compression.
                                                             (line   17)
* compress() (in module bz2):            One-shot de compression.
                                                             (line    9)
* compress() (in module itertools):      Itertool functions. (line  139)
* compress() (in module jpeg):           jpeg --- Read and write JPEG files.
                                                             (line   26)
* compress() (in module zlib):           zlib --- Compression compatible with gzip.
                                                             (line   53)
* compress() (zlib.Compress method):     zlib --- Compression compatible with gzip.
                                                             (line  147)
* CompressionError:                      tarfile --- Read and write tar archive files.
                                                             (line  169)
* compressobj() (in module zlib):        zlib --- Compression compatible with gzip.
                                                             (line   62)
* compress_size (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line  101)
* compress_type (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   47)
* COMSPEC:                               Process Management. (line  479)
* COMSPEC <1>:                           Popen Constructor.  (line   74)
* concat() (in module operator):         operator --- Standard operators as functions.
                                                             (line  184)
* concatenation; operation:              Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* Condition (class in multiprocessing):  Synchronization primitives.
                                                             (line   21)
* Condition (class in threading):        Condition Objects.  (line   57)
* condition() (msilib.Control method):   GUI classes.        (line   24)
* Condition() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  135)
* Conditional; expression:               Boolean operations. (line    6)
* conditional; expression:               Conditional Expressions.
                                                             (line    8)
* ConfigParser (class in ConfigParser):  ConfigParser --- Configuration file parser.
                                                             (line  102)
* ConfigParser (module):                 ConfigParser --- Configuration file parser.
                                                             (line    6)
* configuration information:             sysconfig --- Provide access to Python's configuration information.
                                                             (line    6)
* configuration; file:                   ConfigParser --- Configuration file parser.
                                                             (line   11)
* configure() (ttk.Style method):        Ttk Styling.        (line   25)
* confstr() (in module os):              Miscellaneous System Information.
                                                             (line    6)
* confstr_names (in module os):          Miscellaneous System Information.
                                                             (line   28)
* conjugate() (complex number method):   Numeric Types --- int float long complex.
                                                             (line  105)
* conjugate() (decimal.Decimal method):  Decimal objects.    (line  190)
* conjugate() (numbers.Complex method):  The numeric tower.  (line   23)
* connect() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  171)
* connect() (ftplib.FTP method):         FTP Objects.        (line   22)
* connect() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   47)
* connect() (in module sqlite3):         Module functions and constants.
                                                             (line   54)
* connect() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   58)
* connect() (smtplib.SMTP method):       SMTP Objects.       (line   31)
* connect() (socket.socket method):      Socket Objects.     (line   41)
* Connection (class in multiprocessing): Connection Objects<2>.
                                                             (line   13)
* Connection (class in sqlite3):         Connection Objects. (line    6)
* ConnectRegistry() (in module _winreg): _winreg -- Windows registry access.
                                                             (line   28)
* connect_ex() (socket.socket method):   Socket Objects.     (line   51)
* const (optparse.Option attribute):     Option attributes.  (line   50)
* constant:                              Literals.           (line    6)
* constructor() (in module copy_reg):    copy_reg --- Register pickle support functions.
                                                             (line   17)
* container:                             Objects values and types.
                                                             (line   62)
* container <1>:                         The standard type hierarchy.
                                                             (line  566)
* Container (class in collections):      Collections Abstract Base Classes.
                                                             (line   76)
* container; iteration over:             Iterator Types.     (line    8)
* contains() (in module operator):       operator --- Standard operators as functions.
                                                             (line  189)
* ContentHandler (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   16)
* ContentTooShortError:                  URL Opener objects. (line  131)
* Context (class in decimal):            Context objects.    (line  101)
* context management protocol:           Context Manager Types.
                                                             (line    8)
* context manager:                       With Statement Context Managers.
                                                             (line   16)
* context manager <1>:                   Context Manager Types.
                                                             (line    8)
* context manager <2>:                   Glossary.           (line  150)
* contextlib (module):                   contextlib --- Utilities for with-statement contexts.
                                                             (line    6)
* contextmanager() (in module contextlib): contextlib --- Utilities for with-statement contexts.
                                                             (line   18)
* context_diff() (in module difflib):    difflib --- Helpers for computing deltas.
                                                             (line  146)
* CONTINUE_LOOP (opcode):                Python Bytecode Instructions.
                                                             (line  283)
* Control (class in msilib):             GUI classes.        (line   11)
* Control (class in Tix):                Basic Widgets.      (line   24)
* control (in module cd):                cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* control() (msilib.Dialog method):      GUI classes.        (line   47)
* control() (select.kqueue method):      Kqueue Objects.     (line   18)
* controlnames (in module curses.ascii): curses ascii --- Utilities for ASCII characters.
                                                             (line  238)
* controls() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   20)
* ConversionError:                       Exceptions<3>.      (line   13)
* convert() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  103)
* convert_arg_line_to_args() (argparse.ArgumentParser method): Customizing file parsing.
                                                             (line    6)
* convert_charref() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  134)
* convert_codepoint() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  146)
* convert_entityref() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  167)
* convert_field() (string.Formatter method): String Formatting.
                                                             (line  108)
* convert_path() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   59)
* Cookie (class in cookielib):           cookielib --- Cookie handling for HTTP clients.
                                                             (line  109)
* Cookie (module):                       Cookie --- HTTP state management.
                                                             (line    6)
* CookieError:                           Cookie --- HTTP state management.
                                                             (line   36)
* CookieJar (class in cookielib):        cookielib --- Cookie handling for HTTP clients.
                                                             (line   52)
* cookiejar (urllib2.HTTPCookieProcessor attribute): HTTPCookieProcessor Objects.
                                                             (line   10)
* cookielib (module):                    cookielib --- Cookie handling for HTTP clients.
                                                             (line    6)
* CookiePolicy (class in cookielib):     cookielib --- Cookie handling for HTTP clients.
                                                             (line   77)
* Coordinated Universal Time:            time --- Time access and conversions.
                                                             (line   45)
* Copy:                                  Edit context menu.  (line   29)
* copy (module):                         copy --- Shallow and deep copy operations.
                                                             (line    6)
* copy() (decimal.Context method):       Context objects.    (line  161)
* copy() (dict method):                  Mapping Types --- dict.
                                                             (line  126)
* copy() (hashlib.hash method):          hashlib --- Secure hashes and message digests.
                                                             (line  115)
* copy() (hmac.HMAC method):             hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   56)
* copy() (imaplib.IMAP4 method):         IMAP4 Objects.      (line   64)
* copy() (in module copy):               copy --- Shallow and deep copy operations.
                                                             (line   14)
* copy() (in module findertools):        findertools --- The finder's Apple Events interface.
                                                             (line   27)
* copy() (in module macostools):         macostools --- Convenience routines for file manipulation.
                                                             (line   15)
* copy() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   83)
* copy() (in module shutil):             Directory and files operations.
                                                             (line   41)
* copy() (md5.md5 method):               md5 --- MD5 message digest algorithm.
                                                             (line   72)
* copy() (pipes.Template method):        Template Objects.   (line   48)
* copy() (set method):                   Set Types --- set frozenset.
                                                             (line  122)
* copy() (sha.sha method):               sha --- SHA-1 message digest algorithm.
                                                             (line   55)
* copy() (zlib.Compress method):         zlib --- Compression compatible with gzip.
                                                             (line  167)
* copy() (zlib.Decompress method):       zlib --- Compression compatible with gzip.
                                                             (line  229)
* copy2() (in module shutil):            Directory and files operations.
                                                             (line   48)
* copybinary() (in module mimetools):    mimetools --- Tools for parsing MIME messages.
                                                             (line   51)
* copyfile() (in module shutil):         Directory and files operations.
                                                             (line   17)
* copyfileobj() (in module shutil):      Directory and files operations.
                                                             (line    6)
* copying files:                         shutil --- High-level file operations.
                                                             (line    6)
* copyliteral() (in module mimetools):   mimetools --- Tools for parsing MIME messages.
                                                             (line   46)
* copymessage() (mhlib.Folder method):   Folder Objects.     (line   71)
* copymode() (in module shutil):         Directory and files operations.
                                                             (line   29)
* copyright (built-in variable):         Constants added by the site module.
                                                             (line   18)
* copyright (in module sys):             sys --- System-specific parameters and functions.
                                                             (line   45)
* copyright (in module sys) <1>:         Process-wide parameters.
                                                             (line  131)
* copysign() (in module math):           Number-theoretic and representation functions.
                                                             (line   11)
* copystat() (in module shutil):         Directory and files operations.
                                                             (line   35)
* copytree() (in module macostools):     macostools --- Convenience routines for file manipulation.
                                                             (line   27)
* copytree() (in module shutil):         Directory and files operations.
                                                             (line   63)
* copy_abs() (decimal.Context method):   Context objects.    (line  258)
* copy_abs() (decimal.Decimal method):   Decimal objects.    (line  197)
* copy_decimal() (decimal.Context method): Context objects.  (line  165)
* copy_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                             (line    9)
* copy_location() (in module ast):       ast Helpers.        (line   50)
* copy_negate() (decimal.Context method): Context objects.   (line  262)
* copy_negate() (decimal.Decimal method): Decimal objects.   (line  205)
* copy_reg (module):                     copy_reg --- Register pickle support functions.
                                                             (line    6)
* copy_sign() (decimal.Context method):  Context objects.    (line  266)
* copy_sign() (decimal.Decimal method):  Decimal objects.    (line  213)
* copy_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line   32)
* coroutine:                             Yield expressions.  (line   32)
* cos() (in module cmath):               Trigonometric functions<2>.
                                                             (line   28)
* cos() (in module math):                Trigonometric functions.
                                                             (line   28)
* cosh() (in module cmath):              Hyperbolic functions<2>.
                                                             (line   32)
* cosh() (in module math):               Hyperbolic functions.
                                                             (line   24)
* count() (array.array method):          array --- Efficient arrays of numeric values.
                                                             (line  135)
* count() (collections.deque method):    deque objects.      (line   51)
* count() (in module itertools):         Itertool functions. (line  152)
* count() (in module string):            Deprecated string functions.
                                                             (line   92)
* count() (list method):                 Mutable Sequence Types.
                                                             (line   13)
* count() (str method):                  String Methods<2>.  (line   31)
* Counter (class in collections):        Counter objects.    (line   23)
* countOf() (in module operator):        operator --- Standard operators as functions.
                                                             (line  197)
* countTestCases() (unittest.TestCase method): Test cases.   (line  571)
* countTestCases() (unittest.TestSuite method): Grouping tests.
                                                             (line   55)
* CoverageResults (class in trace):      Programmatic Interface.
                                                             (line   50)
* co_argcount (code object attribute):   The standard type hierarchy.
                                                             (line  659)
* co_cellvars (code object attribute):   The standard type hierarchy.
                                                             (line  659)
* co_code (code object attribute):       The standard type hierarchy.
                                                             (line  659)
* co_consts (code object attribute):     The standard type hierarchy.
                                                             (line  659)
* co_filename (code object attribute):   The standard type hierarchy.
                                                             (line  659)
* co_firstlineno (code object attribute): The standard type hierarchy.
                                                             (line  659)
* co_flags (code object attribute):      The standard type hierarchy.
                                                             (line  659)
* co_freevars (code object attribute):   The standard type hierarchy.
                                                             (line  659)
* CO_FUTURE_DIVISION (C variable):       The Very High Level Layer.
                                                             (line  344)
* co_lnotab (code object attribute):     The standard type hierarchy.
                                                             (line  659)
* co_name (code object attribute):       The standard type hierarchy.
                                                             (line  659)
* co_names (code object attribute):      The standard type hierarchy.
                                                             (line  659)
* co_nlocals (code object attribute):    The standard type hierarchy.
                                                             (line  659)
* co_stacksize (code object attribute):  The standard type hierarchy.
                                                             (line  659)
* co_varnames (code object attribute):   The standard type hierarchy.
                                                             (line  659)
* cPickle (module):                      cPickle --- A faster pickle.
                                                             (line    6)
* CPP:                                   New Improved and Deprecated Modules<2>.
                                                             (line   59)
* CPPFLAGS:                              New Improved and Deprecated Modules<2>.
                                                             (line   59)
* cProfile (module):                     profile and cProfile Module Reference.
                                                             (line    6)
* CPU time:                              time --- Time access and conversions.
                                                             (line  136)
* cpu_count() (in module multiprocessing): Miscellaneous<2>. (line   13)
* CPython:                               Glossary.           (line  156)
* CRC (zipfile.ZipInfo attribute):       ZipInfo Objects.    (line   97)
* crc32() (in module binascii):          binascii --- Convert between binary and ASCII.
                                                             (line   92)
* crc32() (in module zlib):              zlib --- Compression compatible with gzip.
                                                             (line   88)
* crc_hqx() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line   87)
* create() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   68)
* createAttribute() (xml.dom.Document method): Document Objects.
                                                             (line   46)
* createAttributeNS() (xml.dom.Document method): Document Objects.
                                                             (line   53)
* createComment() (xml.dom.Document method): Document Objects.
                                                             (line   34)
* createDocument() (xml.dom.DOMImplementation method): DOMImplementation Objects.
                                                             (line   16)
* createDocumentType() (xml.dom.DOMImplementation method): DOMImplementation Objects.
                                                             (line   26)
* createElement() (xml.dom.Document method): Document Objects.
                                                             (line   14)
* createElementNS() (xml.dom.Document method): Document Objects.
                                                             (line   21)
* CreateKey() (in module _winreg):       _winreg -- Windows registry access.
                                                             (line   41)
* CreateKeyEx() (in module _winreg):     _winreg -- Windows registry access.
                                                             (line   61)
* createLock() (logging.Handler method): Handler Objects.    (line   18)
* createLock() (logging.NullHandler method): NullHandler.    (line   24)
* createparser() (in module cd):         cd --- CD-ROM access on SGI systems.
                                                             (line   35)
* createProcessingInstruction() (xml.dom.Document method): Document Objects.
                                                             (line   40)
* CreateRecord() (in module msilib):     msilib --- Read and write Microsoft Installer files.
                                                             (line   53)
* createSocket() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   60)
* createTextNode() (xml.dom.Document method): Document Objects.
                                                             (line   28)
* create_aggregate() (sqlite3.Connection method): Connection Objects.
                                                             (line   90)
* create_collation() (sqlite3.Connection method): Connection Objects.
                                                             (line  126)
* create_connection() (in module socket): socket --- Low-level networking interface.
                                                             (line  217)
* create_decimal() (decimal.Context method): Context objects.
                                                             (line  169)
* create_decimal_from_float() (decimal.Context method): Context objects.
                                                             (line  193)
* create_function() (sqlite3.Connection method): Connection Objects.
                                                             (line   64)
* CREATE_NEW_CONSOLE (in module subprocess): Constants<4>.   (line   38)
* CREATE_NEW_PROCESS_GROUP (in module subprocess): Constants<4>.
                                                             (line   46)
* create_shortcut() (built-in function): The Postinstallation script.
                                                             (line   62)
* create_socket() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  165)
* create_static_lib() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  324)
* create_stats() (profile.Profile method): profile and cProfile Module Reference.
                                                             (line   71)
* create_string_buffer() (in module ctypes): Utility functions.
                                                             (line   39)
* create_system (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   61)
* create_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line   21)
* create_unicode_buffer() (in module ctypes): Utility functions.
                                                             (line   57)
* create_version (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   65)
* credits (built-in variable):           Constants added by the site module.
                                                             (line   18)
* critical() (in module logging):        Module-Level Functions.
                                                             (line  101)
* critical() (logging.Logger method):    Logger Objects.     (line  168)
* CRNCYSTR (in module locale):           locale --- Internationalization services.
                                                             (line  248)
* crop() (in module imageop):            imageop --- Manipulate raw image data.
                                                             (line   21)
* cross() (in module audioop):           audioop --- Manipulate raw audio data.
                                                             (line   63)
* crypt (module):                        crypt --- Function to check Unix passwords.
                                                             (line    6)
* crypt() (in module crypt):             crypt --- Function to check Unix passwords.
                                                             (line   17)
* crypt(3):                              crypt --- Function to check Unix passwords.
                                                             (line    6)
* crypt(3) <1>:                          crypt --- Function to check Unix passwords.
                                                             (line   12)
* crypt(3) <2>:                          crypt --- Function to check Unix passwords.
                                                             (line   27)
* cryptography:                          Cryptographic Services.
                                                             (line    6)
* cryptography <1>:                      sha --- SHA-1 message digest algorithm.
                                                             (line   73)
* cStringIO (module):                    cStringIO --- Faster version of StringIO.
                                                             (line    6)
* csv:                                   csv --- CSV File Reading and Writing.
                                                             (line    8)
* csv (module):                          csv --- CSV File Reading and Writing.
                                                             (line    6)
* ctermid() (in module os):              Process Parameters. (line   55)
* ctime() (datetime.date method):        date Objects.       (line  206)
* ctime() (datetime.datetime method):    datetime Objects.   (line  430)
* ctime() (in module time):              time --- Time access and conversions.
                                                             (line  147)
* ctrl() (in module curses.ascii):       curses ascii --- Utilities for ASCII characters.
                                                             (line  214)
* CTRL_BREAK_EVENT (in module signal):   signal --- Set handlers for asynchronous events.
                                                             (line   86)
* CTRL_C_EVENT (in module signal):       signal --- Set handlers for asynchronous events.
                                                             (line   77)
* ctypes (module):                       ctypes --- A foreign function library for Python.
                                                             (line    6)
* curdir (in module os):                 Miscellaneous System Information.
                                                             (line   72)
* currency() (in module locale):         locale --- Internationalization services.
                                                             (line  407)
* current() (ttk.Combobox method):       ttk Combobox.       (line    8)
* CurrentByteIndex (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  187)
* CurrentColumnNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  191)
* currentframe() (in module inspect):    The interpreter stack.
                                                             (line   60)
* CurrentLineNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  195)
* currentThread() (in module threading): threading --- Higher-level threading interface.
                                                             (line   57)
* current_process() (in module multiprocessing): Miscellaneous<2>.
                                                             (line   18)
* current_thread() (in module threading): threading --- Higher-level threading interface.
                                                             (line   57)
* curses (module):                       curses --- Terminal handling for character-cell displays.
                                                             (line    6)
* curses.ascii (module):                 curses ascii --- Utilities for ASCII characters.
                                                             (line    6)
* curses.panel (module):                 curses panel --- A panel stack extension for curses.
                                                             (line    6)
* curses.textpad (module):               curses textpad --- Text input widget for curses programs.
                                                             (line    6)
* Cursor (class in sqlite3):             Cursor Objects.     (line    6)
* cursor() (sqlite3.Connection method):  Connection Objects. (line   18)
* cursyncup() (curses.window method):    Window Objects.     (line  158)
* curs_set() (in module curses):         Functions<2>.       (line   60)
* curval (EasyDialogs.ProgressBar attribute): ProgressBar Objects.
                                                             (line   26)
* customize_compiler() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   84)
* Cut:                                   Edit context menu.  (line   29)
* cwd() (ftplib.FTP method):             FTP Objects.        (line  190)
* cycle() (in module itertools):         Itertool functions. (line  174)
* Cyclic Redundancy Check:               zlib --- Compression compatible with gzip.
                                                             (line   90)
* c_bool (class in ctypes):              Fundamental data types<2>.
                                                             (line  206)
* C_BUILTIN (in module imp):             imp --- Access the import internals.
                                                             (line  151)
* c_byte (class in ctypes):              Fundamental data types<2>.
                                                             (line   47)
* c_char (class in ctypes):              Fundamental data types<2>.
                                                             (line   53)
* c_char_p (class in ctypes):            Fundamental data types<2>.
                                                             (line   60)
* c_double (class in ctypes):            Fundamental data types<2>.
                                                             (line   67)
* C_EXTENSION (in module imp):           imp --- Access the import internals.
                                                             (line  143)
* c_float (class in ctypes):             Fundamental data types<2>.
                                                             (line   80)
* c_int (class in ctypes):               Fundamental data types<2>.
                                                             (line   85)
* c_int16 (class in ctypes):             Fundamental data types<2>.
                                                             (line   97)
* c_int32 (class in ctypes):             Fundamental data types<2>.
                                                             (line  102)
* c_int64 (class in ctypes):             Fundamental data types<2>.
                                                             (line  107)
* c_int8 (class in ctypes):              Fundamental data types<2>.
                                                             (line   92)
* c_long (class in ctypes):              Fundamental data types<2>.
                                                             (line  112)
* c_longdouble (class in ctypes):        Fundamental data types<2>.
                                                             (line   72)
* c_longlong (class in ctypes):          Fundamental data types<2>.
                                                             (line  117)
* c_short (class in ctypes):             Fundamental data types<2>.
                                                             (line  123)
* c_size_t (class in ctypes):            Fundamental data types<2>.
                                                             (line  128)
* c_ssize_t (class in ctypes):           Fundamental data types<2>.
                                                             (line  132)
* c_ubyte (class in ctypes):             Fundamental data types<2>.
                                                             (line  138)
* c_uint (class in ctypes):              Fundamental data types<2>.
                                                             (line  144)
* c_uint16 (class in ctypes):            Fundamental data types<2>.
                                                             (line  156)
* c_uint32 (class in ctypes):            Fundamental data types<2>.
                                                             (line  161)
* c_uint64 (class in ctypes):            Fundamental data types<2>.
                                                             (line  166)
* c_uint8 (class in ctypes):             Fundamental data types<2>.
                                                             (line  151)
* c_ulong (class in ctypes):             Fundamental data types<2>.
                                                             (line  171)
* c_ulonglong (class in ctypes):         Fundamental data types<2>.
                                                             (line  176)
* c_ushort (class in ctypes):            Fundamental data types<2>.
                                                             (line  182)
* c_void_p (class in ctypes):            Fundamental data types<2>.
                                                             (line  188)
* c_wchar (class in ctypes):             Fundamental data types<2>.
                                                             (line  193)
* c_wchar_p (class in ctypes):           Fundamental data types<2>.
                                                             (line  200)
* daemon (multiprocessing.Process attribute): Process and exceptions.
                                                             (line   78)
* daemon (threading.Thread attribute):   Thread Objects.     (line  160)
* dangling; else:                        Compound statements.
                                                             (line   52)
* data:                                  Objects values and types.
                                                             (line    6)
* Data (class in plistlib):              plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   84)
* data (select.kevent attribute):        Kevent Objects.     (line  175)
* data (UserDict.IterableUserDict attribute): UserDict --- Class wrapper for dictionary objects.
                                                             (line   47)
* data (UserList.UserList attribute):    UserList --- Class wrapper for list objects.
                                                             (line   48)
* data (UserString.MutableString attribute): UserString --- Class wrapper for string objects.
                                                             (line   59)
* data (xml.dom.Comment attribute):      Comment Objects.    (line    9)
* data (xml.dom.ProcessingInstruction attribute): ProcessingInstruction Objects.
                                                             (line   14)
* data (xml.dom.Text attribute):         Text and CDATASection Objects.
                                                             (line   15)
* data (xmlrpclib.Binary attribute):     Binary Objects.     (line   10)
* data() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   20)
* data; tabular:                         csv --- CSV File Reading and Writing.
                                                             (line    8)
* data; type:                            The standard type hierarchy.
                                                             (line    6)
* databases:                             dumbdbm --- Portable DBM implementation.
                                                             (line   10)
* DatagramHandler (class in logging.handlers): DatagramHandler.
                                                             (line   10)
* DATASIZE (in module cd):               cd --- CD-ROM access on SGI systems.
                                                             (line   60)
* date (class in datetime):              date Objects.       (line   15)
* date() (datetime.datetime method):     datetime Objects.   (line  267)
* date() (nntplib.NNTP method):          NNTP Objects.       (line  184)
* datetime (class in datetime):          datetime Objects.   (line   15)
* datetime (module):                     datetime --- Basic date and time types.
                                                             (line    6)
* date_time (zipfile.ZipInfo attribute): ZipInfo Objects.    (line   17)
* date_time_string() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  231)
* datum:                                 Dictionary displays.
                                                             (line    6)
* day (datetime.date attribute):         date Objects.       (line   79)
* day (datetime.datetime attribute):     datetime Objects.   (line  160)
* daylight (in module time):             time --- Time access and conversions.
                                                             (line  160)
* Daylight Saving Time:                  time --- Time access and conversions.
                                                             (line   49)
* day_abbr (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  293)
* day_name (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  288)
* DbfilenameShelf (class in shelve):     Restrictions.       (line   53)
* dbhash (module):                       dbhash --- DBM-style interface to the BSD database library.
                                                             (line    6)
* dbm (module):                          dbm --- Simple "database" interface.
                                                             (line    6)
* deactivate_form() (fl.form method):    Form Objects.       (line   44)
* deallocation, object:                  Finalization and De-allocation.
                                                             (line    6)
* debug (imaplib.IMAP4 attribute):       IMAP4 Objects.      (line  364)
* DEBUG (in module re):                  Module Contents.    (line   40)
* debug (shlex.shlex attribute):         shlex Objects.      (line  159)
* debug (zipfile.ZipFile attribute):     ZipFile Objects.    (line  226)
* debug() (in module doctest):           Debugging.          (line  131)
* debug() (in module logging):           Module-Level Functions.
                                                             (line   32)
* debug() (logging.Logger method):       Logger Objects.     (line  101)
* debug() (pipes.Template method):       Template Objects.   (line   16)
* debug() (unittest.TestCase method):    Test cases.         (line  106)
* debug() (unittest.TestSuite method):   Grouping tests.     (line   48)
* debugger:                              Debug menu.         (line   25)
* debugger <1>:                          sys --- System-specific parameters and functions.
                                                             (line  513)
* debugger <2>:                          sys --- System-specific parameters and functions.
                                                             (line  915)
* debugger; configuration; file:         Debugger Commands.  (line   36)
* debugging:                             pdb --- The Python Debugger.
                                                             (line    6)
* debugging; assertions:                 The assert statement.
                                                             (line    6)
* DebuggingServer (class in smtpd):      DebuggingServer Objects.
                                                             (line    6)
* DebugRunner (class in doctest):        Debugging.          (line  181)
* DebugStr() (in module MacOS):          MacOS --- Access to Mac OS interpreter features.
                                                             (line   44)
* DEBUG_COLLECTABLE (in module gc):      gc --- Garbage Collector interface.
                                                             (line  193)
* DEBUG_INSTANCES (in module gc):        gc --- Garbage Collector interface.
                                                             (line  203)
* DEBUG_LEAK (in module gc):             gc --- Garbage Collector interface.
                                                             (line  220)
* DEBUG_OBJECTS (in module gc):          gc --- Garbage Collector interface.
                                                             (line  208)
* debug_print() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  512)
* DEBUG_SAVEALL (in module gc):          gc --- Garbage Collector interface.
                                                             (line  214)
* debug_src() (in module doctest):       Debugging.          (line  158)
* DEBUG_STATS (in module gc):            gc --- Garbage Collector interface.
                                                             (line  188)
* DEBUG_UNCOLLECTABLE (in module gc):    gc --- Garbage Collector interface.
                                                             (line  197)
* Decimal (class in decimal):            Decimal objects.    (line    6)
* decimal (module):                      decimal --- Decimal fixed point and floating point arithmetic.
                                                             (line    6)
* decimal literal:                       Numeric literals.   (line    6)
* decimal() (in module unicodedata):     unicodedata --- Unicode Database.
                                                             (line   28)
* DecimalException (class in decimal):   Signals.            (line   28)
* decode() (codecs.Codec method):        Codec Objects.      (line   27)
* decode() (codecs.IncrementalDecoder method): IncrementalDecoder Objects.
                                                             (line   38)
* decode() (in module base64):           base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line  112)
* decode() (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line   26)
* decode() (in module mimetools):        mimetools --- Tools for parsing MIME messages.
                                                             (line   30)
* decode() (in module quopri):           quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   19)
* decode() (in module uu):               uu --- Encode and decode uuencode files.
                                                             (line   32)
* decode() (json.JSONDecoder method):    Encoders and Decoders.
                                                             (line   92)
* decode() (str method):                 String Methods<2>.  (line   37)
* decode() (xmlrpclib.Binary method):    Binary Objects.     (line   18)
* decode() (xmlrpclib.DateTime method):  DateTime Objects.   (line   11)
* DecodedGenerator (class in email.generator): email generator Generating MIME documents.
                                                             (line   97)
* decodestring() (in module base64):     base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line  119)
* decodestring() (in module quopri):     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   43)
* decode_header() (in module email.header): email header Internationalized headers.
                                                             (line  147)
* decode_params() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  136)
* decode_rfc2231() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  107)
* decomposition() (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line   77)
* decompress() (bz2.BZ2Decompressor method): Sequential de compression.
                                                             (line   37)
* decompress() (in module bz2):          One-shot de compression.
                                                             (line   16)
* decompress() (in module jpeg):         jpeg --- Read and write JPEG files.
                                                             (line   37)
* decompress() (in module zlib):         zlib --- Compression compatible with gzip.
                                                             (line  114)
* decompress() (zlib.Decompress method): zlib --- Compression compatible with gzip.
                                                             (line  202)
* decompressobj() (in module zlib):      zlib --- Compression compatible with gzip.
                                                             (line  139)
* decorator:                             Glossary.           (line  163)
* DEDENT (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* DEDENT token:                          Indentation.        (line   29)
* DEDENT token <1>:                      Compound statements.
                                                             (line   52)
* dedent() (in module textwrap):         textwrap --- Text wrapping and filling.
                                                             (line   57)
* deepcopy() (in module copy):           copy --- Shallow and deep copy operations.
                                                             (line   18)
* default (optparse.Option attribute):   Option attributes.  (line   36)
* default() (cmd.Cmd method):            Cmd Objects.        (line   74)
* default() (compiler.visitor.ASTVisitor method): Using Visitors to Walk ASTs.
                                                             (line   40)
* default() (json.JSONEncoder method):   Encoders and Decoders.
                                                             (line  196)
* default; parameter; value:             Function definitions.
                                                             (line   50)
* DefaultContext (class in decimal):     Context objects.    (line   78)
* DefaultCookiePolicy (class in cookielib): cookielib --- Cookie handling for HTTP clients.
                                                             (line   82)
* defaultdict (class in collections):    defaultdict objects.
                                                             (line    6)
* DefaultHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  343)
* DefaultHandlerExpand() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  350)
* defaults() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line    8)
* defaultTestLoader (in module unittest): Loading and running tests.
                                                             (line  342)
* defaultTestResult() (unittest.TestCase method): Test cases.
                                                             (line  576)
* DEFAULT_BUFFER_SIZE (in module io):    Module Interface.   (line    6)
* default_bufsize (in module xml.dom.pulldom): xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   41)
* default_factory (collections.defaultdict attribute): defaultdict objects.
                                                             (line   51)
* DEFAULT_FORMAT (in module tarfile):    tarfile --- Read and write tar archive files.
                                                             (line  207)
* default_open() (urllib2.BaseHandler method): BaseHandler Objects.
                                                             (line   30)
* default_timer() (in module timeit):    Python Interface.   (line   26)
* defects (email.message.Message attribute): email message Representing an email message.
                                                             (line  586)
* define_macro() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  163)
* defpath (in module os):                Miscellaneous System Information.
                                                             (line  114)
* def_prog_mode() (in module curses):    Functions<2>.       (line   69)
* def_shell_mode() (in module curses):   Functions<2>.       (line   76)
* degrees() (in module math):            Angular conversion. (line    6)
* degrees() (in module turtle):          Settings for measurement.
                                                             (line    6)
* delattr() (built-in function):         Built-in Functions. (line  302)
* delay() (in module turtle):            Animation control.  (line    6)
* delayload (cookielib.FileCookieJar attribute): CookieJar and FileCookieJar Objects.
                                                             (line  152)
* delay_output() (in module curses):     Functions<2>.       (line   84)
* delch() (curses.window method):        Window Objects.     (line  163)
* dele() (poplib.POP3 method):           POP3 Objects.       (line   60)
* delete() (ftplib.FTP method):          FTP Objects.        (line  183)
* delete() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   72)
* delete() (ttk.Treeview method):        ttk Treeview.       (line   79)
* deleteacl() (imaplib.IMAP4 method):    IMAP4 Objects.      (line   76)
* deletefolder() (mhlib.MH method):      MH Objects.         (line   48)
* DeleteKey() (in module _winreg):       _winreg -- Windows registry access.
                                                             (line   91)
* DeleteKeyEx() (in module _winreg):     _winreg -- Windows registry access.
                                                             (line  108)
* deleteln() (curses.window method):     Window Objects.     (line  167)
* deleteMe() (bdb.Breakpoint method):    bdb --- Debugger framework.
                                                             (line   41)
* DeleteValue() (in module _winreg):     _winreg -- Windows registry access.
                                                             (line  143)
* DELETE_ATTR (opcode):                  Python Bytecode Instructions.
                                                             (line  405)
* DELETE_FAST (opcode):                  Python Bytecode Instructions.
                                                             (line  530)
* DELETE_GLOBAL (opcode):                Python Bytecode Instructions.
                                                             (line  413)
* DELETE_NAME (opcode):                  Python Bytecode Instructions.
                                                             (line  385)
* DELETE_SLICE+0 (opcode):               Python Bytecode Instructions.
                                                             (line  224)
* DELETE_SLICE+1 (opcode):               Python Bytecode Instructions.
                                                             (line  228)
* DELETE_SLICE+2 (opcode):               Python Bytecode Instructions.
                                                             (line  232)
* DELETE_SLICE+3 (opcode):               Python Bytecode Instructions.
                                                             (line  236)
* DELETE_SUBSCR (opcode):                Python Bytecode Instructions.
                                                             (line  244)
* deletion; target:                      The del statement<2>.
                                                             (line    6)
* deletion; target; list:                The del statement<2>.
                                                             (line    6)
* delimiter (csv.Dialect attribute):     Dialects and Formatting Parameters.
                                                             (line   19)
* delimiters:                            Delimiters.         (line    6)
* delitem() (in module operator):        operator --- Standard operators as functions.
                                                             (line  201)
* deliver_challenge() (in module multiprocessing.connection): Listeners and Clients.
                                                             (line   14)
* delslice() (in module operator):       operator --- Standard operators as functions.
                                                             (line  206)
* del_param() (email.message.Message method): email message Representing an email message.
                                                             (line  438)
* demo_app() (in module wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   36)
* denominator (numbers.Rational attribute): The numeric tower.
                                                             (line   51)
* DeprecationWarning:                    Built-in Exceptions.
                                                             (line  461)
* deque (class in collections):          deque objects.      (line    6)
* derwin() (curses.window method):       Window Objects.     (line  172)
* DER_cert_to_PEM_cert() (in module ssl): Functions Constants and Exceptions.
                                                             (line  183)
* description (sqlite3.Cursor attribute): Cursor Objects.    (line  194)
* description() (nntplib.NNTP method):   NNTP Objects.       (line   79)
* descriptions() (nntplib.NNTP method):  NNTP Objects.       (line   70)
* descriptor:                            Glossary.           (line  185)
* dest (optparse.Option attribute):      Option attributes.  (line   27)
* destructor:                            Basic customization.
                                                             (line   50)
* destructor <1>:                        Assignment statements.
                                                             (line   58)
* detach() (io.BufferedIOBase method):   I/O Base Classes.   (line  238)
* detach() (io.TextIOBase method):       Text I/O.           (line   39)
* detach() (ttk.Treeview method):        ttk Treeview.       (line   85)
* Detach() (_winreg.PyHKEY method):      Registry Handle Objects.
                                                             (line   40)
* detect_language() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  199)
* deterministic profiling:               Introduction to the profilers.
                                                             (line    6)
* DEVICE (module):                       DEVICE --- Constants used with the gl module.
                                                             (line    6)
* devnull (in module os):                Miscellaneous System Information.
                                                             (line  129)
* dgettext() (in module gettext):        GNU gettext API.    (line   55)
* Dialect (class in csv):                Module Contents<2>. (line  159)
* dialect (csv.csvreader attribute):     Reader Objects.     (line   17)
* dialect (csv.csvwriter attribute):     Writer Objects.     (line   28)
* Dialog (class in msilib):              GUI classes.        (line   40)
* DialogWindow() (in module FrameWork):  FrameWork --- Interactive application framework.
                                                             (line   84)
* dict (2to3 fixer):                     Fixers.             (line   32)
* dict (built-in class):                 Mapping Types --- dict.
                                                             (line   27)
* dict() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  182)
* dictConfig() (in module logging.config): Configuration functions.
                                                             (line   13)
* dictionary:                            Glossary.           (line  201)
* dictionary; display:                   Dictionary displays.
                                                             (line    6)
* DictionaryType (in module types):      types --- Names for built-in types.
                                                             (line  104)
* DictionaryType (in module types) <1>:  Dictionary Objects. (line   13)
* DictMixin (class in UserDict):         UserDict --- Class wrapper for dictionary objects.
                                                             (line   52)
* DictProxyType (in module types):       types --- Names for built-in types.
                                                             (line  185)
* DictReader (class in csv):             Module Contents<2>. (line  118)
* DictType (in module types):            types --- Names for built-in types.
                                                             (line   99)
* DictType (in module types) <1>:        Dictionary Objects. (line   13)
* DictWriter (class in csv):             Module Contents<2>. (line  136)
* Differ (class in difflib):             difflib --- Helpers for computing deltas.
                                                             (line   46)
* Differ (class in difflib) <1>:         Differ Objects.     (line   15)
* difference() (set method):             Set Types --- set frozenset.
                                                             (line  106)
* difference_update() (set method):      Set Types --- set frozenset.
                                                             (line  185)
* difflib (module):                      difflib --- Helpers for computing deltas.
                                                             (line    6)
* diff_files (filecmp.dircmp attribute): The dircmp class.   (line   91)
* digest() (hashlib.hash method):        hashlib --- Secure hashes and message digests.
                                                             (line  102)
* digest() (hmac.HMAC method):           hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   30)
* digest() (md5.md5 method):             md5 --- MD5 message digest algorithm.
                                                             (line   59)
* digest() (sha.sha method):             sha --- SHA-1 message digest algorithm.
                                                             (line   42)
* digest_size (in module md5):           md5 --- MD5 message digest algorithm.
                                                             (line   34)
* digest_size (in module sha):           sha --- SHA-1 message digest algorithm.
                                                             (line   29)
* digit() (in module unicodedata):       unicodedata --- Unicode Database.
                                                             (line   34)
* digits (in module string):             String constants.   (line   24)
* dir() (built-in function):             Built-in Functions. (line  324)
* dir() (ftplib.FTP method):             FTP Objects.        (line  169)
* dircache (module):                     dircache --- Cached directory listings.
                                                             (line    6)
* dircmp (class in filecmp):             The dircmp class.   (line    8)
* Directory (class in msilib):           Directory Objects.  (line    6)
* directory; changing:                   Files and Directories.
                                                             (line   72)
* directory; creating:                   Files and Directories.
                                                             (line  317)
* directory; deleting:                   Directory and files operations.
                                                             (line  105)
* directory; deleting <1>:               Files and Directories.
                                                             (line  385)
* directory; traversal:                  Files and Directories.
                                                             (line  660)
* directory; walking:                    Files and Directories.
                                                             (line  660)
* directory_created() (built-in function): The Postinstallation script.
                                                             (line   23)
* DirList (class in Tix):                File Selectors.     (line    6)
* dirname() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line   60)
* DirSelectBox (class in Tix):           File Selectors.     (line   26)
* DirSelectDialog (class in Tix):        File Selectors.     (line   20)
* DirTree (class in Tix):                File Selectors.     (line   13)
* dis (module):                          dis --- Disassembler for Python bytecode.
                                                             (line    6)
* dis() (in module dis):                 dis --- Disassembler for Python bytecode.
                                                             (line   40)
* dis() (in module pickletools):         pickletools --- Tools for pickle developers.
                                                             (line   20)
* disable() (bdb.Breakpoint method):     bdb --- Debugger framework.
                                                             (line   51)
* disable() (in module gc):              gc --- Garbage Collector interface.
                                                             (line   24)
* disable() (in module logging):         Module-Level Functions.
                                                             (line  130)
* disable() (profile.Profile method):    profile and cProfile Module Reference.
                                                             (line   67)
* DisableReflectionKey() (in module _winreg): _winreg -- Windows registry access.
                                                             (line  425)
* disable_interspersed_args() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   10)
* disassemble() (in module dis):         dis --- Disassembler for Python bytecode.
                                                             (line   55)
* discard (cookielib.Cookie attribute):  Cookie Objects.     (line   53)
* discard() (mailbox.Mailbox method):    Mailbox objects.    (line   74)
* discard() (mailbox.MH method):         MH.                 (line   76)
* discard() (set method):                Set Types --- set frozenset.
                                                             (line  209)
* discard_buffers() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   79)
* disco() (in module dis):               dis --- Disassembler for Python bytecode.
                                                             (line   78)
* discover() (unittest.TestLoader method): Loading and running tests.
                                                             (line   84)
* dispatch() (compiler.visitor.ASTVisitor method): Using Visitors to Walk ASTs.
                                                             (line   42)
* dispatcher (class in asyncore):        asyncore --- Asynchronous socket handler.
                                                             (line   62)
* dispatcher_with_send (class in asyncore): asyncore --- Asynchronous socket handler.
                                                             (line  222)
* dispatch_call() (bdb.Bdb method):      bdb --- Debugger framework.
                                                             (line  149)
* dispatch_exception() (bdb.Bdb method): bdb --- Debugger framework.
                                                             (line  169)
* dispatch_line() (bdb.Bdb method):      bdb --- Debugger framework.
                                                             (line  139)
* dispatch_return() (bdb.Bdb method):    bdb --- Debugger framework.
                                                             (line  159)
* displayhook() (in module sys):         sys --- System-specific parameters and functions.
                                                             (line   85)
* dist() (in module platform):           Unix Platforms.     (line    6)
* distance() (in module turtle):         Tell Turtle's state.
                                                             (line   67)
* distb() (in module dis):               dis --- Disassembler for Python bytecode.
                                                             (line   49)
* Distribution (class in distutils.core): distutils core --- Core Distutils functionality.
                                                             (line  285)
* distutils (module):                    distutils --- Building and installing Python modules.
                                                             (line    6)
* distutils.archive_util (module):       distutils archive_util --- Archiving utilities.
                                                             (line    6)
* distutils.bcppcompiler (module):       distutils bcppcompiler --- Borland Compiler.
                                                             (line    6)
* distutils.ccompiler (module):          distutils ccompiler --- CCompiler base class.
                                                             (line    6)
* distutils.cmd (module):                distutils cmd --- Abstract base class for Distutils commands.
                                                             (line    6)
* distutils.command (module):            distutils command --- Individual Distutils commands.
                                                             (line    5)
* distutils.command.bdist (module):      distutils command bdist --- Build a binary installer.
                                                             (line    5)
* distutils.command.bdist_dumb (module): distutils command bdist_dumb --- Build a "dumb" installer.
                                                             (line    5)
* distutils.command.bdist_msi (module):  distutils command bdist_msi --- Build a Microsoft Installer binary package.
                                                             (line    6)
* distutils.command.bdist_packager (module): distutils command bdist_packager --- Abstract base class for packagers.
                                                             (line    5)
* distutils.command.bdist_rpm (module):  distutils command bdist_rpm --- Build a binary distribution as a Redhat RPM and SRPM.
                                                             (line    5)
* distutils.command.bdist_wininst (module): distutils command bdist_wininst --- Build a Windows installer.
                                                             (line    5)
* distutils.command.build (module):      distutils command build --- Build all files of a package.
                                                             (line    5)
* distutils.command.build_clib (module): distutils command build_clib --- Build any C libraries in a package.
                                                             (line    5)
* distutils.command.build_ext (module):  distutils command build_ext --- Build any extensions in a package.
                                                             (line    5)
* distutils.command.build_py (module):   distutils command build_py --- Build the py/ pyc files of a package.
                                                             (line    5)
* distutils.command.build_scripts (module): distutils command build_scripts --- Build the scripts of a package.
                                                             (line    5)
* distutils.command.check (module):      distutils command check --- Check the meta-data of a package.
                                                             (line    6)
* distutils.command.clean (module):      distutils command clean --- Clean a package build area.
                                                             (line    6)
* distutils.command.config (module):     distutils command config --- Perform package configuration.
                                                             (line    5)
* distutils.command.install (module):    distutils command install --- Install a package.
                                                             (line    5)
* distutils.command.install_data (module): distutils command install_data --- Install data files from a package.
                                                             (line    5)
* distutils.command.install_headers (module): distutils command install_headers --- Install C/C++ header files from a package.
                                                             (line    5)
* distutils.command.install_lib (module): distutils command install_lib --- Install library files from a package.
                                                             (line    5)
* distutils.command.install_scripts (module): distutils command install_scripts --- Install script files from a package.
                                                             (line    5)
* distutils.command.register (module):   distutils command register --- Register a module with the Python Package Index.
                                                             (line    6)
* distutils.command.sdist (module):      distutils command sdist --- Build a source distribution.
                                                             (line    5)
* distutils.core (module):               distutils core --- Core Distutils functionality.
                                                             (line    6)
* distutils.cygwinccompiler (module):    distutils cygwincompiler --- Cygwin Compiler.
                                                             (line    6)
* distutils.debug (module):              distutils debug --- Distutils debug mode.
                                                             (line    6)
* distutils.dep_util (module):           distutils dep_util --- Dependency checking.
                                                             (line    6)
* distutils.dir_util (module):           distutils dir_util --- Directory tree operations.
                                                             (line    6)
* distutils.dist (module):               distutils dist --- The Distribution class.
                                                             (line    6)
* distutils.emxccompiler (module):       distutils emxccompiler --- OS/2 EMX Compiler.
                                                             (line    6)
* distutils.errors (module):             distutils errors --- Distutils exceptions.
                                                             (line    6)
* distutils.extension (module):          distutils extension --- The Extension class.
                                                             (line    6)
* distutils.fancy_getopt (module):       distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line    6)
* distutils.filelist (module):           distutils filelist --- The FileList class.
                                                             (line    6)
* distutils.file_util (module):          distutils file_util --- Single file operations.
                                                             (line    6)
* distutils.log (module):                distutils log --- Simple PEP 282-style logging.
                                                             (line    5)
* distutils.msvccompiler (module):       distutils msvccompiler --- Microsoft Compiler.
                                                             (line    6)
* distutils.spawn (module):              distutils spawn --- Spawn a sub-process.
                                                             (line    6)
* distutils.sysconfig (module):          distutils sysconfig --- System configuration information.
                                                             (line    6)
* distutils.text_file (module):          distutils text_file --- The TextFile class.
                                                             (line    6)
* distutils.unixccompiler (module):      distutils unixccompiler --- Unix C Compiler.
                                                             (line    6)
* distutils.util (module):               distutils util --- Miscellaneous other utility functions.
                                                             (line    6)
* distutils.version (module):            distutils version --- Version number classes.
                                                             (line    5)
* DISTUTILS_DEBUG:                       Debugging the setup script.
                                                             (line   19)
* dither2grey2() (in module imageop):    imageop --- Manipulate raw image data.
                                                             (line   77)
* dither2mono() (in module imageop):     imageop --- Manipulate raw image data.
                                                             (line   54)
* div() (in module operator):            operator --- Standard operators as functions.
                                                             (line   90)
* divide() (decimal.Context method):     Context objects.    (line  270)
* divide_int() (decimal.Context method): Context objects.    (line  274)
* division:                              Binary arithmetic operations.
                                                             (line   23)
* DivisionByZero (class in decimal):     Signals.            (line   33)
* divmod() (built-in function):          Built-in Functions. (line  381)
* divmod() (decimal.Context method):     Context objects.    (line  278)
* dl (module):                           dl --- Call C functions in shared objects.
                                                             (line    6)
* DllCanUnloadNow() (in module ctypes):  Utility functions.  (line   75)
* DllGetClassObject() (in module ctypes): Utility functions. (line   81)
* dllhandle (in module sys):             sys --- System-specific parameters and functions.
                                                             (line   80)
* dngettext() (in module gettext):       GNU gettext API.    (line   92)
* DocCGIXMLRPCRequestHandler (class in DocXMLRPCServer): DocXMLRPCServer --- Self-documenting XML-RPC server.
                                                             (line   26)
* DocFileSuite() (in module doctest):    Unittest API.       (line   30)
* doCleanups() (unittest.TestCase method): Test cases.       (line  613)
* docmd() (smtplib.SMTP method):         SMTP Objects.       (line   14)
* docstring:                             Class definitions.  (line    6)
* docstring <1>:                         Glossary.           (line  207)
* docstring (doctest.DocTest attribute): DocTest Objects.    (line   51)
* docstrings:                            Defining Functions. (line   20)
* docstrings <1>:                        Documentation Strings.
                                                             (line    6)
* DocTest (class in doctest):            DocTest Objects.    (line    6)
* doctest (module):                      doctest --- Test interactive Python examples.
                                                             (line    6)
* DocTestFailure:                        Debugging.          (line  198)
* DocTestFinder (class in doctest):      DocTestFinder objects.
                                                             (line    6)
* DocTestParser (class in doctest):      DocTestParser objects.
                                                             (line    6)
* DocTestRunner (class in doctest):      DocTestRunner objects.
                                                             (line    6)
* DocTestSuite() (in module doctest):    Unittest API.       (line  120)
* doctype() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   39)
* doctype() (xml.etree.ElementTree.XMLParser method): XMLParser Objects.
                                                             (line   21)
* documentation string:                  The standard type hierarchy.
                                                             (line  696)
* documentation strings:                 Defining Functions. (line   20)
* documentation strings <1>:             Documentation Strings.
                                                             (line    6)
* documentation; generation:             pydoc --- Documentation generator and online help system.
                                                             (line    8)
* documentation; online:                 pydoc --- Documentation generator and online help system.
                                                             (line    8)
* documentElement (xml.dom.Document attribute): Document Objects.
                                                             (line   10)
* DocXMLRPCRequestHandler (class in DocXMLRPCServer): DocXMLRPCServer --- Self-documenting XML-RPC server.
                                                             (line   31)
* DocXMLRPCServer (class in DocXMLRPCServer): DocXMLRPCServer --- Self-documenting XML-RPC server.
                                                             (line   19)
* DocXMLRPCServer (module):              DocXMLRPCServer --- Self-documenting XML-RPC server.
                                                             (line    6)
* doc_header (cmd.Cmd attribute):        Cmd Objects.        (line  140)
* DomainLiberal (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  158)
* DomainRFC2965Match (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  151)
* DomainStrict (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  163)
* DomainStrictNoDots (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  138)
* DomainStrictNonDomain (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  144)
* domain_initial_dot (cookielib.Cookie attribute): Cookie Objects.
                                                             (line   87)
* domain_return_ok() (cookielib.CookiePolicy method): CookiePolicy Objects.
                                                             (line   27)
* domain_specified (cookielib.Cookie attribute): Cookie Objects.
                                                             (line   83)
* DOMEventStream (class in xml.dom.pulldom): xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   24)
* DOMException:                          Exceptions<6>.      (line   20)
* DomstringSizeErr:                      Exceptions<6>.      (line   25)
* done() (in module turtle):             Using events.       (line   82)
* done() (xdrlib.Unpacker method):       Unpacker Objects.   (line   26)
* DONT_ACCEPT_BLANKLINE (in module doctest): Option Flags.   (line   27)
* DONT_ACCEPT_TRUE_FOR_1 (in module doctest): Option Flags.  (line   15)
* dont_write_bytecode (in module sys):   sys --- System-specific parameters and functions.
                                                             (line   95)
* doRollover() (logging.handlers.RotatingFileHandler method): RotatingFileHandler.
                                                             (line   36)
* doRollover() (logging.handlers.TimedRotatingFileHandler method): TimedRotatingFileHandler.
                                                             (line   73)
* DOT (in module token):                 token --- Constants used with Python parse trees.
                                                             (line   40)
* dot() (in module turtle):              Turtle motion.      (line  209)
* DOTALL (in module re):                 Module Contents.    (line   69)
* doublequote (csv.Dialect attribute):   Dialects and Formatting Parameters.
                                                             (line   24)
* DOUBLESLASH (in module token):         token --- Constants used with Python parse trees.
                                                             (line   40)
* DOUBLESLASHEQUAL (in module token):    token --- Constants used with Python parse trees.
                                                             (line   40)
* DOUBLESTAR (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* DOUBLESTAREQUAL (in module token):     token --- Constants used with Python parse trees.
                                                             (line   40)
* doupdate() (in module curses):         Functions<2>.       (line   88)
* down() (in module turtle):             Drawing state.      (line    6)
* do_activate() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   42)
* do_activate() (FrameWork.Window method): Window Objects<2>.
                                                             (line   34)
* do_char() (FrameWork.Application method): Application Objects.
                                                             (line   62)
* do_clear() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  226)
* do_command() (curses.textpad.Textbox method): Textbox objects.
                                                             (line   29)
* do_contentclick() (FrameWork.Window method): Window Objects<2>.
                                                             (line   24)
* do_controlhit() (FrameWork.ControlsWindow method): ControlsWindow Object.
                                                             (line    9)
* do_controlhit() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   53)
* do_dialogevent() (FrameWork.Application method): Application Objects.
                                                             (line   69)
* do_forms() (in module fl):             Functions Defined in Module fl.
                                                             (line   15)
* do_GET() (SimpleHTTPServer.SimpleHTTPRequestHandler method): SimpleHTTPServer --- Simple HTTP request handler.
                                                             (line   54)
* do_handshake() (ssl.SSLSocket method): SSLSocket Objects.  (line   96)
* do_HEAD() (SimpleHTTPServer.SimpleHTTPRequestHandler method): SimpleHTTPServer --- Simple HTTP request handler.
                                                             (line   47)
* do_itemhit() (FrameWork.DialogWindow method): DialogWindow Objects.
                                                             (line   14)
* do_POST() (CGIHTTPServer.CGIHTTPRequestHandler method): CGIHTTPServer --- CGI-capable HTTP request handler.
                                                             (line   55)
* do_postresize() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   48)
* do_postresize() (FrameWork.Window method): Window Objects<2>.
                                                             (line   19)
* do_update() (FrameWork.Window method): Window Objects<2>.  (line   30)
* dropwhile() (in module itertools):     Itertool functions. (line  193)
* drop_whitespace (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  134)
* dst() (datetime.datetime method):      datetime Objects.   (line  340)
* dst() (datetime.time method):          time Objects.       (line  138)
* dst() (datetime.tzinfo method):        tzinfo Objects.     (line   53)
* DTDHandler (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   22)
* duck-typing:                           Glossary.           (line  216)
* dumbdbm (module):                      dumbdbm --- Portable DBM implementation.
                                                             (line    6)
* DumbWriter (class in formatter):       Writer Implementations.
                                                             (line   22)
* dummy_thread (module):                 dummy_thread --- Drop-in replacement for the thread module.
                                                             (line    6)
* dummy_threading (module):              dummy_threading --- Drop-in replacement for the threading module.
                                                             (line    6)
* dump() (in module ast):                ast Helpers.        (line  138)
* dump() (in module json):               Basic Usage.        (line    6)
* dump() (in module marshal):            marshal --- Internal Python object serialization.
                                                             (line   57)
* dump() (in module pickle):             Usage.              (line   32)
* dump() (in module xml.etree.ElementTree): Functions<4>.    (line   14)
* dump() (pickle.Pickler method):        Usage.              (line  119)
* dumps() (in module json):              Basic Usage.        (line   73)
* dumps() (in module marshal):           marshal --- Internal Python object serialization.
                                                             (line   85)
* dumps() (in module pickle):            Usage.              (line   63)
* dumps() (in module xmlrpclib):         Convenience Functions.
                                                             (line   11)
* dump_address_pair() (in module rfc822): rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   82)
* dump_stats() (profile.Profile method): profile and cProfile Module Reference.
                                                             (line   81)
* dump_stats() (pstats.Stats method):    The Stats Class.    (line   58)
* dup() (in module os):                  File Descriptor Operations.
                                                             (line   49)
* dup() (posixfile.posixfile method):    posixfile --- File-like objects with locking support.
                                                             (line   75)
* dup2() (in module os):                 File Descriptor Operations.
                                                             (line   55)
* dup2() (posixfile.posixfile method):   posixfile --- File-like objects with locking support.
                                                             (line   81)
* DuplicateSectionError:                 ConfigParser --- Configuration file parser.
                                                             (line  148)
* DUP_TOP (opcode):                      Python Bytecode Instructions.
                                                             (line   35)
* DUP_TOPX (opcode):                     Python Bytecode Instructions.
                                                             (line  395)
* dwFlags (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   14)
* DynLoadSuffixImporter (class in imputil): imputil --- Import utilities.
                                                             (line   91)
* D_FMT (in module locale):              locale --- Internationalization services.
                                                             (line  186)
* D_T_FMT (in module locale):            locale --- Internationalization services.
                                                             (line  180)
* e (in module cmath):                   Constants<2>.       (line   10)
* e (in module math):                    Constants.          (line   10)
* E2BIG (in module errno):               errno --- Standard errno system symbols.
                                                             (line   49)
* EACCES (in module errno):              errno --- Standard errno system symbols.
                                                             (line   73)
* EADDRINUSE (in module errno):          errno --- Standard errno system symbols.
                                                             (line  413)
* EADDRNOTAVAIL (in module errno):       errno --- Standard errno system symbols.
                                                             (line  417)
* EADV (in module errno):                errno --- Standard errno system symbols.
                                                             (line  293)
* EAFNOSUPPORT (in module errno):        errno --- Standard errno system symbols.
                                                             (line  409)
* EAFP:                                  Glossary.           (line  229)
* EAGAIN (in module errno):              errno --- Standard errno system symbols.
                                                             (line   65)
* EALREADY (in module errno):            errno --- Standard errno system symbols.
                                                             (line  477)
* east_asian_width() (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line   63)
* EasyDialogs (module):                  EasyDialogs --- Basic Macintosh dialogs.
                                                             (line    6)
* EBADE (in module errno):               errno --- Standard errno system symbols.
                                                             (line  229)
* EBADF (in module errno):               errno --- Standard errno system symbols.
                                                             (line   57)
* EBADFD (in module errno):              errno --- Standard errno system symbols.
                                                             (line  329)
* EBADMSG (in module errno):             errno --- Standard errno system symbols.
                                                             (line  317)
* EBADR (in module errno):               errno --- Standard errno system symbols.
                                                             (line  233)
* EBADRQC (in module errno):             errno --- Standard errno system symbols.
                                                             (line  245)
* EBADSLT (in module errno):             errno --- Standard errno system symbols.
                                                             (line  249)
* EBCDIC:                                The standard type hierarchy.
                                                             (line  166)
* EBFONT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  257)
* EBUSY (in module errno):               errno --- Standard errno system symbols.
                                                             (line   85)
* ECHILD (in module errno):              errno --- Standard errno system symbols.
                                                             (line   61)
* echo() (in module curses):             Functions<2>.       (line  104)
* echochar() (curses.window method):     Window Objects.     (line  182)
* ECHRNG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  197)
* ECOMM (in module errno):               errno --- Standard errno system symbols.
                                                             (line  301)
* ECONNABORTED (in module errno):        errno --- Standard errno system symbols.
                                                             (line  433)
* ECONNREFUSED (in module errno):        errno --- Standard errno system symbols.
                                                             (line  465)
* ECONNRESET (in module errno):          errno --- Standard errno system symbols.
                                                             (line  437)
* EDEADLK (in module errno):             errno --- Standard errno system symbols.
                                                             (line  161)
* EDEADLOCK (in module errno):           errno --- Standard errno system symbols.
                                                             (line  253)
* EDESTADDRREQ (in module errno):        errno --- Standard errno system symbols.
                                                             (line  377)
* edit() (curses.textpad.Textbox method): Textbox objects.   (line   18)
* EDOM (in module errno):                errno --- Standard errno system symbols.
                                                             (line  153)
* EDOTDOT (in module errno):             errno --- Standard errno system symbols.
                                                             (line  313)
* EDQUOT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  509)
* EEXIST (in module errno):              errno --- Standard errno system symbols.
                                                             (line   89)
* EFAULT (in module errno):              errno --- Standard errno system symbols.
                                                             (line   77)
* EFBIG (in module errno):               errno --- Standard errno system symbols.
                                                             (line  129)
* effective() (in module bdb):           bdb --- Debugger framework.
                                                             (line  380)
* ehlo() (smtplib.SMTP method):          SMTP Objects.       (line   53)
* ehlo_or_helo_if_needed() (smtplib.SMTP method): SMTP Objects.
                                                             (line   70)
* EHOSTDOWN (in module errno):           errno --- Standard errno system symbols.
                                                             (line  469)
* EHOSTUNREACH (in module errno):        errno --- Standard errno system symbols.
                                                             (line  473)
* EIDRM (in module errno):               errno --- Standard errno system symbols.
                                                             (line  193)
* EILSEQ (in module errno):              errno --- Standard errno system symbols.
                                                             (line  357)
* EINPROGRESS (in module errno):         errno --- Standard errno system symbols.
                                                             (line  481)
* EINTR (in module errno):               errno --- Standard errno system symbols.
                                                             (line   37)
* EINVAL (in module errno):              errno --- Standard errno system symbols.
                                                             (line  109)
* EIO (in module errno):                 errno --- Standard errno system symbols.
                                                             (line   41)
* EISCONN (in module errno):             errno --- Standard errno system symbols.
                                                             (line  445)
* EISDIR (in module errno):              errno --- Standard errno system symbols.
                                                             (line  105)
* EISNAM (in module errno):              errno --- Standard errno system symbols.
                                                             (line  501)
* EL2HLT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  225)
* EL2NSYNC (in module errno):            errno --- Standard errno system symbols.
                                                             (line  201)
* EL3HLT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  205)
* EL3RST (in module errno):              errno --- Standard errno system symbols.
                                                             (line  209)
* Element (class in xml.etree.ElementTree): Element Objects. (line    6)
* ElementDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  235)
* elements() (collections.Counter method): Counter objects.  (line   59)
* ElementTree (class in xml.etree.ElementTree): ElementTree Objects.
                                                             (line    6)
* element_create() (ttk.Style method):   Ttk Styling.        (line  132)
* element_names() (ttk.Style method):    Ttk Styling.        (line  184)
* element_options() (ttk.Style method):  Ttk Styling.        (line  188)
* ELIBACC (in module errno):             errno --- Standard errno system symbols.
                                                             (line  337)
* ELIBBAD (in module errno):             errno --- Standard errno system symbols.
                                                             (line  341)
* ELIBEXEC (in module errno):            errno --- Standard errno system symbols.
                                                             (line  353)
* ELIBMAX (in module errno):             errno --- Standard errno system symbols.
                                                             (line  349)
* ELIBSCN (in module errno):             errno --- Standard errno system symbols.
                                                             (line  345)
* Ellinghouse, Lance:                    uu --- Encode and decode uuencode files.
                                                             (line   20)
* Ellipsis (built-in variable):          Built-in Constants. (line   36)
* ELLIPSIS (in module doctest):          Option Flags.       (line   46)
* EllipsisType (in module types):        types --- Names for built-in types.
                                                             (line  167)
* ELNRNG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  213)
* ELOOP (in module errno):               errno --- Standard errno system symbols.
                                                             (line  181)
* email (module):                        email --- An email and MIME handling package.
                                                             (line    6)
* email.charset (module):                email charset Representing character sets.
                                                             (line    6)
* email.encoders (module):               email encoders Encoders.
                                                             (line    6)
* email.errors (module):                 email errors Exception and Defect classes.
                                                             (line    6)
* email.generator (module):              email generator Generating MIME documents.
                                                             (line    6)
* email.header (module):                 email header Internationalized headers.
                                                             (line    6)
* email.iterators (module):              email iterators Iterators.
                                                             (line    6)
* email.message (module):                email message Representing an email message.
                                                             (line    6)
* email.mime (module):                   email mime Creating email and MIME objects from scratch.
                                                             (line    6)
* email.parser (module):                 email parser Parsing email messages.
                                                             (line    6)
* email.utils (module):                  email utils Miscellaneous utilities.
                                                             (line    6)
* EMFILE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  117)
* emit() (logging.FileHandler method):   FileHandler.        (line   26)
* emit() (logging.Handler method):       Handler Objects.    (line   98)
* emit() (logging.handlers.BufferingHandler method): MemoryHandler.
                                                             (line   23)
* emit() (logging.handlers.DatagramHandler method): DatagramHandler.
                                                             (line   16)
* emit() (logging.handlers.HTTPHandler method): HTTPHandler. (line   25)
* emit() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   38)
* emit() (logging.handlers.RotatingFileHandler method): RotatingFileHandler.
                                                             (line   40)
* emit() (logging.handlers.SMTPHandler method): SMTPHandler. (line   34)
* emit() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   20)
* emit() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line   43)
* emit() (logging.handlers.TimedRotatingFileHandler method): TimedRotatingFileHandler.
                                                             (line   77)
* emit() (logging.handlers.WatchedFileHandler method): WatchedFileHandler.
                                                             (line   36)
* emit() (logging.NullHandler method):   NullHandler.        (line   16)
* emit() (logging.StreamHandler method): StreamHandler.      (line   17)
* EMLINK (in module errno):              errno --- Standard errno system symbols.
                                                             (line  145)
* Empty:                                 Queue --- A synchronized queue class.
                                                             (line   64)
* empty() (multiprocessing.multiprocessing.queues.SimpleQueue method): Pipes and Queues.
                                                             (line  194)
* empty() (multiprocessing.Queue method): Pipes and Queues.  (line  108)
* empty() (Queue.Queue method):          Queue Objects.      (line   15)
* empty() (sched.scheduler method):      Scheduler Objects.  (line   34)
* empty; list:                           List displays.      (line   18)
* empty; tuple:                          The standard type hierarchy.
                                                             (line  192)
* empty; tuple <1>:                      Parenthesized forms.
                                                             (line   17)
* emptyline() (cmd.Cmd method):          Cmd Objects.        (line   68)
* EMPTY_NAMESPACE (in module xml.dom):   Module Contents<3>. (line   35)
* EMSGSIZE (in module errno):            errno --- Standard errno system symbols.
                                                             (line  381)
* EMULTIHOP (in module errno):           errno --- Standard errno system symbols.
                                                             (line  309)
* enable() (bdb.Breakpoint method):      bdb --- Debugger framework.
                                                             (line   47)
* enable() (in module cgitb):            cgitb --- Traceback manager for CGI scripts.
                                                             (line   28)
* enable() (in module gc):               gc --- Garbage Collector interface.
                                                             (line   20)
* enable() (profile.Profile method):     profile and cProfile Module Reference.
                                                             (line   63)
* EnableReflectionKey() (in module _winreg): _winreg -- Windows registry access.
                                                             (line  440)
* enable_callback_tracebacks() (in module sqlite3): Module functions and constants.
                                                             (line  158)
* enable_interspersed_args() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   31)
* enable_load_extension() (sqlite3.Connection method): Connection Objects.
                                                             (line  205)
* enable_traversal() (ttk.Notebook method): ttk Notebook.    (line   75)
* ENABLE_USER_SITE (in module site):     site --- Site-specific configuration hook.
                                                             (line   96)
* ENAMETOOLONG (in module errno):        errno --- Standard errno system symbols.
                                                             (line  165)
* ENAVAIL (in module errno):             errno --- Standard errno system symbols.
                                                             (line  497)
* enclose() (curses.window method):      Window Objects.     (line  187)
* encode() (codecs.Codec method):        Codec Objects.      (line    9)
* encode() (codecs.IncrementalEncoder method): IncrementalEncoder Objects.
                                                             (line   46)
* encode() (email.header.Header method): email header Internationalized headers.
                                                             (line  111)
* encode() (in module base64):           base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line  125)
* encode() (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line   12)
* encode() (in module mimetools):        mimetools --- Tools for parsing MIME messages.
                                                             (line   40)
* encode() (in module quopri):           quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   31)
* encode() (in module uu):               uu --- Encode and decode uuencode files.
                                                             (line   25)
* encode() (json.JSONEncoder method):    Encoders and Decoders.
                                                             (line  215)
* encode() (str method):                 String Methods<2>.  (line   54)
* encode() (xmlrpclib.Binary method):    Binary Objects.     (line   22)
* encode() (xmlrpclib.Boolean method):   Boolean Objects.    (line   15)
* encode() (xmlrpclib.DateTime method):  DateTime Objects.   (line   15)
* EncodedFile() (in module codecs):      codecs --- Codec registry and base classes.
                                                             (line  265)
* encoded_header_len() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  147)
* encodePriority() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line   49)
* encodestring() (in module base64):     base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line  134)
* encodestring() (in module quopri):     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   48)
* encode_7or8bit() (in module email.encoders): email encoders Encoders.
                                                             (line   41)
* encode_base64() (in module email.encoders): email encoders Encoders.
                                                             (line   33)
* encode_noop() (in module email.encoders): email encoders Encoders.
                                                             (line   47)
* encode_quopri() (in module email.encoders): email encoders Encoders.
                                                             (line   26)
* encode_rfc2231() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line  111)
* encode_threshold (SimpleXMLRPCServer.SimpleXMLRPCRequestHandler attribute): SimpleXMLRPCServer Objects.
                                                             (line   70)
* encoding (exceptions.UnicodeError attribute): Built-in Exceptions.
                                                             (line  375)
* encoding (file attribute):             File Objects.       (line  225)
* ENCODING (in module tarfile):          tarfile --- Read and write tar archive files.
                                                             (line  214)
* encoding (io.TextIOBase attribute):    Text I/O.           (line   17)
* encoding declarations (source file):   Encoding declarations.
                                                             (line    6)
* encodings.idna (module):               encodings idna --- Internationalized Domain Names in Applications.
                                                             (line    6)
* encodings.utf_8_sig (module):          encodings utf_8_sig --- UTF-8 codec with BOM signature.
                                                             (line    6)
* encodings_map (in module mimetypes):   mimetypes --- Map filenames to MIME types.
                                                             (line  127)
* encodings_map (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   32)
* end (exceptions.UnicodeError attribute): Built-in Exceptions.
                                                             (line  391)
* end() (re.MatchObject method):         Match Objects.      (line  119)
* end() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   25)
* EndCdataSectionHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  339)
* EndDoctypeDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  230)
* endDocument() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   40)
* endElement() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   95)
* EndElementHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  263)
* endElementNS() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  121)
* endheaders() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   79)
* ENDMARKER (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* EndNamespaceDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  318)
* endpick() (in module gl):              gl --- Graphics Library interface.
                                                             (line  106)
* endpos (re.MatchObject attribute):     Match Objects.      (line  159)
* endPrefixMapping() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   73)
* endselect() (in module gl):            gl --- Graphics Library interface.
                                                             (line  106)
* endswith() (str method):               String Methods<2>.  (line   73)
* endwin() (in module curses):           Functions<2>.       (line  109)
* end_fill() (in module turtle):         Filling.            (line   26)
* END_FINALLY (opcode):                  Python Bytecode Instructions.
                                                             (line  326)
* end_group() (fl.form method):          Form Objects.       (line   52)
* end_headers() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  197)
* end_marker() (multifile.MultiFile method): MultiFile Objects.
                                                             (line   82)
* end_paragraph() (formatter.formatter method): The Formatter Interface.
                                                             (line   26)
* end_poly() (in module turtle):         Special Turtle methods.
                                                             (line   11)
* ENETDOWN (in module errno):            errno --- Standard errno system symbols.
                                                             (line  421)
* ENETRESET (in module errno):           errno --- Standard errno system symbols.
                                                             (line  429)
* ENETUNREACH (in module errno):         errno --- Standard errno system symbols.
                                                             (line  425)
* ENFILE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  113)
* ENOANO (in module errno):              errno --- Standard errno system symbols.
                                                             (line  241)
* ENOBUFS (in module errno):             errno --- Standard errno system symbols.
                                                             (line  441)
* ENOCSI (in module errno):              errno --- Standard errno system symbols.
                                                             (line  221)
* ENODATA (in module errno):             errno --- Standard errno system symbols.
                                                             (line  265)
* ENODEV (in module errno):              errno --- Standard errno system symbols.
                                                             (line   97)
* ENOENT (in module errno):              errno --- Standard errno system symbols.
                                                             (line   29)
* ENOEXEC (in module errno):             errno --- Standard errno system symbols.
                                                             (line   53)
* ENOLCK (in module errno):              errno --- Standard errno system symbols.
                                                             (line  169)
* ENOLINK (in module errno):             errno --- Standard errno system symbols.
                                                             (line  289)
* ENOMEM (in module errno):              errno --- Standard errno system symbols.
                                                             (line   69)
* ENOMSG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  189)
* ENONET (in module errno):              errno --- Standard errno system symbols.
                                                             (line  277)
* ENOPKG (in module errno):              errno --- Standard errno system symbols.
                                                             (line  281)
* ENOPROTOOPT (in module errno):         errno --- Standard errno system symbols.
                                                             (line  389)
* ENOSPC (in module errno):              errno --- Standard errno system symbols.
                                                             (line  133)
* ENOSR (in module errno):               errno --- Standard errno system symbols.
                                                             (line  273)
* ENOSTR (in module errno):              errno --- Standard errno system symbols.
                                                             (line  261)
* ENOSYS (in module errno):              errno --- Standard errno system symbols.
                                                             (line  173)
* ENOTBLK (in module errno):             errno --- Standard errno system symbols.
                                                             (line   81)
* ENOTCONN (in module errno):            errno --- Standard errno system symbols.
                                                             (line  449)
* ENOTDIR (in module errno):             errno --- Standard errno system symbols.
                                                             (line  101)
* ENOTEMPTY (in module errno):           errno --- Standard errno system symbols.
                                                             (line  177)
* ENOTNAM (in module errno):             errno --- Standard errno system symbols.
                                                             (line  493)
* ENOTSOCK (in module errno):            errno --- Standard errno system symbols.
                                                             (line  373)
* ENOTTY (in module errno):              errno --- Standard errno system symbols.
                                                             (line  121)
* ENOTUNIQ (in module errno):            errno --- Standard errno system symbols.
                                                             (line  325)
* enter() (sched.scheduler method):      Scheduler Objects.  (line   22)
* enterabs() (sched.scheduler method):   Scheduler Objects.  (line    9)
* entities (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   38)
* EntityDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  289)
* entitydefs (in module htmlentitydefs): htmlentitydefs --- Definitions of HTML general entities.
                                                             (line   22)
* EntityResolver (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   29)
* Enum (class in aetypes):               aetypes --- AppleEvent objects.
                                                             (line   41)
* enumerate() (built-in function):       Built-in Functions. (line  396)
* enumerate() (in module fm):            fm --- Font Manager interface.
                                                             (line   30)
* enumerate() (in module threading):     threading --- Higher-level threading interface.
                                                             (line   67)
* EnumKey() (in module _winreg):         _winreg -- Windows registry access.
                                                             (line  152)
* enumsubst() (in module aetools):       aetools --- OSA client support.
                                                             (line   47)
* EnumValue() (in module _winreg):       _winreg -- Windows registry access.
                                                             (line  167)
* environ (in module os):                Process Parameters. (line    9)
* environ (in module posix):             Notable Module Contents.
                                                             (line    9)
* environment:                           Naming and binding. (line   42)
* environment variable; %PATH%:          Finding the Python executable.
                                                             (line    8)
* environment variable; <protocol>_proxy: urllib2 --- extensible library for opening URLs.
                                                             (line  204)
* environment variable; APPDATA:         PEP 370 Per-user site-packages Directory.
                                                             (line   26)
* environment variable; AUDIODEV:        ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   51)
* environment variable; BROWSER:         webbrowser --- Convenient Web-browser controller.
                                                             (line   20)
* environment variable; BROWSER <1>:     webbrowser --- Convenient Web-browser controller.
                                                             (line   93)
* environment variable; CC:              New Improved and Deprecated Modules<2>.
                                                             (line   58)
* environment variable; CFLAGS:          New Improved and Deprecated Modules<2>.
                                                             (line   58)
* environment variable; CFLAGS <1>:      Tweaking compiler/linker flags.
                                                             (line   66)
* environment variable; CFLAGS <2>:      Tweaking compiler/linker flags.
                                                             (line   67)
* environment variable; COLUMNS:         Functions<2>.       (line  529)
* environment variable; COLUMNS <1>:     Functions<2>.       (line  532)
* environment variable; COMSPEC:         Process Management. (line  479)
* environment variable; COMSPEC <1>:     Popen Constructor.  (line   74)
* environment variable; CPP:             New Improved and Deprecated Modules<2>.
                                                             (line   59)
* environment variable; CPPFLAGS:        New Improved and Deprecated Modules<2>.
                                                             (line   59)
* environment variable; DISTUTILS_DEBUG: Debugging the setup script.
                                                             (line   19)
* environment variable; exec_prefix:     Python-related paths and files.
                                                             (line    7)
* environment variable; exec_prefix <1>: Include Files.      (line   32)
* environment variable; exec_prefix <2>: Include Files.      (line   43)
* environment variable; ftp_proxy:       High-level interface.
                                                             (line   61)
* environment variable; HOME:            os path --- Common pathname manipulations.
                                                             (line   87)
* environment variable; HOME <1>:        os path --- Common pathname manipulations.
                                                             (line   93)
* environment variable; HOME <2>:        user --- User-specific configuration hook.
                                                             (line   26)
* environment variable; HOME <3>:        distutils util --- Miscellaneous other utility functions.
                                                             (line   82)
* environment variable; HOME <4>:        Location and names of config files.
                                                             (line   50)
* environment variable; HOME <5>:        Location and names of config files.
                                                             (line   67)
* environment variable; HOMEDRIVE:       os path --- Common pathname manipulations.
                                                             (line   94)
* environment variable; HOMEDRIVE <1>:   Location and names of config files.
                                                             (line   68)
* environment variable; HOMEPATH:        os path --- Common pathname manipulations.
                                                             (line   94)
* environment variable; HOMEPATH <1>:    Location and names of config files.
                                                             (line   68)
* environment variable; http_proxy:      High-level interface.
                                                             (line   61)
* environment variable; http_proxy <1>:  urllib2 --- extensible library for opening URLs.
                                                             (line   59)
* environment variable; http_proxy <2>:  Examples<13>.       (line   50)
* environment variable; http_proxy <3>:  Basic Authentication.
                                                             (line   62)
* environment variable; IDLESTARTUP:     Startup.            (line    7)
* environment variable; KDEDIR:          webbrowser --- Convenient Web-browser controller.
                                                             (line  167)
* environment variable; LANG:            GNU gettext API.    (line   21)
* environment variable; LANG <1>:        Class-based API.    (line   26)
* environment variable; LANG <2>:        locale --- Internationalization services.
                                                             (line   45)
* environment variable; LANG <3>:        locale --- Internationalization services.
                                                             (line  301)
* environment variable; LANG <4>:        locale --- Internationalization services.
                                                             (line  305)
* environment variable; LANGUAGE:        GNU gettext API.    (line   20)
* environment variable; LANGUAGE <1>:    Class-based API.    (line   25)
* environment variable; LC_ALL:          GNU gettext API.    (line   20)
* environment variable; LC_ALL <1>:      Class-based API.    (line   25)
* environment variable; LC_MESSAGES:     GNU gettext API.    (line   20)
* environment variable; LC_MESSAGES <1>: Class-based API.    (line   26)
* environment variable; LDCXXSHARED:     Build and C API Changes.
                                                             (line  154)
* environment variable; LDFLAGS:         New Improved and Deprecated Modules<2>.
                                                             (line   59)
* environment variable; LINES:           Functions<2>.       (line  123)
* environment variable; LINES <1>:       Functions<2>.       (line  529)
* environment variable; LINES <2>:       Functions<2>.       (line  531)
* environment variable; LNAME:           getpass --- Portable password input.
                                                             (line   41)
* environment variable; LOGNAME:         Process Parameters. (line  119)
* environment variable; LOGNAME <1>:     getpass --- Portable password input.
                                                             (line   41)
* environment variable; MIXERDEV:        ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   71)
* environment variable; no_proxy:        High-level interface.
                                                             (line   71)
* environment variable; no_proxy <1>:    High-level interface.
                                                             (line  107)
* environment variable; PAGER:           Debugger Commands.  (line   46)
* environment variable; PATH:            Executable Python Scripts.
                                                             (line   11)
* environment variable; PATH <1>:        The Module Search Path.
                                                             (line   16)
* environment variable; PATH <2>:        Environment variables.
                                                             (line   27)
* environment variable; PATH <3>:        Miscellaneous.      (line   16)
* environment variable; PATH <4>:        Process Management. (line   59)
* environment variable; PATH <5>:        Process Management. (line   62)
* environment variable; PATH <6>:        Process Management. (line   65)
* environment variable; PATH <7>:        Process Management. (line  358)
* environment variable; PATH <8>:        Process Management. (line  362)
* environment variable; PATH <9>:        Process Management. (line  364)
* environment variable; PATH <10>:       Miscellaneous System Information.
                                                             (line  111)
* environment variable; PATH <11>:       webbrowser --- Convenient Web-browser controller.
                                                             (line  195)
* environment variable; PATH <12>:       Installing your CGI script on a Unix system.
                                                             (line   28)
* environment variable; PATH <13>:       Common problems and solutions.
                                                             (line   23)
* environment variable; PATH <14>:       Embedding Python.   (line   32)
* environment variable; PATH <15>:       Embedding Python.   (line   38)
* environment variable; PATH <16>:       Uploading Packages. (line   38)
* environment variable; PATH <17>:       How do I make a Python script executable on Unix?.
                                                             (line   24)
* environment variable; PATH <18>:       How do I make a Python script executable on Unix?.
                                                             (line   28)
* environment variable; PLAT:            distutils util --- Miscellaneous other utility functions.
                                                             (line   84)
* environment variable; POSIXLY_CORRECT: getopt --- C-style parser for command line options.
                                                             (line   71)
* environment variable; prefix:          Python-related paths and files.
                                                             (line    7)
* environment variable; prefix <1>:      Include Files.      (line   32)
* environment variable; prefix <2>:      Include Files.      (line   35)
* environment variable; prefix <3>:      Include Files.      (line   42)
* environment variable; PYTHON*:         Miscellaneous options.
                                                             (line   21)
* environment variable; PYTHONCASEOK:    PEP 235 Importing Modules on Case-Insensitive Platforms.
                                                             (line   17)
* environment variable; PYTHONCASEOK <1>: Environment variables.
                                                             (line   94)
* environment variable; PYTHONDEBUG:     Miscellaneous options.
                                                             (line   17)
* environment variable; PYTHONDEBUG <1>: Environment variables.
                                                             (line   69)
* environment variable; PYTHONDOCS:      pydoc --- Documentation generator and online help system.
                                                             (line   64)
* environment variable; PYTHONDONTWRITEBYTECODE: Interpreter Changes<2>.
                                                             (line   16)
* environment variable; PYTHONDONTWRITEBYTECODE <1>: New and Improved Modules<2>.
                                                             (line  625)
* environment variable; PYTHONDONTWRITEBYTECODE <2>: Miscellaneous options.
                                                             (line    9)
* environment variable; PYTHONDONTWRITEBYTECODE <3>: Environment variables.
                                                             (line   99)
* environment variable; PYTHONDONTWRITEBYTECODE <4>: sys --- System-specific parameters and functions.
                                                             (line  100)
* environment variable; PYTHONDUMPREFS:  Debug-mode variables.
                                                             (line   17)
* environment variable; PYTHONDUMPREFS <1>: Type Objects<3>. (line  126)
* environment variable; PYTHONEXECUTABLE: Environment variables.
                                                             (line  161)
* environment variable; PYTHONHASHSEED:  Miscellaneous options.
                                                             (line   98)
* environment variable; PYTHONHASHSEED <1>: Environment variables.
                                                             (line  107)
* environment variable; PYTHONHASHSEED <2>: Environment variables.
                                                             (line  113)
* environment variable; PYTHONHOME:      Miscellaneous options.
                                                             (line   22)
* environment variable; PYTHONHOME <1>:  Environment variables.
                                                             (line   11)
* environment variable; PYTHONHOME <2>:  Environment variables.
                                                             (line   19)
* environment variable; PYTHONHOME <3>:  Environment variables.
                                                             (line   21)
* environment variable; PYTHONHOME <4>:  Environment variables.
                                                             (line   38)
* environment variable; PYTHONHOME <5>:  Finding modules.    (line   31)
* environment variable; PYTHONHOME <6>:  Embedding Python.   (line   39)
* environment variable; PYTHONHOME <7>:  Embedding Python.   (line   45)
* environment variable; PYTHONHOME <8>:  Process-wide parameters.
                                                             (line  203)
* environment variable; PYTHONHOME <9>:  Process-wide parameters.
                                                             (line  214)
* environment variable; PYTHONHOME <10>: Modifying Python's Search Path.
                                                             (line   61)
* environment variable; PYTHONHOME <11>: Modifying Python's Search Path.
                                                             (line   63)
* environment variable; PYTHONINSPECT:   Other Changes and Fixes<2>.
                                                             (line   13)
* environment variable; PYTHONINSPECT <1>: Miscellaneous options.
                                                             (line   34)
* environment variable; PYTHONINSPECT <2>: Environment variables.
                                                             (line   75)
* environment variable; PYTHONIOENCODING: Interpreter Changes<2>.
                                                             (line   23)
* environment variable; PYTHONIOENCODING <1>: Environment variables.
                                                             (line  127)
* environment variable; PYTHONMALLOCSTATS: Debug-mode variables.
                                                             (line   22)
* environment variable; PYTHONNOUSERSITE: PEP 370 Per-user site-packages Directory.
                                                             (line   30)
* environment variable; PYTHONNOUSERSITE <1>: Environment variables.
                                                             (line  135)
* environment variable; PYTHONNOUSERSITE <2>: site --- Site-specific configuration hook.
                                                             (line  101)
* environment variable; PYTHONNOUSERSITE <3>: site --- Site-specific configuration hook.
                                                             (line  157)
* environment variable; PYTHONOPTIMIZE:  Miscellaneous options.
                                                             (line   41)
* environment variable; PYTHONOPTIMIZE <1>: Environment variables.
                                                             (line   63)
* environment variable; PYTHONPATH:      The Module Search Path.
                                                             (line   15)
* environment variable; PYTHONPATH <1>:  Standard Modules.   (line   33)
* environment variable; PYTHONPATH <2>:  Standard Modules.   (line   34)
* environment variable; PYTHONPATH <3>:  Miscellaneous options.
                                                             (line   21)
* environment variable; PYTHONPATH <4>:  Environment variables.
                                                             (line   24)
* environment variable; PYTHONPATH <5>:  Environment variables.
                                                             (line   32)
* environment variable; PYTHONPATH <6>:  Environment variables.
                                                             (line   39)
* environment variable; PYTHONPATH <7>:  Environment variables.
                                                             (line   42)
* environment variable; PYTHONPATH <8>:  Finding modules.    (line   17)
* environment variable; PYTHONPATH <9>:  Finding modules.    (line   39)
* environment variable; PYTHONPATH <10>: Configuration.      (line    6)
* environment variable; PYTHONPATH <11>: Installing your CGI script on a Unix system.
                                                             (line   29)
* environment variable; PYTHONPATH <12>: sys --- System-specific parameters and functions.
                                                             (line  714)
* environment variable; PYTHONPATH <13>: sys --- System-specific parameters and functions.
                                                             (line  724)
* environment variable; PYTHONPATH <14>: Embedding Python.   (line   40)
* environment variable; PYTHONPATH <15>: Embedding Python.   (line   45)
* environment variable; PYTHONPATH <16>: Modifying Python's Search Path.
                                                             (line   68)
* environment variable; PYTHONPATH <17>: Modifying Python's Search Path.
                                                             (line   69)
* environment variable; PYTHONSTARTUP:   The Interactive Startup File.
                                                             (line    8)
* environment variable; PYTHONSTARTUP <1>: Key Bindings.     (line   93)
* environment variable; PYTHONSTARTUP <2>: Miscellaneous options.
                                                             (line   31)
* environment variable; PYTHONSTARTUP <3>: Environment variables.
                                                             (line   46)
* environment variable; PYTHONSTARTUP <4>: Example<7>.       (line   10)
* environment variable; PYTHONSTARTUP <5>: rlcompleter --- Completion function for GNU readline.
                                                             (line   32)
* environment variable; PYTHONSTARTUP <6>: Startup.          (line    7)
* environment variable; PYTHONSTARTUP <7>: user --- User-specific configuration hook.
                                                             (line   11)
* environment variable; PYTHONTHREADDEBUG: Debug-mode variables.
                                                             (line   10)
* environment variable; PYTHONUNBUFFERED: Miscellaneous options.
                                                             (line  138)
* environment variable; PYTHONUNBUFFERED <1>: Environment variables.
                                                             (line   83)
* environment variable; PYTHONUSERBASE:  PEP 370 Per-user site-packages Directory.
                                                             (line   23)
* environment variable; PYTHONUSERBASE <1>: Environment variables.
                                                             (line  147)
* environment variable; PYTHONUSERBASE <2>: site --- Site-specific configuration hook.
                                                             (line  129)
* environment variable; PYTHONUSERBASE <3>: site --- Site-specific configuration hook.
                                                             (line  149)
* environment variable; PYTHONVERBOSE:   Miscellaneous options.
                                                             (line  146)
* environment variable; PYTHONVERBOSE <1>: Environment variables.
                                                             (line   88)
* environment variable; PYTHONWARNINGS:  Changes to the Handling of Deprecation Warnings.
                                                             (line   26)
* environment variable; PYTHONWARNINGS <1>: Interpreter Changes.
                                                             (line    6)
* environment variable; PYTHONWARNINGS <2>: Miscellaneous options.
                                                             (line  228)
* environment variable; PYTHONWARNINGS <3>: Environment variables.
                                                             (line  167)
* environment variable; PYTHONY2K:       Environment variables.
                                                             (line   56)
* environment variable; PYTHONY2K <1>:   time --- Time access and conversions.
                                                             (line   34)
* environment variable; PYTHONY2K <2>:   time --- Time access and conversions.
                                                             (line   36)
* environment variable; PYTHONY2K <3>:   time --- Time access and conversions.
                                                             (line  110)
* environment variable; PYTHON_DOM:      Module Contents<3>. (line   23)
* environment variable; SystemRoot:      Popen Constructor.  (line  141)
* environment variable; TCL_LIBRARY:     How do I freeze Tkinter applications?.
                                                             (line   11)
* environment variable; TEMP:            tempfile --- Generate temporary files and directories.
                                                             (line  206)
* environment variable; TERM:            Functions<2>.       (line  436)
* environment variable; TERM <1>:        Functions<2>.       (line  463)
* environment variable; TIX_LIBRARY:     Using Tix.          (line   30)
* environment variable; TK_LIBRARY:      How do I freeze Tkinter applications?.
                                                             (line   11)
* environment variable; TMP:             tempfile --- Generate temporary files and directories.
                                                             (line  208)
* environment variable; TMP <1>:         Files and Directories.
                                                             (line  594)
* environment variable; TMPDIR:          tempfile --- Generate temporary files and directories.
                                                             (line  204)
* environment variable; TMPDIR <1>:      Files and Directories.
                                                             (line  594)
* environment variable; TZ:              time --- Time access and conversions.
                                                             (line  473)
* environment variable; TZ <1>:          time --- Time access and conversions.
                                                             (line  479)
* environment variable; TZ <2>:          time --- Time access and conversions.
                                                             (line  484)
* environment variable; TZ <3>:          time --- Time access and conversions.
                                                             (line  486)
* environment variable; TZ <4>:          time --- Time access and conversions.
                                                             (line  546)
* environment variable; USER:            getpass --- Portable password input.
                                                             (line   41)
* environment variable; USERNAME:        getpass --- Portable password input.
                                                             (line   42)
* environment variable; USERPROFILE:     os path --- Common pathname manipulations.
                                                             (line   93)
* environment variable; USERPROFILE <1>: Location and names of config files.
                                                             (line   67)
* environment variable; USER_BASE:       New and Improved Modules.
                                                             (line  473)
* environment variable; Wimp$ScrapDir:   tempfile --- Generate temporary files and directories.
                                                             (line  212)
* environment variables; deleting:       Process Parameters. (line  331)
* environment variables; setting:        Process Parameters. (line  186)
* EnvironmentError:                      Built-in Exceptions.
                                                             (line   97)
* EnvironmentVarGuard (class in test.test_support): test test_support --- Utility functions for tests.
                                                             (line  256)
* ENXIO (in module errno):               errno --- Standard errno system symbols.
                                                             (line   45)
* eof (shlex.shlex attribute):           shlex Objects.      (line  175)
* EOFError:                              Built-in Exceptions.
                                                             (line  134)
* EOFError (built-in exception):         File Objects<2>.    (line  105)
* EOPNOTSUPP (in module errno):          errno --- Standard errno system symbols.
                                                             (line  401)
* EOVERFLOW (in module errno):           errno --- Standard errno system symbols.
                                                             (line  321)
* EPERM (in module errno):               errno --- Standard errno system symbols.
                                                             (line   25)
* EPFNOSUPPORT (in module errno):        errno --- Standard errno system symbols.
                                                             (line  405)
* epilogue (email.message.Message attribute): email message Representing an email message.
                                                             (line  576)
* EPIPE (in module errno):               errno --- Standard errno system symbols.
                                                             (line  149)
* epoch:                                 time --- Time access and conversions.
                                                             (line   18)
* epoll() (in module select):            select --- Waiting for I/O completion.
                                                             (line   23)
* EPROTO (in module errno):              errno --- Standard errno system symbols.
                                                             (line  305)
* EPROTONOSUPPORT (in module errno):     errno --- Standard errno system symbols.
                                                             (line  393)
* EPROTOTYPE (in module errno):          errno --- Standard errno system symbols.
                                                             (line  385)
* eq() (in module operator):             operator --- Standard operators as functions.
                                                             (line   19)
* EQEQUAL (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* EQUAL (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* ERA (in module locale):                locale --- Internationalization services.
                                                             (line  255)
* ERANGE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  157)
* erase() (curses.window method):        Window Objects.     (line  194)
* erasechar() (in module curses):        Functions<2>.       (line  113)
* ERA_D_FMT (in module locale):          locale --- Internationalization services.
                                                             (line  277)
* ERA_D_T_FMT (in module locale):        locale --- Internationalization services.
                                                             (line  272)
* ERA_T_FMT (in module locale):          locale --- Internationalization services.
                                                             (line  282)
* EREMCHG (in module errno):             errno --- Standard errno system symbols.
                                                             (line  333)
* EREMOTE (in module errno):             errno --- Standard errno system symbols.
                                                             (line  285)
* EREMOTEIO (in module errno):           errno --- Standard errno system symbols.
                                                             (line  505)
* ERESTART (in module errno):            errno --- Standard errno system symbols.
                                                             (line  361)
* erf() (in module math):                Special functions.  (line    6)
* erfc() (in module math):               Special functions.  (line   12)
* EROFS (in module errno):               errno --- Standard errno system symbols.
                                                             (line  141)
* ERR (in module curses):                Constants<3>.       (line    8)
* errcheck (ctypes._FuncPtr attribute):  Foreign functions.  (line   60)
* errcode (xmlrpclib.ProtocolError attribute): ProtocolError Objects.
                                                             (line   14)
* errmsg (xmlrpclib.ProtocolError attribute): ProtocolError Objects.
                                                             (line   18)
* errno (module):                        errno --- Standard errno system symbols.
                                                             (line    6)
* error:                                 Module Contents.    (line  259)
* error <1>:                             Functions and Exceptions.
                                                             (line    8)
* error <2>:                             copy --- Shallow and deep copy operations.
                                                             (line   22)
* Error:                                 Directory and files operations.
                                                             (line  143)
* error <3>:                             anydbm --- Generic access to DBM-style databases.
                                                             (line   54)
* error <4>:                             dbm --- Simple "database" interface.
                                                             (line   23)
* error <5>:                             gdbm --- GNU's reinterpretation of dbm.
                                                             (line   22)
* error <6>:                             dbhash --- DBM-style interface to the BSD database library.
                                                             (line   17)
* error <7>:                             dumbdbm --- Portable DBM implementation.
                                                             (line   24)
* error <8>:                             zlib --- Compression compatible with gzip.
                                                             (line   22)
* Error <1>:                             Module Contents<2>. (line  239)
* Error <2>:                             ConfigParser --- Configuration file parser.
                                                             (line  140)
* Error <3>:                             Exceptions<3>.      (line    8)
* error <9>:                             os --- Miscellaneous operating system interfaces.
                                                             (line   39)
* error <10>:                            getopt --- C-style parser for command line options.
                                                             (line   90)
* error <11>:                            Functions<2>.       (line    8)
* error <12>:                            select --- Waiting for I/O completion.
                                                             (line   16)
* error <13>:                            thread --- Multiple threads of control.
                                                             (line   28)
* error <14>:                            socket --- Low-level networking interface.
                                                             (line  101)
* Error <4>:                             Exceptions<5>.      (line    9)
* Error <5>:                             binhex --- Encode and decode binhex4 files.
                                                             (line   32)
* Error <6>:                             binascii --- Convert between binary and ASCII.
                                                             (line  136)
* Error <7>:                             uu --- Encode and decode uuencode files.
                                                             (line   46)
* error <15>:                            xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   31)
* Error <8>:                             webbrowser --- Convenient Web-browser controller.
                                                             (line   44)
* error <16>:                            audioop --- Manipulate raw audio data.
                                                             (line   21)
* error <17>:                            imageop --- Manipulate raw image data.
                                                             (line   16)
* Error <9>:                             sunau --- Read and write Sun AU files.
                                                             (line   73)
* Error <10>:                            wave --- Read and write WAV files.
                                                             (line   47)
* Error <11>:                            locale --- Internationalization services.
                                                             (line   18)
* error <18>:                            dl --- Call C functions in shared objects.
                                                             (line   49)
* error <19>:                            resource --- Resource usage information.
                                                             (line   15)
* error <20>:                            nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   57)
* error <21>:                            ic --- Access to the Mac OS X Internet Config.
                                                             (line   22)
* Error <12>:                            MacOS --- Access to Mac OS interpreter features.
                                                             (line   31)
* error <22>:                            cd --- CD-ROM access on SGI systems.
                                                             (line   56)
* error <23>:                            imgfile --- Support for SGI imglib files.
                                                             (line   16)
* error <24>:                            jpeg --- Read and write JPEG files.
                                                             (line   21)
* error <25>:                            sunaudiodev --- Access to Sun audio hardware.
                                                             (line   19)
* ERROR (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line   84)
* error handling:                        Exceptions<2>.      (line    6)
* error() (argparse.ArgumentParser method): Exiting methods. (line   11)
* error() (in module logging):           Module-Level Functions.
                                                             (line   96)
* error() (logging.Logger method):       Logger Objects.     (line  163)
* error() (mhlib.Folder method):         Folder Objects.     (line    9)
* error() (mhlib.MH method):             MH Objects.         (line    8)
* error() (urllib2.OpenerDirector method): OpenerDirector Objects.
                                                             (line   43)
* error() (xml.sax.handler.ErrorHandler method): ErrorHandler Objects.
                                                             (line   16)
* ErrorByteIndex (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  160)
* errorcode (in module errno):           errno --- Standard errno system symbols.
                                                             (line   11)
* ErrorCode (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  164)
* ErrorColumnNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  170)
* ErrorHandler (class in xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   36)
* ErrorLineNumber (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  174)
* errors:                                Exceptions<2>.      (line    6)
* errors (file attribute):               File Objects.       (line  239)
* errors (io.TextIOBase attribute):      Text I/O.           (line   22)
* errors (unittest.TestResult attribute): Loading and running tests.
                                                             (line  169)
* Errors; logging:                       logging --- Logging facility for Python.
                                                             (line    6)
* ErrorString() (in module xml.parsers.expat): xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   42)
* ERRORTOKEN (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* error_body (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  225)
* error_content_type (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  127)
* error_headers (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  218)
* error_leader() (shlex.shlex method):   shlex Objects.      (line   73)
* error_message_format (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  116)
* error_output() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  190)
* error_perm:                            ftplib --- FTP protocol client.
                                                             (line   94)
* error_proto:                           ftplib --- FTP protocol client.
                                                             (line   99)
* error_proto <1>:                       poplib --- POP3 protocol client.
                                                             (line   49)
* error_reply:                           ftplib --- FTP protocol client.
                                                             (line   84)
* error_status (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  212)
* error_temp:                            ftplib --- FTP protocol client.
                                                             (line   89)
* escape (shlex.shlex attribute):        shlex Objects.      (line  107)
* escape sequence:                       String literals.    (line   49)
* escape() (in module cgi):              Functions<5>.       (line   71)
* escape() (in module re):               Module Contents.    (line  249)
* escape() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   12)
* escapechar (csv.Dialect attribute):    Dialects and Formatting Parameters.
                                                             (line   36)
* escapedquotes (shlex.shlex attribute): shlex Objects.      (line  121)
* ESHUTDOWN (in module errno):           errno --- Standard errno system symbols.
                                                             (line  453)
* ESOCKTNOSUPPORT (in module errno):     errno --- Standard errno system symbols.
                                                             (line  397)
* ESPIPE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  137)
* ESRCH (in module errno):               errno --- Standard errno system symbols.
                                                             (line   33)
* ESRMNT (in module errno):              errno --- Standard errno system symbols.
                                                             (line  297)
* ESTALE (in module errno):              errno --- Standard errno system symbols.
                                                             (line  485)
* ESTRPIPE (in module errno):            errno --- Standard errno system symbols.
                                                             (line  365)
* ETIME (in module errno):               errno --- Standard errno system symbols.
                                                             (line  269)
* ETIMEDOUT (in module errno):           errno --- Standard errno system symbols.
                                                             (line  461)
* Etiny() (decimal.Context method):      Context objects.    (line  212)
* ETOOMANYREFS (in module errno):        errno --- Standard errno system symbols.
                                                             (line  457)
* Etop() (decimal.Context method):       Context objects.    (line  218)
* ETXTBSY (in module errno):             errno --- Standard errno system symbols.
                                                             (line  125)
* EUCLEAN (in module errno):             errno --- Standard errno system symbols.
                                                             (line  489)
* EUNATCH (in module errno):             errno --- Standard errno system symbols.
                                                             (line  217)
* EUSERS (in module errno):              errno --- Standard errno system symbols.
                                                             (line  369)
* eval() (built-in function):            Built-in Functions. (line  423)
* evaluation; order:                     Evaluation order.   (line    6)
* Event (class in multiprocessing):      Synchronization primitives.
                                                             (line   28)
* Event (class in threading):            Event Objects.      (line   13)
* event scheduling:                      sched --- Event scheduler.
                                                             (line    6)
* event() (msilib.Control method):       GUI classes.        (line   16)
* Event() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  143)
* events (widgets):                      Bindings and Events.
                                                             (line    6)
* EWOULDBLOCK (in module errno):         errno --- Standard errno system symbols.
                                                             (line  185)
* Example (class in doctest):            Example Objects.    (line    6)
* example (doctest.DocTestFailure attribute): Debugging.     (line  212)
* example (doctest.UnexpectedException attribute): Debugging.
                                                             (line  233)
* examples (doctest.DocTest attribute):  DocTest Objects.    (line   19)
* excel (class in csv):                  Module Contents<2>. (line  166)
* excel_tab (class in csv):              Module Contents<2>. (line  172)
* except (2to3 fixer):                   Fixers.             (line   44)
* except; bare:                          except.             (line   34)
* excepthook() (in module sys):          cgitb --- Traceback manager for CGI scripts.
                                                             (line   30)
* excepthook() (in module sys) <1>:      sys --- System-specific parameters and functions.
                                                             (line  106)
* exception:                             Exceptions<2>.      (line    6)
* exception <1>:                         The raise statement.
                                                             (line    6)
* Exception:                             Built-in Exceptions.
                                                             (line   63)
* exception handler:                     Exceptions<2>.      (line    6)
* exception() (in module logging):       Module-Level Functions.
                                                             (line  106)
* exception() (logging.Logger method):   Logger Objects.     (line  178)
* exception; AssertionError:             The assert statement.
                                                             (line   22)
* exception; AttributeError:             Attribute references.
                                                             (line   11)
* exception; GeneratorExit:              Generator-iterator methods.
                                                             (line   50)
* exception; handler:                    The standard type hierarchy.
                                                             (line  729)
* exception; ImportError:                The import statement.
                                                             (line   82)
* exception; ImportError <1>:            The import statement.
                                                             (line  108)
* exception; ImportError <2>:            The import statement.
                                                             (line  122)
* exception; NameError:                  Identifiers Names.  (line   10)
* exception; RuntimeError:               The print statement.
                                                             (line   31)
* exception; StopIteration:              Generator-iterator methods.
                                                             (line   13)
* exception; StopIteration <1>:          The yield statement.
                                                             (line    6)
* exception; TypeError:                  Unary arithmetic and bitwise operations.
                                                             (line   20)
* exception; ValueError:                 Shifting operations.
                                                             (line   16)
* exception; ZeroDivisionError:          Binary arithmetic operations.
                                                             (line   23)
* exceptions (module):                   Built-in Exceptions.
                                                             (line    6)
* exceptions; in CGI scripts:            cgitb --- Traceback manager for CGI scripts.
                                                             (line    8)
* exclusive; or:                         Binary bitwise operations.
                                                             (line   17)
* exc_clear() (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  174)
* exc_info (doctest.UnexpectedException attribute): Debugging.
                                                             (line  237)
* exc_info (in module sys):              The standard type hierarchy.
                                                             (line  729)
* exc_info() (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  127)
* exc_info() (in module sys) <1>:        Exceptions<7>.      (line   47)
* exc_msg (doctest.Example attribute):   Example Objects.    (line   33)
* exc_traceback (in module sys):         The standard type hierarchy.
                                                             (line  729)
* exc_traceback (in module sys) <1>:     The try statement.  (line   55)
* exc_traceback (in module sys) <2>:     sys --- System-specific parameters and functions.
                                                             (line  192)
* exc_traceback (in module sys) <3>:     Exceptions<7>.      (line   36)
* exc_traceback (in module sys) <4>:     Exception Handling. (line   27)
* exc_type (in module sys):              The try statement.  (line   55)
* exc_type (in module sys) <1>:          sys --- System-specific parameters and functions.
                                                             (line  192)
* exc_type (in module sys) <2>:          Exceptions<7>.      (line   36)
* exc_type (in module sys) <3>:          Exception Handling. (line   27)
* exc_value (in module sys):             The try statement.  (line   55)
* exc_value (in module sys) <1>:         sys --- System-specific parameters and functions.
                                                             (line  192)
* exc_value (in module sys) <2>:         Exceptions<7>.      (line   36)
* exc_value (in module sys) <3>:         Exception Handling. (line   27)
* EXDEV (in module errno):               errno --- Standard errno system symbols.
                                                             (line   93)
* exec (2to3 fixer):                     Fixers.             (line   48)
* execfile (2to3 fixer):                 Fixers.             (line   52)
* execfile() (built-in function):        Built-in Functions. (line  467)
* execl() (in module os):                Process Management. (line   26)
* execle() (in module os):               Process Management. (line   26)
* execlp() (in module os):               Process Management. (line   26)
* execlpe() (in module os):              Process Management. (line   26)
* executable (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  215)
* executable (in module sys) <1>:        Process-wide parameters.
                                                             (line   80)
* executable_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  452)
* execute() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  482)
* execute() (in module distutils.util):  distutils util --- Miscellaneous other utility functions.
                                                             (line  114)
* Execute() (msilib.View method):        View Objects.       (line    6)
* execute() (sqlite3.Connection method): Connection Objects. (line   44)
* execute() (sqlite3.Cursor method):     Cursor Objects.     (line   11)
* executemany() (sqlite3.Connection method): Connection Objects.
                                                             (line   50)
* executemany() (sqlite3.Cursor method): Cursor Objects.     (line   44)
* executescript() (sqlite3.Connection method): Connection Objects.
                                                             (line   57)
* executescript() (sqlite3.Cursor method): Cursor Objects.   (line   96)
* execution model:                       Execution model.    (line    6)
* execution; frame:                      Naming and binding. (line   23)
* execution; frame <1>:                  Class definitions.  (line    6)
* execution; stack:                      The standard type hierarchy.
                                                             (line  729)
* execv() (in module os):                Process Management. (line   26)
* execve() (in module os):               Process Management. (line   26)
* execvp() (in module os):               Process Management. (line   26)
* execvpe() (in module os):              Process Management. (line   26)
* exec_prefix:                           Python-related paths and files.
                                                             (line    7)
* exec_prefix <1>:                       Include Files.      (line   32)
* exec_prefix <2>:                       Include Files.      (line   43)
* EXEC_PREFIX (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   23)
* exec_prefix (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  203)
* EXEC_STMT (opcode):                    Python Bytecode Instructions.
                                                             (line  316)
* ExFileSelectBox (class in Tix):        File Selectors.     (line   34)
* EXFULL (in module errno):              errno --- Standard errno system symbols.
                                                             (line  237)
* exists() (in module os.path):          os path --- Common pathname manipulations.
                                                             (line   66)
* exists() (ttk.Treeview method):        ttk Treeview.       (line   95)
* exit (built-in variable):              Constants added by the site module.
                                                             (line   11)
* exit():                                Process Control.    (line   17)
* exit() (argparse.ArgumentParser method): Exiting methods.  (line    6)
* exit() (in module sys):                sys --- System-specific parameters and functions.
                                                             (line  222)
* exit() (in module thread):             thread --- Multiple threads of control.
                                                             (line   53)
* exitcode (multiprocessing.Process attribute): Process and exceptions.
                                                             (line  104)
* exitfunc (2to3 fixer):                 Fixers.             (line   58)
* exitfunc (in module sys):              sys --- System-specific parameters and functions.
                                                             (line  248)
* exitfunc (in sys):                     atexit --- Exit handlers.
                                                             (line   24)
* exitonclick() (in module turtle):      Methods specific to Screen not inherited from TurtleScreen.
                                                             (line   10)
* exp() (decimal.Context method):        Context objects.    (line  283)
* exp() (decimal.Decimal method):        Decimal objects.    (line  226)
* exp() (in module cmath):               Power and logarithmic functions<2>.
                                                             (line    6)
* exp() (in module math):                Power and logarithmic functions.
                                                             (line    6)
* expand() (re.MatchObject method):      Match Objects.      (line   18)
* ExpandEnvironmentStrings() (in module _winreg): _winreg -- Windows registry access.
                                                             (line  199)
* expandNode() (xml.dom.pulldom.DOMEventStream method): DOMEventStream Objects.
                                                             (line   10)
* expandtabs() (in module string):       Deprecated string functions.
                                                             (line   63)
* expandtabs() (str method):             String Methods<2>.  (line   82)
* expanduser() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line   82)
* expandvars() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line  101)
* expand_tabs (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  109)
* Expat:                                 xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   12)
* ExpatError:                            xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   25)
* expect() (telnetlib.Telnet method):    Telnet Objects.     (line  115)
* expectedFailure() (in module unittest): Skipping tests and expected failures.
                                                             (line   89)
* expectedFailures (unittest.TestResult attribute): Loading and running tests.
                                                             (line  195)
* expires (cookielib.Cookie attribute):  Cookie Objects.     (line   48)
* expm1() (in module math):              Power and logarithmic functions.
                                                             (line   10)
* expovariate() (in module random):      random --- Generate pseudo-random numbers.
                                                             (line  225)
* expr() (in module parser):             Creating ST Objects.
                                                             (line   10)
* expression:                            Expressions.        (line    6)
* expression <1>:                        Glossary.           (line  239)
* expression; list:                      Expression lists.   (line    6)
* expression; list <1>:                  Expression statements.
                                                             (line    6)
* expression; list <2>:                  Assignment statements.
                                                             (line   22)
* expression; statement:                 Expression statements.
                                                             (line    6)
* expunge() (imaplib.IMAP4 method):      IMAP4 Objects.      (line   82)
* extend() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  139)
* extend() (collections.deque method):   deque objects.      (line   57)
* extend() (list method):                Mutable Sequence Types.
                                                             (line   13)
* extend() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   86)
* extended print statement:              The print statement.
                                                             (line   36)
* extended slice; assignment:            Mutable Sequence Types.
                                                             (line   13)
* extended slice; operation:             Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* extended slicing:                      The standard type hierarchy.
                                                             (line  136)
* extended; slicing:                     Slicings.           (line   24)
* ExtendedContext (class in decimal):    Context objects.    (line   65)
* EXTENDED_ARG (opcode):                 Python Bytecode Instructions.
                                                             (line  596)
* extendleft() (collections.deque method): deque objects.    (line   62)
* extend_path() (in module pkgutil):     pkgutil --- Package extension utility.
                                                             (line   15)
* Extension (class in distutils.core):   distutils core --- Core Distutils functionality.
                                                             (line  176)
* extension module:                      Glossary.           (line  250)
* extension; module:                     The standard type hierarchy.
                                                             (line    6)
* extensions_map (SimpleHTTPServer.SimpleHTTPRequestHandler attribute): SimpleHTTPServer --- Simple HTTP request handler.
                                                             (line   36)
* External Data Representation:          Data stream format. (line    6)
* External Data Representation <1>:      xdrlib --- Encode and decode XDR data.
                                                             (line    6)
* ExternalClashError:                    Exceptions<5>.      (line   25)
* ExternalEntityParserCreate() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   46)
* ExternalEntityRefHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  366)
* external_attr (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   89)
* extra (zipfile.ZipInfo attribute):     ZipInfo Objects.    (line   55)
* extract() (tarfile.TarFile method):    TarFile Objects.    (line  143)
* extract() (zipfile.ZipFile method):    ZipFile Objects.    (line  107)
* extractall() (tarfile.TarFile method): TarFile Objects.    (line  125)
* extractall() (zipfile.ZipFile method): ZipFile Objects.    (line  127)
* ExtractError:                          tarfile --- Read and write tar archive files.
                                                             (line  179)
* extractfile() (tarfile.TarFile method): TarFile Objects.   (line  157)
* extract_cookies() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   26)
* extract_stack() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line   77)
* extract_tb() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line   66)
* extract_version (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   69)
* extsep (in module os):                 Miscellaneous System Information.
                                                             (line  100)
* EX_CANTCREAT (in module os):           Process Management. (line  183)
* EX_CONFIG (in module os):              Process Management. (line  229)
* EX_DATAERR (in module os):             Process Management. (line  116)
* EX_IOERR (in module os):               Process Management. (line  192)
* EX_NOHOST (in module os):              Process Management. (line  141)
* EX_NOINPUT (in module os):             Process Management. (line  124)
* EX_NOPERM (in module os):              Process Management. (line  220)
* EX_NOTFOUND (in module os):            Process Management. (line  238)
* EX_NOUSER (in module os):              Process Management. (line  133)
* EX_OK (in module os):                  Process Management. (line   99)
* EX_OSERR (in module os):               Process Management. (line  165)
* EX_OSFILE (in module os):              Process Management. (line  174)
* EX_PROTOCOL (in module os):            Process Management. (line  211)
* EX_SOFTWARE (in module os):            Process Management. (line  157)
* EX_TEMPFAIL (in module os):            Process Management. (line  201)
* EX_UNAVAILABLE (in module os):         Process Management. (line  149)
* EX_USAGE (in module os):               Process Management. (line  107)
* fabs() (in module math):               Number-theoretic and representation functions.
                                                             (line   18)
* factorial() (in module math):          Number-theoretic and representation functions.
                                                             (line   22)
* fail() (unittest.TestCase method):     Test cases.         (line  520)
* failfast (unittest.TestResult attribute): Loading and running tests.
                                                             (line  226)
* failureException (unittest.TestCase attribute): Test cases.
                                                             (line  525)
* failures (unittest.TestResult attribute): Loading and running tests.
                                                             (line  178)
* False:                                 The standard type hierarchy.
                                                             (line   86)
* false:                                 Truth Value Testing.
                                                             (line    6)
* False <1>:                             Truth Value Testing.
                                                             (line   28)
* False <2>:                             Boolean Values.     (line   15)
* False (Built-in object):               Truth Value Testing.
                                                             (line   12)
* False (built-in variable):             Built-in Constants. (line    8)
* family (socket.socket attribute):      Socket Objects.     (line  298)
* FancyGetopt (class in distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   36)
* FancyURLopener (class in urllib):      URL Opener objects. (line   81)
* fancy_getopt() (in module distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   20)
* fatalError() (xml.sax.handler.ErrorHandler method): ErrorHandler Objects.
                                                             (line   24)
* faultCode (xmlrpclib.Fault attribute): Fault Objects.      (line    9)
* faultString (xmlrpclib.Fault attribute): Fault Objects.    (line   13)
* fchdir() (in module os):               Files and Directories.
                                                             (line   76)
* fchmod() (in module os):               File Descriptor Operations.
                                                             (line   62)
* fchown() (in module os):               File Descriptor Operations.
                                                             (line   71)
* FCICreate() (in module msilib):        msilib --- Read and write Microsoft Installer files.
                                                             (line   24)
* fcntl (module):                        fcntl --- The fcntl and ioctl system calls.
                                                             (line    6)
* fcntl() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line   17)
* fcntl() (in module fcntl) <1>:         posixfile --- File-like objects with locking support.
                                                             (line   10)
* fd() (in module turtle):               Turtle motion.      (line    6)
* fdatasync() (in module os):            File Descriptor Operations.
                                                             (line   81)
* fdopen() (in module os):               File Object Creation.
                                                             (line    8)
* Feature (class in msilib):             Features.           (line    6)
* feature_external_ges (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   74)
* feature_external_pes (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   81)
* feature_namespaces (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   46)
* feature_namespace_prefixes (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   53)
* feature_string_interning (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   60)
* feature_validation (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   67)
* feed() (email.parser.FeedParser method): FeedParser API.   (line   36)
* feed() (HTMLParser.HTMLParser method): HTMLParser Methods. (line    8)
* feed() (sgmllib.SGMLParser method):    sgmllib --- Simple SGML parser.
                                                             (line   60)
* feed() (xml.etree.ElementTree.XMLParser method): XMLParser Objects.
                                                             (line   27)
* feed() (xml.sax.xmlreader.IncrementalParser method): IncrementalParser Objects.
                                                             (line    9)
* FeedParser (class in email.parser):    FeedParser API.     (line   29)
* fetch() (imaplib.IMAP4 method):        IMAP4 Objects.      (line   88)
* Fetch() (msilib.View method):          View Objects.       (line   18)
* fetchall() (sqlite3.Cursor method):    Cursor Objects.     (line  158)
* fetchmany() (sqlite3.Cursor method):   Cursor Objects.     (line  138)
* fetchone() (sqlite3.Cursor method):    Cursor Objects.     (line  133)
* fflags (select.kevent attribute):      Kevent Objects.     (line   90)
* fieldnames (csv.csvreader attribute):  Reader Objects.     (line   31)
* fields (uuid.UUID attribute):          uuid --- UUID objects according to RFC 4122.
                                                             (line   58)
* field_size_limit() (in module csv):    Module Contents<2>. (line  109)
* fifo (class in asynchat):              asynchat - Auxiliary Classes.
                                                             (line    6)
* file (pyclbr.Class attribute):         Class Objects<2>.   (line   31)
* file (pyclbr.Function attribute):      Function Objects.   (line   18)
* file object:                           Glossary.           (line  255)
* file() (built-in function):            Built-in Functions. (line  500)
* file() (posixfile.posixfile method):   posixfile --- File-like objects with locking support.
                                                             (line   87)
* file-like object:                      Glossary.           (line  270)
* file; byte-code:                       imp --- Access the import internals.
                                                             (line   12)
* file; byte-code <1>:                   imp --- Access the import internals.
                                                             (line  203)
* file; byte-code <2>:                   py_compile --- Compile Python source files.
                                                             (line    6)
* file; copying:                         shutil --- High-level file operations.
                                                             (line    6)
* file; descriptor:                      File Objects.       (line   67)
* file; large files:                     Large File Support. (line    6)
* file; mime.types:                      mimetypes --- Map filenames to MIME types.
                                                             (line  115)
* filecmp (module):                      filecmp --- File and Directory Comparisons.
                                                             (line    6)
* fileConfig() (in module logging.config): Configuration functions.
                                                             (line   63)
* FileCookieJar (class in cookielib):    cookielib --- Cookie handling for HTTP clients.
                                                             (line   63)
* FileEntry (class in Tix):              File Selectors.     (line   50)
* FileHandler (class in logging):        FileHandler.        (line   10)
* FileHandler (class in urllib2):        urllib2 --- extensible library for opening URLs.
                                                             (line  276)
* FileInput (class in fileinput):        fileinput --- Iterate over lines from multiple input streams.
                                                             (line  120)
* fileinput (module):                    fileinput --- Iterate over lines from multiple input streams.
                                                             (line    6)
* FileIO (class in io):                  Raw File I/O.       (line    6)
* filelineno() (in module fileinput):    fileinput --- Iterate over lines from multiple input streams.
                                                             (line   85)
* filename (cookielib.FileCookieJar attribute): CookieJar and FileCookieJar Objects.
                                                             (line  147)
* filename (doctest.DocTest attribute):  DocTest Objects.    (line   38)
* filename (zipfile.ZipInfo attribute):  ZipInfo Objects.    (line   13)
* filename() (in module fileinput):      fileinput --- Iterate over lines from multiple input streams.
                                                             (line   65)
* filenames; pathname expansion:         glob --- Unix style pathname pattern expansion.
                                                             (line    6)
* filenames; wildcard expansion:         fnmatch --- Unix filename pattern matching.
                                                             (line    6)
* filename_only (in module tabnanny):    tabnanny --- Detection of ambiguous indentation.
                                                             (line   31)
* fileno() (file method):                File Objects.       (line   65)
* fileno() (hotshot.Profile method):     Profile Objects.    (line   16)
* fileno() (httplib.HTTPResponse method): HTTPResponse Objects.
                                                             (line   24)
* fileno() (in module fileinput):        fileinput --- Iterate over lines from multiple input streams.
                                                             (line   70)
* fileno() (io.IOBase method):           I/O Base Classes.   (line   62)
* fileno() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   31)
* fileno() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   28)
* fileno() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   14)
* fileno() (select.epoll method):        Edge and Level Trigger Polling epoll Objects.
                                                             (line   56)
* fileno() (select.kqueue method):       Kqueue Objects.     (line   10)
* fileno() (socket.socket method):       Socket Objects.     (line   65)
* fileno() (SocketServer.BaseServer method): Server Objects. (line   12)
* fileno() (telnetlib.Telnet method):    Telnet Objects.     (line   97)
* fileopen() (in module posixfile):      posixfile --- File-like objects with locking support.
                                                             (line   44)
* FileSelectBox (class in Tix):          File Selectors.     (line   42)
* FileType (class in argparse):          FileType objects.   (line    6)
* FileType (in module types):            types --- Names for built-in types.
                                                             (line  152)
* FileType (in module types) <1>:        File Objects<2>.    (line   17)
* FileWrapper (class in wsgiref.util):   wsgiref util -- WSGI environment utilities.
                                                             (line  114)
* file_created() (built-in function):    The Postinstallation script.
                                                             (line   23)
* file_dispatcher (class in asyncore):   asyncore --- Asynchronous socket handler.
                                                             (line  228)
* file_open() (urllib2.FileHandler method): FileHandler Objects.
                                                             (line    6)
* file_size (zipfile.ZipInfo attribute): ZipInfo Objects.    (line  105)
* file_wrapper (class in asyncore):      asyncore --- Asynchronous socket handler.
                                                             (line  236)
* fill() (in module textwrap):           textwrap --- Text wrapping and filling.
                                                             (line   32)
* fill() (in module turtle):             Filling.            (line    6)
* fill() (textwrap.TextWrapper method):  textwrap --- Text wrapping and filling.
                                                             (line  219)
* fillcolor() (in module turtle):        Color control.      (line   58)
* filter (2to3 fixer):                   Fixers.             (line   63)
* Filter (class in logging):             Filter Objects.     (line   13)
* filter (select.kevent attribute):      Kevent Objects.     (line   15)
* filter() (built-in function):          Built-in Functions. (line  514)
* filter() (in module curses):           Functions<2>.       (line  119)
* filter() (in module fnmatch):          fnmatch --- Unix filename pattern matching.
                                                             (line   65)
* filter() (in module future_builtins):  future_builtins --- Python 3 builtins.
                                                             (line   38)
* filter() (logging.Filter method):      Filter Objects.     (line   20)
* filter() (logging.Handler method):     Handler Objects.    (line   52)
* filter() (logging.Logger method):      Logger Objects.     (line  193)
* filterwarnings() (in module warnings): Available Functions.
                                                             (line   82)
* finalization, of objects:              Finalization and De-allocation.
                                                             (line    6)
* finalize_options() (distutils.cmd.Command method): Creating a new Distutils command.
                                                             (line   30)
* find() (doctest.DocTestFinder method): DocTestFinder objects.
                                                             (line   35)
* find() (in module gettext):            Class-based API.    (line   15)
* find() (in module mmap):               mmap --- Memory-mapped file support.
                                                             (line  153)
* find() (in module string):             Deprecated string functions.
                                                             (line   71)
* find() (str method):                   String Methods<2>.  (line  103)
* find() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   94)
* find() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   21)
* findall() (in module re):              Module Contents.    (line  167)
* findall() (re.RegexObject method):     Regular Expression Objects.
                                                             (line   65)
* findall() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   99)
* findall() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   26)
* findCaller() (logging.Logger method):  Logger Objects.     (line  210)
* finder:                                The import statement.
                                                             (line   41)
* finder <1>:                            Glossary.           (line  274)
* finder; find_module:                   The import statement.
                                                             (line   41)
* findertools (module):                  findertools --- The finder's Apple Events interface.
                                                             (line    6)
* findfactor() (in module audioop):      audioop --- Manipulate raw audio data.
                                                             (line   68)
* findfile() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   71)
* findfit() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line   77)
* findfont() (in module fm):             fm --- Font Manager interface.
                                                             (line   26)
* finditer() (in module re):             Module Contents.    (line  181)
* finditer() (re.RegexObject method):    Regular Expression Objects.
                                                             (line   72)
* findlabels() (in module dis):          dis --- Disassembler for Python bytecode.
                                                             (line   90)
* findlinestarts() (in module dis):      dis --- Disassembler for Python bytecode.
                                                             (line   83)
* findmatch() (in module mailcap):       mailcap --- Mailcap file handling.
                                                             (line   24)
* findmax() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line   88)
* findtext() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  104)
* findtext() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   31)
* find_first() (fl.form method):         Form Objects.       (line   56)
* find_global() (pickle protocol):       Subclassing Unpicklers.
                                                             (line    6)
* find_last() (fl.form method):          Form Objects.       (line   60)
* find_library() (in module ctypes.util): Utility functions. (line   88)
* find_library_file() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  205)
* find_loader() (in module pkgutil):     pkgutil --- Package extension utility.
                                                             (line   65)
* find_longest_match() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   53)
* find_module() (imp.NullImporter method): imp --- Access the import internals.
                                                             (line  261)
* find_module() (in module imp):         imp --- Access the import internals.
                                                             (line   28)
* find_module() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   19)
* find_msvcrt() (in module ctypes.util): Utility functions.  (line  100)
* find_user_password() (urllib2.HTTPPasswordMgr method): HTTPPasswordMgr Objects.
                                                             (line   16)
* finish() (SocketServer.RequestHandler method): RequestHandler Objects.
                                                             (line   10)
* finish_request() (SocketServer.BaseServer method): Server Objects.
                                                             (line  101)
* first() (asynchat.fifo method):        asynchat - Auxiliary Classes.
                                                             (line   18)
* first() (bsddb.bsddbobject method):    Hash BTree and Record Objects.
                                                             (line   40)
* first() (dbhash.dbhash method):        Database Objects.   (line   10)
* firstChild (xml.dom.Node attribute):   Node Objects.       (line   54)
* firstkey() (in module gdbm):           gdbm --- GNU's reinterpretation of dbm.
                                                             (line   86)
* firstweekday() (in module calendar):   calendar --- General calendar-related functions.
                                                             (line  210)
* fix() (in module fpformat):            fpformat --- Floating point conversions.
                                                             (line   19)
* fix_missing_locations() (in module ast): ast Helpers.      (line   35)
* fix_sentence_endings (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  158)
* fl (module):                           fl --- FORMS library for graphical user interfaces.
                                                             (line    6)
* FL (module):                           FL --- Constants used with the fl module.
                                                             (line    6)
* flags (in module sys):                 sys --- System-specific parameters and functions.
                                                             (line  264)
* flags (re.RegexObject attribute):      Regular Expression Objects.
                                                             (line   89)
* flags (select.kevent attribute):       Kevent Objects.     (line   52)
* flags() (posixfile.posixfile method):  posixfile --- File-like objects with locking support.
                                                             (line   65)
* flag_bits (zipfile.ZipInfo attribute): ZipInfo Objects.    (line   77)
* flash() (in module curses):            Functions<2>.       (line  130)
* flatten() (email.generator.Generator method): email generator Generating MIME documents.
                                                             (line   54)
* flattening; objects:                   pickle --- Python object serialization.
                                                             (line    6)
* float() (built-in function):           Built-in Functions. (line  533)
* floating point literal:                Numeric literals.   (line    6)
* floating point; literals:              Numeric Types --- int float long complex.
                                                             (line   23)
* floating point; number:                The standard type hierarchy.
                                                             (line  105)
* FloatingPointError:                    Built-in Exceptions.
                                                             (line  142)
* FloatingPointError <1>:                fpectl --- Floating point exception control.
                                                             (line   52)
* FloatType (in module types):           types --- Names for built-in types.
                                                             (line   68)
* FloatType (in modules types):          Floating Point Objects.
                                                             (line   13)
* float_info (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  325)
* float_repr_style (in module sys):      sys --- System-specific parameters and functions.
                                                             (line  406)
* flock() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line   96)
* floor division:                        Glossary.           (line  280)
* floor() (in module math):              Numeric Types --- int float long complex.
                                                             (line  114)
* floor() (in module math) <1>:          Number-theoretic and representation functions.
                                                             (line   29)
* floordiv() (in module operator):       operator --- Standard operators as functions.
                                                             (line   96)
* flp (module):                          flp --- Functions for loading stored FORMS designs.
                                                             (line    6)
* flush() (bz2.BZ2Compressor method):    Sequential de compression.
                                                             (line   25)
* flush() (file method):                 File Objects.       (line   56)
* flush() (formatter.writer method):     The Writer Interface.
                                                             (line   13)
* flush() (in module mmap):              mmap --- Memory-mapped file support.
                                                             (line  161)
* flush() (io.BufferedWriter method):    Buffered Streams.   (line   93)
* flush() (io.IOBase method):            I/O Base Classes.   (line   68)
* flush() (logging.Handler method):      Handler Objects.    (line   60)
* flush() (logging.handlers.BufferingHandler method): MemoryHandler.
                                                             (line   29)
* flush() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   53)
* flush() (logging.StreamHandler method): StreamHandler.     (line   25)
* flush() (mailbox.Mailbox method):      Mailbox objects.    (line  226)
* flush() (mailbox.Maildir method):      Maildir.            (line  102)
* flush() (mailbox.MH method):           MH.                 (line   99)
* flush() (zlib.Compress method):        zlib --- Compression compatible with gzip.
                                                             (line  155)
* flush() (zlib.Decompress method):      zlib --- Compression compatible with gzip.
                                                             (line  219)
* flushheaders() (MimeWriter.MimeWriter method): MimeWriter Objects.
                                                             (line   16)
* flushinp() (in module curses):         Functions<2>.       (line  137)
* FlushKey() (in module _winreg):        _winreg -- Windows registry access.
                                                             (line  209)
* flush_softspace() (formatter.formatter method): The Formatter Interface.
                                                             (line   83)
* fm (module):                           fm --- Font Manager interface.
                                                             (line    6)
* fma() (decimal.Context method):        Context objects.    (line  287)
* fma() (decimal.Decimal method):        Decimal objects.    (line  266)
* fmod() (in module math):               Number-theoretic and representation functions.
                                                             (line   34)
* fnmatch (module):                      fnmatch --- Unix filename pattern matching.
                                                             (line    6)
* fnmatch() (in module fnmatch):         fnmatch --- Unix filename pattern matching.
                                                             (line   40)
* fnmatchcase() (in module fnmatch):     fnmatch --- Unix filename pattern matching.
                                                             (line   60)
* focus() (ttk.Treeview method):         ttk Treeview.       (line   99)
* Folder (class in mhlib):               mhlib --- Access to MH mailboxes.
                                                             (line   21)
* Font Manager, IRIS:                    fm --- Font Manager interface.
                                                             (line    9)
* fontpath() (in module fm):             fm --- Font Manager interface.
                                                             (line   45)
* fopen():                               File Objects<2>.    (line   39)
* forget() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   52)
* forget() (ttk.Notebook method):        ttk Notebook.       (line   18)
* fork() (in module os):                 Process Management. (line  246)
* fork() (in module pty):                pty --- Pseudo-terminal utilities.
                                                             (line   16)
* forkpty() (in module os):              Process Management. (line  260)
* Form (class in Tix):                   Form Geometry Manager.
                                                             (line    8)
* format (memoryview attribute):         memoryview type.    (line   83)
* format (struct.Struct attribute):      Classes<2>.         (line   42)
* format() (built-in function):          Built-in Functions. (line  554)
* format() (in module locale):           locale --- Internationalization services.
                                                             (line  383)
* format() (logging.Formatter method):   Formatter Objects.  (line   32)
* format() (logging.Handler method):     Handler Objects.    (line   93)
* format() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   40)
* format() (str method):                 String Methods<2>.  (line  117)
* format() (string.Formatter method):    String Formatting.  (line   19)
* formataddr() (in module email.utils):  email utils Miscellaneous utilities.
                                                             (line   29)
* formatargspec() (in module inspect):   Classes and functions<2>.
                                                             (line   43)
* formatargvalues() (in module inspect): Classes and functions<2>.
                                                             (line   51)
* formatdate() (in module email.utils):  email utils Miscellaneous utilities.
                                                             (line   79)
* FormatError:                           Exceptions<5>.      (line   32)
* FormatError() (in module ctypes):      Utility functions.  (line  112)
* formatException() (logging.Formatter method): Formatter Objects.
                                                             (line   72)
* formatmonth() (calendar.HTMLCalendar method): calendar --- General calendar-related functions.
                                                             (line  150)
* formatmonth() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  113)
* Formatter (class in logging):          Formatter Objects.  (line   24)
* Formatter (class in string):           String Formatting.  (line   15)
* formatter (htmllib.HTMLParser attribute): HTMLParser Objects.
                                                             (line   10)
* formatter (module):                    formatter --- Generic output formatting.
                                                             (line    6)
* formatTime() (logging.Formatter method): Formatter Objects.
                                                             (line   52)
* formatting, string (%):                String Formatting Operations.
                                                             (line    6)
* formatwarning() (in module warnings):  Available Functions.
                                                             (line   71)
* formatyear() (calendar.HTMLCalendar method): calendar --- General calendar-related functions.
                                                             (line  156)
* formatyear() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  127)
* formatyearpage() (calendar.HTMLCalendar method): calendar --- General calendar-related functions.
                                                             (line  161)
* format_exc() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line   45)
* format_exception() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line  104)
* format_exception_only() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line   93)
* format_field() (string.Formatter method): String Formatting.
                                                             (line  102)
* format_help() (argparse.ArgumentParser method): Printing help.
                                                             (line   30)
* format_list() (in module traceback):   traceback --- Print or retrieve a stack traceback.
                                                             (line   84)
* format_stack() (in module traceback):  traceback --- Print or retrieve a stack traceback.
                                                             (line  117)
* format_stack_entry() (bdb.Bdb method): bdb --- Debugger framework.
                                                             (line  327)
* format_string() (in module locale):    locale --- Internationalization services.
                                                             (line  400)
* format_tb() (in module traceback):     traceback --- Print or retrieve a stack traceback.
                                                             (line  113)
* format_usage() (argparse.ArgumentParser method): Printing help.
                                                             (line   25)
* FORMS Library:                         fl --- FORMS library for graphical user interfaces.
                                                             (line    9)
* forward() (in module turtle):          Turtle motion.      (line    6)
* FOR_ITER (opcode):                     Python Bytecode Instructions.
                                                             (line  490)
* found_terminator() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   84)
* fp (rfc822.Message attribute):         Message Objects<2>. (line  139)
* fpathconf() (in module os):            File Descriptor Operations.
                                                             (line   90)
* fpectl (module):                       fpectl --- Floating point exception control.
                                                             (line    6)
* fpformat (module):                     fpformat --- Floating point conversions.
                                                             (line    6)
* Fraction (class in fractions):         fractions --- Rational numbers.
                                                             (line   18)
* fractions (module):                    fractions --- Rational numbers.
                                                             (line    6)
* frame (ScrolledText.ScrolledText attribute): ScrolledText --- Scrolled Text Widget.
                                                             (line   26)
* FrameType (in module types):           types --- Names for built-in types.
                                                             (line  175)
* FrameWork (module):                    FrameWork --- Interactive application framework.
                                                             (line    6)
* free():                                Overview.           (line   33)
* free; variable:                        Naming and binding. (line   46)
* free; variable <1>:                    The del statement<2>.
                                                             (line   21)
* freeze utility:                        Importing Modules<2>.
                                                             (line  224)
* freeze_form() (fl.form method):        Form Objects.       (line   32)
* freeze_support() (in module multiprocessing): Miscellaneous<2>.
                                                             (line   25)
* frexp() (in module math):              Number-theoretic and representation functions.
                                                             (line   50)
* frombuf() (tarfile.TarInfo method):    TarInfo Objects.    (line   19)
* fromchild (popen2.Popen3 attribute):   Popen3 and Popen4 Objects.
                                                             (line   25)
* fromfd() (in module socket):           socket --- Low-level networking interface.
                                                             (line  398)
* fromfd() (select.epoll method):        Edge and Level Trigger Polling epoll Objects.
                                                             (line   60)
* fromfd() (select.kqueue method):       Kqueue Objects.     (line   14)
* fromfile() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  150)
* fromhex() (float method):              Additional Methods on Float.
                                                             (line   45)
* fromkeys() (collections.Counter method): Counter objects.  (line   96)
* fromkeys() (dict method):              Mapping Types --- dict.
                                                             (line  130)
* fromlist() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  159)
* fromordinal() (datetime.date class method): date Objects.  (line   47)
* fromordinal() (datetime.datetime class method): datetime Objects.
                                                             (line  101)
* fromstring() (array.array method):     array --- Efficient arrays of numeric values.
                                                             (line  165)
* fromstring() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   24)
* fromstringlist() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   30)
* fromtarfile() (tarfile.TarInfo method): TarInfo Objects.   (line   27)
* fromtimestamp() (datetime.date class method): date Objects.
                                                             (line   36)
* fromtimestamp() (datetime.datetime class method): datetime Objects.
                                                             (line   69)
* fromunicode() (array.array method):    array --- Efficient arrays of numeric values.
                                                             (line  171)
* fromutc() (datetime.tzinfo method):    tzinfo Objects.     (line  147)
* from_address() (ctypes._CData method): Data types.         (line   40)
* from_buffer() (ctypes._CData method):  Data types.         (line   19)
* from_buffer_copy() (ctypes._CData method): Data types.     (line   30)
* from_decimal() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  102)
* from_float() (decimal.Decimal method): Decimal objects.    (line  239)
* from_float() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line   91)
* from_iterable() (itertools.chain class method): Itertool functions.
                                                             (line   23)
* from_param() (ctypes._CData method):   Data types.         (line   45)
* from_splittable() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  123)
* frozenset (built-in class):            Set Types --- set frozenset.
                                                             (line   35)
* fstat() (in module os):                File Descriptor Operations.
                                                             (line  110)
* fstatvfs() (in module os):             File Descriptor Operations.
                                                             (line  116)
* fsum() (in module math):               Number-theoretic and representation functions.
                                                             (line   58)
* fsync() (in module os):                File Descriptor Operations.
                                                             (line  123)
* FTP:                                   urllib Restrictions.
                                                             (line   35)
* FTP (class in ftplib):                 ftplib --- FTP protocol client.
                                                             (line   38)
* FTP; ftplib (standard module):         ftplib --- FTP protocol client.
                                                             (line    6)
* FTP; protocol:                         urllib Restrictions.
                                                             (line    6)
* FTP; protocol <1>:                     ftplib --- FTP protocol client.
                                                             (line    6)
* FTPHandler (class in urllib2):         urllib2 --- extensible library for opening URLs.
                                                             (line  280)
* ftplib (module):                       ftplib --- FTP protocol client.
                                                             (line    6)
* ftpmirror.py:                          ftplib --- FTP protocol client.
                                                             (line  122)
* ftp_open() (urllib2.FTPHandler method): FTPHandler Objects.
                                                             (line    6)
* ftp_proxy:                             High-level interface.
                                                             (line   61)
* FTP_TLS (class in ftplib):             ftplib --- FTP protocol client.
                                                             (line   50)
* ftruncate() (in module os):            File Descriptor Operations.
                                                             (line  135)
* Full:                                  Queue --- A synchronized queue class.
                                                             (line   70)
* full() (multiprocessing.Queue method): Pipes and Queues.   (line  114)
* full() (Queue.Queue method):           Queue Objects.      (line   22)
* func (functools.partial attribute):    partial Objects.    (line    9)
* funcattrs (2to3 fixer):                Fixers.             (line   67)
* function:                              Glossary.           (line  288)
* Function (class in symtable):          Examining Symbol Tables.
                                                             (line   70)
* function() (in module new):            new --- Creation of runtime internal objects.
                                                             (line   33)
* function; argument:                    The standard type hierarchy.
                                                             (line  289)
* function; call:                        The standard type hierarchy.
                                                             (line  289)
* function; call <1>:                    Calls.              (line  126)
* function; call <2>:                    Calls.              (line  135)
* function; definition:                  The return statement.
                                                             (line    6)
* function; definition <1>:              Function definitions.
                                                             (line    6)
* function; generator:                   The yield statement.
                                                             (line    6)
* function; name:                        Function definitions.
                                                             (line    6)
* FunctionTestCase (class in unittest):  Test cases.         (line  629)
* FunctionType (in module types):        types --- Names for built-in types.
                                                             (line  108)
* functools (module):                    functools --- Higher-order functions and operations on callable objects.
                                                             (line    6)
* func_closure (function attribute):     The standard type hierarchy.
                                                             (line  366)
* func_code (function attribute):        The standard type hierarchy.
                                                             (line  366)
* func_code (function object attribute): Code Objects.       (line    6)
* func_defaults (function attribute):    The standard type hierarchy.
                                                             (line  366)
* func_dict (function attribute):        The standard type hierarchy.
                                                             (line  366)
* func_doc (function attribute):         The standard type hierarchy.
                                                             (line  366)
* func_globals (function attribute):     The standard type hierarchy.
                                                             (line  366)
* func_name (function attribute):        The standard type hierarchy.
                                                             (line  366)
* funny_files (filecmp.dircmp attribute): The dircmp class.  (line   96)
* future (2to3 fixer):                   Fixers.             (line   73)
* future; statement:                     Future statements.  (line    6)
* FutureWarning:                         Built-in Exceptions.
                                                             (line  478)
* future_builtins (module):              future_builtins --- Python 3 builtins.
                                                             (line    6)
* f_back (frame attribute):              The standard type hierarchy.
                                                             (line  705)
* F_BAVAIL (in module statvfs):          statvfs --- Constants used with os statvfs.
                                                             (line   31)
* F_BFREE (in module statvfs):           statvfs --- Constants used with os statvfs.
                                                             (line   27)
* F_BLOCKS (in module statvfs):          statvfs --- Constants used with os statvfs.
                                                             (line   23)
* F_BSIZE (in module statvfs):           statvfs --- Constants used with os statvfs.
                                                             (line   15)
* f_builtins (frame attribute):          The standard type hierarchy.
                                                             (line  705)
* f_code (frame attribute):              The standard type hierarchy.
                                                             (line  705)
* f_exc_traceback (frame attribute):     The standard type hierarchy.
                                                             (line  716)
* f_exc_type (frame attribute):          The standard type hierarchy.
                                                             (line  716)
* f_exc_value (frame attribute):         The standard type hierarchy.
                                                             (line  716)
* F_FAVAIL (in module statvfs):          statvfs --- Constants used with os statvfs.
                                                             (line   43)
* F_FFREE (in module statvfs):           statvfs --- Constants used with os statvfs.
                                                             (line   39)
* F_FILES (in module statvfs):           statvfs --- Constants used with os statvfs.
                                                             (line   35)
* F_FLAG (in module statvfs):            statvfs --- Constants used with os statvfs.
                                                             (line   47)
* F_FRSIZE (in module statvfs):          statvfs --- Constants used with os statvfs.
                                                             (line   19)
* f_globals (frame attribute):           The standard type hierarchy.
                                                             (line  705)
* f_lasti (frame attribute):             The standard type hierarchy.
                                                             (line  705)
* f_lineno (frame attribute):            The standard type hierarchy.
                                                             (line  716)
* f_locals (frame attribute):            The standard type hierarchy.
                                                             (line  705)
* F_NAMEMAX (in module statvfs):         statvfs --- Constants used with os statvfs.
                                                             (line   51)
* F_OK (in module os):                   Files and Directories.
                                                             (line   50)
* f_restricted (frame attribute):        The standard type hierarchy.
                                                             (line  705)
* f_trace (frame attribute):             The standard type hierarchy.
                                                             (line  716)
* G.722:                                 aifc --- Read and write AIFF and AIFC files.
                                                             (line  157)
* gaierror:                              socket --- Low-level networking interface.
                                                             (line  124)
* gamma() (in module math):              Special functions.  (line   18)
* gammavariate() (in module random):     random --- Generate pseudo-random numbers.
                                                             (line  233)
* garbage (in module gc):                gc --- Garbage Collector interface.
                                                             (line  161)
* garbage collection:                    Objects values and types.
                                                             (line   32)
* garbage collection <1>:                Glossary.           (line  317)
* gather() (curses.textpad.Textbox method): Textbox objects. (line  108)
* gauss() (in module random):            random --- Generate pseudo-random numbers.
                                                             (line  244)
* gc (module):                           gc --- Garbage Collector interface.
                                                             (line    6)
* gcd() (in module fractions):           fractions --- Rational numbers.
                                                             (line  134)
* gdbm (module):                         gdbm --- GNU's reinterpretation of dbm.
                                                             (line    6)
* ge() (in module operator):             operator --- Standard operators as functions.
                                                             (line   19)
* generate_help() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   68)
* generate_tokens() (in module tokenize): tokenize --- Tokenizer for Python source.
                                                             (line   24)
* generator:                             Glossary.           (line  324)
* generator <1>:                         Glossary.           (line  324)
* generator (built-in class):            Generator-iterator methods.
                                                             (line   13)
* Generator (class in email.generator):  email generator Generating MIME documents.
                                                             (line   27)
* generator expression:                  Glossary.           (line  336)
* generator expression <1>:              Glossary.           (line  336)
* generator; expression:                 Generator expressions.
                                                             (line    6)
* generator; function:                   The standard type hierarchy.
                                                             (line  454)
* generator; function <1>:               Yield expressions.  (line    6)
* generator; function <2>:               The yield statement.
                                                             (line    6)
* generator; iterator:                   The standard type hierarchy.
                                                             (line  454)
* generator; iterator <1>:               The yield statement.
                                                             (line    6)
* GeneratorExit:                         Built-in Exceptions.
                                                             (line  149)
* GeneratorType (in module types):       types --- Names for built-in types.
                                                             (line  114)
* generic; special; attribute:           The standard type hierarchy.
                                                             (line   12)
* generic_visit() (ast.NodeVisitor method): ast Helpers.     (line   89)
* genops() (in module pickletools):      pickletools --- Tools for pickle developers.
                                                             (line   31)
* gensuitemodule (module):               gensuitemodule --- Generate OSA stub packages.
                                                             (line    6)
* gen_lib_options() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   14)
* gen_preprocess_options() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   24)
* gen_uuid() (in module msilib):         msilib --- Read and write Microsoft Installer files.
                                                             (line  107)
* get() (ConfigParser.ConfigParser method): ConfigParser Objects.
                                                             (line    9)
* get() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   72)
* get() (dict method):                   Mapping Types --- dict.
                                                             (line  140)
* get() (email.message.Message method):  email message Representing an email message.
                                                             (line  250)
* get() (in module webbrowser):          webbrowser --- Convenient Web-browser controller.
                                                             (line   78)
* get() (mailbox.Mailbox method):        Mailbox objects.    (line  138)
* get() (multiprocessing.multiprocessing.queues.SimpleQueue method): Pipes and Queues.
                                                             (line  198)
* get() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  125)
* get() (multiprocessing.Queue method):  Pipes and Queues.   (line  136)
* get() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   57)
* get() (Queue.Queue method):            Queue Objects.      (line   46)
* get() (rfc822.Message method):         Message Objects<2>. (line   65)
* get() (ttk.Combobox method):           ttk Combobox.       (line   15)
* get() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   58)
* getabouttext() (FrameWork.Application method): Application Objects.
                                                             (line   13)
* getacl() (imaplib.IMAP4 method):       IMAP4 Objects.      (line   95)
* getaddr() (rfc822.Message method):     Message Objects<2>. (line   70)
* getaddresses() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line   36)
* getaddrinfo() (in module socket):      socket --- Low-level networking interface.
                                                             (line  243)
* getaddrlist() (rfc822.Message method): Message Objects<2>. (line   83)
* getallmatchingheaders() (rfc822.Message method): Message Objects<2>.
                                                             (line   35)
* getannotation() (imaplib.IMAP4 method): IMAP4 Objects.     (line  100)
* getargspec() (in module inspect):      Classes and functions<2>.
                                                             (line   17)
* GetArgv() (in module EasyDialogs):     EasyDialogs --- Basic Macintosh dialogs.
                                                             (line   63)
* getargvalues() (in module inspect):    Classes and functions<2>.
                                                             (line   31)
* getatime() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  111)
* getattr() (built-in function):         Built-in Functions. (line  580)
* getAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   31)
* getAttributeNode() (xml.dom.Element method): Element Objects<2>.
                                                             (line   37)
* getAttributeNodeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   47)
* getAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   41)
* GetBase() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   31)
* getbegyx() (curses.window method):     Window Objects.     (line  198)
* getbkgd() (curses.window method):      Window Objects.     (line  202)
* getboolean() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   86)
* getByteStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   48)
* getcallargs() (in module inspect):     Classes and functions<2>.
                                                             (line   67)
* getcanvas() (in module turtle):        Settings and special methods.
                                                             (line   53)
* getcaps() (in module mailcap):         mailcap --- Mailcap file handling.
                                                             (line   62)
* getch() (curses.window method):        Window Objects.     (line  207)
* getch() (in module msvcrt):            Console I/O.        (line   10)
* getCharacterStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   65)
* getche() (in module msvcrt):           Console I/O.        (line   26)
* getcheckinterval() (in module sys):    sys --- System-specific parameters and functions.
                                                             (line  418)
* getChild() (logging.Logger method):    Logger Objects.     (line   89)
* getChildNodes() (compiler.ast.Node method): AST Nodes.     (line   37)
* getChildren() (compiler.ast.Node method): AST Nodes.       (line   29)
* getchildren() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  112)
* getclasstree() (in module inspect):    Classes and functions<2>.
                                                             (line    6)
* GetColor() (in module ColorPicker):    ColorPicker --- Color selection dialog.
                                                             (line   11)
* GetColumnInfo() (msilib.View method):  View Objects.       (line   12)
* getColumnNumber() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line    8)
* getcomments() (in module inspect):     Retrieving source code.
                                                             (line   11)
* getcompname() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line   71)
* getcompname() (sunau.AU_read method):  AU_read Objects.    (line   35)
* getcompname() (wave.Wave_read method): Wave_read Objects.  (line   35)
* getcomptype() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line   65)
* getcomptype() (sunau.AU_read method):  AU_read Objects.    (line   30)
* getcomptype() (wave.Wave_read method): Wave_read Objects.  (line   31)
* getContentHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   19)
* getcontext() (in module decimal):      Context objects.    (line   14)
* getcontext() (mhlib.MH method):        MH Objects.         (line   20)
* GetCreatorAndType() (in module MacOS): MacOS --- Access to Mac OS interpreter features.
                                                             (line   64)
* getctime() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  135)
* getcurrent() (mhlib.Folder method):    Folder Objects.     (line   29)
* getcwd() (in module os):               Files and Directories.
                                                             (line   86)
* getcwdu (2to3 fixer):                  Fixers.             (line   77)
* getcwdu() (in module os):              Files and Directories.
                                                             (line   92)
* getdate() (rfc822.Message method):     Message Objects<2>. (line   95)
* getdate_tz() (rfc822.Message method):  Message Objects<2>. (line  107)
* getdecoder() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  133)
* getdefaultencoding() (in module sys):  sys --- System-specific parameters and functions.
                                                             (line  425)
* getdefaultlocale() (in module locale): locale --- Internationalization services.
                                                             (line  292)
* getdefaulttimeout() (in module socket): socket --- Low-level networking interface.
                                                             (line  511)
* getdlopenflags() (in module sys):      sys --- System-specific parameters and functions.
                                                             (line  432)
* getdoc() (in module inspect):          Retrieving source code.
                                                             (line    6)
* getDOMImplementation() (in module xml.dom): Module Contents<3>.
                                                             (line   17)
* getDTDHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   28)
* getEffectiveLevel() (logging.Logger method): Logger Objects.
                                                             (line   81)
* getegid() (in module os):              Process Parameters. (line   62)
* getElementsByTagName() (xml.dom.Document method): Document Objects.
                                                             (line   61)
* getElementsByTagName() (xml.dom.Element method): Element Objects<2>.
                                                             (line   14)
* getElementsByTagNameNS() (xml.dom.Document method): Document Objects.
                                                             (line   66)
* getElementsByTagNameNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   18)
* getencoder() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  125)
* getencoding() (mimetools.Message method): Additional Methods of Message Objects.
                                                             (line   25)
* getEncoding() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   32)
* getEntityResolver() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   37)
* getenv() (in module os):               Process Parameters. (line  177)
* getErrorHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   48)
* GetErrorString() (in module MacOS):    MacOS --- Access to Mac OS interpreter features.
                                                             (line   40)
* geteuid() (in module os):              Process Parameters. (line   70)
* getEvent() (xml.dom.pulldom.DOMEventStream method): DOMEventStream Objects.
                                                             (line    6)
* getEventCategory() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   43)
* getEventType() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   49)
* getException() (xml.sax.SAXException method): SAXException Objects.
                                                             (line   13)
* getFeature() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   67)
* GetFieldCount() (msilib.Record method): Record Objects.    (line    6)
* getfile() (in module inspect):         Retrieving source code.
                                                             (line   18)
* getfilesystemencoding() (in module sys): sys --- System-specific parameters and functions.
                                                             (line  440)
* getfirst() (cgi.FieldStorage method):  Higher Level Interface.
                                                             (line   59)
* getfirstmatchingheader() (rfc822.Message method): Message Objects<2>.
                                                             (line   42)
* getfloat() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   81)
* getfmts() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   70)
* getfqdn() (in module socket):          socket --- Low-level networking interface.
                                                             (line  288)
* getframeinfo() (in module inspect):    The interpreter stack.
                                                             (line   38)
* getframerate() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line   57)
* getframerate() (sunau.AU_read method): AU_read Objects.    (line   22)
* getframerate() (wave.Wave_read method): Wave_read Objects. (line   23)
* getfullname() (mhlib.Folder method):   Folder Objects.     (line   13)
* getgid() (in module os):               Process Parameters. (line   76)
* getgrall() (in module grp):            grp --- The group database.
                                                             (line   51)
* getgrgid() (in module grp):            grp --- The group database.
                                                             (line   40)
* getgrnam() (in module grp):            grp --- The group database.
                                                             (line   46)
* getgroups() (in module os):            Process Parameters. (line   82)
* getheader() (httplib.HTTPResponse method): HTTPResponse Objects.
                                                             (line   13)
* getheader() (rfc822.Message method):   Message Objects<2>. (line   56)
* getheaders() (httplib.HTTPResponse method): HTTPResponse Objects.
                                                             (line   18)
* gethostbyaddr() (in module socket):    Process Parameters. (line  320)
* gethostbyaddr() (in module socket) <1>: socket --- Low-level networking interface.
                                                             (line  335)
* gethostbyname() (in module socket):    socket --- Low-level networking interface.
                                                             (line  300)
* gethostbyname_ex() (in module socket): socket --- Low-level networking interface.
                                                             (line  310)
* gethostname() (in module socket):      Process Parameters. (line  320)
* gethostname() (in module socket) <1>:  socket --- Low-level networking interface.
                                                             (line  322)
* getincrementaldecoder() (in module codecs): codecs --- Codec registry and base classes.
                                                             (line  151)
* getincrementalencoder() (in module codecs): codecs --- Codec registry and base classes.
                                                             (line  141)
* getinfo() (zipfile.ZipFile method):    ZipFile Objects.    (line   55)
* getinnerframes() (in module inspect):  The interpreter stack.
                                                             (line   53)
* GetInputContext() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   37)
* getint() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   76)
* GetInteger() (msilib.Record method):   Record Objects.     (line   11)
* getitem() (in module operator):        operator --- Standard operators as functions.
                                                             (line  214)
* getiterator() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  116)
* getiterator() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   36)
* getitimer() (in module signal):        signal --- Set handlers for asynchronous events.
                                                             (line  179)
* getkey() (curses.window method):       Window Objects.     (line  215)
* getlast() (mhlib.Folder method):       Folder Objects.     (line   41)
* GetLastError() (in module ctypes):     Utility functions.  (line  118)
* getLength() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   10)
* getLevelName() (in module logging):    Module-Level Functions.
                                                             (line  157)
* getline() (in module linecache):       linecache --- Random access to text lines.
                                                             (line   18)
* getLineNumber() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line   12)
* getlist() (cgi.FieldStorage method):   Higher Level Interface.
                                                             (line   70)
* getloadavg() (in module os):           Miscellaneous System Information.
                                                             (line   37)
* getlocale() (in module locale):        locale --- Internationalization services.
                                                             (line  319)
* getLogger() (in module logging):       Module-Level Functions.
                                                             (line    9)
* getLoggerClass() (in module logging):  Module-Level Functions.
                                                             (line   21)
* getlogin() (in module os):             Process Parameters. (line  115)
* getmaintype() (mimetools.Message method): Additional Methods of Message Objects.
                                                             (line   37)
* getmark() (aifc.aifc method):          aifc --- Read and write AIFF and AIFC files.
                                                             (line   89)
* getmark() (sunau.AU_read method):      AU_read Objects.    (line   76)
* getmark() (wave.Wave_read method):     Wave_read Objects.  (line   61)
* getmarkers() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line   82)
* getmarkers() (sunau.AU_read method):   AU_read Objects.    (line   72)
* getmarkers() (wave.Wave_read method):  Wave_read Objects.  (line   57)
* getmaxyx() (curses.window method):     Window Objects.     (line  222)
* getmcolor() (in module fl):            Functions Defined in Module fl.
                                                             (line   95)
* getmember() (tarfile.TarFile method):  TarFile Objects.    (line   94)
* getmembers() (in module inspect):      Types and members.  (line  238)
* getmembers() (tarfile.TarFile method): TarFile Objects.    (line  102)
* getMessage() (logging.LogRecord method): LogRecord Objects.
                                                             (line   53)
* getMessage() (xml.sax.SAXException method): SAXException Objects.
                                                             (line    9)
* getmessagefilename() (mhlib.Folder method): Folder Objects.
                                                             (line   21)
* getMessageID() (logging.handlers.NTEventLogHandler method): NTEventLogHandler.
                                                             (line   60)
* getmodule() (in module inspect):       Retrieving source code.
                                                             (line   24)
* getmoduleinfo() (in module inspect):   Types and members.  (line  249)
* getmodulename() (in module inspect):   Types and members.  (line  266)
* getmouse() (in module curses):         Functions<2>.       (line  143)
* getmro() (in module inspect):          Classes and functions<2>.
                                                             (line   59)
* getmtime() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  123)
* getname() (chunk.Chunk method):        chunk --- Read IFF chunked data.
                                                             (line   64)
* getName() (threading.Thread method):   Thread Objects.     (line  132)
* getNameByQName() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   16)
* getnameinfo() (in module socket):      socket --- Low-level networking interface.
                                                             (line  346)
* getnames() (tarfile.TarFile method):   TarFile Objects.    (line  108)
* getNames() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   14)
* getnchannels() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line   49)
* getnchannels() (sunau.AU_read method): AU_read Objects.    (line   14)
* getnchannels() (wave.Wave_read method): Wave_read Objects. (line   15)
* getnframes() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line   61)
* getnframes() (sunau.AU_read method):   AU_read Objects.    (line   26)
* getnframes() (wave.Wave_read method):  Wave_read Objects.  (line   27)
* getnode:                               uuid --- UUID objects according to RFC 4122.
                                                             (line  127)
* getnode() (in module uuid):            uuid --- UUID objects according to RFC 4122.
                                                             (line  117)
* getopt (module):                       getopt --- C-style parser for command line options.
                                                             (line    6)
* getopt() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   49)
* getopt() (in module getopt):           getopt --- C-style parser for command line options.
                                                             (line   25)
* GetoptError:                           getopt --- C-style parser for command line options.
                                                             (line   76)
* getouterframes() (in module inspect):  The interpreter stack.
                                                             (line   46)
* getoutput() (in module commands):      commands --- Utilities for running commands.
                                                             (line   34)
* getpagesize() (in module resource):    Resource Usage.     (line   90)
* getparam() (mimetools.Message method): Additional Methods of Message Objects.
                                                             (line   18)
* getparams() (aifc.aifc method):        aifc --- Read and write AIFF and AIFC files.
                                                             (line   77)
* getparams() (in module al):            al --- Audio functions on the SGI.
                                                             (line   49)
* getparams() (sunau.AU_read method):    AU_read Objects.    (line   41)
* getparams() (wave.Wave_read method):   Wave_read Objects.  (line   40)
* getparyx() (curses.window method):     Window Objects.     (line  226)
* getpass (module):                      getpass --- Portable password input.
                                                             (line    6)
* getpass() (in module getpass):         getpass --- Portable password input.
                                                             (line    8)
* GetPassWarning:                        getpass --- Portable password input.
                                                             (line   32)
* getpath() (mhlib.MH method):           MH Objects.         (line   16)
* getpeercert() (ssl.SSLSocket method):  SSLSocket Objects.  (line   44)
* getpeername() (socket.socket method):  Socket Objects.     (line   74)
* getpen() (in module turtle):           Special Turtle methods.
                                                             (line   40)
* getpgid() (in module os):              Process Parameters. (line  125)
* getpgrp() (in module os):              Process Parameters. (line  135)
* getpid() (in module os):               Process Parameters. (line  141)
* getplist() (mimetools.Message method): Additional Methods of Message Objects.
                                                             (line    9)
* getpos() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   29)
* getppid() (in module os):              Process Parameters. (line  147)
* getpreferredencoding() (in module locale): locale --- Internationalization services.
                                                             (line  332)
* getprofile() (in module sys):          sys --- System-specific parameters and functions.
                                                             (line  505)
* getprofile() (mhlib.MH method):        MH Objects.         (line   12)
* GetProperty() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line    6)
* getProperty() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   81)
* GetPropertyCount() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line   17)
* getprotobyname() (in module socket):   socket --- Low-level networking interface.
                                                             (line  356)
* getproxies() (in module urllib):       Utility functions<2>.
                                                             (line   67)
* getPublicId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   10)
* getPublicId() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line   16)
* getpwall() (in module pwd):            pwd --- The password database.
                                                             (line   63)
* getpwnam() (in module pwd):            pwd --- The password database.
                                                             (line   59)
* getpwuid() (in module pwd):            pwd --- The password database.
                                                             (line   55)
* getQNameByName() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   20)
* getQNames() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   24)
* getquota() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  107)
* getquotaroot() (imaplib.IMAP4 method): IMAP4 Objects.      (line  114)
* getrandbits() (in module random):      random --- Generate pseudo-random numbers.
                                                             (line  125)
* getrawheader() (rfc822.Message method): Message Objects<2>.
                                                             (line   48)
* getreader() (in module codecs):        codecs --- Codec registry and base classes.
                                                             (line  161)
* getrecursionlimit() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  469)
* getrefcount() (in module sys):         sys --- System-specific parameters and functions.
                                                             (line  463)
* getresgid() (in module os):            Process Parameters. (line  162)
* getresponse() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   22)
* getresuid() (in module os):            Process Parameters. (line  153)
* getrlimit() (in module resource):      Resource Limits.    (line   24)
* getroot() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   41)
* getrusage() (in module resource):      Resource Usage.     (line    8)
* getsample() (in module audioop):       audioop --- Manipulate raw audio data.
                                                             (line   97)
* getsampwidth() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line   53)
* getsampwidth() (sunau.AU_read method): AU_read Objects.    (line   18)
* getsampwidth() (wave.Wave_read method): Wave_read Objects. (line   19)
* getscreen() (in module turtle):        Special Turtle methods.
                                                             (line   51)
* getscrollbarvalues() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   15)
* getsequences() (mhlib.Folder method):  Folder Objects.     (line   49)
* getsequencesfilename() (mhlib.Folder method): Folder Objects.
                                                             (line   17)
* getservbyname() (in module socket):    socket --- Low-level networking interface.
                                                             (line  365)
* getservbyport() (in module socket):    socket --- Low-level networking interface.
                                                             (line  371)
* GetSetDescriptorType (in module types): types --- Names for built-in types.
                                                             (line  193)
* getshapes() (in module turtle):        Settings and special methods.
                                                             (line   62)
* getsid() (in module os):               Process Parameters. (line  282)
* getsignal() (in module signal):        signal --- Set handlers for asynchronous events.
                                                             (line  140)
* getsitepackages() (in module site):    site --- Site-specific configuration hook.
                                                             (line  138)
* getsize() (chunk.Chunk method):        chunk --- Read IFF chunked data.
                                                             (line   69)
* getsize() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  146)
* getsizeof() (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  476)
* getsizes() (in module imgfile):        imgfile --- Support for SGI imglib files.
                                                             (line   21)
* getslice() (in module operator):       operator --- Standard operators as functions.
                                                             (line  219)
* getsockname() (socket.socket method):  Socket Objects.     (line   82)
* getsockopt() (socket.socket method):   Socket Objects.     (line   88)
* getsource() (in module inspect):       Retrieving source code.
                                                             (line   44)
* getsourcefile() (in module inspect):   Retrieving source code.
                                                             (line   28)
* getsourcelines() (in module inspect):  Retrieving source code.
                                                             (line   34)
* getspall() (in module spwd):           spwd --- The shadow password database.
                                                             (line   63)
* getspnam() (in module spwd):           spwd --- The shadow password database.
                                                             (line   59)
* getstate() (in module random):         random --- Generate pseudo-random numbers.
                                                             (line   88)
* getstatus() (in module commands):      commands --- Utilities for running commands.
                                                             (line   40)
* getstatusoutput() (in module commands): commands --- Utilities for running commands.
                                                             (line   25)
* getstr() (curses.window method):       Window Objects.     (line  232)
* GetString() (msilib.Record method):    Record Objects.     (line   16)
* getSubject() (logging.handlers.SMTPHandler method): SMTPHandler.
                                                             (line   38)
* getsubtype() (mimetools.Message method): Additional Methods of Message Objects.
                                                             (line   43)
* GetSummaryInformation() (msilib.Database method): Database Objects<2>.
                                                             (line   16)
* getSystemId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   18)
* getSystemId() (xml.sax.xmlreader.Locator method): Locator Objects.
                                                             (line   20)
* getsyx() (in module curses):           Functions<2>.       (line  157)
* gettarinfo() (tarfile.TarFile method): TarFile Objects.    (line  207)
* gettempdir() (in module tempfile):     tempfile --- Generate temporary files and directories.
                                                             (line  223)
* gettempprefix() (in module tempfile):  tempfile --- Generate temporary files and directories.
                                                             (line  247)
* getTestCaseNames() (unittest.TestLoader method): Loading and running tests.
                                                             (line   78)
* gettext (module):                      gettext --- Multilingual internationalization services.
                                                             (line    6)
* gettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   38)
* gettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   35)
* gettext() (in module gettext):         GNU gettext API.    (line   40)
* GetTicks() (in module MacOS):          MacOS --- Access to Mac OS interpreter features.
                                                             (line   59)
* gettimeout() (socket.socket method):   Socket Objects.     (line  238)
* gettrace() (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  511)
* getturtle() (in module turtle):        Special Turtle methods.
                                                             (line   40)
* gettype() (mimetools.Message method):  Additional Methods of Message Objects.
                                                             (line   31)
* getType() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   18)
* getuid() (in module os):               Process Parameters. (line  171)
* geturl() (urlparse.ParseResult method): Results of urlparse and urlsplit.
                                                             (line   11)
* getuser() (in module getpass):         getpass --- Portable password input.
                                                             (line   37)
* getuserbase() (in module site):        site --- Site-specific configuration hook.
                                                             (line  145)
* getusersitepackages() (in module site): site --- Site-specific configuration hook.
                                                             (line  153)
* getvalue() (io.BytesIO method):        Buffered Streams.   (line   20)
* getvalue() (io.StringIO method):       Text I/O.           (line  166)
* getvalue() (StringIO.StringIO method): StringIO --- Read and write strings as files.
                                                             (line   29)
* getValue() (xml.sax.xmlreader.Attributes method): The Attributes Interface.
                                                             (line   23)
* getValueByQName() (xml.sax.xmlreader.AttributesNS method): The AttributesNS Interface.
                                                             (line   12)
* getwch() (in module msvcrt):           Console I/O.        (line   19)
* getwche() (in module msvcrt):          Console I/O.        (line   31)
* getweakrefcount() (in module weakref): weakref --- Weak references.
                                                             (line  129)
* getweakrefs() (in module weakref):     weakref --- Weak references.
                                                             (line  134)
* getwelcome() (ftplib.FTP method):      FTP Objects.        (line   37)
* getwelcome() (nntplib.NNTP method):    NNTP Objects.       (line   12)
* getwelcome() (poplib.POP3 method):     POP3 Objects.       (line   20)
* getwin() (in module curses):           Functions<2>.       (line  162)
* getwindowsversion() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  524)
* getwriter() (in module codecs):        codecs --- Codec registry and base classes.
                                                             (line  169)
* getyx() (curses.window method):        Window Objects.     (line  236)
* get_all() (email.message.Message method): email message Representing an email message.
                                                             (line  259)
* get_all() (wsgiref.headers.Headers method): wsgiref headers -- WSGI response header tools.
                                                             (line   52)
* get_all_breaks() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  315)
* get_app() (wsgiref.simple_server.WSGIServer method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   66)
* get_archive_formats() (in module shutil): Archiving operations.
                                                             (line   37)
* get_begidx() (in module readline):     readline --- GNU readline interface.
                                                             (line  142)
* get_body_encoding() (email.charset.Charset method): email charset Representing character sets.
                                                             (line   88)
* get_boundary() (email.message.Message method): email message Representing an email message.
                                                             (line  475)
* get_break() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  301)
* get_breaks() (bdb.Bdb method):         bdb --- Debugger framework.
                                                             (line  305)
* get_buffer() (xdrlib.Packer method):   Packer Objects.     (line    8)
* get_buffer() (xdrlib.Unpacker method): Unpacker Objects.   (line   22)
* get_charset() (email.message.Message method): email message Representing an email message.
                                                             (line  163)
* get_charsets() (email.message.Message method): email message Representing an email message.
                                                             (line  511)
* get_children() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   66)
* get_children() (ttk.Treeview method):  ttk Treeview.       (line   19)
* get_close_matches() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line  195)
* get_code() (imputil.BuiltinImporter method): imputil --- Import utilities.
                                                             (line   83)
* get_code() (imputil.Importer method):  imputil --- Import utilities.
                                                             (line   38)
* get_code() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   28)
* get_completer() (in module readline):  readline --- GNU readline interface.
                                                             (line  129)
* get_completer_delims() (in module readline): readline --- GNU readline interface.
                                                             (line  154)
* get_completion_type() (in module readline): readline --- GNU readline interface.
                                                             (line  136)
* get_config_h_filename() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   41)
* get_config_h_filename() (in module sysconfig): Other functions.
                                                             (line   73)
* get_config_var() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   27)
* get_config_var() (in module sysconfig): Configuration variables.
                                                             (line   26)
* get_config_vars() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   32)
* get_config_vars() (in module sysconfig): Configuration variables.
                                                             (line   16)
* get_content_charset() (email.message.Message method): email message Representing an email message.
                                                             (line  498)
* get_content_maintype() (email.message.Message method): email message Representing an email message.
                                                             (line  330)
* get_content_subtype() (email.message.Message method): email message Representing an email message.
                                                             (line  338)
* get_content_type() (email.message.Message method): email message Representing an email message.
                                                             (line  312)
* get_count() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   87)
* get_current_history_length() (in module readline): readline --- GNU readline interface.
                                                             (line   70)
* get_data() (in module pkgutil):        pkgutil --- Package extension utility.
                                                             (line  172)
* get_data() (urllib2.Request method):   Request Objects.    (line   25)
* get_data() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   33)
* get_date() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   92)
* get_debug() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   56)
* get_default() (argparse.ArgumentParser method): Parser defaults.
                                                             (line   33)
* get_default_compiler() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   37)
* get_default_domain() (in module nis):  nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   49)
* get_default_type() (email.message.Message method): email message Representing an email message.
                                                             (line  345)
* get_dialect() (in module csv):         Module Contents<2>. (line   95)
* get_directory() (in module fl):        Functions Defined in Module fl.
                                                             (line   69)
* get_docstring() (in module ast):       ast Helpers.        (line   28)
* get_doctest() (doctest.DocTestParser method): DocTestParser objects.
                                                             (line   15)
* get_endidx() (in module readline):     readline --- GNU readline interface.
                                                             (line  146)
* get_environ() (wsgiref.simple_server.WSGIRequestHandler method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   88)
* get_errno() (in module ctypes):        Utility functions.  (line  125)
* get_examples() (doctest.DocTestParser method): DocTestParser objects.
                                                             (line   24)
* get_field() (string.Formatter method): String Formatting.  (line   55)
* get_file() (mailbox.Babyl method):     Babyl.              (line   49)
* get_file() (mailbox.Mailbox method):   Mailbox objects.    (line  163)
* get_file() (mailbox.Maildir method):   Maildir.            (line  119)
* get_file() (mailbox.mbox method):      mbox.               (line   33)
* get_file() (mailbox.MH method):        MH.                 (line   93)
* get_file() (mailbox.MMDF method):      MMDF.               (line   29)
* get_filename() (email.message.Message method): email message Representing an email message.
                                                             (line  465)
* get_filename() (in module fl):         Functions Defined in Module fl.
                                                             (line   69)
* get_filename() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   38)
* get_file_breaks() (bdb.Bdb method):    bdb --- Debugger framework.
                                                             (line  310)
* get_flags() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   63)
* get_flags() (mailbox.mboxMessage method): mboxMessage.     (line   64)
* get_flags() (mailbox.MMDFMessage method): MMDFMessage.     (line   63)
* get_folder() (mailbox.Maildir method): Maildir.            (line   65)
* get_folder() (mailbox.MH method):      MH.                 (line   36)
* get_frees() (symtable.Function method): Examining Symbol Tables.
                                                             (line   88)
* get_from() (mailbox.mboxMessage method): mboxMessage.      (line   47)
* get_from() (mailbox.MMDFMessage method): MMDFMessage.      (line   46)
* get_full_url() (urllib2.Request method): Request Objects.  (line   53)
* get_globals() (symtable.Function method): Examining Symbol Tables.
                                                             (line   84)
* get_grouped_opcodes() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  158)
* get_header() (urllib2.Request method): Request Objects.    (line   70)
* get_history_item() (in module readline): readline --- GNU readline interface.
                                                             (line   78)
* get_history_length() (in module readline): readline --- GNU readline interface.
                                                             (line   58)
* get_host() (urllib2.Request method):   Request Objects.    (line   61)
* get_id() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   15)
* get_ident() (in module thread):        thread --- Multiple threads of control.
                                                             (line   63)
* get_identifiers() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   52)
* get_importer() (in module pkgutil):    pkgutil --- Package extension utility.
                                                             (line   75)
* get_info() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line  102)
* GET_ITER (opcode):                     Python Bytecode Instructions.
                                                             (line   62)
* get_labels() (mailbox.Babyl method):   Babyl.              (line   35)
* get_labels() (mailbox.BabylMessage method): BabylMessage.  (line   47)
* get_last_error() (in module ctypes):   Utility functions.  (line  132)
* get_lineno() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   26)
* get_line_buffer() (in module readline): readline --- GNU readline interface.
                                                             (line   28)
* get_loader() (in module pkgutil):      pkgutil --- Package extension utility.
                                                             (line   89)
* get_locals() (symtable.Function method): Examining Symbol Tables.
                                                             (line   80)
* get_logger() (in module multiprocessing): Logging<2>.      (line   11)
* get_magic() (in module imp):           imp --- Access the import internals.
                                                             (line   10)
* get_makefile_filename() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   49)
* get_matching_blocks() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   94)
* get_message() (mailbox.Mailbox method): Mailbox objects.   (line  150)
* get_method() (urllib2.Request method): Request Objects.    (line   15)
* get_methods() (symtable.Class method): Examining Symbol Tables.
                                                             (line   98)
* get_mouse() (in module fl):            Functions Defined in Module fl.
                                                             (line   77)
* get_name() (symtable.Symbol method):   Examining Symbol Tables.
                                                             (line  108)
* get_name() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   19)
* get_namespace() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  169)
* get_namespaces() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  165)
* get_nonstandard_attr() (cookielib.Cookie method): Cookie Objects.
                                                             (line   99)
* get_nowait() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  148)
* get_nowait() (Queue.Queue method):     Queue Objects.      (line   59)
* get_objects() (in module gc):          gc --- Garbage Collector interface.
                                                             (line   60)
* get_opcodes() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  115)
* get_option() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   37)
* get_option_group() (optparse.OptionParser method): Grouping Options.
                                                             (line  103)
* get_option_order() (distutils.fancy_getopt.FancyGetopt method): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   62)
* get_origin_req_host() (urllib2.Request method): Request Objects.
                                                             (line   86)
* get_osfhandle() (in module msvcrt):    File Operations.    (line   49)
* get_output_charset() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  140)
* get_param() (email.message.Message method): email message Representing an email message.
                                                             (line  380)
* get_parameters() (symtable.Function method): Examining Symbol Tables.
                                                             (line   75)
* get_params() (email.message.Message method): email message Representing an email message.
                                                             (line  363)
* get_path() (in module sysconfig):      Installation paths. (line   73)
* get_paths() (in module sysconfig):     Installation paths. (line  103)
* get_path_names() (in module sysconfig): Installation paths.
                                                             (line   68)
* get_pattern() (in module fl):          Functions Defined in Module fl.
                                                             (line   69)
* get_payload() (email.message.Message method): email message Representing an email message.
                                                             (line   90)
* get_platform() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line    9)
* get_platform() (in module sysconfig):  Other functions.    (line   11)
* get_poly() (in module turtle):         Special Turtle methods.
                                                             (line   17)
* get_position() (xdrlib.Unpacker method): Unpacker Objects. (line   12)
* get_python_inc() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   57)
* get_python_lib() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   68)
* get_python_version() (in module sysconfig): Other functions.
                                                             (line    6)
* get_recsrc() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   81)
* get_referents() (in module gc):        gc --- Garbage Collector interface.
                                                             (line  119)
* get_referrers() (in module gc):        gc --- Garbage Collector interface.
                                                             (line   99)
* get_request() (SocketServer.BaseServer method): Server Objects.
                                                             (line  106)
* get_rgbmode() (in module fl):          Functions Defined in Module fl.
                                                             (line   35)
* get_scheme() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  153)
* get_scheme_names() (in module sysconfig): Installation paths.
                                                             (line   63)
* get_selector() (urllib2.Request method): Request Objects.  (line   65)
* get_sequences() (mailbox.MH method):   MH.                 (line   53)
* get_sequences() (mailbox.MHMessage method): MHMessage.     (line   32)
* get_server() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   45)
* get_server_certificate() (in module ssl): Functions Constants and Exceptions.
                                                             (line  170)
* get_socket() (telnetlib.Telnet method): Telnet Objects.    (line   93)
* get_source() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   46)
* get_special_folder_path() (built-in function): The Postinstallation script.
                                                             (line   32)
* get_stack() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  322)
* get_starttag_text() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   33)
* get_starttag_text() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line   73)
* get_stderr() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line   95)
* get_stderr() (wsgiref.simple_server.WSGIRequestHandler method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   98)
* get_stdin() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line   90)
* get_string() (mailbox.Mailbox method): Mailbox objects.    (line  157)
* get_subdir() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   47)
* get_suffixes() (in module imp):        imp --- Access the import internals.
                                                             (line   16)
* get_symbols() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   61)
* get_terminator() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line   92)
* get_threshold() (in module gc):        gc --- Garbage Collector interface.
                                                             (line   94)
* get_token() (shlex.shlex method):      shlex Objects.      (line    8)
* get_type() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   10)
* get_type() (urllib2.Request method):   Request Objects.    (line   57)
* get_unixfrom() (email.message.Message method): email message Representing an email message.
                                                             (line   76)
* get_usage() (optparse.OptionParser method): Other methods. (line   22)
* get_value() (string.Formatter method): String Formatting.  (line   65)
* get_version() (optparse.OptionParser method): Printing a version string.
                                                             (line   34)
* get_visible() (mailbox.BabylMessage method): BabylMessage. (line   63)
* gid (tarfile.TarInfo attribute):       TarInfo Objects.    (line   78)
* GIL:                                   Thread State and the Global Interpreter Lock.
                                                             (line    6)
* GIL <1>:                               Glossary.           (line  346)
* gl (module):                           gl --- Graphics Library interface.
                                                             (line    6)
* GL (module):                           GL --- Constants used with the gl module.
                                                             (line    6)
* glob (module):                         glob --- Unix style pathname pattern expansion.
                                                             (line    6)
* glob() (in module glob):               glob --- Unix style pathname pattern expansion.
                                                             (line   24)
* glob() (msilib.Directory method):      Directory Objects.  (line   39)
* global interpreter lock:               Thread State and the Global Interpreter Lock.
                                                             (line    6)
* global interpreter lock <1>:           Glossary.           (line  348)
* global; name; binding:                 The global statement.
                                                             (line    6)
* global; namespace:                     The standard type hierarchy.
                                                             (line  366)
* globals() (built-in function):         Built-in Functions. (line  589)
* globs (doctest.DocTest attribute):     DocTest Objects.    (line   24)
* gmtime() (in module time):             time --- Time access and conversions.
                                                             (line  164)
* gname (tarfile.TarInfo attribute):     TarInfo Objects.    (line   86)
* GNOME:                                 The Catalog constructor.
                                                             (line    6)
* GNU_FORMAT (in module tarfile):        tarfile --- Read and write tar archive files.
                                                             (line  199)
* gnu_getopt() (in module getopt):       getopt --- C-style parser for command line options.
                                                             (line   62)
* got (doctest.DocTestFailure attribute): Debugging.         (line  216)
* goto() (in module turtle):             Turtle motion.      (line   70)
* grammar:                               Notation.           (line    6)
* Graphical User Interface:              Graphical User Interfaces with Tk.
                                                             (line    6)
* GREATER (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* GREATEREQUAL (in module token):        token --- Constants used with Python parse trees.
                                                             (line   40)
* Greenwich Mean Time:                   time --- Time access and conversions.
                                                             (line   45)
* grey22grey() (in module imageop):      imageop --- Manipulate raw image data.
                                                             (line   87)
* grey2grey2() (in module imageop):      imageop --- Manipulate raw image data.
                                                             (line   72)
* grey2grey4() (in module imageop):      imageop --- Manipulate raw image data.
                                                             (line   67)
* grey2mono() (in module imageop):       imageop --- Manipulate raw image data.
                                                             (line   47)
* grey42grey() (in module imageop):      imageop --- Manipulate raw image data.
                                                             (line   83)
* group() (nntplib.NNTP method):         NNTP Objects.       (line   90)
* group() (re.MatchObject method):       Match Objects.      (line   27)
* groupby() (in module itertools):       Itertool functions. (line  211)
* groupdict() (re.MatchObject method):   Match Objects.      (line  108)
* groupindex (re.RegexObject attribute): Regular Expression Objects.
                                                             (line   99)
* grouping:                              Indentation.        (line    6)
* groups (re.RegexObject attribute):     Regular Expression Objects.
                                                             (line   95)
* groups() (re.MatchObject method):      Match Objects.      (line   82)
* grp (module):                          grp --- The group database.
                                                             (line    6)
* gt() (in module operator):             operator --- Standard operators as functions.
                                                             (line   19)
* guess_all_extensions() (in module mimetypes): mimetypes --- Map filenames to MIME types.
                                                             (line   46)
* guess_all_extensions() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   62)
* guess_extension() (in module mimetypes): mimetypes --- Map filenames to MIME types.
                                                             (line   58)
* guess_extension() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   52)
* guess_scheme() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   12)
* guess_type() (in module mimetypes):    mimetypes --- Map filenames to MIME types.
                                                             (line   24)
* guess_type() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   57)
* GUI:                                   Graphical User Interfaces with Tk.
                                                             (line    6)
* gzip (module):                         gzip --- Support for gzip files.
                                                             (line    6)
* GzipFile (class in gzip):              gzip --- Support for gzip files.
                                                             (line   26)
* halfdelay() (in module curses):        Functions<2>.       (line  192)
* handle an exception:                   Exceptions<2>.      (line    6)
* handle() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  162)
* handle() (logging.Handler method):     Handler Objects.    (line   73)
* handle() (logging.Logger method):      Logger Objects.     (line  219)
* handle() (logging.NullHandler method): NullHandler.        (line   20)
* handle() (SocketServer.RequestHandler method): RequestHandler Objects.
                                                             (line   17)
* handle() (wsgiref.simple_server.WSGIRequestHandler method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line  103)
* handleError() (logging.Handler method): Handler Objects.   (line   80)
* handleError() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   29)
* handler() (in module cgitb):           cgitb --- Traceback manager for CGI scripts.
                                                             (line   45)
* handle_accept() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  138)
* handle_charref() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   93)
* handle_charref() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  123)
* handle_close() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  129)
* handle_comment() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line  101)
* handle_comment() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  180)
* handle_connect() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  123)
* handle_data() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   81)
* handle_data() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  117)
* handle_decl() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line  114)
* handle_decl() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  188)
* handle_endtag() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   65)
* handle_endtag() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  107)
* handle_entityref() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   87)
* handle_entityref() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  154)
* handle_error() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  133)
* handle_error() (SocketServer.BaseServer method): Server Objects.
                                                             (line  112)
* handle_expt() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  117)
* handle_image() (htmllib.HTMLParser method): HTMLParser Objects.
                                                             (line   38)
* handle_one_request() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  169)
* handle_pi() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line  122)
* handle_read() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  102)
* handle_request() (SimpleXMLRPCServer.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   41)
* handle_request() (SocketServer.BaseServer method): Server Objects.
                                                             (line   19)
* handle_startendtag() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   72)
* handle_starttag() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   46)
* handle_starttag() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line   81)
* handle_timeout() (SocketServer.BaseServer method): Server Objects.
                                                             (line  119)
* handle_write() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  107)
* hasattr() (built-in function):         Built-in Functions. (line  596)
* hasAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   22)
* hasAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   26)
* hasAttributes() (xml.dom.Node method): Node Objects.       (line   94)
* hasChildNodes() (xml.dom.Node method): Node Objects.       (line   98)
* hascompare (in module dis):            dis --- Disassembler for Python bytecode.
                                                             (line  131)
* hasconst (in module dis):              dis --- Disassembler for Python bytecode.
                                                             (line  107)
* hasFeature() (xml.dom.DOMImplementation method): DOMImplementation Objects.
                                                             (line   11)
* hasfree (in module dis):               dis --- Disassembler for Python bytecode.
                                                             (line  111)
* hash character:                        Comments.           (line    6)
* hash() (built-in function):            Built-in Functions. (line  603)
* hash.block_size (in module hashlib):   hashlib --- Secure hashes and message digests.
                                                             (line   85)
* hash.digest_size (in module hashlib):  hashlib --- Secure hashes and message digests.
                                                             (line   81)
* hashable:                              Dictionary displays.
                                                             (line   30)
* hashable <1>:                          Glossary.           (line  371)
* Hashable (class in collections):       Collections Abstract Base Classes.
                                                             (line   76)
* hashlib (module):                      hashlib --- Secure hashes and message digests.
                                                             (line    6)
* hashlib.algorithms (in module hashlib): hashlib --- Secure hashes and message digests.
                                                             (line   71)
* hashopen() (in module bsddb):          bsddb --- Interface to Berkeley DB library.
                                                             (line   51)
* hasjabs (in module dis):               dis --- Disassembler for Python bytecode.
                                                             (line  123)
* hasjrel (in module dis):               dis --- Disassembler for Python bytecode.
                                                             (line  119)
* haslocal (in module dis):              dis --- Disassembler for Python bytecode.
                                                             (line  127)
* hasname (in module dis):               dis --- Disassembler for Python bytecode.
                                                             (line  115)
* has_children() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   39)
* has_colors() (in module curses):       Functions<2>.       (line  168)
* has_data() (urllib2.Request method):   Request Objects.    (line   21)
* has_exec() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   44)
* has_extn() (smtplib.SMTP method):      SMTP Objects.       (line   82)
* has_function() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  213)
* has_header() (csv.Sniffer method):     Module Contents<2>. (line  192)
* has_header() (urllib2.Request method): Request Objects.    (line   46)
* has_ic() (in module curses):           Functions<2>.       (line  173)
* has_il() (in module curses):           Functions<2>.       (line  180)
* has_import_star() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   48)
* has_ipv6 (in module socket):           socket --- Low-level networking interface.
                                                             (line  210)
* has_key (2to3 fixer):                  Fixers.             (line   81)
* has_key() (bsddb.bsddbobject method):  Hash BTree and Record Objects.
                                                             (line   26)
* has_key() (dict method):               Mapping Types --- dict.
                                                             (line  146)
* has_key() (email.message.Message method): email message Representing an email message.
                                                             (line  232)
* has_key() (in module curses):          Functions<2>.       (line  187)
* has_key() (mailbox.Mailbox method):    Mailbox objects.    (line  177)
* has_nonstandard_attr() (cookielib.Cookie method): Cookie Objects.
                                                             (line   95)
* has_option() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   33)
* has_option() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   42)
* has_section() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   24)
* HAVE_ARGUMENT (opcode):                Python Bytecode Instructions.
                                                             (line  622)
* have_unicode (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   35)
* head() (nntplib.NNTP method):          NNTP Objects.       (line  126)
* Header (class in email.header):        email header Internationalized headers.
                                                             (line   48)
* HeaderError:                           tarfile --- Read and write tar archive files.
                                                             (line  184)
* HeaderParseError:                      email errors Exception and Defect classes.
                                                             (line   20)
* headers (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   82)
* Headers (class in wsgiref.headers):    wsgiref headers -- WSGI response header tools.
                                                             (line    9)
* headers (rfc822.Message attribute):    Message Objects<2>. (line  132)
* headers (xmlrpclib.ProtocolError attribute): ProtocolError Objects.
                                                             (line   22)
* header_encode() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  152)
* header_encoding (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   51)
* header_items() (urllib2.Request method): Request Objects.  (line   75)
* header_offset (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   93)
* heading() (in module turtle):          Tell Turtle's state.
                                                             (line   57)
* heading() (ttk.Treeview method):       ttk Treeview.       (line  105)
* heapify() (in module heapq):           heapq --- Heap queue algorithm.
                                                             (line   60)
* heapmin() (in module msvcrt):          Other Functions.    (line    6)
* heappop() (in module heapq):           heapq --- Heap queue algorithm.
                                                             (line   45)
* heappush() (in module heapq):          heapq --- Heap queue algorithm.
                                                             (line   40)
* heappushpop() (in module heapq):       heapq --- Heap queue algorithm.
                                                             (line   51)
* heapq (module):                        heapq --- Heap queue algorithm.
                                                             (line    6)
* heapreplace() (in module heapq):       heapq --- Heap queue algorithm.
                                                             (line   64)
* helo() (smtplib.SMTP method):          SMTP Objects.       (line   42)
* help (optparse.Option attribute):      Option attributes.  (line   72)
* help() (built-in function):            Built-in Functions. (line  611)
* help() (nntplib.NNTP method):          NNTP Objects.       (line   99)
* help; online:                          pydoc --- Documentation generator and online help system.
                                                             (line    8)
* herror:                                socket --- Low-level networking interface.
                                                             (line  113)
* hex (uuid.UUID attribute):             uuid --- UUID objects according to RFC 4122.
                                                             (line   91)
* hex() (built-in function):             Built-in Functions. (line  626)
* hex() (float method):                  Additional Methods on Float.
                                                             (line   37)
* hex() (in module future_builtins):     future_builtins --- Python 3 builtins.
                                                             (line   42)
* hexadecimal literal:                   Numeric literals.   (line    6)
* hexadecimal; literals:                 Numeric Types --- int float long complex.
                                                             (line   23)
* hexbin() (in module binhex):           binhex --- Encode and decode binhex4 files.
                                                             (line   22)
* hexdigest() (hashlib.hash method):     hashlib --- Secure hashes and message digests.
                                                             (line  108)
* hexdigest() (hmac.HMAC method):        hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   43)
* hexdigest() (md5.md5 method):          md5 --- MD5 message digest algorithm.
                                                             (line   65)
* hexdigest() (sha.sha method):          sha --- SHA-1 message digest algorithm.
                                                             (line   48)
* hexdigits (in module string):          String constants.   (line   28)
* hexlify() (in module binascii):        binascii --- Convert between binary and ASCII.
                                                             (line  119)
* hexversion (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  582)
* hidden() (curses.panel.Panel method):  Panel Objects.      (line   25)
* hide() (curses.panel.Panel method):    Panel Objects.      (line   29)
* hide() (ttk.Notebook method):          ttk Notebook.       (line   23)
* hideturtle() (in module turtle):       Visibility.         (line    6)
* hide_cookie2 (cookielib.CookiePolicy attribute): CookiePolicy Objects.
                                                             (line   75)
* hide_form() (fl.form method):          Form Objects.       (line   20)
* HierarchyRequestErr:                   Exceptions<6>.      (line   31)
* HIGHEST_PROTOCOL (in module pickle):   Usage.              (line   12)
* HKEY_CLASSES_ROOT (in module _winreg): HKEY_* Constants.   (line    6)
* HKEY_CURRENT_CONFIG (in module _winreg): HKEY_* Constants. (line   38)
* HKEY_CURRENT_USER (in module _winreg): HKEY_* Constants.   (line   12)
* HKEY_DYN_DATA (in module _winreg):     HKEY_* Constants.   (line   43)
* HKEY_LOCAL_MACHINE (in module _winreg): HKEY_* Constants.  (line   19)
* HKEY_PERFORMANCE_DATA (in module _winreg): HKEY_* Constants.
                                                             (line   31)
* HKEY_USERS (in module _winreg):        HKEY_* Constants.   (line   25)
* hline() (curses.window method):        Window Objects.     (line  241)
* HList (class in Tix):                  Hierarchical ListBox.
                                                             (line    6)
* hls_to_rgb() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   40)
* hmac (module):                         hmac --- Keyed-Hashing for Message Authentication.
                                                             (line    6)
* HOME:                                  os path --- Common pathname manipulations.
                                                             (line   87)
* HOME <1>:                              os path --- Common pathname manipulations.
                                                             (line   93)
* HOME <2>:                              user --- User-specific configuration hook.
                                                             (line   26)
* HOME <3>:                              distutils util --- Miscellaneous other utility functions.
                                                             (line   82)
* HOME <4>:                              Location and names of config files.
                                                             (line   50)
* HOME <5>:                              Location and names of config files.
                                                             (line   67)
* home() (in module turtle):             Turtle motion.      (line  153)
* HOMEDRIVE:                             os path --- Common pathname manipulations.
                                                             (line   94)
* HOMEDRIVE <1>:                         Location and names of config files.
                                                             (line   68)
* HOMEPATH:                              os path --- Common pathname manipulations.
                                                             (line   94)
* HOMEPATH <1>:                          Location and names of config files.
                                                             (line   68)
* hook_compressed() (in module fileinput): fileinput --- Iterate over lines from multiple input streams.
                                                             (line  161)
* hook_encoded() (in module fileinput):  fileinput --- Iterate over lines from multiple input streams.
                                                             (line  174)
* hosts (netrc.netrc attribute):         netrc Objects.      (line   23)
* hotshot (module):                      hotshot --- High performance logging profiler.
                                                             (line    6)
* hotshot.stats (module):                Using hotshot data. (line    6)
* hour (datetime.datetime attribute):    datetime Objects.   (line  165)
* hour (datetime.time attribute):        time Objects.       (line   48)
* HRESULT (class in ctypes):             Fundamental data types<2>.
                                                             (line  214)
* hStdError (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   37)
* hStdInput (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   22)
* hStdOutput (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   30)
* hsv_to_rgb() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   48)
* ht() (in module turtle):               Visibility.         (line    6)
* HTML:                                  HTMLParser --- Simple HTML and XHTML parser.
                                                             (line   13)
* HTML <1>:                              htmllib --- A parser for HTML documents.
                                                             (line    9)
* HTML <2>:                              urllib Restrictions.
                                                             (line   27)
* HTMLCalendar (class in calendar):      calendar --- General calendar-related functions.
                                                             (line  142)
* HtmlDiff (class in difflib):           difflib --- Helpers for computing deltas.
                                                             (line   77)
* HtmlDiff.make_file() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line  106)
* HtmlDiff.make_table() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line  130)
* HtmlDiff.__init__() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line   87)
* htmlentitydefs (module):               htmlentitydefs --- Definitions of HTML general entities.
                                                             (line    6)
* htmllib (module):                      htmllib --- A parser for HTML documents.
                                                             (line    6)
* HTMLParseError:                        HTMLParser --- Simple HTML and XHTML parser.
                                                             (line   39)
* HTMLParseError <1>:                    htmllib --- A parser for HTML documents.
                                                             (line   59)
* HTMLParser (class in htmllib):         htmllib --- A parser for HTML documents.
                                                             (line   52)
* HTMLParser (class in htmllib) <1>:     formatter --- Generic output formatting.
                                                             (line    6)
* HTMLParser (class in HTMLParser):      HTMLParser --- Simple HTML and XHTML parser.
                                                             (line   22)
* HTMLParser (module):                   HTMLParser --- Simple HTML and XHTML parser.
                                                             (line    6)
* htonl() (in module socket):            socket --- Low-level networking interface.
                                                             (line  425)
* htons() (in module socket):            socket --- Low-level networking interface.
                                                             (line  432)
* HTTP; httplib (standard module):       httplib --- HTTP protocol client.
                                                             (line   11)
* HTTP; protocol:                        cgi --- Common Gateway Interface support.
                                                             (line    6)
* HTTP; protocol <1>:                    urllib Restrictions.
                                                             (line    6)
* HTTP; protocol <2>:                    urllib Restrictions.
                                                             (line   27)
* HTTP; protocol <3>:                    httplib --- HTTP protocol client.
                                                             (line   11)
* HTTP; protocol <4>:                    BaseHTTPServer --- Basic HTTP server.
                                                             (line   11)
* HTTPBasicAuthHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  230)
* HTTPConnection (class in httplib):     httplib --- HTTP protocol client.
                                                             (line   29)
* HTTPCookieProcessor (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  195)
* httpd:                                 BaseHTTPServer --- Basic HTTP server.
                                                             (line   11)
* HTTPDefaultErrorHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  186)
* HTTPDigestAuthHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  253)
* HTTPError:                             urllib2 --- extensible library for opening URLs.
                                                             (line  109)
* HTTPErrorProcessor (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  293)
* HTTPException:                         httplib --- HTTP protocol client.
                                                             (line   95)
* HTTPHandler (class in logging.handlers): HTTPHandler.      (line   10)
* HTTPHandler (class in urllib2):        urllib2 --- extensible library for opening URLs.
                                                             (line  268)
* httplib (module):                      httplib --- HTTP protocol client.
                                                             (line    6)
* HTTPMessage (class in httplib):        httplib --- HTTP protocol client.
                                                             (line   85)
* HTTPPasswordMgr (class in urllib2):    urllib2 --- extensible library for opening URLs.
                                                             (line  212)
* HTTPPasswordMgrWithDefaultRealm (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  216)
* HTTPRedirectHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  191)
* HTTPResponse (class in httplib):       httplib --- HTTP protocol client.
                                                             (line   78)
* HTTPSConnection (class in httplib):    httplib --- HTTP protocol client.
                                                             (line   60)
* HTTPServer (class in BaseHTTPServer):  BaseHTTPServer --- Basic HTTP server.
                                                             (line   32)
* HTTPSHandler (class in urllib2):       urllib2 --- extensible library for opening URLs.
                                                             (line  272)
* https_open() (urllib2.HTTPSHandler method): HTTPSHandler Objects.
                                                             (line    6)
* HTTPS_PORT (in module httplib):        httplib --- HTTP protocol client.
                                                             (line  176)
* https_response() (urllib2.HTTPErrorProcessor method): HTTPErrorProcessor Objects.
                                                             (line   20)
* http_error_301() (urllib2.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   31)
* http_error_302() (urllib2.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   38)
* http_error_303() (urllib2.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   44)
* http_error_307() (urllib2.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   50)
* http_error_401() (urllib2.HTTPBasicAuthHandler method): HTTPBasicAuthHandler Objects.
                                                             (line    6)
* http_error_401() (urllib2.HTTPDigestAuthHandler method): HTTPDigestAuthHandler Objects.
                                                             (line    6)
* http_error_407() (urllib2.ProxyBasicAuthHandler method): ProxyBasicAuthHandler Objects.
                                                             (line    6)
* http_error_407() (urllib2.ProxyDigestAuthHandler method): ProxyDigestAuthHandler Objects.
                                                             (line    6)
* http_error_auth_reqed() (urllib2.AbstractBasicAuthHandler method): AbstractBasicAuthHandler Objects.
                                                             (line    6)
* http_error_auth_reqed() (urllib2.AbstractDigestAuthHandler method): AbstractDigestAuthHandler Objects.
                                                             (line    6)
* http_error_default() (urllib2.BaseHandler method): BaseHandler Objects.
                                                             (line   67)
* http_error_nnn() (urllib2.BaseHandler method): BaseHandler Objects.
                                                             (line   84)
* http_open() (urllib2.HTTPHandler method): HTTPHandler Objects.
                                                             (line    6)
* HTTP_PORT (in module httplib):         httplib --- HTTP protocol client.
                                                             (line  172)
* http_proxy:                            High-level interface.
                                                             (line   61)
* http_proxy <1>:                        urllib2 --- extensible library for opening URLs.
                                                             (line   59)
* http_proxy <2>:                        Examples<13>.       (line   50)
* http_proxy <3>:                        Basic Authentication.
                                                             (line   62)
* http_response() (urllib2.HTTPErrorProcessor method): HTTPErrorProcessor Objects.
                                                             (line    8)
* http_version (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  265)
* hypertext:                             htmllib --- A parser for HTML documents.
                                                             (line    9)
* hypot() (in module math):              Trigonometric functions.
                                                             (line   32)
* I (in module re):                      Module Contents.    (line   44)
* I/O control; buffering:                Built-in Functions. (line  918)
* I/O control; buffering <1>:            File Object Creation.
                                                             (line   10)
* I/O control; buffering <2>:            Socket Objects.     (line  123)
* iadd() (in module operator):           operator --- Standard operators as functions.
                                                             (line  275)
* iand() (in module operator):           operator --- Standard operators as functions.
                                                             (line  282)
* IC (class in ic):                      ic --- Access to the Mac OS X Internet Config.
                                                             (line   28)
* ic (module):                           ic --- Access to the Mac OS X Internet Config.
                                                             (line    6)
* iconcat() (in module operator):        operator --- Standard operators as functions.
                                                             (line  289)
* icopen (module):                       icopen --- Internet Config replacement for open.
                                                             (line    6)
* id() (built-in function):              Built-in Functions. (line  649)
* id() (unittest.TestCase method):       Test cases.         (line  586)
* idcok() (curses.window method):        Window Objects.     (line  248)
* ident (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* ident (select.kevent attribute):       Kevent Objects.     (line    8)
* ident (threading.Thread attribute):    Thread Objects.     (line  137)
* identchars (cmd.Cmd attribute):        Cmd Objects.        (line  127)
* identifier:                            Identifiers and keywords.
                                                             (line    6)
* identifier <1>:                        Identifiers Names.  (line    6)
* identify() (ttk.Notebook method):      ttk Notebook.       (line   32)
* identify() (ttk.Treeview method):      ttk Treeview.       (line  143)
* identify() (ttk.Widget method):        ttk Widget.         (line   12)
* identify_column() (ttk.Treeview method): ttk Treeview.     (line  153)
* identify_element() (ttk.Treeview method): ttk Treeview.    (line  182)
* identify_region() (ttk.Treeview method): ttk Treeview.     (line  160)
* identify_row() (ttk.Treeview method):  ttk Treeview.       (line  149)
* identity of an object:                 Objects values and types.
                                                             (line   11)
* identity; test:                        Comparisons.        (line  119)
* idioms (2to3 fixer):                   Fixers.             (line   85)
* idiv() (in module operator):           operator --- Standard operators as functions.
                                                             (line  297)
* IDLE:                                  IDLE.               (line    6)
* IDLE <1>:                              Glossary.           (line  389)
* idle() (FrameWork.Application method): Application Objects.
                                                             (line   77)
* IDLESTARTUP:                           Startup.            (line    7)
* idlok() (curses.window method):        Window Objects.     (line  256)
* IEEE-754:                              fpectl --- Floating point exception control.
                                                             (line   11)
* ifilter() (in module itertools):       Itertool functions. (line  266)
* ifilterfalse() (in module itertools):  Itertool functions. (line  280)
* ifloordiv() (in module operator):      operator --- Standard operators as functions.
                                                             (line  305)
* iglob() (in module glob):              glob --- Unix style pathname pattern expansion.
                                                             (line   33)
* ignorableWhitespace() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  150)
* IGNORECASE (in module re):             Module Contents.    (line   44)
* ignore_errors() (in module codecs):    codecs --- Codec registry and base classes.
                                                             (line  219)
* IGNORE_EXCEPTION_DETAIL (in module doctest): Option Flags. (line   55)
* ignore_patterns() (in module shutil):  Directory and files operations.
                                                             (line   54)
* ihave() (nntplib.NNTP method):         NNTP Objects.       (line  178)
* ilshift() (in module operator):        operator --- Standard operators as functions.
                                                             (line  312)
* imag (numbers.Complex attribute):      The numeric tower.  (line   19)
* imageop (module):                      imageop --- Manipulate raw image data.
                                                             (line    6)
* imaginary literal:                     Numeric literals.   (line    6)
* imap() (in module itertools):          Itertool functions. (line  294)
* imap() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line   80)
* IMAP4 (class in imaplib):              imaplib --- IMAP4 protocol client.
                                                             (line   20)
* IMAP4.abort:                           imaplib --- IMAP4 protocol client.
                                                             (line   36)
* IMAP4.error:                           imaplib --- IMAP4 protocol client.
                                                             (line   31)
* IMAP4.readonly:                        imaplib --- IMAP4 protocol client.
                                                             (line   43)
* IMAP4; protocol:                       imaplib --- IMAP4 protocol client.
                                                             (line    6)
* IMAP4_SSL (class in imaplib):          imaplib --- IMAP4 protocol client.
                                                             (line   52)
* IMAP4_SSL; protocol:                   imaplib --- IMAP4 protocol client.
                                                             (line    6)
* IMAP4_stream (class in imaplib):       imaplib --- IMAP4 protocol client.
                                                             (line   64)
* IMAP4_stream; protocol:                imaplib --- IMAP4 protocol client.
                                                             (line    6)
* imaplib (module):                      imaplib --- IMAP4 protocol client.
                                                             (line    6)
* imap_unordered() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line   95)
* imgfile (module):                      imgfile --- Support for SGI imglib files.
                                                             (line    6)
* imghdr (module):                       imghdr --- Determine the type of an image.
                                                             (line    6)
* immedok() (curses.window method):      Window Objects.     (line  262)
* immutable:                             Glossary.           (line  395)
* immutable object:                      Objects values and types.
                                                             (line   11)
* immutable; data; type:                 Literals<2>.        (line   18)
* immutable; object:                     Literals<2>.        (line   18)
* immutable; object <1>:                 Dictionary displays.
                                                             (line   30)
* ImmutableSet (class in sets):          sets --- Unordered collections of unique elements.
                                                             (line   49)
* imod() (in module operator):           operator --- Standard operators as functions.
                                                             (line  319)
* imp (module):                          imp --- Access the import internals.
                                                             (line    6)
* ImpImporter (class in pkgutil):        pkgutil --- Package extension utility.
                                                             (line   49)
* ImpLoader (class in pkgutil):          pkgutil --- Package extension utility.
                                                             (line   61)
* import (2to3 fixer):                   Fixers.             (line  101)
* Import module:                         Edit menu.          (line   95)
* importer:                              Glossary.           (line  422)
* Importer (class in imputil):           imputil --- Import utilities.
                                                             (line   30)
* ImportError:                           Built-in Exceptions.
                                                             (line  174)
* importing:                             Glossary.           (line  417)
* importlib (module):                    importlib -- Convenience wrappers for __import__.
                                                             (line    6)
* ImportManager (class in imputil):      imputil --- Import utilities.
                                                             (line   14)
* imports (2to3 fixer):                  Fixers.             (line  105)
* imports2 (2to3 fixer):                 Fixers.             (line  109)
* ImportWarning:                         Built-in Exceptions.
                                                             (line  483)
* import_file() (imputil.DynLoadSuffixImporter method): imputil --- Import utilities.
                                                             (line   95)
* import_fresh_module() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line  206)
* IMPORT_FROM (opcode):                  Python Bytecode Instructions.
                                                             (line  456)
* import_module() (in module importlib): importlib -- Convenience wrappers for __import__.
                                                             (line   13)
* import_module() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line  195)
* IMPORT_NAME (opcode):                  Python Bytecode Instructions.
                                                             (line  448)
* IMPORT_STAR (opcode):                  Python Bytecode Instructions.
                                                             (line  310)
* import_top() (imputil.Importer method): imputil --- Import utilities.
                                                             (line   34)
* ImproperConnectionState:               httplib --- HTTP protocol client.
                                                             (line  139)
* imputil (module):                      imputil --- Import utilities.
                                                             (line    6)
* imul() (in module operator):           operator --- Standard operators as functions.
                                                             (line  326)
* im_class (method attribute):           The standard type hierarchy.
                                                             (line  401)
* im_class (method attribute) <1>:       The standard type hierarchy.
                                                             (line  417)
* im_func (method attribute):            The standard type hierarchy.
                                                             (line  388)
* im_func (method attribute) <1>:        The standard type hierarchy.
                                                             (line  401)
* im_func (method attribute) <2>:        The standard type hierarchy.
                                                             (line  411)
* im_func (method attribute) <3>:        The standard type hierarchy.
                                                             (line  417)
* im_self (method attribute):            The standard type hierarchy.
                                                             (line  388)
* im_self (method attribute) <1>:        The standard type hierarchy.
                                                             (line  401)
* im_self (method attribute) <2>:        The standard type hierarchy.
                                                             (line  417)
* inc() (EasyDialogs.ProgressBar method): ProgressBar Objects.
                                                             (line   58)
* inch() (curses.window method):         Window Objects.     (line  270)
* inclusive; or:                         Binary bitwise operations.
                                                             (line   21)
* Incomplete:                            binascii --- Convert between binary and ASCII.
                                                             (line  140)
* IncompleteRead:                        httplib --- HTTP protocol client.
                                                             (line  133)
* IncrementalDecoder (class in codecs):  IncrementalDecoder Objects.
                                                             (line   11)
* IncrementalEncoder (class in codecs):  IncrementalEncoder Objects.
                                                             (line   13)
* IncrementalNewlineDecoder (class in io): Text I/O.         (line  188)
* IncrementalParser (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   18)
* increment_lineno() (in module ast):    ast Helpers.        (line   44)
* incr_item():                           Exceptions<7>.      (line   80)
* incr_item() <1>:                       Exceptions<7>.      (line  125)
* indent (doctest.Example attribute):    Example Objects.    (line   49)
* INDENT (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* INDENT token:                          Indentation.        (line   29)
* indentation:                           Indentation.        (line    6)
* indentation <1>:                       Python Shell window.
                                                             (line   17)
* IndentationError:                      Built-in Exceptions.
                                                             (line  296)
* Independent JPEG Group:                jpeg --- Read and write JPEG files.
                                                             (line    9)
* index (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* index operation:                       The standard type hierarchy.
                                                             (line  125)
* index() (array.array method):          array --- Efficient arrays of numeric values.
                                                             (line  178)
* index() (in module operator):          operator --- Standard operators as functions.
                                                             (line  103)
* index() (in module string):            Deprecated string functions.
                                                             (line   82)
* index() (list method):                 Mutable Sequence Types.
                                                             (line   13)
* index() (str method):                  String Methods<2>.  (line  139)
* index() (ttk.Notebook method):         ttk Notebook.       (line   37)
* index() (ttk.Treeview method):         ttk Treeview.       (line  188)
* IndexError:                            Built-in Exceptions.
                                                             (line  180)
* indexOf() (in module operator):        operator --- Standard operators as functions.
                                                             (line  227)
* IndexSizeErr:                          Exceptions<6>.      (line   36)
* indices() (slice method):              The standard type hierarchy.
                                                             (line  770)
* inet_aton() (in module socket):        socket --- Low-level networking interface.
                                                             (line  439)
* inet_ntoa() (in module socket):        socket --- Low-level networking interface.
                                                             (line  459)
* inet_ntop() (in module socket):        socket --- Low-level networking interface.
                                                             (line  492)
* inet_pton() (in module socket):        socket --- Low-level networking interface.
                                                             (line  473)
* Inexact (class in decimal):            Signals.            (line   42)
* infile (shlex.shlex attribute):        shlex Objects.      (line  137)
* Infinity:                              Built-in Functions. (line  543)
* Infinity <1>:                          Deprecated string functions.
                                                             (line   23)
* info() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   79)
* info() (in module logging):            Module-Level Functions.
                                                             (line   86)
* info() (logging.Logger method):        Logger Objects.     (line  153)
* infolist() (zipfile.ZipFile method):   ZipFile Objects.    (line   62)
* InfoScrap() (in module Carbon.Scrap):  Carbon Scrap --- Scrap Manager.
                                                             (line   17)
* inheritance:                           Class definitions.  (line    6)
* ini file:                              ConfigParser --- Configuration file parser.
                                                             (line   11)
* init() (in module fm):                 fm --- Font Manager interface.
                                                             (line   20)
* init() (in module mimetypes):          mimetypes --- Map filenames to MIME types.
                                                             (line   73)
* inited (in module mimetypes):          mimetypes --- Map filenames to MIME types.
                                                             (line  108)
* initgroups() (in module os):           Process Parameters. (line  105)
* initialize_options() (distutils.cmd.Command method): Creating a new Distutils command.
                                                             (line   21)
* initial_indent (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  146)
* initscr() (in module curses):          Functions<2>.       (line  224)
* init_builtin() (in module imp):        imp --- Access the import internals.
                                                             (line  168)
* init_color() (in module curses):       Functions<2>.       (line  201)
* init_database() (in module msilib):    msilib --- Read and write Microsoft Installer files.
                                                             (line   58)
* init_frozen() (in module imp):         imp --- Access the import internals.
                                                             (line  178)
* init_pair() (in module curses):        Functions<2>.       (line  212)
* INPLACE_ADD (opcode):                  Python Bytecode Instructions.
                                                             (line  159)
* INPLACE_AND (opcode):                  Python Bytecode Instructions.
                                                             (line  175)
* INPLACE_DIVIDE (opcode):               Python Bytecode Instructions.
                                                             (line  141)
* INPLACE_FLOOR_DIVIDE (opcode):         Python Bytecode Instructions.
                                                             (line  146)
* INPLACE_LSHIFT (opcode):               Python Bytecode Instructions.
                                                             (line  167)
* INPLACE_MODULO (opcode):               Python Bytecode Instructions.
                                                             (line  155)
* INPLACE_MULTIPLY (opcode):             Python Bytecode Instructions.
                                                             (line  137)
* INPLACE_OR (opcode):                   Python Bytecode Instructions.
                                                             (line  183)
* INPLACE_POWER (opcode):                Python Bytecode Instructions.
                                                             (line  133)
* INPLACE_RSHIFT (opcode):               Python Bytecode Instructions.
                                                             (line  171)
* INPLACE_SUBTRACT (opcode):             Python Bytecode Instructions.
                                                             (line  163)
* INPLACE_TRUE_DIVIDE (opcode):          Python Bytecode Instructions.
                                                             (line  150)
* INPLACE_XOR (opcode):                  Python Bytecode Instructions.
                                                             (line  179)
* input:                                 Expression input.   (line    6)
* input (2to3 fixer):                    Fixers.             (line  115)
* input() (built-in function):           Built-in Functions. (line  659)
* input() (in module fileinput):         fileinput --- Iterate over lines from multiple input streams.
                                                             (line   50)
* input; raw:                            Expression input.   (line   19)
* InputOnly (class in Tix):              Miscellaneous Widgets.
                                                             (line    6)
* InputSource (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   49)
* InputType (in module cStringIO):       cStringIO --- Faster version of StringIO.
                                                             (line   33)
* input_charset (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   45)
* input_codec (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   74)
* inquiry (C type):                      Supporting Cyclic Garbage Collection.
                                                             (line  150)
* insch() (curses.window method):        Window Objects.     (line  276)
* insdelln() (curses.window method):     Window Objects.     (line  283)
* insert() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  183)
* insert() (list method):                Mutable Sequence Types.
                                                             (line   13)
* insert() (ttk.Notebook method):        ttk Notebook.       (line   42)
* insert() (ttk.Treeview method):        ttk Treeview.       (line  193)
* insert() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  121)
* insertBefore() (xml.dom.Node method):  Node Objects.       (line  121)
* InsertionLoc (class in aetypes):       aetypes --- AppleEvent objects.
                                                             (line   45)
* insertln() (curses.window method):     Window Objects.     (line  291)
* insert_text() (in module readline):    readline --- GNU readline interface.
                                                             (line   32)
* insnstr() (curses.window method):      Window Objects.     (line  296)
* insort() (in module bisect):           bisect --- Array bisection algorithm.
                                                             (line   54)
* insort_left() (in module bisect):      bisect --- Array bisection algorithm.
                                                             (line   47)
* insort_right() (in module bisect):     bisect --- Array bisection algorithm.
                                                             (line   54)
* inspect (module):                      inspect --- Inspect live objects.
                                                             (line    6)
* insstr() (curses.window method):       Window Objects.     (line  307)
* install() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line  101)
* install() (imputil.ImportManager method): imputil --- Import utilities.
                                                             (line   18)
* install() (in module gettext):         Class-based API.    (line   67)
* installaehandler() (MiniAEFrame.AEServer method): AEServer Objects.
                                                             (line    6)
* installAutoGIL() (in module autoGIL):  autoGIL --- Global Interpreter Lock handling in event loops.
                                                             (line   17)
* installHandler() (in module unittest): Signal Handling.    (line   27)
* install_opener() (in module urllib2):  urllib2 --- extensible library for opening URLs.
                                                             (line   65)
* instance() (in module new):            new --- Creation of runtime internal objects.
                                                             (line   20)
* instance; call:                        Calls.              (line  150)
* instancemethod() (in module new):      new --- Creation of runtime internal objects.
                                                             (line   28)
* InstanceType (in module types):        types --- Names for built-in types.
                                                             (line  129)
* instate() (ttk.Widget method):         ttk Widget.         (line   19)
* instr() (curses.window method):        Window Objects.     (line  317)
* instream (shlex.shlex attribute):      shlex Objects.      (line  143)
* int (uuid.UUID attribute):             uuid --- UUID objects according to RFC 4122.
                                                             (line   95)
* int() (built-in function):             Built-in Functions. (line  675)
* Int2AP() (in module imaplib):          imaplib --- IMAP4 protocol client.
                                                             (line   80)
* integer:                               The standard type hierarchy.
                                                             (line  175)
* integer division:                      Glossary.           (line  403)
* integer literal:                       Numeric literals.   (line    6)
* integer; division:                     Numeric Types --- int float long complex.
                                                             (line  107)
* integer; literals:                     Numeric Types --- int float long complex.
                                                             (line   23)
* integer; representation:               The standard type hierarchy.
                                                             (line   94)
* Integral (class in numbers):           The numeric tower.  (line   55)
* Integrated Development Environment:    IDLE.               (line    6)
* Intel/DVI ADPCM:                       audioop --- Manipulate raw audio data.
                                                             (line   12)
* interact() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   10)
* interact() (in module code):           code --- Interpreter base classes.
                                                             (line   28)
* interact() (telnetlib.Telnet method):  Telnet Objects.     (line  107)
* interactive:                           Glossary.           (line  427)
* interactive mode:                      Complete Python programs.
                                                             (line   19)
* InteractiveConsole (class in code):    code --- Interpreter base classes.
                                                             (line   21)
* InteractiveInterpreter (class in code): code --- Interpreter base classes.
                                                             (line   11)
* intern (2to3 fixer):                   Fixers.             (line  119)
* intern() (built-in function):          Non-essential Built-in Functions.
                                                             (line   50)
* internal type:                         The standard type hierarchy.
                                                             (line  642)
* Internaldate2tuple() (in module imaplib): imaplib --- IMAP4 protocol client.
                                                             (line   74)
* internalSubset (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   27)
* internal_attr (zipfile.ZipInfo attribute): ZipInfo Objects.
                                                             (line   85)
* Internet:                              Internet Protocols and Support.
                                                             (line    6)
* Internet Config:                       High-level interface.
                                                             (line   80)
* interpolation, string (%):             String Formatting Operations.
                                                             (line    6)
* InterpolationDepthError:               ConfigParser --- Configuration file parser.
                                                             (line  163)
* InterpolationError:                    ConfigParser --- Configuration file parser.
                                                             (line  158)
* InterpolationMissingOptionError:       ConfigParser --- Configuration file parser.
                                                             (line  170)
* InterpolationSyntaxError:              ConfigParser --- Configuration file parser.
                                                             (line  177)
* interpreted:                           Glossary.           (line  436)
* interpreter:                           Top-level components.
                                                             (line    6)
* interpreter lock:                      Thread State and the Global Interpreter Lock.
                                                             (line    6)
* interpreter prompts:                   sys --- System-specific parameters and functions.
                                                             (line  834)
* interrupt() (sqlite3.Connection method): Connection Objects.
                                                             (line  163)
* interrupt_main() (in module thread):   thread --- Multiple threads of control.
                                                             (line   46)
* intersection() (set method):           Set Types --- set frozenset.
                                                             (line   97)
* intersection_update() (set method):    Set Types --- set frozenset.
                                                             (line  176)
* IntlText (class in aetypes):           aetypes --- AppleEvent objects.
                                                             (line   61)
* IntlWritingCode (class in aetypes):    aetypes --- AppleEvent objects.
                                                             (line   65)
* intro (cmd.Cmd attribute):             Cmd Objects.        (line  135)
* IntType (in module types):             types --- Names for built-in types.
                                                             (line   58)
* IntType (in modules types):            Plain Integer Objects.
                                                             (line   13)
* InuseAttributeErr:                     Exceptions<6>.      (line   41)
* inv() (in module operator):            operator --- Standard operators as functions.
                                                             (line  110)
* InvalidAccessErr:                      Exceptions<6>.      (line   46)
* InvalidCharacterErr:                   Exceptions<6>.      (line   51)
* InvalidModificationErr:                Exceptions<6>.      (line   59)
* InvalidOperation (class in decimal):   Signals.            (line   50)
* InvalidStateErr:                       Exceptions<6>.      (line   63)
* InvalidURL:                            httplib --- HTTP protocol client.
                                                             (line  108)
* inversion:                             Unary arithmetic and bitwise operations.
                                                             (line   16)
* invert() (in module operator):         operator --- Standard operators as functions.
                                                             (line  110)
* invocation:                            The standard type hierarchy.
                                                             (line  289)
* in_dll() (ctypes._CData method):       Data types.         (line   57)
* in_table_a1() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   38)
* in_table_b1() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   43)
* in_table_c11() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   58)
* in_table_c11_c12() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   67)
* in_table_c12() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   62)
* in_table_c21() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   72)
* in_table_c21_c22() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   82)
* in_table_c22() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   77)
* in_table_c3() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   87)
* in_table_c4() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   91)
* in_table_c5() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line   96)
* in_table_c6() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  100)
* in_table_c7() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  105)
* in_table_c8() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  110)
* in_table_c9() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  115)
* in_table_d1() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  119)
* in_table_d2() (in module stringprep):  stringprep --- Internet String Preparation.
                                                             (line  124)
* io (module):                           io --- Core tools for working with streams.
                                                             (line    6)
* IOBase (class in io):                  I/O Base Classes.   (line    6)
* ioctl() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line   41)
* ioctl() (socket.socket method):        Socket Objects.     (line  100)
* IOError:                               Built-in Exceptions.
                                                             (line  160)
* ior() (in module operator):            operator --- Standard operators as functions.
                                                             (line  333)
* ipow() (in module operator):           operator --- Standard operators as functions.
                                                             (line  340)
* irepeat() (in module operator):        operator --- Standard operators as functions.
                                                             (line  347)
* IRIS Font Manager:                     fm --- Font Manager interface.
                                                             (line    9)
* irshift() (in module operator):        operator --- Standard operators as functions.
                                                             (line  357)
* isabs() (in module os.path):           os path --- Common pathname manipulations.
                                                             (line  153)
* isabstract() (in module inspect):      Types and members.  (line  326)
* isAlive() (threading.Thread method):   Thread Objects.     (line  148)
* isalnum() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  131)
* isalnum() (str method):                String Methods<2>.  (line  144)
* isalpha() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  136)
* isalpha() (str method):                String Methods<2>.  (line  151)
* isascii() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  141)
* isatty() (chunk.Chunk method):         chunk --- Read IFF chunked data.
                                                             (line   81)
* isatty() (file method):                File Objects.       (line   76)
* isatty() (in module os):               File Descriptor Operations.
                                                             (line  142)
* isatty() (io.IOBase method):           I/O Base Classes.   (line   73)
* isblank() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  145)
* isblk() (tarfile.TarInfo method):      TarInfo Objects.    (line  124)
* isbuiltin() (in module inspect):       Types and members.  (line  316)
* isCallable() (in module operator):     operator --- Standard operators as functions.
                                                             (line  391)
* ischr() (tarfile.TarInfo method):      TarInfo Objects.    (line  120)
* isclass() (in module inspect):         Types and members.  (line  278)
* iscntrl() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  149)
* iscode() (in module inspect):          Types and members.  (line  312)
* iscomment() (rfc822.Message method):   Message Objects<2>. (line   29)
* isctrl() (in module curses.ascii):     curses ascii --- Utilities for ASCII characters.
                                                             (line  189)
* isDaemon() (threading.Thread method):  Thread Objects.     (line  175)
* isdatadescriptor() (in module inspect): Types and members. (line  350)
* isdecimal() (unicode method):          String Methods<2>.  (line  461)
* isdev() (tarfile.TarInfo method):      TarInfo Objects.    (line  132)
* isdigit() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  153)
* isdigit() (str method):                String Methods<2>.  (line  158)
* isdir() (in module os.path):           os path --- Common pathname manipulations.
                                                             (line  165)
* isdir() (tarfile.TarInfo method):      TarInfo Objects.    (line  108)
* isdisjoint() (set method):             Set Types --- set frozenset.
                                                             (line   59)
* isdown() (in module turtle):           Drawing state.      (line   88)
* iselement() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   41)
* isenabled() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   28)
* isEnabledFor() (logging.Logger method): Logger Objects.    (line   74)
* isendwin() (in module curses):         Functions<2>.       (line  237)
* ISEOF() (in module token):             token --- Constants used with Python parse trees.
                                                             (line   34)
* isexpr() (in module parser):           Queries on ST Objects.
                                                             (line   12)
* isexpr() (parser.ST method):           ST Objects.         (line   21)
* isfifo() (tarfile.TarInfo method):     TarInfo Objects.    (line  128)
* isfile() (in module os.path):          os path --- Common pathname manipulations.
                                                             (line  159)
* isfile() (tarfile.TarInfo method):     TarInfo Objects.    (line  100)
* isfirstline() (in module fileinput):   fileinput --- Iterate over lines from multiple input streams.
                                                             (line   92)
* isframe() (in module inspect):         Types and members.  (line  308)
* isfunction() (in module inspect):      Types and members.  (line  287)
* isgenerator() (in module inspect):     Types and members.  (line  298)
* isgeneratorfunction() (in module inspect): Types and members.
                                                             (line  292)
* isgetsetdescriptor() (in module inspect): Types and members.
                                                             (line  364)
* isgraph() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  158)
* isheader() (rfc822.Message method):    Message Objects<2>. (line   13)
* isinf() (in module cmath):             Classification functions.
                                                             (line    6)
* isinf() (in module math):              Number-theoretic and representation functions.
                                                             (line   80)
* isinstance (2to3 fixer):               Fixers.             (line  123)
* isinstance() (built-in function):      Built-in Functions. (line  701)
* iskeyword() (in module keyword):       keyword --- Testing for Python keywords.
                                                             (line   13)
* islast() (rfc822.Message method):      Message Objects<2>. (line   21)
* isleap() (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  216)
* islice() (in module itertools):        Itertool functions. (line  316)
* islink() (in module os.path):          os path --- Common pathname manipulations.
                                                             (line  171)
* islnk() (tarfile.TarInfo method):      TarInfo Objects.    (line  116)
* islower() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  162)
* islower() (str method):                String Methods<2>.  (line  165)
* isMappingType() (in module operator):  operator --- Standard operators as functions.
                                                             (line  401)
* ismemberdescriptor() (in module inspect): Types and members.
                                                             (line  375)
* ismeta() (in module curses.ascii):     curses ascii --- Utilities for ASCII characters.
                                                             (line  193)
* ismethod() (in module inspect):        Types and members.  (line  283)
* ismethoddescriptor() (in module inspect): Types and members.
                                                             (line  332)
* ismodule() (in module inspect):        Types and members.  (line  274)
* ismount() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  177)
* isnan() (in module cmath):             Classification functions.
                                                             (line   13)
* isnan() (in module math):              Number-theoretic and representation functions.
                                                             (line   86)
* ISNONTERMINAL() (in module token):     token --- Constants used with Python parse trees.
                                                             (line   30)
* isNumberType() (in module operator):   operator --- Standard operators as functions.
                                                             (line  410)
* isnumeric() (unicode method):          String Methods<2>.  (line  454)
* isocalendar() (datetime.date method):  date Objects.       (line  176)
* isocalendar() (datetime.datetime method): datetime Objects.
                                                             (line  398)
* isoformat() (datetime.date method):    date Objects.       (line  196)
* isoformat() (datetime.datetime method): datetime Objects.  (line  403)
* isoformat() (datetime.time method):    time Objects.       (line  105)
* isolation_level (sqlite3.Connection attribute): Connection Objects.
                                                             (line   11)
* isoweekday() (datetime.date method):   date Objects.       (line  169)
* isoweekday() (datetime.datetime method): datetime Objects. (line  392)
* isprint() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  166)
* ispunct() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  170)
* isqueued() (in module fl):             Functions Defined in Module fl.
                                                             (line   77)
* isreadable() (in module pprint):       pprint --- Data pretty printer.
                                                             (line  106)
* isreadable() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   24)
* isrecursive() (in module pprint):      pprint --- Data pretty printer.
                                                             (line  115)
* isrecursive() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   32)
* isreg() (tarfile.TarInfo method):      TarInfo Objects.    (line  104)
* isReservedKey() (Cookie.Morsel method): Morsel Objects.    (line   54)
* isroutine() (in module inspect):       Types and members.  (line  321)
* isSameNode() (xml.dom.Node method):    Node Objects.       (line  102)
* isSequenceType() (in module operator): operator --- Standard operators as functions.
                                                             (line  418)
* isSet() (threading.Event method):      Event Objects.      (line   17)
* isspace() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  175)
* isspace() (str method):                String Methods<2>.  (line  172)
* isstdin() (in module fileinput):       fileinput --- Iterate over lines from multiple input streams.
                                                             (line   97)
* issubclass() (built-in function):      Built-in Functions. (line  719)
* issubset() (set method):               Set Types --- set frozenset.
                                                             (line   67)
* issuite() (in module parser):          Queries on ST Objects.
                                                             (line   22)
* issuite() (parser.ST method):          ST Objects.         (line   25)
* issuperset() (set method):             Set Types --- set frozenset.
                                                             (line   78)
* issym() (tarfile.TarInfo method):      TarInfo Objects.    (line  112)
* ISTERMINAL() (in module token):        token --- Constants used with Python parse trees.
                                                             (line   26)
* istitle() (str method):                String Methods<2>.  (line  179)
* istraceback() (in module inspect):     Types and members.  (line  304)
* isub() (in module operator):           operator --- Standard operators as functions.
                                                             (line  364)
* isupper() (in module curses.ascii):    curses ascii --- Utilities for ASCII characters.
                                                             (line  180)
* isupper() (str method):                String Methods<2>.  (line  188)
* isvisible() (in module turtle):        Visibility.         (line   22)
* isxdigit() (in module curses.ascii):   curses ascii --- Utilities for ASCII characters.
                                                             (line  184)
* is_() (in module operator):            operator --- Standard operators as functions.
                                                             (line   61)
* is_alive() (multiprocessing.Process method): Process and exceptions.
                                                             (line   70)
* is_alive() (threading.Thread method):  Thread Objects.     (line  148)
* is_assigned() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  143)
* is_blocked() (cookielib.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   60)
* is_builtin() (in module imp):          imp --- Access the import internals.
                                                             (line  188)
* is_canonical() (decimal.Context method): Context objects.  (line  291)
* is_canonical() (decimal.Decimal method): Decimal objects.  (line  276)
* IS_CHARACTER_JUNK() (in module difflib): difflib --- Helpers for computing deltas.
                                                             (line  339)
* is_data() (multifile.MultiFile method): MultiFile Objects. (line   45)
* is_declared_global() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  129)
* is_empty() (asynchat.fifo method):     asynchat - Auxiliary Classes.
                                                             (line   14)
* is_expired() (cookielib.Cookie method): Cookie Objects.    (line  110)
* is_finite() (decimal.Context method):  Context objects.    (line  295)
* is_finite() (decimal.Decimal method):  Decimal objects.    (line  285)
* is_free() (symtable.Symbol method):    Examining Symbol Tables.
                                                             (line  138)
* is_frozen() (in module imp):           imp --- Access the import internals.
                                                             (line  196)
* is_global() (symtable.Symbol method):  Examining Symbol Tables.
                                                             (line  125)
* is_hop_by_hop() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line  109)
* is_imported() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  116)
* is_infinite() (decimal.Context method): Context objects.   (line  299)
* is_infinite() (decimal.Decimal method): Decimal objects.   (line  292)
* is_integer() (float method):           Additional Methods on Float.
                                                             (line   18)
* is_jython (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   39)
* is_linetouched() (curses.window method): Window Objects.   (line  327)
* IS_LINE_JUNK() (in module difflib):    difflib --- Helpers for computing deltas.
                                                             (line  332)
* is_local() (symtable.Symbol method):   Examining Symbol Tables.
                                                             (line  134)
* is_multipart() (email.message.Message method): email message Representing an email message.
                                                             (line   64)
* is_namespace() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  147)
* is_nan() (decimal.Context method):     Context objects.    (line  303)
* is_nan() (decimal.Decimal method):     Decimal objects.    (line  299)
* is_nested() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   35)
* is_normal() (decimal.Context method):  Context objects.    (line  308)
* is_normal() (decimal.Decimal method):  Decimal objects.    (line  306)
* is_not() (in module operator):         operator --- Standard operators as functions.
                                                             (line   67)
* is_not_allowed() (cookielib.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   74)
* is_optimized() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   31)
* is_package() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   53)
* is_parameter() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  121)
* is_python_build() (in module sysconfig): Other functions.  (line   57)
* is_qnan() (decimal.Context method):    Context objects.    (line  313)
* is_qnan() (decimal.Decimal method):    Decimal objects.    (line  317)
* is_referenced() (symtable.Symbol method): Examining Symbol Tables.
                                                             (line  112)
* is_resource_enabled() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   57)
* is_scriptable() (in module gensuitemodule): gensuitemodule --- Generate OSA stub packages.
                                                             (line   19)
* is_set() (threading.Event method):     Event Objects.      (line   17)
* is_signed() (decimal.Context method):  Context objects.    (line  318)
* is_signed() (decimal.Decimal method):  Decimal objects.    (line  324)
* is_snan() (decimal.Context method):    Context objects.    (line  322)
* is_snan() (decimal.Decimal method):    Decimal objects.    (line  332)
* is_subnormal() (decimal.Context method): Context objects.  (line  327)
* is_subnormal() (decimal.Decimal method): Decimal objects.  (line  339)
* is_tarfile() (in module tarfile):      tarfile --- Read and write tar archive files.
                                                             (line  136)
* is_term_resized() (in module curses):  Functions<2>.       (line  232)
* is_tracked() (in module gc):           gc --- Garbage Collector interface.
                                                             (line  133)
* is_unverifiable() (urllib2.Request method): Request Objects.
                                                             (line   92)
* is_wintouched() (curses.window method): Window Objects.    (line  334)
* is_zero() (decimal.Context method):    Context objects.    (line  331)
* is_zero() (decimal.Decimal method):    Decimal objects.    (line  348)
* is_zipfile() (in module zipfile):      zipfile --- Work with ZIP archives.
                                                             (line   56)
* item selection:                        The standard type hierarchy.
                                                             (line  125)
* item() (ttk.Treeview method):          ttk Treeview.       (line  212)
* item() (xml.dom.NamedNodeMap method):  NamedNodeMap Objects.
                                                             (line   12)
* item() (xml.dom.NodeList method):      NodeList Objects.   (line   15)
* itemgetter() (in module operator):     operator --- Standard operators as functions.
                                                             (line  474)
* items() (ConfigParser.ConfigParser method): ConfigParser Objects.
                                                             (line   19)
* items() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   96)
* items() (dict method):                 Mapping Types --- dict.
                                                             (line  151)
* items() (email.message.Message method): email message Representing an email message.
                                                             (line  245)
* items() (mailbox.Mailbox method):      Mailbox objects.    (line  127)
* items() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   65)
* itemsize (array.array attribute):      array --- Efficient arrays of numeric values.
                                                             (line   98)
* itemsize (memoryview attribute):       memoryview type.    (line   89)
* ItemsView (class in collections):      Collections Abstract Base Classes.
                                                             (line  111)
* iter() (built-in function):            Built-in Functions. (line  730)
* iter() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  125)
* iter() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   45)
* iterable:                              Glossary.           (line  446)
* Iterable (class in collections):       Collections Abstract Base Classes.
                                                             (line   85)
* IterableUserDict (class in UserDict):  UserDict --- Class wrapper for dictionary objects.
                                                             (line   38)
* iterator:                              Glossary.           (line  465)
* Iterator (class in collections):       Collections Abstract Base Classes.
                                                             (line   90)
* iterator protocol:                     Iterator Types.     (line    8)
* iterdecode() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  290)
* iterdump (sqlite3.Connection attribute): Connection Objects.
                                                             (line  355)
* iterencode() (in module codecs):       codecs --- Codec registry and base classes.
                                                             (line  281)
* iterencode() (json.JSONEncoder method): Encoders and Decoders.
                                                             (line  223)
* iterfind() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  136)
* iterfind() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   52)
* iteritems() (dict method):             Mapping Types --- dict.
                                                             (line  173)
* iteritems() (mailbox.Mailbox method):  Mailbox objects.    (line  127)
* iterkeyrefs() (weakref.WeakKeyDictionary method): weakref --- Weak references.
                                                             (line  162)
* iterkeys() (dict method):              Mapping Types --- dict.
                                                             (line  184)
* iterkeys() (mailbox.Mailbox method):   Mailbox objects.    (line  105)
* itermonthdates() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   46)
* itermonthdays() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   60)
* itermonthdays2() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   54)
* iterparse() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   47)
* itertext() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  143)
* itertools (2to3 fixer):                Fixers.             (line  136)
* itertools (module):                    itertools --- Functions creating iterators for efficient looping.
                                                             (line    6)
* itertools_imports (2to3 fixer):        Fixers.             (line  129)
* itervaluerefs() (weakref.WeakValueDictionary method): weakref --- Weak references.
                                                             (line  191)
* itervalues() (dict method):            Mapping Types --- dict.
                                                             (line  195)
* itervalues() (mailbox.Mailbox method): Mailbox objects.    (line  112)
* iterweekdays() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   40)
* iter_child_nodes() (in module ast):    ast Helpers.        (line   60)
* iter_fields() (in module ast):         ast Helpers.        (line   55)
* iter_importers() (in module pkgutil):  pkgutil --- Package extension utility.
                                                             (line  104)
* iter_modules() (in module pkgutil):    pkgutil --- Package extension utility.
                                                             (line  132)
* ItimerError:                           signal --- Set handlers for asynchronous events.
                                                             (line  119)
* ITIMER_PROF (in module signal):        signal --- Set handlers for asynchronous events.
                                                             (line  109)
* ITIMER_REAL (in module signal):        signal --- Set handlers for asynchronous events.
                                                             (line   99)
* ITIMER_VIRTUAL (in module signal):     signal --- Set handlers for asynchronous events.
                                                             (line  104)
* itruediv() (in module operator):       operator --- Standard operators as functions.
                                                             (line  371)
* ixor() (in module operator):           operator --- Standard operators as functions.
                                                             (line  379)
* izip() (in module itertools):          Itertool functions. (line  351)
* izip_longest() (in module itertools):  Itertool functions. (line  377)
* Jansen, Jack:                          uu --- Encode and decode uuencode files.
                                                             (line   20)
* Java; language:                        The standard type hierarchy.
                                                             (line  105)
* java_ver() (in module platform):       Java Platform.      (line    6)
* JFIF:                                  jpeg --- Read and write JPEG files.
                                                             (line   28)
* JFIF <1>:                              jpeg --- Read and write JPEG files.
                                                             (line   39)
* join() (in module os.path):            os path --- Common pathname manipulations.
                                                             (line  186)
* join() (in module string):             Deprecated string functions.
                                                             (line  143)
* join() (multiprocessing.JoinableQueue method): Pipes and Queues.
                                                             (line  227)
* join() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line  114)
* join() (multiprocessing.Process method): Process and exceptions.
                                                             (line   48)
* join() (Queue.Queue method):           Queue Objects.      (line   83)
* join() (str method):                   String Methods<2>.  (line  195)
* join() (threading.Thread method):      Thread Objects.     (line   98)
* JoinableQueue (class in multiprocessing): Pipes and Queues.
                                                             (line  206)
* joinfields() (in module string):       Deprecated string functions.
                                                             (line  150)
* join_thread() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  163)
* jpeg (module):                         jpeg --- Read and write JPEG files.
                                                             (line    6)
* json (module):                         json --- JSON encoder and decoder.
                                                             (line    6)
* JSONDecoder (class in json):           Encoders and Decoders.
                                                             (line    6)
* JSONEncoder (class in json):           Encoders and Decoders.
                                                             (line  107)
* js_output() (Cookie.BaseCookie method): Cookie Objects<2>. (line   32)
* js_output() (Cookie.Morsel method):    Morsel Objects.     (line   65)
* jumpahead() (in module random):        random --- Generate pseudo-random numbers.
                                                             (line  108)
* JUMP_ABSOLUTE (opcode):                Python Bytecode Instructions.
                                                             (line  486)
* JUMP_FORWARD (opcode):                 Python Bytecode Instructions.
                                                             (line  462)
* JUMP_IF_FALSE_OR_POP (opcode):         Python Bytecode Instructions.
                                                             (line  481)
* JUMP_IF_TRUE_OR_POP (opcode):          Python Bytecode Instructions.
                                                             (line  476)
* kbhit() (in module msvcrt):            Console I/O.        (line    6)
* KDEDIR:                                webbrowser --- Convenient Web-browser controller.
                                                             (line  167)
* kevent() (in module select):           select --- Waiting for I/O completion.
                                                             (line   49)
* key:                                   Dictionary displays.
                                                             (line    6)
* key (Cookie.Morsel attribute):         Morsel Objects.     (line   46)
* key function:                          Glossary.           (line  486)
* key/datum pair:                        Dictionary displays.
                                                             (line    6)
* KeyboardInterrupt:                     Built-in Exceptions.
                                                             (line  191)
* KeyboardInterrupt (built-in exception): Exception Handling.
                                                             (line  348)
* KeyboardInterrupt (built-in exception) <1>: Exception Handling.
                                                             (line  360)
* KeyError:                              Built-in Exceptions.
                                                             (line  186)
* keyname() (in module curses):          Functions<2>.       (line  242)
* keypad() (curses.window method):       Window Objects.     (line  339)
* keyrefs() (weakref.WeakKeyDictionary method): weakref --- Weak references.
                                                             (line  168)
* keys() (bsddb.bsddbobject method):     Hash BTree and Record Objects.
                                                             (line   19)
* keys() (dict method):                  Mapping Types --- dict.
                                                             (line  206)
* keys() (email.message.Message method): email message Representing an email message.
                                                             (line  237)
* keys() (mailbox.Mailbox method):       Mailbox objects.    (line  105)
* keys() (sqlite3.Row method):           Row Objects.        (line   20)
* keys() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   70)
* keysubst() (in module aetools):        aetools --- OSA client support.
                                                             (line   39)
* KeysView (class in collections):       Collections Abstract Base Classes.
                                                             (line  111)
* keyword:                               Keywords.           (line    6)
* Keyword (class in aetypes):            aetypes --- AppleEvent objects.
                                                             (line   85)
* keyword (module):                      keyword --- Testing for Python keywords.
                                                             (line    6)
* keyword argument:                      Glossary.           (line  509)
* keyword; elif:                         The if statement.   (line    6)
* keyword; else:                         The break statement.
                                                             (line   13)
* keyword; else <1>:                     The if statement.   (line    6)
* keyword; else <2>:                     The while statement.
                                                             (line    6)
* keyword; else <3>:                     The for statement.  (line    6)
* keyword; else <4>:                     The try statement.  (line   69)
* keyword; except:                       The try statement.  (line    6)
* keyword; finally:                      The return statement.
                                                             (line   18)
* keyword; finally <1>:                  The break statement.
                                                             (line   19)
* keyword; finally <2>:                  The continue statement.
                                                             (line    6)
* keyword; finally <3>:                  The try statement.  (line    6)
* keyword; finally <4>:                  The try statement.  (line   74)
* keyword; from:                         The import statement.
                                                             (line    6)
* keyword; in:                           The for statement.  (line    6)
* keyword; yield:                        Yield expressions.  (line    6)
* keywords (functools.partial attribute): partial Objects.   (line   20)
* KEY_ALL_ACCESS (in module _winreg):    Access Rights.      (line    8)
* KEY_CREATE_LINK (in module _winreg):   Access Rights.      (line   51)
* KEY_CREATE_SUB_KEY (in module _winreg): Access Rights.     (line   38)
* KEY_ENUMERATE_SUB_KEYS (in module _winreg): Access Rights. (line   42)
* KEY_EXECUTE (in module _winreg):       Access Rights.      (line   26)
* KEY_NOTIFY (in module _winreg):        Access Rights.      (line   46)
* KEY_QUERY_VALUE (in module _winreg):   Access Rights.      (line   30)
* KEY_READ (in module _winreg):          Access Rights.      (line   20)
* KEY_SET_VALUE (in module _winreg):     Access Rights.      (line   34)
* KEY_WOW64_32KEY (in module _winreg):   64-bit Specific.    (line   13)
* KEY_WOW64_64KEY (in module _winreg):   64-bit Specific.    (line    8)
* KEY_WRITE (in module _winreg):         Access Rights.      (line   15)
* kill() (in module os):                 Process Management. (line  271)
* kill() (subprocess.Popen method):      Popen Objects.      (line   62)
* killchar() (in module curses):         Functions<2>.       (line  252)
* killpg() (in module os):               Process Management. (line  288)
* knownfiles (in module mimetypes):      mimetypes --- Map filenames to MIME types.
                                                             (line  113)
* kqueue() (in module select):           select --- Waiting for I/O completion.
                                                             (line   41)
* Kuchling, Andrew:                      sha --- SHA-1 message digest algorithm.
                                                             (line   73)
* kwlist (in module keyword):            keyword --- Testing for Python keywords.
                                                             (line   17)
* L (in module re):                      Module Contents.    (line   51)
* label() (EasyDialogs.ProgressBar method): ProgressBar Objects.
                                                             (line   45)
* LabelEntry (class in Tix):             Basic Widgets.      (line   31)
* LabelFrame (class in Tix):             Basic Widgets.      (line   37)
* lambda:                                Glossary.           (line  513)
* lambda; expression:                    Lambdas.            (line    6)
* lambda; expression <1>:                Function definitions.
                                                             (line   83)
* LambdaType (in module types):          types --- Names for built-in types.
                                                             (line  108)
* LANG:                                  GNU gettext API.    (line   21)
* LANG <1>:                              Class-based API.    (line   26)
* LANG <2>:                              locale --- Internationalization services.
                                                             (line   45)
* LANG <3>:                              locale --- Internationalization services.
                                                             (line  301)
* LANG <4>:                              locale --- Internationalization services.
                                                             (line  305)
* LANGUAGE:                              GNU gettext API.    (line   20)
* LANGUAGE <1>:                          Class-based API.    (line   25)
* large files:                           Large File Support. (line    6)
* LargeZipFile:                          zipfile --- Work with ZIP archives.
                                                             (line   30)
* last (multifile.MultiFile attribute):  MultiFile Objects.  (line   97)
* last() (bsddb.bsddbobject method):     Hash BTree and Record Objects.
                                                             (line   60)
* last() (dbhash.dbhash method):         Database Objects.   (line   17)
* last() (nntplib.NNTP method):          NNTP Objects.       (line  122)
* lastChild (xml.dom.Node attribute):    Node Objects.       (line   59)
* lastcmd (cmd.Cmd attribute):           Cmd Objects.        (line  131)
* lastgroup (re.MatchObject attribute):  Match Objects.      (line  175)
* lastindex (re.MatchObject attribute):  Match Objects.      (line  166)
* lastpart() (MimeWriter.MimeWriter method): MimeWriter Objects.
                                                             (line   52)
* lastrowid (sqlite3.Cursor attribute):  Cursor Objects.     (line  185)
* last_accepted (multiprocessing.connection.Listener attribute): Listeners and Clients.
                                                             (line  109)
* last_traceback (in module sys):        The standard type hierarchy.
                                                             (line  729)
* last_traceback (in module sys) <1>:    sys --- System-specific parameters and functions.
                                                             (line  649)
* last_type (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  649)
* last_value (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  649)
* launch() (in module findertools):      findertools --- The finder's Apple Events interface.
                                                             (line   15)
* launchurl() (ic.IC method):            IC Objects.         (line   24)
* launchurl() (in module ic):            ic --- Access to the Mac OS X Internet Config.
                                                             (line   37)
* layout() (ttk.Style method):           Ttk Styling.        (line   97)
* LBRACE (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* LBYL:                                  Glossary.           (line  520)
* lchflags() (in module os):             Files and Directories.
                                                             (line  199)
* lchmod() (in module os):               Files and Directories.
                                                             (line  208)
* lchown() (in module os):               Files and Directories.
                                                             (line  218)
* LC_ALL:                                GNU gettext API.    (line   20)
* LC_ALL <1>:                            Class-based API.    (line   25)
* LC_ALL (in module locale):             locale --- Internationalization services.
                                                             (line  477)
* LC_COLLATE (in module locale):         locale --- Internationalization services.
                                                             (line  446)
* LC_CTYPE (in module locale):           locale --- Internationalization services.
                                                             (line  440)
* LC_MESSAGES:                           GNU gettext API.    (line   20)
* LC_MESSAGES <1>:                       Class-based API.    (line   26)
* LC_MESSAGES (in module locale):        locale --- Internationalization services.
                                                             (line  462)
* LC_MONETARY (in module locale):        locale --- Internationalization services.
                                                             (line  457)
* LC_NUMERIC (in module locale):         locale --- Internationalization services.
                                                             (line  469)
* LC_TIME (in module locale):            locale --- Internationalization services.
                                                             (line  452)
* LDCXXSHARED:                           Build and C API Changes.
                                                             (line  154)
* ldexp() (in module math):              Number-theoretic and representation functions.
                                                             (line   93)
* LDFLAGS:                               New Improved and Deprecated Modules<2>.
                                                             (line   59)
* ldgettext() (in module gettext):       GNU gettext API.    (line   60)
* ldngettext() (in module gettext):      GNU gettext API.    (line   99)
* le() (in module operator):             operator --- Standard operators as functions.
                                                             (line   19)
* leading whitespace:                    Indentation.        (line    6)
* leapdays() (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  221)
* leaveok() (curses.window method):      Window Objects.     (line  345)
* left (filecmp.dircmp attribute):       The dircmp class.   (line   42)
* left() (in module turtle):             Turtle motion.      (line   54)
* LEFTSHIFT (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* LEFTSHIFTEQUAL (in module token):      token --- Constants used with Python parse trees.
                                                             (line   40)
* left_list (filecmp.dircmp attribute):  The dircmp class.   (line   50)
* left_only (filecmp.dircmp attribute):  The dircmp class.   (line   64)
* len() (built-in function):             Built-in Functions. (line  757)
* length (xml.dom.NamedNodeMap attribute): NamedNodeMap Objects.
                                                             (line    8)
* length (xml.dom.NodeList attribute):   NodeList Objects.   (line   21)
* LESS (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* LESSEQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* letters (in module string):            String constants.   (line   32)
* level (multifile.MultiFile attribute): MultiFile Objects.  (line   93)
* lexical analysis:                      Lexical analysis.   (line    6)
* lexical definitions:                   Notation.           (line   32)
* lexists() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line   74)
* lgamma() (in module math):             Special functions.  (line   24)
* lgettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   47)
* lgettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   41)
* lgettext() (in module gettext):        GNU gettext API.    (line   47)
* lib2to3 (module):                      lib2to3 - 2to3's library.
                                                             (line    6)
* libc_ver() (in module platform):       Unix Platforms.     (line   40)
* library (in module dbm):               dbm --- Simple "database" interface.
                                                             (line   29)
* LibraryLoader (class in ctypes):       Loading shared libraries.
                                                             (line  124)
* library_dir_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  221)
* library_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  460)
* library_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  226)
* license (built-in variable):           Constants added by the site module.
                                                             (line   18)
* LifoQueue (class in Queue):            Queue --- A synchronized queue class.
                                                             (line   39)
* light-weight processes:                thread --- Multiple threads of control.
                                                             (line   12)
* limit_denominator() (fractions.Fraction method): fractions --- Rational numbers.
                                                             (line  112)
* lin2adpcm() (in module audioop):       audioop --- Manipulate raw audio data.
                                                             (line  101)
* lin2alaw() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  115)
* lin2lin() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line  124)
* lin2ulaw() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  139)
* line continuation:                     Explicit line joining.
                                                             (line    6)
* line joining:                          Logical lines.      (line    6)
* line joining <1>:                      Explicit line joining.
                                                             (line    6)
* line structure:                        Line structure.     (line    6)
* line() (msilib.Dialog method):         GUI classes.        (line   64)
* line-buffered I/O:                     Built-in Functions. (line  918)
* linecache (module):                    linecache --- Random access to text lines.
                                                             (line    6)
* lineno (ast.AST attribute):            Node classes.       (line   39)
* lineno (doctest.DocTest attribute):    DocTest Objects.    (line   44)
* lineno (doctest.Example attribute):    Example Objects.    (line   43)
* lineno (pyclbr.Class attribute):       Class Objects<2>.   (line   36)
* lineno (pyclbr.Function attribute):    Function Objects.   (line   23)
* lineno (shlex.shlex attribute):        shlex Objects.      (line  166)
* lineno (xml.parsers.expat.ExpatError attribute): ExpatError Exceptions.
                                                             (line   17)
* lineno() (in module fileinput):        fileinput --- Iterate over lines from multiple input streams.
                                                             (line   78)
* LINES:                                 Functions<2>.       (line  123)
* LINES <1>:                             Functions<2>.       (line  529)
* LINES <2>:                             Functions<2>.       (line  531)
* linesep (in module os):                Miscellaneous System Information.
                                                             (line  120)
* lineterminator (csv.Dialect attribute): Dialects and Formatting Parameters.
                                                             (line   44)
* line_buffering (io.TextIOWrapper attribute): Text I/O.     (line  148)
* line_num (csv.csvreader attribute):    Reader Objects.     (line   21)
* link() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  350)
* link() (in module os):                 Files and Directories.
                                                             (line  227)
* linkmodel (in module MacOS):           MacOS --- Access to Mac OS interpreter features.
                                                             (line   21)
* linkname (tarfile.TarInfo attribute):  TarInfo Objects.    (line   69)
* link_executable() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  402)
* link_shared_lib() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  412)
* link_shared_object() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  423)
* linux_distribution() (in module platform): Unix Platforms. (line   19)
* list:                                  Glossary.           (line  534)
* list comprehension:                    Glossary.           (line  540)
* list() (built-in function):            Built-in Functions. (line  763)
* list() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  121)
* list() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  190)
* list() (nntplib.NNTP method):          NNTP Objects.       (line   55)
* list() (poplib.POP3 method):           POP3 Objects.       (line   49)
* list() (tarfile.TarFile method):       TarFile Objects.    (line  113)
* list; comprehensions:                  List displays.      (line    6)
* list; comprehensions <1>:              List displays.      (line   18)
* list; display:                         List displays.      (line    6)
* listallfolders() (mhlib.MH method):    MH Objects.         (line   32)
* listallsubfolders() (mhlib.MH method): MH Objects.         (line   40)
* listdir() (in module dircache):        dircache --- Cached directory listings.
                                                             (line   20)
* listdir() (in module os):              Files and Directories.
                                                             (line  233)
* listen() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  187)
* listen() (in module logging.config):   Configuration functions.
                                                             (line   91)
* listen() (in module turtle):           Using screen events.
                                                             (line    6)
* listen() (socket.socket method):       Socket Objects.     (line  114)
* Listener (class in multiprocessing.connection): Listeners and Clients.
                                                             (line   49)
* listfolders() (mhlib.MH method):       MH Objects.         (line   28)
* listmessages() (mhlib.Folder method):  Folder Objects.     (line   25)
* listMethods() (xmlrpclib.ServerProxy.system method): ServerProxy Objects.
                                                             (line   17)
* ListNoteBook (class in Tix):           Manager Widgets.    (line   13)
* listsubfolders() (mhlib.MH method):    MH Objects.         (line   36)
* ListType (in module types):            types --- Names for built-in types.
                                                             (line   94)
* LIST_APPEND (opcode):                  Python Bytecode Instructions.
                                                             (line  289)
* list_dialects() (in module csv):       Module Contents<2>. (line  105)
* list_folders() (mailbox.Maildir method): Maildir.          (line   61)
* list_folders() (mailbox.MH method):    MH.                 (line   32)
* literal:                               Literals.           (line    6)
* literal <1>:                           Literals<2>.        (line    6)
* literal_eval() (in module ast):        ast Helpers.        (line   16)
* LittleEndianStructure (class in ctypes): Structured data types.
                                                             (line   14)
* ljust() (in module string):            Deprecated string functions.
                                                             (line  209)
* ljust() (str method):                  String Methods<2>.  (line  201)
* LK_LOCK (in module msvcrt):            File Operations.    (line   16)
* LK_NBLCK (in module msvcrt):           File Operations.    (line   24)
* LK_NBRLCK (in module msvcrt):          File Operations.    (line   24)
* LK_RLCK (in module msvcrt):            File Operations.    (line   16)
* LK_UNLCK (in module msvcrt):           File Operations.    (line   30)
* LMTP (class in smtplib):               smtplib --- SMTP protocol client.
                                                             (line   58)
* ln() (decimal.Context method):         Context objects.    (line  335)
* ln() (decimal.Decimal method):         Decimal objects.    (line  355)
* LNAME:                                 getpass --- Portable password input.
                                                             (line   41)
* lngettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   78)
* lngettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   63)
* lngettext() (in module gettext):       GNU gettext API.    (line   84)
* load() (Cookie.BaseCookie method):     Cookie Objects<2>.  (line   40)
* load() (cookielib.FileCookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line  118)
* load() (in module hotshot.stats):      Using hotshot data. (line   11)
* load() (in module json):               Basic Usage.        (line   93)
* load() (in module marshal):            marshal --- Internal Python object serialization.
                                                             (line   73)
* load() (in module pickle):             Usage.              (line   48)
* load() (pickle.Unpickler method):      Usage.              (line  169)
* loader:                                The import statement.
                                                             (line   82)
* loader <1>:                            Glossary.           (line  549)
* loader; load_module:                   The import statement.
                                                             (line   82)
* LoadError:                             cookielib --- Cookie handling for HTTP clients.
                                                             (line   41)
* LoadKey() (in module _winreg):         _winreg -- Windows registry access.
                                                             (line  228)
* LoadLibrary() (ctypes.LibraryLoader method): Loading shared libraries.
                                                             (line  135)
* loads() (in module json):              Basic Usage.        (line  149)
* loads() (in module marshal):           marshal --- Internal Python object serialization.
                                                             (line   95)
* loads() (in module pickle):            Usage.              (line   74)
* loads() (in module xmlrpclib):         Convenience Functions.
                                                             (line   24)
* loadTestsFromModule() (unittest.TestLoader method): Loading and running tests.
                                                             (line   22)
* loadTestsFromName() (unittest.TestLoader method): Loading and running tests.
                                                             (line   43)
* loadTestsFromNames() (unittest.TestLoader method): Loading and running tests.
                                                             (line   71)
* loadTestsFromTestCase() (unittest.TestLoader method): Loading and running tests.
                                                             (line   17)
* LOAD_ATTR (opcode):                    Python Bytecode Instructions.
                                                             (line  439)
* LOAD_CLOSURE (opcode):                 Python Bytecode Instructions.
                                                             (line  534)
* load_compiled() (in module imp):       imp --- Access the import internals.
                                                             (line  201)
* LOAD_CONST (opcode):                   Python Bytecode Instructions.
                                                             (line  417)
* LOAD_DEREF (opcode):                   Python Bytecode Instructions.
                                                             (line  541)
* load_dynamic() (in module imp):        imp --- Access the import internals.
                                                             (line  212)
* load_extension() (sqlite3.Connection method): Connection Objects.
                                                             (line  245)
* LOAD_FAST (opcode):                    Python Bytecode Instructions.
                                                             (line  521)
* LOAD_GLOBAL (opcode):                  Python Bytecode Instructions.
                                                             (line  497)
* load_global() (pickle protocol):       Subclassing Unpicklers.
                                                             (line    6)
* LOAD_LOCALS (opcode):                  Python Bytecode Instructions.
                                                             (line  296)
* load_module() (in module imp):         imp --- Access the import internals.
                                                             (line   70)
* load_module() (zipimport.zipimporter method): zipimporter Objects.
                                                             (line   59)
* LOAD_NAME (opcode):                    Python Bytecode Instructions.
                                                             (line  421)
* load_source() (in module imp):         imp --- Access the import internals.
                                                             (line  235)
* local (class in threading):            threading --- Higher-level threading interface.
                                                             (line   83)
* localcontext() (in module decimal):    Context objects.    (line   26)
* LOCALE (in module re):                 Module Contents.    (line   51)
* locale (module):                       locale --- Internationalization services.
                                                             (line    6)
* localeconv() (in module locale):       locale --- Internationalization services.
                                                             (line   52)
* LocaleHTMLCalendar (class in calendar): calendar --- General calendar-related functions.
                                                             (line  180)
* LocaleTextCalendar (class in calendar): calendar --- General calendar-related functions.
                                                             (line  170)
* localName (xml.dom.Attr attribute):    Attr Objects.       (line   13)
* localName (xml.dom.Node attribute):    Node Objects.       (line   64)
* locals() (built-in function):          Built-in Functions. (line  779)
* localtime() (in module time):          time --- Time access and conversions.
                                                             (line  179)
* Locator (class in xml.sax.xmlreader):  xml sax xmlreader --- Interface for XML parsers.
                                                             (line   41)
* Lock (class in multiprocessing):       Synchronization primitives.
                                                             (line   37)
* Lock() (in module threading):          threading --- Higher-level threading interface.
                                                             (line  100)
* lock() (mailbox.Babyl method):         Babyl.              (line   60)
* lock() (mailbox.Mailbox method):       Mailbox objects.    (line  233)
* lock() (mailbox.Maildir method):       Maildir.            (line  107)
* lock() (mailbox.mbox method):          mbox.               (line   39)
* lock() (mailbox.MH method):            MH.                 (line   84)
* lock() (mailbox.MMDF method):          MMDF.               (line   35)
* Lock() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  148)
* lock() (mutex.mutex method):           Mutex Objects.      (line   17)
* lock() (posixfile.posixfile method):   posixfile --- File-like objects with locking support.
                                                             (line   52)
* lock, interpreter:                     Thread State and the Global Interpreter Lock.
                                                             (line    6)
* locked() (thread.lock method):         thread --- Multiple threads of control.
                                                             (line  112)
* lockf() (in module fcntl):             fcntl --- The fcntl and ioctl system calls.
                                                             (line  103)
* locking() (in module msvcrt):          File Operations.    (line    6)
* LockType (in module thread):           thread --- Multiple threads of control.
                                                             (line   32)
* lock_held() (in module imp):           imp --- Access the import internals.
                                                             (line   99)
* log() (in module cmath):               Power and logarithmic functions<2>.
                                                             (line   10)
* log() (in module logging):             Module-Level Functions.
                                                             (line  113)
* log() (in module math):                Power and logarithmic functions.
                                                             (line   25)
* log() (logging.Logger method):         Logger Objects.     (line  173)
* log10() (decimal.Context method):      Context objects.    (line  339)
* log10() (decimal.Decimal method):      Decimal objects.    (line  363)
* log10() (in module cmath):             Power and logarithmic functions<2>.
                                                             (line   19)
* log10() (in module math):              Power and logarithmic functions.
                                                             (line   42)
* log1p() (in module math):              Power and logarithmic functions.
                                                             (line   35)
* logb() (decimal.Context method):       Context objects.    (line  343)
* logb() (decimal.Decimal method):       Decimal objects.    (line  370)
* Logger (class in logging):             Logger Objects.     (line   23)
* LoggerAdapter (class in logging):      LoggerAdapter Objects.
                                                             (line   13)
* logging (module):                      logging --- Logging facility for Python.
                                                             (line    6)
* logging.config (module):               logging config --- Logging configuration.
                                                             (line    6)
* logging.handlers (module):             logging handlers --- Logging handlers.
                                                             (line    6)
* Logical (class in aetypes):            aetypes --- AppleEvent objects.
                                                             (line   98)
* logical line:                          Logical lines.      (line    6)
* logical_and() (decimal.Context method): Context objects.   (line  347)
* logical_and() (decimal.Decimal method): Decimal objects.   (line  380)
* logical_invert() (decimal.Context method): Context objects.
                                                             (line  352)
* logical_invert() (decimal.Decimal method): Decimal objects.
                                                             (line  388)
* logical_or() (decimal.Context method): Context objects.    (line  356)
* logical_or() (decimal.Decimal method): Decimal objects.    (line  395)
* logical_xor() (decimal.Context method): Context objects.   (line  361)
* logical_xor() (decimal.Decimal method): Decimal objects.   (line  403)
* login() (ftplib.FTP method):           FTP Objects.        (line   43)
* login() (imaplib.IMAP4 method):        IMAP4 Objects.      (line  127)
* login() (smtplib.SMTP method):         SMTP Objects.       (line   99)
* login_cram_md5() (imaplib.IMAP4 method): IMAP4 Objects.    (line  132)
* LOGNAME:                               Process Parameters. (line  119)
* LOGNAME <1>:                           getpass --- Portable password input.
                                                             (line   41)
* lognormvariate() (in module random):   random --- Generate pseudo-random numbers.
                                                             (line  250)
* logout() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  140)
* LogRecord (class in logging):          LogRecord Objects.  (line   11)
* log_date_time_string() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  242)
* log_error() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  209)
* log_exception() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  174)
* log_message() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  215)
* log_request() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  202)
* log_to_stderr() (in module multiprocessing): Logging<2>.   (line   24)
* long (2to3 fixer):                     Fixers.             (line  143)
* long integer literal:                  Numeric literals.   (line    6)
* long() (built-in function):            Built-in Functions. (line  789)
* long; integer; division:               Numeric Types --- int float long complex.
                                                             (line  107)
* long; integer; literals:               Numeric Types --- int float long complex.
                                                             (line   23)
* longMessage (unittest.TestCase attribute): Test cases.     (line  534)
* longname() (in module curses):         Functions<2>.       (line  258)
* LongType (in module types):            types --- Names for built-in types.
                                                             (line   63)
* LongType (in modules types):           Long Integer Objects.
                                                             (line   13)
* long_info (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  629)
* LONG_MAX:                              Plain Integer Objects.
                                                             (line  124)
* LONG_MAX <1>:                          Long Integer Objects.
                                                             (line  149)
* lookup() (in module codecs):           codecs --- Codec registry and base classes.
                                                             (line  110)
* lookup() (in module unicodedata):      unicodedata --- Unicode Database.
                                                             (line   16)
* lookup() (symtable.SymbolTable method): Examining Symbol Tables.
                                                             (line   56)
* lookup() (ttk.Style method):           Ttk Styling.        (line   82)
* LookupError:                           Built-in Exceptions.
                                                             (line   90)
* lookup_error() (in module codecs):     codecs --- Codec registry and base classes.
                                                             (line  200)
* loop control; target:                  The break statement.
                                                             (line   16)
* loop() (in module asyncore):           asyncore --- Asynchronous socket handler.
                                                             (line   44)
* loop; over mutable sequence:           The for statement.  (line   37)
* loop; statement:                       The break statement.
                                                             (line    6)
* loop; statement <1>:                   The continue statement.
                                                             (line    6)
* loop; statement <2>:                   The while statement.
                                                             (line    6)
* loop; statement <3>:                   The for statement.  (line    6)
* lower() (in module string):            Deprecated string functions.
                                                             (line   98)
* lower() (str method):                  String Methods<2>.  (line  210)
* lowercase (in module string):          String constants.   (line   39)
* LPAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* lseek() (in module os):                File Descriptor Operations.
                                                             (line  147)
* lshift() (in module operator):         operator --- Standard operators as functions.
                                                             (line  121)
* LSQB (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* lstat() (in module os):                Files and Directories.
                                                             (line  246)
* lstrip() (in module string):           Deprecated string functions.
                                                             (line  158)
* lstrip() (str method):                 String Methods<2>.  (line  217)
* lsub() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  144)
* lt() (in module operator):             operator --- Standard operators as functions.
                                                             (line   19)
* lt() (in module turtle):               Turtle motion.      (line   54)
* Lundh, Fredrik:                        jpeg --- Read and write JPEG files.
                                                             (line   15)
* LWPCookieJar (class in cookielib):     FileCookieJar subclasses and co-operation with web browsers.
                                                             (line   30)
* M (in module re):                      Module Contents.    (line   57)
* macerrors (module):                    macerrors --- Mac OS Errors.
                                                             (line    6)
* machine() (in module platform):        Cross Platform.     (line   36)
* MacOS (module):                        MacOS --- Access to Mac OS interpreter features.
                                                             (line    6)
* macostools (module):                   macostools --- Convenience routines for file manipulation.
                                                             (line    6)
* macpath (module):                      macpath --- Mac OS 9 path manipulation functions.
                                                             (line    6)
* macresource (module):                  macresource --- Locate script resources.
                                                             (line    6)
* macros (netrc.netrc attribute):        netrc Objects.      (line   29)
* mac_ver() (in module platform):        Mac OS Platform.    (line    6)
* Mailbox (class in mailbox):            Mailbox objects.    (line    6)
* mailbox (module):                      mailbox --- Manipulate mailboxes in various formats.
                                                             (line    6)
* mailcap (module):                      mailcap --- Mailcap file handling.
                                                             (line    6)
* Maildir (class in mailbox):            Maildir.            (line    6)
* MaildirMessage (class in mailbox):     MaildirMessage.     (line    6)
* MailmanProxy (class in smtpd):         MailmanProxy Objects.
                                                             (line    6)
* main():                                Process-wide parameters.
                                                             (line    8)
* main() <1>:                            Process-wide parameters.
                                                             (line  160)
* main() (in module py_compile):         py_compile --- Compile Python source files.
                                                             (line   37)
* main() (in module unittest):           Loading and running tests.
                                                             (line  370)
* mainloop() (FrameWork.Application method): Application Objects.
                                                             (line   19)
* mainloop() (in module turtle):         Using events.       (line   82)
* major() (in module os):                Files and Directories.
                                                             (line  281)
* makedev() (in module os):              Files and Directories.
                                                             (line  295)
* makedirs() (in module os):             Files and Directories.
                                                             (line  315)
* makeelement() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  151)
* makefile() (socket method):            The standard type hierarchy.
                                                             (line  630)
* makefile() (socket.socket method):     Socket Objects.     (line  121)
* makefolder() (mhlib.MH method):        MH Objects.         (line   44)
* makeLogRecord() (in module logging):   Module-Level Functions.
                                                             (line  169)
* makePickle() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   41)
* makeRecord() (logging.Logger method):  Logger Objects.     (line  227)
* makeSocket() (logging.handlers.DatagramHandler method): DatagramHandler.
                                                             (line   24)
* makeSocket() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   35)
* maketrans() (in module string):        String functions.   (line   19)
* makeusermenus() (FrameWork.Application method): Application Objects.
                                                             (line    8)
* make_archive() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                             (line    9)
* make_archive() (in module shutil):     Archiving operations.
                                                             (line   10)
* MAKE_CLOSURE (opcode):                 Python Bytecode Instructions.
                                                             (line  581)
* make_cookies() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   52)
* make_form() (in module fl):            Functions Defined in Module fl.
                                                             (line   10)
* MAKE_FUNCTION (opcode):                Python Bytecode Instructions.
                                                             (line  575)
* make_header() (in module email.header): email header Internationalized headers.
                                                             (line  164)
* make_msgid() (in module email.utils):  email utils Miscellaneous utilities.
                                                             (line  101)
* make_parser() (in module xml.sax):     xml sax --- Support for SAX2 parsers.
                                                             (line   19)
* make_server() (in module wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   14)
* make_tarball() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                             (line   23)
* make_zipfile() (in module distutils.archive_util): distutils archive_util --- Archiving utilities.
                                                             (line   35)
* malloc():                              Overview.           (line   33)
* map (2to3 fixer):                      Fixers.             (line  147)
* map() (built-in function):             Built-in Functions. (line  806)
* map() (in module future_builtins):     future_builtins --- Python 3 builtins.
                                                             (line   49)
* map() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line   58)
* map() (ttk.Style method):              Ttk Styling.        (line   49)
* mapcolor() (in module fl):             Functions Defined in Module fl.
                                                             (line   95)
* mapfile() (ic.IC method):              IC Objects.         (line   41)
* mapfile() (in module ic):              ic --- Access to the Mac OS X Internet Config.
                                                             (line   37)
* mapLogRecord() (logging.handlers.HTTPHandler method): HTTPHandler.
                                                             (line   16)
* mapping:                               Glossary.           (line  555)
* Mapping (class in collections):        Collections Abstract Base Classes.
                                                             (line  106)
* mapping() (msilib.Control method):     GUI classes.        (line   20)
* MappingView (class in collections):    Collections Abstract Base Classes.
                                                             (line  111)
* mapPriority() (logging.handlers.SysLogHandler method): SysLogHandler.
                                                             (line  155)
* maps() (in module nis):                nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   41)
* maptypecreator() (ic.IC method):       IC Objects.         (line   60)
* maptypecreator() (in module ic):       ic --- Access to the Mac OS X Internet Config.
                                                             (line   37)
* map_async() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line   69)
* map_table_b2() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   48)
* map_table_b3() (in module stringprep): stringprep --- Internet String Preparation.
                                                             (line   53)
* marshal (module):                      marshal --- Internal Python object serialization.
                                                             (line    6)
* marshalling; objects:                  pickle --- Python object serialization.
                                                             (line    6)
* masking; operations:                   Bitwise Operations on Integer Types.
                                                             (line    6)
* match() (in module nis):               nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line   14)
* match() (in module re):                Module Contents.    (line  111)
* match() (re.RegexObject method):       Regular Expression Objects.
                                                             (line   40)
* MatchObject (class in re):             Match Objects.      (line    6)
* math (module):                         math --- Mathematical functions.
                                                             (line    6)
* max (datetime.date attribute):         date Objects.       (line   60)
* max (datetime.datetime attribute):     datetime Objects.   (line  140)
* max (datetime.time attribute):         time Objects.       (line   35)
* max (datetime.timedelta attribute):    timedelta Objects.  (line   59)
* max() (built-in function):             Built-in Functions. (line  819)
* max() (decimal.Context method):        Context objects.    (line  366)
* max() (decimal.Decimal method):        Decimal objects.    (line  411)
* max() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line  146)
* maxarray (repr.Repr attribute):        Repr Objects.       (line   15)
* maxdeque (repr.Repr attribute):        Repr Objects.       (line   15)
* maxdict (repr.Repr attribute):         Repr Objects.       (line   15)
* maxDiff (unittest.TestCase attribute): Test cases.         (line  554)
* maxfrozenset (repr.Repr attribute):    Repr Objects.       (line   15)
* maxint (in module sys):                sys --- System-specific parameters and functions.
                                                             (line  667)
* maxlen (collections.deque attribute):  deque objects.      (line  100)
* MAXLEN (in module mimify):             mimify --- MIME processing of mail messages.
                                                             (line   58)
* maxlevel (repr.Repr attribute):        Repr Objects.       (line   10)
* maxlist (repr.Repr attribute):         Repr Objects.       (line   15)
* maxlong (repr.Repr attribute):         Repr Objects.       (line   30)
* maxother (repr.Repr attribute):        Repr Objects.       (line   43)
* maxpp() (in module audioop):           audioop --- Manipulate raw audio data.
                                                             (line  151)
* maxset (repr.Repr attribute):          Repr Objects.       (line   15)
* maxsize (in module sys):               sys --- System-specific parameters and functions.
                                                             (line  674)
* maxstring (repr.Repr attribute):       Repr Objects.       (line   35)
* maxtuple (repr.Repr attribute):        Repr Objects.       (line   15)
* maxunicode (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  680)
* maxval (EasyDialogs.ProgressBar attribute): ProgressBar Objects.
                                                             (line   33)
* MAXYEAR (in module datetime):          datetime --- Basic date and time types.
                                                             (line   50)
* MAX_INTERPOLATION_DEPTH (in module ConfigParser): ConfigParser --- Configuration file parser.
                                                             (line  194)
* max_mag() (decimal.Context method):    Context objects.    (line  370)
* max_mag() (decimal.Decimal method):    Decimal objects.    (line  418)
* mbox (class in mailbox):               mbox.               (line    6)
* mboxMessage (class in mailbox):        mboxMessage.        (line    6)
* MB_ICONASTERISK (in module winsound):  winsound --- Sound-playing interface for Windows.
                                                             (line  130)
* MB_ICONEXCLAMATION (in module winsound): winsound --- Sound-playing interface for Windows.
                                                             (line  134)
* MB_ICONHAND (in module winsound):      winsound --- Sound-playing interface for Windows.
                                                             (line  138)
* MB_ICONQUESTION (in module winsound):  winsound --- Sound-playing interface for Windows.
                                                             (line  142)
* MB_OK (in module winsound):            winsound --- Sound-playing interface for Windows.
                                                             (line  146)
* md5 (module):                          md5 --- MD5 message digest algorithm.
                                                             (line    6)
* md5() (in module md5):                 md5 --- MD5 message digest algorithm.
                                                             (line   45)
* MemberDescriptorType (in module types): types --- Names for built-in types.
                                                             (line  203)
* membership; test:                      Comparisons.        (line  116)
* memmove() (in module ctypes):          Utility functions.  (line  139)
* MemoryError:                           Built-in Exceptions.
                                                             (line  205)
* MemoryHandler (class in logging.handlers): MemoryHandler.  (line   39)
* memoryview (built-in class):           memoryview type.    (line   12)
* memset() (in module ctypes):           Utility functions.  (line  145)
* Menu() (in module FrameWork):          FrameWork --- Interactive application framework.
                                                             (line   47)
* MenuBar() (in module FrameWork):       FrameWork --- Interactive application framework.
                                                             (line   42)
* MenuItem() (in module FrameWork):      FrameWork --- Interactive application framework.
                                                             (line   54)
* merge() (in module heapq):             heapq --- Heap queue algorithm.
                                                             (line   82)
* Message (class in email.message):      email message Representing an email message.
                                                             (line   33)
* Message (class in mailbox):            Message objects.    (line    6)
* Message (class in mhlib):              mhlib --- Access to MH mailboxes.
                                                             (line   26)
* Message (class in mimetools):          mimetools --- Tools for parsing MIME messages.
                                                             (line   17)
* Message (class in rfc822):             rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   21)
* Message (in module mimetools):         BaseHTTPServer --- Basic HTTP server.
                                                             (line  146)
* message digest, MD5:                   hashlib --- Secure hashes and message digests.
                                                             (line    8)
* message digest, MD5 <1>:               md5 --- MD5 message digest algorithm.
                                                             (line    8)
* Message() (in module EasyDialogs):     EasyDialogs --- Basic Macintosh dialogs.
                                                             (line   18)
* MessageBeep() (in module winsound):    winsound --- Sound-playing interface for Windows.
                                                             (line   32)
* MessageClass (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  144)
* MessageError:                          email errors Exception and Defect classes.
                                                             (line    9)
* MessageParseError:                     email errors Exception and Defect classes.
                                                             (line   15)
* message_from_file() (in module email): Parser class API.   (line   85)
* message_from_string() (in module email): Parser class API. (line   76)
* meta() (in module curses):             Functions<2>.       (line  265)
* metaclass:                             Glossary.           (line  564)
* metaclass (2to3 fixer):                Fixers.             (line  153)
* metavar (optparse.Option attribute):   Option attributes.  (line   80)
* meta_path (in module sys):             sys --- System-specific parameters and functions.
                                                             (line  687)
* Meter (class in Tix):                  Basic Widgets.      (line   44)
* method:                                Glossary.           (line  580)
* method resolution order:               Glossary.           (line  588)
* method; call:                          Calls.              (line  135)
* methodattrs (2to3 fixer):              Fixers.             (line  158)
* methodcaller() (in module operator):   operator --- Standard operators as functions.
                                                             (line  524)
* methodHelp() (xmlrpclib.ServerProxy.system method): ServerProxy Objects.
                                                             (line   43)
* methods (pyclbr.Class attribute):      Class Objects<2>.   (line   27)
* methodSignature() (xmlrpclib.ServerProxy.system method): ServerProxy Objects.
                                                             (line   22)
* MethodType (in module types):          types --- Names for built-in types.
                                                             (line  133)
* MethodType (in module types) <1>:      Function Objects<2>.
                                                             (line   14)
* MethodType (in module types) <2>:      Method Objects<2>.  (line   11)
* METH_CLASS (built-in variable):        Common Object Structures.
                                                             (line  183)
* METH_COEXIST (built-in variable):      Common Object Structures.
                                                             (line  204)
* METH_KEYWORDS (built-in variable):     Common Object Structures.
                                                             (line  143)
* METH_NOARGS (built-in variable):       Common Object Structures.
                                                             (line  151)
* METH_O (built-in variable):            Common Object Structures.
                                                             (line  160)
* METH_OLDARGS (built-in variable):      Common Object Structures.
                                                             (line  168)
* METH_STATIC (built-in variable):       Common Object Structures.
                                                             (line  192)
* METH_VARARGS (built-in variable):      Common Object Structures.
                                                             (line  133)
* MH (class in mailbox):                 MH.                 (line    6)
* MH (class in mhlib):                   mhlib --- Access to MH mailboxes.
                                                             (line   17)
* mhlib (module):                        mhlib --- Access to MH mailboxes.
                                                             (line    6)
* MHMailbox (class in mailbox):          Deprecated classes and methods.
                                                             (line   86)
* MHMessage (class in mailbox):          MHMessage.          (line    6)
* microsecond (datetime.datetime attribute): datetime Objects.
                                                             (line  177)
* microsecond (datetime.time attribute): time Objects.       (line   60)
* MIME; base64 encoding:                 base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line    6)
* MIME; content type:                    mimetypes --- Map filenames to MIME types.
                                                             (line    6)
* MIME; headers:                         mimetypes --- Map filenames to MIME types.
                                                             (line   26)
* MIME; headers <1>:                     cgi --- Common Gateway Interface support.
                                                             (line    6)
* MIME; quoted-printable encoding:       quopri --- Encode and decode MIME quoted-printable data.
                                                             (line    6)
* MIMEApplication (class in email.mime.application): email mime Creating email and MIME objects from scratch.
                                                             (line   80)
* MIMEAudio (class in email.mime.audio): email mime Creating email and MIME objects from scratch.
                                                             (line  106)
* MIMEBase (class in email.mime.base):   email mime Creating email and MIME objects from scratch.
                                                             (line   21)
* MIMEImage (class in email.mime.image): email mime Creating email and MIME objects from scratch.
                                                             (line  134)
* MIMEMessage (class in email.mime.message): email mime Creating email and MIME objects from scratch.
                                                             (line  162)
* MIMEMultipart (class in email.mime.multipart): email mime Creating email and MIME objects from scratch.
                                                             (line   53)
* MIMENonMultipart (class in email.mime.nonmultipart): email mime Creating email and MIME objects from scratch.
                                                             (line   40)
* MIMEText (class in email.mime.text):   email mime Creating email and MIME objects from scratch.
                                                             (line  175)
* mimetools (module):                    mimetools --- Tools for parsing MIME messages.
                                                             (line    6)
* MimeTypes (class in mimetypes):        MimeTypes Objects.  (line   10)
* mimetypes (module):                    mimetypes --- Map filenames to MIME types.
                                                             (line    6)
* MimeWriter (class in MimeWriter):      MimeWriter --- Generic MIME file writer.
                                                             (line   17)
* MimeWriter (module):                   MimeWriter --- Generic MIME file writer.
                                                             (line    6)
* mime_decode_header() (in module mimify): mimify --- MIME processing of mail messages.
                                                             (line   49)
* mime_encode_header() (in module mimify): mimify --- MIME processing of mail messages.
                                                             (line   54)
* mimify (module):                       mimify --- MIME processing of mail messages.
                                                             (line    6)
* mimify() (in module mimify):           mimify --- MIME processing of mail messages.
                                                             (line   28)
* min (datetime.date attribute):         date Objects.       (line   56)
* min (datetime.datetime attribute):     datetime Objects.   (line  135)
* min (datetime.time attribute):         time Objects.       (line   31)
* min (datetime.timedelta attribute):    timedelta Objects.  (line   54)
* min() (built-in function):             Built-in Functions. (line  845)
* min() (decimal.Context method):        Context objects.    (line  374)
* min() (decimal.Decimal method):        Decimal objects.    (line  425)
* MINEQUAL (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* MiniAEFrame (module):                  MiniAEFrame --- Open Scripting Architecture server support.
                                                             (line    6)
* MiniApplication (class in MiniAEFrame): MiniAEFrame --- Open Scripting Architecture server support.
                                                             (line   22)
* minmax() (in module audioop):          audioop --- Manipulate raw audio data.
                                                             (line  155)
* minor() (in module os):                Files and Directories.
                                                             (line  288)
* minus:                                 Unary arithmetic and bitwise operations.
                                                             (line   11)
* MINUS (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* minus() (decimal.Context method):      Context objects.    (line  382)
* minute (datetime.datetime attribute):  datetime Objects.   (line  169)
* minute (datetime.time attribute):      time Objects.       (line   52)
* MINYEAR (in module datetime):          datetime --- Basic date and time types.
                                                             (line   45)
* min_mag() (decimal.Context method):    Context objects.    (line  378)
* min_mag() (decimal.Decimal method):    Decimal objects.    (line  432)
* mirrored() (in module unicodedata):    unicodedata --- Unicode Database.
                                                             (line   70)
* misc_header (cmd.Cmd attribute):       Cmd Objects.        (line  145)
* MissingSectionHeaderError:             ConfigParser --- Configuration file parser.
                                                             (line  185)
* MIXERDEV:                              ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   71)
* mkalias() (in module macostools):      macostools --- Convenience routines for file manipulation.
                                                             (line   35)
* mkd() (ftplib.FTP method):             FTP Objects.        (line  194)
* mkdir() (in module os):                Files and Directories.
                                                             (line  302)
* mkdtemp() (in module tempfile):        tempfile --- Generate temporary files and directories.
                                                             (line  144)
* mkfifo() (in module os):               Files and Directories.
                                                             (line  253)
* mknod() (in module os):                Files and Directories.
                                                             (line  268)
* mkpath() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  494)
* mkpath() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line    9)
* mkstemp() (in module tempfile):        tempfile --- Generate temporary files and directories.
                                                             (line  102)
* mktemp() (in module tempfile):         tempfile --- Generate temporary files and directories.
                                                             (line  162)
* mktime() (in module time):             time --- Time access and conversions.
                                                             (line  191)
* mktime_tz() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line   73)
* mktime_tz() (in module rfc822):        rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  115)
* mmap (class in mmap):                  mmap --- Memory-mapped file support.
                                                             (line   48)
* mmap (module):                         mmap --- Memory-mapped file support.
                                                             (line    6)
* MMDF (class in mailbox):               MMDF.               (line    6)
* MmdfMailbox (class in mailbox):        Deprecated classes and methods.
                                                             (line   79)
* MMDFMessage (class in mailbox):        MMDFMessage.        (line    6)
* mod() (in module operator):            operator --- Standard operators as functions.
                                                             (line  126)
* mode (file attribute):                 File Objects.       (line  245)
* mode (io.FileIO attribute):            Raw File I/O.       (line   34)
* mode (ossaudiodev.oss_audio_device attribute): Audio Device Objects.
                                                             (line  228)
* mode (tarfile.TarInfo attribute):      TarInfo Objects.    (line   57)
* mode() (in module turtle):             Settings and special methods.
                                                             (line    6)
* modf() (in module math):               Number-theoretic and representation functions.
                                                             (line   98)
* modified() (robotparser.RobotFileParser method): robotparser --- Parser for robots txt.
                                                             (line   46)
* Modify() (msilib.View method):         View Objects.       (line   23)
* modify() (select.epoll method):        Edge and Level Trigger Polling epoll Objects.
                                                             (line   72)
* modify() (select.poll method):         Polling Objects.    (line   56)
* module:                                Glossary.           (line  594)
* module (pyclbr.Class attribute):       Class Objects<2>.   (line   10)
* module (pyclbr.Function attribute):    Function Objects.   (line    9)
* module() (in module new):              new --- Creation of runtime internal objects.
                                                             (line   51)
* module; AL:                            al --- Audio functions on the SGI.
                                                             (line   19)
* module; array:                         The standard type hierarchy.
                                                             (line  224)
* module; base64:                        binascii --- Convert between binary and ASCII.
                                                             (line    6)
* module; bdb:                           pdb --- The Python Debugger.
                                                             (line   13)
* module; binhex:                        binascii --- Convert between binary and ASCII.
                                                             (line    6)
* module; bsddb:                         The standard type hierarchy.
                                                             (line  284)
* module; bsddb <1>:                     Restrictions.       (line    6)
* module; bsddb <2>:                     anydbm --- Generic access to DBM-style databases.
                                                             (line   10)
* module; bsddb <3>:                     dbhash --- DBM-style interface to the BSD database library.
                                                             (line    9)
* module; builtins:                      Sub-interpreter support.
                                                             (line   15)
* module; CGIHTTPServer:                 BaseHTTPServer --- Basic HTTP server.
                                                             (line   11)
* module; cmd:                           pdb --- The Python Debugger.
                                                             (line   13)
* module; compileall:                    "Compiled" Python files.
                                                             (line   56)
* module; copy:                          copy_reg --- Register pickle support functions.
                                                             (line   10)
* module; cPickle:                       copy_reg --- Register pickle support functions.
                                                             (line   10)
* module; crypt:                         pwd --- The password database.
                                                             (line   41)
* module; dbhash:                        anydbm --- Generic access to DBM-style databases.
                                                             (line   10)
* module; dbm:                           The standard type hierarchy.
                                                             (line  284)
* module; dbm <1>:                       Restrictions.       (line    6)
* module; dbm <2>:                       anydbm --- Generic access to DBM-style databases.
                                                             (line   10)
* module; dbm <3>:                       gdbm --- GNU's reinterpretation of dbm.
                                                             (line   10)
* module; dumbdbm:                       anydbm --- Generic access to DBM-style databases.
                                                             (line   10)
* module; errno:                         Built-in Exceptions.
                                                             (line  232)
* module; errno <1>:                     socket --- Low-level networking interface.
                                                             (line  103)
* module; exceptions:                    Embedding Python.   (line   12)
* module; fcntl:                         File Objects.       (line   67)
* module; formatter:                     htmllib --- A parser for HTML documents.
                                                             (line    9)
* module; FrameWork:                     MiniAEFrame --- Open Scripting Architecture server support.
                                                             (line    6)
* module; gdbm:                          The standard type hierarchy.
                                                             (line  284)
* module; gdbm <1>:                      Restrictions.       (line    6)
* module; gdbm <2>:                      anydbm --- Generic access to DBM-style databases.
                                                             (line   10)
* module; glob:                          fnmatch --- Unix filename pattern matching.
                                                             (line   34)
* module; htmllib:                       urllib Restrictions.
                                                             (line   27)
* module; icglue:                        ic --- Access to the Mac OS X Internet Config.
                                                             (line   11)
* module; ihooks:                        Importing Modules<2>.
                                                             (line   91)
* module; imp:                           Built-in Functions. (line 1653)
* module; importing:                     The import statement.
                                                             (line    6)
* module; json:                          Saving structured data with json.
                                                             (line    6)
* module; knee:                          Examples<18>.       (line   33)
* module; knee <1>:                      Examples<19>.       (line  130)
* module; macerrors:                     MacOS --- Access to Mac OS interpreter features.
                                                             (line   33)
* module; mailbox:                       rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   18)
* module; math:                          Numeric Types --- int float long complex.
                                                             (line  114)
* module; math <1>:                      Constants<2>.       (line   14)
* module; mimetools:                     High-level interface.
                                                             (line   29)
* module; namespace:                     The standard type hierarchy.
                                                             (line  537)
* module; os:                            File Objects.       (line    6)
* module; os <1>:                        posix --- The most common POSIX system calls.
                                                             (line   10)
* module; pickle:                        copy --- Shallow and deep copy operations.
                                                             (line   68)
* module; pickle <1>:                    cPickle --- A faster pickle.
                                                             (line    6)
* module; pickle <2>:                    copy_reg --- Register pickle support functions.
                                                             (line   10)
* module; pickle <3>:                    shelve --- Python object persistence.
                                                             (line    6)
* module; pickle <4>:                    marshal --- Internal Python object serialization.
                                                             (line   13)
* module; pty:                           File Descriptor Operations.
                                                             (line  192)
* module; pwd:                           os path --- Common pathname manipulations.
                                                             (line   87)
* module; pyexpat:                       xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   20)
* module; re:                            String Formatting Operations.
                                                             (line  190)
* module; re <1>:                        string --- Common string operations.
                                                             (line    6)
* module; re <2>:                        fnmatch --- Unix filename pattern matching.
                                                             (line    6)
* module; readline:                      Key Bindings.       (line   43)
* module; rexec:                         Importing Modules<2>.
                                                             (line   91)
* module; rfc822:                        mimetools --- Tools for parsing MIME messages.
                                                             (line   11)
* module; rlcompleter:                   Key Bindings.       (line   43)
* module; search; path:                  The Module Search Path.
                                                             (line    6)
* module; search; path <1>:              linecache --- Random access to text lines.
                                                             (line   25)
* module; search; path <2>:              sys --- System-specific parameters and functions.
                                                             (line  713)
* module; search; path <3>:              site --- Site-specific configuration hook.
                                                             (line   14)
* module; search; path <4>:              Embedding Python.   (line   12)
* module; search; path <5>:              Initializing and finalizing the interpreter.
                                                             (line    8)
* module; search; path <6>:              Process-wide parameters.
                                                             (line   89)
* module; sgmllib:                       htmllib --- A parser for HTML documents.
                                                             (line    9)
* module; shelve:                        marshal --- Internal Python object serialization.
                                                             (line   13)
* module; signal:                        thread --- Multiple threads of control.
                                                             (line  129)
* module; signal <1>:                    Exception Handling. (line  348)
* module; SimpleHTTPServer:              BaseHTTPServer --- Basic HTTP server.
                                                             (line   11)
* module; sitecustomize:                 site --- Site-specific configuration hook.
                                                             (line   68)
* module; socket:                        File Objects.       (line    6)
* module; socket <1>:                    Internet Protocols and Support.
                                                             (line    6)
* module; stat:                          Files and Directories.
                                                             (line  511)
* module; statvfs:                       Files and Directories.
                                                             (line  565)
* module; string:                        String Formatting Operations.
                                                             (line  190)
* module; string <1>:                    locale --- Internationalization services.
                                                             (line  442)
* module; string <2>:                    Background details hints tips and caveats.
                                                             (line   31)
* module; struct:                        Socket Objects.     (line  274)
* module; SUNAUDIODEV:                   sunaudiodev --- Access to Sun audio hardware.
                                                             (line   14)
* module; sunaudiodev:                   SUNAUDIODEV --- Constants used with sunaudiodev.
                                                             (line    9)
* module; sys:                           Standard Modules.   (line    6)
* module; sys <1>:                       The print statement.
                                                             (line   31)
* module; sys <2>:                       The try statement.  (line   55)
* module; sys <3>:                       Complete Python programs.
                                                             (line    6)
* module; sys <4>:                       Embedding Python.   (line   12)
* module; sys <5>:                       Initializing and finalizing the interpreter.
                                                             (line    8)
* module; sys <6>:                       Sub-interpreter support.
                                                             (line   15)
* module; thread:                        High-level API.     (line   39)
* module; types:                         Type Objects.       (line    6)
* module; urllib:                        httplib --- HTTP protocol client.
                                                             (line   11)
* module; urlparse:                      urllib Restrictions.
                                                             (line   55)
* module; usercustomize:                 site --- Site-specific configuration hook.
                                                             (line   78)
* module; uu:                            binascii --- Convert between binary and ASCII.
                                                             (line    6)
* module; _locale:                       locale --- Internationalization services.
                                                             (line   12)
* module; __builtin__:                   The dir Function.   (line   41)
* module; __builtin__ <1>:               The exec statement. (line   42)
* module; __builtin__ <2>:               Complete Python programs.
                                                             (line    6)
* module; __builtin__ <3>:               Embedding Python.   (line   12)
* module; __builtin__ <4>:               Initializing and finalizing the interpreter.
                                                             (line    8)
* module; __main__:                      Naming and binding. (line  107)
* module; __main__ <1>:                  Complete Python programs.
                                                             (line    6)
* module; __main__ <2>:                  Complete Python programs.
                                                             (line   19)
* module; __main__ <3>:                  runpy --- Locating and executing Python modules.
                                                             (line   22)
* module; __main__ <4>:                  runpy --- Locating and executing Python modules.
                                                             (line   79)
* module; __main__ <5>:                  Embedding Python.   (line   12)
* module; __main__ <6>:                  Initializing and finalizing the interpreter.
                                                             (line    8)
* module; __main__ <7>:                  Sub-interpreter support.
                                                             (line   15)
* ModuleFinder (class in modulefinder):  modulefinder --- Find modules used by a script.
                                                             (line   29)
* modulefinder (module):                 modulefinder --- Find modules used by a script.
                                                             (line    6)
* modules (in module sys):               sys --- System-specific parameters and functions.
                                                             (line  703)
* modules (in module sys) <1>:           Importing Modules<2>.
                                                             (line   10)
* modules (in module sys) <2>:           Initializing and finalizing the interpreter.
                                                             (line    8)
* modules (modulefinder.ModuleFinder attribute): modulefinder --- Find modules used by a script.
                                                             (line   52)
* ModuleType (in module types):          types --- Names for built-in types.
                                                             (line  148)
* ModuleType (in module types) <1>:      Module Objects.     (line   10)
* modulo:                                Binary arithmetic operations.
                                                             (line   30)
* mono2grey() (in module imageop):       imageop --- Manipulate raw image data.
                                                             (line   59)
* month (datetime.date attribute):       date Objects.       (line   75)
* month (datetime.datetime attribute):   datetime Objects.   (line  156)
* month() (in module calendar):          calendar --- General calendar-related functions.
                                                             (line  255)
* monthcalendar() (in module calendar):  calendar --- General calendar-related functions.
                                                             (line  244)
* monthdatescalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   66)
* monthdays2calendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   72)
* monthdayscalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   78)
* monthrange() (in module calendar):     calendar --- General calendar-related functions.
                                                             (line  239)
* month_abbr (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  305)
* month_name (in module calendar):       calendar --- General calendar-related functions.
                                                             (line  298)
* Morsel (class in Cookie):              Morsel Objects.     (line    6)
* most_common() (collections.Counter method): Counter objects.
                                                             (line   70)
* mouseinterval() (in module curses):    Functions<2>.       (line  270)
* mousemask() (in module curses):        Functions<2>.       (line  277)
* move() (curses.panel.Panel method):    Panel Objects.      (line   34)
* move() (curses.window method):         Window Objects.     (line  354)
* move() (in module findertools):        findertools --- The finder's Apple Events interface.
                                                             (line   33)
* move() (in module mmap):               mmap --- Memory-mapped file support.
                                                             (line  176)
* move() (in module shutil):             Directory and files operations.
                                                             (line  125)
* move() (ttk.Treeview method):          ttk Treeview.       (line  221)
* movemessage() (mhlib.Folder method):   Folder Objects.     (line   67)
* move_file() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  499)
* move_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                             (line   34)
* MozillaCookieJar (class in cookielib): FileCookieJar subclasses and co-operation with web browsers.
                                                             (line    9)
* MRO:                                   Glossary.           (line  603)
* mro() (class method):                  Special Attributes. (line   47)
* msftoframe() (in module cd):           cd --- CD-ROM access on SGI systems.
                                                             (line   40)
* msg (httplib.HTTPResponse attribute):  HTTPResponse Objects.
                                                             (line   28)
* msg() (telnetlib.Telnet method):       Telnet Objects.     (line   78)
* msi:                                   msilib --- Read and write Microsoft Installer files.
                                                             (line    6)
* msilib (module):                       msilib --- Read and write Microsoft Installer files.
                                                             (line    6)
* msvcrt (module):                       msvcrt -- Useful routines from the MS VC++ runtime.
                                                             (line    6)
* mtime (tarfile.TarInfo attribute):     TarInfo Objects.    (line   53)
* mtime() (robotparser.RobotFileParser method): robotparser --- Parser for robots txt.
                                                             (line   40)
* mt_interact() (telnetlib.Telnet method): Telnet Objects.   (line  111)
* mul() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line  160)
* mul() (in module operator):            operator --- Standard operators as functions.
                                                             (line  131)
* MultiCall (class in xmlrpclib):        MultiCall Objects.  (line   11)
* MultiFile (class in multifile):        multifile --- Support for files containing distinct parts.
                                                             (line   17)
* multifile (module):                    multifile --- Support for files containing distinct parts.
                                                             (line    6)
* MULTILINE (in module re):              Module Contents.    (line   57)
* MultipartConversionError:              email errors Exception and Defect classes.
                                                             (line   44)
* multiplication:                        Binary arithmetic operations.
                                                             (line   16)
* multiply() (decimal.Context method):   Context objects.    (line  387)
* multiprocessing (module):              multiprocessing --- Process-based "threading" interface.
                                                             (line    6)
* multiprocessing.connection (module):   Listeners and Clients.
                                                             (line    6)
* multiprocessing.dummy (module):        The multiprocessing dummy module.
                                                             (line    6)
* multiprocessing.Manager() (in module multiprocessing.sharedctypes): Managers.
                                                             (line   11)
* multiprocessing.managers (module):     Managers.           (line   17)
* multiprocessing.Pool (class in multiprocessing.pool): Process Pools.
                                                             (line    9)
* multiprocessing.pool (module):         Process Pools.      (line    6)
* multiprocessing.queues.SimpleQueue (class in multiprocessing): Pipes and Queues.
                                                             (line  189)
* multiprocessing.sharedctypes (module): The multiprocessing sharedctypes module.
                                                             (line    6)
* mutable:                               Glossary.           (line  607)
* mutable object:                        Objects values and types.
                                                             (line   11)
* mutable sequence; loop over:           The for statement.  (line   37)
* mutable; sequence; types:              Mutable Sequence Types.
                                                             (line    6)
* MutableMapping (class in collections): Collections Abstract Base Classes.
                                                             (line  106)
* MutableSequence (class in collections): Collections Abstract Base Classes.
                                                             (line   96)
* MutableSet (class in collections):     Collections Abstract Base Classes.
                                                             (line  101)
* MutableString (class in UserString):   UserString --- Class wrapper for string objects.
                                                             (line   41)
* mutex (class in mutex):                mutex --- Mutual exclusion support.
                                                             (line   16)
* mutex (module):                        mutex --- Mutual exclusion support.
                                                             (line    6)
* mvderwin() (curses.window method):     Window Objects.     (line  358)
* mvwin() (curses.window method):        Window Objects.     (line  365)
* myrights() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  151)
* name:                                  Identifiers and keywords.
                                                             (line    6)
* name <1>:                              Naming and binding. (line    6)
* name <2>:                              Identifiers Names.  (line    6)
* name (cookielib.Cookie attribute):     Cookie Objects.     (line   27)
* name (doctest.DocTest attribute):      DocTest Objects.    (line   32)
* name (file attribute):                 File Objects.       (line  252)
* name (in module os):                   os --- Miscellaneous operating system interfaces.
                                                             (line   43)
* NAME (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* name (io.FileIO attribute):            Raw File I/O.       (line   38)
* name (multiprocessing.Process attribute): Process and exceptions.
                                                             (line   62)
* name (ossaudiodev.oss_audio_device attribute): Audio Device Objects.
                                                             (line  224)
* name (pyclbr.Class attribute):         Class Objects<2>.   (line   15)
* name (pyclbr.Function attribute):      Function Objects.   (line   14)
* name (tarfile.TarInfo attribute):      TarInfo Objects.    (line   45)
* name (threading.Thread attribute):     Thread Objects.     (line  124)
* name (xml.dom.Attr attribute):         Attr Objects.       (line    8)
* name (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   33)
* name() (in module unicodedata):        unicodedata --- Unicode Database.
                                                             (line   22)
* name2codepoint (in module htmlentitydefs): htmlentitydefs --- Definitions of HTML general entities.
                                                             (line   27)
* name; binding:                         The import statement.
                                                             (line    6)
* name; binding <1>:                     The import statement.
                                                             (line  122)
* name; binding <2>:                     Function definitions.
                                                             (line    6)
* name; binding <3>:                     Class definitions.  (line    6)
* name; mangling:                        Identifiers Names.  (line   14)
* named tuple:                           Glossary.           (line  612)
* NamedTemporaryFile() (in module tempfile): tempfile --- Generate temporary files and directories.
                                                             (line   57)
* namedtuple() (in module collections):  namedtuple Factory Function for Tuples with Named Fields.
                                                             (line   11)
* NameError:                             Built-in Exceptions.
                                                             (line  216)
* NameError (built-in exception):        Naming and binding. (line   51)
* namelist() (zipfile.ZipFile method):   ZipFile Objects.    (line   69)
* nameprep() (in module encodings.idna): encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   49)
* namespace:                             Naming and binding. (line    6)
* namespace <1>:                         Glossary.           (line  628)
* Namespace (class in argparse):         The Namespace object.
                                                             (line    6)
* namespace() (imaplib.IMAP4 method):    IMAP4 Objects.      (line  158)
* Namespace() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  153)
* NamespaceErr:                          Exceptions<6>.      (line   68)
* namespaceURI (xml.dom.Node attribute): Node Objects.       (line   74)
* NAMESPACE_DNS (in module uuid):        uuid --- UUID objects according to RFC 4122.
                                                             (line  152)
* NAMESPACE_OID (in module uuid):        uuid --- UUID objects according to RFC 4122.
                                                             (line  161)
* NAMESPACE_URL (in module uuid):        uuid --- UUID objects according to RFC 4122.
                                                             (line  157)
* NAMESPACE_X500 (in module uuid):       uuid --- UUID objects according to RFC 4122.
                                                             (line  165)
* NaN:                                   Built-in Functions. (line  543)
* NaN <1>:                               Deprecated string functions.
                                                             (line   23)
* NannyNag:                              tabnanny --- Detection of ambiguous indentation.
                                                             (line   37)
* napms() (in module curses):            Functions<2>.       (line  286)
* nargs (optparse.Option attribute):     Option attributes.  (line   42)
* Nav (module):                          Nav --- NavServices calls.
                                                             (line    6)
* Navigation Services:                   EasyDialogs --- Basic Macintosh dialogs.
                                                             (line  128)
* ndiff() (in module difflib):           difflib --- Helpers for computing deltas.
                                                             (line  223)
* ndim (memoryview attribute):           memoryview type.    (line   98)
* ne (2to3 fixer):                       Fixers.             (line  163)
* ne() (in module operator):             operator --- Standard operators as functions.
                                                             (line   19)
* neg() (in module operator):            operator --- Standard operators as functions.
                                                             (line  136)
* negation:                              Unary arithmetic and bitwise operations.
                                                             (line   11)
* nested scope:                          Glossary.           (line  642)
* nested() (in module contextlib):       contextlib --- Utilities for with-statement contexts.
                                                             (line   62)
* netrc (class in netrc):                netrc --- netrc file processing.
                                                             (line   15)
* netrc (module):                        netrc --- netrc file processing.
                                                             (line    6)
* NetrcParseError:                       netrc --- netrc file processing.
                                                             (line   32)
* netscape (cookielib.CookiePolicy attribute): CookiePolicy Objects.
                                                             (line   67)
* Network News Transfer Protocol:        nntplib --- NNTP protocol client.
                                                             (line    6)
* new (module):                          new --- Creation of runtime internal objects.
                                                             (line    6)
* new() (in module hmac):                hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   14)
* new() (in module md5):                 md5 --- MD5 message digest algorithm.
                                                             (line   40)
* new() (in module sha):                 sha --- SHA-1 message digest algorithm.
                                                             (line   16)
* new-style class:                       Glossary.           (line  652)
* newconfig() (in module al):            al --- Audio functions on the SGI.
                                                             (line   39)
* newer() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                             (line   10)
* newer_group() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                             (line   24)
* newer_pairwise() (in module distutils.dep_util): distutils dep_util --- Dependency checking.
                                                             (line   17)
* newgroups() (nntplib.NNTP method):     NNTP Objects.       (line   28)
* NEWLINE (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* NEWLINE token:                         Logical lines.      (line    6)
* NEWLINE token <1>:                     Compound statements.
                                                             (line   52)
* newline; suppression:                  The print statement.
                                                             (line   27)
* newlines (file attribute):             File Objects.       (line  259)
* newlines (io.TextIOBase attribute):    Text I/O.           (line   26)
* newnews() (nntplib.NNTP method):       NNTP Objects.       (line   42)
* newpad() (in module curses):           Functions<2>.       (line  290)
* newwin() (in module curses):           Functions<2>.       (line  310)
* new_alignment() (formatter.writer method): The Writer Interface.
                                                             (line   17)
* new_compiler() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   49)
* new_font() (formatter.writer method):  The Writer Interface.
                                                             (line   25)
* new_margin() (formatter.writer method): The Writer Interface.
                                                             (line   35)
* new_module() (in module imp):          imp --- Access the import internals.
                                                             (line   94)
* new_panel() (in module curses.panel):  Functions<3>.       (line   12)
* new_spacing() (formatter.writer method): The Writer Interface.
                                                             (line   42)
* new_styles() (formatter.writer method): The Writer Interface.
                                                             (line   46)
* next (2to3 fixer):                     Fixers.             (line  167)
* next() (bsddb.bsddbobject method):     Hash BTree and Record Objects.
                                                             (line   47)
* next() (built-in function):            Built-in Functions. (line  866)
* next() (csv.csvreader method):         Reader Objects.     (line   10)
* next() (dbhash.dbhash method):         Database Objects.   (line   23)
* next() (file method):                  File Objects.       (line   84)
* next() (generator method):             Generator-iterator methods.
                                                             (line   15)
* next() (iterator method):              Iterator Types.     (line   39)
* next() (mailbox.oldmailbox method):    Deprecated classes and methods.
                                                             (line   18)
* next() (multifile.MultiFile method):   MultiFile Objects.  (line   38)
* next() (nntplib.NNTP method):          NNTP Objects.       (line  118)
* next() (tarfile.TarFile method):       TarFile Objects.    (line  119)
* next() (ttk.Treeview method):          ttk Treeview.       (line  232)
* nextfile() (in module fileinput):      fileinput --- Iterate over lines from multiple input streams.
                                                             (line  102)
* nextkey() (in module gdbm):            gdbm --- GNU's reinterpretation of dbm.
                                                             (line   93)
* nextpart() (MimeWriter.MimeWriter method): MimeWriter Objects.
                                                             (line   43)
* nextSibling (xml.dom.Node attribute):  Node Objects.       (line   42)
* next_minus() (decimal.Context method): Context objects.    (line  391)
* next_minus() (decimal.Decimal method): Decimal objects.    (line  439)
* next_plus() (decimal.Context method):  Context objects.    (line  395)
* next_plus() (decimal.Decimal method):  Decimal objects.    (line  447)
* next_toward() (decimal.Context method): Context objects.   (line  399)
* next_toward() (decimal.Decimal method): Decimal objects.   (line  455)
* ngettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   63)
* ngettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   55)
* ngettext() (in module gettext):        GNU gettext API.    (line   68)
* nice() (in module os):                 Process Management. (line  296)
* nis (module):                          nis --- Interface to Sun's NIS Yellow Pages.
                                                             (line    6)
* NIST:                                  sha --- SHA-1 message digest algorithm.
                                                             (line    8)
* NL (in module tokenize):               tokenize --- Tokenizer for Python source.
                                                             (line   74)
* nl() (in module curses):               Functions<2>.       (line  320)
* nlargest() (in module heapq):          heapq --- Heap queue algorithm.
                                                             (line   95)
* nlst() (ftplib.FTP method):            FTP Objects.        (line  162)
* nl_langinfo() (in module locale):      locale --- Internationalization services.
                                                             (line  163)
* NNTP (class in nntplib):               nntplib --- NNTP protocol client.
                                                             (line   52)
* NNTP; protocol:                        nntplib --- NNTP protocol client.
                                                             (line    6)
* NNTPDataError:                         nntplib --- NNTP protocol client.
                                                             (line  103)
* NNTPError:                             nntplib --- NNTP protocol client.
                                                             (line   72)
* nntplib (module):                      nntplib --- NNTP protocol client.
                                                             (line    6)
* NNTPPermanentError:                    nntplib --- NNTP protocol client.
                                                             (line   90)
* NNTPProtocolError:                     nntplib --- NNTP protocol client.
                                                             (line   96)
* NNTPReplyError:                        nntplib --- NNTP protocol client.
                                                             (line   78)
* NNTPTemporaryError:                    nntplib --- NNTP protocol client.
                                                             (line   84)
* nocbreak() (in module curses):         Functions<2>.       (line  326)
* NoDataAllowedErr:                      Exceptions<6>.      (line   85)
* Node (class in compiler.ast):          AST Nodes.          (line   12)
* node() (in module platform):           Cross Platform.     (line   41)
* nodelay() (curses.window method):      Window Objects.     (line  369)
* nodeName (xml.dom.Node attribute):     Node Objects.       (line   79)
* NodeTransformer (class in ast):        ast Helpers.        (line  102)
* nodeType (xml.dom.Node attribute):     Node Objects.       (line    8)
* nodeValue (xml.dom.Node attribute):    Node Objects.       (line   88)
* NodeVisitor (class in ast):            ast Helpers.        (line   72)
* NODISC (in module cd):                 cd --- CD-ROM access on SGI systems.
                                                             (line   75)
* noecho() (in module curses):           Functions<2>.       (line  331)
* NOEXPR (in module locale):             locale --- Internationalization services.
                                                             (line  242)
* nofill (htmllib.HTMLParser attribute): HTMLParser Objects. (line   14)
* nok_builtin_names (rexec.RExec attribute): Defining restricted environments.
                                                             (line   13)
* noload() (pickle.Unpickler method):    Usage.              (line  178)
* NoModificationAllowedErr:              Exceptions<6>.      (line   90)
* nonblock() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   65)
* None (Built-in object):                Truth Value Testing.
                                                             (line   10)
* None (built-in variable):              Built-in Constants. (line   20)
* NoneType (in module types):            types --- Names for built-in types.
                                                             (line   42)
* nonl() (in module curses):             Functions<2>.       (line  335)
* nonzero (2to3 fixer):                  Fixers.             (line  173)
* noop() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  164)
* noop() (poplib.POP3 method):           POP3 Objects.       (line   71)
* NoOptionError:                         ConfigParser --- Configuration file parser.
                                                             (line  153)
* NOP (opcode):                          Python Bytecode Instructions.
                                                             (line   13)
* noqiflush() (in module curses):        Functions<2>.       (line  345)
* noraw() (in module curses):            Functions<2>.       (line  354)
* normalize() (decimal.Context method):  Context objects.    (line  403)
* normalize() (decimal.Decimal method):  Decimal objects.    (line  465)
* normalize() (in module locale):        locale --- Internationalization services.
                                                             (line  346)
* normalize() (in module unicodedata):   unicodedata --- Unicode Database.
                                                             (line   83)
* normalize() (xml.dom.Node method):     Node Objects.       (line  141)
* NORMALIZE_WHITESPACE (in module doctest): Option Flags.    (line   36)
* normalvariate() (in module random):    random --- Generate pseudo-random numbers.
                                                             (line  257)
* normcase() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  200)
* normpath() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  207)
* NoSectionError:                        ConfigParser --- Configuration file parser.
                                                             (line  144)
* NoSuchMailboxError:                    Exceptions<5>.      (line   13)
* NotANumber:                            fpformat --- Floating point conversions.
                                                             (line   41)
* notation:                              Notation.           (line    6)
* notationDecl() (xml.sax.handler.DTDHandler method): DTDHandler Objects.
                                                             (line    8)
* NotationDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  305)
* notations (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   46)
* NotConnected:                          httplib --- HTTP protocol client.
                                                             (line  102)
* NoteBook (class in Tix):               Manager Widgets.    (line   22)
* Notebook (class in ttk):               ttk Notebook.       (line    6)
* NotEmptyError:                         Exceptions<5>.      (line   20)
* NOTEQUAL (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* NotFoundErr:                           Exceptions<6>.      (line   74)
* notify() (threading.Condition method): Condition Objects.  (line  101)
* notifyAll() (threading.Condition method): Condition Objects.
                                                             (line  121)
* notify_all() (threading.Condition method): Condition Objects.
                                                             (line  121)
* notimeout() (curses.window method):    Window Objects.     (line  373)
* NotImplemented (built-in variable):    Built-in Constants. (line   29)
* NotImplementedError:                   Built-in Exceptions.
                                                             (line  222)
* NotImplementedType (in module types):  types --- Names for built-in types.
                                                             (line  189)
* NotStandaloneHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  356)
* NotSupportedErr:                       Exceptions<6>.      (line   80)
* not_() (in module operator):           operator --- Standard operators as functions.
                                                             (line   47)
* noutrefresh() (curses.window method):  Window Objects.     (line  380)
* now() (datetime.datetime class method): datetime Objects.  (line   47)
* no_proxy:                              High-level interface.
                                                             (line   71)
* no_proxy <1>:                          High-level interface.
                                                             (line  107)
* NProperty (class in aetypes):          aetypes --- AppleEvent objects.
                                                             (line  117)
* NSIG (in module signal):               signal --- Set handlers for asynchronous events.
                                                             (line   95)
* nsmallest() (in module heapq):         heapq --- Heap queue algorithm.
                                                             (line  107)
* NTEventLogHandler (class in logging.handlers): NTEventLogHandler.
                                                             (line   11)
* ntohl() (in module socket):            socket --- Low-level networking interface.
                                                             (line  411)
* ntohs() (in module socket):            socket --- Low-level networking interface.
                                                             (line  418)
* ntransfercmd() (ftplib.FTP method):    FTP Objects.        (line  154)
* NT_OFFSET (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* null; operation:                       The pass statement. (line    6)
* NullFormatter (class in formatter):    Formatter Implementations.
                                                             (line   10)
* NullHandler (class in logging):        NullHandler.        (line   12)
* NullImporter (class in imp):           imp --- Access the import internals.
                                                             (line  248)
* NullTranslations (class in gettext):   The NullTranslations class.
                                                             (line   13)
* NullWriter (class in formatter):       Writer Implementations.
                                                             (line   10)
* number:                                Numeric literals.   (line    6)
* Number (class in numbers):             numbers --- Numeric abstract base classes.
                                                             (line   13)
* NUMBER (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* numbers (module):                      numbers --- Numeric abstract base classes.
                                                             (line    6)
* number_class() (decimal.Context method): Context objects.  (line  407)
* number_class() (decimal.Decimal method): Decimal objects.  (line  474)
* numerator (numbers.Rational attribute): The numeric tower. (line   47)
* numeric literal:                       Numeric literals.   (line    6)
* numeric() (in module unicodedata):     unicodedata --- Unicode Database.
                                                             (line   40)
* numeric; conversions:                  Numeric Types --- int float long complex.
                                                             (line  114)
* numeric; literals:                     Numeric Types --- int float long complex.
                                                             (line   23)
* Numerical Python:                      Built-in Functions. (line 1305)
* numliterals (2to3 fixer):              Fixers.             (line  177)
* nurbscurve() (in module gl):           gl --- Graphics Library interface.
                                                             (line   90)
* nurbssurface() (in module gl):         gl --- Graphics Library interface.
                                                             (line   85)
* nvarray() (in module gl):              gl --- Graphics Library interface.
                                                             (line   70)
* N_TOKENS (in module token):            token --- Constants used with Python parse trees.
                                                             (line   40)
* object:                                Objects values and types.
                                                             (line    6)
* object <1>:                            Glossary.           (line  663)
* object (exceptions.UnicodeError attribute): Built-in Exceptions.
                                                             (line  383)
* object() (built-in function):          Built-in Functions. (line  875)
* object; Boolean:                       The standard type hierarchy.
                                                             (line   86)
* object; Boolean <1>:                   Numeric Types --- int float long complex.
                                                             (line    6)
* object; buffer:                        Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; buffer <1>:                    Buffers and Memoryview Objects.
                                                             (line    6)
* object; built-in function:             The standard type hierarchy.
                                                             (line  468)
* object; built-in function <1>:         Calls.              (line  135)
* object; built-in method:               The standard type hierarchy.
                                                             (line  480)
* object; built-in method <1>:           Calls.              (line  135)
* object; bytearray:                     Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; bytearray <1>:                 Byte Array Objects. (line    6)
* object; callable:                      The standard type hierarchy.
                                                             (line  289)
* object; callable <1>:                  Slicings.           (line   57)
* object; Capsule:                       Capsules<2>.        (line    6)
* object; class:                         The standard type hierarchy.
                                                             (line  498)
* object; class <1>:                     The standard type hierarchy.
                                                             (line  566)
* object; class <2>:                     Calls.              (line  140)
* object; class <3>:                     Class definitions.  (line    6)
* object; class <4>:                     Class and Instance Objects.
                                                             (line    6)
* object; class instance:                The standard type hierarchy.
                                                             (line  498)
* object; class instance <1>:            The standard type hierarchy.
                                                             (line  566)
* object; class instance <2>:            The standard type hierarchy.
                                                             (line  596)
* object; class instance <3>:            Calls.              (line  144)
* object; CObject:                       CObjects.           (line    6)
* object; code:                          The standard type hierarchy.
                                                             (line  648)
* object; code <1>:                      Code Objects.       (line    6)
* object; code <2>:                      marshal --- Internal Python object serialization.
                                                             (line   13)
* object; code <3>:                      Code Objects<2>.    (line    6)
* object; complex:                       The standard type hierarchy.
                                                             (line  117)
* object; complex number:                Numeric Types --- int float long complex.
                                                             (line    6)
* object; complex number <1>:            Complex Number Objects.
                                                             (line    6)
* object; deallocation:                  Finalization and De-allocation.
                                                             (line    6)
* object; dictionary:                    The standard type hierarchy.
                                                             (line  270)
* object; dictionary <1>:                The standard type hierarchy.
                                                             (line  566)
* object; dictionary <2>:                Basic customization.
                                                             (line  198)
* object; dictionary <3>:                Dictionary displays.
                                                             (line    6)
* object; dictionary <4>:                Subscriptions.      (line    6)
* object; dictionary <5>:                Assignment statements.
                                                             (line  106)
* object; dictionary <6>:                Mapping Types --- dict.
                                                             (line    6)
* object; dictionary <7>:                Dictionary Objects. (line    6)
* object; Ellipsis:                      The standard type hierarchy.
                                                             (line   37)
* object; file:                          Reading and Writing Files.
                                                             (line    6)
* object; file <1>:                      The standard type hierarchy.
                                                             (line  630)
* object; file <2>:                      Expression input.   (line   19)
* object; file <3>:                      File Objects.       (line    6)
* object; file <4>:                      File Objects<2>.    (line    6)
* object; finalization:                  Finalization and De-allocation.
                                                             (line    6)
* object; floating point:                The standard type hierarchy.
                                                             (line  105)
* object; floating point <1>:            Numeric Types --- int float long complex.
                                                             (line    6)
* object; floating point <2>:            Floating Point Objects.
                                                             (line    6)
* object; frame:                         The standard type hierarchy.
                                                             (line  702)
* object; frozenset:                     The standard type hierarchy.
                                                             (line  252)
* object; frozenset <1>:                 Set Objects<2>.     (line    6)
* object; function:                      The standard type hierarchy.
                                                             (line  294)
* object; function <1>:                  The standard type hierarchy.
                                                             (line  468)
* object; function <2>:                  Calls.              (line  126)
* object; function <3>:                  Calls.              (line  135)
* object; function <4>:                  Function definitions.
                                                             (line    6)
* object; function <5>:                  Function Objects<2>.
                                                             (line    6)
* object; generator:                     The standard type hierarchy.
                                                             (line  680)
* object; generator <1>:                 Generator expressions.
                                                             (line    6)
* object; generator <2>:                 Yield expressions.  (line   38)
* object; immutable:                     The standard type hierarchy.
                                                             (line  144)
* object; immutable sequence:            The standard type hierarchy.
                                                             (line  144)
* object; instance:                      The standard type hierarchy.
                                                             (line  498)
* object; instance <1>:                  The standard type hierarchy.
                                                             (line  566)
* object; instance <2>:                  The standard type hierarchy.
                                                             (line  596)
* object; instance <3>:                  Calls.              (line  144)
* object; instance <4>:                  Class and Instance Objects.
                                                             (line   31)
* object; integer:                       The standard type hierarchy.
                                                             (line   56)
* object; integer <1>:                   Numeric Types --- int float long complex.
                                                             (line    6)
* object; integer <2>:                   Plain Integer Objects.
                                                             (line    6)
* object; list:                          The standard type hierarchy.
                                                             (line  211)
* object; list <1>:                      List displays.      (line   18)
* object; list <2>:                      Attribute references.
                                                             (line   11)
* object; list <3>:                      Subscriptions.      (line    6)
* object; list <4>:                      Slicings.           (line    6)
* object; list <5>:                      Assignment statements.
                                                             (line   97)
* object; list <6>:                      Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; list <7>:                      Mutable Sequence Types.
                                                             (line    6)
* object; list <8>:                      List Objects.       (line    6)
* object; long integer:                  The standard type hierarchy.
                                                             (line   77)
* object; long integer <1>:              Numeric Types --- int float long complex.
                                                             (line    6)
* object; long integer <2>:              Long Integer Objects.
                                                             (line    6)
* object; mapping:                       The standard type hierarchy.
                                                             (line  259)
* object; mapping <1>:                   The standard type hierarchy.
                                                             (line  621)
* object; mapping <2>:                   Subscriptions.      (line    6)
* object; mapping <3>:                   Assignment statements.
                                                             (line  106)
* object; mapping <4>:                   Mapping Types --- dict.
                                                             (line    6)
* object; mapping <5>:                   Mapping Objects.    (line    6)
* object; method:                        Instance Objects.   (line   31)
* object; method <1>:                    The standard type hierarchy.
                                                             (line  368)
* object; method <2>:                    The standard type hierarchy.
                                                             (line  480)
* object; method <3>:                    Calls.              (line  135)
* object; method <4>:                    Methods.            (line    6)
* object; method <5>:                    Method Objects<2>.  (line    6)
* object; module:                        The standard type hierarchy.
                                                             (line  515)
* object; module <1>:                    Attribute references.
                                                             (line   11)
* object; module <2>:                    Module Objects.     (line    6)
* object; mutable:                       The standard type hierarchy.
                                                             (line  203)
* object; mutable <1>:                   Assignment statements.
                                                             (line    6)
* object; mutable <2>:                   Assignment statements.
                                                             (line   92)
* object; mutable sequence:              The standard type hierarchy.
                                                             (line  203)
* object; None:                          The standard type hierarchy.
                                                             (line   19)
* object; None <1>:                      Expression statements.
                                                             (line   18)
* object; None <2>:                      The None Object.    (line    6)
* object; NotImplemented:                The standard type hierarchy.
                                                             (line   27)
* object; numeric:                       The standard type hierarchy.
                                                             (line   44)
* object; numeric <1>:                   The standard type hierarchy.
                                                             (line  621)
* object; numeric <2>:                   Comparisons<2>.     (line   48)
* object; numeric <3>:                   Numeric Types --- int float long complex.
                                                             (line    6)
* object; numeric <4>:                   Numeric Objects.    (line    6)
* object; plain integer:                 The standard type hierarchy.
                                                             (line   63)
* object; recursive:                     String conversions. (line   26)
* object; sequence:                      The standard type hierarchy.
                                                             (line  125)
* object; sequence <1>:                  The standard type hierarchy.
                                                             (line  621)
* object; sequence <2>:                  Subscriptions.      (line    6)
* object; sequence <3>:                  Slicings.           (line    6)
* object; sequence <4>:                  Comparisons.        (line  116)
* object; sequence <5>:                  Assignment statements.
                                                             (line   97)
* object; sequence <6>:                  The for statement.  (line    6)
* object; sequence <7>:                  Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; sequence <8>:                  Sequence Objects.   (line    6)
* object; set:                           The standard type hierarchy.
                                                             (line  246)
* object; set <1>:                       Set displays.       (line    6)
* object; set <2>:                       Set Types --- set frozenset.
                                                             (line    6)
* object; set <3>:                       Set Objects<2>.     (line    6)
* object; set type:                      The standard type hierarchy.
                                                             (line  229)
* object; slice:                         Emulating container types.
                                                             (line   50)
* object; socket:                        socket --- Low-level networking interface.
                                                             (line   25)
* object; string:                        The standard type hierarchy.
                                                             (line  154)
* object; string <1>:                    Subscriptions.      (line    6)
* object; string <2>:                    Slicings.           (line    6)
* object; string <3>:                    Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; string <4>:                    String/Bytes Objects.
                                                             (line   13)
* object; traceback:                     The standard type hierarchy.
                                                             (line  729)
* object; traceback <1>:                 The raise statement.
                                                             (line   33)
* object; traceback <2>:                 The try statement.  (line   55)
* object; traceback <3>:                 sys --- System-specific parameters and functions.
                                                             (line  140)
* object; traceback <4>:                 traceback --- Print or retrieve a stack traceback.
                                                             (line   12)
* object; tuple:                         The standard type hierarchy.
                                                             (line  192)
* object; tuple <1>:                     Subscriptions.      (line    6)
* object; tuple <2>:                     Slicings.           (line    6)
* object; tuple <3>:                     Expression lists.   (line    9)
* object; tuple <4>:                     Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; tuple <5>:                     Tuple Objects.      (line    6)
* object; type:                          Built-in Functions. (line 1499)
* object; type <1>:                      Objects Types and Reference Counts.
                                                             (line    6)
* object; type <2>:                      Type Objects<2>.    (line    6)
* object; unicode:                       The standard type hierarchy.
                                                             (line  175)
* object; Unicode:                       Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; user-defined function:         The standard type hierarchy.
                                                             (line  294)
* object; user-defined function <1>:     Calls.              (line  126)
* object; user-defined function <2>:     Function definitions.
                                                             (line    6)
* object; user-defined method:           The standard type hierarchy.
                                                             (line  368)
* object; xrange:                        Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line   12)
* object; xrange <1>:                    XRange Type.        (line    6)
* objects; comparing:                    Comparisons<2>.     (line   48)
* ObjectSpecifier (class in aetypes):    aetypes --- AppleEvent objects.
                                                             (line  124)
* object_filenames() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  468)
* obufcount() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  208)
* obuffree() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  213)
* oct() (built-in function):             Built-in Functions. (line  886)
* oct() (in module future_builtins):     future_builtins --- Python 3 builtins.
                                                             (line   56)
* octal literal:                         Numeric literals.   (line    6)
* octal; literals:                       Numeric Types --- int float long complex.
                                                             (line   23)
* octdigits (in module string):          String constants.   (line   47)
* offset (xml.parsers.expat.ExpatError attribute): ExpatError Exceptions.
                                                             (line   24)
* OK (in module curses):                 Constants<3>.       (line   13)
* ok_builtin_modules (rexec.RExec attribute): Defining restricted environments.
                                                             (line   25)
* ok_file_types (rexec.RExec attribute): Defining restricted environments.
                                                             (line   59)
* ok_path (rexec.RExec attribute):       Defining restricted environments.
                                                             (line   35)
* ok_posix_names (rexec.RExec attribute): Defining restricted environments.
                                                             (line   42)
* ok_sys_names (rexec.RExec attribute):  Defining restricted environments.
                                                             (line   51)
* OleDLL (class in ctypes):              Loading shared libraries.
                                                             (line   16)
* onclick() (in module turtle):          Using events.       (line    6)
* onclick() (in module turtle) <1>:      Using screen events.
                                                             (line   33)
* ondrag() (in module turtle):           Using events.       (line   57)
* onecmd() (cmd.Cmd method):             Cmd Objects.        (line   57)
* onkey() (in module turtle):            Using screen events.
                                                             (line   12)
* onrelease() (in module turtle):        Using events.       (line   30)
* onscreenclick() (in module turtle):    Using screen events.
                                                             (line   33)
* ontimer() (in module turtle):          Using screen events.
                                                             (line   63)
* OP (in module token):                  token --- Constants used with Python parse trees.
                                                             (line   40)
* Open Scripting Architecture:           MiniAEFrame --- Open Scripting Architecture server support.
                                                             (line    6)
* open() (built-in function):            Built-in Functions. (line  893)
* open() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line   91)
* open() (FrameWork.DialogWindow method): DialogWindow Objects.
                                                             (line    9)
* open() (FrameWork.Window method):      Window Objects<2>.  (line    8)
* open() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  168)
* open() (in module aifc):               aifc --- Read and write AIFF and AIFC files.
                                                             (line   34)
* open() (in module anydbm):             anydbm --- Generic access to DBM-style databases.
                                                             (line   16)
* open() (in module cd):                 cd --- CD-ROM access on SGI systems.
                                                             (line   45)
* open() (in module codecs):             codecs --- Codec registry and base classes.
                                                             (line  239)
* open() (in module dbhash):             dbhash --- DBM-style interface to the BSD database library.
                                                             (line   22)
* open() (in module dbm):                dbm --- Simple "database" interface.
                                                             (line   33)
* open() (in module dl):                 dl --- Call C functions in shared objects.
                                                             (line   24)
* open() (in module dumbdbm):            dumbdbm --- Portable DBM implementation.
                                                             (line   30)
* open() (in module gdbm):               gdbm --- GNU's reinterpretation of dbm.
                                                             (line   28)
* open() (in module gzip):               gzip --- Support for gzip files.
                                                             (line   84)
* open() (in module io):                 Module Interface.   (line   12)
* open() (in module os):                 File Descriptor Operations.
                                                             (line  169)
* open() (in module ossaudiodev):        ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   39)
* open() (in module posixfile):          posixfile --- File-like objects with locking support.
                                                             (line   38)
* open() (in module shelve):             shelve --- Python object persistence.
                                                             (line   17)
* open() (in module sunau):              sunau --- Read and write Sun AU files.
                                                             (line   48)
* open() (in module sunaudiodev):        sunaudiodev --- Access to Sun audio hardware.
                                                             (line   24)
* open() (in module tarfile):            tarfile --- Read and write tar archive files.
                                                             (line   37)
* open() (in module wave):               wave --- Read and write WAV files.
                                                             (line   17)
* open() (in module webbrowser):         webbrowser --- Convenient Web-browser controller.
                                                             (line   50)
* open() (pipes.Template method):        Template Objects.   (line   42)
* open() (tarfile.TarFile class method): TarFile Objects.    (line   89)
* open() (telnetlib.Telnet method):      Telnet Objects.     (line   66)
* open() (urllib.URLopener method):      URL Opener objects. (line   35)
* open() (urllib2.OpenerDirector method): OpenerDirector Objects.
                                                             (line   29)
* open() (webbrowser.controller method): Browser Controller Objects.
                                                             (line    9)
* open() (zipfile.ZipFile method):       ZipFile Objects.    (line   73)
* OpenDatabase() (in module msilib):     msilib --- Read and write Microsoft Installer files.
                                                             (line   43)
* opendir() (in module dircache):        dircache --- Cached directory listings.
                                                             (line   29)
* OpenerDirector (class in urllib2):     urllib2 --- extensible library for opening URLs.
                                                             (line  175)
* openfolder() (mhlib.MH method):        MH Objects.         (line   52)
* openfp() (in module sunau):            sunau --- Read and write Sun AU files.
                                                             (line   66)
* openfp() (in module wave):             wave --- Read and write WAV files.
                                                             (line   42)
* OpenGL:                                gl --- Graphics Library interface.
                                                             (line  142)
* OpenKey() (in module _winreg):         _winreg -- Windows registry access.
                                                             (line  253)
* OpenKeyEx() (in module _winreg):       _winreg -- Windows registry access.
                                                             (line  274)
* openlog() (in module syslog):          syslog --- Unix syslog library routines.
                                                             (line   31)
* openmessage() (mhlib.Message method):  Message Objects.    (line    9)
* openmixer() (in module ossaudiodev):   ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   67)
* openport() (in module al):             al --- Audio functions on the SGI.
                                                             (line   32)
* openpty() (in module os):              File Descriptor Operations.
                                                             (line  190)
* openpty() (in module pty):             pty --- Pseudo-terminal utilities.
                                                             (line   25)
* openrf() (in module MacOS):            MacOS --- Access to Mac OS interpreter features.
                                                             (line   80)
* OpenSSL; (use in module hashlib):      hashlib --- Secure hashes and message digests.
                                                             (line   32)
* OpenSSL; (use in module ssl):          ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* OPENSSL_VERSION (in module ssl):       Functions Constants and Exceptions.
                                                             (line  244)
* OPENSSL_VERSION_INFO (in module ssl):  Functions Constants and Exceptions.
                                                             (line  254)
* OPENSSL_VERSION_NUMBER (in module ssl): Functions Constants and Exceptions.
                                                             (line  264)
* OpenView() (msilib.Database method):   Database Objects<2>.
                                                             (line    6)
* open_new() (in module webbrowser):     webbrowser --- Convenient Web-browser controller.
                                                             (line   66)
* open_new() (webbrowser.controller method): Browser Controller Objects.
                                                             (line   15)
* open_new_tab() (in module webbrowser): webbrowser --- Convenient Web-browser controller.
                                                             (line   71)
* open_new_tab() (webbrowser.controller method): Browser Controller Objects.
                                                             (line   21)
* open_osfhandle() (in module msvcrt):   File Operations.    (line   41)
* open_unknown() (urllib.URLopener method): URL Opener objects.
                                                             (line   44)
* operations on; dictionary; type:       Mapping Types --- dict.
                                                             (line    6)
* operations on; integer; types:         Bitwise Operations on Integer Types.
                                                             (line    6)
* operations on; list; type:             Mutable Sequence Types.
                                                             (line   13)
* operations on; mapping; types:         Mapping Types --- dict.
                                                             (line    6)
* operations on; numeric; types:         Numeric Types --- int float long complex.
                                                             (line  105)
* operations on; sequence; types:        Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* operations on; sequence; types <1>:    Mutable Sequence Types.
                                                             (line   13)
* operator (module):                     operator --- Standard operators as functions.
                                                             (line    6)
* operator; !=:                          Comparisons<2>.     (line    6)
* operator; %:                           Numeric Types --- int float long complex.
                                                             (line   34)
* operator; &:                           Bitwise Operations on Integer Types.
                                                             (line    6)
* operator; *:                           Numeric Types --- int float long complex.
                                                             (line   34)
* operator; **:                          Numeric Types --- int float long complex.
                                                             (line   34)
* operator; +:                           Numeric Types --- int float long complex.
                                                             (line   34)
* operator; -:                           Numeric Types --- int float long complex.
                                                             (line   34)
* operator; /:                           Numeric Types --- int float long complex.
                                                             (line   34)
* operator; //:                          Numeric Types --- int float long complex.
                                                             (line   34)
* operator; <:                           Comparisons<2>.     (line    6)
* operator; <<:                          Bitwise Operations on Integer Types.
                                                             (line    6)
* operator; <=:                          Comparisons<2>.     (line    6)
* operator; ==:                          Comparisons<2>.     (line    6)
* operator; >:                           Comparisons<2>.     (line    6)
* operator; >=:                          Comparisons<2>.     (line    6)
* operator; >>:                          Bitwise Operations on Integer Types.
                                                             (line    6)
* operator; and:                         Boolean operations. (line   21)
* operator; and <1>:                     Truth Value Testing.
                                                             (line   28)
* operator; and <2>:                     Boolean Operations --- and or not.
                                                             (line   22)
* operator; comparison:                  Comparisons<2>.     (line    6)
* operator; in:                          Comparisons.        (line  116)
* operator; in <1>:                      Comparisons<2>.     (line   72)
* operator; in <2>:                      Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* operator; is:                          Comparisons.        (line  119)
* operator; is <1>:                      Comparisons<2>.     (line    6)
* operator; is not:                      Comparisons.        (line  119)
* operator; is not <1>:                  Comparisons<2>.     (line    6)
* operator; not:                         Boolean operations. (line   18)
* operator; not <1>:                     Boolean Operations --- and or not.
                                                             (line   22)
* operator; not in:                      Comparisons.        (line  116)
* operator; not in <1>:                  Comparisons<2>.     (line   72)
* operator; not in <2>:                  Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* operator; or:                          Boolean operations. (line   25)
* operator; or <1>:                      Truth Value Testing.
                                                             (line   28)
* operator; or <2>:                      Boolean Operations --- and or not.
                                                             (line   22)
* operator; overloading:                 Special method names.
                                                             (line    6)
* operator; precedence:                  Operator precedence.
                                                             (line    6)
* operator; ^:                           Bitwise Operations on Integer Types.
                                                             (line    6)
* operators:                             Operators.          (line    6)
* opmap (in module dis):                 dis --- Disassembler for Python bytecode.
                                                             (line   99)
* opname (in module dis):                dis --- Disassembler for Python bytecode.
                                                             (line   95)
* optimize() (in module pickletools):    pickletools --- Tools for pickle developers.
                                                             (line   40)
* OptionGroup (class in optparse):       Grouping Options.   (line   12)
* OptionMenu (class in Tix):             Basic Widgets.      (line   49)
* OptionParser (class in optparse):      Creating the parser.
                                                             (line    9)
* options (doctest.Example attribute):   Example Objects.    (line   55)
* options() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   29)
* optionxform() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line  135)
* optparse (module):                     optparse --- Parser for command line options.
                                                             (line    6)
* ord() (built-in function):             Built-in Functions. (line  954)
* OrderedDict (class in collections):    OrderedDict objects.
                                                             (line   11)
* ordered_attributes (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  119)
* Ordinal (class in aetypes):            aetypes --- AppleEvent objects.
                                                             (line   93)
* origin_server (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  253)
* or_() (in module operator):            operator --- Standard operators as functions.
                                                             (line  141)
* os (module):                           os --- Miscellaneous operating system interfaces.
                                                             (line    6)
* os.path (module):                      os path --- Common pathname manipulations.
                                                             (line    6)
* OSError:                               Built-in Exceptions.
                                                             (line  230)
* ossaudiodev (module):                  ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line    6)
* OSSAudioError:                         ossaudiodev --- Access to OSS-compatible audio devices.
                                                             (line   26)
* os_environ (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  134)
* output:                                Expression statements.
                                                             (line   18)
* output <1>:                            The print statement.
                                                             (line   27)
* output (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  149)
* output() (Cookie.BaseCookie method):   Cookie Objects<2>.  (line   22)
* output() (Cookie.Morsel method):       Morsel Objects.     (line   58)
* OutputChecker (class in doctest):      OutputChecker objects.
                                                             (line    6)
* OutputString() (Cookie.Morsel method): Morsel Objects.     (line   73)
* OutputType (in module cStringIO):      cStringIO --- Faster version of StringIO.
                                                             (line   38)
* output_charset (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   66)
* output_charset() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   87)
* output_codec (email.charset.Charset attribute): email charset Representing character sets.
                                                             (line   80)
* output_difference() (doctest.OutputChecker method): OutputChecker objects.
                                                             (line   29)
* Overflow (class in decimal):           Signals.            (line   68)
* OverflowError:                         Built-in Exceptions.
                                                             (line  248)
* OverflowError (built-in exception):    The standard type hierarchy.
                                                             (line   63)
* OverflowError (built-in exception) <1>: Long Integer Objects.
                                                             (line  149)
* OverflowError (built-in exception) <2>: Long Integer Objects.
                                                             (line  179)
* OverflowError (built-in exception) <3>: Long Integer Objects.
                                                             (line  187)
* OverflowError (built-in exception) <4>: Long Integer Objects.
                                                             (line  201)
* OverflowError (built-in exception) <5>: Long Integer Objects.
                                                             (line  211)
* overlay() (curses.window method):      Window Objects.     (line  387)
* Overmars, Mark:                        fl --- FORMS library for graphical user interfaces.
                                                             (line    9)
* overwrite() (curses.window method):    Window Objects.     (line  400)
* O_APPEND (in module os):               open flag constants.
                                                             (line   12)
* O_ASYNC (in module os):                open flag constants.
                                                             (line   43)
* O_BINARY (in module os):               open flag constants.
                                                             (line   33)
* O_CREAT (in module os):                open flag constants.
                                                             (line   12)
* O_DIRECT (in module os):               open flag constants.
                                                             (line   43)
* O_DIRECTORY (in module os):            open flag constants.
                                                             (line   43)
* O_DSYNC (in module os):                open flag constants.
                                                             (line   22)
* O_EXCL (in module os):                 open flag constants.
                                                             (line   12)
* O_EXLOCK (in module os):               open flag constants.
                                                             (line   22)
* O_NDELAY (in module os):               open flag constants.
                                                             (line   22)
* O_NOATIME (in module os):              open flag constants.
                                                             (line   43)
* O_NOCTTY (in module os):               open flag constants.
                                                             (line   22)
* O_NOFOLLOW (in module os):             open flag constants.
                                                             (line   43)
* O_NOINHERIT (in module os):            open flag constants.
                                                             (line   33)
* O_NONBLOCK (in module os):             open flag constants.
                                                             (line   22)
* O_RANDOM (in module os):               open flag constants.
                                                             (line   33)
* O_RDONLY (in module os):               open flag constants.
                                                             (line   12)
* O_RDWR (in module os):                 open flag constants.
                                                             (line   12)
* O_RSYNC (in module os):                open flag constants.
                                                             (line   22)
* O_SEQUENTIAL (in module os):           open flag constants.
                                                             (line   33)
* O_SHLOCK (in module os):               open flag constants.
                                                             (line   22)
* O_SHORT_LIVED (in module os):          open flag constants.
                                                             (line   33)
* O_SYNC (in module os):                 open flag constants.
                                                             (line   22)
* O_TEMPORARY (in module os):            open flag constants.
                                                             (line   33)
* O_TEXT (in module os):                 open flag constants.
                                                             (line   33)
* O_TRUNC (in module os):                open flag constants.
                                                             (line   12)
* O_WRONLY (in module os):               open flag constants.
                                                             (line   12)
* pack() (in module aepack):             aepack --- Conversion between Python variables and AppleEvent data containers.
                                                             (line   15)
* pack() (in module struct):             Functions and Exceptions.
                                                             (line   13)
* pack() (mailbox.MH method):            MH.                 (line   64)
* pack() (struct.Struct method):         Classes<2>.         (line   21)
* package:                               The import statement.
                                                             (line   25)
* package <1>:                           site --- Site-specific configuration hook.
                                                             (line   38)
* package <2>:                           Glossary.           (line  669)
* package variable; __all__:             Importing Modules<2>.
                                                             (line   10)
* Packer (class in xdrlib):              xdrlib --- Encode and decode XDR data.
                                                             (line   19)
* packevent() (in module aetools):       aetools --- OSA client support.
                                                             (line   25)
* packing (widgets):                     The Packer.         (line    6)
* packing; binary; data:                 struct --- Interpret strings as packed binary data.
                                                             (line    6)
* pack_array() (xdrlib.Packer method):   Packer Objects.     (line   86)
* pack_bytes() (xdrlib.Packer method):   Packer Objects.     (line   54)
* pack_double() (xdrlib.Packer method):  Packer Objects.     (line   26)
* pack_farray() (xdrlib.Packer method):  Packer Objects.     (line   78)
* pack_float() (xdrlib.Packer method):   Packer Objects.     (line   22)
* pack_fopaque() (xdrlib.Packer method): Packer Objects.     (line   38)
* pack_fstring() (xdrlib.Packer method): Packer Objects.     (line   32)
* pack_into() (in module struct):        Functions and Exceptions.
                                                             (line   19)
* pack_into() (struct.Struct method):    Classes<2>.         (line   26)
* pack_list() (xdrlib.Packer method):    Packer Objects.     (line   61)
* pack_opaque() (xdrlib.Packer method):  Packer Objects.     (line   49)
* pack_string() (xdrlib.Packer method):  Packer Objects.     (line   43)
* PAGER:                                 Debugger Commands.  (line   46)
* pair_content() (in module curses):     Functions<2>.       (line  359)
* pair_number() (in module curses):      Functions<2>.       (line  365)
* PanedWindow (class in Tix):            Manager Widgets.    (line    6)
* parameter:                             Glossary.           (line  675)
* parameter; call semantics:             Calls.              (line   26)
* parameter; difference from argument:   How can I pass optional or keyword parameters from one function to another?.
                                                             (line   25)
* parameter; function definition:        The with statement. (line   83)
* pardir (in module os):                 Miscellaneous System Information.
                                                             (line   78)
* paren (2to3 fixer):                    Fixers.             (line  181)
* parent (urllib2.BaseHandler attribute): BaseHandler Objects.
                                                             (line   25)
* parent() (ttk.Treeview method):        ttk Treeview.       (line  237)
* parenthesized form:                    Parenthesized forms.
                                                             (line    6)
* parentNode (xml.dom.Node attribute):   Node Objects.       (line   17)
* paretovariate() (in module random):    random --- Generate pseudo-random numbers.
                                                             (line  270)
* parse() (doctest.DocTestParser method): DocTestParser objects.
                                                             (line   31)
* parse() (email.parser.Parser method):  Parser class API.   (line   38)
* parse() (in module ast):               ast Helpers.        (line   11)
* parse() (in module cgi):               Functions<5>.       (line    9)
* parse() (in module compiler):          The basic interface.
                                                             (line   10)
* parse() (in module xml.dom.minidom):   xml dom minidom --- Minimal DOM implementation.
                                                             (line   39)
* parse() (in module xml.dom.pulldom):   xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   32)
* parse() (in module xml.etree.ElementTree): Functions<4>.   (line   69)
* parse() (in module xml.sax):           xml sax --- Support for SAX2 parsers.
                                                             (line   27)
* parse() (robotparser.RobotFileParser method): robotparser --- Parser for robots txt.
                                                             (line   30)
* parse() (string.Formatter method):     String Formatting.  (line   40)
* parse() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   60)
* Parse() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line    8)
* parse() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line    8)
* parseaddr() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line   21)
* parseaddr() (in module rfc822):        rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   74)
* parsedate() (in module email.utils):   email utils Miscellaneous utilities.
                                                             (line   51)
* parsedate() (in module rfc822):        rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   89)
* parsedate_tz() (in module email.utils): email utils Miscellaneous utilities.
                                                             (line   63)
* parsedate_tz() (in module rfc822):     rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  101)
* parseFile() (in module compiler):      The basic interface.
                                                             (line   17)
* ParseFile() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   16)
* ParseFlags() (in module imaplib):      imaplib --- IMAP4 protocol client.
                                                             (line   85)
* parser:                                Lexical analysis.   (line    6)
* Parser (class in email.parser):        Parser class API.   (line   16)
* parser (module):                       parser --- Access Python parse trees.
                                                             (line    6)
* ParserCreate() (in module xml.parsers.expat): xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   46)
* ParserError:                           Exceptions and Error Handling.
                                                             (line   11)
* ParseResult (class in urlparse):       Results of urlparse and urlsplit.
                                                             (line   45)
* parsesequence() (mhlib.Folder method): Folder Objects.     (line   37)
* parsestr() (email.parser.Parser method): Parser class API. (line   58)
* parseString() (in module xml.dom.minidom): xml dom minidom --- Minimal DOM implementation.
                                                             (line   52)
* parseString() (in module xml.dom.pulldom): xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   37)
* parseString() (in module xml.sax):     xml sax --- Support for SAX2 parsers.
                                                             (line   38)
* parseurl() (ic.IC method):             IC Objects.         (line   31)
* parseurl() (in module ic):             ic --- Access to the Mac OS X Internet Config.
                                                             (line   37)
* parse_and_bind() (in module readline): readline --- GNU readline interface.
                                                             (line   24)
* parse_args() (argparse.ArgumentParser method): The parse_args method.
                                                             (line    6)
* PARSE_COLNAMES (in module sqlite3):    Module functions and constants.
                                                             (line   38)
* parse_config_h() (in module sysconfig): Other functions.   (line   62)
* PARSE_DECLTYPES (in module sqlite3):   Module functions and constants.
                                                             (line   25)
* parse_header() (in module cgi):        Functions<5>.       (line   44)
* parse_known_args() (argparse.ArgumentParser method): Partial parsing.
                                                             (line    6)
* parse_multipart() (in module cgi):     Functions<5>.       (line   29)
* parse_qs() (in module cgi):            Functions<5>.       (line   17)
* parse_qs() (in module urlparse):       urlparse --- Parse URLs into components.
                                                             (line  124)
* parse_qsl() (in module cgi):           Functions<5>.       (line   23)
* parse_qsl() (in module urlparse):      urlparse --- Parse URLs into components.
                                                             (line  149)
* parsing; Python source code:           parser --- Access Python parse trees.
                                                             (line    6)
* ParsingError:                          ConfigParser --- Configuration file parser.
                                                             (line  190)
* partial() (imaplib.IMAP4 method):      IMAP4 Objects.      (line  177)
* partial() (in module functools):       functools --- Higher-order functions and operations on callable objects.
                                                             (line   74)
* partition() (str method):              String Methods<2>.  (line  232)
* Pascal; language:                      The for statement.  (line   31)
* pass_() (poplib.POP3 method):          POP3 Objects.       (line   29)
* Paste:                                 Edit context menu.  (line   29)
* PATH:                                  Executable Python Scripts.
                                                             (line   11)
* PATH <1>:                              The Module Search Path.
                                                             (line   16)
* PATH <2>:                              Environment variables.
                                                             (line   27)
* PATH <3>:                              Miscellaneous.      (line   16)
* PATH <4>:                              Process Management. (line   59)
* PATH <5>:                              Process Management. (line   62)
* PATH <6>:                              Process Management. (line   65)
* PATH <7>:                              Process Management. (line  358)
* PATH <8>:                              Process Management. (line  362)
* PATH <9>:                              Process Management. (line  364)
* PATH <10>:                             Miscellaneous System Information.
                                                             (line  111)
* PATH <11>:                             webbrowser --- Convenient Web-browser controller.
                                                             (line  195)
* PATH <12>:                             Installing your CGI script on a Unix system.
                                                             (line   28)
* PATH <13>:                             Common problems and solutions.
                                                             (line   23)
* PATH <14>:                             Embedding Python.   (line   32)
* PATH <15>:                             Embedding Python.   (line   38)
* PATH <16>:                             Uploading Packages. (line   38)
* PATH <17>:                             How do I make a Python script executable on Unix?.
                                                             (line   24)
* PATH <18>:                             How do I make a Python script executable on Unix?.
                                                             (line   28)
* path (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   73)
* path (cookielib.Cookie attribute):     Cookie Objects.     (line   40)
* path (in module sys):                  sys --- System-specific parameters and functions.
                                                             (line  711)
* path (in module sys) <1>:              Embedding Python.   (line   12)
* path (in module sys) <2>:              Initializing and finalizing the interpreter.
                                                             (line    8)
* path (in module sys) <3>:              Process-wide parameters.
                                                             (line   89)
* Path browser:                          File menu.          (line   26)
* path; configuration; file:             site --- Site-specific configuration hook.
                                                             (line   38)
* path; operations:                      os path --- Common pathname manipulations.
                                                             (line    6)
* pathconf() (in module os):             Files and Directories.
                                                             (line  332)
* pathconf_names (in module os):         Files and Directories.
                                                             (line  352)
* pathname2url() (in module urllib):     Utility functions<2>.
                                                             (line   54)
* pathsep (in module os):                Miscellaneous System Information.
                                                             (line  108)
* path_hooks (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  736)
* path_importer_cache (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  744)
* path_return_ok() (cookielib.CookiePolicy method): CookiePolicy Objects.
                                                             (line   56)
* pattern (re.RegexObject attribute):    Regular Expression Objects.
                                                             (line  105)
* pause() (in module signal):            signal --- Set handlers for asynchronous events.
                                                             (line  151)
* PAUSED (in module cd):                 cd --- CD-ROM access on SGI systems.
                                                             (line   94)
* PAX_FORMAT (in module tarfile):        tarfile --- Read and write tar archive files.
                                                             (line  203)
* pax_headers (tarfile.TarFile attribute): TarFile Objects.  (line  232)
* pax_headers (tarfile.TarInfo attribute): TarInfo Objects.  (line   90)
* pbkdf2_hmac() (in module hashlib):     Key Derivation Function.
                                                             (line   11)
* pd() (in module turtle):               Drawing state.      (line    6)
* Pdb (class in pdb):                    pdb --- The Python Debugger.
                                                             (line   13)
* Pdb (class in pdb) <1>:                pdb --- The Python Debugger.
                                                             (line  125)
* pdb (module):                          pdb --- The Python Debugger.
                                                             (line    6)
* peek() (io.BufferedReader method):     Buffered Streams.   (line   45)
* PEM_cert_to_DER_cert() (in module ssl): Functions Constants and Exceptions.
                                                             (line  188)
* pen() (in module turtle):              Drawing state.      (line   32)
* pencolor() (in module turtle):         Color control.      (line    6)
* PendingDeprecationWarning:             Built-in Exceptions.
                                                             (line  465)
* pendown() (in module turtle):          Drawing state.      (line    6)
* pensize() (in module turtle):          Drawing state.      (line   18)
* penup() (in module turtle):            Drawing state.      (line   12)
* PERCENT (in module token):             token --- Constants used with Python parse trees.
                                                             (line   40)
* PERCENTEQUAL (in module token):        token --- Constants used with Python parse trees.
                                                             (line   40)
* Performance:                           timeit --- Measure execution time of small code snippets.
                                                             (line    8)
* permutations() (in module itertools):  Itertool functions. (line  412)
* Persist() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line   29)
* persistence:                           pickle --- Python object serialization.
                                                             (line    6)
* persistent; objects:                   pickle --- Python object serialization.
                                                             (line    6)
* persistent_id (pickle protocol):       Pickling and unpickling external objects.
                                                             (line    6)
* persistent_load (pickle protocol):     Pickling and unpickling external objects.
                                                             (line    6)
* pformat() (in module pprint):          pprint --- Data pretty printer.
                                                             (line   73)
* pformat() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line    8)
* phase() (in module cmath):             Conversions to and from polar coordinates.
                                                             (line   22)
* Philbrick, Geoff:                      Keyword Parameters for Extension Functions.
                                                             (line   25)
* physical line:                         Logical lines.      (line    6)
* physical line <1>:                     Explicit line joining.
                                                             (line    6)
* physical line <2>:                     String literals.    (line   49)
* pi (in module cmath):                  Constants<2>.       (line    6)
* pi (in module math):                   Constants.          (line    6)
* pick() (in module gl):                 gl --- Graphics Library interface.
                                                             (line  100)
* pickle (module):                       pickle --- Python object serialization.
                                                             (line    6)
* pickle() (in module copy_reg):         copy_reg --- Register pickle support functions.
                                                             (line   23)
* PickleError:                           Usage.              (line   81)
* Pickler (class in pickle):             Usage.              (line  102)
* pickletools (module):                  pickletools --- Tools for pickle developers.
                                                             (line    6)
* pickling; objects:                     pickle --- Python object serialization.
                                                             (line    6)
* PicklingError:                         Usage.              (line   86)
* pid (multiprocessing.Process attribute): Process and exceptions.
                                                             (line   99)
* pid (popen2.Popen3 attribute):         Popen3 and Popen4 Objects.
                                                             (line   41)
* pid (subprocess.Popen attribute):      Popen Objects.      (line   95)
* PIL (the Python Imaging Library):      jpeg --- Read and write JPEG files.
                                                             (line   15)
* PIPE (in module subprocess):           Using the subprocess Module.
                                                             (line  124)
* Pipe() (in module multiprocessing):    Pipes and Queues.   (line   74)
* pipe() (in module os):                 File Descriptor Operations.
                                                             (line  198)
* pipes (module):                        pipes --- Interface to shell pipelines.
                                                             (line    6)
* PIPE_BUF (select.select attribute):    select --- Waiting for I/O completion.
                                                             (line  100)
* PixMapWrapper (module):                PixMapWrapper --- Wrapper for PixMap objects.
                                                             (line    6)
* pkgutil (module):                      pkgutil --- Package extension utility.
                                                             (line    6)
* PKG_DIRECTORY (in module imp):         imp --- Access the import internals.
                                                             (line  147)
* plain integer literal:                 Numeric literals.   (line    6)
* PLAT:                                  distutils util --- Miscellaneous other utility functions.
                                                             (line   84)
* platform (in module sys):              sys --- System-specific parameters and functions.
                                                             (line  756)
* platform (in module sys) <1>:          Process-wide parameters.
                                                             (line  115)
* platform (module):                     platform --- Access to underlying platform's identifying data.
                                                             (line    6)
* platform() (in module platform):       Cross Platform.     (line   46)
* PLAYING (in module cd):                cd --- CD-ROM access on SGI systems.
                                                             (line   89)
* PlaySound() (in module winsound):      winsound --- Sound-playing interface for Windows.
                                                             (line   22)
* plist; file:                           plistlib --- Generate and parse Mac OS X plist files.
                                                             (line    9)
* plistlib (module):                     plistlib --- Generate and parse Mac OS X plist files.
                                                             (line    6)
* plock() (in module os):                Process Management. (line  303)
* plus:                                  Unary arithmetic and bitwise operations.
                                                             (line   14)
* PLUS (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* plus() (decimal.Context method):       Context objects.    (line  411)
* PLUSEQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* pm() (in module pdb):                  pdb --- The Python Debugger.
                                                             (line  115)
* pnum (in module cd):                   cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* POINTER() (in module ctypes):          Utility functions.  (line  151)
* pointer() (in module ctypes):          Utility functions.  (line  157)
* polar() (in module cmath):             Conversions to and from polar coordinates.
                                                             (line   43)
* poll() (in module select):             select --- Waiting for I/O completion.
                                                             (line   33)
* poll() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   42)
* poll() (popen2.Popen3 method):         Popen3 and Popen4 Objects.
                                                             (line    9)
* poll() (select.epoll method):          Edge and Level Trigger Polling epoll Objects.
                                                             (line   80)
* poll() (select.poll method):           Polling Objects.    (line   75)
* poll() (subprocess.Popen method):      Popen Objects.      (line    8)
* pop() (array.array method):            array --- Efficient arrays of numeric values.
                                                             (line  189)
* pop() (asynchat.fifo method):          asynchat - Auxiliary Classes.
                                                             (line   28)
* pop() (collections.deque method):      deque objects.      (line   68)
* pop() (dict method):                   Mapping Types --- dict.
                                                             (line  211)
* pop() (list method):                   Mutable Sequence Types.
                                                             (line   13)
* pop() (mailbox.Mailbox method):        Mailbox objects.    (line  191)
* pop() (multifile.MultiFile method):    MultiFile Objects.  (line   69)
* pop() (set method):                    Set Types --- set frozenset.
                                                             (line  213)
* POP3 (class in poplib):                poplib --- POP3 protocol client.
                                                             (line   25)
* POP3; protocol:                        poplib --- POP3 protocol client.
                                                             (line    6)
* POP3_SSL (class in poplib):            poplib --- POP3 protocol client.
                                                             (line   36)
* Popen (class in subprocess):           Popen Constructor.  (line   11)
* popen() (in module os):                The standard type hierarchy.
                                                             (line  630)
* popen() (in module os) <1>:            File Object Creation.
                                                             (line   27)
* popen() (in module os) <2>:            select --- Waiting for I/O completion.
                                                             (line   86)
* popen() (in module platform):          Win95/98 specific.  (line    6)
* popen2 (module):                       popen2 --- Subprocesses with accessible I/O streams.
                                                             (line    6)
* popen2() (in module os):               File Object Creation.
                                                             (line   86)
* popen2() (in module popen2):           popen2 --- Subprocesses with accessible I/O streams.
                                                             (line   40)
* Popen3 (class in popen2):              popen2 --- Subprocesses with accessible I/O streams.
                                                             (line   61)
* popen3() (in module os):               File Object Creation.
                                                             (line  100)
* popen3() (in module popen2):           popen2 --- Subprocesses with accessible I/O streams.
                                                             (line   45)
* Popen4 (class in popen2):              popen2 --- Subprocesses with accessible I/O streams.
                                                             (line   75)
* popen4() (in module os):               File Object Creation.
                                                             (line  114)
* popen4() (in module popen2):           popen2 --- Subprocesses with accessible I/O streams.
                                                             (line   50)
* popitem() (collections.OrderedDict method): OrderedDict objects.
                                                             (line   21)
* popitem() (dict method):               Mapping Types --- dict.
                                                             (line  219)
* popitem() (mailbox.Mailbox method):    Mailbox objects.    (line  201)
* popleft() (collections.deque method):  deque objects.      (line   73)
* poplib (module):                       poplib --- POP3 protocol client.
                                                             (line    6)
* PopupMenu (class in Tix):              Basic Widgets.      (line   53)
* pop_alignment() (formatter.formatter method): The Formatter Interface.
                                                             (line   97)
* POP_BLOCK (opcode):                    Python Bytecode Instructions.
                                                             (line  321)
* pop_font() (formatter.formatter method): The Formatter Interface.
                                                             (line  109)
* POP_JUMP_IF_FALSE (opcode):            Python Bytecode Instructions.
                                                             (line  471)
* POP_JUMP_IF_TRUE (opcode):             Python Bytecode Instructions.
                                                             (line  466)
* pop_margin() (formatter.formatter method): The Formatter Interface.
                                                             (line  121)
* pop_source() (shlex.shlex method):     shlex Objects.      (line   65)
* pop_style() (formatter.formatter method): The Formatter Interface.
                                                             (line  132)
* POP_TOP (opcode):                      Python Bytecode Instructions.
                                                             (line   17)
* port (cookielib.Cookie attribute):     Cookie Objects.     (line   35)
* PortableUnixMailbox (class in mailbox): Deprecated classes and methods.
                                                             (line   70)
* port_specified (cookielib.Cookie attribute): Cookie Objects.
                                                             (line   78)
* pos (re.MatchObject attribute):        Match Objects.      (line  152)
* pos() (in module operator):            operator --- Standard operators as functions.
                                                             (line  146)
* pos() (in module turtle):              Tell Turtle's state.
                                                             (line    6)
* position() (in module turtle):         Tell Turtle's state.
                                                             (line    6)
* positional argument:                   Glossary.           (line  715)
* posix (module):                        posix --- The most common POSIX system calls.
                                                             (line    6)
* posix (tarfile.TarFile attribute):     TarFile Objects.    (line  221)
* POSIX; file object:                    posixfile --- File-like objects with locking support.
                                                             (line    6)
* POSIX; I/O control:                    termios --- POSIX style tty control.
                                                             (line    6)
* posixfile (module):                    posixfile --- File-like objects with locking support.
                                                             (line    6)
* POSIXLY_CORRECT:                       getopt --- C-style parser for command line options.
                                                             (line   71)
* post() (nntplib.NNTP method):          NNTP Objects.       (line  170)
* post() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  169)
* postcmd() (cmd.Cmd method):            Cmd Objects.        (line   96)
* postloop() (cmd.Cmd method):           Cmd Objects.        (line  114)
* post_mortem() (in module pdb):         pdb --- The Python Debugger.
                                                             (line  108)
* pow() (built-in function):             Built-in Functions. (line  967)
* pow() (in module math):                Power and logarithmic functions.
                                                             (line   47)
* pow() (in module operator):            operator --- Standard operators as functions.
                                                             (line  151)
* power() (decimal.Context method):      Context objects.    (line  417)
* pprint (module):                       pprint --- Data pretty printer.
                                                             (line    6)
* pprint() (bdb.Breakpoint method):      bdb --- Debugger framework.
                                                             (line   55)
* pprint() (in module pprint):           pprint --- Data pretty printer.
                                                             (line   82)
* pprint() (pprint.PrettyPrinter method): PrettyPrinter Objects.
                                                             (line   14)
* prcal() (in module calendar):          calendar --- General calendar-related functions.
                                                             (line  262)
* preamble (email.message.Message attribute): email message Representing an email message.
                                                             (line  552)
* precmd() (cmd.Cmd method):             Cmd Objects.        (line   86)
* prefix:                                Python-related paths and files.
                                                             (line    7)
* prefix <1>:                            Include Files.      (line   32)
* prefix <2>:                            Include Files.      (line   35)
* prefix <3>:                            Include Files.      (line   42)
* PREFIX (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   19)
* prefix (in module sys):                sys --- System-specific parameters and functions.
                                                             (line  819)
* prefix (xml.dom.Attr attribute):       Attr Objects.       (line   18)
* prefix (xml.dom.Node attribute):       Node Objects.       (line   69)
* prefix (zipimport.zipimporter attribute): zipimporter Objects.
                                                             (line   71)
* PREFIXES (in module site):             site --- Site-specific configuration hook.
                                                             (line   90)
* preloop() (cmd.Cmd method):            Cmd Objects.        (line  108)
* preorder() (compiler.visitor.ASTVisitor method): Using Visitors to Walk ASTs.
                                                             (line   44)
* prepare_input_source() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   72)
* prepend() (pipes.Template method):     Template Objects.   (line   37)
* preprocess() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  434)
* PrettyPrinter (class in pprint):       pprint --- Data pretty printer.
                                                             (line   32)
* prev() (ttk.Treeview method):          ttk Treeview.       (line  242)
* previous() (bsddb.bsddbobject method): Hash BTree and Record Objects.
                                                             (line   53)
* previous() (dbhash.dbhash method):     Database Objects.   (line   33)
* previousSibling (xml.dom.Node attribute): Node Objects.    (line   32)
* primary:                               Primaries.          (line    6)
* print (2to3 fixer):                    Fixers.             (line  187)
* print() (built-in function):           Built-in Functions. (line  990)
* Print() (in module findertools):       findertools --- The finder's Apple Events interface.
                                                             (line   21)
* printable (in module string):          String constants.   (line   56)
* printdir() (zipfile.ZipFile method):   ZipFile Objects.    (line  145)
* printf-style formatting:               String Formatting Operations.
                                                             (line    6)
* print_callees() (pstats.Stats method): The Stats Class.    (line  211)
* print_callers() (pstats.Stats method): The Stats Class.    (line  190)
* print_directory() (in module cgi):     Functions<5>.       (line   63)
* print_environ() (in module cgi):       Functions<5>.       (line   55)
* print_environ_usage() (in module cgi): Functions<5>.       (line   67)
* print_exc() (in module traceback):     traceback --- Print or retrieve a stack traceback.
                                                             (line   38)
* print_exc() (timeit.Timer method):     Python Interface.   (line  103)
* print_exception() (in module traceback): traceback --- Print or retrieve a stack traceback.
                                                             (line   26)
* PRINT_EXPR (opcode):                   Python Bytecode Instructions.
                                                             (line  250)
* print_form() (in module cgi):          Functions<5>.       (line   59)
* print_help() (argparse.ArgumentParser method): Printing help.
                                                             (line   16)
* PRINT_ITEM (opcode):                   Python Bytecode Instructions.
                                                             (line  256)
* PRINT_ITEM_TO (opcode):                Python Bytecode Instructions.
                                                             (line  262)
* print_last() (in module traceback):    traceback --- Print or retrieve a stack traceback.
                                                             (line   52)
* PRINT_NEWLINE (opcode):                Python Bytecode Instructions.
                                                             (line  268)
* PRINT_NEWLINE_TO (opcode):             Python Bytecode Instructions.
                                                             (line  274)
* print_stack() (in module traceback):   traceback --- Print or retrieve a stack traceback.
                                                             (line   59)
* print_stats() (profile.Profile method): profile and cProfile Module Reference.
                                                             (line   76)
* print_stats() (pstats.Stats method):   The Stats Class.    (line  158)
* print_tb() (in module traceback):      traceback --- Print or retrieve a stack traceback.
                                                             (line   19)
* print_usage() (argparse.ArgumentParser method): Printing help.
                                                             (line   10)
* print_usage() (optparse.OptionParser method): Other methods.
                                                             (line   15)
* print_version() (optparse.OptionParser method): Printing a version string.
                                                             (line   26)
* PriorityQueue (class in Queue):        Queue --- A synchronized queue class.
                                                             (line   49)
* private; names:                        Identifiers Names.  (line   14)
* prmonth() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  122)
* prmonth() (in module calendar):        calendar --- General calendar-related functions.
                                                             (line  251)
* procedure; call:                       Expression statements.
                                                             (line   18)
* Process (class in multiprocessing):    Process and exceptions.
                                                             (line    6)
* process() (logging.LoggerAdapter method): LoggerAdapter Objects.
                                                             (line   18)
* process; group:                        Process Parameters. (line   78)
* process; group <1>:                    Process Parameters. (line  137)
* process; id:                           Process Parameters. (line  143)
* process; id of parent:                 Process Parameters. (line  149)
* process; killing:                      Process Management. (line  273)
* process; killing <1>:                  Process Management. (line  290)
* process; signalling:                   Process Management. (line  273)
* process; signalling <1>:               Process Management. (line  290)
* processes, light-weight:               thread --- Multiple threads of control.
                                                             (line   12)
* processfile() (in module gensuitemodule): gensuitemodule --- Generate OSA stub packages.
                                                             (line   26)
* processfile_fromresource() (in module gensuitemodule): gensuitemodule --- Generate OSA stub packages.
                                                             (line   54)
* ProcessingInstruction() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   76)
* processingInstruction() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  164)
* ProcessingInstructionHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  267)
* processor time:                        time --- Time access and conversions.
                                                             (line  136)
* processor() (in module platform):      Cross Platform.     (line   63)
* process_message() (smtpd.SMTPServer method): SMTPServer Objects.
                                                             (line   14)
* process_request() (SocketServer.BaseServer method): Server Objects.
                                                             (line  128)
* product() (in module itertools):       Itertool functions. (line  474)
* Profile (class in hotshot):            hotshot --- High performance logging profiler.
                                                             (line   27)
* Profile (class in profile):            profile and cProfile Module Reference.
                                                             (line   34)
* profile (module):                      profile and cProfile Module Reference.
                                                             (line    6)
* profile function:                      threading --- Higher-level threading interface.
                                                             (line  163)
* profile function <1>:                  sys --- System-specific parameters and functions.
                                                             (line  507)
* profile function <2>:                  sys --- System-specific parameters and functions.
                                                             (line  890)
* profiler:                              sys --- System-specific parameters and functions.
                                                             (line  507)
* profiler <1>:                          sys --- System-specific parameters and functions.
                                                             (line  890)
* profiling, deterministic:              Introduction to the profilers.
                                                             (line    6)
* program:                               Complete Python programs.
                                                             (line    6)
* Progressbar (class in ttk):            ttk Progressbar.    (line    6)
* ProgressBar() (in module EasyDialogs): EasyDialogs --- Basic Macintosh dialogs.
                                                             (line   54)
* prompt (cmd.Cmd attribute):            Cmd Objects.        (line  123)
* prompts, interpreter:                  sys --- System-specific parameters and functions.
                                                             (line  834)
* prompt_user_passwd() (urllib.FancyURLopener method): URL Opener objects.
                                                             (line  119)
* propagate (logging.Logger attribute):  Logger Objects.     (line   25)
* property list:                         plistlib --- Generate and parse Mac OS X plist files.
                                                             (line    9)
* property() (built-in function):        Built-in Functions. (line 1018)
* property_declaration_handler (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   99)
* property_dom_node (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line  106)
* property_lexical_handler (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line   92)
* property_xml_string (in module xml.sax.handler): xml sax handler --- Base classes for SAX handlers.
                                                             (line  113)
* proto (socket.socket attribute):       Socket Objects.     (line  310)
* protocol; context management:          Context Manager Types.
                                                             (line    8)
* protocol; iterator:                    Iterator Types.     (line    8)
* protocol; Telnet:                      telnetlib --- Telnet client.
                                                             (line    6)
* PROTOCOL_SSLv2 (in module ssl):        Functions Constants and Exceptions.
                                                             (line  215)
* PROTOCOL_SSLv23 (in module ssl):       Functions Constants and Exceptions.
                                                             (line  225)
* PROTOCOL_SSLv3 (in module ssl):        Functions Constants and Exceptions.
                                                             (line  233)
* PROTOCOL_TLSv1 (in module ssl):        Functions Constants and Exceptions.
                                                             (line  238)
* protocol_version (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  135)
* PROTOCOL_VERSION (imaplib.IMAP4 attribute): IMAP4 Objects. (line  359)
* prot_c() (ftplib.FTP_TLS method):      FTP_TLS Objects.    (line   22)
* prot_p() (ftplib.FTP_TLS method):      FTP_TLS Objects.    (line   18)
* proxy() (in module weakref):           weakref --- Weak references.
                                                             (line  116)
* proxyauth() (imaplib.IMAP4 method):    IMAP4 Objects.      (line  182)
* ProxyBasicAuthHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  238)
* ProxyDigestAuthHandler (class in urllib2): urllib2 --- extensible library for opening URLs.
                                                             (line  261)
* ProxyHandler (class in urllib2):       urllib2 --- extensible library for opening URLs.
                                                             (line  199)
* ProxyType (in module weakref):         weakref --- Weak references.
                                                             (line  214)
* ProxyTypes (in module weakref):        weakref --- Weak references.
                                                             (line  222)
* prstr() (in module fm):                fm --- Font Manager interface.
                                                             (line   35)
* pryear() (calendar.TextCalendar method): calendar --- General calendar-related functions.
                                                             (line  137)
* ps1 (in module sys):                   sys --- System-specific parameters and functions.
                                                             (line  831)
* ps2 (in module sys):                   sys --- System-specific parameters and functions.
                                                             (line  831)
* pstats (module):                       The Stats Class.    (line    7)
* pthreads:                              thread --- Multiple threads of control.
                                                             (line   20)
* ptime (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line  103)
* pty (module):                          pty --- Pseudo-terminal utilities.
                                                             (line    6)
* pu() (in module turtle):               Drawing state.      (line   12)
* publicId (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   17)
* PullDOM (class in xml.dom.pulldom):    xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   20)
* punctuation (in module string):        String constants.   (line   51)
* PureProxy (class in smtpd):            PureProxy Objects.  (line    6)
* purge() (in module re):                Module Contents.    (line  255)
* push() (asynchat.async_chat method):   asynchat --- Asynchronous socket command/response handler.
                                                             (line   96)
* push() (asynchat.fifo method):         asynchat - Auxiliary Classes.
                                                             (line   23)
* push() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   19)
* push() (multifile.MultiFile method):   MultiFile Objects.  (line   56)
* pushbutton() (msilib.Dialog method):   GUI classes.        (line   68)
* push_alignment() (formatter.formatter method): The Formatter Interface.
                                                             (line   90)
* push_font() (formatter.formatter method): The Formatter Interface.
                                                             (line  101)
* push_margin() (formatter.formatter method): The Formatter Interface.
                                                             (line  113)
* push_source() (shlex.shlex method):    shlex Objects.      (line   56)
* push_style() (formatter.formatter method): The Formatter Interface.
                                                             (line  125)
* push_token() (shlex.shlex method):     shlex Objects.      (line   16)
* push_with_producer() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line  104)
* put() (multiprocessing.multiprocessing.queues.SimpleQueue method): Pipes and Queues.
                                                             (line  202)
* put() (multiprocessing.Queue method):  Pipes and Queues.   (line  120)
* put() (Queue.Queue method):            Queue Objects.      (line   29)
* putch() (in module msvcrt):            Console I/O.        (line   38)
* putenv() (in module os):               Process Parameters. (line  184)
* putheader() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   72)
* putp() (in module curses):             Functions<2>.       (line  371)
* putrequest() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   59)
* putsequences() (mhlib.Folder method):  Folder Objects.     (line   55)
* putwch() (in module msvcrt):           Console I/O.        (line   42)
* putwin() (curses.window method):       Window Objects.     (line  413)
* put_nowait() (multiprocessing.Queue method): Pipes and Queues.
                                                             (line  132)
* put_nowait() (Queue.Queue method):     Queue Objects.      (line   42)
* pwd (module):                          pwd --- The password database.
                                                             (line    6)
* pwd() (ftplib.FTP method):             FTP Objects.        (line  198)
* pwlcurve() (in module gl):             gl --- Graphics Library interface.
                                                             (line   95)
* py3kwarning (in module sys):           sys --- System-specific parameters and functions.
                                                             (line  842)
* PyAnySet_Check (C function):           Set Objects<2>.     (line   61)
* PyAnySet_CheckExact (C function):      Set Objects<2>.     (line   66)
* PyArg_Parse (C function):              Parsing arguments and building values.
                                                             (line  418)
* PyArg_ParseTuple (C function):         Parsing arguments and building values.
                                                             (line  388)
* PyArg_ParseTuple():                    Extracting Parameters in Extension Functions.
                                                             (line    6)
* PyArg_ParseTupleAndKeywords (C function): Parsing arguments and building values.
                                                             (line  402)
* PyArg_ParseTupleAndKeywords():         Keyword Parameters for Extension Functions.
                                                             (line    6)
* PyArg_UnpackTuple (C function):        Parsing arguments and building values.
                                                             (line  429)
* PyArg_VaParse (C function):            Parsing arguments and building values.
                                                             (line  395)
* PyArg_VaParseTupleAndKeywords (C function): Parsing arguments and building values.
                                                             (line  410)
* PyBool_Check (C function):             Boolean Objects<2>. (line   11)
* PyBool_FromLong (C function):          Boolean Objects<2>. (line   43)
* PyBufferObject (C type):               Old-style buffer objects.
                                                             (line   26)
* PyBufferProcs:                         Old-style buffer objects.
                                                             (line    6)
* PyBufferProcs (C type):                Buffer Object Structures.
                                                             (line   25)
* PyBuffer_Check (C function):           Old-style buffer objects.
                                                             (line   46)
* PyBuffer_FillContiguousStrides (C function): Buffer related functions.
                                                             (line  144)
* PyBuffer_FillInfo (C function):        Buffer related functions.
                                                             (line  154)
* PyBuffer_FromMemory (C function):      Old-style buffer objects.
                                                             (line   85)
* PyBuffer_FromObject (C function):      Old-style buffer objects.
                                                             (line   50)
* PyBuffer_FromReadWriteMemory (C function): Old-style buffer objects.
                                                             (line  102)
* PyBuffer_FromReadWriteObject (C function): Old-style buffer objects.
                                                             (line   70)
* PyBuffer_IsContiguous (C function):    Buffer related functions.
                                                             (line  137)
* PyBuffer_New (C function):             Old-style buffer objects.
                                                             (line  115)
* PyBuffer_Release (C function):         Buffer related functions.
                                                             (line  127)
* PyBuffer_SizeFromFormat (C function):  Buffer related functions.
                                                             (line  132)
* PyBuffer_Type (C variable):            Old-style buffer objects.
                                                             (line   30)
* PyByteArrayObject (C type):            Byte Array Objects. (line    8)
* PyByteArray_AsString (C function):     Direct API functions.
                                                             (line   26)
* PyByteArray_AS_STRING (C function):    Macros.             (line    8)
* PyByteArray_Check (C function):        Type check macros.  (line    6)
* PyByteArray_CheckExact (C function):   Type check macros.  (line   11)
* PyByteArray_Concat (C function):       Direct API functions.
                                                             (line   17)
* PyByteArray_FromObject (C function):   Direct API functions.
                                                             (line    6)
* PyByteArray_FromStringAndSize (C function): Direct API functions.
                                                             (line   11)
* PyByteArray_GET_SIZE (C function):     Macros.             (line   12)
* PyByteArray_Resize (C function):       Direct API functions.
                                                             (line   31)
* PyByteArray_Size (C function):         Direct API functions.
                                                             (line   22)
* PyByteArray_Type (C variable):         Byte Array Objects. (line   13)
* PyCallable_Check (C function):         Object Protocol.    (line  222)
* PyCallIter_Check (C function):         Iterator Objects.   (line   44)
* PyCallIter_New (C function):           Iterator Objects.   (line   50)
* PyCallIter_Type (C variable):          Iterator Objects.   (line   36)
* PyCapsule (C type):                    Capsules<2>.        (line    9)
* PyCapsule_CheckExact (C function):     Capsules<2>.        (line   27)
* PyCapsule_Destructor (C type):         Capsules<2>.        (line   18)
* PyCapsule_GetContext (C function):     Capsules<2>.        (line   76)
* PyCapsule_GetDestructor (C function):  Capsules<2>.        (line   65)
* PyCapsule_GetName (C function):        Capsules<2>.        (line   86)
* PyCapsule_GetPointer (C function):     Capsules<2>.        (line   53)
* PyCapsule_Import (C function):         Capsules<2>.        (line   96)
* PyCapsule_IsValid (C function):        Capsules<2>.        (line  112)
* PyCapsule_New (C function):            Capsules<2>.        (line   31)
* PyCapsule_SetContext (C function):     Capsules<2>.        (line  128)
* PyCapsule_SetDestructor (C function):  Capsules<2>.        (line  136)
* PyCapsule_SetName (C function):        Capsules<2>.        (line  145)
* PyCapsule_SetPointer (C function):     Capsules<2>.        (line  155)
* PyCellObject (C type):                 Cell Objects.       (line   16)
* PyCell_Check (C function):             Cell Objects.       (line   24)
* PyCell_Get (C function):               Cell Objects.       (line   35)
* PyCell_GET (C function):               Cell Objects.       (line   41)
* PyCell_New (C function):               Cell Objects.       (line   28)
* PyCell_Set (C function):               Cell Objects.       (line   48)
* PyCell_SET (C function):               Cell Objects.       (line   55)
* PyCell_Type (C variable):              Cell Objects.       (line   20)
* PyCFunction (C type):                  Common Object Structures.
                                                             (line   86)
* PyClassObject (C type):                Class and Instance Objects.
                                                             (line   11)
* PyClass_Check (C function):            Class and Instance Objects.
                                                             (line   20)
* PyClass_IsSubclass (C function):       Class and Instance Objects.
                                                             (line   26)
* PyClass_Type (C variable):             Class and Instance Objects.
                                                             (line   15)
* pyclbr (module):                       pyclbr --- Python class browser support.
                                                             (line    6)
* PyCObject (C type):                    CObjects.           (line    9)
* PyCObject_AsVoidPtr (C function):      CObjects.           (line   42)
* PyCObject_Check (C function):          CObjects.           (line   18)
* PyCObject_FromVoidPtr (C function):    CObjects.           (line   22)
* PyCObject_FromVoidPtrAndDesc (C function): CObjects.       (line   31)
* PyCObject_GetDesc (C function):        CObjects.           (line   47)
* PyCObject_SetVoidPtr (C function):     CObjects.           (line   52)
* PyCodec_BackslashReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   51)
* PyCodec_Decode (C function):           Codec registry and support functions.
                                                             (line   30)
* PyCodec_Decoder (C function):          Codec lookup API.   (line   15)
* PyCodec_Encode (C function):           Codec registry and support functions.
                                                             (line   19)
* PyCodec_Encoder (C function):          Codec lookup API.   (line   11)
* PyCodec_IgnoreErrors (C function):     Registry API for Unicode encoding error handlers.
                                                             (line   38)
* PyCodec_IncrementalDecoder (C function): Codec lookup API. (line   25)
* PyCodec_IncrementalEncoder (C function): Codec lookup API. (line   19)
* PyCodec_KnownEncoding (C function):    Codec registry and support functions.
                                                             (line   14)
* PyCodec_LookupError (C function):      Registry API for Unicode encoding error handlers.
                                                             (line   28)
* PyCodec_Register (C function):         Codec registry and support functions.
                                                             (line    6)
* PyCodec_RegisterError (C function):    Registry API for Unicode encoding error handlers.
                                                             (line    6)
* PyCodec_ReplaceErrors (C function):    Registry API for Unicode encoding error handlers.
                                                             (line   42)
* PyCodec_StreamReader (C function):     Codec lookup API.   (line   31)
* PyCodec_StreamWriter (C function):     Codec lookup API.   (line   38)
* PyCodec_StrictErrors (C function):     Registry API for Unicode encoding error handlers.
                                                             (line   34)
* PyCodec_XMLCharRefReplaceErrors (C function): Registry API for Unicode encoding error handlers.
                                                             (line   46)
* PyCodeObject (C type):                 Code Objects<2>.    (line   10)
* PyCode_Check (C function):             Code Objects<2>.    (line   20)
* PyCode_GetNumFree (C function):        Code Objects<2>.    (line   24)
* PyCode_New (C function):               Code Objects<2>.    (line   28)
* PyCode_NewEmpty (C function):          Code Objects<2>.    (line   41)
* PyCode_Type (C variable):              Code Objects<2>.    (line   15)
* PyCompileError:                        py_compile --- Compile Python source files.
                                                             (line   19)
* PyCompilerFlags (C type):              The Very High Level Layer.
                                                             (line  328)
* PyComplexObject (C type):              Complex Numbers as Python Objects.
                                                             (line    6)
* PyComplex_AsCComplex (C function):     Complex Numbers as Python Objects.
                                                             (line   54)
* PyComplex_Check (C function):          Complex Numbers as Python Objects.
                                                             (line   17)
* PyComplex_CheckExact (C function):     Complex Numbers as Python Objects.
                                                             (line   24)
* PyComplex_FromCComplex (C function):   Complex Numbers as Python Objects.
                                                             (line   31)
* PyComplex_FromDoubles (C function):    Complex Numbers as Python Objects.
                                                             (line   38)
* PyComplex_ImagAsDouble (C function):   Complex Numbers as Python Objects.
                                                             (line   50)
* PyComplex_RealAsDouble (C function):   Complex Numbers as Python Objects.
                                                             (line   46)
* PyComplex_Type (C variable):           Complex Numbers as Python Objects.
                                                             (line   11)
* PyDateTime_Check (C function):         DateTime Objects<2>.
                                                             (line   30)
* PyDateTime_CheckExact (C function):    DateTime Objects<2>.
                                                             (line   37)
* PyDateTime_DATE_GET_HOUR (C function): DateTime Objects<2>.
                                                             (line  157)
* PyDateTime_DATE_GET_MICROSECOND (C function): DateTime Objects<2>.
                                                             (line  175)
* PyDateTime_DATE_GET_MINUTE (C function): DateTime Objects<2>.
                                                             (line  163)
* PyDateTime_DATE_GET_SECOND (C function): DateTime Objects<2>.
                                                             (line  169)
* PyDateTime_FromDateAndTime (C function): DateTime Objects<2>.
                                                             (line   97)
* PyDateTime_FromTimestamp (C function): DateTime Objects<2>.
                                                             (line  212)
* PyDateTime_GET_DAY (C function):       DateTime Objects<2>.
                                                             (line  147)
* PyDateTime_GET_MONTH (C function):     DateTime Objects<2>.
                                                             (line  141)
* PyDateTime_GET_YEAR (C function):      DateTime Objects<2>.
                                                             (line  135)
* PyDateTime_TIME_GET_HOUR (C function): DateTime Objects<2>.
                                                             (line  186)
* PyDateTime_TIME_GET_MICROSECOND (C function): DateTime Objects<2>.
                                                             (line  204)
* PyDateTime_TIME_GET_MINUTE (C function): DateTime Objects<2>.
                                                             (line  192)
* PyDateTime_TIME_GET_SECOND (C function): DateTime Objects<2>.
                                                             (line  198)
* PyDate_Check (C function):             DateTime Objects<2>.
                                                             (line   16)
* PyDate_CheckExact (C function):        DateTime Objects<2>.
                                                             (line   23)
* PyDate_FromDate (C function):          DateTime Objects<2>.
                                                             (line   88)
* PyDate_FromTimestamp (C function):     DateTime Objects<2>.
                                                             (line  222)
* PyDelta_Check (C function):            DateTime Objects<2>.
                                                             (line   58)
* PyDelta_CheckExact (C function):       DateTime Objects<2>.
                                                             (line   65)
* PyDelta_FromDSU (C function):          DateTime Objects<2>.
                                                             (line  118)
* PyDescr_IsData (C function):           Descriptor Objects. (line   54)
* PyDescr_NewClassMethod (C function):   Descriptor Objects. (line   46)
* PyDescr_NewGetSet (C function):        Descriptor Objects. (line   15)
* PyDescr_NewMember (C function):        Descriptor Objects. (line   23)
* PyDescr_NewMethod (C function):        Descriptor Objects. (line   31)
* PyDescr_NewWrapper (C function):       Descriptor Objects. (line   39)
* PyDictObject (C type):                 Dictionary Objects. (line    6)
* PyDictProxy_New (C function):          Dictionary Objects. (line   37)
* PyDict_Check (C function):             Dictionary Objects. (line   17)
* PyDict_CheckExact (C function):        Dictionary Objects. (line   24)
* PyDict_Clear (C function):             Dictionary Objects. (line   47)
* PyDict_Contains (C function):          Dictionary Objects. (line   51)
* PyDict_Copy (C function):              Dictionary Objects. (line   59)
* PyDict_DelItem (C function):           Dictionary Objects. (line   84)
* PyDict_DelItemString (C function):     Dictionary Objects. (line   90)
* PyDict_GetItem (C function):           Dictionary Objects. (line   95)
* PyDict_GetItemString (C function):     Dictionary Objects. (line  103)
* PyDict_Items (C function):             Dictionary Objects. (line  111)
* PyDict_Keys (C function):              Dictionary Objects. (line  119)
* PyDict_Merge (C function):             Dictionary Objects. (line  192)
* PyDict_MergeFromSeq2 (C function):     Dictionary Objects. (line  215)
* PyDict_New (C function):               Dictionary Objects. (line   31)
* PyDict_Next (C function):              Dictionary Objects. (line  143)
* PyDict_SetItem (C function):           Dictionary Objects. (line   68)
* PyDict_SetItemString (C function):     Dictionary Objects. (line   75)
* PyDict_Size (C function):              Dictionary Objects. (line  134)
* PyDict_Type (C variable):              Dictionary Objects. (line   11)
* PyDict_Update (C function):            Dictionary Objects. (line  205)
* PyDict_Values (C function):            Dictionary Objects. (line  126)
* PyDLL (class in ctypes):               Loading shared libraries.
                                                             (line   42)
* pydoc (module):                        pydoc --- Documentation generator and online help system.
                                                             (line    6)
* PyErr_BadArgument (C function):        Exception Handling. (line  158)
* PyErr_BadInternalCall (C function):    Exception Handling. (line  270)
* PyErr_CheckSignals (C function):       Exception Handling. (line  346)
* PyErr_Clear (C function):              Exception Handling. (line   91)
* PyErr_Clear():                         Exceptions<7>.      (line   25)
* PyErr_Clear() <1>:                     Exceptions<7>.      (line  125)
* PyErr_ExceptionMatches (C function):   Exception Handling. (line   65)
* PyErr_ExceptionMatches():              Exceptions<7>.      (line  125)
* PyErr_Fetch (C function):              Exception Handling. (line   96)
* PyErr_Fetch():                         Finalization and De-allocation.
                                                             (line   21)
* PyErr_Format (C function):             Exception Handling. (line  144)
* PyErr_GivenExceptionMatches (C function): Exception Handling.
                                                             (line   71)
* PyErr_NewException (C function):       Exception Handling. (line  377)
* PyErr_NewExceptionWithDoc (C function): Exception Handling.
                                                             (line  396)
* PyErr_NoMemory (C function):           Exception Handling. (line  164)
* PyErr_NormalizeException (C function): Exception Handling. (line   81)
* PyErr_Occurred (C function):           Exception Handling. (line   48)
* PyErr_Occurred():                      Exceptions<7>.      (line   12)
* PyErr_Print (C function):              Exception Handling. (line   44)
* PyErr_PrintEx (C function):            Exception Handling. (line   33)
* PyErr_Restore (C function):            Exception Handling. (line  110)
* PyErr_Restore():                       Finalization and De-allocation.
                                                             (line   21)
* PyErr_SetExcFromWindowsErr (C function): Exception Handling.
                                                             (line  220)
* PyErr_SetExcFromWindowsErrWithFilename (C function): Exception Handling.
                                                             (line  258)
* PyErr_SetExcFromWindowsErrWithFilenameObject (C function): Exception Handling.
                                                             (line  248)
* PyErr_SetFromErrno (C function):       Exception Handling. (line  172)
* PyErr_SetFromErrnoWithFilename (C function): Exception Handling.
                                                             (line  198)
* PyErr_SetFromErrnoWithFilenameObject (C function): Exception Handling.
                                                             (line  188)
* PyErr_SetFromWindowsErr (C function):  Exception Handling. (line  206)
* PyErr_SetFromWindowsErrWithFilename (C function): Exception Handling.
                                                             (line  240)
* PyErr_SetFromWindowsErrWithFilenameObject (C function): Exception Handling.
                                                             (line  232)
* PyErr_SetInterrupt (C function):       Exception Handling. (line  358)
* PyErr_SetNone (C function):            Exception Handling. (line  154)
* PyErr_SetObject (C function):          Exception Handling. (line  138)
* PyErr_SetString (C function):          Exception Handling. (line  129)
* PyErr_SetString():                     Exceptions<7>.      (line   25)
* PyErr_Warn (C function):               Exception Handling. (line  319)
* PyErr_WarnEx (C function):             Exception Handling. (line  277)
* PyErr_WarnExplicit (C function):       Exception Handling. (line  329)
* PyErr_WarnPy3k (C function):           Exception Handling. (line  339)
* PyErr_WriteUnraisable (C function):    Exception Handling. (line  408)
* PyEval_AcquireLock (C function):       Low-level API.      (line   99)
* PyEval_AcquireLock():                  Initializing and finalizing the interpreter.
                                                             (line    8)
* PyEval_AcquireThread (C function):     Low-level API.      (line   76)
* PyEval_EvalCode (C function):          The Very High Level Layer.
                                                             (line  269)
* PyEval_EvalCodeEx (C function):        The Very High Level Layer.
                                                             (line  278)
* PyEval_EvalFrame (C function):         The Very High Level Layer.
                                                             (line  289)
* PyEval_EvalFrameEx (C function):       The Very High Level Layer.
                                                             (line  294)
* PyEval_GetBuiltins (C function):       Reflection.         (line    6)
* PyEval_GetCallStats (C function):      Profiling and Tracing.
                                                             (line  123)
* PyEval_GetFrame (C function):          Reflection.         (line   28)
* PyEval_GetFuncDesc (C function):       Reflection.         (line   49)
* PyEval_GetFuncName (C function):       Reflection.         (line   44)
* PyEval_GetGlobals (C function):        Reflection.         (line   21)
* PyEval_GetLocals (C function):         Reflection.         (line   14)
* PyEval_GetRestricted (C function):     Reflection.         (line   39)
* PyEval_InitThreads (C function):       High-level API.     (line   27)
* PyEval_InitThreads():                  Initializing and finalizing the interpreter.
                                                             (line    8)
* PyEval_MergeCompilerFlags (C function): The Very High Level Layer.
                                                             (line  305)
* PyEval_ReInitThreads (C function):     High-level API.     (line  101)
* PyEval_ReleaseLock (C function):       Low-level API.      (line  109)
* PyEval_ReleaseLock():                  Initializing and finalizing the interpreter.
                                                             (line    8)
* PyEval_ReleaseLock() <1>:              High-level API.     (line   29)
* PyEval_ReleaseThread (C function):     Low-level API.      (line   87)
* PyEval_ReleaseThread():                High-level API.     (line   29)
* PyEval_RestoreThread (C function):     High-level API.     (line   79)
* PyEval_RestoreThread():                Releasing the GIL from extension code.
                                                             (line   36)
* PyEval_RestoreThread() <1>:            High-level API.     (line   29)
* PyEval_SaveThread (C function):        High-level API.     (line   70)
* PyEval_SaveThread():                   Releasing the GIL from extension code.
                                                             (line   36)
* PyEval_SaveThread() <1>:               High-level API.     (line   29)
* PyEval_SetProfile (C function):        Profiling and Tracing.
                                                             (line  107)
* PyEval_SetTrace (C function):          Profiling and Tracing.
                                                             (line  117)
* PyEval_ThreadsInitialized (C function): High-level API.    (line   60)
* PyExc_ArithmeticError:                 Standard Exceptions.
                                                             (line  103)
* PyExc_AssertionError:                  Standard Exceptions.
                                                             (line  103)
* PyExc_AttributeError:                  Standard Exceptions.
                                                             (line  103)
* PyExc_BaseException:                   Standard Exceptions.
                                                             (line  103)
* PyExc_EnvironmentError:                Standard Exceptions.
                                                             (line  103)
* PyExc_EOFError:                        Standard Exceptions.
                                                             (line  103)
* PyExc_Exception:                       Standard Exceptions.
                                                             (line  103)
* PyExc_FloatingPointError:              Standard Exceptions.
                                                             (line  103)
* PyExc_ImportError:                     Standard Exceptions.
                                                             (line  103)
* PyExc_IndexError:                      Standard Exceptions.
                                                             (line  103)
* PyExc_IOError:                         Standard Exceptions.
                                                             (line  103)
* PyExc_KeyboardInterrupt:               Standard Exceptions.
                                                             (line  103)
* PyExc_KeyError:                        Standard Exceptions.
                                                             (line  103)
* PyExc_LookupError:                     Standard Exceptions.
                                                             (line  103)
* PyExc_MemoryError:                     Standard Exceptions.
                                                             (line  103)
* PyExc_NameError:                       Standard Exceptions.
                                                             (line  103)
* PyExc_NotImplementedError:             Standard Exceptions.
                                                             (line  103)
* PyExc_OSError:                         Standard Exceptions.
                                                             (line  103)
* PyExc_OverflowError:                   Standard Exceptions.
                                                             (line  103)
* PyExc_ReferenceError:                  Standard Exceptions.
                                                             (line  103)
* PyExc_RuntimeError:                    Standard Exceptions.
                                                             (line  103)
* PyExc_StandardError:                   Standard Exceptions.
                                                             (line  103)
* PyExc_SyntaxError:                     Standard Exceptions.
                                                             (line  103)
* PyExc_SystemError:                     Standard Exceptions.
                                                             (line  103)
* PyExc_SystemExit:                      Standard Exceptions.
                                                             (line  103)
* PyExc_TypeError:                       Standard Exceptions.
                                                             (line  103)
* PyExc_ValueError:                      Standard Exceptions.
                                                             (line  103)
* PyExc_WindowsError:                    Standard Exceptions.
                                                             (line  103)
* PyExc_ZeroDivisionError:               Standard Exceptions.
                                                             (line  103)
* PyFileObject (C type):                 File Objects<2>.    (line   10)
* PyFile_AsFile (C function):            File Objects<2>.    (line   55)
* PyFile_Check (C function):             File Objects<2>.    (line   21)
* PyFile_CheckExact (C function):        File Objects<2>.    (line   28)
* PyFile_DecUseCount (C function):       File Objects<2>.    (line   89)
* PyFile_FromFile (C function):          File Objects<2>.    (line   44)
* PyFile_FromString (C function):        File Objects<2>.    (line   35)
* PyFile_GetLine (C function):           File Objects<2>.    (line  101)
* PyFile_IncUseCount (C function):       File Objects<2>.    (line   64)
* PyFile_Name (C function):              File Objects<2>.    (line  116)
* PyFile_SetBufSize (C function):        File Objects<2>.    (line  122)
* PyFile_SetEncoding (C function):       File Objects<2>.    (line  127)
* PyFile_SetEncodingAndErrors (C function): File Objects<2>. (line  135)
* PyFile_SoftSpace (C function):         File Objects<2>.    (line  144)
* PyFile_Type (C variable):              File Objects<2>.    (line   15)
* PyFile_WriteObject (C function):       File Objects<2>.    (line  156)
* PyFile_WriteString (C function):       File Objects<2>.    (line  164)
* PyFloatObject (C type):                Floating Point Objects.
                                                             (line    6)
* PyFloat_AsDouble (C function):         Floating Point Objects.
                                                             (line   47)
* PyFloat_AsReprString (C function):     Floating Point Objects.
                                                             (line  101)
* PyFloat_AsString (C function):         Floating Point Objects.
                                                             (line   90)
* PyFloat_AS_DOUBLE (C function):        Floating Point Objects.
                                                             (line   56)
* PyFloat_Check (C function):            Floating Point Objects.
                                                             (line   17)
* PyFloat_CheckExact (C function):       Floating Point Objects.
                                                             (line   24)
* PyFloat_ClearFreeList (C function):    Floating Point Objects.
                                                             (line   83)
* PyFloat_FromDouble (C function):       Floating Point Objects.
                                                             (line   40)
* PyFloat_FromString (C function):       Floating Point Objects.
                                                             (line   31)
* PyFloat_GetInfo (C function):          Floating Point Objects.
                                                             (line   61)
* PyFloat_GetMax (C function):           Floating Point Objects.
                                                             (line   69)
* PyFloat_GetMin (C function):           Floating Point Objects.
                                                             (line   76)
* PyFloat_Type (C variable):             Floating Point Objects.
                                                             (line   11)
* PyFrame_GetLineNumber (C function):    Reflection.         (line   35)
* PyFrozenSet_Check (C function):        Set Objects<2>.     (line   54)
* PyFrozenSet_CheckExact (C function):   Set Objects<2>.     (line   71)
* PyFrozenSet_New (C function):          Set Objects<2>.     (line   86)
* PyFrozenSet_Type (C variable):         Set Objects<2>.     (line   38)
* PyFunctionObject (C type):             Function Objects<2>.
                                                             (line    8)
* PyFunction_Check (C function):         Function Objects<2>.
                                                             (line   18)
* PyFunction_GetClosure (C function):    Function Objects<2>.
                                                             (line   72)
* PyFunction_GetCode (C function):       Function Objects<2>.
                                                             (line   36)
* PyFunction_GetDefaults (C function):   Function Objects<2>.
                                                             (line   57)
* PyFunction_GetGlobals (C function):    Function Objects<2>.
                                                             (line   42)
* PyFunction_GetModule (C function):     Function Objects<2>.
                                                             (line   49)
* PyFunction_New (C function):           Function Objects<2>.
                                                             (line   23)
* PyFunction_SetClosure (C function):    Function Objects<2>.
                                                             (line   79)
* PyFunction_SetDefaults (C function):   Function Objects<2>.
                                                             (line   64)
* PyFunction_Type (C variable):          Function Objects<2>.
                                                             (line   12)
* PYFUNCTYPE() (in module ctypes):       Function prototypes.
                                                             (line   35)
* PyGenObject (C type):                  Generator Objects.  (line   10)
* PyGen_Check (C function):              Generator Objects.  (line   18)
* PyGen_CheckExact (C function):         Generator Objects.  (line   22)
* PyGen_New (C function):                Generator Objects.  (line   27)
* PyGen_Type (C variable):               Generator Objects.  (line   14)
* PyGILState_Ensure (C function):        High-level API.     (line  110)
* PyGILState_GetThisThreadState (C function): High-level API.
                                                             (line  149)
* PyGILState_Release (C function):       High-level API.     (line  136)
* PyImport_AddModule (C function):       Importing Modules<2>.
                                                             (line  109)
* PyImport_AppendInittab (C function):   Importing Modules<2>.
                                                             (line  243)
* PyImport_Cleanup (C function):         Importing Modules<2>.
                                                             (line  197)
* PyImport_ExecCodeModule (C function):  Importing Modules<2>.
                                                             (line  125)
* PyImport_ExecCodeModuleEx (C function): Importing Modules<2>.
                                                             (line  157)
* PyImport_ExtendInittab (C function):   Importing Modules<2>.
                                                             (line  269)
* PyImport_FrozenModules (C variable):   Importing Modules<2>.
                                                             (line  235)
* PyImport_GetImporter (C function):     Importing Modules<2>.
                                                             (line  180)
* PyImport_GetMagicNumber (C function):  Importing Modules<2>.
                                                             (line  167)
* PyImport_GetModuleDict (C function):   Importing Modules<2>.
                                                             (line  173)
* PyImport_Import (C function):          Importing Modules<2>.
                                                             (line   87)
* PyImport_ImportFrozenModule (C function): Importing Modules<2>.
                                                             (line  213)
* PyImport_ImportModule (C function):    Importing Modules<2>.
                                                             (line    6)
* PyImport_ImportModuleEx (C function):  Importing Modules<2>.
                                                             (line   45)
* PyImport_ImportModuleLevel (C function): Importing Modules<2>.
                                                             (line   68)
* PyImport_ImportModuleNoBlock (C function): Importing Modules<2>.
                                                             (line   31)
* PyImport_ReloadModule (C function):    Importing Modules<2>.
                                                             (line   99)
* PyIndex_Check (C function):            Number Protocol.    (line  375)
* PyInstance_Check (C function):         Class and Instance Objects.
                                                             (line   37)
* PyInstance_New (C function):           Class and Instance Objects.
                                                             (line   41)
* PyInstance_NewRaw (C function):        Class and Instance Objects.
                                                             (line   50)
* PyInstance_Type (C variable):          Class and Instance Objects.
                                                             (line   33)
* PyInterpreterState (C type):           High-level API.     (line    9)
* PyInterpreterState_Clear (C function): Low-level API.      (line   16)
* PyInterpreterState_Delete (C function): Low-level API.     (line   22)
* PyInterpreterState_Head (C function):  Advanced Debugger Support.
                                                             (line    9)
* PyInterpreterState_New (C function):   Low-level API.      (line   10)
* PyInterpreterState_Next (C function):  Advanced Debugger Support.
                                                             (line   16)
* PyInterpreterState_ThreadHead (C function): Advanced Debugger Support.
                                                             (line   25)
* PyIntObject (C type):                  Plain Integer Objects.
                                                             (line    6)
* PyInt_AsLong (C function):             Plain Integer Objects.
                                                             (line   81)
* PyInt_AsSsize_t (C function):          Plain Integer Objects.
                                                             (line  114)
* PyInt_AsUnsignedLongLongMask (C function): Plain Integer Objects.
                                                             (line  103)
* PyInt_AsUnsignedLongMask (C function): Plain Integer Objects.
                                                             (line   94)
* PyInt_AS_LONG (C function):            Plain Integer Objects.
                                                             (line   89)
* PyInt_Check (C function):              Plain Integer Objects.
                                                             (line   17)
* PyInt_CheckExact (C function):         Plain Integer Objects.
                                                             (line   24)
* PyInt_ClearFreeList (C function):      Plain Integer Objects.
                                                             (line  127)
* PyInt_FromLong (C function):           Plain Integer Objects.
                                                             (line   52)
* PyInt_FromSize_t (C function):         Plain Integer Objects.
                                                             (line   74)
* PyInt_FromSsize_t (C function):        Plain Integer Objects.
                                                             (line   64)
* PyInt_FromString (C function):         Plain Integer Objects.
                                                             (line   31)
* PyInt_GetMax (C function):             Plain Integer Objects.
                                                             (line  122)
* PyInt_Type (C variable):               Plain Integer Objects.
                                                             (line   11)
* PyIter_Check (C function):             Iterator Protocol.  (line   10)
* PyIter_Next (C function):              Iterator Protocol.  (line   14)
* PyListObject (C type):                 List Objects.       (line    6)
* PyList_Append (C function):            List Objects.       (line  131)
* PyList_AsTuple (C function):           List Objects.       (line  175)
* PyList_Check (C function):             List Objects.       (line   16)
* PyList_CheckExact (C function):        List Objects.       (line   23)
* PyList_GetItem (C function):           List Objects.       (line   63)
* PyList_GetItem():                      Reference Count Details.
                                                             (line  117)
* PyList_GetSlice (C function):          List Objects.       (line  137)
* PyList_GET_ITEM (C function):          List Objects.       (line   77)
* PyList_GET_SIZE (C function):          List Objects.       (line   55)
* PyList_Insert (C function):            List Objects.       (line  119)
* PyList_New (C function):               List Objects.       (line   30)
* PyList_Reverse (C function):           List Objects.       (line  170)
* PyList_SetItem (C function):           List Objects.       (line   87)
* PyList_SetItem():                      Reference Count Details.
                                                             (line   26)
* PyList_SetSlice (C function):          List Objects.       (line  151)
* PyList_SET_ITEM (C function):          List Objects.       (line  102)
* PyList_Size (C function):              List Objects.       (line   46)
* PyList_Sort (C function):              List Objects.       (line  165)
* PyList_Type (C variable):              List Objects.       (line   11)
* PyLongObject (C type):                 Long Integer Objects.
                                                             (line    6)
* PyLong_AsDouble (C function):          Long Integer Objects.
                                                             (line  237)
* PyLong_AsLong (C function):            Long Integer Objects.
                                                             (line  147)
* PyLong_AsLongAndOverflow (C function): Long Integer Objects.
                                                             (line  153)
* PyLong_AsLongLong (C function):        Long Integer Objects.
                                                             (line  199)
* PyLong_AsLongLongAndOverflow (C function): Long Integer Objects.
                                                             (line  165)
* PyLong_AsSsize_t (C function):         Long Integer Objects.
                                                             (line  177)
* PyLong_AsSsize_t (C function) <1>:     Long Integer Objects.
                                                             (line  191)
* PyLong_AsUnsignedLong (C function):    Long Integer Objects.
                                                             (line  185)
* PyLong_AsUnsignedLongLong (C function): Long Integer Objects.
                                                             (line  207)
* PyLong_AsUnsignedLongLongMask (C function): Long Integer Objects.
                                                             (line  228)
* PyLong_AsUnsignedLongMask (C function): Long Integer Objects.
                                                             (line  221)
* PyLong_AsVoidPtr (C function):         Long Integer Objects.
                                                             (line  244)
* PyLong_Check (C function):             Long Integer Objects.
                                                             (line   17)
* PyLong_CheckExact (C function):        Long Integer Objects.
                                                             (line   24)
* PyLong_FromDouble (C function):        Long Integer Objects.
                                                             (line   93)
* PyLong_FromLong (C function):          Long Integer Objects.
                                                             (line   31)
* PyLong_FromLongLong (C function):      Long Integer Objects.
                                                             (line   77)
* PyLong_FromSize_t (C function):        Long Integer Objects.
                                                             (line   54)
* PyLong_FromSize_t (C function) <1>:    Long Integer Objects.
                                                             (line   70)
* PyLong_FromSsize_t (C function):       Long Integer Objects.
                                                             (line   45)
* PyLong_FromSsize_t (C function) <1>:   Long Integer Objects.
                                                             (line   63)
* PyLong_FromString (C function):        Long Integer Objects.
                                                             (line  100)
* PyLong_FromUnicode (C function):       Long Integer Objects.
                                                             (line  116)
* PyLong_FromUnsignedLong (C function):  Long Integer Objects.
                                                             (line   38)
* PyLong_FromUnsignedLongLong (C function): Long Integer Objects.
                                                             (line   84)
* PyLong_FromVoidPtr (C function):       Long Integer Objects.
                                                             (line  134)
* PyLong_Type (C variable):              Long Integer Objects.
                                                             (line   11)
* PyMappingMethods (C type):             Mapping Object Structures.
                                                             (line    6)
* PyMappingMethods.mp_ass_subscript (C member): Mapping Object Structures.
                                                             (line   24)
* PyMappingMethods.mp_length (C member): Mapping Object Structures.
                                                             (line   11)
* PyMappingMethods.mp_subscript (C member): Mapping Object Structures.
                                                             (line   17)
* PyMapping_Check (C function):          Mapping Protocol.   (line    6)
* PyMapping_DelItem (C function):        Mapping Protocol.   (line   28)
* PyMapping_DelItemString (C function):  Mapping Protocol.   (line   22)
* PyMapping_GetItemString (C function):  Mapping Protocol.   (line   72)
* PyMapping_HasKey (C function):         Mapping Protocol.   (line   41)
* PyMapping_HasKeyString (C function):   Mapping Protocol.   (line   34)
* PyMapping_Items (C function):          Mapping Protocol.   (line   64)
* PyMapping_Keys (C function):           Mapping Protocol.   (line   48)
* PyMapping_Length (C function):         Mapping Protocol.   (line   11)
* PyMapping_SetItemString (C function):  Mapping Protocol.   (line   81)
* PyMapping_Size (C function):           Mapping Protocol.   (line   11)
* PyMapping_Values (C function):         Mapping Protocol.   (line   56)
* PyMarshal_ReadLastObjectFromFile (C function): Data marshalling support.
                                                             (line   75)
* PyMarshal_ReadLongFromFile (C function): Data marshalling support.
                                                             (line   55)
* PyMarshal_ReadObjectFromFile (C function): Data marshalling support.
                                                             (line   67)
* PyMarshal_ReadObjectFromString (C function): Data marshalling support.
                                                             (line   89)
* PyMarshal_ReadShortFromFile (C function): Data marshalling support.
                                                             (line   61)
* PyMarshal_WriteLongToFile (C function): Data marshalling support.
                                                             (line   20)
* PyMarshal_WriteObjectToFile (C function): Data marshalling support.
                                                             (line   30)
* PyMarshal_WriteObjectToString (C function): Data marshalling support.
                                                             (line   37)
* PyMemberDef (C type):                  Common Object Structures.
                                                             (line  219)
* PyMemoryView_Check (C function):       MemoryView objects. (line   33)
* PyMemoryView_FromBuffer (C function):  MemoryView objects. (line   17)
* PyMemoryView_FromObject (C function):  MemoryView objects. (line   12)
* PyMemoryView_GetContiguous (C function): MemoryView objects.
                                                             (line   24)
* PyMemoryView_GET_BUFFER (C function):  MemoryView objects. (line   38)
* PyMem_Del (C function):                Memory Interface.   (line   57)
* PyMem_Free (C function):               Memory Interface.   (line   31)
* PyMem_Malloc (C function):             Memory Interface.   (line   10)
* PyMem_New (C function):                Memory Interface.   (line   42)
* PyMem_Realloc (C function):            Memory Interface.   (line   18)
* PyMem_Resize (C function):             Memory Interface.   (line   48)
* PyMethodDef (C type):                  Common Object Structures.
                                                             (line   95)
* PyMethod_Check (C function):           Method Objects<2>.  (line   15)
* PyMethod_Class (C function):           Method Objects<2>.  (line   33)
* PyMethod_ClearFreeList (C function):   Method Objects<2>.  (line   75)
* PyMethod_Function (C function):        Method Objects<2>.  (line   48)
* PyMethod_GET_CLASS (C function):       Method Objects<2>.  (line   41)
* PyMethod_GET_FUNCTION (C function):    Method Objects<2>.  (line   54)
* PyMethod_GET_SELF (C function):        Method Objects<2>.  (line   68)
* PyMethod_New (C function):             Method Objects<2>.  (line   20)
* PyMethod_Self (C function):            Method Objects<2>.  (line   61)
* PyMethod_Type (C variable):            Method Objects<2>.  (line    9)
* PyModule_AddIntConstant (C function):  Module Objects.     (line   69)
* PyModule_AddIntMacro (C function):     Module Objects.     (line   90)
* PyModule_AddObject (C function):       Module Objects.     (line   59)
* PyModule_AddStringConstant (C function): Module Objects.   (line   79)
* PyModule_AddStringMacro (C function):  Module Objects.     (line   99)
* PyModule_Check (C function):           Module Objects.     (line   14)
* PyModule_CheckExact (C function):      Module Objects.     (line   21)
* PyModule_GetDict (C function):         Module Objects.     (line   37)
* PyModule_GetFilename (C function):     Module Objects.     (line   53)
* PyModule_GetName (C function):         Module Objects.     (line   47)
* PyModule_New (C function):             Module Objects.     (line   28)
* PyModule_Type (C variable):            Module Objects.     (line    8)
* PyNumberMethods (C type):              Number Object Structures.
                                                             (line    6)
* PyNumberMethods.nb_coerce (C member):  Number Object Structures.
                                                             (line   71)
* PyNumber_Absolute (C function):        Number Protocol.    (line  108)
* PyNumber_Add (C function):             Number Protocol.    (line   11)
* PyNumber_And (C function):             Number Protocol.    (line  138)
* PyNumber_AsSsize_t (C function):       Number Protocol.    (line  361)
* PyNumber_Check (C function):           Number Protocol.    (line    6)
* PyNumber_Coerce (C function):          Number Protocol.    (line  299)
* PyNumber_CoerceEx (C function):        Number Protocol.    (line  312)
* PyNumber_Divide (C function):          Number Protocol.    (line   34)
* PyNumber_Divmod (C function):          Number Protocol.    (line   74)
* PyNumber_Float (C function):           Number Protocol.    (line  336)
* PyNumber_FloorDivide (C function):     Number Protocol.    (line   41)
* PyNumber_Index (C function):           Number Protocol.    (line  344)
* PyNumber_InPlaceAdd (C function):      Number Protocol.    (line  162)
* PyNumber_InPlaceAnd (C function):      Number Protocol.    (line  271)
* PyNumber_InPlaceDivide (C function):   Number Protocol.    (line  191)
* PyNumber_InPlaceFloorDivide (C function): Number Protocol. (line  200)
* PyNumber_InPlaceLshift (C function):   Number Protocol.    (line  251)
* PyNumber_InPlaceMultiply (C function): Number Protocol.    (line  181)
* PyNumber_InPlaceOr (C function):       Number Protocol.    (line  290)
* PyNumber_InPlacePower (C function):    Number Protocol.    (line  238)
* PyNumber_InPlaceRemainder (C function): Number Protocol.   (line  228)
* PyNumber_InPlaceRshift (C function):   Number Protocol.    (line  261)
* PyNumber_InPlaceSubtract (C function): Number Protocol.    (line  171)
* PyNumber_InPlaceTrueDivide (C function): Number Protocol.  (line  212)
* PyNumber_InPlaceXor (C function):      Number Protocol.    (line  280)
* PyNumber_Int (C function):             Number Protocol.    (line  319)
* PyNumber_Invert (C function):          Number Protocol.    (line  115)
* PyNumber_Long (C function):            Number Protocol.    (line  328)
* PyNumber_Lshift (C function):          Number Protocol.    (line  122)
* PyNumber_Multiply (C function):        Number Protocol.    (line   26)
* PyNumber_Negative (C function):        Number Protocol.    (line   94)
* PyNumber_Or (C function):              Number Protocol.    (line  154)
* PyNumber_Positive (C function):        Number Protocol.    (line  101)
* PyNumber_Power (C function):           Number Protocol.    (line   82)
* PyNumber_Remainder (C function):       Number Protocol.    (line   65)
* PyNumber_Rshift (C function):          Number Protocol.    (line  130)
* PyNumber_Subtract (C function):        Number Protocol.    (line   18)
* PyNumber_ToBase (C function):          Number Protocol.    (line  351)
* PyNumber_TrueDivide (C function):      Number Protocol.    (line   51)
* PyNumber_Xor (C function):             Number Protocol.    (line  146)
* PyObject (C type):                     Common Object Structures.
                                                             (line   17)
* PyObject.ob_refcnt (C member):         Type Objects<3>.    (line  130)
* PyObject.ob_type (C member):           Type Objects<3>.    (line  145)
* PyObject._ob_next (C member):          Type Objects<3>.    (line  115)
* PyObject._ob_prev (C member):          Type Objects<3>.    (line  115)
* PyObject_AsCharBuffer (C function):    Old Buffer Protocol.
                                                             (line   13)
* PyObject_AsFileDescriptor (C function): Object Protocol.   (line  391)
* PyObject_AsReadBuffer (C function):    Old Buffer Protocol.
                                                             (line   29)
* PyObject_AsWriteBuffer (C function):   Old Buffer Protocol.
                                                             (line   51)
* PyObject_Bytes (C function):           Object Protocol.    (line  161)
* PyObject_Call (C function):            Object Protocol.    (line  227)
* PyObject_CallFunction (C function):    Object Protocol.    (line  255)
* PyObject_CallFunctionObjArgs (C function): Object Protocol.
                                                             (line  286)
* PyObject_CallMethod (C function):      Object Protocol.    (line  271)
* PyObject_CallMethodObjArgs (C function): Object Protocol.  (line  298)
* PyObject_CallObject (C function):      Object Protocol.    (line  244)
* PyObject_CallObject():                 Calling Python Functions from C.
                                                             (line   64)
* PyObject_CheckBuffer (C function):     Buffer related functions.
                                                             (line    6)
* PyObject_CheckReadBuffer (C function): Old Buffer Protocol.
                                                             (line   44)
* PyObject_Cmp (C function):             Object Protocol.    (line  124)
* PyObject_Compare (C function):         Object Protocol.    (line  133)
* PyObject_Del (C function):             Allocating Objects on the Heap.
                                                             (line   76)
* PyObject_DelAttr (C function):         Object Protocol.    (line   83)
* PyObject_DelAttrString (C function):   Object Protocol.    (line   89)
* PyObject_DelItem (C function):         Object Protocol.    (line  386)
* PyObject_Dir (C function):             Object Protocol.    (line  399)
* PyObject_GC_Del (C function):          Supporting Cyclic Garbage Collection.
                                                             (line   83)
* PyObject_GC_New (C function):          Supporting Cyclic Garbage Collection.
                                                             (line   34)
* PyObject_GC_NewVar (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   39)
* PyObject_GC_Resize (C function):       Supporting Cyclic Garbage Collection.
                                                             (line   50)
* PyObject_GC_Track (C function):        Supporting Cyclic Garbage Collection.
                                                             (line   61)
* PyObject_GC_UnTrack (C function):      Supporting Cyclic Garbage Collection.
                                                             (line   88)
* PyObject_GenericGetAttr (C function):  Object Protocol.    (line   46)
* PyObject_GenericSetAttr (C function):  Object Protocol.    (line   72)
* PyObject_GetAttr (C function):         Object Protocol.    (line   27)
* PyObject_GetAttrString (C function):   Object Protocol.    (line   36)
* PyObject_GetBuffer (C function):       Buffer related functions.
                                                             (line   10)
* PyObject_GetItem (C function):         Object Protocol.    (line  371)
* PyObject_GetIter (C function):         Object Protocol.    (line  411)
* PyObject_HasAttr (C function):         Object Protocol.    (line   14)
* PyObject_HasAttrString (C function):   Object Protocol.    (line   20)
* PyObject_Hash (C function):            Object Protocol.    (line  312)
* PyObject_HashNotImplemented (C function): Object Protocol. (line  318)
* PyObject_HEAD (C macro):               Common Object Structures.
                                                             (line   37)
* PyObject_HEAD_INIT (C macro):          Common Object Structures.
                                                             (line   69)
* PyObject_Init (C function):            Allocating Objects on the Heap.
                                                             (line   22)
* PyObject_InitVar (C function):         Allocating Objects on the Heap.
                                                             (line   33)
* PyObject_IsInstance (C function):      Object Protocol.    (line  175)
* PyObject_IsSubclass (C function):      Object Protocol.    (line  206)
* PyObject_IsTrue (C function):          Object Protocol.    (line  327)
* PyObject_Length (C function):          Object Protocol.    (line  359)
* PyObject_New (C function):             Allocating Objects on the Heap.
                                                             (line   46)
* PyObject_NewVar (C function):          Allocating Objects on the Heap.
                                                             (line   56)
* PyObject_Not (C function):             Object Protocol.    (line  333)
* PyObject_Print (C function):           Object Protocol.    (line    6)
* PyObject_Repr (C function):            Object Protocol.    (line  142)
* PyObject_RichCompare (C function):     Object Protocol.    (line   96)
* PyObject_RichCompareBool (C function): Object Protocol.    (line  109)
* PyObject_SetAttr (C function):         Object Protocol.    (line   57)
* PyObject_SetAttrString (C function):   Object Protocol.    (line   65)
* PyObject_SetItem (C function):         Object Protocol.    (line  379)
* PyObject_Size (C function):            Object Protocol.    (line  359)
* PyObject_Str (C function):             Object Protocol.    (line  151)
* PyObject_Type (C function):            Object Protocol.    (line  339)
* PyObject_TypeCheck (C function):       Object Protocol.    (line  352)
* PyObject_Unicode (C function):         Object Protocol.    (line  166)
* PyObject_VAR_HEAD (C macro):           Common Object Structures.
                                                             (line   55)
* PyOpenGL:                              gl --- Graphics Library interface.
                                                             (line  142)
* PyOS_AfterFork (C function):           Operating System Utilities.
                                                             (line   15)
* PyOS_ascii_atof (C function):          String conversion and formatting.
                                                             (line  157)
* PyOS_ascii_formatd (C function):       String conversion and formatting.
                                                             (line  106)
* PyOS_ascii_strtod (C function):        String conversion and formatting.
                                                             (line   87)
* PyOS_CheckStack (C function):          Operating System Utilities.
                                                             (line   22)
* PyOS_double_to_string (C function):    String conversion and formatting.
                                                             (line  122)
* PyOS_getsig (C function):              Operating System Utilities.
                                                             (line   30)
* PyOS_setsig (C function):              Operating System Utilities.
                                                             (line   37)
* PyOS_snprintf (C function):            String conversion and formatting.
                                                             (line    8)
* PyOS_stricmp (C function):             String conversion and formatting.
                                                             (line  168)
* PyOS_string_to_double (C function):    String conversion and formatting.
                                                             (line   54)
* PyOS_strnicmp (C function):            String conversion and formatting.
                                                             (line  175)
* PyOS_vsnprintf (C function):           String conversion and formatting.
                                                             (line   15)
* PyParser_SimpleParseFile (C function): The Very High Level Layer.
                                                             (line  171)
* PyParser_SimpleParseFileFlags (C function): The Very High Level Layer.
                                                             (line  179)
* PyParser_SimpleParseString (C function): The Very High Level Layer.
                                                             (line  148)
* PyParser_SimpleParseStringFlags (C function): The Very High Level Layer.
                                                             (line  155)
* PyParser_SimpleParseStringFlagsFilename (C function): The Very High Level Layer.
                                                             (line  163)
* PyPI; (see Python Package Index (PyPI)): Vista User Access Control UAC.
                                                             (line   11)
* PyProperty_Type (C variable):          Descriptor Objects. (line    9)
* PyRun_AnyFile (C function):            The Very High Level Layer.
                                                             (line   40)
* PyRun_AnyFileEx (C function):          The Very High Level Layer.
                                                             (line   53)
* PyRun_AnyFileExFlags (C function):     The Very High Level Layer.
                                                             (line   59)
* PyRun_AnyFileFlags (C function):       The Very High Level Layer.
                                                             (line   46)
* PyRun_File (C function):               The Very High Level Layer.
                                                             (line  208)
* PyRun_FileEx (C function):             The Very High Level Layer.
                                                             (line  217)
* PyRun_FileExFlags (C function):        The Very High Level Layer.
                                                             (line  235)
* PyRun_FileFlags (C function):          The Very High Level Layer.
                                                             (line  226)
* PyRun_InteractiveLoop (C function):    The Very High Level Layer.
                                                             (line  134)
* PyRun_InteractiveLoopFlags (C function): The Very High Level Layer.
                                                             (line  141)
* PyRun_InteractiveOne (C function):     The Very High Level Layer.
                                                             (line  115)
* PyRun_InteractiveOneFlags (C function): The Very High Level Layer.
                                                             (line  122)
* PyRun_SimpleFile (C function):         The Very High Level Layer.
                                                             (line   88)
* PyRun_SimpleFileEx (C function):       The Very High Level Layer.
                                                             (line  100)
* PyRun_SimpleFileExFlags (C function):  The Very High Level Layer.
                                                             (line  107)
* PyRun_SimpleFileFlags (C function):    The Very High Level Layer.
                                                             (line   94)
* PyRun_SimpleString (C function):       The Very High Level Layer.
                                                             (line   68)
* PyRun_SimpleStringFlags (C function):  The Very High Level Layer.
                                                             (line   73)
* PyRun_String (C function):             The Very High Level Layer.
                                                             (line  186)
* PyRun_StringFlags (C function):        The Very High Level Layer.
                                                             (line  195)
* PySeqIter_Check (C function):          Iterator Objects.   (line   20)
* PySeqIter_New (C function):            Iterator Objects.   (line   26)
* PySeqIter_Type (C variable):           Iterator Objects.   (line   12)
* PySequenceMethods (C type):            Sequence Object Structures.
                                                             (line    6)
* PySequenceMethods.sq_ass_item (C member): Sequence Object Structures.
                                                             (line   40)
* PySequenceMethods.sq_concat (C member): Sequence Object Structures.
                                                             (line   16)
* PySequenceMethods.sq_contains (C member): Sequence Object Structures.
                                                             (line   46)
* PySequenceMethods.sq_inplace_concat (C member): Sequence Object Structures.
                                                             (line   53)
* PySequenceMethods.sq_inplace_repeat (C member): Sequence Object Structures.
                                                             (line   59)
* PySequenceMethods.sq_item (C member):  Sequence Object Structures.
                                                             (line   28)
* PySequenceMethods.sq_length (C member): Sequence Object Structures.
                                                             (line   11)
* PySequenceMethods.sq_repeat (C member): Sequence Object Structures.
                                                             (line   22)
* PySequence_Check (C function):         Sequence Protocol.  (line    6)
* PySequence_Concat (C function):        Sequence Protocol.  (line   22)
* PySequence_Contains (C function):      Sequence Protocol.  (line  149)
* PySequence_Count (C function):         Sequence Protocol.  (line  137)
* PySequence_DelItem (C function):       Sequence Protocol.  (line  104)
* PySequence_DelSlice (C function):      Sequence Protocol.  (line  125)
* PySequence_Fast (C function):          Sequence Protocol.  (line  183)
* PySequence_Fast_GET_ITEM (C function): Sequence Protocol.  (line  194)
* PySequence_Fast_GET_SIZE (C function): Sequence Protocol.  (line  235)
* PySequence_Fast_ITEMS (C function):    Sequence Protocol.  (line  208)
* PySequence_GetItem (C function):       Sequence Protocol.  (line   68)
* PySequence_GetItem():                  Reference Count Details.
                                                             (line  117)
* PySequence_GetSlice (C function):      Sequence Protocol.  (line   79)
* PySequence_Index (C function):         Sequence Protocol.  (line  155)
* PySequence_InPlaceConcat (C function): Sequence Protocol.  (line   43)
* PySequence_InPlaceRepeat (C function): Sequence Protocol.  (line   53)
* PySequence_ITEM (C function):          Sequence Protocol.  (line  220)
* PySequence_Length (C function):        Sequence Protocol.  (line   11)
* PySequence_List (C function):          Sequence Protocol.  (line  166)
* PySequence_Repeat (C function):        Sequence Protocol.  (line   30)
* PySequence_SetItem (C function):       Sequence Protocol.  (line   92)
* PySequence_SetSlice (C function):      Sequence Protocol.  (line  113)
* PySequence_Size (C function):          Sequence Protocol.  (line   11)
* PySequence_Tuple (C function):         Sequence Protocol.  (line  173)
* PySetObject (C type):                  Set Objects<2>.     (line   21)
* PySet_Add (C function):                Set Objects<2>.     (line  127)
* PySet_Check (C function):              Set Objects<2>.     (line   47)
* PySet_Clear (C function):              Set Objects<2>.     (line  165)
* PySet_Contains (C function):           Set Objects<2>.     (line  118)
* PySet_Discard (C function):            Set Objects<2>.     (line  145)
* PySet_GET_SIZE (C function):           Set Objects<2>.     (line  114)
* PySet_New (C function):                Set Objects<2>.     (line   76)
* PySet_Pop (C function):                Set Objects<2>.     (line  155)
* PySet_Size (C function):               Set Objects<2>.     (line  103)
* PySet_Type (C variable):               Set Objects<2>.     (line   33)
* PySignal_SetWakeupFd (C function):     Exception Handling. (line  365)
* PySlice_Check (C function):            Slice Objects.      (line   11)
* PySlice_GetIndices (C function):       Slice Objects.      (line   27)
* PySlice_GetIndicesEx (C function):     Slice Objects.      (line   52)
* PySlice_New (C function):              Slice Objects.      (line   15)
* PySlice_Type (C variable):             Slice Objects.      (line    6)
* PyStringObject (C type):               String/Bytes Objects.
                                                             (line   13)
* PyString_AsDecodedObject (C function): String/Bytes Objects.
                                                             (line  303)
* PyString_AsEncodedObject (C function): String/Bytes Objects.
                                                             (line  337)
* PyString_AsString (C function):        String/Bytes Objects.
                                                             (line  169)
* PyString_AsStringAndSize (C function): String/Bytes Objects.
                                                             (line  187)
* PyString_AS_STRING (C function):       String/Bytes Objects.
                                                             (line  181)
* PyString_Check (C function):           String/Bytes Objects.
                                                             (line   24)
* PyString_CheckExact (C function):      String/Bytes Objects.
                                                             (line   31)
* PyString_Concat (C function):          String/Bytes Objects.
                                                             (line  212)
* PyString_ConcatAndDel (C function):    String/Bytes Objects.
                                                             (line  222)
* PyString_Decode (C function):          String/Bytes Objects.
                                                             (line  284)
* PyString_Encode (C function):          String/Bytes Objects.
                                                             (line  318)
* PyString_Format (C function):          String/Bytes Objects.
                                                             (line  248)
* PyString_FromFormat (C function):      String/Bytes Objects.
                                                             (line   60)
* PyString_FromFormatV (C function):     String/Bytes Objects.
                                                             (line  143)
* PyString_FromString (C function):      String/Bytes Objects.
                                                             (line   38)
* PyString_FromString():                 Dictionary Objects. (line   79)
* PyString_FromStringAndSize (C function): String/Bytes Objects.
                                                             (line   46)
* PyString_GET_SIZE (C function):        String/Bytes Objects.
                                                             (line  160)
* PyString_InternFromString (C function): String/Bytes Objects.
                                                             (line  272)
* PyString_InternInPlace (C function):   String/Bytes Objects.
                                                             (line  256)
* PyString_Size (C function):            String/Bytes Objects.
                                                             (line  152)
* PyString_Type (C variable):            String/Bytes Objects.
                                                             (line   18)
* PySys_AddWarnOption (C function):      System Functions.   (line   34)
* PySys_GetFile (C function):            System Functions.   (line   18)
* PySys_GetObject (C function):          System Functions.   (line   11)
* PySys_ResetWarnOptions (C function):   System Functions.   (line   30)
* PySys_SetArgv (C function):            Process-wide parameters.
                                                             (line  195)
* PySys_SetArgv():                       Initializing and finalizing the interpreter.
                                                             (line    8)
* PySys_SetArgvEx (C function):          Process-wide parameters.
                                                             (line  157)
* PySys_SetArgvEx():                     Embedding Python.   (line   18)
* PySys_SetArgvEx() <1>:                 Initializing and finalizing the interpreter.
                                                             (line    8)
* PySys_SetObject (C function):          System Functions.   (line   24)
* PySys_SetPath (C function):            System Functions.   (line   38)
* PySys_WriteStderr (C function):        System Functions.   (line   62)
* PySys_WriteStdout (C function):        System Functions.   (line   44)
* Python 3000:                           Glossary.           (line  719)
* Python Editor:                         IDLE.               (line    6)
* Python Enhancement Proposals; PEP 0205: weakref --- Weak references.
                                                             (line  237)
* Python Enhancement Proposals; PEP 0255: The yield statement.
                                                             (line   48)
* Python Enhancement Proposals; PEP 0342: Generator-iterator methods.
                                                             (line   92)
* Python Enhancement Proposals; PEP 0342 <1>: The yield statement.
                                                             (line   53)
* Python Enhancement Proposals; PEP 0343: With Statement Context Managers.
                                                             (line   48)
* Python Enhancement Proposals; PEP 0343 <1>: The with statement.
                                                             (line   78)
* Python Enhancement Proposals; PEP 0343 <2>: contextlib --- Utilities for with-statement contexts.
                                                             (line  145)
* Python Enhancement Proposals; PEP 100: Unicode.            (line   15)
* Python Enhancement Proposals; PEP 11:  Installing Python.  (line   13)
* Python Enhancement Proposals; PEP 205: PEP 205 Weak References.
                                                             (line   82)
* Python Enhancement Proposals; PEP 207: PEP 207 Rich Comparisons.
                                                             (line   84)
* Python Enhancement Proposals; PEP 208: PEP 208 New Coercion Model.
                                                             (line   30)
* Python Enhancement Proposals; PEP 217: PEP 217 Interactive Display Hook.
                                                             (line   27)
* Python Enhancement Proposals; PEP 218: PEP 218 Built-In Set Objects.
                                                             (line   50)
* Python Enhancement Proposals; PEP 218 <1>: Other Language Changes<4>.
                                                             (line   12)
* Python Enhancement Proposals; PEP 218 <2>: PEP 218 A Standard Set Datatype.
                                                             (line   80)
* Python Enhancement Proposals; PEP 227: PEP 227 Nested Scopes.
                                                             (line   96)
* Python Enhancement Proposals; PEP 227 <1>: PEP 227 Nested Scopes<2>.
                                                             (line   96)
* Python Enhancement Proposals; PEP 227 <2>: __future__ --- Future statement definitions.
                                                             (line   71)
* Python Enhancement Proposals; PEP 229: PEP 229 New Build System.
                                                             (line   39)
* Python Enhancement Proposals; PEP 230: PEP 230 Warning Framework.
                                                             (line   73)
* Python Enhancement Proposals; PEP 230 <1>: Miscellaneous options.
                                                             (line  226)
* Python Enhancement Proposals; PEP 232: PEP 232 Function Attributes.
                                                             (line   36)
* Python Enhancement Proposals; PEP 234: PEP 234 Iterators.  (line  124)
* Python Enhancement Proposals; PEP 236: PEP 236 __future__ Directives.
                                                             (line   29)
* Python Enhancement Proposals; PEP 236 <1>: Future statements.
                                                             (line   82)
* Python Enhancement Proposals; PEP 236 <2>: Built-in Functions.
                                                             (line  247)
* Python Enhancement Proposals; PEP 237: PEP 237 Unifying Long Integers and Integers.
                                                             (line   22)
* Python Enhancement Proposals; PEP 237 <1>: Other Language Changes<4>.
                                                             (line   18)
* Python Enhancement Proposals; PEP 237 <2>: PEP 237 Unifying Long Integers and Integers<2>.
                                                             (line   37)
* Python Enhancement Proposals; PEP 237 <3>: String Formatting Operations.
                                                             (line  182)
* Python Enhancement Proposals; PEP 238: PEP 238 Changing the Division Operator.
                                                             (line   21)
* Python Enhancement Proposals; PEP 238 <1>: PEP 238 Changing the Division Operator.
                                                             (line   27)
* Python Enhancement Proposals; PEP 238 <2>: PEP 238 Changing the Division Operator.
                                                             (line   68)
* Python Enhancement Proposals; PEP 238 <3>: Miscellaneous options.
                                                             (line   76)
* Python Enhancement Proposals; PEP 238 <4>: __future__ --- Future statement definitions.
                                                             (line   77)
* Python Enhancement Proposals; PEP 238 <5>: The Very High Level Layer.
                                                             (line  347)
* Python Enhancement Proposals; PEP 238 <6>: Glossary.       (line  288)
* Python Enhancement Proposals; PEP 241: PEP 241 Metadata in Python Packages.
                                                             (line   35)
* Python Enhancement Proposals; PEP 243: PEP 241 Metadata in Python Packages.
                                                             (line   39)
* Python Enhancement Proposals; PEP 249: The sqlite3 package.
                                                             (line   18)
* Python Enhancement Proposals; PEP 249 <1>: The sqlite3 package.
                                                             (line  110)
* Python Enhancement Proposals; PEP 249 <2>: sqlite3 --- DB-API 2 0 interface for SQLite databases.
                                                             (line   16)
* Python Enhancement Proposals; PEP 249 <3>: sqlite3 --- DB-API 2 0 interface for SQLite databases.
                                                             (line  116)
* Python Enhancement Proposals; PEP 252: Related Links.      (line   17)
* Python Enhancement Proposals; PEP 252 <1>: Related Links.  (line   17)
* Python Enhancement Proposals; PEP 253: Old and New Classes.
                                                             (line   28)
* Python Enhancement Proposals; PEP 253 <1>: Multiple Inheritance The Diamond Rule.
                                                             (line    8)
* Python Enhancement Proposals; PEP 253 <2>: Related Links.  (line   17)
* Python Enhancement Proposals; PEP 253 <3>: Related Links.  (line   19)
* Python Enhancement Proposals; PEP 253 <4>: Related Links.  (line   21)
* Python Enhancement Proposals; PEP 255: PEP 255 Simple Generators.
                                                             (line   46)
* Python Enhancement Proposals; PEP 255 <1>: PEP 255 Simple Generators.
                                                             (line  132)
* Python Enhancement Proposals; PEP 255 <2>: PEP 255 Simple Generators<2>.
                                                             (line   45)
* Python Enhancement Proposals; PEP 255 <3>: PEP 255 Simple Generators<2>.
                                                             (line  131)
* Python Enhancement Proposals; PEP 255 <4>: __future__ --- Future statement definitions.
                                                             (line   74)
* Python Enhancement Proposals; PEP 261: Unicode Changes.    (line   19)
* Python Enhancement Proposals; PEP 261 <1>: Unicode Changes.
                                                             (line   62)
* Python Enhancement Proposals; PEP 263: Other Language Changes<3>.
                                                             (line   98)
* Python Enhancement Proposals; PEP 263 <1>: PEP 263 Source Code Encodings.
                                                             (line   29)
* Python Enhancement Proposals; PEP 264: Other Changes and Fixes<3>.
                                                             (line   55)
* Python Enhancement Proposals; PEP 273: PEP 273 Importing Modules from ZIP Archives.
                                                             (line   41)
* Python Enhancement Proposals; PEP 273 <1>: PEP 273 Importing Modules from ZIP Archives.
                                                             (line   44)
* Python Enhancement Proposals; PEP 273 <2>: zipimport --- Import modules from Zip archives.
                                                             (line   44)
* Python Enhancement Proposals; PEP 275: Why isn't there a switch or case statement in Python?.
                                                             (line    8)
* Python Enhancement Proposals; PEP 277: PEP 277 Unicode file name support for Windows NT.
                                                             (line   33)
* Python Enhancement Proposals; PEP 278: PEP 278 Universal Newline Support.
                                                             (line   33)
* Python Enhancement Proposals; PEP 278 <1>: Glossary.       (line  830)
* Python Enhancement Proposals; PEP 279: PEP 279 enumerate.  (line   27)
* Python Enhancement Proposals; PEP 282: PEP 282 The logging Package.
                                                             (line  102)
* Python Enhancement Proposals; PEP 282 <1>: PEP 282 The logging Package.
                                                             (line  108)
* Python Enhancement Proposals; PEP 282 <2>: Archiving operations.
                                                             (line   32)
* Python Enhancement Proposals; PEP 282 <3>: Integration with the warnings module.
                                                             (line   36)
* Python Enhancement Proposals; PEP 285: PEP 285 A Boolean Type.
                                                             (line   47)
* Python Enhancement Proposals; PEP 285 <1>: PEP 285 A Boolean Type.
                                                             (line   70)
* Python Enhancement Proposals; PEP 288: PEP 342 New Generator Features.
                                                             (line  147)
* Python Enhancement Proposals; PEP 289: PEP 289 Generator Expressions.
                                                             (line   57)
* Python Enhancement Proposals; PEP 289 <1>: Other Language Changes<4>.
                                                             (line   15)
* Python Enhancement Proposals; PEP 289 <2>: Python documentation.
                                                             (line   10)
* Python Enhancement Proposals; PEP 292: PEP 292 Simpler String Substitutions.
                                                             (line   45)
* Python Enhancement Proposals; PEP 292 <1>: Template strings.
                                                             (line    8)
* Python Enhancement Proposals; PEP 293: PEP 293 Codec Error Handling Callbacks.
                                                             (line   33)
* Python Enhancement Proposals; PEP 3000: Python 3 0.        (line   45)
* Python Enhancement Proposals; PEP 301: PEP 301 Package Index and Metadata for Distutils.
                                                             (line   45)
* Python Enhancement Proposals; PEP 301 <1>: distutils command register --- Register a module with the Python Package Index.
                                                             (line    7)
* Python Enhancement Proposals; PEP 302: PEP 273 Importing Modules from ZIP Archives.
                                                             (line   46)
* Python Enhancement Proposals; PEP 302 <1>: PEP 302 New Import Hooks.
                                                             (line   13)
* Python Enhancement Proposals; PEP 302 <2>: PEP 302 New Import Hooks.
                                                             (line   38)
* Python Enhancement Proposals; PEP 302 <3>: PEP 302 New Import Hooks.
                                                             (line   62)
* Python Enhancement Proposals; PEP 302 <4>: The import statement.
                                                             (line   43)
* Python Enhancement Proposals; PEP 302 <5>: The import statement.
                                                             (line   84)
* Python Enhancement Proposals; PEP 302 <6>: Built-in Functions.
                                                             (line 1661)
* Python Enhancement Proposals; PEP 302 <7>: linecache --- Random access to text lines.
                                                             (line   27)
* Python Enhancement Proposals; PEP 302 <8>: sys --- System-specific parameters and functions.
                                                             (line  701)
* Python Enhancement Proposals; PEP 302 <9>: sys --- System-specific parameters and functions.
                                                             (line  742)
* Python Enhancement Proposals; PEP 302 <10>: sys --- System-specific parameters and functions.
                                                             (line  754)
* Python Enhancement Proposals; PEP 302 <11>: imp --- Access the import internals.
                                                             (line  250)
* Python Enhancement Proposals; PEP 302 <12>: zipimport --- Import modules from Zip archives.
                                                             (line   51)
* Python Enhancement Proposals; PEP 302 <13>: pkgutil --- Package extension utility.
                                                             (line   51)
* Python Enhancement Proposals; PEP 302 <14>: pkgutil --- Package extension utility.
                                                             (line   53)
* Python Enhancement Proposals; PEP 302 <15>: pkgutil --- Package extension utility.
                                                             (line   54)
* Python Enhancement Proposals; PEP 302 <16>: pkgutil --- Package extension utility.
                                                             (line   63)
* Python Enhancement Proposals; PEP 302 <17>: pkgutil --- Package extension utility.
                                                             (line   67)
* Python Enhancement Proposals; PEP 302 <18>: pkgutil --- Package extension utility.
                                                             (line   77)
* Python Enhancement Proposals; PEP 302 <19>: pkgutil --- Package extension utility.
                                                             (line   91)
* Python Enhancement Proposals; PEP 302 <20>: pkgutil --- Package extension utility.
                                                             (line  106)
* Python Enhancement Proposals; PEP 302 <21>: pkgutil --- Package extension utility.
                                                             (line  115)
* Python Enhancement Proposals; PEP 302 <22>: pkgutil --- Package extension utility.
                                                             (line  124)
* Python Enhancement Proposals; PEP 302 <23>: pkgutil --- Package extension utility.
                                                             (line  176)
* Python Enhancement Proposals; PEP 302 <24>: pkgutil --- Package extension utility.
                                                             (line  192)
* Python Enhancement Proposals; PEP 302 <25>: runpy --- Locating and executing Python modules.
                                                             (line   24)
* Python Enhancement Proposals; PEP 302 <26>: runpy --- Locating and executing Python modules.
                                                             (line   53)
* Python Enhancement Proposals; PEP 302 <27>: runpy --- Locating and executing Python modules.
                                                             (line  116)
* Python Enhancement Proposals; PEP 302 <28>: Glossary.      (line  279)
* Python Enhancement Proposals; PEP 302 <29>: Glossary.      (line  555)
* Python Enhancement Proposals; PEP 305: PEP 305 Comma-separated Files.
                                                             (line   43)
* Python Enhancement Proposals; PEP 305 <1>: csv --- CSV File Reading and Writing.
                                                             (line   42)
* Python Enhancement Proposals; PEP 307: PEP 307 Pickle Enhancements.
                                                             (line    9)
* Python Enhancement Proposals; PEP 307 <1>: PEP 307 Pickle Enhancements.
                                                             (line   31)
* Python Enhancement Proposals; PEP 307 <2>: PEP 307 Pickle Enhancements.
                                                             (line   43)
* Python Enhancement Proposals; PEP 307 <3>: Data stream format.
                                                             (line   31)
* Python Enhancement Proposals; PEP 308: PEP 308 Conditional Expressions.
                                                             (line   72)
* Python Enhancement Proposals; PEP 308 <1>: PEP 308 Conditional Expressions.
                                                             (line   78)
* Python Enhancement Proposals; PEP 308 <2>: Conditional Expressions.
                                                             (line   19)
* Python Enhancement Proposals; PEP 309: PEP 309 Partial Function Application.
                                                             (line   73)
* Python Enhancement Proposals; PEP 3100: Python 3 0.        (line   46)
* Python Enhancement Proposals; PEP 3101: PEP 3101 Advanced String Formatting.
                                                             (line  161)
* Python Enhancement Proposals; PEP 3101 <1>: String Formatting.
                                                             (line   10)
* Python Enhancement Proposals; PEP 3101 <2>: String Formatting.
                                                             (line   60)
* Python Enhancement Proposals; PEP 3105: PEP 3105 print As a Function.
                                                             (line   35)
* Python Enhancement Proposals; PEP 3105 <1>: __future__ --- Future statement definitions.
                                                             (line   87)
* Python Enhancement Proposals; PEP 3106: PEP 3106 Dictionary Views.
                                                             (line   60)
* Python Enhancement Proposals; PEP 3110: PEP 3110 Exception-Handling Changes.
                                                             (line   48)
* Python Enhancement Proposals; PEP 3112: PEP 3112 Byte Literals.
                                                             (line   73)
* Python Enhancement Proposals; PEP 3112 <1>: __future__ --- Future statement definitions.
                                                             (line   90)
* Python Enhancement Proposals; PEP 3116: PEP 3116 New I/O Library.
                                                             (line   69)
* Python Enhancement Proposals; PEP 3116 <1>: Glossary.      (line  830)
* Python Enhancement Proposals; PEP 3118: PEP 3118 Revised Buffer Protocol.
                                                             (line   47)
* Python Enhancement Proposals; PEP 3119: PEP 3119 Abstract Base Classes.
                                                             (line  139)
* Python Enhancement Proposals; PEP 3119 <1>: Customizing instance and subclass checks.
                                                             (line   37)
* Python Enhancement Proposals; PEP 3119 <2>: Collections Abstract Base Classes.
                                                             (line  178)
* Python Enhancement Proposals; PEP 3119 <3>: abc --- Abstract Base Classes.
                                                             (line   13)
* Python Enhancement Proposals; PEP 3121: Module initialization and state.
                                                             (line    6)
* Python Enhancement Proposals; PEP 3127: PEP 3127 Integer Literal Support and Syntax.
                                                             (line   47)
* Python Enhancement Proposals; PEP 3129: PEP 3129 Class Decorators.
                                                             (line   24)
* Python Enhancement Proposals; PEP 3137: PEP 3137 The memoryview Object.
                                                             (line   49)
* Python Enhancement Proposals; PEP 314: PEP 314 Metadata for Python Software Packages v1 1.
                                                             (line   43)
* Python Enhancement Proposals; PEP 314 <1>: distutils core --- Core Distutils functionality.
                                                             (line  103)
* Python Enhancement Proposals; PEP 3141: PEP 3141 A Type Hierarchy for Numbers.
                                                             (line   43)
* Python Enhancement Proposals; PEP 3141 <1>: numbers --- Numeric abstract base classes.
                                                             (line    8)
* Python Enhancement Proposals; PEP 3141 <2>: abc --- Abstract Base Classes.
                                                             (line   14)
* Python Enhancement Proposals; PEP 318: PEP 318 Decorators for Functions and Methods.
                                                             (line  101)
* Python Enhancement Proposals; PEP 318 <1>: PEP 318 Decorators for Functions and Methods.
                                                             (line  125)
* Python Enhancement Proposals; PEP 318 <2>: Other Language Changes<4>.
                                                             (line    9)
* Python Enhancement Proposals; PEP 322: PEP 322 Reverse Iteration.
                                                             (line   35)
* Python Enhancement Proposals; PEP 322 <1>: Other Language Changes<4>.
                                                             (line   13)
* Python Enhancement Proposals; PEP 324: PEP 324 New subprocess Module.
                                                             (line   86)
* Python Enhancement Proposals; PEP 324 <1>: subprocess --- Subprocess management.
                                                             (line   31)
* Python Enhancement Proposals; PEP 325: PEP 342 New Generator Features.
                                                             (line  148)
* Python Enhancement Proposals; PEP 327: The Context type.   (line   56)
* Python Enhancement Proposals; PEP 328: PEP 328 Absolute and Relative Imports.
                                                             (line   83)
* Python Enhancement Proposals; PEP 328 <1>: PEP 328 Multi-line Imports.
                                                             (line   35)
* Python Enhancement Proposals; PEP 328 <2>: Other Language Changes<4>.
                                                             (line   21)
* Python Enhancement Proposals; PEP 328 <3>: The import statement.
                                                             (line  160)
* Python Enhancement Proposals; PEP 328 <4>: __future__ --- Future statement definitions.
                                                             (line   80)
* Python Enhancement Proposals; PEP 328 <5>: What are the "best practices" for using import in a module?.
                                                             (line   31)
* Python Enhancement Proposals; PEP 331: PEP 331 Locale-Independent Float/String Conversions.
                                                             (line   38)
* Python Enhancement Proposals; PEP 333: The wsgiref package.
                                                             (line    8)
* Python Enhancement Proposals; PEP 333 <1>: The wsgiref package.
                                                             (line   31)
* Python Enhancement Proposals; PEP 333 <2>: wsgiref --- WSGI Utilities and Reference Implementation.
                                                             (line   24)
* Python Enhancement Proposals; PEP 333 <3>: wsgiref util -- WSGI environment utilities.
                                                             (line    8)
* Python Enhancement Proposals; PEP 333 <4>: wsgiref util -- WSGI environment utilities.
                                                             (line   10)
* Python Enhancement Proposals; PEP 333 <5>: wsgiref util -- WSGI environment utilities.
                                                             (line   28)
* Python Enhancement Proposals; PEP 333 <6>: wsgiref util -- WSGI environment utilities.
                                                             (line   74)
* Python Enhancement Proposals; PEP 333 <7>: wsgiref headers -- WSGI response header tools.
                                                             (line   12)
* Python Enhancement Proposals; PEP 333 <8>: wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   21)
* Python Enhancement Proposals; PEP 333 <9>: wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   96)
* Python Enhancement Proposals; PEP 333 <10>: wsgiref validate --- WSGI conformance checker.
                                                             (line   13)
* Python Enhancement Proposals; PEP 333 <11>: wsgiref validate --- WSGI conformance checker.
                                                             (line   40)
* Python Enhancement Proposals; PEP 333 <12>: wsgiref handlers -- server/gateway base classes.
                                                             (line  199)
* Python Enhancement Proposals; PEP 333 <13>: wsgiref handlers -- server/gateway base classes.
                                                             (line  215)
* Python Enhancement Proposals; PEP 333 <14>: wsgiref handlers -- server/gateway base classes.
                                                             (line  222)
* Python Enhancement Proposals; PEP 333 <15>: wsgiref handlers -- server/gateway base classes.
                                                             (line  231)
* Python Enhancement Proposals; PEP 333 <16>: Step back WSGI.
                                                             (line    9)
* Python Enhancement Proposals; PEP 338: PEP 338 Executing Modules as Scripts.
                                                             (line   21)
* Python Enhancement Proposals; PEP 338 <1>: Interface options.
                                                             (line   86)
* Python Enhancement Proposals; PEP 338 <2>: runpy --- Locating and executing Python modules.
                                                             (line  142)
* Python Enhancement Proposals; PEP 339: Build and C API Changes<3>.
                                                             (line   45)
* Python Enhancement Proposals; PEP 341: PEP 341 Unified try/except/finally.
                                                             (line   44)
* Python Enhancement Proposals; PEP 342: PEP 342 New Generator Features.
                                                             (line   42)
* Python Enhancement Proposals; PEP 342 <1>: PEP 342 New Generator Features.
                                                             (line  141)
* Python Enhancement Proposals; PEP 342 <2>: Porting to Python 2 5.
                                                             (line   15)
* Python Enhancement Proposals; PEP 342 <3>: Python documentation.
                                                             (line   12)
* Python Enhancement Proposals; PEP 343: The contextlib module.
                                                             (line   64)
* Python Enhancement Proposals; PEP 343 <1>: The contextlib module<2>.
                                                             (line   64)
* Python Enhancement Proposals; PEP 343 <2>: __future__ --- Future statement definitions.
                                                             (line   84)
* Python Enhancement Proposals; PEP 343 <3>: Glossary.       (line  156)
* Python Enhancement Proposals; PEP 347: Build and C API Changes<3>.
                                                             (line   10)
* Python Enhancement Proposals; PEP 352: Deprecations and Removals.
                                                             (line    9)
* Python Enhancement Proposals; PEP 352 <1>: PEP 352 Exceptions as New-Style Classes.
                                                             (line   58)
* Python Enhancement Proposals; PEP 353: PEP 353 Using ssize_t as the index type.
                                                             (line   49)
* Python Enhancement Proposals; PEP 353 <1>: PEP 353 Using ssize_t as the index type.
                                                             (line   55)
* Python Enhancement Proposals; PEP 353 <2>: Build and C API Changes<3>.
                                                             (line   20)
* Python Enhancement Proposals; PEP 356: What's New in Python 2 5.
                                                             (line    9)
* Python Enhancement Proposals; PEP 357: PEP 357 The '__index__' method.
                                                             (line   39)
* Python Enhancement Proposals; PEP 361: What's New in Python 2 6.
                                                             (line    9)
* Python Enhancement Proposals; PEP 366: runpy --- Locating and executing Python modules.
                                                             (line  146)
* Python Enhancement Proposals; PEP 370: PEP 370 Per-user site-packages Directory.
                                                             (line   36)
* Python Enhancement Proposals; PEP 370 <1>: Miscellaneous options.
                                                             (line  112)
* Python Enhancement Proposals; PEP 370 <2>: Environment variables.
                                                             (line  145)
* Python Enhancement Proposals; PEP 370 <3>: Environment variables.
                                                             (line  159)
* Python Enhancement Proposals; PEP 370 <4>: site --- Site-specific configuration hook.
                                                             (line  193)
* Python Enhancement Proposals; PEP 371: PEP 371 The multiprocessing Package.
                                                             (line  147)
* Python Enhancement Proposals; PEP 372: PEP 372 Adding an Ordered Dictionary to collections.
                                                             (line   97)
* Python Enhancement Proposals; PEP 373: The Future for Python 2 x.
                                                             (line   23)
* Python Enhancement Proposals; PEP 378: PEP 378 Format Specifier for Thousands Separator.
                                                             (line   37)
* Python Enhancement Proposals; PEP 378 <1>: Format Specification Mini-Language.
                                                             (line   92)
* Python Enhancement Proposals; PEP 389: PEP 389 The argparse Module for Parsing Command Lines.
                                                             (line  102)
* Python Enhancement Proposals; PEP 391: PEP 391 Dictionary-Based Configuration For Logging.
                                                             (line   94)
* Python Enhancement Proposals; PEP 434: PEP 434 IDLE Enhancement Exception for All Branches.
                                                             (line    6)
* Python Enhancement Proposals; PEP 466: PEP 466 Network Security Enhancements for Python 2 7.
                                                             (line    6)
* Python Enhancement Proposals; PEP 466 <1>: PEP 466 Network Security Enhancements for Python 2 7.
                                                             (line   11)
* Python Enhancement Proposals; PEP 5:   PEP 230 Warning Framework.
                                                             (line   66)
* Python Enhancement Proposals; PEP 5 <1>: Is it reasonable to propose incompatible changes to Python?.
                                                             (line   14)
* Python Enhancement Proposals; PEP 6:   How does the Python version numbering scheme work?.
                                                             (line    9)
* Python Enhancement Proposals; PEP 8:   Intermezzo Coding Style.
                                                             (line   13)
* Python Enhancement Proposals; PEP 8 <1>: threading --- Higher-level threading interface.
                                                             (line   18)
* Python Enhancement Proposals; PEP 8 <2>: Package History.  (line   32)
* Python Enhancement Proposals; PEP 8 <3>: Are there coding standards or a style guide for Python programs?.
                                                             (line    7)
* Python Enhancement Proposals; PEP 8 <4>: How do I keep editors from inserting tabs into my Python source?.
                                                             (line    6)
* Python Imaging Library:                jpeg --- Read and write JPEG files.
                                                             (line   15)
* Python Package Index (PyPI):           Vista User Access Control UAC.
                                                             (line   12)
* Python Package Index (PyPI); .pypirc file: Uploading Packages.
                                                             (line   46)
* PYTHON*:                               Miscellaneous options.
                                                             (line   21)
* PYTHONCASEOK:                          PEP 235 Importing Modules on Case-Insensitive Platforms.
                                                             (line   17)
* PYTHONDEBUG:                           Miscellaneous options.
                                                             (line   17)
* PYTHONDOCS:                            pydoc --- Documentation generator and online help system.
                                                             (line   64)
* PYTHONDONTWRITEBYTECODE:               Interpreter Changes<2>.
                                                             (line   16)
* PYTHONDONTWRITEBYTECODE <1>:           New and Improved Modules<2>.
                                                             (line  625)
* PYTHONDONTWRITEBYTECODE <2>:           Miscellaneous options.
                                                             (line    9)
* PYTHONDONTWRITEBYTECODE <3>:           sys --- System-specific parameters and functions.
                                                             (line  100)
* PYTHONDUMPREFS:                        Type Objects<3>.    (line  126)
* PYTHONHASHSEED:                        Miscellaneous options.
                                                             (line   98)
* PYTHONHASHSEED <1>:                    Environment variables.
                                                             (line  113)
* PYTHONHOME:                            Miscellaneous options.
                                                             (line   22)
* PYTHONHOME <1>:                        Environment variables.
                                                             (line   19)
* PYTHONHOME <2>:                        Environment variables.
                                                             (line   21)
* PYTHONHOME <3>:                        Environment variables.
                                                             (line   38)
* PYTHONHOME <4>:                        Finding modules.    (line   31)
* PYTHONHOME <5>:                        Embedding Python.   (line   39)
* PYTHONHOME <6>:                        Embedding Python.   (line   45)
* PYTHONHOME <7>:                        Process-wide parameters.
                                                             (line  203)
* PYTHONHOME <8>:                        Process-wide parameters.
                                                             (line  214)
* PYTHONHOME <9>:                        Modifying Python's Search Path.
                                                             (line   61)
* PYTHONHOME <10>:                       Modifying Python's Search Path.
                                                             (line   63)
* Pythonic:                              Glossary.           (line  725)
* PYTHONINSPECT:                         Other Changes and Fixes<2>.
                                                             (line   13)
* PYTHONINSPECT <1>:                     Miscellaneous options.
                                                             (line   34)
* PYTHONIOENCODING:                      Interpreter Changes<2>.
                                                             (line   23)
* PYTHONNOUSERSITE:                      PEP 370 Per-user site-packages Directory.
                                                             (line   30)
* PYTHONNOUSERSITE <1>:                  site --- Site-specific configuration hook.
                                                             (line  101)
* PYTHONNOUSERSITE <2>:                  site --- Site-specific configuration hook.
                                                             (line  157)
* PYTHONOPTIMIZE:                        Miscellaneous options.
                                                             (line   41)
* PYTHONPATH:                            The Module Search Path.
                                                             (line   15)
* PYTHONPATH <1>:                        Standard Modules.   (line   33)
* PYTHONPATH <2>:                        Standard Modules.   (line   34)
* PYTHONPATH <3>:                        Miscellaneous options.
                                                             (line   21)
* PYTHONPATH <4>:                        Environment variables.
                                                             (line   32)
* PYTHONPATH <5>:                        Environment variables.
                                                             (line   39)
* PYTHONPATH <6>:                        Environment variables.
                                                             (line   42)
* PYTHONPATH <7>:                        Finding modules.    (line   17)
* PYTHONPATH <8>:                        Finding modules.    (line   39)
* PYTHONPATH <9>:                        Configuration.      (line    6)
* PYTHONPATH <10>:                       Installing your CGI script on a Unix system.
                                                             (line   29)
* PYTHONPATH <11>:                       sys --- System-specific parameters and functions.
                                                             (line  714)
* PYTHONPATH <12>:                       sys --- System-specific parameters and functions.
                                                             (line  724)
* PYTHONPATH <13>:                       Embedding Python.   (line   40)
* PYTHONPATH <14>:                       Embedding Python.   (line   45)
* PYTHONPATH <15>:                       Modifying Python's Search Path.
                                                             (line   68)
* PYTHONPATH <16>:                       Modifying Python's Search Path.
                                                             (line   69)
* PYTHONSTARTUP:                         The Interactive Startup File.
                                                             (line    8)
* PYTHONSTARTUP <1>:                     Key Bindings.       (line   93)
* PYTHONSTARTUP <2>:                     Miscellaneous options.
                                                             (line   31)
* PYTHONSTARTUP <3>:                     Example<7>.         (line   10)
* PYTHONSTARTUP <4>:                     rlcompleter --- Completion function for GNU readline.
                                                             (line   32)
* PYTHONSTARTUP <5>:                     Startup.            (line    7)
* PYTHONSTARTUP <6>:                     user --- User-specific configuration hook.
                                                             (line   11)
* PYTHONUNBUFFERED:                      Miscellaneous options.
                                                             (line  138)
* PYTHONUSERBASE:                        PEP 370 Per-user site-packages Directory.
                                                             (line   23)
* PYTHONUSERBASE <1>:                    site --- Site-specific configuration hook.
                                                             (line  129)
* PYTHONUSERBASE <2>:                    site --- Site-specific configuration hook.
                                                             (line  149)
* PYTHONVERBOSE:                         Miscellaneous options.
                                                             (line  146)
* PYTHONWARNINGS:                        Changes to the Handling of Deprecation Warnings.
                                                             (line   26)
* PYTHONWARNINGS <1>:                    Interpreter Changes.
                                                             (line    6)
* PYTHONWARNINGS <2>:                    Miscellaneous options.
                                                             (line  228)
* PYTHONY2K:                             time --- Time access and conversions.
                                                             (line   34)
* PYTHONY2K <1>:                         time --- Time access and conversions.
                                                             (line   36)
* PYTHONY2K <2>:                         time --- Time access and conversions.
                                                             (line  110)
* python_branch() (in module platform):  Cross Platform.     (line   82)
* python_build() (in module platform):   Cross Platform.     (line   72)
* python_compiler() (in module platform): Cross Platform.    (line   77)
* PYTHON_DOM:                            Module Contents<3>. (line   23)
* python_implementation() (in module platform): Cross Platform.
                                                             (line   88)
* python_revision() (in module platform): Cross Platform.    (line   95)
* python_version() (in module platform): Cross Platform.     (line  102)
* python_version_tuple() (in module platform): Cross Platform.
                                                             (line  109)
* PyThreadState:                         Thread State and the Global Interpreter Lock.
                                                             (line   23)
* PyThreadState <1>:                     Thread State and the Global Interpreter Lock.
                                                             (line   23)
* PyThreadState (C type):                High-level API.     (line   21)
* PyThreadState_Clear (C function):      Low-level API.      (line   36)
* PyThreadState_Delete (C function):     Low-level API.      (line   41)
* PyThreadState_Get (C function):        High-level API.     (line   88)
* PyThreadState_GetDict (C function):    Low-level API.      (line   47)
* PyThreadState_New (C function):        Low-level API.      (line   29)
* PyThreadState_Next (C function):       Advanced Debugger Support.
                                                             (line   34)
* PyThreadState_SetAsyncExc (C function): Low-level API.     (line   62)
* PyThreadState_Swap (C function):       High-level API.     (line   94)
* PyTime_Check (C function):             DateTime Objects<2>.
                                                             (line   44)
* PyTime_CheckExact (C function):        DateTime Objects<2>.
                                                             (line   51)
* PyTime_FromTime (C function):          DateTime Objects<2>.
                                                             (line  108)
* PyTrace_CALL (C variable):             Profiling and Tracing.
                                                             (line   60)
* PyTrace_C_CALL (C variable):           Profiling and Tracing.
                                                             (line   92)
* PyTrace_C_EXCEPTION (C variable):      Profiling and Tracing.
                                                             (line   97)
* PyTrace_C_RETURN (C variable):         Profiling and Tracing.
                                                             (line  102)
* PyTrace_EXCEPTION (C variable):        Profiling and Tracing.
                                                             (line   68)
* PyTrace_LINE (C variable):             Profiling and Tracing.
                                                             (line   80)
* PyTrace_RETURN (C variable):           Profiling and Tracing.
                                                             (line   86)
* PyTupleObject (C type):                Tuple Objects.      (line    6)
* PyTuple_Check (C function):            Tuple Objects.      (line   17)
* PyTuple_CheckExact (C function):       Tuple Objects.      (line   24)
* PyTuple_ClearFreeList (C function):    Tuple Objects.      (line  157)
* PyTuple_GetItem (C function):          Tuple Objects.      (line   74)
* PyTuple_GetSlice (C function):         Tuple Objects.      (line   97)
* PyTuple_GET_ITEM (C function):         Tuple Objects.      (line   86)
* PyTuple_GET_SIZE (C function):         Tuple Objects.      (line   65)
* PyTuple_New (C function):              Tuple Objects.      (line   31)
* PyTuple_Pack (C function):             Tuple Objects.      (line   41)
* PyTuple_SetItem (C function):          Tuple Objects.      (line  109)
* PyTuple_SetItem():                     Reference Count Details.
                                                             (line   26)
* PyTuple_SET_ITEM (C function):         Tuple Objects.      (line  122)
* PyTuple_Size (C function):             Tuple Objects.      (line   56)
* PyTuple_Type (C variable):             Tuple Objects.      (line   11)
* PyTypeObject (C type):                 Type Objects<2>.    (line    6)
* PyTypeObject.tp_alloc (C member):      Type Objects<3>.    (line 1087)
* PyTypeObject.tp_allocs (C member):     Type Objects<3>.    (line 1232)
* PyTypeObject.tp_as_buffer (C member):  Type Objects<3>.    (line  494)
* PyTypeObject.tp_base (C member):       Type Objects<3>.    (line  952)
* PyTypeObject.tp_bases (C member):      Type Objects<3>.    (line 1195)
* PyTypeObject.tp_basicsize (C member):  Type Objects<3>.    (line  205)
* PyTypeObject.tp_cache (C member):      Type Objects<3>.    (line 1213)
* PyTypeObject.tp_call (C member):       Type Objects<3>.    (line  440)
* PyTypeObject.tp_clear (C member):      Type Objects<3>.    (line  714)
* PyTypeObject.tp_compare (C member):    Type Objects<3>.    (line  345)
* PyTypeObject.tp_dealloc (C member):    Type Objects<3>.    (line  254)
* PyTypeObject.tp_descr_get (C member):  Type Objects<3>.    (line  977)
* PyTypeObject.tp_descr_set (C member):  Type Objects<3>.    (line  987)
* PyTypeObject.tp_dict (C member):       Type Objects<3>.    (line  963)
* PyTypeObject.tp_dictoffset (C member): Type Objects<3>.    (line  997)
* PyTypeObject.tp_doc (C member):        Type Objects<3>.    (line  658)
* PyTypeObject.tp_flags (C member):      Type Objects<3>.    (line  503)
* PyTypeObject.tp_free (C member):       Type Objects<3>.    (line 1149)
* PyTypeObject.tp_frees (C member):      Type Objects<3>.    (line 1236)
* PyTypeObject.tp_getattr (C member):    Type Objects<3>.    (line  313)
* PyTypeObject.tp_getattro (C member):   Type Objects<3>.    (line  466)
* PyTypeObject.tp_getset (C member):     Type Objects<3>.    (line  926)
* PyTypeObject.tp_hash (C member):       Type Objects<3>.    (line  408)
* PyTypeObject.tp_init (C member):       Type Objects<3>.    (line 1055)
* PyTypeObject.tp_is_gc (C member):      Type Objects<3>.    (line 1172)
* PyTypeObject.tp_itemsize (C member):   Type Objects<3>.    (line  205)
* PyTypeObject.tp_iter (C member):       Type Objects<3>.    (line  866)
* PyTypeObject.tp_iternext (C member):   Type Objects<3>.    (line  879)
* PyTypeObject.tp_maxalloc (C member):   Type Objects<3>.    (line 1240)
* PyTypeObject.tp_members (C member):    Type Objects<3>.    (line  913)
* PyTypeObject.tp_methods (C member):    Type Objects<3>.    (line  900)
* PyTypeObject.tp_mro (C member):        Type Objects<3>.    (line 1204)
* PyTypeObject.tp_name (C member):       Type Objects<3>.    (line  177)
* PyTypeObject.tp_new (C member):        Type Objects<3>.    (line 1116)
* PyTypeObject.tp_next (C member):       Type Objects<3>.    (line 1244)
* PyTypeObject.tp_print (C member):      Type Objects<3>.    (line  281)
* PyTypeObject.tp_repr (C member):       Type Objects<3>.    (line  362)
* PyTypeObject.tp_richcompare (C member): Type Objects<3>.   (line  778)
* PyTypeObject.tp_setattr (C member):    Type Objects<3>.    (line  329)
* PyTypeObject.tp_setattro (C member):   Type Objects<3>.    (line  480)
* PyTypeObject.tp_str (C member):        Type Objects<3>.    (line  448)
* PyTypeObject.tp_subclasses (C member): Type Objects<3>.    (line 1217)
* PyTypeObject.tp_traverse (C member):   Type Objects<3>.    (line  669)
* PyTypeObject.tp_weaklist (C member):   Type Objects<3>.    (line 1222)
* PyTypeObject.tp_weaklistoffset (C member): Type Objects<3>.
                                                             (line  829)
* PyType_Check (C function):             Type Objects<2>.    (line   15)
* PyType_CheckExact (C function):        Type Objects<2>.    (line   21)
* PyType_ClearCache (C function):        Type Objects<2>.    (line   28)
* PyType_GenericAlloc (C function):      Type Objects<2>.    (line   60)
* PyType_GenericNew (C function):        Type Objects<2>.    (line   72)
* PyType_HasFeature (C function):        Type Objects<2>.    (line   42)
* PyType_HasFeature():                   Buffer Object Structures.
                                                             (line   46)
* PyType_IsSubtype (C function):         Type Objects<2>.    (line   54)
* PyType_IS_GC (C function):             Type Objects<2>.    (line   47)
* PyType_Modified (C function):          Type Objects<2>.    (line   34)
* PyType_Ready (C function):             Type Objects<2>.    (line   80)
* PyType_Type (C variable):              Type Objects<2>.    (line   10)
* PyTZInfo_Check (C function):           DateTime Objects<2>.
                                                             (line   72)
* PyTZInfo_CheckExact (C function):      DateTime Objects<2>.
                                                             (line   79)
* PyUnicodeDecodeError_Create (C function): Unicode Exception Objects.
                                                             (line    9)
* PyUnicodeDecodeError_GetEncoding (C function): Unicode Exception Objects.
                                                             (line   34)
* PyUnicodeDecodeError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   75)
* PyUnicodeDecodeError_GetObject (C function): Unicode Exception Objects.
                                                             (line   41)
* PyUnicodeDecodeError_GetReason (C function): Unicode Exception Objects.
                                                             (line  102)
* PyUnicodeDecodeError_GetStart (C function): Unicode Exception Objects.
                                                             (line   48)
* PyUnicodeDecodeError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   89)
* PyUnicodeDecodeError_SetReason (C function): Unicode Exception Objects.
                                                             (line  109)
* PyUnicodeDecodeError_SetStart (C function): Unicode Exception Objects.
                                                             (line   62)
* PyUnicodeEncodeError_Create (C function): Unicode Exception Objects.
                                                             (line   17)
* PyUnicodeEncodeError_GetEncoding (C function): Unicode Exception Objects.
                                                             (line   34)
* PyUnicodeEncodeError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   75)
* PyUnicodeEncodeError_GetObject (C function): Unicode Exception Objects.
                                                             (line   41)
* PyUnicodeEncodeError_GetReason (C function): Unicode Exception Objects.
                                                             (line  102)
* PyUnicodeEncodeError_GetStart (C function): Unicode Exception Objects.
                                                             (line   48)
* PyUnicodeEncodeError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   89)
* PyUnicodeEncodeError_SetReason (C function): Unicode Exception Objects.
                                                             (line  109)
* PyUnicodeEncodeError_SetStart (C function): Unicode Exception Objects.
                                                             (line   62)
* PyUnicodeObject (C type):              Unicode Type.       (line   28)
* PyUnicodeTranslateError_Create (C function): Unicode Exception Objects.
                                                             (line   25)
* PyUnicodeTranslateError_GetEnd (C function): Unicode Exception Objects.
                                                             (line   75)
* PyUnicodeTranslateError_GetObject (C function): Unicode Exception Objects.
                                                             (line   41)
* PyUnicodeTranslateError_GetReason (C function): Unicode Exception Objects.
                                                             (line  102)
* PyUnicodeTranslateError_GetStart (C function): Unicode Exception Objects.
                                                             (line   48)
* PyUnicodeTranslateError_SetEnd (C function): Unicode Exception Objects.
                                                             (line   89)
* PyUnicodeTranslateError_SetReason (C function): Unicode Exception Objects.
                                                             (line  109)
* PyUnicodeTranslateError_SetStart (C function): Unicode Exception Objects.
                                                             (line   62)
* PyUnicode_AsASCIIString (C function):  ASCII Codecs.       (line   37)
* PyUnicode_AsCharmapString (C function): Character Map Codecs.
                                                             (line   63)
* PyUnicode_AsEncodedString (C function): Generic Codecs.    (line   40)
* PyUnicode_AsLatin1String (C function): Latin-1 Codecs.     (line   38)
* PyUnicode_AsMBCSString (C function):   MBCS codecs for Windows.
                                                             (line   52)
* PyUnicode_AsRawUnicodeEscapeString (C function): Raw-Unicode-Escape Codecs.
                                                             (line   35)
* PyUnicode_AsUnicode (C function):      Plain Py_UNICODE.   (line  152)
* PyUnicode_AsUnicodeEscapeString (C function): Unicode-Escape Codecs.
                                                             (line   36)
* PyUnicode_AsUTF16String (C function):  UTF-16 Codecs.      (line   94)
* PyUnicode_AsUTF32String (C function):  UTF-32 Codecs.      (line   80)
* PyUnicode_AsUTF8String (C function):   UTF-8 Codecs.       (line   54)
* PyUnicode_AsWideChar (C function):     wchar_t Support.    (line   21)
* PyUnicode_AS_DATA (C function):        Unicode Type.       (line   80)
* PyUnicode_AS_UNICODE (C function):     Unicode Type.       (line   74)
* PyUnicode_Check (C function):          Unicode Type.       (line   42)
* PyUnicode_CheckExact (C function):     Unicode Type.       (line   49)
* PyUnicode_ClearFreeList (C function):  Unicode Type.       (line   85)
* PyUnicode_Compare (C function):        Methods and Slot Functions.
                                                             (line  122)
* PyUnicode_Concat (C function):         Methods and Slot Functions.
                                                             (line   12)
* PyUnicode_Contains (C function):       Methods and Slot Functions.
                                                             (line  153)
* PyUnicode_Count (C function):          Methods and Slot Functions.
                                                             (line   99)
* PyUnicode_Decode (C function):         Generic Codecs.     (line    8)
* PyUnicode_DecodeASCII (C function):    ASCII Codecs.       (line    9)
* PyUnicode_DecodeCharmap (C function):  Character Map Codecs.
                                                             (line   29)
* PyUnicode_DecodeLatin1 (C function):   Latin-1 Codecs.     (line   10)
* PyUnicode_DecodeMBCS (C function):     MBCS codecs for Windows.
                                                             (line   12)
* PyUnicode_DecodeMBCSStateful (C function): MBCS codecs for Windows.
                                                             (line   26)
* PyUnicode_DecodeRawUnicodeEscape (C function): Raw-Unicode-Escape Codecs.
                                                             (line    8)
* PyUnicode_DecodeUnicodeEscape (C function): Unicode-Escape Codecs.
                                                             (line    8)
* PyUnicode_DecodeUTF16 (C function):    UTF-16 Codecs.      (line    8)
* PyUnicode_DecodeUTF16Stateful (C function): UTF-16 Codecs. (line   43)
* PyUnicode_DecodeUTF32 (C function):    UTF-32 Codecs.      (line    8)
* PyUnicode_DecodeUTF32Stateful (C function): UTF-32 Codecs. (line   41)
* PyUnicode_DecodeUTF7 (C function):     UTF-7 Codecs.       (line    8)
* PyUnicode_DecodeUTF7Stateful (C function): UTF-7 Codecs.   (line   16)
* PyUnicode_DecodeUTF8 (C function):     UTF-8 Codecs.       (line    8)
* PyUnicode_DecodeUTF8Stateful (C function): UTF-8 Codecs.   (line   22)
* PyUnicode_Encode (C function):         Generic Codecs.     (line   23)
* PyUnicode_EncodeASCII (C function):    ASCII Codecs.       (line   23)
* PyUnicode_EncodeCharmap (C function):  Character Map Codecs.
                                                             (line   49)
* PyUnicode_EncodeLatin1 (C function):   Latin-1 Codecs.     (line   24)
* PyUnicode_EncodeMBCS (C function):     MBCS codecs for Windows.
                                                             (line   38)
* PyUnicode_EncodeRawUnicodeEscape (C function): Raw-Unicode-Escape Codecs.
                                                             (line   21)
* PyUnicode_EncodeUnicodeEscape (C function): Unicode-Escape Codecs.
                                                             (line   22)
* PyUnicode_EncodeUTF16 (C function):    UTF-16 Codecs.      (line   65)
* PyUnicode_EncodeUTF32 (C function):    UTF-32 Codecs.      (line   57)
* PyUnicode_EncodeUTF7 (C function):     UTF-7 Codecs.       (line   26)
* PyUnicode_EncodeUTF8 (C function):     UTF-8 Codecs.       (line   40)
* PyUnicode_Find (C function):           Methods and Slot Functions.
                                                             (line   84)
* PyUnicode_Format (C function):         Methods and Slot Functions.
                                                             (line  145)
* PyUnicode_FromEncodedObject (C function): Plain Py_UNICODE.
                                                             (line  168)
* PyUnicode_FromFormat (C function):     Plain Py_UNICODE.   (line   51)
* PyUnicode_FromFormatV (C function):    Plain Py_UNICODE.   (line  141)
* PyUnicode_FromObject (C function):     Plain Py_UNICODE.   (line  187)
* PyUnicode_FromString (C function):     Plain Py_UNICODE.   (line   42)
* PyUnicode_FromStringAndSize (C function): Plain Py_UNICODE.
                                                             (line   26)
* PyUnicode_FromUnicode (C function):    Plain Py_UNICODE.   (line    9)
* PyUnicode_FromWideChar (C function):   wchar_t Support.    (line    8)
* PyUnicode_GetSize (C function):        Plain Py_UNICODE.   (line  160)
* PyUnicode_GET_DATA_SIZE (C function):  Unicode Type.       (line   65)
* PyUnicode_GET_SIZE (C function):       Unicode Type.       (line   56)
* PyUnicode_Join (C function):           Methods and Slot Functions.
                                                             (line   64)
* PyUnicode_Replace (C function):        Methods and Slot Functions.
                                                             (line  109)
* PyUnicode_RichCompare (C function):    Methods and Slot Functions.
                                                             (line  127)
* PyUnicode_Split (C function):          Methods and Slot Functions.
                                                             (line   19)
* PyUnicode_Splitlines (C function):     Methods and Slot Functions.
                                                             (line   35)
* PyUnicode_Tailmatch (C function):      Methods and Slot Functions.
                                                             (line   72)
* PyUnicode_Translate (C function):      Methods and Slot Functions.
                                                             (line   45)
* PyUnicode_TranslateCharmap (C function): Character Map Codecs.
                                                             (line   75)
* PyUnicode_Type (C variable):           Unicode Type.       (line   33)
* PyVarObject (C type):                  Common Object Structures.
                                                             (line   26)
* PyVarObject.ob_size (C member):        Type Objects<3>.    (line  169)
* PyVarObject_HEAD_INIT (C macro):       Common Object Structures.
                                                             (line   77)
* PyWeakref_Check (C function):          Weak Reference Objects<2>.
                                                             (line   11)
* PyWeakref_CheckProxy (C function):     Weak Reference Objects<2>.
                                                             (line   23)
* PyWeakref_CheckRef (C function):       Weak Reference Objects<2>.
                                                             (line   17)
* PyWeakref_GetObject (C function):      Weak Reference Objects<2>.
                                                             (line   65)
* PyWeakref_GET_OBJECT (C function):     Weak Reference Objects<2>.
                                                             (line   79)
* PyWeakref_NewProxy (C function):       Weak Reference Objects<2>.
                                                             (line   47)
* PyWeakref_NewRef (C function):         Weak Reference Objects<2>.
                                                             (line   29)
* PyWrapper_New (C function):            Descriptor Objects. (line   62)
* PyZipFile (class in zipfile):          zipfile --- Work with ZIP archives.
                                                             (line   40)
* Py_AddPendingCall (C function):        Asynchronous Notifications.
                                                             (line   10)
* Py_AddPendingCall():                   Asynchronous Notifications.
                                                             (line   12)
* Py_AtExit (C function):                Process Control.    (line   20)
* Py_BEGIN_ALLOW_THREADS:                Releasing the GIL from extension code.
                                                             (line   21)
* Py_BEGIN_ALLOW_THREADS (C macro):      High-level API.     (line  162)
* Py_BLOCK_THREADS (C macro):            High-level API.     (line  178)
* Py_buffer (C type):                    The new-style Py_buffer struct.
                                                             (line    6)
* Py_buffer.buf (C member):              The new-style Py_buffer struct.
                                                             (line    8)
* Py_buffer.internal (C member):         The new-style Py_buffer struct.
                                                             (line   83)
* Py_buffer.itemsize (C member):         The new-style Py_buffer struct.
                                                             (line   73)
* Py_buffer.ndim (C member):             The new-style Py_buffer struct.
                                                             (line   27)
* Py_buffer.readonly (C member):         The new-style Py_buffer struct.
                                                             (line   16)
* Py_buffer.shape (C member):            The new-style Py_buffer struct.
                                                             (line   33)
* Py_buffer.strides (C member):          The new-style Py_buffer struct.
                                                             (line   40)
* Py_buffer.suboffsets (C member):       The new-style Py_buffer struct.
                                                             (line   46)
* Py_BuildValue (C function):            Parsing arguments and building values.
                                                             (line  476)
* Py_CLEAR (C function):                 Reference Counting. (line   47)
* py_compile (module):                   py_compile --- Compile Python source files.
                                                             (line    6)
* PY_COMPILED (in module imp):           imp --- Access the import internals.
                                                             (line  139)
* Py_CompileString (C function):         The Very High Level Layer.
                                                             (line  246)
* Py_CompileString():                    The Very High Level Layer.
                                                             (line  312)
* Py_CompileString() <1>:                The Very High Level Layer.
                                                             (line  317)
* Py_CompileString() <2>:                The Very High Level Layer.
                                                             (line  324)
* Py_CompileStringFlags (C function):    The Very High Level Layer.
                                                             (line  254)
* Py_complex (C type):                   Complex Numbers as C Structures.
                                                             (line   10)
* Py_DECREF (C function):                Reference Counting. (line   20)
* Py_DECREF():                           Reference Counts<2>.
                                                             (line   17)
* Py_EndInterpreter (C function):        Sub-interpreter support.
                                                             (line   50)
* Py_END_ALLOW_THREADS:                  Releasing the GIL from extension code.
                                                             (line   21)
* Py_END_ALLOW_THREADS (C macro):        High-level API.     (line  170)
* Py_END_OF_BUFFER (C variable):         Old-style buffer objects.
                                                             (line   36)
* Py_EnterRecursiveCall (C function):    Recursion Control.  (line   11)
* Py_eval_input (C variable):            The Very High Level Layer.
                                                             (line  310)
* Py_Exit (C function):                  Process Control.    (line   15)
* Py_False (C variable):                 Boolean Objects<2>. (line   17)
* Py_FatalError (C function):            Process Control.    (line    6)
* Py_FatalError():                       Process-wide parameters.
                                                             (line  160)
* Py_FdIsInteractive (C function):       Operating System Utilities.
                                                             (line    6)
* Py_file_input (C variable):            The Very High Level Layer.
                                                             (line  315)
* Py_Finalize (C function):              Initializing and finalizing the interpreter.
                                                             (line   37)
* Py_Finalize():                         Process Control.    (line   17)
* Py_Finalize() <1>:                     Process Control.    (line   22)
* Py_Finalize() <2>:                     Initializing and finalizing the interpreter.
                                                             (line    8)
* Py_Finalize() <3>:                     Sub-interpreter support.
                                                             (line   38)
* Py_Finalize() <4>:                     Sub-interpreter support.
                                                             (line   52)
* Py_FindMethod (C function):            Common Object Structures.
                                                             (line  321)
* PY_FROZEN (in module imp):             imp --- Access the import internals.
                                                             (line  155)
* Py_GetBuildInfo (C function):          Process-wide parameters.
                                                             (line  146)
* Py_GetCompiler (C function):           Process-wide parameters.
                                                             (line  135)
* Py_GetCopyright (C function):          Process-wide parameters.
                                                             (line  124)
* Py_GetExecPrefix (C function):         Process-wide parameters.
                                                             (line   40)
* Py_GetExecPrefix():                    Embedding Python.   (line   43)
* Py_GetPath (C function):               Process-wide parameters.
                                                             (line   87)
* Py_GetPath():                          Embedding Python.   (line   43)
* Py_GetPath() <1>:                      Process-wide parameters.
                                                             (line    8)
* Py_GetPlatform (C function):           Process-wide parameters.
                                                             (line  113)
* Py_GetPrefix (C function):             Process-wide parameters.
                                                             (line   26)
* Py_GetPrefix():                        Embedding Python.   (line   43)
* Py_GetProgramFullPath (C function):    Process-wide parameters.
                                                             (line   78)
* Py_GetProgramFullPath():               Embedding Python.   (line   43)
* Py_GetProgramName (C function):        Process-wide parameters.
                                                             (line   20)
* Py_GetPythonHome (C function):         Process-wide parameters.
                                                             (line  211)
* Py_GetVersion (C function):            Process-wide parameters.
                                                             (line  100)
* Py_INCREF (C function):                Reference Counting. (line    9)
* Py_INCREF():                           Reference Counts<2>.
                                                             (line   17)
* Py_Initialize (C function):            Initializing and finalizing the interpreter.
                                                             (line    6)
* Py_Initialize():                       Embedding Python.   (line   12)
* Py_Initialize() <1>:                   Process-wide parameters.
                                                             (line    8)
* Py_Initialize() <2>:                   High-level API.     (line   36)
* Py_Initialize() <3>:                   Sub-interpreter support.
                                                             (line   38)
* Py_InitializeEx (C function):          Initializing and finalizing the interpreter.
                                                             (line   22)
* Py_InitModule (C function):            Allocating Objects on the Heap.
                                                             (line   84)
* Py_InitModule3 (C function):           Allocating Objects on the Heap.
                                                             (line   95)
* Py_InitModule4 (C function):           Allocating Objects on the Heap.
                                                             (line  107)
* Py_IsInitialized (C function):         Initializing and finalizing the interpreter.
                                                             (line   30)
* Py_IsInitialized():                    Embedding Python.   (line   52)
* Py_LeaveRecursiveCall (C function):    Recursion Control.  (line   29)
* Py_Main (C function):                  The Very High Level Layer.
                                                             (line   24)
* Py_NewInterpreter (C function):        Sub-interpreter support.
                                                             (line   13)
* Py_None (C variable):                  The None Object.    (line   11)
* py_object (class in ctypes):           Fundamental data types<2>.
                                                             (line  219)
* Py_PRINT_RAW:                          File Objects<2>.    (line  159)
* Py_RETURN_FALSE (C macro):             Boolean Objects<2>. (line   29)
* Py_RETURN_NONE (C macro):              The None Object.    (line   17)
* Py_RETURN_TRUE (C macro):              Boolean Objects<2>. (line   36)
* Py_SetProgramName (C function):        Process-wide parameters.
                                                             (line    6)
* Py_SetProgramName():                   Embedding Python.   (line   43)
* Py_SetProgramName() <1>:               Initializing and finalizing the interpreter.
                                                             (line    8)
* Py_SetProgramName() <2>:               Process-wide parameters.
                                                             (line   22)
* Py_SetProgramName() <3>:               Process-wide parameters.
                                                             (line   80)
* Py_SetPythonHome (C function):         Process-wide parameters.
                                                             (line  200)
* Py_single_input (C variable):          The Very High Level Layer.
                                                             (line  322)
* PY_SOURCE (in module imp):             imp --- Access the import internals.
                                                             (line  135)
* PY_SSIZE_T_MAX:                        Long Integer Objects.
                                                             (line  179)
* PY_SSIZE_T_MAX <1>:                    Long Integer Objects.
                                                             (line  193)
* py_suffix_importer() (in module imputil): imputil --- Import utilities.
                                                             (line   87)
* Py_TPFLAGS_BASETYPE (built-in variable): Type Objects<3>.  (line  618)
* Py_TPFLAGS_CHECKTYPES (built-in variable): Type Objects<3>.
                                                             (line  565)
* Py_TPFLAGS_DEFAULT (built-in variable): Type Objects<3>.   (line  646)
* Py_TPFLAGS_GC (built-in variable):     Type Objects<3>.    (line  545)
* Py_TPFLAGS_HAVE_CLASS (built-in variable): Type Objects<3>.
                                                             (line  596)
* Py_TPFLAGS_HAVE_GC (built-in variable): Type Objects<3>.   (line  634)
* Py_TPFLAGS_HAVE_GETCHARBUFFER (built-in variable): Type Objects<3>.
                                                             (line  534)
* Py_TPFLAGS_HAVE_GETCHARBUFFER (built-in variable) <1>: Buffer Object Structures.
                                                             (line   67)
* Py_TPFLAGS_HAVE_INPLACEOPS (built-in variable): Type Objects<3>.
                                                             (line  550)
* Py_TPFLAGS_HAVE_ITER (built-in variable): Type Objects<3>. (line  591)
* Py_TPFLAGS_HAVE_RICHCOMPARE (built-in variable): Type Objects<3>.
                                                             (line  578)
* Py_TPFLAGS_HAVE_SEQUENCE_IN (built-in variable): Type Objects<3>.
                                                             (line  540)
* Py_TPFLAGS_HAVE_WEAKREFS (built-in variable): Type Objects<3>.
                                                             (line  584)
* Py_TPFLAGS_HEAPTYPE (built-in variable): Type Objects<3>.  (line  608)
* Py_TPFLAGS_READY (built-in variable):  Type Objects<3>.    (line  624)
* Py_TPFLAGS_READYING (built-in variable): Type Objects<3>.  (line  629)
* Py_tracefunc (C type):                 Profiling and Tracing.
                                                             (line   20)
* Py_True (C variable):                  Boolean Objects<2>. (line   23)
* Py_UNBLOCK_THREADS (C macro):          High-level API.     (line  185)
* Py_UNICODE (C type):                   Unicode Type.       (line    9)
* Py_UNICODE_ISALNUM (C function):       Unicode Character Properties.
                                                             (line   46)
* Py_UNICODE_ISALPHA (C function):       Unicode Character Properties.
                                                             (line   42)
* Py_UNICODE_ISDECIMAL (C function):     Unicode Character Properties.
                                                             (line   30)
* Py_UNICODE_ISDIGIT (C function):       Unicode Character Properties.
                                                             (line   34)
* Py_UNICODE_ISLINEBREAK (C function):   Unicode Character Properties.
                                                             (line   26)
* Py_UNICODE_ISLOWER (C function):       Unicode Character Properties.
                                                             (line   14)
* Py_UNICODE_ISNUMERIC (C function):     Unicode Character Properties.
                                                             (line   38)
* Py_UNICODE_ISSPACE (C function):       Unicode Character Properties.
                                                             (line   10)
* Py_UNICODE_ISTITLE (C function):       Unicode Character Properties.
                                                             (line   22)
* Py_UNICODE_ISUPPER (C function):       Unicode Character Properties.
                                                             (line   18)
* Py_UNICODE_TODECIMAL (C function):     Unicode Character Properties.
                                                             (line   65)
* Py_UNICODE_TODIGIT (C function):       Unicode Character Properties.
                                                             (line   71)
* Py_UNICODE_TOLOWER (C function):       Unicode Character Properties.
                                                             (line   53)
* Py_UNICODE_TONUMERIC (C function):     Unicode Character Properties.
                                                             (line   77)
* Py_UNICODE_TOTITLE (C function):       Unicode Character Properties.
                                                             (line   61)
* Py_UNICODE_TOUPPER (C function):       Unicode Character Properties.
                                                             (line   57)
* Py_VaBuildValue (C function):          Parsing arguments and building values.
                                                             (line  655)
* Py_VISIT (C function):                 Supporting Cyclic Garbage Collection.
                                                             (line  131)
* Py_XDECREF (C function):               Reference Counting. (line   40)
* Py_XDECREF():                          Exceptions<7>.      (line  125)
* Py_XINCREF (C function):               Reference Counting. (line   15)
* P_DETACH (in module os):               Process Management. (line  419)
* P_NOWAIT (in module os):               Process Management. (line  395)
* P_NOWAITO (in module os):              Process Management. (line  395)
* P_OVERLAY (in module os):              Process Management. (line  419)
* P_WAIT (in module os):                 Process Management. (line  407)
* qdevice() (in module fl):              Functions Defined in Module fl.
                                                             (line   77)
* QDPoint (class in aetypes):            aetypes --- AppleEvent objects.
                                                             (line   69)
* QDRectangle (class in aetypes):        aetypes --- AppleEvent objects.
                                                             (line   73)
* qenter() (in module fl):               Functions Defined in Module fl.
                                                             (line   77)
* qiflush() (in module curses):          Functions<2>.       (line  377)
* QName (class in xml.etree.ElementTree): QName Objects.     (line    6)
* qread() (in module fl):                Functions Defined in Module fl.
                                                             (line   77)
* qreset() (in module fl):               Functions Defined in Module fl.
                                                             (line   77)
* qsize() (multiprocessing.Queue method): Pipes and Queues.  (line   98)
* qsize() (Queue.Queue method):          Queue Objects.      (line    9)
* qtest() (in module fl):                Functions Defined in Module fl.
                                                             (line   77)
* quantize() (decimal.Context method):   Context objects.    (line  452)
* quantize() (decimal.Decimal method):   Decimal objects.    (line  510)
* QueryInfoKey() (in module _winreg):    _winreg -- Windows registry access.
                                                             (line  279)
* queryparams() (in module al):          al --- Audio functions on the SGI.
                                                             (line   44)
* QueryReflectionKey() (in module _winreg): _winreg -- Windows registry access.
                                                             (line  453)
* QueryValue() (in module _winreg):      _winreg -- Windows registry access.
                                                             (line  305)
* QueryValueEx() (in module _winreg):    _winreg -- Windows registry access.
                                                             (line  322)
* Queue (class in multiprocessing):      Pipes and Queues.   (line   84)
* Queue (class in Queue):                Queue --- A synchronized queue class.
                                                             (line   31)
* Queue (module):                        Queue --- A synchronized queue class.
                                                             (line    6)
* queue (sched.scheduler attribute):     Scheduler Objects.  (line   55)
* Queue() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  158)
* quick_ratio() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  187)
* quit (built-in variable):              Constants added by the site module.
                                                             (line   11)
* quit() (ftplib.FTP method):            FTP Objects.        (line  214)
* quit() (nntplib.NNTP method):          NNTP Objects.       (line  229)
* quit() (poplib.POP3 method):           POP3 Objects.       (line   75)
* quit() (smtplib.SMTP method):          SMTP Objects.       (line  207)
* quopri (module):                       quopri --- Encode and decode MIME quoted-printable data.
                                                             (line    6)
* quote() (in module email.utils):       email utils Miscellaneous utilities.
                                                             (line    9)
* quote() (in module pipes):             pipes --- Interface to shell pipelines.
                                                             (line   32)
* quote() (in module rfc822):            rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   62)
* quote() (in module urllib):            Utility functions<2>.
                                                             (line    6)
* quoteattr() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   34)
* quotechar (csv.Dialect attribute):     Dialects and Formatting Parameters.
                                                             (line   53)
* quoted-printable; encoding:            quopri --- Encode and decode MIME quoted-printable data.
                                                             (line    6)
* quotes (shlex.shlex attribute):        shlex Objects.      (line  114)
* QUOTE_ALL (in module csv):             Module Contents<2>. (line  208)
* QUOTE_MINIMAL (in module csv):         Module Contents<2>. (line  212)
* QUOTE_NONE (in module csv):            Module Contents<2>. (line  226)
* QUOTE_NONNUMERIC (in module csv):      Module Contents<2>. (line  218)
* quote_plus() (in module urllib):       Utility functions<2>.
                                                             (line   16)
* quoting (csv.Dialect attribute):       Dialects and Formatting Parameters.
                                                             (line   59)
* radians() (in module math):            Angular conversion. (line   10)
* radians() (in module turtle):          Settings for measurement.
                                                             (line   27)
* RadioButtonGroup (class in msilib):    GUI classes.        (line   29)
* radiogroup() (msilib.Dialog method):   GUI classes.        (line   73)
* radix() (decimal.Context method):      Context objects.    (line  457)
* radix() (decimal.Decimal method):      Decimal objects.    (line  539)
* RADIXCHAR (in module locale):          locale --- Internationalization services.
                                                             (line  223)
* raise (2to3 fixer):                    Fixers.             (line  192)
* raise an exception:                    Exceptions<2>.      (line    6)
* RAISE_VARARGS (opcode):                Python Bytecode Instructions.
                                                             (line  556)
* raising; exception:                    The raise statement.
                                                             (line    6)
* randint() (in module random):          random --- Generate pseudo-random numbers.
                                                             (line  147)
* random (module):                       random --- Generate pseudo-random numbers.
                                                             (line    6)
* random() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  196)
* randrange() (in module random):        random --- Generate pseudo-random numbers.
                                                             (line  137)
* RAND_add() (in module ssl):            Functions Constants and Exceptions.
                                                             (line  147)
* RAND_egd() (in module ssl):            Functions Constants and Exceptions.
                                                             (line  134)
* RAND_status() (in module ssl):         Functions Constants and Exceptions.
                                                             (line  127)
* Range (class in aetypes):              aetypes --- AppleEvent objects.
                                                             (line   89)
* range() (built-in function):           Built-in Functions. (line 1096)
* ratecv() (in module audioop):          audioop --- Manipulate raw audio data.
                                                             (line  166)
* ratio() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  172)
* Rational (class in numbers):           The numeric tower.  (line   41)
* raw (io.BufferedIOBase attribute):     I/O Base Classes.   (line  231)
* raw input:                             Expression input.   (line   19)
* raw string:                            String literals.    (line   27)
* raw() (in module curses):              Functions<2>.       (line  384)
* RawArray() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   16)
* RawConfigParser (class in ConfigParser): ConfigParser --- Configuration file parser.
                                                             (line   78)
* RawDescriptionHelpFormatter (class in argparse): formatter_class.
                                                             (line   10)
* RawIOBase (class in io):               I/O Base Classes.   (line  160)
* RawPen (class in turtle):              The public classes of the module turtle.
                                                             (line    6)
* RawTextHelpFormatter (class in argparse): formatter_class. (line   10)
* RawTurtle (class in turtle):           The public classes of the module turtle.
                                                             (line    6)
* RawValue() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   33)
* raw_decode() (json.JSONDecoder method): Encoders and Decoders.
                                                             (line   97)
* raw_input (2to3 fixer):                Fixers.             (line  199)
* raw_input() (built-in function):       Built-in Functions. (line 1126)
* raw_input() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   35)
* RBRACE (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* re (module):                           re --- Regular expression operations.
                                                             (line    6)
* re (re.MatchObject attribute):         Match Objects.      (line  180)
* read() (array.array method):           array --- Efficient arrays of numeric values.
                                                             (line  195)
* read() (bz2.BZ2File method):           De compression of files.
                                                             (line   46)
* read() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line   98)
* read() (codecs.StreamReader method):   StreamReader Objects.
                                                             (line   39)
* read() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   40)
* read() (file method):                  File Objects.       (line  103)
* read() (httplib.HTTPResponse method):  HTTPResponse Objects.
                                                             (line    9)
* read() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  189)
* read() (in module imgfile):            imgfile --- Support for SGI imglib files.
                                                             (line   28)
* read() (in module mmap):               mmap --- Memory-mapped file support.
                                                             (line  183)
* read() (in module os):                 File Descriptor Operations.
                                                             (line  205)
* read() (io.BufferedIOBase method):     I/O Base Classes.   (line  252)
* read() (io.BufferedReader method):     Buffered Streams.   (line   52)
* read() (io.RawIOBase method):          I/O Base Classes.   (line  173)
* read() (io.TextIOBase method):         Text I/O.           (line   54)
* read() (mimetypes.MimeTypes method):   MimeTypes Objects.  (line   67)
* read() (multifile.MultiFile method):   MultiFile Objects.  (line   22)
* read() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   32)
* read() (robotparser.RobotFileParser method): robotparser --- Parser for robots txt.
                                                             (line   26)
* read() (zipfile.ZipFile method):       ZipFile Objects.    (line  155)
* read1() (io.BufferedIOBase method):    I/O Base Classes.   (line  269)
* read1() (io.BufferedReader method):    Buffered Streams.   (line   58)
* read1() (io.BytesIO method):           Buffered Streams.   (line   24)
* readable() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  145)
* readable() (io.IOBase method):         I/O Base Classes.   (line   78)
* readall() (io.RawIOBase method):       I/O Base Classes.   (line  185)
* readbufferproc (C type):               Buffer Object Structures.
                                                             (line   74)
* reader() (in module csv):              Module Contents<2>. (line    8)
* ReadError:                             tarfile --- Read and write tar archive files.
                                                             (line  164)
* readfp() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   65)
* readfp() (mimetypes.MimeTypes method): MimeTypes Objects.  (line   75)
* readframes() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line   94)
* readframes() (sunau.AU_read method):   AU_read Objects.    (line   46)
* readframes() (wave.Wave_read method):  Wave_read Objects.  (line   45)
* readinto() (io.BufferedIOBase method): I/O Base Classes.   (line  276)
* readinto() (io.RawIOBase method):      I/O Base Classes.   (line  190)
* readline (module):                     readline --- GNU readline interface.
                                                             (line    6)
* readline() (bz2.BZ2File method):       De compression of files.
                                                             (line   52)
* readline() (codecs.StreamReader method): StreamReader Objects.
                                                             (line   68)
* readline() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  111)
* readline() (file method):              Expression input.   (line   19)
* readline() (file method) <1>:          File Objects.       (line  120)
* readline() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  194)
* readline() (in module mmap):           mmap --- Memory-mapped file support.
                                                             (line  194)
* readline() (io.IOBase method):         I/O Base Classes.   (line   83)
* readline() (io.TextIOBase method):     Text I/O.           (line   60)
* readline() (multifile.MultiFile method): MultiFile Objects.
                                                             (line    8)
* readlines() (bz2.BZ2File method):      De compression of files.
                                                             (line   59)
* readlines() (codecs.StreamReader method): StreamReader Objects.
                                                             (line   81)
* readlines() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  124)
* readlines() (file method):             File Objects.       (line  133)
* readlines() (io.IOBase method):        I/O Base Classes.   (line   92)
* readlines() (multifile.MultiFile method): MultiFile Objects.
                                                             (line   18)
* readlink() (in module os):             Files and Directories.
                                                             (line  359)
* readmodule() (in module pyclbr):       pyclbr --- Python class browser support.
                                                             (line   19)
* readmodule_ex() (in module pyclbr):    pyclbr --- Python class browser support.
                                                             (line   28)
* READONLY:                              Generic Attribute Management.
                                                             (line  102)
* readonly (memoryview attribute):       memoryview type.    (line  109)
* readPlist() (in module plistlib):      plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   38)
* readPlistFromResource() (in module plistlib): plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   66)
* readPlistFromString() (in module plistlib): plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   58)
* readscaled() (in module imgfile):      imgfile --- Support for SGI imglib files.
                                                             (line   36)
* READY (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line   71)
* ready() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  138)
* read_all() (telnetlib.Telnet method):  Telnet Objects.     (line   17)
* read_byte() (in module mmap):          mmap --- Memory-mapped file support.
                                                             (line  189)
* read_eager() (telnetlib.Telnet method): Telnet Objects.    (line   34)
* read_history_file() (in module readline): readline --- GNU readline interface.
                                                             (line   41)
* read_init_file() (in module readline): readline --- GNU readline interface.
                                                             (line   36)
* read_lazy() (telnetlib.Telnet method): Telnet Objects.     (line   42)
* read_mime_types() (in module mimetypes): mimetypes --- Map filenames to MIME types.
                                                             (line   90)
* READ_RESTRICTED:                       Generic Attribute Management.
                                                             (line  102)
* read_sb_data() (telnetlib.Telnet method): Telnet Objects.  (line   58)
* read_some() (telnetlib.Telnet method): Telnet Objects.     (line   21)
* read_token() (shlex.shlex method):     shlex Objects.      (line   20)
* read_until() (telnetlib.Telnet method): Telnet Objects.    (line    8)
* read_very_eager() (telnetlib.Telnet method): Telnet Objects.
                                                             (line   26)
* read_very_lazy() (telnetlib.Telnet method): Telnet Objects.
                                                             (line   50)
* read_windows_registry() (mimetypes.MimeTypes method): MimeTypes Objects.
                                                             (line   83)
* Real (class in numbers):               The numeric tower.  (line   28)
* real (numbers.Complex attribute):      The numeric tower.  (line   15)
* Real Media File Format:                chunk --- Read IFF chunked data.
                                                             (line    6)
* realloc():                             Overview.           (line   33)
* realpath() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  216)
* real_quick_ratio() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line  192)
* reason (exceptions.UnicodeError attribute): Built-in Exceptions.
                                                             (line  379)
* reason (httplib.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   42)
* reason (urllib2.HTTPError attribute):  urllib2 --- extensible library for opening URLs.
                                                             (line  124)
* reason (urllib2.URLError attribute):   urllib2 --- extensible library for opening URLs.
                                                             (line  103)
* reattach() (ttk.Treeview method):      ttk Treeview.       (line  247)
* rebinding; name:                       Assignment statements.
                                                             (line    6)
* reccontrols() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   51)
* recent() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  199)
* rect() (in module cmath):              Conversions to and from polar coordinates.
                                                             (line   51)
* rectangle() (in module curses.textpad): curses textpad --- Text input widget for curses programs.
                                                             (line   17)
* recv() (asyncore.dispatcher method):   asyncore --- Asynchronous socket handler.
                                                             (line  181)
* recv() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   24)
* recv() (socket.socket method):         Socket Objects.     (line  137)
* recvfrom() (socket.socket method):     Socket Objects.     (line  149)
* recvfrom_into() (socket.socket method): Socket Objects.    (line  158)
* recv_bytes() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   62)
* recv_bytes_into() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   73)
* recv_into() (socket.socket method):    Socket Objects.     (line  170)
* redirect_request() (urllib2.HTTPRedirectHandler method): HTTPRedirectHandler Objects.
                                                             (line   11)
* redisplay() (in module readline):      readline --- GNU readline interface.
                                                             (line   96)
* redrawln() (curses.window method):     Window Objects.     (line  419)
* redrawwin() (curses.window method):    Window Objects.     (line  425)
* redraw_form() (fl.form method):        Form Objects.       (line   24)
* reduce (2to3 fixer):                   Fixers.             (line  203)
* reduce() (built-in function):          Built-in Functions. (line 1143)
* reduce() (in module functools):        functools --- Higher-order functions and operations on callable objects.
                                                             (line   66)
* ref (class in weakref):                weakref --- Weak references.
                                                             (line   79)
* reference count:                       Glossary.           (line  745)
* reference counting:                    Objects values and types.
                                                             (line   32)
* ReferenceError:                        Built-in Exceptions.
                                                             (line  258)
* ReferenceError <1>:                    weakref --- Weak references.
                                                             (line  228)
* ReferenceType (in module weakref):     weakref --- Weak references.
                                                             (line  210)
* refilemessages() (mhlib.Folder method): Folder Objects.    (line   63)
* refresh() (curses.window method):      Window Objects.     (line  430)
* RegexObject (class in re):             Regular Expression Objects.
                                                             (line    6)
* register() (abc.ABCMeta method):       abc --- Abstract Base Classes.
                                                             (line   43)
* register() (in module atexit):         atexit --- Exit handlers.
                                                             (line   35)
* register() (in module codecs):         codecs --- Codec registry and base classes.
                                                             (line   40)
* register() (in module webbrowser):     webbrowser --- Convenient Web-browser controller.
                                                             (line   84)
* register() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   74)
* register() (select.epoll method):      Edge and Level Trigger Polling epoll Objects.
                                                             (line   64)
* register() (select.poll method):       Polling Objects.    (line   15)
* registerDOMImplementation() (in module xml.dom): Module Contents<3>.
                                                             (line    8)
* registerResult() (in module unittest): Signal Handling.    (line   35)
* register_adapter() (in module sqlite3): Module functions and constants.
                                                             (line  107)
* register_archive_format() (in module shutil): Archiving operations.
                                                             (line   57)
* register_converter() (in module sqlite3): Module functions and constants.
                                                             (line   98)
* register_dialect() (in module csv):    Module Contents<2>. (line   79)
* register_error() (in module codecs):   codecs --- Codec registry and base classes.
                                                             (line  177)
* register_function() (SimpleXMLRPCServer.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line    9)
* register_function() (SimpleXMLRPCServer.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   10)
* register_instance() (SimpleXMLRPCServer.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   17)
* register_instance() (SimpleXMLRPCServer.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   18)
* register_introspection_functions() (SimpleXMLRPCServer.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   32)
* register_introspection_functions() (SimpleXMLRPCServer.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   49)
* register_multicall_functions() (SimpleXMLRPCServer.CGIXMLRPCRequestHandler method): CGIXMLRPCRequestHandler.
                                                             (line   37)
* register_multicall_functions() (SimpleXMLRPCServer.SimpleXMLRPCServer method): SimpleXMLRPCServer Objects.
                                                             (line   56)
* register_namespace() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   85)
* register_optionflag() (in module doctest): Option Flags.   (line  165)
* register_shape() (in module turtle):   Settings and special methods.
                                                             (line   69)
* REG_BINARY (in module _winreg):        Value Types.        (line    8)
* REG_DWORD (in module _winreg):         Value Types.        (line   12)
* REG_DWORD_BIG_ENDIAN (in module _winreg): Value Types.     (line   20)
* REG_DWORD_LITTLE_ENDIAN (in module _winreg): Value Types.  (line   16)
* REG_EXPAND_SZ (in module _winreg):     Value Types.        (line   24)
* REG_FULL_RESOURCE_DESCRIPTOR (in module _winreg): Value Types.
                                                             (line   46)
* REG_LINK (in module _winreg):          Value Types.        (line   29)
* REG_MULTI_SZ (in module _winreg):      Value Types.        (line   33)
* REG_NONE (in module _winreg):          Value Types.        (line   38)
* REG_RESOURCE_LIST (in module _winreg): Value Types.        (line   42)
* REG_RESOURCE_REQUIREMENTS_LIST (in module _winreg): Value Types.
                                                             (line   50)
* REG_SZ (in module _winreg):            Value Types.        (line   54)
* relative; import:                      The import statement.
                                                             (line  148)
* relative; URL:                         urlparse --- Parse URLs into components.
                                                             (line    6)
* release() (in module platform):        Cross Platform.     (line  117)
* release() (logging.Handler method):    Handler Objects.    (line   27)
* release() (thread.lock method):        thread --- Multiple threads of control.
                                                             (line  107)
* release() (threading.Condition method): Condition Objects. (line   70)
* release() (threading.Lock method):     Lock Objects.       (line   42)
* release() (threading.RLock method):    RLock Objects.      (line   40)
* release() (threading.Semaphore method): Semaphore Objects. (line   45)
* release_lock() (in module imp):        imp --- Access the import internals.
                                                             (line  125)
* reload() (built-in function):          Built-in Functions. (line 1168)
* relpath() (in module os.path):         os path --- Common pathname manipulations.
                                                             (line  224)
* remainder() (decimal.Context method):  Context objects.    (line  461)
* remainder_near() (decimal.Context method): Context objects.
                                                             (line  468)
* remainder_near() (decimal.Decimal method): Decimal objects.
                                                             (line  547)
* remove() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  207)
* remove() (collections.deque method):   deque objects.      (line   78)
* remove() (in module os):               Files and Directories.
                                                             (line  371)
* remove() (list method):                Mutable Sequence Types.
                                                             (line   13)
* remove() (mailbox.Mailbox method):     Mailbox objects.    (line   74)
* remove() (mailbox.MH method):          MH.                 (line   76)
* remove() (set method):                 Set Types --- set frozenset.
                                                             (line  204)
* remove() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line  157)
* removeAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   52)
* removeAttributeNode() (xml.dom.Element method): Element Objects<2>.
                                                             (line   57)
* removeAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   62)
* removeChild() (xml.dom.Node method):   Node Objects.       (line  128)
* removedirs() (in module os):           Files and Directories.
                                                             (line  383)
* removeFilter() (logging.Handler method): Handler Objects.  (line   48)
* removeFilter() (logging.Logger method): Logger Objects.    (line  189)
* removeHandler() (in module unittest):  Signal Handling.    (line   56)
* removeHandler() (logging.Logger method): Logger Objects.   (line  206)
* removemessages() (mhlib.Folder method): Folder Objects.    (line   59)
* removeResult() (in module unittest):   Signal Handling.    (line   48)
* remove_flag() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   84)
* remove_flag() (mailbox.mboxMessage method): mboxMessage.   (line   85)
* remove_flag() (mailbox.MMDFMessage method): MMDFMessage.   (line   84)
* remove_folder() (mailbox.Maildir method): Maildir.         (line   76)
* remove_folder() (mailbox.MH method):   MH.                 (line   47)
* remove_history_item() (in module readline): readline --- GNU readline interface.
                                                             (line   84)
* remove_label() (mailbox.BabylMessage method): BabylMessage.
                                                             (line   59)
* remove_option() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line  121)
* remove_option() (optparse.OptionParser method): Querying and manipulating your option parser.
                                                             (line   47)
* remove_pyc() (msilib.Directory method): Directory Objects. (line   45)
* remove_section() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line  130)
* remove_sequence() (mailbox.MHMessage method): MHMessage.   (line   46)
* remove_tree() (in module distutils.dir_util): distutils dir_util --- Directory tree operations.
                                                             (line   60)
* rename() (ftplib.FTP method):          FTP Objects.        (line  179)
* rename() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  204)
* rename() (in module os):               Files and Directories.
                                                             (line  397)
* renames (2to3 fixer):                  Fixers.             (line  208)
* renames() (in module os):              Files and Directories.
                                                             (line  411)
* reorganize() (in module gdbm):         gdbm --- GNU's reinterpretation of dbm.
                                                             (line  104)
* repeat() (in module itertools):        Itertool functions. (line  508)
* repeat() (in module operator):         operator --- Standard operators as functions.
                                                             (line  231)
* repeat() (in module timeit):           Python Interface.   (line   17)
* repeat() (timeit.Timer method):        Python Interface.   (line   81)
* repetition; operation:                 Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* replace() (curses.panel.Panel method): Panel Objects.      (line   38)
* replace() (datetime.date method):      date Objects.       (line  140)
* replace() (datetime.datetime method):  datetime Objects.   (line  283)
* replace() (datetime.time method):      time Objects.       (line   96)
* replace() (in module string):          Deprecated string functions.
                                                             (line  226)
* replace() (str method):                String Methods<2>.  (line  242)
* replaceChild() (xml.dom.Node method):  Node Objects.       (line  135)
* ReplacePackage() (in module modulefinder): modulefinder --- Find modules used by a script.
                                                             (line   23)
* replace_errors() (in module codecs):   codecs --- Codec registry and base classes.
                                                             (line  213)
* replace_header() (email.message.Message method): email message Representing an email message.
                                                             (line  303)
* replace_history_item() (in module readline): readline --- GNU readline interface.
                                                             (line   90)
* replace_whitespace (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  115)
* report() (filecmp.dircmp method):      The dircmp class.   (line   20)
* report() (modulefinder.ModuleFinder method): modulefinder --- Find modules used by a script.
                                                             (line   41)
* REPORTING_FLAGS (in module doctest):   Option Flags.       (line  150)
* REPORT_CDIFF (in module doctest):      Option Flags.       (line  125)
* report_failure() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   71)
* report_full_closure() (filecmp.dircmp method): The dircmp class.
                                                             (line   29)
* REPORT_NDIFF (in module doctest):      Option Flags.       (line  130)
* REPORT_ONLY_FIRST_FAILURE (in module doctest): Option Flags.
                                                             (line  139)
* report_partial_closure() (filecmp.dircmp method): The dircmp class.
                                                             (line   24)
* report_start() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   49)
* report_success() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   60)
* REPORT_UDIFF (in module doctest):      Option Flags.       (line  120)
* report_unbalanced() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  198)
* report_unexpected_exception() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line   82)
* repr (2to3 fixer):                     Fixers.             (line  212)
* Repr (class in repr):                  repr --- Alternate repr implementation.
                                                             (line   21)
* repr (module):                         repr --- Alternate repr implementation.
                                                             (line    6)
* repr() (built-in function):            Built-in Functions. (line 1236)
* repr() (in module repr):               repr --- Alternate repr implementation.
                                                             (line   35)
* repr() (repr.Repr method):             Repr Objects.       (line   50)
* repr1() (repr.Repr method):            Repr Objects.       (line   55)
* Request (class in urllib2):            urllib2 --- extensible library for opening URLs.
                                                             (line  131)
* request() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line    8)
* RequestHandlerClass (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   50)
* request_queue_size (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   76)
* request_uri() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   25)
* request_version (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   77)
* requires() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   63)
* reserved (zipfile.ZipInfo attribute):  ZipInfo Objects.    (line   73)
* reserved word:                         Keywords.           (line    6)
* RESERVED_FUTURE (in module uuid):      uuid --- UUID objects according to RFC 4122.
                                                             (line  185)
* RESERVED_MICROSOFT (in module uuid):   uuid --- UUID objects according to RFC 4122.
                                                             (line  181)
* RESERVED_NCS (in module uuid):         uuid --- UUID objects according to RFC 4122.
                                                             (line  173)
* reset() (bdb.Bdb method):              bdb --- Debugger framework.
                                                             (line   98)
* reset() (codecs.IncrementalDecoder method): IncrementalDecoder Objects.
                                                             (line   50)
* reset() (codecs.IncrementalEncoder method): IncrementalEncoder Objects.
                                                             (line   53)
* reset() (codecs.StreamReader method):  StreamReader Objects.
                                                             (line   92)
* reset() (codecs.StreamWriter method):  StreamWriter Objects.
                                                             (line   54)
* reset() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line   24)
* reset() (in module dircache):          dircache --- Cached directory listings.
                                                             (line   16)
* reset() (in module turtle):            More drawing control.
                                                             (line    6)
* reset() (in module turtle) <1>:        Window control.     (line   49)
* reset() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  162)
* reset() (pipes.Template method):       Template Objects.   (line    8)
* reset() (sgmllib.SGMLParser method):   sgmllib --- Simple SGML parser.
                                                             (line   45)
* reset() (xdrlib.Packer method):        Packer Objects.     (line   12)
* reset() (xdrlib.Unpacker method):      Unpacker Objects.   (line    8)
* reset() (xml.dom.pulldom.DOMEventStream method): DOMEventStream Objects.
                                                             (line   14)
* reset() (xml.sax.xmlreader.IncrementalParser method): IncrementalParser Objects.
                                                             (line   19)
* resetbuffer() (code.InteractiveConsole method): Interactive Console Objects.
                                                             (line   31)
* resetlocale() (in module locale):      locale --- Internationalization services.
                                                             (line  359)
* resetscreen() (in module turtle):      Window control.     (line   49)
* resetty() (in module curses):          Functions<2>.       (line  400)
* resetwarnings() (in module warnings):  Available Functions.
                                                             (line  104)
* reset_prog_mode() (in module curses):  Functions<2>.       (line  390)
* reset_shell_mode() (in module curses): Functions<2>.       (line  395)
* resize() (curses.window method):       Window Objects.     (line  449)
* resize() (in module ctypes):           Utility functions.  (line  165)
* resize() (in module mmap):             mmap --- Memory-mapped file support.
                                                             (line  199)
* resizemode() (in module turtle):       Appearance.         (line   23)
* resizeterm() (in module curses):       Functions<2>.       (line  416)
* resize_term() (in module curses):      Functions<2>.       (line  405)
* resolution (datetime.date attribute):  date Objects.       (line   64)
* resolution (datetime.datetime attribute): datetime Objects.
                                                             (line  145)
* resolution (datetime.time attribute):  time Objects.       (line   40)
* resolution (datetime.timedelta attribute): timedelta Objects.
                                                             (line   65)
* resolveEntity() (xml.sax.handler.EntityResolver method): EntityResolver Objects.
                                                             (line    6)
* resource (module):                     resource --- Resource usage information.
                                                             (line    6)
* ResourceDenied:                        test test_support --- Utility functions for tests.
                                                             (line   20)
* response() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  208)
* ResponseNotReady:                      httplib --- HTTP protocol client.
                                                             (line  157)
* responses (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  150)
* responses (in module httplib):         httplib --- HTTP protocol client.
                                                             (line  333)
* restart() (in module findertools):     findertools --- The finder's Apple Events interface.
                                                             (line   44)
* restore() (in module difflib):         difflib --- Helpers for computing deltas.
                                                             (line  264)
* RESTRICTED:                            Generic Attribute Management.
                                                             (line  102)
* restricted; execution:                 Naming and binding. (line   92)
* restype (ctypes._FuncPtr attribute):   Foreign functions.  (line   22)
* results() (trace.Trace method):        Programmatic Interface.
                                                             (line   42)
* retr() (poplib.POP3 method):           POP3 Objects.       (line   55)
* retrbinary() (ftplib.FTP method):      FTP Objects.        (line   73)
* retrieve() (urllib.URLopener method):  URL Opener objects. (line   48)
* retrlines() (ftplib.FTP method):       FTP Objects.        (line   85)
* returncode (subprocess.CalledProcessError attribute): Using the subprocess Module.
                                                             (line  141)
* returncode (subprocess.Popen attribute): Popen Objects.    (line  102)
* returns_unicode (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  131)
* return_ok() (cookielib.CookiePolicy method): CookiePolicy Objects.
                                                             (line   18)
* RETURN_VALUE (opcode):                 Python Bytecode Instructions.
                                                             (line  302)
* reverse() (array.array method):        array --- Efficient arrays of numeric values.
                                                             (line  211)
* reverse() (collections.deque method):  deque objects.      (line   85)
* reverse() (in module audioop):         audioop --- Manipulate raw audio data.
                                                             (line  179)
* reverse() (list method):               Mutable Sequence Types.
                                                             (line   13)
* reverse; quotes:                       Basic customization.
                                                             (line  119)
* reverse; quotes <1>:                   String conversions. (line    6)
* reversed() (built-in function):        Built-in Functions. (line 1250)
* reverse_order() (pstats.Stats method): The Stats Class.    (line  151)
* revert() (cookielib.FileCookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line  135)
* rewind() (aifc.aifc method):           aifc --- Read and write AIFF and AIFC files.
                                                             (line  100)
* rewind() (sunau.AU_read method):       AU_read Objects.    (line   52)
* rewind() (wave.Wave_read method):      Wave_read Objects.  (line   50)
* rewindbody() (rfc822.Message method):  Message Objects<2>. (line    8)
* RExec (class in rexec):                rexec --- Restricted execution framework.
                                                             (line   36)
* rexec (module):                        rexec --- Restricted execution framework.
                                                             (line    6)
* rfc2109 (cookielib.Cookie attribute):  Cookie Objects.     (line   67)
* rfc2109_as_netscape (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line   83)
* rfc2965 (cookielib.CookiePolicy attribute): CookiePolicy Objects.
                                                             (line   71)
* rfc822 (module):                       rfc822 --- Parse RFC 2822 mail headers.
                                                             (line    6)
* rfc822_escape() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  169)
* RFC; RFC 1014:                         xdrlib --- Encode and decode XDR data.
                                                             (line   11)
* RFC; RFC 1014 <1>:                     xdrlib --- Encode and decode XDR data.
                                                             (line   33)
* RFC; RFC 1123:                         time --- Time access and conversions.
                                                             (line  591)
* RFC; RFC 1321:                         hashlib --- Secure hashes and message digests.
                                                             (line   15)
* RFC; RFC 1321 <1>:                     md5 --- MD5 message digest algorithm.
                                                             (line    9)
* RFC; RFC 1422:                         Certificates.       (line   38)
* RFC; RFC 1521:                         base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line  160)
* RFC; RFC 1521 <1>:                     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   11)
* RFC; RFC 1521 <2>:                     quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   41)
* RFC; RFC 1522:                         quopri --- Encode and decode MIME quoted-printable data.
                                                             (line   27)
* RFC; RFC 1524:                         mailcap --- Mailcap file handling.
                                                             (line   19)
* RFC; RFC 1524 <1>:                     mailcap --- Mailcap file handling.
                                                             (line   38)
* RFC; RFC 1725:                         poplib --- POP3 protocol client.
                                                             (line   11)
* RFC; RFC 1730:                         imaplib --- IMAP4 protocol client.
                                                             (line   14)
* RFC; RFC 1738:                         urlparse --- Parse URLs into components.
                                                             (line  310)
* RFC; RFC 1750:                         Functions Constants and Exceptions.
                                                             (line  152)
* RFC; RFC 1766:                         locale --- Internationalization services.
                                                             (line  313)
* RFC; RFC 1766 <1>:                     locale --- Internationalization services.
                                                             (line  326)
* RFC; RFC 1808:                         urlparse --- Parse URLs into components.
                                                             (line   52)
* RFC; RFC 1808 <1>:                     urlparse --- Parse URLs into components.
                                                             (line  304)
* RFC; RFC 1832:                         xdrlib --- Encode and decode XDR data.
                                                             (line   37)
* RFC; RFC 1832 <1>:                     xdrlib --- Encode and decode XDR data.
                                                             (line   39)
* RFC; RFC 1866:                         htmllib --- A parser for HTML documents.
                                                             (line   19)
* RFC; RFC 1869:                         smtplib --- SMTP protocol client.
                                                             (line   13)
* RFC; RFC 1869 <1>:                     smtplib --- SMTP protocol client.
                                                             (line  133)
* RFC; RFC 1894:                         Differences from mimelib.
                                                             (line  126)
* RFC; RFC 2033:                         New and Improved Modules<2>.
                                                             (line  569)
* RFC; RFC 2045:                         email --- An email and MIME handling package.
                                                             (line   17)
* RFC; RFC 2045 <1>:                     email message Representing an email message.
                                                             (line  318)
* RFC; RFC 2045 <2>:                     email message Representing an email message.
                                                             (line  322)
* RFC; RFC 2045 <3>:                     email message Representing an email message.
                                                             (line  325)
* RFC; RFC 2045 <4>:                     email message Representing an email message.
                                                             (line  425)
* RFC; RFC 2045 <5>:                     email header Internationalized headers.
                                                             (line   17)
* RFC; RFC 2045 <6>:                     MultiFile Objects.  (line   60)
* RFC; RFC 2046:                         email --- An email and MIME handling package.
                                                             (line   17)
* RFC; RFC 2046 <1>:                     email header Internationalized headers.
                                                             (line   18)
* RFC; RFC 2047:                         email --- An email and MIME handling package.
                                                             (line   18)
* RFC; RFC 2047 <1>:                     email header Internationalized headers.
                                                             (line   18)
* RFC; RFC 2047 <2>:                     email header Internationalized headers.
                                                             (line   41)
* RFC; RFC 2047 <3>:                     email header Internationalized headers.
                                                             (line  103)
* RFC; RFC 2047 <4>:                     email header Internationalized headers.
                                                             (line  118)
* RFC; RFC 2060:                         imaplib --- IMAP4 protocol client.
                                                             (line   13)
* RFC; RFC 2060 <1>:                     IMAP4 Objects.      (line  294)
* RFC; RFC 2068:                         Cookie --- HTTP state management.
                                                             (line   21)
* RFC; RFC 2104:                         New and Improved Modules<3>.
                                                             (line   35)
* RFC; RFC 2104 <1>:                     hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   12)
* RFC; RFC 2109:                         cookielib --- Cookie handling for HTTP clients.
                                                             (line   24)
* RFC; RFC 2109 <1>:                     cookielib --- Cookie handling for HTTP clients.
                                                             (line  137)
* RFC; RFC 2109 <2>:                     Cookie --- HTTP state management.
                                                             (line   21)
* RFC; RFC 2109 <3>:                     Cookie --- HTTP state management.
                                                             (line   38)
* RFC; RFC 2109 <4>:                     Cookie --- HTTP state management.
                                                             (line   95)
* RFC; RFC 2109 <5>:                     Morsel Objects.     (line    8)
* RFC; RFC 2109 <6>:                     Morsel Objects.     (line   11)
* RFC; RFC 2231:                         email --- An email and MIME handling package.
                                                             (line   18)
* RFC; RFC 2231 <1>:                     email message Representing an email message.
                                                             (line  283)
* RFC; RFC 2231 <2>:                     email message Representing an email message.
                                                             (line  392)
* RFC; RFC 2231 <3>:                     email message Representing an email message.
                                                             (line  400)
* RFC; RFC 2231 <4>:                     email message Representing an email message.
                                                             (line  432)
* RFC; RFC 2231 <5>:                     email header Internationalized headers.
                                                             (line   18)
* RFC; RFC 2231 <6>:                     email utils Miscellaneous utilities.
                                                             (line  109)
* RFC; RFC 2231 <7>:                     email utils Miscellaneous utilities.
                                                             (line  113)
* RFC; RFC 2231 <8>:                     email utils Miscellaneous utilities.
                                                             (line  122)
* RFC; RFC 2231 <9>:                     email utils Miscellaneous utilities.
                                                             (line  129)
* RFC; RFC 2231 <10>:                    email utils Miscellaneous utilities.
                                                             (line  138)
* RFC; RFC 2231 <11>:                    Package History.    (line   51)
* RFC; RFC 2342:                         New and Improved Modules<3>.
                                                             (line   93)
* RFC; RFC 2368:                         urlparse --- Parse URLs into components.
                                                             (line  300)
* RFC; RFC 2396:                         urlparse --- Parse URLs into components.
                                                             (line  187)
* RFC; RFC 2396 <1>:                     urlparse --- Parse URLs into components.
                                                             (line  295)
* RFC; RFC 2487:                         New and Improved Modules<3>.
                                                             (line   85)
* RFC; RFC 2616:                         wsgiref util -- WSGI environment utilities.
                                                             (line  112)
* RFC; RFC 2616 <1>:                     URL Opener objects. (line   96)
* RFC; RFC 2616 <2>:                     HTTPRedirectHandler Objects.
                                                             (line    8)
* RFC; RFC 2616 <3>:                     HTTPRedirectHandler Objects.
                                                             (line   24)
* RFC; RFC 2616 <4>:                     Introduction<14>.   (line   33)
* RFC; RFC 2732:                         New and Improved Modules.
                                                             (line  643)
* RFC; RFC 2732 <1>:                     urlparse --- Parse URLs into components.
                                                             (line  291)
* RFC; RFC 2774:                         httplib --- HTTP protocol client.
                                                             (line  330)
* RFC; RFC 2817:                         httplib --- HTTP protocol client.
                                                             (line  306)
* RFC; RFC 2821:                         email --- An email and MIME handling package.
                                                             (line   13)
* RFC; RFC 2822:                         New and Improved Modules<3>.
                                                             (line   97)
* RFC; RFC 2822 <1>:                     time --- Time access and conversions.
                                                             (line  348)
* RFC; RFC 2822 <2>:                     time --- Time access and conversions.
                                                             (line  592)
* RFC; RFC 2822 <3>:                     email --- An email and MIME handling package.
                                                             (line    9)
* RFC; RFC 2822 <4>:                     email --- An email and MIME handling package.
                                                             (line   17)
* RFC; RFC 2822 <5>:                     email message Representing an email message.
                                                             (line   13)
* RFC; RFC 2822 <6>:                     email message Representing an email message.
                                                             (line  171)
* RFC; RFC 2822 <7>:                     Parser class API.   (line   45)
* RFC; RFC 2822 <8>:                     email generator Generating MIME documents.
                                                             (line   50)
* RFC; RFC 2822 <9>:                     email generator Generating MIME documents.
                                                             (line   63)
* RFC; RFC 2822 <10>:                    email header Internationalized headers.
                                                             (line    6)
* RFC; RFC 2822 <11>:                    email header Internationalized headers.
                                                             (line    9)
* RFC; RFC 2822 <12>:                    email header Internationalized headers.
                                                             (line   17)
* RFC; RFC 2822 <13>:                    email header Internationalized headers.
                                                             (line   76)
* RFC; RFC 2822 <14>:                    email header Internationalized headers.
                                                             (line  102)
* RFC; RFC 2822 <15>:                    email header Internationalized headers.
                                                             (line  117)
* RFC; RFC 2822 <16>:                    email errors Exception and Defect classes.
                                                             (line   22)
* RFC; RFC 2822 <17>:                    email errors Exception and Defect classes.
                                                             (line   28)
* RFC; RFC 2822 <18>:                    email errors Exception and Defect classes.
                                                             (line   29)
* RFC; RFC 2822 <19>:                    email errors Exception and Defect classes.
                                                             (line   35)
* RFC; RFC 2822 <20>:                    email utils Miscellaneous utilities.
                                                             (line   53)
* RFC; RFC 2822 <21>:                    email utils Miscellaneous utilities.
                                                             (line   56)
* RFC; RFC 2822 <22>:                    email utils Miscellaneous utilities.
                                                             (line  159)
* RFC; RFC 2822 <23>:                    email utils Miscellaneous utilities.
                                                             (line   81)
* RFC; RFC 2822 <24>:                    email utils Miscellaneous utilities.
                                                             (line  103)
* RFC; RFC 2822 <25>:                    Message objects.    (line   17)
* RFC; RFC 2822 <26>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   12)
* RFC; RFC 2822 <27>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  152)
* RFC; RFC 2822 <28>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  155)
* RFC; RFC 2822 <29>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   15)
* RFC; RFC 2822 <30>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   16)
* RFC; RFC 2822 <31>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   58)
* RFC; RFC 2822 <32>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   91)
* RFC; RFC 2822 <33>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   94)
* RFC; RFC 2822 <34>:                    rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  110)
* RFC; RFC 2822 <35>:                    Message Objects<2>. (line   16)
* RFC; RFC 2822 <36>:                    SMTPServer Objects. (line   22)
* RFC; RFC 2964:                         cookielib --- Cookie handling for HTTP clients.
                                                             (line  150)
* RFC; RFC 2965:                         urllib2 --- extensible library for opening URLs.
                                                             (line  161)
* RFC; RFC 2965 <1>:                     Request Objects.    (line   88)
* RFC; RFC 2965 <2>:                     cookielib --- Cookie handling for HTTP clients.
                                                             (line   23)
* RFC; RFC 2965 <3>:                     cookielib --- Cookie handling for HTTP clients.
                                                             (line  141)
* RFC; RFC 3207:                         New and Improved Modules<2>.
                                                             (line  574)
* RFC; RFC 3229:                         httplib --- HTTP protocol client.
                                                             (line  219)
* RFC; RFC 3280:                         SSLSocket Objects.  (line   58)
* RFC; RFC 3454:                         stringprep --- Internet String Preparation.
                                                             (line   15)
* RFC; RFC 3490:                         Python Specific Encodings.
                                                             (line   21)
* RFC; RFC 3490 <1>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line    8)
* RFC; RFC 3490 <2>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   27)
* RFC; RFC 3490 <3>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   56)
* RFC; RFC 3490 <4>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   61)
* RFC; RFC 3492:                         Python Specific Encodings.
                                                             (line   34)
* RFC; RFC 3492 <1>:                     encodings idna --- Internationalized Domain Names in Applications.
                                                             (line    9)
* RFC; RFC 3493:                         socket --- Low-level networking interface.
                                                             (line   22)
* RFC; RFC 3548:                         base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line    6)
* RFC; RFC 3548 <1>:                     base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   80)
* RFC; RFC 3986:                         New and Improved Modules.
                                                             (line  622)
* RFC; RFC 3986 <1>:                     Porting to Python 2 7.
                                                             (line   80)
* RFC; RFC 3986 <2>:                     urlparse --- Parse URLs into components.
                                                             (line  283)
* RFC; RFC 4122:                         New Improved and Removed Modules.
                                                             (line  416)
* RFC; RFC 4122 <1>:                     New Improved and Removed Modules.
                                                             (line  421)
* RFC; RFC 4122 <2>:                     uuid --- UUID objects according to RFC 4122.
                                                             (line   11)
* RFC; RFC 4122 <3>:                     uuid --- UUID objects according to RFC 4122.
                                                             (line  179)
* RFC; RFC 4122 <4>:                     uuid --- UUID objects according to RFC 4122.
                                                             (line  192)
* RFC; RFC 4158:                         Certificates.       (line   83)
* RFC; RFC 4217:                         ftplib --- FTP protocol client.
                                                             (line   54)
* RFC; RFC 4627:                         json --- JSON encoder and decoder.
                                                             (line    8)
* RFC; RFC 4627 <1>:                     Standard Compliance.
                                                             (line    6)
* RFC; RFC 821:                          smtplib --- SMTP protocol client.
                                                             (line   13)
* RFC; RFC 821 <1>:                      smtplib --- SMTP protocol client.
                                                             (line  128)
* RFC; RFC 822:                          New and Improved Modules<3>.
                                                             (line   97)
* RFC; RFC 822 <1>:                      ConfigParser --- Configuration file parser.
                                                             (line   36)
* RFC; RFC 822 <2>:                      time --- Time access and conversions.
                                                             (line  586)
* RFC; RFC 822 <3>:                      time --- Time access and conversions.
                                                             (line  589)
* RFC; RFC 822 <4>:                      email header Internationalized headers.
                                                             (line    7)
* RFC; RFC 822 <5>:                      rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  151)
* RFC; RFC 822 <6>:                      rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  154)
* RFC; RFC 822 <7>:                      rfc822 --- Parse RFC 2822 mail headers.
                                                             (line  157)
* RFC; RFC 822 <8>:                      HTTPConnection Objects.
                                                             (line   74)
* RFC; RFC 822 <9>:                      SMTP Objects.       (line   91)
* RFC; RFC 822 <10>:                     SMTP Objects.       (line  151)
* RFC; RFC 822 <11>:                     SMTP Objects.       (line  152)
* RFC; RFC 822 <12>:                     SMTP Example.       (line   10)
* RFC; RFC 822 <13>:                     The GNUTranslations class.
                                                             (line   14)
* RFC; RFC 822 <14>:                     distutils util --- Miscellaneous other utility functions.
                                                             (line  171)
* RFC; RFC 854:                          telnetlib --- Telnet client.
                                                             (line   11)
* RFC; RFC 854 <1>:                      telnetlib --- Telnet client.
                                                             (line   49)
* RFC; RFC 959:                          ftplib --- FTP protocol client.
                                                             (line   15)
* RFC; RFC 977:                          nntplib --- NNTP protocol client.
                                                             (line   13)
* RFC_4122 (in module uuid):             uuid --- UUID objects according to RFC 4122.
                                                             (line  177)
* rfile (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   88)
* rfind() (in module mmap):              mmap --- Memory-mapped file support.
                                                             (line  205)
* rfind() (in module string):            Deprecated string functions.
                                                             (line   78)
* rfind() (str method):                  String Methods<2>.  (line  248)
* RGBColor (class in aetypes):           aetypes --- AppleEvent objects.
                                                             (line   77)
* rgb_to_hls() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   36)
* rgb_to_hsv() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   44)
* rgb_to_yiq() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   28)
* right (filecmp.dircmp attribute):      The dircmp class.   (line   46)
* right() (in module turtle):            Turtle motion.      (line   38)
* RIGHTSHIFT (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* RIGHTSHIFTEQUAL (in module token):     token --- Constants used with Python parse trees.
                                                             (line   40)
* right_list (filecmp.dircmp attribute): The dircmp class.   (line   55)
* right_only (filecmp.dircmp attribute): The dircmp class.   (line   68)
* rindex() (in module string):           Deprecated string functions.
                                                             (line   87)
* rindex() (str method):                 String Methods<2>.  (line  255)
* rjust() (in module string):            Deprecated string functions.
                                                             (line  209)
* rjust() (str method):                  String Methods<2>.  (line  260)
* rlcompleter (module):                  rlcompleter --- Completion function for GNU readline.
                                                             (line    6)
* rlecode_hqx() (in module binascii):    binascii --- Convert between binary and ASCII.
                                                             (line   76)
* rledecode_hqx() (in module binascii):  binascii --- Convert between binary and ASCII.
                                                             (line   67)
* RLIMIT_AS (in module resource):        Resource Limits.    (line  117)
* RLIMIT_CORE (in module resource):      Resource Limits.    (line   62)
* RLIMIT_CPU (in module resource):       Resource Limits.    (line   69)
* RLIMIT_DATA (in module resource):      Resource Limits.    (line   82)
* RLIMIT_FSIZE (in module resource):     Resource Limits.    (line   77)
* RLIMIT_MEMLOCK (in module resource):   Resource Limits.    (line  109)
* RLIMIT_NOFILE (in module resource):    Resource Limits.    (line  100)
* RLIMIT_NPROC (in module resource):     Resource Limits.    (line   96)
* RLIMIT_OFILE (in module resource):     Resource Limits.    (line  105)
* RLIMIT_RSS (in module resource):       Resource Limits.    (line   91)
* RLIMIT_STACK (in module resource):     Resource Limits.    (line   86)
* RLIMIT_VMEM (in module resource):      Resource Limits.    (line  113)
* RLIM_INFINITY (in module resource):    Resource Limits.    (line   20)
* RLock (class in multiprocessing):      Synchronization primitives.
                                                             (line   41)
* RLock() (in module threading):         threading --- Higher-level threading interface.
                                                             (line  108)
* RLock() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  163)
* rmd() (ftplib.FTP method):             FTP Objects.        (line  202)
* rmdir() (in module os):                Files and Directories.
                                                             (line  425)
* RMFF:                                  chunk --- Read IFF chunked data.
                                                             (line    6)
* rms() (in module audioop):             audioop --- Manipulate raw audio data.
                                                             (line  184)
* rmtree() (in module shutil):           Directory and files operations.
                                                             (line  103)
* rnopen() (in module bsddb):            bsddb --- Interface to Berkeley DB library.
                                                             (line   77)
* RO:                                    Generic Attribute Management.
                                                             (line  102)
* RobotFileParser (class in robotparser): robotparser --- Parser for robots txt.
                                                             (line   17)
* robotparser (module):                  robotparser --- Parser for robots txt.
                                                             (line    6)
* robots.txt:                            robotparser --- Parser for robots txt.
                                                             (line    6)
* rollback() (sqlite3.Connection method): Connection Objects.
                                                             (line   32)
* rotate() (collections.deque method):   deque objects.      (line   92)
* rotate() (decimal.Context method):     Context objects.    (line  474)
* rotate() (decimal.Decimal method):     Decimal objects.    (line  566)
* RotatingFileHandler (class in logging.handlers): RotatingFileHandler.
                                                             (line    9)
* ROT_FOUR (opcode):                     Python Bytecode Instructions.
                                                             (line   30)
* ROT_THREE (opcode):                    Python Bytecode Instructions.
                                                             (line   25)
* ROT_TWO (opcode):                      Python Bytecode Instructions.
                                                             (line   21)
* round() (built-in function):           Built-in Functions. (line 1262)
* Rounded (class in decimal):            Signals.            (line   78)
* Row (class in sqlite3):                Row Objects.        (line    6)
* rowcount (sqlite3.Cursor attribute):   Cursor Objects.     (line  165)
* row_factory (sqlite3.Connection attribute): Connection Objects.
                                                             (line  255)
* RPAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* rpartition() (str method):             String Methods<2>.  (line  269)
* rpc_paths (SimpleXMLRPCServer.SimpleXMLRPCRequestHandler attribute): SimpleXMLRPCServer Objects.
                                                             (line   60)
* rpop() (poplib.POP3 method):           POP3 Objects.       (line   39)
* rset() (poplib.POP3 method):           POP3 Objects.       (line   67)
* rshift() (in module operator):         operator --- Standard operators as functions.
                                                             (line  158)
* rsplit() (in module string):           Deprecated string functions.
                                                             (line  124)
* rsplit() (str method):                 String Methods<2>.  (line  279)
* RSQB (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* rstrip() (in module string):           Deprecated string functions.
                                                             (line  169)
* rstrip() (str method):                 String Methods<2>.  (line  290)
* rt() (in module turtle):               Turtle motion.      (line   38)
* RTLD_LAZY (in module dl):              dl --- Call C functions in shared objects.
                                                             (line   35)
* RTLD_NOW (in module dl):               dl --- Call C functions in shared objects.
                                                             (line   39)
* ruler (cmd.Cmd attribute):             Cmd Objects.        (line  157)
* Run script:                            Edit menu.          (line   94)
* run() (bdb.Bdb method):                bdb --- Debugger framework.
                                                             (line  346)
* run() (distutils.cmd.Command method):  Creating a new Distutils command.
                                                             (line   40)
* run() (doctest.DocTestRunner method):  DocTestRunner objects.
                                                             (line   96)
* run() (hotshot.Profile method):        Profile Objects.    (line   20)
* run() (in module pdb):                 pdb --- The Python Debugger.
                                                             (line   75)
* run() (in module profile):             profile and cProfile Module Reference.
                                                             (line    9)
* run() (multiprocessing.Process method): Process and exceptions.
                                                             (line   30)
* run() (pdb.Pdb method):                pdb --- The Python Debugger.
                                                             (line  143)
* run() (profile.Profile method):        profile and cProfile Module Reference.
                                                             (line   85)
* run() (sched.scheduler method):        Scheduler Objects.  (line   38)
* run() (threading.Thread method):       Thread Objects.     (line   88)
* run() (trace.Trace method):            Programmatic Interface.
                                                             (line   22)
* run() (unittest.TestCase method):      Test cases.         (line   87)
* run() (unittest.TestSuite method):     Grouping tests.     (line   41)
* run() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line   66)
* runcall() (bdb.Bdb method):            bdb --- Debugger framework.
                                                             (line  363)
* runcall() (hotshot.Profile method):    Profile Objects.    (line   26)
* runcall() (in module pdb):             pdb --- The Python Debugger.
                                                             (line   94)
* runcall() (pdb.Pdb method):            pdb --- The Python Debugger.
                                                             (line  143)
* runcall() (profile.Profile method):    profile and cProfile Module Reference.
                                                             (line   94)
* runcode() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   33)
* runctx() (bdb.Bdb method):             bdb --- Debugger framework.
                                                             (line  358)
* runctx() (hotshot.Profile method):     Profile Objects.    (line   33)
* runctx() (in module profile):          profile and cProfile Module Reference.
                                                             (line   23)
* runctx() (profile.Profile method):     profile and cProfile Module Reference.
                                                             (line   89)
* runctx() (trace.Trace method):         Programmatic Interface.
                                                             (line   29)
* runeval() (bdb.Bdb method):            bdb --- Debugger framework.
                                                             (line  352)
* runeval() (in module pdb):             pdb --- The Python Debugger.
                                                             (line   87)
* runeval() (pdb.Pdb method):            pdb --- The Python Debugger.
                                                             (line  143)
* runfunc() (trace.Trace method):        Programmatic Interface.
                                                             (line   36)
* runpy (module):                        runpy --- Locating and executing Python modules.
                                                             (line    6)
* runsource() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line    6)
* RuntimeError:                          Built-in Exceptions.
                                                             (line  269)
* runtimemodel (in module MacOS):        MacOS --- Access to Mac OS interpreter features.
                                                             (line   15)
* RuntimeWarning:                        Built-in Exceptions.
                                                             (line  474)
* runtime_library_dir_option() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  231)
* run_docstring_examples() (in module doctest): Basic API.   (line  142)
* run_module() (in module runpy):        runpy --- Locating and executing Python modules.
                                                             (line   19)
* run_path() (in module runpy):          runpy --- Locating and executing Python modules.
                                                             (line   76)
* run_script() (modulefinder.ModuleFinder method): modulefinder --- Find modules used by a script.
                                                             (line   47)
* run_setup() (in module distutils.core): distutils core --- Core Distutils functionality.
                                                             (line  121)
* run_unittest() (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   77)
* RUSAGE_BOTH (in module resource):      Resource Usage.     (line  113)
* RUSAGE_CHILDREN (in module resource):  Resource Usage.     (line  108)
* RUSAGE_SELF (in module resource):      Resource Usage.     (line  103)
* r_eval() (rexec.RExec method):         RExec Objects.      (line    8)
* r_exec() (rexec.RExec method):         RExec Objects.      (line   15)
* r_execfile() (rexec.RExec method):     RExec Objects.      (line   21)
* r_import() (rexec.RExec method):       RExec Objects.      (line   51)
* R_OK (in module os):                   Files and Directories.
                                                             (line   55)
* r_open() (rexec.RExec method):         RExec Objects.      (line   56)
* r_reload() (rexec.RExec method):       RExec Objects.      (line   66)
* r_unload() (rexec.RExec method):       RExec Objects.      (line   71)
* S (in module re):                      Module Contents.    (line   69)
* SafeConfigParser (class in ConfigParser): ConfigParser --- Configuration file parser.
                                                             (line  124)
* saferepr() (in module pprint):         pprint --- Data pretty printer.
                                                             (line  121)
* safe_substitute() (string.Template method): Template strings.
                                                             (line   44)
* samefile() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  237)
* sameopenfile() (in module os.path):    os path --- Common pathname manipulations.
                                                             (line  246)
* samestat() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  253)
* same_files (filecmp.dircmp attribute): The dircmp class.   (line   86)
* same_quantum() (decimal.Context method): Context objects.  (line  478)
* same_quantum() (decimal.Decimal method): Decimal objects.  (line  580)
* sample() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  169)
* save() (cookielib.FileCookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   98)
* SaveKey() (in module _winreg):         _winreg -- Windows registry access.
                                                             (line  346)
* savetty() (in module curses):          Functions<2>.       (line  423)
* save_bgn() (htmllib.HTMLParser method): HTMLParser Objects.
                                                             (line   44)
* save_end() (htmllib.HTMLParser method): HTMLParser Objects.
                                                             (line   51)
* SAX2DOM (class in xml.dom.pulldom):    xml dom pulldom --- Support for building partial DOM trees.
                                                             (line   28)
* SAXException:                          xml sax --- Support for SAX2 parsers.
                                                             (line   70)
* SAXNotRecognizedException:             xml sax --- Support for SAX2 parsers.
                                                             (line   95)
* SAXNotSupportedException:              xml sax --- Support for SAX2 parsers.
                                                             (line  102)
* SAXParseException:                     xml sax --- Support for SAX2 parsers.
                                                             (line   87)
* scale() (in module imageop):           imageop --- Manipulate raw image data.
                                                             (line   31)
* scaleb() (decimal.Context method):     Context objects.    (line  482)
* scaleb() (decimal.Decimal method):     Decimal objects.    (line  585)
* scalebarvalues() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   34)
* scanf():                               Simulating scanf.   (line    6)
* sched (module):                        sched --- Event scheduler.
                                                             (line    6)
* scheduler (class in sched):            sched --- Event scheduler.
                                                             (line   13)
* schema (in module msilib):             Precomputed tables. (line   10)
* sci() (in module fpformat):            fpformat --- Floating point conversions.
                                                             (line   30)
* scope:                                 Naming and binding. (line    6)
* scope <1>:                             Naming and binding. (line   28)
* Scrap Manager:                         Carbon Scrap --- Scrap Manager.
                                                             (line   10)
* Screen (class in turtle):              The public classes of the module turtle.
                                                             (line   28)
* screensize() (in module turtle):       Window control.     (line   59)
* script_from_examples() (in module doctest): Debugging.     (line   75)
* scroll() (curses.window method):       Window Objects.     (line  457)
* scrollbars() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line    9)
* scrollbar_callback() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   27)
* ScrolledCanvas (class in turtle):      The public classes of the module turtle.
                                                             (line   32)
* ScrolledText (module):                 ScrolledText --- Scrolled Text Widget.
                                                             (line    6)
* scrollok() (curses.window method):     Window Objects.     (line  461)
* search() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  213)
* search() (in module re):               Module Contents.    (line  102)
* search() (re.RegexObject method):      Regular Expression Objects.
                                                             (line   11)
* SEARCH_ERROR (in module imp):          imp --- Access the import internals.
                                                             (line  164)
* second (datetime.datetime attribute):  datetime Objects.   (line  173)
* second (datetime.time attribute):      time Objects.       (line   56)
* sections() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line   12)
* section_divider() (multifile.MultiFile method): MultiFile Objects.
                                                             (line   74)
* secure (cookielib.Cookie attribute):   Cookie Objects.     (line   44)
* Secure Hash Algorithm:                 sha --- SHA-1 message digest algorithm.
                                                             (line    8)
* secure hash algorithm, SHA1, SHA224, SHA256, SHA384, SHA512: hashlib --- Secure hashes and message digests.
                                                             (line    8)
* Secure Sockets Layer:                  ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* see() (ttk.Treeview method):           ttk Treeview.       (line  251)
* seed() (in module random):             random --- Generate pseudo-random numbers.
                                                             (line   75)
* seek() (bz2.BZ2File method):           De compression of files.
                                                             (line   75)
* seek() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line   85)
* seek() (file method):                  File Objects.       (line  151)
* seek() (in module mmap):               mmap --- Memory-mapped file support.
                                                             (line  213)
* seek() (io.IOBase method):             I/O Base Classes.   (line  103)
* seek() (io.TextIOBase method):         Text I/O.           (line   68)
* seek() (multifile.MultiFile method):   MultiFile Objects.  (line   27)
* seekable() (io.IOBase method):         I/O Base Classes.   (line  122)
* SEEK_CUR (in module os):               File Descriptor Operations.
                                                             (line  158)
* SEEK_CUR (in module posixfile):        posixfile --- File-like objects with locking support.
                                                             (line   28)
* SEEK_END (in module os):               File Descriptor Operations.
                                                             (line  158)
* SEEK_END (in module posixfile):        posixfile --- File-like objects with locking support.
                                                             (line   32)
* SEEK_SET (in module os):               File Descriptor Operations.
                                                             (line  158)
* SEEK_SET (in module posixfile):        posixfile --- File-like objects with locking support.
                                                             (line   24)
* segcountproc (C type):                 Buffer Object Structures.
                                                             (line   96)
* Select (class in Tix):                 Basic Widgets.      (line   60)
* select (module):                       select --- Waiting for I/O completion.
                                                             (line    6)
* select() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  229)
* select() (in module gl):               gl --- Graphics Library interface.
                                                             (line  100)
* select() (in module select):           select --- Waiting for I/O completion.
                                                             (line   58)
* select() (ttk.Notebook method):        ttk Notebook.       (line   53)
* selection() (ttk.Treeview method):     ttk Treeview.       (line  259)
* selection_add() (ttk.Treeview method): ttk Treeview.       (line  269)
* selection_remove() (ttk.Treeview method): ttk Treeview.    (line  273)
* selection_set() (ttk.Treeview method): ttk Treeview.       (line  265)
* selection_toggle() (ttk.Treeview method): ttk Treeview.    (line  277)
* Semaphore (class in multiprocessing):  Synchronization primitives.
                                                             (line   45)
* Semaphore (class in threading):        Semaphore Objects.  (line   16)
* Semaphore() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  168)
* semaphores, binary:                    thread --- Multiple threads of control.
                                                             (line   12)
* SEMI (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* send() (aetools.TalkTo method):        aetools --- OSA client support.
                                                             (line   71)
* send() (asyncore.dispatcher method):   asyncore --- Asynchronous socket handler.
                                                             (line  177)
* send() (generator method):             Generator-iterator methods.
                                                             (line   29)
* send() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   89)
* send() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  236)
* send() (logging.handlers.DatagramHandler method): DatagramHandler.
                                                             (line   30)
* send() (logging.handlers.SocketHandler method): SocketHandler.
                                                             (line   54)
* send() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   15)
* send() (socket.socket method):         Socket Objects.     (line  181)
* sendall() (socket.socket method):      Socket Objects.     (line  192)
* sendcmd() (ftplib.FTP method):         FTP Objects.        (line   61)
* sendfile() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  240)
* sendmail() (smtplib.SMTP method):      SMTP Objects.       (line  148)
* sendto() (socket.socket method):       Socket Objects.     (line  202)
* send_bytes() (multiprocessing.Connection method): Connection Objects<2>.
                                                             (line   51)
* send_error() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  175)
* send_flowing_data() (formatter.writer method): The Writer Interface.
                                                             (line   76)
* send_header() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  191)
* send_hor_rule() (formatter.writer method): The Writer Interface.
                                                             (line   68)
* send_label_data() (formatter.writer method): The Writer Interface.
                                                             (line   92)
* send_line_break() (formatter.writer method): The Writer Interface.
                                                             (line   54)
* send_literal_data() (formatter.writer method): The Writer Interface.
                                                             (line   83)
* send_paragraph() (formatter.writer method): The Writer Interface.
                                                             (line   58)
* send_response() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  183)
* send_signal() (subprocess.Popen method): Popen Objects.    (line   43)
* sep (in module os):                    Miscellaneous System Information.
                                                             (line   84)
* Separator() (in module FrameWork):     FrameWork --- Interactive application framework.
                                                             (line   70)
* sequence:                              Glossary.           (line  762)
* Sequence (class in collections):       Collections Abstract Base Classes.
                                                             (line   96)
* sequence (in module msilib):           Precomputed tables. (line   16)
* sequence2st() (in module parser):      Creating ST Objects.
                                                             (line   26)
* sequence; item:                        Subscriptions.      (line    6)
* sequence; iteration:                   Iterator Types.     (line    8)
* sequenceIncludes() (in module operator): operator --- Standard operators as functions.
                                                             (line  238)
* SequenceMatcher (class in difflib):    difflib --- Helpers for computing deltas.
                                                             (line   14)
* SequenceMatcher (class in difflib) <1>: SequenceMatcher Objects.
                                                             (line    8)
* SerialCookie (class in Cookie):        Cookie --- HTTP state management.
                                                             (line   57)
* serializing; objects:                  pickle --- Python object serialization.
                                                             (line    6)
* server (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   65)
* ServerProxy (class in xmlrpclib):      xmlrpclib --- XML-RPC client access.
                                                             (line   28)
* server_activate() (SocketServer.BaseServer method): Server Objects.
                                                             (line  135)
* server_address (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   55)
* server_bind() (SocketServer.BaseServer method): Server Objects.
                                                             (line  141)
* server_software (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  144)
* server_version (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  102)
* server_version (SimpleHTTPServer.SimpleHTTPRequestHandler attribute): SimpleHTTPServer --- Simple HTTP request handler.
                                                             (line   31)
* serve_forever() (SocketServer.BaseServer method): Server Objects.
                                                             (line   30)
* set (built-in class):                  Set Types --- set frozenset.
                                                             (line   35)
* Set (class in collections):            Collections Abstract Base Classes.
                                                             (line  101)
* Set (class in sets):                   sets --- Unordered collections of unique elements.
                                                             (line   40)
* Set Breakpoint:                        Edit context menu.  (line   29)
* set() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line  101)
* set() (ConfigParser.SafeConfigParser method): SafeConfigParser Objects.
                                                             (line    9)
* set() (Cookie.Morsel method):          Morsel Objects.     (line   50)
* set() (EasyDialogs.ProgressBar method): ProgressBar Objects.
                                                             (line   50)
* set() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   69)
* set() (test.test_support.EnvironmentVarGuard method): test test_support --- Utility functions for tests.
                                                             (line  269)
* set() (threading.Event method):        Event Objects.      (line   24)
* set() (ttk.Combobox method):           ttk Combobox.       (line   19)
* set() (ttk.Treeview method):           ttk Treeview.       (line  281)
* set() (xml.etree.ElementTree.Element method): Element Objects.
                                                             (line   75)
* set; display:                          Set displays.       (line    6)
* setacl() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  240)
* setannotation() (imaplib.IMAP4 method): IMAP4 Objects.     (line  245)
* setarrowcursor() (in module FrameWork): FrameWork --- Interactive application framework.
                                                             (line  100)
* setattr() (built-in function):         Built-in Functions. (line 1292)
* setAttribute() (xml.dom.Element method): Element Objects<2>.
                                                             (line   67)
* setAttributeNode() (xml.dom.Element method): Element Objects<2>.
                                                             (line   71)
* setAttributeNodeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   79)
* setAttributeNS() (xml.dom.Element method): Element Objects<2>.
                                                             (line   87)
* SetBase() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   22)
* setblocking() (socket.socket method):  Socket Objects.     (line  213)
* setByteStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   36)
* setcbreak() (in module tty):           tty --- Terminal control functions.
                                                             (line   20)
* setCharacterStream() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   55)
* setcheckinterval() (in module sys):    sys --- System-specific parameters and functions.
                                                             (line  851)
* setcheckinterval() (in module sys) <1>: Thread State and the Global Interpreter Lock.
                                                             (line   15)
* setcomptype() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line  155)
* setcomptype() (sunau.AU_write method): AU_write Objects.   (line   26)
* setcomptype() (wave.Wave_write method): Wave_write Objects.
                                                             (line   31)
* setContentHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   23)
* setcontext() (in module decimal):      Context objects.    (line   18)
* setcontext() (mhlib.MH method):        MH Objects.         (line   24)
* SetCreatorAndType() (in module MacOS): MacOS --- Access to Mac OS interpreter features.
                                                             (line   72)
* setcurrent() (mhlib.Folder method):    Folder Objects.     (line   33)
* setDaemon() (threading.Thread method): Thread Objects.     (line  175)
* setdefault() (dict method):            Mapping Types --- dict.
                                                             (line  229)
* setdefaultencoding() (in module sys):  sys --- System-specific parameters and functions.
                                                             (line  862)
* setdefaulttimeout() (in module socket): socket --- Low-level networking interface.
                                                             (line  520)
* setdlopenflags() (in module sys):      sys --- System-specific parameters and functions.
                                                             (line  873)
* setDocumentLocator() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   10)
* setDTDHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   32)
* setegid() (in module os):              Process Parameters. (line  203)
* setEncoding() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   22)
* setEntityResolver() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   41)
* setErrorHandler() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   52)
* seteuid() (in module os):              Process Parameters. (line  209)
* setFeature() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   74)
* setfirstweekday() (in module calendar): calendar --- General calendar-related functions.
                                                             (line  198)
* setfmt() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  115)
* setFormatter() (logging.Handler method): Handler Objects.  (line   40)
* setframerate() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line  145)
* setframerate() (sunau.AU_write method): AU_write Objects.  (line   17)
* setframerate() (wave.Wave_write method): Wave_write Objects.
                                                             (line   22)
* setgid() (in module os):               Process Parameters. (line  215)
* setgroups() (in module os):            Process Parameters. (line  221)
* seth() (in module turtle):             Turtle motion.      (line  125)
* setheading() (in module turtle):       Turtle motion.      (line  125)
* SetInteger() (msilib.Record method):   Record Objects.     (line   32)
* setitem() (in module operator):        operator --- Standard operators as functions.
                                                             (line  244)
* setitimer() (in module signal):        signal --- Set handlers for asynchronous events.
                                                             (line  157)
* setlast() (mhlib.Folder method):       Folder Objects.     (line   45)
* setLevel() (logging.Handler method):   Handler Objects.    (line   31)
* setLevel() (logging.Logger method):    Logger Objects.     (line   49)
* setliteral() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line   56)
* setlocale() (in module locale):        locale --- Internationalization services.
                                                             (line   23)
* setLocale() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   58)
* setLoggerClass() (in module logging):  Module-Level Functions.
                                                             (line  240)
* setlogmask() (in module syslog):       syslog --- Unix syslog library routines.
                                                             (line   57)
* setmark() (aifc.aifc method):          aifc --- Read and write AIFF and AIFC files.
                                                             (line  172)
* setMaxConns() (urllib2.CacheFTPHandler method): CacheFTPHandler Objects.
                                                             (line   13)
* setmode() (in module msvcrt):          File Operations.    (line   35)
* setName() (threading.Thread method):   Thread Objects.     (line  132)
* setnchannels() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line  137)
* setnchannels() (sunau.AU_write method): AU_write Objects.  (line    9)
* setnchannels() (wave.Wave_write method): Wave_write Objects.
                                                             (line   14)
* setnframes() (aifc.aifc method):       aifc --- Read and write AIFF and AIFC files.
                                                             (line  149)
* setnframes() (sunau.AU_write method):  AU_write Objects.   (line   21)
* setnframes() (wave.Wave_write method): Wave_write Objects. (line   26)
* setnomoretags() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line   50)
* setoption() (in module jpeg):          jpeg --- Read and write JPEG files.
                                                             (line   43)
* SetParamEntityParsing() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   56)
* setparameters() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  179)
* setparams() (aifc.aifc method):        aifc --- Read and write AIFF and AIFC files.
                                                             (line  164)
* setparams() (in module al):            al --- Audio functions on the SGI.
                                                             (line   55)
* setparams() (sunau.AU_write method):   AU_write Objects.   (line   31)
* setparams() (wave.Wave_write method):  Wave_write Objects. (line   36)
* setpassword() (zipfile.ZipFile method): ZipFile Objects.   (line  149)
* setpath() (in module fm):              fm --- Font Manager interface.
                                                             (line   40)
* setpgid() (in module os):              Process Parameters. (line  246)
* setpgrp() (in module os):              Process Parameters. (line  238)
* setpos() (aifc.aifc method):           aifc --- Read and write AIFF and AIFC files.
                                                             (line  105)
* setpos() (in module turtle):           Turtle motion.      (line   70)
* setpos() (sunau.AU_read method):       AU_read Objects.    (line   59)
* setpos() (wave.Wave_read method):      Wave_read Objects.  (line   68)
* setposition() (in module turtle):      Turtle motion.      (line   70)
* setprofile() (in module sys):          sys --- System-specific parameters and functions.
                                                             (line  888)
* setprofile() (in module threading):    threading --- Higher-level threading interface.
                                                             (line  161)
* SetProperty() (msilib.SummaryInformation method): Summary Information Objects.
                                                             (line   22)
* setProperty() (xml.sax.xmlreader.XMLReader method): XMLReader Objects.
                                                             (line   88)
* setPublicId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line    6)
* setquota() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  252)
* setraw() (in module tty):              tty --- Terminal control functions.
                                                             (line   14)
* setrecursionlimit() (in module sys):   sys --- System-specific parameters and functions.
                                                             (line  902)
* setregid() (in module os):             Process Parameters. (line  254)
* setresgid() (in module os):            Process Parameters. (line  260)
* setresuid() (in module os):            Process Parameters. (line  268)
* setreuid() (in module os):             Process Parameters. (line  276)
* setrlimit() (in module resource):      Resource Limits.    (line   31)
* sets (module):                         sets --- Unordered collections of unique elements.
                                                             (line    6)
* setsampwidth() (aifc.aifc method):     aifc --- Read and write AIFF and AIFC files.
                                                             (line  141)
* setsampwidth() (sunau.AU_write method): AU_write Objects.  (line   13)
* setsampwidth() (wave.Wave_write method): Wave_write Objects.
                                                             (line   18)
* setscrreg() (curses.window method):    Window Objects.     (line  471)
* setsid() (in module os):               Process Parameters. (line  291)
* setslice() (in module operator):       operator --- Standard operators as functions.
                                                             (line  249)
* setsockopt() (socket.socket method):   Socket Objects.     (line  272)
* setstate() (in module random):         random --- Generate pseudo-random numbers.
                                                             (line   99)
* SetStream() (msilib.Record method):    Record Objects.     (line   26)
* SetString() (msilib.Record method):    Record Objects.     (line   21)
* setSystemId() (xml.sax.xmlreader.InputSource method): InputSource Objects.
                                                             (line   14)
* setsyx() (in module curses):           Functions<2>.       (line  428)
* setTarget() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   60)
* settiltangle() (in module turtle):     Appearance.         (line   97)
* settimeout() (socket.socket method):   Socket Objects.     (line  225)
* setTimeout() (urllib2.CacheFTPHandler method): CacheFTPHandler Objects.
                                                             (line    9)
* settrace() (in module sys):            sys --- System-specific parameters and functions.
                                                             (line  913)
* settrace() (in module threading):      threading --- Higher-level threading interface.
                                                             (line  152)
* settscdump() (in module sys):          sys --- System-specific parameters and functions.
                                                             (line  991)
* settypecreator() (ic.IC method):       IC Objects.         (line   69)
* settypecreator() (in module ic):       ic --- Access to the Mac OS X Internet Config.
                                                             (line   37)
* setuid() (in module os):               Process Parameters. (line  298)
* setundobuffer() (in module turtle):    Special Turtle methods.
                                                             (line   61)
* setup() (in module distutils.core):    distutils core --- Core Distutils functionality.
                                                             (line   12)
* setup() (in module turtle):            Methods specific to Screen not inherited from TurtleScreen.
                                                             (line   20)
* setup() (SocketServer.RequestHandler method): RequestHandler Objects.
                                                             (line   36)
* setUp() (unittest.TestCase method):    Test cases.         (line   38)
* setUpClass() (unittest.TestCase method): Test cases.       (line   59)
* setupterm() (in module curses):        Functions<2>.       (line  433)
* setup_environ() (wsgiref.handlers.BaseHandler method): wsgiref handlers -- server/gateway base classes.
                                                             (line  161)
* SETUP_EXCEPT (opcode):                 Python Bytecode Instructions.
                                                             (line  506)
* SETUP_FINALLY (opcode):                Python Bytecode Instructions.
                                                             (line  511)
* SETUP_LOOP (opcode):                   Python Bytecode Instructions.
                                                             (line  501)
* setup_testing_defaults() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   68)
* SETUP_WITH (opcode):                   Python Bytecode Instructions.
                                                             (line  338)
* SetValue() (in module _winreg):        _winreg -- Windows registry access.
                                                             (line  367)
* SetValueEx() (in module _winreg):      _winreg -- Windows registry access.
                                                             (line  395)
* setvbuf():                             File Objects<2>.    (line  124)
* setwatchcursor() (in module FrameWork): FrameWork --- Interactive application framework.
                                                             (line   96)
* setworldcoordinates() (in module turtle): Window control.  (line   86)
* setx() (in module turtle):             Turtle motion.      (line   99)
* sety() (in module turtle):             Turtle motion.      (line  112)
* set_all():                             Reference Count Details.
                                                             (line   98)
* set_allowed_domains() (cookielib.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   70)
* set_app() (wsgiref.simple_server.WSGIServer method): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   61)
* set_authorizer() (sqlite3.Connection method): Connection Objects.
                                                             (line  169)
* set_blocked_domains() (cookielib.DefaultCookiePolicy method): DefaultCookiePolicy Objects.
                                                             (line   56)
* set_boundary() (email.message.Message method): email message Representing an email message.
                                                             (line  483)
* set_break() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  273)
* set_charset() (email.message.Message method): email message Representing an email message.
                                                             (line  127)
* set_children() (ttk.Treeview method):  ttk Treeview.       (line   25)
* set_completer() (in module readline):  readline --- GNU readline interface.
                                                             (line  120)
* set_completer_delims() (in module readline): readline --- GNU readline interface.
                                                             (line  150)
* set_completion_display_matches_hook() (in module readline): readline --- GNU readline interface.
                                                             (line  158)
* set_continue() (bdb.Bdb method):       bdb --- Debugger framework.
                                                             (line  258)
* set_conversion_mode() (in module ctypes): Utility functions.
                                                             (line  173)
* set_cookie() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   64)
* set_cookie_if_ok() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   60)
* set_current() (msilib.Feature method): Features.           (line   14)
* set_date() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   97)
* set_debug() (in module gc):            gc --- Garbage Collector interface.
                                                             (line   49)
* set_debuglevel() (ftplib.FTP method):  FTP Objects.        (line   13)
* set_debuglevel() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   30)
* set_debuglevel() (nntplib.NNTP method): NNTP Objects.      (line   18)
* set_debuglevel() (poplib.POP3 method): POP3 Objects.       (line   11)
* set_debuglevel() (smtplib.SMTP method): SMTP Objects.      (line    8)
* set_debuglevel() (telnetlib.Telnet method): Telnet Objects.
                                                             (line   84)
* set_defaults() (argparse.ArgumentParser method): Parser defaults.
                                                             (line    6)
* set_defaults() (optparse.OptionParser method): Other methods.
                                                             (line   27)
* set_default_type() (email.message.Message method): email message Representing an email message.
                                                             (line  354)
* set_errno() (in module ctypes):        Utility functions.  (line  187)
* set_event_call_back() (in module fl):  Functions Defined in Module fl.
                                                             (line   27)
* set_executable() (in module multiprocessing): Miscellaneous<2>.
                                                             (line   49)
* set_executables() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  236)
* set_flags() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   72)
* set_flags() (mailbox.mboxMessage method): mboxMessage.     (line   72)
* set_flags() (mailbox.MMDFMessage method): MMDFMessage.     (line   71)
* set_form_position() (fl.form method):  Form Objects.       (line   28)
* set_from() (mailbox.mboxMessage method): mboxMessage.      (line   53)
* set_from() (mailbox.MMDFMessage method): MMDFMessage.      (line   52)
* set_graphics_mode() (in module fl):    Functions Defined in Module fl.
                                                             (line   31)
* set_history_length() (in module readline): readline --- GNU readline interface.
                                                             (line   63)
* set_include_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  104)
* set_info() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line  108)
* set_labels() (mailbox.BabylMessage method): BabylMessage.  (line   51)
* set_last_error() (in module ctypes):   Utility functions.  (line  195)
* set_libraries() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  129)
* set_library_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  145)
* SET_LINENO (opcode):                   Python Bytecode Instructions.
                                                             (line  552)
* set_link_objects() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  188)
* set_literal (2to3 fixer):              Fixers.             (line  216)
* set_location() (bsddb.bsddbobject method): Hash BTree and Record Objects.
                                                             (line   30)
* set_next() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  240)
* set_nonstandard_attr() (cookielib.Cookie method): Cookie Objects.
                                                             (line  104)
* set_ok() (cookielib.CookiePolicy method): CookiePolicy Objects.
                                                             (line    9)
* set_option_negotiation_callback() (telnetlib.Telnet method): Telnet Objects.
                                                             (line  137)
* set_output_charset() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   94)
* set_param() (email.message.Message method): email message Representing an email message.
                                                             (line  417)
* set_pasv() (ftplib.FTP method):        FTP Objects.        (line   98)
* set_payload() (email.message.Message method): email message Representing an email message.
                                                             (line  118)
* set_policy() (cookielib.CookieJar method): CookieJar and FileCookieJar Objects.
                                                             (line   48)
* set_position() (xdrlib.Unpacker method): Unpacker Objects. (line   16)
* set_pre_input_hook() (in module readline): readline --- GNU readline interface.
                                                             (line  111)
* set_progress_handler() (sqlite3.Connection method): Connection Objects.
                                                             (line  193)
* set_proxy() (urllib2.Request method):  Request Objects.    (line   80)
* set_python_build() (in module distutils.sysconfig): distutils sysconfig --- System configuration information.
                                                             (line   99)
* set_quit() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  263)
* set_recsrc() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   86)
* set_return() (bdb.Bdb method):         bdb --- Debugger framework.
                                                             (line  244)
* set_runtime_library_dirs() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  156)
* set_seq1() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   43)
* set_seq2() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   48)
* set_seqs() (difflib.SequenceMatcher method): SequenceMatcher Objects.
                                                             (line   33)
* set_sequences() (mailbox.MH method):   MH.                 (line   58)
* set_sequences() (mailbox.MHMessage method): MHMessage.     (line   37)
* set_server_documentation() (DocXMLRPCServer.DocCGIXMLRPCRequestHandler method): DocCGIXMLRPCRequestHandler.
                                                             (line   24)
* set_server_documentation() (DocXMLRPCServer.DocXMLRPCServer method): DocXMLRPCServer Objects.
                                                             (line   24)
* set_server_name() (DocXMLRPCServer.DocCGIXMLRPCRequestHandler method): DocCGIXMLRPCRequestHandler.
                                                             (line   18)
* set_server_name() (DocXMLRPCServer.DocXMLRPCServer method): DocXMLRPCServer Objects.
                                                             (line   18)
* set_server_title() (DocXMLRPCServer.DocCGIXMLRPCRequestHandler method): DocCGIXMLRPCRequestHandler.
                                                             (line   13)
* set_server_title() (DocXMLRPCServer.DocXMLRPCServer method): DocXMLRPCServer Objects.
                                                             (line   13)
* set_spacing() (formatter.formatter method): The Formatter Interface.
                                                             (line  139)
* set_startup_hook() (in module readline): readline --- GNU readline interface.
                                                             (line  103)
* set_step() (bdb.Bdb method):           bdb --- Debugger framework.
                                                             (line  236)
* set_subdir() (mailbox.MaildirMessage method): MaildirMessage.
                                                             (line   58)
* set_terminator() (asynchat.async_chat method): asynchat --- Asynchronous socket command/response handler.
                                                             (line  111)
* set_threshold() (in module gc):        gc --- Garbage Collector interface.
                                                             (line   67)
* set_trace() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  253)
* set_trace() (in module bdb):           bdb --- Debugger framework.
                                                             (line  387)
* set_trace() (in module pdb):           pdb --- The Python Debugger.
                                                             (line  101)
* set_trace() (pdb.Pdb method):          pdb --- The Python Debugger.
                                                             (line  143)
* set_tunnel() (httplib.HTTPConnection method): HTTPConnection Objects.
                                                             (line   36)
* set_type() (email.message.Message method): email message Representing an email message.
                                                             (line  448)
* set_unittest_reportflags() (in module doctest): Unittest API.
                                                             (line  185)
* set_unixfrom() (email.message.Message method): email message Representing an email message.
                                                             (line   71)
* set_until() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  248)
* set_url() (robotparser.RobotFileParser method): robotparser --- Parser for robots txt.
                                                             (line   22)
* set_usage() (optparse.OptionParser method): Other methods. (line    8)
* set_userptr() (curses.panel.Panel method): Panel Objects.  (line   42)
* set_visible() (mailbox.BabylMessage method): BabylMessage. (line   68)
* set_wakeup_fd() (in module signal):    signal --- Set handlers for asynchronous events.
                                                             (line  186)
* SF_APPEND (in module stat):            stat --- Interpreting stat results.
                                                             (line  320)
* SF_ARCHIVED (in module stat):          stat --- Interpreting stat results.
                                                             (line  312)
* SF_IMMUTABLE (in module stat):         stat --- Interpreting stat results.
                                                             (line  316)
* SF_NOUNLINK (in module stat):          stat --- Interpreting stat results.
                                                             (line  324)
* SF_SNAPSHOT (in module stat):          stat --- Interpreting stat results.
                                                             (line  328)
* SGML:                                  sgmllib --- Simple SGML parser.
                                                             (line    9)
* sgmllib (module):                      sgmllib --- Simple SGML parser.
                                                             (line    6)
* SGMLParseError:                        sgmllib --- Simple SGML parser.
                                                             (line   36)
* SGMLParser (class in sgmllib):         sgmllib --- Simple SGML parser.
                                                             (line   17)
* SGMLParser (in module sgmllib):        htmllib --- A parser for HTML documents.
                                                             (line    9)
* sha (module):                          sha --- SHA-1 message digest algorithm.
                                                             (line    6)
* Shape (class in turtle):               The public classes of the module turtle.
                                                             (line   40)
* shape (memoryview attribute):          memoryview type.    (line   93)
* shape() (in module turtle):            Appearance.         (line    6)
* shapesize() (in module turtle):        Appearance.         (line   51)
* shared_object_filename() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  475)
* Shelf (class in shelve):               Restrictions.       (line   23)
* shelve (module):                       shelve --- Python object persistence.
                                                             (line    6)
* shift() (decimal.Context method):      Context objects.    (line  487)
* shift() (decimal.Decimal method):      Decimal objects.    (line  593)
* shifting; operation:                   Shifting operations.
                                                             (line    6)
* shifting; operations:                  Bitwise Operations on Integer Types.
                                                             (line    6)
* shift_path_info() (in module wsgiref.util): wsgiref util -- WSGI environment utilities.
                                                             (line   38)
* shlex (class in shlex):                shlex --- Simple lexical analysis.
                                                             (line   40)
* shlex (module):                        shlex --- Simple lexical analysis.
                                                             (line    6)
* shortDescription() (unittest.TestCase method): Test cases. (line  592)
* shouldFlush() (logging.handlers.BufferingHandler method): MemoryHandler.
                                                             (line   34)
* shouldFlush() (logging.handlers.MemoryHandler method): MemoryHandler.
                                                             (line   64)
* shouldStop (unittest.TestResult attribute): Loading and running tests.
                                                             (line  206)
* show() (curses.panel.Panel method):    Panel Objects.      (line   48)
* showsyntaxerror() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   44)
* showtraceback() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   53)
* showturtle() (in module turtle):       Visibility.         (line   15)
* showwarning() (in module warnings):    Available Functions.
                                                             (line   56)
* show_choice() (in module fl):          Functions Defined in Module fl.
                                                             (line   49)
* show_compilers() (in module distutils.ccompiler): distutils ccompiler --- CCompiler base class.
                                                             (line   63)
* show_file_selector() (in module fl):   Functions Defined in Module fl.
                                                             (line   62)
* show_form() (fl.form method):          Form Objects.       (line   16)
* show_input() (in module fl):           Functions Defined in Module fl.
                                                             (line   55)
* show_message() (in module fl):         Functions Defined in Module fl.
                                                             (line   40)
* show_question() (in module fl):        Functions Defined in Module fl.
                                                             (line   44)
* shuffle() (in module random):          random --- Generate pseudo-random numbers.
                                                             (line  158)
* shutdown() (imaplib.IMAP4 method):     IMAP4 Objects.      (line  259)
* shutdown() (in module findertools):    findertools --- The finder's Apple Events interface.
                                                             (line   48)
* shutdown() (in module logging):        Module-Level Functions.
                                                             (line  233)
* shutdown() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   66)
* shutdown() (socket.socket method):     Socket Objects.     (line  282)
* shutdown() (SocketServer.BaseServer method): Server Objects.
                                                             (line   37)
* shutil (module):                       shutil --- High-level file operations.
                                                             (line    6)
* SIGINT:                                Exception Handling. (line  348)
* SIGINT <1>:                            Exception Handling. (line  360)
* siginterrupt() (in module signal):     signal --- Set handlers for asynchronous events.
                                                             (line  202)
* signal (module):                       signal --- Set handlers for asynchronous events.
                                                             (line    6)
* signal() (in module signal):           signal --- Set handlers for asynchronous events.
                                                             (line  217)
* SIG_DFL (in module signal):            signal --- Set handlers for asynchronous events.
                                                             (line   54)
* SIG_IGN (in module signal):            signal --- Set handlers for asynchronous events.
                                                             (line   61)
* Simple Mail Transfer Protocol:         smtplib --- SMTP protocol client.
                                                             (line    6)
* simple; statement:                     Simple statements.  (line    6)
* SimpleCookie (class in Cookie):        Cookie --- HTTP state management.
                                                             (line   51)
* simplefilter() (in module warnings):   Available Functions.
                                                             (line   95)
* SimpleHandler (class in wsgiref.handlers): wsgiref handlers -- server/gateway base classes.
                                                             (line   41)
* SimpleHTTPRequestHandler (class in SimpleHTTPServer): SimpleHTTPServer --- Simple HTTP request handler.
                                                             (line   17)
* SimpleHTTPServer (module):             SimpleHTTPServer --- Simple HTTP request handler.
                                                             (line    6)
* SimpleXMLRPCRequestHandler (class in SimpleXMLRPCServer): SimpleXMLRPCServer --- Basic XML-RPC server.
                                                             (line   61)
* SimpleXMLRPCServer (class in SimpleXMLRPCServer): SimpleXMLRPCServer --- Basic XML-RPC server.
                                                             (line   22)
* SimpleXMLRPCServer (module):           SimpleXMLRPCServer --- Basic XML-RPC server.
                                                             (line    6)
* sin() (in module cmath):               Trigonometric functions<2>.
                                                             (line   32)
* sin() (in module math):                Trigonometric functions.
                                                             (line   37)
* singleton; tuple:                      The standard type hierarchy.
                                                             (line  192)
* sinh() (in module cmath):              Hyperbolic functions<2>.
                                                             (line   36)
* sinh() (in module math):               Hyperbolic functions.
                                                             (line   28)
* site (module):                         site --- Site-specific configuration hook.
                                                             (line    6)
* site command line option; –user-base:  site --- Site-specific configuration hook.
                                                             (line  174)
* site command line option; –user-site:  site --- Site-specific configuration hook.
                                                             (line  178)
* site-packages; directory:              site --- Site-specific configuration hook.
                                                             (line   17)
* site-python; directory:                site --- Site-specific configuration hook.
                                                             (line   17)
* size (struct.Struct attribute):        Classes<2>.         (line   46)
* size (tarfile.TarInfo attribute):      TarInfo Objects.    (line   49)
* size() (ftplib.FTP method):            FTP Objects.        (line  206)
* size() (in module mmap):               mmap --- Memory-mapped file support.
                                                             (line  221)
* Sized (class in collections):          Collections Abstract Base Classes.
                                                             (line   76)
* sizeof() (in module ctypes):           Utility functions.  (line  203)
* SKIP (in module doctest):              Option Flags.       (line  100)
* skip() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line  107)
* skip() (in module unittest):           Skipping tests and expected failures.
                                                             (line   76)
* skipIf() (in module unittest):         Skipping tests and expected failures.
                                                             (line   81)
* skipinitialspace (csv.Dialect attribute): Dialects and Formatting Parameters.
                                                             (line   66)
* skipped (unittest.TestResult attribute): Loading and running tests.
                                                             (line  188)
* skippedEntity() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  176)
* SkipTest:                              Skipping tests and expected failures.
                                                             (line   94)
* skipTest() (unittest.TestCase method): Test cases.         (line   98)
* skipUnless() (in module unittest):     Skipping tests and expected failures.
                                                             (line   85)
* SLASH (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* SLASHEQUAL (in module token):          token --- Constants used with Python parse trees.
                                                             (line   40)
* slave() (nntplib.NNTP method):         NNTP Objects.       (line  149)
* sleep() (in module findertools):       findertools --- The finder's Apple Events interface.
                                                             (line   39)
* sleep() (in module time):              time --- Time access and conversions.
                                                             (line  204)
* slice:                                 Slicings.           (line    6)
* slice <1>:                             Glossary.           (line  774)
* slice() (built-in function):           Built-in Functions. (line 1301)
* SLICE+0 (opcode):                      Python Bytecode Instructions.
                                                             (line  189)
* SLICE+1 (opcode):                      Python Bytecode Instructions.
                                                             (line  193)
* SLICE+2 (opcode):                      Python Bytecode Instructions.
                                                             (line  197)
* SLICE+3 (opcode):                      Python Bytecode Instructions.
                                                             (line  201)
* slice; assignment:                     Mutable Sequence Types.
                                                             (line   13)
* slice; operation:                      Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* SliceType (in module types):           types --- Names for built-in types.
                                                             (line  162)
* SliceType (in module types) <1>:       Slice Objects.      (line    8)
* slicing:                               The standard type hierarchy.
                                                             (line  131)
* slicing <1>:                           The standard type hierarchy.
                                                             (line  203)
* slicing <2>:                           Slicings.           (line    6)
* slicing; assignment:                   Assignment statements.
                                                             (line  113)
* SmartCookie (class in Cookie):         Cookie --- HTTP state management.
                                                             (line   69)
* SMTP (class in smtplib):               smtplib --- SMTP protocol client.
                                                             (line   16)
* SMTP; protocol:                        smtplib --- SMTP protocol client.
                                                             (line    6)
* SMTPAuthenticationError:               smtplib --- SMTP protocol client.
                                                             (line  120)
* SMTPConnectError:                      smtplib --- SMTP protocol client.
                                                             (line  111)
* smtpd (module):                        smtpd --- SMTP Server.
                                                             (line    6)
* SMTPDataError:                         smtplib --- SMTP protocol client.
                                                             (line  107)
* SMTPException:                         smtplib --- SMTP protocol client.
                                                             (line   75)
* SMTPHandler (class in logging.handlers): SMTPHandler.      (line   10)
* SMTPHeloError:                         smtplib --- SMTP protocol client.
                                                             (line  116)
* smtplib (module):                      smtplib --- SMTP protocol client.
                                                             (line    6)
* SMTPRecipientsRefused:                 smtplib --- SMTP protocol client.
                                                             (line  100)
* SMTPResponseException:                 smtplib --- SMTP protocol client.
                                                             (line   86)
* SMTPSenderRefused:                     smtplib --- SMTP protocol client.
                                                             (line   94)
* SMTPServer (class in smtpd):           SMTPServer Objects. (line    6)
* SMTPServerDisconnected:                smtplib --- SMTP protocol client.
                                                             (line   80)
* SMTP_SSL (class in smtplib):           smtplib --- SMTP protocol client.
                                                             (line   39)
* sndhdr (module):                       sndhdr --- Determine type of sound file.
                                                             (line    6)
* SND_ALIAS (in module winsound):        winsound --- Sound-playing interface for Windows.
                                                             (line   49)
* SND_ASYNC (in module winsound):        winsound --- Sound-playing interface for Windows.
                                                             (line  111)
* SND_FILENAME (in module winsound):     winsound --- Sound-playing interface for Windows.
                                                             (line   44)
* SND_LOOP (in module winsound):         winsound --- Sound-playing interface for Windows.
                                                             (line   90)
* SND_MEMORY (in module winsound):       winsound --- Sound-playing interface for Windows.
                                                             (line   96)
* SND_NODEFAULT (in module winsound):    winsound --- Sound-playing interface for Windows.
                                                             (line  115)
* SND_NOSTOP (in module winsound):       winsound --- Sound-playing interface for Windows.
                                                             (line  120)
* SND_NOWAIT (in module winsound):       winsound --- Sound-playing interface for Windows.
                                                             (line  124)
* SND_PURGE (in module winsound):        winsound --- Sound-playing interface for Windows.
                                                             (line  105)
* sniff() (csv.Sniffer method):          Module Contents<2>. (line  185)
* Sniffer (class in csv):                Module Contents<2>. (line  178)
* socket (module):                       socket --- Low-level networking interface.
                                                             (line    6)
* socket (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   63)
* socket() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  265)
* socket() (in module socket):           select --- Waiting for I/O completion.
                                                             (line   86)
* socket() (in module socket) <1>:       socket --- Low-level networking interface.
                                                             (line  377)
* SocketHandler (class in logging.handlers): SocketHandler.  (line   10)
* socketpair() (in module socket):       socket --- Low-level networking interface.
                                                             (line  387)
* SocketServer (module):                 SocketServer --- A framework for network servers.
                                                             (line    6)
* SocketType (in module socket):         socket --- Low-level networking interface.
                                                             (line  529)
* socket_type (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   85)
* SOCK_DGRAM (in module socket):         socket --- Low-level networking interface.
                                                             (line  152)
* SOCK_RAW (in module socket):           socket --- Low-level networking interface.
                                                             (line  152)
* SOCK_RDM (in module socket):           socket --- Low-level networking interface.
                                                             (line  152)
* SOCK_SEQPACKET (in module socket):     socket --- Low-level networking interface.
                                                             (line  152)
* SOCK_STREAM (in module socket):        socket --- Low-level networking interface.
                                                             (line  152)
* softspace (file attribute):            File Objects.       (line  271)
* softspace (file attribute) <1>:        File Objects<2>.    (line  146)
* SOMAXCONN (in module socket):          socket --- Low-level networking interface.
                                                             (line  162)
* sort() (imaplib.IMAP4 method):         IMAP4 Objects.      (line  269)
* sort() (list method):                  Mutable Sequence Types.
                                                             (line   13)
* sorted() (built-in function):          Built-in Functions. (line 1317)
* sortTestMethodsUsing (unittest.TestLoader attribute): Loading and running tests.
                                                             (line  133)
* sort_stats() (pstats.Stats method):    The Stats Class.    (line   68)
* source (doctest.Example attribute):    Example Objects.    (line   19)
* source (shlex.shlex attribute):        shlex Objects.      (line  148)
* source character set:                  Encoding declarations.
                                                             (line    6)
* sourcehook() (shlex.shlex method):     shlex Objects.      (line   26)
* space:                                 Indentation.        (line    6)
* span() (re.MatchObject method):        Match Objects.      (line  145)
* spawn() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  489)
* spawn() (in module pty):               pty --- Pseudo-terminal utilities.
                                                             (line   32)
* spawnl() (in module os):               Process Management. (line  322)
* spawnle() (in module os):              Process Management. (line  322)
* spawnlp() (in module os):              Process Management. (line  322)
* spawnlpe() (in module os):             Process Management. (line  322)
* spawnv() (in module os):               Process Management. (line  322)
* spawnve() (in module os):              Process Management. (line  322)
* spawnvp() (in module os):              Process Management. (line  322)
* spawnvpe() (in module os):             Process Management. (line  322)
* special method:                        Glossary.           (line  783)
* special; attribute:                    The standard type hierarchy.
                                                             (line   12)
* specified_attributes (xml.parsers.expat.xmlparser attribute): XMLParser Objects<2>.
                                                             (line  143)
* speed() (in module turtle):            Turtle motion.      (line  290)
* speed() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  130)
* splash() (in module MacOS):            MacOS --- Access to Mac OS interpreter features.
                                                             (line   97)
* split() (in module os.path):           os path --- Common pathname manipulations.
                                                             (line  263)
* split() (in module re):                Module Contents.    (line  127)
* split() (in module shlex):             shlex --- Simple lexical analysis.
                                                             (line   21)
* split() (in module string):            Deprecated string functions.
                                                             (line  103)
* split() (re.RegexObject method):       Regular Expression Objects.
                                                             (line   60)
* split() (str method):                  String Methods<2>.  (line  305)
* splitdrive() (in module os.path):      os path --- Common pathname manipulations.
                                                             (line  276)
* splitext() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  286)
* splitfields() (in module string):      Deprecated string functions.
                                                             (line  137)
* splitlines() (str method):             String Methods<2>.  (line  330)
* SplitResult (class in urlparse):       Results of urlparse and urlsplit.
                                                             (line   52)
* splitunc() (in module os.path):        os path --- Common pathname manipulations.
                                                             (line  296)
* split_quoted() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  103)
* SpooledTemporaryFile() (in module tempfile): tempfile --- Generate temporary files and directories.
                                                             (line   80)
* sprintf-style formatting:              String Formatting Operations.
                                                             (line    6)
* spwd (module):                         spwd --- The shadow password database.
                                                             (line    6)
* sqlite3 (module):                      sqlite3 --- DB-API 2 0 interface for SQLite databases.
                                                             (line    6)
* sqlite_version (in module sqlite3):    Module functions and constants.
                                                             (line   16)
* sqlite_version_info (in module sqlite3): Module functions and constants.
                                                             (line   20)
* sqrt() (decimal.Context method):       Context objects.    (line  491)
* sqrt() (decimal.Decimal method):       Decimal objects.    (line  606)
* sqrt() (in module cmath):              Power and logarithmic functions<2>.
                                                             (line   24)
* sqrt() (in module math):               Power and logarithmic functions.
                                                             (line   64)
* SSL:                                   ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* ssl (module):                          ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* ssl() (imaplib.IMAP4_SSL method):      IMAP4 Objects.      (line  351)
* SSLError:                              Functions Constants and Exceptions.
                                                             (line    6)
* ssl_version (ftplib.FTP_TLS attribute): FTP_TLS Objects.   (line    9)
* st() (in module turtle):               Visibility.         (line   15)
* st2list() (in module parser):          Converting ST Objects.
                                                             (line   11)
* st2tuple() (in module parser):         Converting ST Objects.
                                                             (line   31)
* stack viewer:                          Debug menu.         (line   26)
* stack() (in module inspect):           The interpreter stack.
                                                             (line   70)
* stack; trace:                          The standard type hierarchy.
                                                             (line  729)
* stackable; streams:                    codecs --- Codec registry and base classes.
                                                             (line    6)
* stack_size() (in module thread):       thread --- Multiple threads of control.
                                                             (line   71)
* stack_size() (in module threading):    threading --- Higher-level threading interface.
                                                             (line  170)
* stamp() (in module turtle):            Turtle motion.      (line  228)
* Standard C:                            String literals.    (line   49)
* standard input:                        Complete Python programs.
                                                             (line   25)
* standard; output:                      Expression statements.
                                                             (line   18)
* standard; output <1>:                  The print statement.
                                                             (line   31)
* StandardError:                         Built-in Exceptions.
                                                             (line   72)
* standarderror (2to3 fixer):            Fixers.             (line  221)
* standard_b64decode() (in module base64): base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   51)
* standard_b64encode() (in module base64): base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   47)
* standend() (curses.window method):     Window Objects.     (line  476)
* standout() (curses.window method):     Window Objects.     (line  481)
* STAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* STAREQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* starmap() (in module itertools):       Itertool functions. (line  531)
* start (exceptions.UnicodeError attribute): Built-in Exceptions.
                                                             (line  387)
* start (slice object attribute):        The standard type hierarchy.
                                                             (line  764)
* start (slice object attribute) <1>:    Slicings.           (line   44)
* start() (hotshot.Profile method):      Profile Objects.    (line   38)
* start() (multiprocessing.managers.BaseManager method): Managers.
                                                             (line   39)
* start() (multiprocessing.Process method): Process and exceptions.
                                                             (line   40)
* start() (re.MatchObject method):       Match Objects.      (line  119)
* start() (threading.Thread method):     Thread Objects.     (line   77)
* start() (ttk.Progressbar method):      ttk Progressbar.    (line    8)
* start() (xml.etree.ElementTree.TreeBuilder method): TreeBuilder Objects.
                                                             (line   30)
* startbody() (MimeWriter.MimeWriter method): MimeWriter Objects.
                                                             (line   23)
* StartCdataSectionHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  333)
* StartDoctypeDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  219)
* startDocument() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   32)
* startElement() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   82)
* StartElementHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  257)
* startElementNS() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line  102)
* startfile() (in module os):            Process Management. (line  433)
* STARTF_USESHOWWINDOW (in module subprocess): Constants<4>. (line   33)
* STARTF_USESTDHANDLES (in module subprocess): Constants<4>. (line   27)
* startmultipartbody() (MimeWriter.MimeWriter method): MimeWriter Objects.
                                                             (line   32)
* StartNamespaceDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  312)
* startPrefixMapping() (xml.sax.handler.ContentHandler method): ContentHandler Objects.
                                                             (line   49)
* startswith() (str method):             String Methods<2>.  (line  346)
* startTest() (unittest.TestResult method): Loading and running tests.
                                                             (line  258)
* startTestRun() (unittest.TestResult method): Loading and running tests.
                                                             (line  267)
* starttls() (smtplib.SMTP method):      SMTP Objects.       (line  120)
* STARTUPINFO (class in subprocess):     Windows Popen Helpers.
                                                             (line    9)
* start_color() (in module curses):      Functions<2>.       (line  441)
* start_component() (msilib.Directory method): Directory Objects.
                                                             (line   20)
* start_new_thread() (in module thread): thread --- Multiple threads of control.
                                                             (line   36)
* stat (module):                         stat --- Interpreting stat results.
                                                             (line    6)
* stat() (in module os):                 Files and Directories.
                                                             (line  434)
* stat() (nntplib.NNTP method):          NNTP Objects.       (line  110)
* stat() (poplib.POP3 method):           POP3 Objects.       (line   44)
* state() (ttk.Widget method):           ttk Widget.         (line   26)
* statement:                             Glossary.           (line  790)
* statement grouping:                    Indentation.        (line    6)
* statement; *:                          Arbitrary Argument Lists.
                                                             (line    6)
* statement; * <1>:                      Function definitions.
                                                             (line   74)
* statement; **:                         Unpacking Argument Lists.
                                                             (line   19)
* statement; ** <1>:                     Function definitions.
                                                             (line   74)
* statement; @:                          Function definitions.
                                                             (line   33)
* statement; assert:                     The assert statement.
                                                             (line    6)
* statement; assert <1>:                 Built-in Exceptions.
                                                             (line  125)
* statement; assignment, augmented:      Augmented assignment statements.
                                                             (line    6)
* statement; break:                      The break statement.
                                                             (line    6)
* statement; break <1>:                  The while statement.
                                                             (line   18)
* statement; break <2>:                  The for statement.  (line   22)
* statement; break <3>:                  The try statement.  (line   69)
* statement; break <4>:                  The try statement.  (line   96)
* statement; class:                      Class definitions.  (line    6)
* statement; continue:                   The continue statement.
                                                             (line    6)
* statement; continue <1>:               The while statement.
                                                             (line   18)
* statement; continue <2>:               The for statement.  (line   22)
* statement; continue <3>:               The try statement.  (line   69)
* statement; continue <4>:               The try statement.  (line   96)
* statement; def:                        Function definitions.
                                                             (line    6)
* statement; del:                        Basic customization.
                                                             (line   50)
* statement; del <1>:                    The del statement<2>.
                                                             (line    6)
* statement; del <2>:                    Mutable Sequence Types.
                                                             (line   13)
* statement; del <3>:                    Mapping Types --- dict.
                                                             (line    6)
* statement; except:                     Built-in Exceptions.
                                                             (line   11)
* statement; exec:                       The global statement.
                                                             (line   28)
* statement; exec <1>:                   The exec statement. (line    6)
* statement; exec <2>:                   Code Objects.       (line   14)
* statement; for:                        for Statements.     (line    6)
* statement; for <1>:                    for Statements.     (line    6)
* statement; for <2>:                    The break statement.
                                                             (line    6)
* statement; for <3>:                    The continue statement.
                                                             (line    6)
* statement; for <4>:                    The for statement.  (line    6)
* statement; from:                       Naming and binding. (line   56)
* statement; global:                     Assignment statements.
                                                             (line   51)
* statement; global <1>:                 The del statement<2>.
                                                             (line   16)
* statement; global <2>:                 The global statement.
                                                             (line    6)
* statement; if:                         The if statement.   (line    6)
* statement; if <1>:                     Truth Value Testing.
                                                             (line    6)
* statement; import:                     The standard type hierarchy.
                                                             (line  515)
* statement; import <1>:                 The import statement.
                                                             (line    6)
* statement; import <2>:                 Built-in Functions. (line 1653)
* statement; import <3>:                 imp --- Access the import internals.
                                                             (line    6)
* statement; import <4>:                 imputil --- Import utilities.
                                                             (line    9)
* statement; pass:                       The pass statement. (line    6)
* statement; print:                      Basic customization.
                                                             (line  124)
* statement; print <1>:                  The print statement.
                                                             (line    6)
* statement; print <2>:                  Built-in Types.     (line   17)
* statement; raise:                      The raise statement.
                                                             (line    6)
* statement; raise <1>:                  Built-in Exceptions.
                                                             (line   18)
* statement; return:                     The return statement.
                                                             (line    6)
* statement; return <1>:                 The try statement.  (line   69)
* statement; return <2>:                 The try statement.  (line   96)
* statement; try:                        The standard type hierarchy.
                                                             (line  745)
* statement; try <1>:                    The try statement.  (line    6)
* statement; try <2>:                    Built-in Exceptions.
                                                             (line   11)
* statement; while:                      The break statement.
                                                             (line    6)
* statement; while <1>:                  The continue statement.
                                                             (line    6)
* statement; while <2>:                  The while statement.
                                                             (line    6)
* statement; while <3>:                  Truth Value Testing.
                                                             (line    6)
* statement; with:                       With Statement Context Managers.
                                                             (line   16)
* statement; with <1>:                   The with statement. (line    6)
* statement; yield:                      The yield statement.
                                                             (line    6)
* staticmethod() (built-in function):    Built-in Functions. (line 1351)
* Stats (class in pstats):               The Stats Class.    (line    9)
* status (httplib.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   38)
* status() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  287)
* statvfs (module):                      statvfs --- Constants used with os statvfs.
                                                             (line    6)
* statvfs() (in module os):              Files and Directories.
                                                             (line  556)
* stat_float_times() (in module os):     Files and Directories.
                                                             (line  531)
* StdButtonBox (class in Tix):           Basic Widgets.      (line   66)
* stderr (in module sys):                The standard type hierarchy.
                                                             (line  630)
* stderr (in module sys) <1>:            sys --- System-specific parameters and functions.
                                                             (line 1005)
* stderr (in module sys) <2>:            Sub-interpreter support.
                                                             (line   15)
* stderr (subprocess.Popen attribute):   Popen Objects.      (line   89)
* stdin (in module sys):                 The standard type hierarchy.
                                                             (line  630)
* stdin (in module sys) <1>:             sys --- System-specific parameters and functions.
                                                             (line 1005)
* stdin (in module sys) <2>:             Sub-interpreter support.
                                                             (line   15)
* stdin (subprocess.Popen attribute):    Popen Objects.      (line   77)
* stdio:                                 The standard type hierarchy.
                                                             (line  630)
* STDOUT (in module subprocess):         Using the subprocess Module.
                                                             (line  130)
* stdout (in module sys):                The standard type hierarchy.
                                                             (line  630)
* stdout (in module sys) <1>:            The print statement.
                                                             (line   31)
* stdout (in module sys) <2>:            sys --- System-specific parameters and functions.
                                                             (line 1005)
* stdout (in module sys) <3>:            Sub-interpreter support.
                                                             (line   15)
* stdout (subprocess.Popen attribute):   Popen Objects.      (line   83)
* STD_ERROR_HANDLE (in module subprocess): Constants<4>.     (line   18)
* STD_INPUT_HANDLE (in module subprocess): Constants<4>.     (line    8)
* STD_OUTPUT_HANDLE (in module subprocess): Constants<4>.    (line   13)
* Stein, Greg:                           Python Abstract Syntax.
                                                             (line   23)
* step (slice object attribute):         The standard type hierarchy.
                                                             (line  764)
* step (slice object attribute) <1>:     Slicings.           (line   44)
* step() (ttk.Progressbar method):       ttk Progressbar.    (line   15)
* stereocontrols() (ossaudiodev.oss_mixer_device method): Mixer Device Objects.
                                                             (line   41)
* STILL (in module cd):                  cd --- CD-ROM access on SGI systems.
                                                             (line   98)
* stop (slice object attribute):         The standard type hierarchy.
                                                             (line  764)
* stop (slice object attribute) <1>:     Slicings.           (line   44)
* stop() (hotshot.Profile method):       Profile Objects.    (line   42)
* stop() (ttk.Progressbar method):       ttk Progressbar.    (line   21)
* stop() (unittest.TestResult method):   Loading and running tests.
                                                             (line  238)
* StopIteration:                         Built-in Exceptions.
                                                             (line  275)
* stopListening() (in module logging.config): Configuration functions.
                                                             (line  123)
* stopTest() (unittest.TestResult method): Loading and running tests.
                                                             (line  262)
* stopTestRun() (unittest.TestResult method): Loading and running tests.
                                                             (line  273)
* STOP_CODE (opcode):                    Python Bytecode Instructions.
                                                             (line    9)
* stop_here() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  183)
* storbinary() (ftplib.FTP method):      FTP Objects.        (line  104)
* store() (imaplib.IMAP4 method):        IMAP4 Objects.      (line  291)
* STORE_ACTIONS (optparse.Option attribute): Adding new actions.
                                                             (line   35)
* STORE_ATTR (opcode):                   Python Bytecode Instructions.
                                                             (line  400)
* STORE_DEREF (opcode):                  Python Bytecode Instructions.
                                                             (line  547)
* STORE_FAST (opcode):                   Python Bytecode Instructions.
                                                             (line  526)
* STORE_GLOBAL (opcode):                 Python Bytecode Instructions.
                                                             (line  409)
* STORE_MAP (opcode):                    Python Bytecode Instructions.
                                                             (line  516)
* STORE_NAME (opcode):                   Python Bytecode Instructions.
                                                             (line  379)
* STORE_SLICE+0 (opcode):                Python Bytecode Instructions.
                                                             (line  208)
* STORE_SLICE+1 (opcode):                Python Bytecode Instructions.
                                                             (line  212)
* STORE_SLICE+2 (opcode):                Python Bytecode Instructions.
                                                             (line  216)
* STORE_SLICE+3 (opcode):                Python Bytecode Instructions.
                                                             (line  220)
* STORE_SUBSCR (opcode):                 Python Bytecode Instructions.
                                                             (line  240)
* storlines() (ftplib.FTP method):       FTP Objects.        (line  121)
* str() (built-in function):             Built-in Functions. (line 1383)
* str() (in module locale):              locale --- Internationalization services.
                                                             (line  424)
* str; format:                           Built-in Functions. (line  556)
* strcoll() (in module locale):          locale --- Internationalization services.
                                                             (line  369)
* StreamError:                           tarfile --- Read and write tar archive files.
                                                             (line  174)
* StreamHandler (class in logging):      StreamHandler.      (line   11)
* StreamReader (class in codecs):        StreamReader Objects.
                                                             (line   10)
* StreamReaderWriter (class in codecs):  StreamReaderWriter Objects.
                                                             (line   12)
* StreamRecoder (class in codecs):       StreamRecoder Objects.
                                                             (line   13)
* streams:                               codecs --- Codec registry and base classes.
                                                             (line    6)
* StreamWriter (class in codecs):        StreamWriter Objects.
                                                             (line   10)
* strerror():                            Exception Handling. (line  176)
* strerror() (in module os):             Process Parameters. (line  304)
* strftime() (datetime.date method):     date Objects.       (line  215)
* strftime() (datetime.datetime method): datetime Objects.   (line  440)
* strftime() (datetime.time method):     time Objects.       (line  117)
* strftime() (in module time):           time --- Time access and conversions.
                                                             (line  214)
* strict (csv.Dialect attribute):        Dialects and Formatting Parameters.
                                                             (line   71)
* strict_domain (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line   97)
* strict_errors() (in module codecs):    codecs --- Codec registry and base classes.
                                                             (line  208)
* strict_ns_domain (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  119)
* strict_ns_set_initial_dollar (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  124)
* strict_ns_set_path (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  129)
* strict_ns_unverifiable (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  114)
* strict_rfc2965_unverifiable (cookielib.DefaultCookiePolicy attribute): DefaultCookiePolicy Objects.
                                                             (line  105)
* strides (memoryview attribute):        memoryview type.    (line  103)
* STRING (in module token):              token --- Constants used with Python parse trees.
                                                             (line   40)
* string (module):                       string --- Common string operations.
                                                             (line    6)
* string (re.MatchObject attribute):     Match Objects.      (line  186)
* string literal:                        String literals.    (line    6)
* string; comparison:                    The standard type hierarchy.
                                                             (line  166)
* string; conversion:                    Basic customization.
                                                             (line  119)
* string; conversion <1>:                String conversions. (line    6)
* string; conversion <2>:                Expression statements.
                                                             (line   18)
* string; formatting:                    String Formatting Operations.
                                                             (line    6)
* string; interpolation:                 String Formatting Operations.
                                                             (line    6)
* string; item:                          Subscriptions.      (line   27)
* string; methods:                       String Methods<2>.  (line    6)
* string; Unicode:                       String literals.    (line   27)
* StringIO (class in io):                Text I/O.           (line  152)
* StringIO (class in StringIO):          StringIO --- Read and write strings as files.
                                                             (line   12)
* StringIO (module):                     StringIO --- Read and write strings as files.
                                                             (line    6)
* StringIO() (in module cStringIO):      cStringIO --- Faster version of StringIO.
                                                             (line   11)
* stringprep (module):                   stringprep --- Internet String Preparation.
                                                             (line    6)
* strings, documentation:                Defining Functions. (line   20)
* strings, documentation <1>:            Documentation Strings.
                                                             (line    6)
* StringType (in module types):          types --- Names for built-in types.
                                                             (line   78)
* StringType (in module types) <1>:      String/Bytes Objects.
                                                             (line   20)
* StringTypes (in module types):         types --- Names for built-in types.
                                                             (line  216)
* string_at() (in module ctypes):        Utility functions.  (line  208)
* strip() (in module string):            Deprecated string functions.
                                                             (line  180)
* strip() (str method):                  String Methods<2>.  (line  355)
* stripspaces (curses.textpad.Textbox attribute): Textbox objects.
                                                             (line  114)
* strip_dirs() (pstats.Stats method):    The Stats Class.    (line   33)
* strptime() (datetime.datetime class method): datetime Objects.
                                                             (line  120)
* strptime() (in module time):           time --- Time access and conversions.
                                                             (line  364)
* strtobool() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line  124)
* Struct (class in struct):              Classes<2>.         (line    8)
* struct (module):                       struct --- Interpret strings as packed binary data.
                                                             (line    6)
* struct sequence:                       Glossary.           (line  797)
* Structure (class in ctypes):           Structured data types.
                                                             (line   21)
* struct_time (class in time):           time --- Time access and conversions.
                                                             (line  397)
* strxfrm() (in module locale):          locale --- Internationalization services.
                                                             (line  376)
* STType (in module parser):             ST Objects.         (line   10)
* Style (class in ttk):                  Ttk Styling.        (line   21)
* StyledText (class in aetypes):         aetypes --- AppleEvent objects.
                                                             (line   53)
* ST_ATIME (in module stat):             stat --- Interpreting stat results.
                                                             (line  131)
* ST_CTIME (in module stat):             stat --- Interpreting stat results.
                                                             (line  139)
* ST_DEV (in module stat):               stat --- Interpreting stat results.
                                                             (line  110)
* ST_GID (in module stat):               stat --- Interpreting stat results.
                                                             (line  122)
* ST_INO (in module stat):               stat --- Interpreting stat results.
                                                             (line  106)
* ST_MODE (in module stat):              stat --- Interpreting stat results.
                                                             (line  102)
* ST_MTIME (in module stat):             stat --- Interpreting stat results.
                                                             (line  135)
* ST_NLINK (in module stat):             stat --- Interpreting stat results.
                                                             (line  114)
* ST_SIZE (in module stat):              stat --- Interpreting stat results.
                                                             (line  126)
* ST_UID (in module stat):               stat --- Interpreting stat results.
                                                             (line  118)
* sub() (in module operator):            operator --- Standard operators as functions.
                                                             (line  163)
* sub() (in module re):                  Module Contents.    (line  193)
* sub() (re.RegexObject method):         Regular Expression Objects.
                                                             (line   79)
* subclassing; immutable types:          Basic customization.
                                                             (line    8)
* subdirs (filecmp.dircmp attribute):    The dircmp class.   (line  101)
* SubElement() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line   95)
* SubMenu() (in module FrameWork):       FrameWork --- Interactive application framework.
                                                             (line   74)
* subn() (in module re):                 Module Contents.    (line  242)
* subn() (re.RegexObject method):        Regular Expression Objects.
                                                             (line   84)
* Subnormal (class in decimal):          Signals.            (line   87)
* subpad() (curses.window method):       Window Objects.     (line  485)
* subprocess (module):                   subprocess --- Subprocess management.
                                                             (line    6)
* subscribe() (imaplib.IMAP4 method):    IMAP4 Objects.      (line  304)
* subscript; assignment:                 Mutable Sequence Types.
                                                             (line   13)
* subscript; operation:                  Sequence Types --- str unicode list tuple bytearray buffer xrange.
                                                             (line  100)
* subscription:                          The standard type hierarchy.
                                                             (line  125)
* subscription <1>:                      The standard type hierarchy.
                                                             (line  203)
* subscription <2>:                      The standard type hierarchy.
                                                             (line  259)
* subscription <3>:                      Subscriptions.      (line    6)
* subscription; assignment:              Assignment statements.
                                                             (line   92)
* subsequent_indent (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  152)
* substitute() (string.Template method): Template strings.   (line   34)
* subst_vars() (in module distutils.util): distutils util --- Miscellaneous other utility functions.
                                                             (line   87)
* subtract() (collections.Counter method): Counter objects.  (line   80)
* subtract() (decimal.Context method):   Context objects.    (line  495)
* subtraction:                           Binary arithmetic operations.
                                                             (line   63)
* subversion (in module sys):            sys --- System-specific parameters and functions.
                                                             (line 1038)
* subwin() (curses.window method):       Window Objects.     (line  492)
* sub_commands (distutils.cmd.Command attribute): Creating a new Distutils command.
                                                             (line   49)
* successful() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  142)
* suffix_map (in module mimetypes):      mimetypes --- Map filenames to MIME types.
                                                             (line  119)
* suffix_map (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   23)
* suite:                                 Compound statements.
                                                             (line   17)
* suite() (in module parser):            Creating ST Objects.
                                                             (line   18)
* suiteClass (unittest.TestLoader attribute): Loading and running tests.
                                                             (line  141)
* sum() (built-in function):             Built-in Functions. (line 1401)
* summarize() (doctest.DocTestRunner method): DocTestRunner objects.
                                                             (line  116)
* sum_list():                            Reference Count Details.
                                                             (line  139)
* sum_sequence():                        Reference Count Details.
                                                             (line  158)
* sum_sequence() <1>:                    Exceptions<7>.      (line   67)
* sunau (module):                        sunau --- Read and write Sun AU files.
                                                             (line    6)
* sunaudiodev (module):                  sunaudiodev --- Access to Sun audio hardware.
                                                             (line    6)
* SUNAUDIODEV (module):                  SUNAUDIODEV --- Constants used with sunaudiodev.
                                                             (line    6)
* super (pyclbr.Class attribute):        Class Objects<2>.   (line   19)
* super() (built-in function):           Built-in Functions. (line 1417)
* supports_unicode_filenames (in module os.path): os path --- Common pathname manipulations.
                                                             (line  328)
* swapcase() (in module string):         Deprecated string functions.
                                                             (line  191)
* swapcase() (str method):               String Methods<2>.  (line  371)
* SW_HIDE (in module subprocess):        Constants<4>.       (line   23)
* sym() (dl.dl method):                  Dl Objects.         (line   13)
* Symbol (class in symtable):            Examining Symbol Tables.
                                                             (line  103)
* symbol (module):                       symbol --- Constants used with Python parse trees.
                                                             (line    6)
* SymbolTable (class in symtable):       Examining Symbol Tables.
                                                             (line    6)
* symlink() (in module os):              Files and Directories.
                                                             (line  578)
* symmetric_difference() (set method):   Set Types --- set frozenset.
                                                             (line  115)
* symmetric_difference_update() (set method): Set Types --- set frozenset.
                                                             (line  193)
* symtable (module):                     symtable --- Access to the compiler's symbol tables.
                                                             (line    6)
* symtable() (in module symtable):       Generating Symbol Tables.
                                                             (line    6)
* sym_name (in module symbol):           symbol --- Constants used with Python parse trees.
                                                             (line   19)
* sync() (bsddb.bsddbobject method):     Hash BTree and Record Objects.
                                                             (line   67)
* sync() (dbhash.dbhash method):         Database Objects.   (line   39)
* sync() (dumbdbm.dumbdbm method):       Dumbdbm Objects.    (line    9)
* sync() (in module gdbm):               gdbm --- GNU's reinterpretation of dbm.
                                                             (line  112)
* sync() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line  155)
* sync() (shelve.Shelf method):          shelve --- Python object persistence.
                                                             (line   60)
* syncdown() (curses.window method):     Window Objects.     (line  502)
* synchronized() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   88)
* SyncManager (class in multiprocessing.managers): Managers. (line  122)
* syncok() (curses.window method):       Window Objects.     (line  508)
* syncup() (curses.window method):       Window Objects.     (line  513)
* syntax:                                Notation.           (line    6)
* syntax <1>:                            Expressions.        (line   16)
* SyntaxErr:                             Exceptions<6>.      (line   95)
* SyntaxError:                           Built-in Exceptions.
                                                             (line  284)
* SyntaxWarning:                         Built-in Exceptions.
                                                             (line  470)
* sys (module):                          sys --- System-specific parameters and functions.
                                                             (line    6)
* sys.exc_info:                          The standard type hierarchy.
                                                             (line  729)
* sys.exc_traceback:                     The standard type hierarchy.
                                                             (line  729)
* sys.last_traceback:                    The standard type hierarchy.
                                                             (line  729)
* sys.meta_path:                         The import statement.
                                                             (line   41)
* sys.modules:                           The import statement.
                                                             (line   34)
* sys.path:                              The import statement.
                                                             (line   53)
* sys.path_hooks:                        The import statement.
                                                             (line   53)
* sys.path_importer_cache:               The import statement.
                                                             (line   53)
* sys.stderr:                            The standard type hierarchy.
                                                             (line  630)
* sys.stdin:                             The standard type hierarchy.
                                                             (line  630)
* sys.stdout:                            The standard type hierarchy.
                                                             (line  630)
* SysBeep() (in module MacOS):           MacOS --- Access to Mac OS interpreter features.
                                                             (line   53)
* sysconf() (in module os):              Miscellaneous System Information.
                                                             (line   47)
* sysconfig (module):                    sysconfig --- Provide access to Python's configuration information.
                                                             (line    6)
* sysconf_names (in module os):          Miscellaneous System Information.
                                                             (line   57)
* syslog (module):                       syslog --- Unix syslog library routines.
                                                             (line    6)
* syslog() (in module syslog):           syslog --- Unix syslog library routines.
                                                             (line   16)
* SysLogHandler (class in logging.handlers): SysLogHandler.  (line   10)
* system() (in module os):               Process Management. (line  465)
* system() (in module platform):         Cross Platform.     (line  122)
* SystemError:                           Built-in Exceptions.
                                                             (line  306)
* SystemError (built-in exception):      Module Objects.     (line   49)
* SystemError (built-in exception) <1>:  Module Objects.     (line   55)
* SystemExit:                            Built-in Exceptions.
                                                             (line  320)
* SystemExit (built-in exception):       Exceptions<2>.      (line   26)
* systemId (xml.dom.DocumentType attribute): DocumentType Objects.
                                                             (line   22)
* SystemRandom (class in random):        random --- Generate pseudo-random numbers.
                                                             (line  299)
* SystemRoot:                            Popen Constructor.  (line  141)
* system_alias() (in module platform):   Cross Platform.     (line  128)
* sys_exc (2to3 fixer):                  Fixers.             (line  225)
* sys_version (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line  109)
* S_ENFMT (in module stat):              stat --- Interpreting stat results.
                                                             (line  263)
* s_eval() (rexec.RExec method):         RExec Objects.      (line   31)
* s_exec() (rexec.RExec method):         RExec Objects.      (line   36)
* s_execfile() (rexec.RExec method):     RExec Objects.      (line   41)
* S_IEXEC (in module stat):              stat --- Interpreting stat results.
                                                             (line  277)
* S_IFBLK (in module stat):              stat --- Interpreting stat results.
                                                             (line  174)
* S_IFCHR (in module stat):              stat --- Interpreting stat results.
                                                             (line  182)
* S_IFDIR (in module stat):              stat --- Interpreting stat results.
                                                             (line  178)
* S_IFIFO (in module stat):              stat --- Interpreting stat results.
                                                             (line  186)
* S_IFLNK (in module stat):              stat --- Interpreting stat results.
                                                             (line  166)
* S_IFMT() (in module stat):             stat --- Interpreting stat results.
                                                             (line   58)
* S_IFREG (in module stat):              stat --- Interpreting stat results.
                                                             (line  170)
* S_IFSOCK (in module stat):             stat --- Interpreting stat results.
                                                             (line  162)
* S_IMODE() (in module stat):            stat --- Interpreting stat results.
                                                             (line   51)
* s_import() (rexec.RExec method):       RExec Objects.      (line   78)
* S_IREAD (in module stat):              stat --- Interpreting stat results.
                                                             (line  269)
* S_IRGRP (in module stat):              stat --- Interpreting stat results.
                                                             (line  235)
* S_IROTH (in module stat):              stat --- Interpreting stat results.
                                                             (line  251)
* S_IRUSR (in module stat):              stat --- Interpreting stat results.
                                                             (line  219)
* S_IRWXG (in module stat):              stat --- Interpreting stat results.
                                                             (line  231)
* S_IRWXO (in module stat):              stat --- Interpreting stat results.
                                                             (line  247)
* S_IRWXU (in module stat):              stat --- Interpreting stat results.
                                                             (line  215)
* S_ISBLK() (in module stat):            stat --- Interpreting stat results.
                                                             (line   28)
* S_ISCHR() (in module stat):            stat --- Interpreting stat results.
                                                             (line   23)
* S_ISDIR() (in module stat):            stat --- Interpreting stat results.
                                                             (line   19)
* S_ISFIFO() (in module stat):           stat --- Interpreting stat results.
                                                             (line   36)
* S_ISGID (in module stat):              stat --- Interpreting stat results.
                                                             (line  197)
* S_ISLNK() (in module stat):            stat --- Interpreting stat results.
                                                             (line   40)
* S_ISREG() (in module stat):            stat --- Interpreting stat results.
                                                             (line   32)
* S_ISSOCK() (in module stat):           stat --- Interpreting stat results.
                                                             (line   44)
* S_ISUID (in module stat):              stat --- Interpreting stat results.
                                                             (line  193)
* S_ISVTX (in module stat):              stat --- Interpreting stat results.
                                                             (line  208)
* S_IWGRP (in module stat):              stat --- Interpreting stat results.
                                                             (line  239)
* S_IWOTH (in module stat):              stat --- Interpreting stat results.
                                                             (line  255)
* S_IWRITE (in module stat):             stat --- Interpreting stat results.
                                                             (line  273)
* S_IWUSR (in module stat):              stat --- Interpreting stat results.
                                                             (line  223)
* S_IXGRP (in module stat):              stat --- Interpreting stat results.
                                                             (line  243)
* S_IXOTH (in module stat):              stat --- Interpreting stat results.
                                                             (line  259)
* S_IXUSR (in module stat):              stat --- Interpreting stat results.
                                                             (line  227)
* s_reload() (rexec.RExec method):       RExec Objects.      (line   83)
* s_unload() (rexec.RExec method):       RExec Objects.      (line   88)
* tab:                                   Indentation.        (line    6)
* tab() (ttk.Notebook method):           ttk Notebook.       (line   62)
* TabError:                              Built-in Exceptions.
                                                             (line  301)
* tabnanny (module):                     tabnanny --- Detection of ambiguous indentation.
                                                             (line    6)
* tabs() (ttk.Notebook method):          ttk Notebook.       (line   71)
* tag (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   16)
* tagName (xml.dom.Element attribute):   Element Objects<2>. (line    9)
* tag_bind() (ttk.Treeview method):      ttk Treeview.       (line  289)
* tag_configure() (ttk.Treeview method): ttk Treeview.       (line  295)
* tag_has() (ttk.Treeview method):       ttk Treeview.       (line  305)
* tail (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   30)
* takewhile() (in module itertools):     Itertool functions. (line  549)
* TalkTo (class in aetools):             aetools --- OSA client support.
                                                             (line   56)
* tan() (in module cmath):               Trigonometric functions<2>.
                                                             (line   36)
* tan() (in module math):                Trigonometric functions.
                                                             (line   41)
* tanh() (in module cmath):              Hyperbolic functions<2>.
                                                             (line   40)
* tanh() (in module math):               Hyperbolic functions.
                                                             (line   32)
* TarError:                              tarfile --- Read and write tar archive files.
                                                             (line  160)
* TarFile (class in tarfile):            tarfile --- Read and write tar archive files.
                                                             (line  130)
* TarFile (class in tarfile) <1>:        TarFile Objects.    (line   22)
* tarfile (module):                      tarfile --- Read and write tar archive files.
                                                             (line    6)
* TarFileCompat (class in tarfile):      tarfile --- Read and write tar archive files.
                                                             (line  141)
* TarFileCompat.TAR_GZIPPED (in module tarfile): tarfile --- Read and write tar archive files.
                                                             (line  153)
* TarFileCompat.TAR_PLAIN (in module tarfile): tarfile --- Read and write tar archive files.
                                                             (line  149)
* target:                                Assignment statements.
                                                             (line   27)
* target (xml.dom.ProcessingInstruction attribute): ProcessingInstruction Objects.
                                                             (line    9)
* target; list:                          Assignment statements.
                                                             (line   27)
* target; list <1>:                      The for statement.  (line    6)
* target; list; assignment:              Assignment statements.
                                                             (line   35)
* TarInfo (class in tarfile):            TarInfo Objects.    (line   15)
* task_done() (multiprocessing.JoinableQueue method): Pipes and Queues.
                                                             (line  212)
* task_done() (Queue.Queue method):      Queue Objects.      (line   66)
* tb_frame (traceback attribute):        The standard type hierarchy.
                                                             (line  745)
* tb_lasti (traceback attribute):        The standard type hierarchy.
                                                             (line  745)
* tb_lineno (traceback attribute):       The standard type hierarchy.
                                                             (line  745)
* tb_lineno() (in module traceback):     traceback --- Print or retrieve a stack traceback.
                                                             (line  121)
* tb_next (traceback attribute):         The standard type hierarchy.
                                                             (line  745)
* tcdrain() (in module termios):         termios --- POSIX style tty control.
                                                             (line   51)
* tcflow() (in module termios):          termios --- POSIX style tty control.
                                                             (line   62)
* tcflush() (in module termios):         termios --- POSIX style tty control.
                                                             (line   56)
* tcgetattr() (in module termios):       termios --- POSIX style tty control.
                                                             (line   24)
* tcgetpgrp() (in module os):            File Descriptor Operations.
                                                             (line  220)
* Tcl() (in module Tkinter):             Tkinter Modules.    (line   36)
* TCL_LIBRARY:                           How do I freeze Tkinter applications?.
                                                             (line   11)
* tcsendbreak() (in module termios):     termios --- POSIX style tty control.
                                                             (line   45)
* tcsetattr() (in module termios):       termios --- POSIX style tty control.
                                                             (line   35)
* tcsetpgrp() (in module os):            File Descriptor Operations.
                                                             (line  227)
* tearDown() (unittest.TestCase method): Test cases.         (line   46)
* tearDownClass() (unittest.TestCase method): Test cases.    (line   73)
* tee() (in module itertools):           Itertool functions. (line  562)
* tell() (aifc.aifc method):             aifc --- Read and write AIFF and AIFC files.
                                                             (line  109)
* tell() (aifc.aifc method) <1>:         aifc --- Read and write AIFF and AIFC files.
                                                             (line  178)
* tell() (bz2.BZ2File method):           De compression of files.
                                                             (line   89)
* tell() (chunk.Chunk method):           chunk --- Read IFF chunked data.
                                                             (line   94)
* tell() (file method):                  File Objects.       (line  177)
* tell() (in module mmap):               mmap --- Memory-mapped file support.
                                                             (line  226)
* tell() (io.IOBase method):             I/O Base Classes.   (line  128)
* tell() (io.TextIOBase method):         Text I/O.           (line   89)
* tell() (multifile.MultiFile method):   MultiFile Objects.  (line   33)
* tell() (sunau.AU_read method):         AU_read Objects.    (line   64)
* tell() (sunau.AU_write method):        AU_write Objects.   (line   37)
* tell() (wave.Wave_read method):        Wave_read Objects.  (line   72)
* tell() (wave.Wave_write method):       Wave_write Objects. (line   42)
* Telnet (class in telnetlib):           telnetlib --- Telnet client.
                                                             (line   25)
* telnetlib (module):                    telnetlib --- Telnet client.
                                                             (line    6)
* TEMP:                                  tempfile --- Generate temporary files and directories.
                                                             (line  206)
* tempdir (in module tempfile):          tempfile --- Generate temporary files and directories.
                                                             (line  193)
* tempfile (module):                     tempfile --- Generate temporary files and directories.
                                                             (line    6)
* Template (class in pipes):             pipes --- Interface to shell pipelines.
                                                             (line   17)
* Template (class in string):            Template strings.   (line   29)
* template (in module tempfile):         tempfile --- Generate temporary files and directories.
                                                             (line  232)
* template (string.Template attribute):  Template strings.   (line   64)
* tempnam() (in module os):              Files and Directories.
                                                             (line  584)
* temporary; file:                       tempfile --- Generate temporary files and directories.
                                                             (line    6)
* temporary; file name:                  tempfile --- Generate temporary files and directories.
                                                             (line    6)
* TemporaryFile() (in module tempfile):  tempfile --- Generate temporary files and directories.
                                                             (line   30)
* TERM:                                  Functions<2>.       (line  436)
* TERM <1>:                              Functions<2>.       (line  463)
* termattrs() (in module curses):        Functions<2>.       (line  455)
* terminate() (multiprocessing.pool.multiprocessing.Pool method): Process Pools.
                                                             (line  108)
* terminate() (multiprocessing.Process method): Process and exceptions.
                                                             (line  125)
* terminate() (subprocess.Popen method): Popen Objects.      (line   54)
* termination model:                     Exceptions<2>.      (line   20)
* termios (module):                      termios --- POSIX style tty control.
                                                             (line    6)
* termname() (in module curses):         Functions<2>.       (line  461)
* ternary; operator:                     Conditional Expressions.
                                                             (line    8)
* test (doctest.DocTestFailure attribute): Debugging.        (line  207)
* test (doctest.UnexpectedException attribute): Debugging.   (line  228)
* test (module):                         test --- Regression tests package for Python.
                                                             (line    6)
* test() (in module cgi):                Functions<5>.       (line   49)
* test() (mutex.mutex method):           Mutex Objects.      (line    8)
* test.test_support (module):            test test_support --- Utility functions for tests.
                                                             (line    6)
* testandset() (mutex.mutex method):     Mutex Objects.      (line   12)
* TestCase (class in unittest):          Test cases.         (line    6)
* TestFailed:                            test test_support --- Utility functions for tests.
                                                             (line   14)
* testfile() (in module doctest):        Basic API.          (line   12)
* TESTFN (in module test.test_support):  test test_support --- Utility functions for tests.
                                                             (line   43)
* TestLoader (class in unittest):        Loading and running tests.
                                                             (line    6)
* testMethodPrefix (unittest.TestLoader attribute): Loading and running tests.
                                                             (line  125)
* testmod() (in module doctest):         Basic API.          (line   92)
* TestResult (class in unittest):        Loading and running tests.
                                                             (line  149)
* tests (in module imghdr):              imghdr --- Determine the type of an image.
                                                             (line   67)
* testsource() (in module doctest):      Debugging.          (line  111)
* testsRun (unittest.TestResult attribute): Loading and running tests.
                                                             (line  211)
* TestSuite (class in unittest):         Grouping tests.     (line    6)
* testzip() (zipfile.ZipFile method):    ZipFile Objects.    (line  168)
* text (in module msilib):               Precomputed tables. (line   23)
* text (xml.etree.ElementTree.Element attribute): Element Objects.
                                                             (line   21)
* text() (msilib.Dialog method):         GUI classes.        (line   56)
* Textbox (class in curses.textpad):     Textbox objects.    (line    8)
* TextCalendar (class in calendar):      calendar --- General calendar-related functions.
                                                             (line  105)
* textdomain() (in module gettext):      GNU gettext API.    (line   34)
* TextFile (class in distutils.text_file): distutils text_file --- The TextFile class.
                                                             (line   10)
* TextIOBase (class in io):              Text I/O.           (line    6)
* TextIOWrapper (class in io):           Text I/O.           (line  100)
* TextTestResult (class in unittest):    Loading and running tests.
                                                             (line  333)
* TextTestRunner (class in unittest):    Loading and running tests.
                                                             (line  348)
* textwrap (module):                     textwrap --- Text wrapping and filling.
                                                             (line    6)
* TextWrapper (class in textwrap):       textwrap --- Text wrapping and filling.
                                                             (line   82)
* text_factory (sqlite3.Connection attribute): Connection Objects.
                                                             (line  289)
* theme_create() (ttk.Style method):     Ttk Styling.        (line  192)
* theme_names() (ttk.Style method):      Ttk Styling.        (line  240)
* theme_settings() (ttk.Style method):   Ttk Styling.        (line  202)
* theme_use() (ttk.Style method):        Ttk Styling.        (line  244)
* THOUSEP (in module locale):            locale --- Internationalization services.
                                                             (line  227)
* Thread (class in threading):           Thread Objects.     (line   51)
* thread (module):                       thread --- Multiple threads of control.
                                                             (line    6)
* thread() (imaplib.IMAP4 method):       IMAP4 Objects.      (line  308)
* ThreadError:                           threading --- Higher-level threading interface.
                                                             (line  192)
* threading (module):                    threading --- Higher-level threading interface.
                                                             (line    6)
* threads; IRIX:                         thread --- Multiple threads of control.
                                                             (line  146)
* threads; POSIX:                        thread --- Multiple threads of control.
                                                             (line   20)
* throw (2to3 fixer):                    Fixers.             (line  231)
* throw() (generator method):            Generator-iterator methods.
                                                             (line   41)
* tie() (in module fl):                  Functions Defined in Module fl.
                                                             (line   77)
* tigetflag() (in module curses):        Functions<2>.       (line  466)
* tigetnum() (in module curses):         Functions<2>.       (line  473)
* tigetstr() (in module curses):         Functions<2>.       (line  480)
* TILDE (in module token):               token --- Constants used with Python parse trees.
                                                             (line   40)
* tilt() (in module turtle):             Appearance.         (line   82)
* tiltangle() (in module turtle):        Appearance.         (line  113)
* time (class in datetime):              time Objects.       (line   10)
* time (module):                         time --- Time access and conversions.
                                                             (line    6)
* time() (datetime.datetime method):     datetime Objects.   (line  271)
* time() (in module time):               time --- Time access and conversions.
                                                             (line  449)
* Time2Internaldate() (in module imaplib): imaplib --- IMAP4 protocol client.
                                                             (line   89)
* timedelta (class in datetime):         timedelta Objects.  (line    9)
* TimedRotatingFileHandler (class in logging.handlers): TimedRotatingFileHandler.
                                                             (line   10)
* timegm() (in module calendar):         calendar --- General calendar-related functions.
                                                             (line  275)
* timeit (module):                       timeit --- Measure execution time of small code snippets.
                                                             (line    6)
* timeit command line option; -c, –clock: Command-Line Interface<2>.
                                                             (line   29)
* timeit command line option; -h, –help: Command-Line Interface<2>.
                                                             (line   37)
* timeit command line option; -n N, –number=N: Command-Line Interface<2>.
                                                             (line   13)
* timeit command line option; -r N, –repeat=N: Command-Line Interface<2>.
                                                             (line   17)
* timeit command line option; -s S, –setup=S: Command-Line Interface<2>.
                                                             (line   21)
* timeit command line option; -t, –time: Command-Line Interface<2>.
                                                             (line   25)
* timeit command line option; -v, –verbose: Command-Line Interface<2>.
                                                             (line   33)
* timeit() (in module timeit):           Python Interface.   (line    8)
* timeit() (timeit.Timer method):        Python Interface.   (line   60)
* timeout:                               socket --- Low-level networking interface.
                                                             (line  134)
* timeout (SocketServer.BaseServer attribute): Server Objects.
                                                             (line   90)
* timeout() (curses.window method):      Window Objects.     (line  518)
* Timer (class in threading):            Timer Objects.      (line   25)
* Timer (class in timeit):               Python Interface.   (line   37)
* times() (in module os):                Process Management. (line  494)
* timetuple() (datetime.date method):    date Objects.       (line  147)
* timetuple() (datetime.datetime method): datetime Objects.  (line  354)
* timetz() (datetime.datetime method):   datetime Objects.   (line  277)
* timezone (in module time):             time --- Time access and conversions.
                                                             (line  458)
* title() (EasyDialogs.ProgressBar method): ProgressBar Objects.
                                                             (line   41)
* title() (in module turtle):            Methods specific to Screen not inherited from TurtleScreen.
                                                             (line   48)
* title() (str method):                  String Methods<2>.  (line  378)
* Tix:                                   Tix --- Extension widgets for Tk.
                                                             (line    6)
* Tix (class in Tix):                    Using Tix.          (line    6)
* Tix (module):                          Tix --- Extension widgets for Tk.
                                                             (line    6)
* tixCommand (class in Tix):             Tix Commands.       (line    6)
* tix_addbitmapdir() (Tix.tixCommand method): Tix Commands.  (line   47)
* tix_cget() (Tix.tixCommand method):    Tix Commands.       (line   32)
* tix_configure() (Tix.tixCommand method): Tix Commands.     (line   20)
* tix_filedialog() (Tix.tixCommand method): Tix Commands.    (line   57)
* tix_getbitmap() (Tix.tixCommand method): Tix Commands.     (line   37)
* tix_getimage() (Tix.tixCommand method): Tix Commands.      (line   68)
* TIX_LIBRARY:                           Using Tix.          (line   30)
* tix_option_get() (Tix.tixCommand method): Tix Commands.    (line   82)
* tix_resetoptions() (Tix.tixCommand method): Tix Commands.  (line   86)
* Tk:                                    Graphical User Interfaces with Tk.
                                                             (line    6)
* Tk (class in Tkinter):                 Tkinter Modules.    (line   26)
* Tk Option Data Types:                  Tk Option Data Types.
                                                             (line    6)
* Tkinter:                               Graphical User Interfaces with Tk.
                                                             (line    6)
* Tkinter (module):                      Tkinter --- Python interface to Tcl/Tk.
                                                             (line    6)
* TK_LIBRARY:                            How do I freeze Tkinter applications?.
                                                             (line   11)
* TList (class in Tix):                  Tabular ListBox.    (line    6)
* TLS:                                   ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* TMP:                                   tempfile --- Generate temporary files and directories.
                                                             (line  208)
* TMP <1>:                               Files and Directories.
                                                             (line  594)
* TMPDIR:                                tempfile --- Generate temporary files and directories.
                                                             (line  204)
* TMPDIR <1>:                            Files and Directories.
                                                             (line  594)
* tmpfile() (in module os):              File Object Creation.
                                                             (line   52)
* tmpnam() (in module os):               Files and Directories.
                                                             (line  605)
* TMP_MAX (in module os):                Files and Directories.
                                                             (line  625)
* ToASCII() (in module encodings.idna):  encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   54)
* tobuf() (tarfile.TarInfo method):      TarInfo Objects.    (line   34)
* tobytes() (memoryview method):         memoryview type.    (line   65)
* tochild (popen2.Popen3 attribute):     Popen3 and Popen4 Objects.
                                                             (line   31)
* today() (datetime.date class method):  date Objects.       (line   31)
* today() (datetime.datetime class method): datetime Objects.
                                                             (line   41)
* tofile() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  215)
* token:                                 Lexical analysis.   (line    6)
* token (module):                        token --- Constants used with Python parse trees.
                                                             (line    6)
* token (shlex.shlex attribute):         shlex Objects.      (line  170)
* tokeneater() (in module tabnanny):     tabnanny --- Detection of ambiguous indentation.
                                                             (line   42)
* TokenError:                            tokenize --- Tokenizer for Python source.
                                                             (line   99)
* tokenize (module):                     tokenize --- Tokenizer for Python source.
                                                             (line    6)
* tokenize() (in module tokenize):       tokenize --- Tokenizer for Python source.
                                                             (line   46)
* tok_name (in module token):            token --- Constants used with Python parse trees.
                                                             (line   20)
* tolist() (array.array method):         array --- Efficient arrays of numeric values.
                                                             (line  219)
* tolist() (memoryview method):          memoryview type.    (line   74)
* tolist() (parser.ST method):           ST Objects.         (line   29)
* tomono() (in module audioop):          audioop --- Manipulate raw audio data.
                                                             (line  191)
* toordinal() (datetime.date method):    date Objects.       (line  157)
* toordinal() (datetime.datetime method): datetime Objects.  (line  381)
* top() (curses.panel.Panel method):     Panel Objects.      (line   52)
* top() (poplib.POP3 method):            POP3 Objects.       (line   79)
* toprettyxml() (xml.dom.minidom.Node method): DOM Objects.  (line   58)
* top_panel() (in module curses.panel):  Functions<3>.       (line   19)
* tostereo() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  197)
* tostring() (array.array method):       array --- Efficient arrays of numeric values.
                                                             (line  223)
* tostring() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line  108)
* tostringlist() (in module xml.etree.ElementTree): Functions<4>.
                                                             (line  117)
* total_changes (sqlite3.Connection attribute): Connection Objects.
                                                             (line  349)
* total_ordering() (in module functools): functools --- Higher-order functions and operations on callable objects.
                                                             (line   42)
* total_seconds() (datetime.timedelta method): timedelta Objects.
                                                             (line  180)
* totuple() (parser.ST method):          ST Objects.         (line   33)
* touched() (in module macostools):      macostools --- Convenience routines for file manipulation.
                                                             (line   42)
* touchline() (curses.window method):    Window Objects.     (line  528)
* touchwin() (curses.window method):     Window Objects.     (line  535)
* tounicode() (array.array method):      array --- Efficient arrays of numeric values.
                                                             (line  229)
* ToUnicode() (in module encodings.idna): encodings idna --- Internationalized Domain Names in Applications.
                                                             (line   59)
* tovideo() (in module imageop):         imageop --- Manipulate raw image data.
                                                             (line   39)
* towards() (in module turtle):          Tell Turtle's state.
                                                             (line   15)
* toxml() (xml.dom.minidom.Node method): DOM Objects.        (line   39)
* to_eng_string() (decimal.Context method): Context objects. (line  499)
* to_eng_string() (decimal.Decimal method): Decimal objects. (line  610)
* to_integral() (decimal.Decimal method): Decimal objects.   (line  618)
* to_integral_exact() (decimal.Context method): Context objects.
                                                             (line  503)
* to_integral_exact() (decimal.Decimal method): Decimal objects.
                                                             (line  624)
* to_integral_value() (decimal.Decimal method): Decimal objects.
                                                             (line  634)
* to_sci_string() (decimal.Context method): Context objects. (line  507)
* to_splittable() (email.charset.Charset method): email charset Representing character sets.
                                                             (line  108)
* tparm() (in module curses):            Functions<2>.       (line  487)
* tp_as_mapping (C member):              Type Objects<3>.    (line  399)
* tp_as_number (C member):               Type Objects<3>.    (line  381)
* tp_as_sequence (C member):             Type Objects<3>.    (line  390)
* Trace (class in trace):                Programmatic Interface.
                                                             (line    6)
* trace (module):                        trace --- Trace or track Python statement execution.
                                                             (line    6)
* trace command line option; -c, –count: Main options.       (line   12)
* trace command line option; -C, –coverdir=<dir>: Modifiers. (line   11)
* trace command line option; -f, –file=<file>: Modifiers.    (line    6)
* trace command line option; -g, –timing: Modifiers.         (line   33)
* trace command line option; –help:      Command-Line Usage. (line   15)
* trace command line option; –ignore-dir=<dir>: Filters.     (line   14)
* trace command line option; –ignore-module=<mod>: Filters.  (line    8)
* trace command line option; -l, –listfuncs: Main options.   (line   23)
* trace command line option; -m, –missing: Modifiers.        (line   17)
* trace command line option; -R, –no-report: Modifiers.      (line   27)
* trace command line option; -r, –report: Main options.      (line   27)
* trace command line option; -s, –summary: Modifiers.        (line   22)
* trace command line option; -t, –trace: Main options.       (line   19)
* trace command line option; -T, –trackcalls: Main options.  (line   33)
* trace command line option; –version:   Command-Line Usage. (line   19)
* trace function:                        threading --- Higher-level threading interface.
                                                             (line  154)
* trace function <1>:                    sys --- System-specific parameters and functions.
                                                             (line  513)
* trace function <2>:                    sys --- System-specific parameters and functions.
                                                             (line  915)
* trace() (in module inspect):           The interpreter stack.
                                                             (line   76)
* traceback (module):                    traceback --- Print or retrieve a stack traceback.
                                                             (line    6)
* tracebacklimit (in module sys):        sys --- System-specific parameters and functions.
                                                             (line 1058)
* tracebacks; in CGI scripts:            cgitb --- Traceback manager for CGI scripts.
                                                             (line    8)
* TracebackType (in module types):       types --- Names for built-in types.
                                                             (line  171)
* traceback_limit (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  184)
* tracer() (in module turtle):           Special Turtle methods.
                                                             (line   80)
* tracer() (in module turtle) <1>:       Animation control.  (line   22)
* trace_dispatch() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  103)
* trailing; comma:                       Expression lists.   (line   13)
* trailing; comma <1>:                   The print statement.
                                                             (line   27)
* transfercmd() (ftplib.FTP method):     FTP Objects.        (line  132)
* TransientResource (class in test.test_support): test test_support --- Utility functions for tests.
                                                             (line  245)
* translate() (in module fnmatch):       fnmatch --- Unix filename pattern matching.
                                                             (line   73)
* translate() (in module string):        Deprecated string functions.
                                                             (line  196)
* translate() (str method):              String Methods<2>.  (line  407)
* translation() (in module gettext):     Class-based API.    (line   44)
* Transport Layer Security:              ssl --- TLS/SSL wrapper for socket objects.
                                                             (line    6)
* traverseproc (C type):                 Supporting Cyclic Garbage Collection.
                                                             (line  116)
* Tree (class in Tix):                   Hierarchical ListBox.
                                                             (line   20)
* TreeBuilder (class in xml.etree.ElementTree): TreeBuilder Objects.
                                                             (line    6)
* Treeview (class in ttk):               ttk Treeview.       (line    6)
* triangular() (in module random):       random --- Generate pseudo-random numbers.
                                                             (line  210)
* triple-quoted string:                  String literals.    (line   27)
* triple-quoted string <1>:              Glossary.           (line  806)
* True:                                  The standard type hierarchy.
                                                             (line   86)
* true:                                  Truth Value Testing.
                                                             (line   25)
* True <1>:                              Truth Value Testing.
                                                             (line   28)
* True <2>:                              Boolean Values.     (line   15)
* True (built-in variable):              Built-in Constants. (line   14)
* truediv() (in module operator):        operator --- Standard operators as functions.
                                                             (line  168)
* trunc() (in module math):              Numeric Types --- int float long complex.
                                                             (line  114)
* trunc() (in module math) <1>:          Number-theoretic and representation functions.
                                                             (line  103)
* truncate() (file method):              File Objects.       (line  186)
* truncate() (io.IOBase method):         I/O Base Classes.   (line  132)
* truth() (in module operator):          operator --- Standard operators as functions.
                                                             (line   55)
* truth; value:                          Truth Value Testing.
                                                             (line    6)
* ttk:                                   ttk --- Tk themed widgets.
                                                             (line    6)
* ttk (module):                          ttk --- Tk themed widgets.
                                                             (line    6)
* ttob() (in module imgfile):            imgfile --- Support for SGI imglib files.
                                                             (line   53)
* tty (module):                          tty --- Terminal control functions.
                                                             (line    6)
* tty; I/O control:                      termios --- POSIX style tty control.
                                                             (line    6)
* ttyname() (in module os):              File Descriptor Operations.
                                                             (line  235)
* tuple() (built-in function):           Built-in Functions. (line 1479)
* tuple2st() (in module parser):         Creating ST Objects.
                                                             (line   51)
* tuple; display:                        Parenthesized forms.
                                                             (line   21)
* TupleType (in module types):           types --- Names for built-in types.
                                                             (line   89)
* TupleType (in module types) <1>:       Tuple Objects.      (line   13)
* tuple_params (2to3 fixer):             Fixers.             (line  235)
* turnoff_sigfpe() (in module fpectl):   fpectl --- Floating point exception control.
                                                             (line   48)
* turnon_sigfpe() (in module fpectl):    fpectl --- Floating point exception control.
                                                             (line   43)
* Turtle (class in turtle):              The public classes of the module turtle.
                                                             (line   15)
* turtle (module):                       turtle --- Turtle graphics for Tk.
                                                             (line    6)
* turtles() (in module turtle):          Settings and special methods.
                                                             (line   94)
* TurtleScreen (class in turtle):        The public classes of the module turtle.
                                                             (line   21)
* turtlesize() (in module turtle):       Appearance.         (line   51)
* Tutt, Bill:                            Python Abstract Syntax.
                                                             (line   23)
* type:                                  The standard type hierarchy.
                                                             (line    6)
* type <1>:                              Glossary.           (line  816)
* Type (class in aetypes):               aetypes --- AppleEvent objects.
                                                             (line   81)
* type (optparse.Option attribute):      Option attributes.  (line   19)
* type (socket.socket attribute):        Socket Objects.     (line  304)
* type (tarfile.TarInfo attribute):      TarInfo Objects.    (line   61)
* type of an object:                     Objects values and types.
                                                             (line   11)
* type() (built-in function):            Built-in Functions. (line 1495)
* type; hierarchy:                       The standard type hierarchy.
                                                             (line    6)
* typeahead() (in module curses):        Functions<2>.       (line  494)
* typecode (array.array attribute):      array --- Efficient arrays of numeric values.
                                                             (line   94)
* TYPED_ACTIONS (optparse.Option attribute): Adding new actions.
                                                             (line   39)
* typed_subpart_iterator() (in module email.iterators): email iterators Iterators.
                                                             (line   22)
* TypeError:                             Built-in Exceptions.
                                                             (line  352)
* types (2to3 fixer):                    Fixers.             (line  240)
* types (module):                        types --- Names for built-in types.
                                                             (line    6)
* TYPES (optparse.Option attribute):     Adding new types.   (line   11)
* types, internal:                       The standard type hierarchy.
                                                             (line  642)
* types_map (in module mimetypes):       mimetypes --- Map filenames to MIME types.
                                                             (line  131)
* types_map (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   38)
* types_map_inv (mimetypes.MimeTypes attribute): MimeTypes Objects.
                                                             (line   45)
* TypeType (in module types):            types --- Names for built-in types.
                                                             (line   46)
* TypeType (in module types) <1>:        Type Objects<2>.    (line   12)
* TYPE_CHECKER (optparse.Option attribute): Adding new types.
                                                             (line   16)
* TZ:                                    time --- Time access and conversions.
                                                             (line  473)
* TZ <1>:                                time --- Time access and conversions.
                                                             (line  479)
* TZ <2>:                                time --- Time access and conversions.
                                                             (line  484)
* TZ <3>:                                time --- Time access and conversions.
                                                             (line  486)
* TZ <4>:                                time --- Time access and conversions.
                                                             (line  546)
* tzinfo (class in datetime):            Available Types.    (line   31)
* tzinfo (datetime.datetime attribute):  datetime Objects.   (line  181)
* tzinfo (datetime.time attribute):      time Objects.       (line   64)
* tzname (in module time):               time --- Time access and conversions.
                                                             (line  464)
* tzname() (datetime.datetime method):   datetime Objects.   (line  348)
* tzname() (datetime.time method):       time Objects.       (line  146)
* tzname() (datetime.tzinfo method):     tzinfo Objects.     (line  107)
* tzset() (in module time):              time --- Time access and conversions.
                                                             (line  470)
* T_FMT (in module locale):              locale --- Internationalization services.
                                                             (line  192)
* T_FMT_AMPM (in module locale):         locale --- Internationalization services.
                                                             (line  198)
* U (in module re):                      Module Contents.    (line   76)
* u-LAW:                                 audioop --- Manipulate raw audio data.
                                                             (line   12)
* u-LAW <1>:                             aifc --- Read and write AIFF and AIFC files.
                                                             (line  157)
* u-LAW <2>:                             sndhdr --- Determine type of sound file.
                                                             (line    6)
* u-LAW <3>:                             sunaudiodev --- Access to Sun audio hardware.
                                                             (line    9)
* ucd_3_2_0 (in module unicodedata):     unicodedata --- Unicode Database.
                                                             (line  129)
* udata (select.kevent attribute):       Kevent Objects.     (line  179)
* UF_APPEND (in module stat):            stat --- Interpreting stat results.
                                                             (line  292)
* UF_COMPRESSED (in module stat):        stat --- Interpreting stat results.
                                                             (line  304)
* UF_HIDDEN (in module stat):            stat --- Interpreting stat results.
                                                             (line  308)
* UF_IMMUTABLE (in module stat):         stat --- Interpreting stat results.
                                                             (line  288)
* UF_NODUMP (in module stat):            stat --- Interpreting stat results.
                                                             (line  284)
* UF_NOUNLINK (in module stat):          stat --- Interpreting stat results.
                                                             (line  300)
* UF_OPAQUE (in module stat):            stat --- Interpreting stat results.
                                                             (line  296)
* ugettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   55)
* ugettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   49)
* uid (tarfile.TarInfo attribute):       TarInfo Objects.    (line   74)
* uid() (imaplib.IMAP4 method):          IMAP4 Objects.      (line  333)
* uidl() (poplib.POP3 method):           POP3 Objects.       (line   91)
* ulaw2lin() (in module audioop):        audioop --- Manipulate raw audio data.
                                                             (line  204)
* ULONG_MAX:                             Long Integer Objects.
                                                             (line  187)
* umask() (in module os):                Process Parameters. (line  312)
* uname (tarfile.TarInfo attribute):     TarInfo Objects.    (line   82)
* uname() (in module os):                Process Parameters. (line  318)
* uname() (in module platform):          Cross Platform.     (line  139)
* unary; arithmetic; operation:          Unary arithmetic and bitwise operations.
                                                             (line    6)
* unary; bitwise; operation:             Unary arithmetic and bitwise operations.
                                                             (line    6)
* UNARY_CONVERT (opcode):                Python Bytecode Instructions.
                                                             (line   54)
* UNARY_INVERT (opcode):                 Python Bytecode Instructions.
                                                             (line   58)
* UNARY_NEGATIVE (opcode):               Python Bytecode Instructions.
                                                             (line   46)
* UNARY_NOT (opcode):                    Python Bytecode Instructions.
                                                             (line   50)
* UNARY_POSITIVE (opcode):               Python Bytecode Instructions.
                                                             (line   42)
* unbinding; name:                       The del statement<2>.
                                                             (line   16)
* UnboundLocalError:                     Naming and binding. (line   51)
* UnboundLocalError <1>:                 Built-in Exceptions.
                                                             (line  358)
* UnboundMethodType (in module types):   types --- Names for built-in types.
                                                             (line  137)
* unbuffered I/O:                        Built-in Functions. (line  918)
* UNC paths; and os.makedirs():          Files and Directories.
                                                             (line  317)
* unconsumed_tail (zlib.Decompress attribute): zlib --- Compression compatible with gzip.
                                                             (line  193)
* unctrl() (in module curses):           Functions<2>.       (line  506)
* unctrl() (in module curses.ascii):     curses ascii --- Utilities for ASCII characters.
                                                             (line  227)
* undefine_macro() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  171)
* Underflow (class in decimal):          Signals.            (line   94)
* undo() (in module turtle):             Turtle motion.      (line  279)
* undobufferentries() (in module turtle): Special Turtle methods.
                                                             (line   73)
* undoc_header (cmd.Cmd attribute):      Cmd Objects.        (line  151)
* unescape() (in module xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   22)
* UnexpectedException:                   Debugging.          (line  220)
* unexpectedSuccesses (unittest.TestResult attribute): Loading and running tests.
                                                             (line  201)
* unfreeze_form() (fl.form method):      Form Objects.       (line   36)
* ungetch() (in module curses):          Functions<2>.       (line  513)
* ungetch() (in module msvcrt):          Console I/O.        (line   49)
* ungetmouse() (in module curses):       Functions<2>.       (line  519)
* ungettext() (gettext.GNUTranslations method): The GNUTranslations class.
                                                             (line   86)
* ungettext() (gettext.NullTranslations method): The NullTranslations class.
                                                             (line   71)
* ungetwch() (in module msvcrt):         Console I/O.        (line   55)
* unhexlify() (in module binascii):      binascii --- Convert between binary and ASCII.
                                                             (line  127)
* unichr() (built-in function):          Built-in Functions. (line 1519)
* Unicode:                               The standard type hierarchy.
                                                             (line  175)
* Unicode <1>:                           codecs --- Codec registry and base classes.
                                                             (line    6)
* Unicode <2>:                           unicodedata --- Unicode Database.
                                                             (line    6)
* unicode (2to3 fixer):                  Fixers.             (line  245)
* UNICODE (in module re):                Module Contents.    (line   76)
* Unicode Consortium:                    String literals.    (line   27)
* unicode() (built-in function):         Built-in Functions. (line 1531)
* Unicode; database:                     unicodedata --- Unicode Database.
                                                             (line    6)
* unicodedata (module):                  unicodedata --- Unicode Database.
                                                             (line    6)
* UnicodeDecodeError:                    Built-in Exceptions.
                                                             (line  404)
* UnicodeEncodeError:                    Built-in Exceptions.
                                                             (line  397)
* UnicodeError:                          Built-in Exceptions.
                                                             (line  366)
* UnicodeTranslateError:                 Built-in Exceptions.
                                                             (line  411)
* UnicodeType (in module types):         types --- Names for built-in types.
                                                             (line   83)
* UnicodeWarning:                        Built-in Exceptions.
                                                             (line  489)
* unidata_version (in module unicodedata): unicodedata --- Unicode Database.
                                                             (line  123)
* unified_diff() (in module difflib):    difflib --- Helpers for computing deltas.
                                                             (line  286)
* uniform() (in module random):          random --- Generate pseudo-random numbers.
                                                             (line  201)
* UnimplementedFileMode:                 httplib --- HTTP protocol client.
                                                             (line  127)
* uninstall() (imputil.ImportManager method): imputil --- Import utilities.
                                                             (line   22)
* Union (class in ctypes):               Structured data types.
                                                             (line    6)
* union() (set method):                  Set Types --- set frozenset.
                                                             (line   89)
* unittest (module):                     unittest --- Unit testing framework.
                                                             (line    6)
* unittest command line option; -b, –buffer: Command-line options.
                                                             (line    8)
* unittest command line option; -c, –catch: Command-line options.
                                                             (line   15)
* unittest command line option; -f, –failfast: Command-line options.
                                                             (line   24)
* unittest-discover command line option; -p, –pattern pattern: Test Discovery.
                                                             (line   31)
* unittest-discover command line option; -s, –start-directory directory: Test Discovery.
                                                             (line   27)
* unittest-discover command line option; -t, –top-level-directory directory: Test Discovery.
                                                             (line   35)
* unittest-discover command line option; -v, –verbose: Test Discovery.
                                                             (line   23)
* universal newlines:                    Glossary.           (line  823)
* universal newlines; bz2.BZ2File class: De compression of files.
                                                             (line    9)
* universal newlines; file.newlines attribute: File Objects. (line  259)
* universal newlines; io.IncrementalNewlineDecoder class: Text I/O.
                                                             (line  188)
* universal newlines; io.TextIOWrapper class: Text I/O.      (line  123)
* universal newlines; open() (in module io): Module Interface.
                                                             (line  110)
* universal newlines; open() built-in function: Built-in Functions.
                                                             (line  931)
* universal newlines; str.splitlines method: String Methods<2>.
                                                             (line  330)
* universal newlines; subprocess module: Frequently Used Arguments.
                                                             (line   31)
* universal newlines; What’s new:        PEP 3116 New I/O Library.
                                                             (line   42)
* universal newlines; What’s new <1>:    New Improved and Removed Modules.
                                                             (line  137)
* universal newlines; What’s new <2>:    PEP 324 New subprocess Module.
                                                             (line   36)
* universal newlines; What’s new <3>:    PEP 277 Unicode file name support for Windows NT.
                                                             (line   37)
* universal newlines; zipfile.ZipFile.open method: ZipFile Objects.
                                                             (line   73)
* UNIX:                                  Complete Python programs.
                                                             (line   25)
* UNIX; file control:                    fcntl --- The fcntl and ioctl system calls.
                                                             (line    6)
* UNIX; I/O control:                     fcntl --- The fcntl and ioctl system calls.
                                                             (line    6)
* unixfrom (rfc822.Message attribute):   Message Objects<2>. (line  144)
* UnixMailbox (class in mailbox):        Deprecated classes and methods.
                                                             (line   39)
* Unknown (class in aetypes):            aetypes --- AppleEvent objects.
                                                             (line   34)
* UnknownHandler (class in urllib2):     urllib2 --- extensible library for opening URLs.
                                                             (line  289)
* UnknownProtocol:                       httplib --- HTTP protocol client.
                                                             (line  115)
* UnknownTransferEncoding:               httplib --- HTTP protocol client.
                                                             (line  121)
* unknown_charref() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  215)
* unknown_decl() (HTMLParser.HTMLParser method): HTMLParser Methods.
                                                             (line  135)
* unknown_endtag() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  209)
* unknown_entityref() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  222)
* unknown_open() (urllib2.BaseHandler method): BaseHandler Objects.
                                                             (line   57)
* unknown_open() (urllib2.UnknownHandler method): UnknownHandler Objects.
                                                             (line    6)
* unknown_starttag() (sgmllib.SGMLParser method): sgmllib --- Simple SGML parser.
                                                             (line  203)
* unlink() (in module os):               Files and Directories.
                                                             (line  630)
* unlink() (xml.dom.minidom.Node method): DOM Objects.       (line   10)
* unlock() (mailbox.Babyl method):       Babyl.              (line   60)
* unlock() (mailbox.Mailbox method):     Mailbox objects.    (line  242)
* unlock() (mailbox.Maildir method):     Maildir.            (line  107)
* unlock() (mailbox.mbox method):        mbox.               (line   39)
* unlock() (mailbox.MH method):          MH.                 (line   84)
* unlock() (mailbox.MMDF method):        MMDF.               (line   35)
* unlock() (mutex.mutex method):         Mutex Objects.      (line   24)
* unmimify() (in module mimify):         mimify --- MIME processing of mail messages.
                                                             (line   38)
* unpack() (in module aepack):           aepack --- Conversion between Python variables and AppleEvent data containers.
                                                             (line   64)
* unpack() (in module struct):           Functions and Exceptions.
                                                             (line   27)
* unpack() (struct.Struct method):       Classes<2>.         (line   31)
* Unpacker (class in xdrlib):            xdrlib --- Encode and decode XDR data.
                                                             (line   25)
* unpackevent() (in module aetools):     aetools --- OSA client support.
                                                             (line   32)
* unpack_array() (xdrlib.Unpacker method): Unpacker Objects. (line   91)
* unpack_bytes() (xdrlib.Unpacker method): Unpacker Objects. (line   70)
* unpack_double() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   40)
* unpack_farray() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   85)
* unpack_float() (xdrlib.Unpacker method): Unpacker Objects. (line   36)
* unpack_fopaque() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   54)
* unpack_from() (in module struct):      Functions and Exceptions.
                                                             (line   35)
* unpack_from() (struct.Struct method):  Classes<2>.         (line   36)
* unpack_fstring() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   48)
* unpack_list() (xdrlib.Unpacker method): Unpacker Objects.  (line   77)
* unpack_opaque() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   65)
* UNPACK_SEQUENCE (opcode):              Python Bytecode Instructions.
                                                             (line  390)
* unpack_string() (xdrlib.Unpacker method): Unpacker Objects.
                                                             (line   59)
* unparsedEntityDecl() (xml.sax.handler.DTDHandler method): DTDHandler Objects.
                                                             (line   12)
* UnparsedEntityDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  280)
* Unpickler (class in pickle):           Usage.              (line  154)
* UnpicklingError:                       Usage.              (line   91)
* unqdevice() (in module fl):            Functions Defined in Module fl.
                                                             (line   77)
* unquote() (in module email.utils):     email utils Miscellaneous utilities.
                                                             (line   14)
* unquote() (in module rfc822):          rfc822 --- Parse RFC 2822 mail headers.
                                                             (line   67)
* unquote() (in module urllib):          Utility functions<2>.
                                                             (line   24)
* unquote_plus() (in module urllib):     Utility functions<2>.
                                                             (line   30)
* unreachable object:                    Objects values and types.
                                                             (line   32)
* unreadline() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  130)
* unrecognized escape sequence:          String literals.    (line  127)
* unregister() (select.epoll method):    Edge and Level Trigger Polling epoll Objects.
                                                             (line   76)
* unregister() (select.poll method):     Polling Objects.    (line   65)
* unregister_archive_format() (in module shutil): Archiving operations.
                                                             (line   72)
* unregister_dialect() (in module csv):  Module Contents<2>. (line   89)
* unset() (test.test_support.EnvironmentVarGuard method): test test_support --- Utility functions for tests.
                                                             (line  274)
* unsetenv() (in module os):             Process Parameters. (line  329)
* unsubscribe() (imaplib.IMAP4 method):  IMAP4 Objects.      (line  340)
* UnsupportedOperation:                  Module Interface.   (line  167)
* untokenize() (in module tokenize):     tokenize --- Tokenizer for Python source.
                                                             (line   85)
* untouchwin() (curses.window method):   Window Objects.     (line  540)
* unused_data (zlib.Decompress attribute): zlib --- Compression compatible with gzip.
                                                             (line  178)
* unwrap() (ssl.SSLSocket method):       SSLSocket Objects.  (line  116)
* up() (in module turtle):               Drawing state.      (line   12)
* update() (collections.Counter method): Counter objects.    (line  101)
* update() (dict method):                Mapping Types --- dict.
                                                             (line  235)
* update() (hashlib.hash method):        hashlib --- Secure hashes and message digests.
                                                             (line   91)
* update() (hmac.HMAC method):           hmac --- Keyed-Hashing for Message Authentication.
                                                             (line   23)
* update() (in module turtle):           Animation control.  (line   43)
* update() (mailbox.Mailbox method):     Mailbox objects.    (line  211)
* update() (mailbox.Maildir method):     Maildir.            (line   91)
* update() (md5.md5 method):             md5 --- MD5 message digest algorithm.
                                                             (line   52)
* update() (set method):                 Set Types --- set frozenset.
                                                             (line  168)
* update() (sha.sha method):             sha --- SHA-1 message digest algorithm.
                                                             (line   35)
* update() (trace.CoverageResults method): Programmatic Interface.
                                                             (line   55)
* updatescrollbars() (FrameWork.ScrolledWindow method): ScrolledWindow Object.
                                                             (line   22)
* update_panels() (in module curses.panel): Functions<3>.    (line   23)
* update_visible() (mailbox.BabylMessage method): BabylMessage.
                                                             (line   76)
* update_wrapper() (in module functools): functools --- Higher-order functions and operations on callable objects.
                                                             (line  106)
* upper() (in module string):            Deprecated string functions.
                                                             (line  204)
* upper() (str method):                  String Methods<2>.  (line  434)
* uppercase (in module string):          String constants.   (line   62)
* urandom() (in module os):              Miscellaneous Functions.
                                                             (line    6)
* URL:                                   robotparser --- Parser for robots txt.
                                                             (line    6)
* URL <1>:                               cgi --- Common Gateway Interface support.
                                                             (line    6)
* URL <2>:                               urllib --- Open arbitrary resources by URL.
                                                             (line   14)
* URL <3>:                               urlparse --- Parse URLs into components.
                                                             (line    6)
* URL <4>:                               BaseHTTPServer --- Basic HTTP server.
                                                             (line   11)
* url (xmlrpclib.ProtocolError attribute): ProtocolError Objects.
                                                             (line   10)
* url2pathname() (in module urllib):     Utility functions<2>.
                                                             (line   61)
* URL; parsing:                          urlparse --- Parse URLs into components.
                                                             (line    6)
* urlcleanup() (in module urllib):       High-level interface.
                                                             (line  176)
* urldefrag() (in module urlparse):      urlparse --- Parse URLs into components.
                                                             (line  273)
* urlencode() (in module urllib):        Utility functions<2>.
                                                             (line   35)
* URLError:                              urllib2 --- extensible library for opening URLs.
                                                             (line   98)
* urljoin() (in module urlparse):        urlparse --- Parse URLs into components.
                                                             (line  246)
* urllib (2to3 fixer):                   Fixers.             (line  249)
* urllib (module):                       urllib --- Open arbitrary resources by URL.
                                                             (line    6)
* urllib2 (module):                      urllib2 --- extensible library for opening URLs.
                                                             (line    6)
* urlopen() (in module urllib):          High-level interface.
                                                             (line    6)
* urlopen() (in module urllib2):         urllib2 --- extensible library for opening URLs.
                                                             (line   17)
* URLopener (class in urllib):           URL Opener objects. (line    6)
* urlparse (module):                     urlparse --- Parse URLs into components.
                                                             (line    6)
* urlparse() (in module urlparse):       urlparse --- Parse URLs into components.
                                                             (line   29)
* urlretrieve() (in module urllib):      High-level interface.
                                                             (line  113)
* urlsafe_b64decode() (in module base64): base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   61)
* urlsafe_b64encode() (in module base64): base64 --- RFC 3548 Base16 Base32 Base64 Data Encodings.
                                                             (line   55)
* urlsplit() (in module urlparse):       urlparse --- Parse URLs into components.
                                                             (line  181)
* urlunparse() (in module urlparse):     urlparse --- Parse URLs into components.
                                                             (line  173)
* urlunsplit() (in module urlparse):     urlparse --- Parse URLs into components.
                                                             (line  235)
* urn (uuid.UUID attribute):             uuid --- UUID objects according to RFC 4122.
                                                             (line   99)
* UseForeignDTD() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line   65)
* USER:                                  getpass --- Portable password input.
                                                             (line   41)
* user (module):                         user --- User-specific configuration hook.
                                                             (line    6)
* user() (poplib.POP3 method):           POP3 Objects.       (line   24)
* user-defined; function:                The standard type hierarchy.
                                                             (line  294)
* user-defined; function; call:          Calls.              (line  126)
* user-defined; method:                  The standard type hierarchy.
                                                             (line  368)
* user; configuration; file:             user --- User-specific configuration hook.
                                                             (line    9)
* user; effective id:                    Process Parameters. (line   72)
* user; id:                              Process Parameters. (line  173)
* user; id, setting:                     Process Parameters. (line  300)
* UserDict (class in UserDict):          UserDict --- Class wrapper for dictionary objects.
                                                             (line   26)
* UserDict (module):                     UserDict --- Class wrapper for dictionary objects.
                                                             (line    6)
* UserList (class in UserList):          UserList --- Class wrapper for list objects.
                                                             (line   29)
* UserList (module):                     UserList --- Class wrapper for list objects.
                                                             (line    6)
* USERNAME:                              getpass --- Portable password input.
                                                             (line   42)
* USERPROFILE:                           os path --- Common pathname manipulations.
                                                             (line   93)
* USERPROFILE <1>:                       Location and names of config files.
                                                             (line   67)
* userptr() (curses.panel.Panel method): Panel Objects.      (line   56)
* UserString (class in UserString):      UserString --- Class wrapper for string objects.
                                                             (line   24)
* UserString (module):                   UserString --- Class wrapper for string objects.
                                                             (line    6)
* UserWarning:                           Built-in Exceptions.
                                                             (line  457)
* USER_BASE:                             New and Improved Modules.
                                                             (line  473)
* USER_BASE (in module site):            site --- Site-specific configuration hook.
                                                             (line  120)
* user_call() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  204)
* user_exception() (bdb.Bdb method):     bdb --- Debugger framework.
                                                             (line  221)
* user_line() (bdb.Bdb method):          bdb --- Debugger framework.
                                                             (line  210)
* user_return() (bdb.Bdb method):        bdb --- Debugger framework.
                                                             (line  216)
* USER_SITE (in module site):            site --- Site-specific configuration hook.
                                                             (line  107)
* use_default_colors() (in module curses): Functions<2>.     (line  534)
* use_env() (in module curses):          Functions<2>.       (line  524)
* use_rawinput (cmd.Cmd attribute):      Cmd Objects.        (line  162)
* USTAR_FORMAT (in module tarfile):      tarfile --- Read and write tar archive files.
                                                             (line  195)
* UTC:                                   time --- Time access and conversions.
                                                             (line   45)
* utcfromtimestamp() (datetime.datetime class method): datetime Objects.
                                                             (line   92)
* utcnow() (datetime.datetime class method): datetime Objects.
                                                             (line   62)
* utcoffset() (datetime.datetime method): datetime Objects.  (line  332)
* utcoffset() (datetime.time method):    time Objects.       (line  130)
* utcoffset() (datetime.tzinfo method):  tzinfo Objects.     (line   30)
* utctimetuple() (datetime.datetime method): datetime Objects.
                                                             (line  368)
* utime() (in module os):                Files and Directories.
                                                             (line  638)
* uu (module):                           uu --- Encode and decode uuencode files.
                                                             (line    6)
* UUID (class in uuid):                  uuid --- UUID objects according to RFC 4122.
                                                             (line   18)
* uuid (module):                         uuid --- UUID objects according to RFC 4122.
                                                             (line    6)
* uuid1:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  135)
* uuid1() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  127)
* uuid3:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  140)
* uuid3() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  135)
* uuid4:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  144)
* uuid4() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  140)
* uuid5:                                 uuid --- UUID objects according to RFC 4122.
                                                             (line  149)
* uuid5() (in module uuid):              uuid --- UUID objects according to RFC 4122.
                                                             (line  144)
* UuidCreate() (in module msilib):       msilib --- Read and write Microsoft Installer files.
                                                             (line   37)
* validator() (in module wsgiref.validate): wsgiref validate --- WSGI conformance checker.
                                                             (line   22)
* value (Cookie.Morsel attribute):       Morsel Objects.     (line   38)
* value (cookielib.Cookie attribute):    Cookie Objects.     (line   31)
* value (ctypes._SimpleCData attribute): Fundamental data types<2>.
                                                             (line   19)
* value (xml.dom.Attr attribute):        Attr Objects.       (line   23)
* value of an object:                    Objects values and types.
                                                             (line   11)
* Value() (in module multiprocessing):   Shared ctypes Objects.
                                                             (line    9)
* Value() (in module multiprocessing.sharedctypes): The multiprocessing sharedctypes module.
                                                             (line   67)
* Value() (multiprocessing.managers.SyncManager method): Managers.
                                                             (line  177)
* ValueError:                            Built-in Exceptions.
                                                             (line  418)
* valuerefs() (weakref.WeakValueDictionary method): weakref --- Weak references.
                                                             (line  197)
* values() (dict method):                Mapping Types --- dict.
                                                             (line  249)
* values() (email.message.Message method): email message Representing an email message.
                                                             (line  241)
* values() (mailbox.Mailbox method):     Mailbox objects.    (line  112)
* ValuesView (class in collections):     Collections Abstract Base Classes.
                                                             (line  111)
* value_decode() (Cookie.BaseCookie method): Cookie Objects<2>.
                                                             (line    6)
* value_encode() (Cookie.BaseCookie method): Cookie Objects<2>.
                                                             (line   12)
* variant (uuid.UUID attribute):         uuid --- UUID objects according to RFC 4122.
                                                             (line  103)
* varray() (in module gl):               gl --- Graphics Library interface.
                                                             (line   59)
* vars() (built-in function):            Built-in Functions. (line 1577)
* VBAR (in module token):                token --- Constants used with Python parse trees.
                                                             (line   40)
* vbar (ScrolledText.ScrolledText attribute): ScrolledText --- Scrolled Text Widget.
                                                             (line   30)
* VBAREQUAL (in module token):           token --- Constants used with Python parse trees.
                                                             (line   40)
* Vec2D (class in turtle):               The public classes of the module turtle.
                                                             (line   83)
* VERBOSE (in module re):                Module Contents.    (line   84)
* verbose (in module tabnanny):          tabnanny --- Detection of ambiguous indentation.
                                                             (line   26)
* verbose (in module test.test_support): test test_support --- Utility functions for tests.
                                                             (line   29)
* verify() (smtplib.SMTP method):        SMTP Objects.       (line   88)
* verify_request() (SocketServer.BaseServer method): Server Objects.
                                                             (line  146)
* version (cookielib.Cookie attribute):  Cookie Objects.     (line   19)
* version (httplib.HTTPResponse attribute): HTTPResponse Objects.
                                                             (line   33)
* version (in module curses):            Constants<3>.       (line   18)
* version (in module marshal):           marshal --- Internal Python object serialization.
                                                             (line  103)
* version (in module sqlite3):           Module functions and constants.
                                                             (line    6)
* version (in module sys):               sys --- System-specific parameters and functions.
                                                             (line 1066)
* version (in module sys) <1>:           Process-wide parameters.
                                                             (line  107)
* version (in module sys) <2>:           Process-wide parameters.
                                                             (line  142)
* version (in module sys) <3>:           Process-wide parameters.
                                                             (line  153)
* version (urllib.URLopener attribute):  URL Opener objects. (line   73)
* version (uuid.UUID attribute):         uuid --- UUID objects according to RFC 4122.
                                                             (line  110)
* version() (in module platform):        Cross Platform.     (line  134)
* version_info (in module sqlite3):      Module functions and constants.
                                                             (line   11)
* version_info (in module sys):          sys --- System-specific parameters and functions.
                                                             (line 1083)
* version_string() (BaseHTTPServer.BaseHTTPRequestHandler method): BaseHTTPServer --- Basic HTTP server.
                                                             (line  225)
* vformat() (string.Formatter method):   String Formatting.  (line   26)
* videoreader (module):                  videoreader --- Read QuickTime movies.
                                                             (line    6)
* view:                                  Glossary.           (line  831)
* viewitems() (dict method):             Mapping Types --- dict.
                                                             (line  254)
* viewkeys() (dict method):              Mapping Types --- dict.
                                                             (line  261)
* viewvalues() (dict method):            Mapping Types --- dict.
                                                             (line  268)
* virtual machine:                       Glossary.           (line  840)
* visit() (ast.NodeVisitor method):      ast Helpers.        (line   82)
* visitproc (C type):                    Supporting Cyclic Garbage Collection.
                                                             (line  105)
* vline() (curses.window method):        Window Objects.     (line  545)
* VMSError:                              Built-in Exceptions.
                                                             (line  425)
* vnarray() (in module gl):              gl --- Graphics Library interface.
                                                             (line   80)
* voidcmd() (ftplib.FTP method):         FTP Objects.        (line   66)
* volume (zipfile.ZipInfo attribute):    ZipInfo Objects.    (line   81)
* vonmisesvariate() (in module random):  random --- Generate pseudo-random numbers.
                                                             (line  262)
* W (module):                            W --- Widgets built on FrameWork.
                                                             (line    6)
* wait() (in module os):                 Process Management. (line  506)
* wait() (multiprocessing.pool.AsyncResult method): Process Pools.
                                                             (line  133)
* wait() (popen2.Popen3 method):         Popen3 and Popen4 Objects.
                                                             (line   14)
* wait() (subprocess.Popen method):      Popen Objects.      (line   13)
* wait() (threading.Condition method):   Condition Objects.  (line   76)
* wait() (threading.Event method):       Event Objects.      (line   36)
* wait3() (in module os):                Process Management. (line  547)
* wait4() (in module os):                Process Management. (line  560)
* waitpid() (in module os):              Process Management. (line  516)
* walk() (email.message.Message method): email message Representing an email message.
                                                             (line  525)
* walk() (in module ast):                ast Helpers.        (line   65)
* walk() (in module compiler):           The basic interface.
                                                             (line   23)
* walk() (in module compiler.visitor):   Using Visitors to Walk ASTs.
                                                             (line   17)
* walk() (in module os):                 Files and Directories.
                                                             (line  657)
* walk() (in module os.path):            os path --- Common pathname manipulations.
                                                             (line  306)
* walk_packages() (in module pkgutil):   pkgutil --- Package extension utility.
                                                             (line  143)
* want (doctest.Example attribute):      Example Objects.    (line   25)
* warn() (distutils.ccompiler.CCompiler method): distutils ccompiler --- CCompiler base class.
                                                             (line  508)
* warn() (distutils.text_file.TextFile method): distutils text_file --- The TextFile class.
                                                             (line  101)
* warn() (in module warnings):           Available Functions.
                                                             (line    6)
* Warning:                               Built-in Exceptions.
                                                             (line  453)
* warning() (in module logging):         Module-Level Functions.
                                                             (line   91)
* warning() (logging.Logger method):     Logger Objects.     (line  158)
* warning() (xml.sax.handler.ErrorHandler method): ErrorHandler Objects.
                                                             (line   29)
* warnings:                              warnings --- Warning control.
                                                             (line    6)
* warnings (module):                     warnings --- Warning control.
                                                             (line    6)
* WarningsRecorder (class in test.test_support): test test_support --- Utility functions for tests.
                                                             (line  278)
* warnoptions (in module sys):           sys --- System-specific parameters and functions.
                                                             (line 1098)
* warnpy3k() (in module warnings):       Available Functions.
                                                             (line   46)
* warn_explicit() (in module warnings):  Available Functions.
                                                             (line   26)
* wasSuccessful() (unittest.TestResult method): Loading and running tests.
                                                             (line  233)
* WatchedFileHandler (class in logging.handlers): WatchedFileHandler.
                                                             (line   26)
* wave (module):                         wave --- Read and write WAV files.
                                                             (line    6)
* WCONTINUED (in module os):             Process Management. (line  581)
* WCOREDUMP() (in module os):            Process Management. (line  605)
* WeakKeyDictionary (class in weakref):  weakref --- Weak references.
                                                             (line  139)
* weakref (module):                      weakref --- Weak references.
                                                             (line    6)
* WeakSet (class in weakref):            weakref --- Weak references.
                                                             (line  203)
* WeakValueDictionary (class in weakref): weakref --- Weak references.
                                                             (line  174)
* webbrowser (module):                   webbrowser --- Convenient Web-browser controller.
                                                             (line    6)
* weekday() (datetime.date method):      date Objects.       (line  163)
* weekday() (datetime.datetime method):  datetime Objects.   (line  386)
* weekday() (in module calendar):        calendar --- General calendar-related functions.
                                                             (line  229)
* weekheader() (in module calendar):     calendar --- General calendar-related functions.
                                                             (line  234)
* weibullvariate() (in module random):   random --- Generate pseudo-random numbers.
                                                             (line  274)
* WEXITSTATUS() (in module os):          Process Management. (line  644)
* wfile (BaseHTTPServer.BaseHTTPRequestHandler attribute): BaseHTTPServer --- Basic HTTP server.
                                                             (line   93)
* what() (in module imghdr):             imghdr --- Determine the type of an image.
                                                             (line   15)
* what() (in module sndhdr):             sndhdr --- Determine type of sound file.
                                                             (line   25)
* whathdr() (in module sndhdr):          sndhdr --- Determine type of sound file.
                                                             (line   31)
* whichdb (module):                      whichdb --- Guess which DBM module created a database.
                                                             (line    6)
* whichdb() (in module whichdb):         whichdb --- Guess which DBM module created a database.
                                                             (line   15)
* whitespace:                            Indentation.        (line    6)
* whitespace (in module string):         String constants.   (line   70)
* whitespace (shlex.shlex attribute):    shlex Objects.      (line  101)
* whitespace_split (shlex.shlex attribute): shlex Objects.   (line  129)
* whseed() (in module random):           random --- Generate pseudo-random numbers.
                                                             (line  291)
* WichmannHill (class in random):        random --- Generate pseudo-random numbers.
                                                             (line  281)
* Widget (class in ttk):                 ttk Widget.         (line   10)
* width (textwrap.TextWrapper attribute): textwrap --- Text wrapping and filling.
                                                             (line  102)
* width() (in module turtle):            Drawing state.      (line   18)
* WIFCONTINUED() (in module os):         Process Management. (line  614)
* WIFEXITED() (in module os):            Process Management. (line  637)
* WIFSIGNALED() (in module os):          Process Management. (line  630)
* WIFSTOPPED() (in module os):           Process Management. (line  623)
* Wimp$ScrapDir:                         tempfile --- Generate temporary files and directories.
                                                             (line  212)
* win32_ver() (in module platform):      Windows Platform.   (line    6)
* WinDLL (class in ctypes):              Loading shared libraries.
                                                             (line   27)
* window manager (widgets):              The Window Manager. (line    6)
* window() (curses.panel.Panel method):  Panel Objects.      (line   61)
* Window() (in module FrameWork):        FrameWork --- Interactive application framework.
                                                             (line   79)
* windowbounds() (in module FrameWork):  FrameWork --- Interactive application framework.
                                                             (line   88)
* Windows ini file:                      ConfigParser --- Configuration file parser.
                                                             (line   11)
* WindowsError:                          Built-in Exceptions.
                                                             (line  429)
* window_height() (in module turtle):    Special Turtle methods.
                                                             (line   86)
* window_height() (in module turtle) <1>: Settings and special methods.
                                                             (line  101)
* window_width() (in module turtle):     Special Turtle methods.
                                                             (line   86)
* window_width() (in module turtle) <1>: Settings and special methods.
                                                             (line  108)
* WinError() (in module ctypes):         Utility functions.  (line  214)
* WINFUNCTYPE() (in module ctypes):      Function prototypes.
                                                             (line   26)
* WinSock:                               select --- Waiting for I/O completion.
                                                             (line   94)
* winsound (module):                     winsound --- Sound-playing interface for Windows.
                                                             (line    6)
* winver (in module sys):                sys --- System-specific parameters and functions.
                                                             (line 1104)
* WITH_CLEANUP (opcode):                 Python Bytecode Instructions.
                                                             (line  350)
* WMAvailable() (in module MacOS):       MacOS --- Access to Mac OS interpreter features.
                                                             (line   87)
* WNOHANG (in module os):                Process Management. (line  573)
* wordchars (shlex.shlex attribute):     shlex Objects.      (line   95)
* World Wide Web:                        robotparser --- Parser for robots txt.
                                                             (line    6)
* World Wide Web <1>:                    Internet Protocols and Support.
                                                             (line    6)
* World Wide Web <2>:                    urllib --- Open arbitrary resources by URL.
                                                             (line   14)
* World Wide Web <3>:                    urlparse --- Parse URLs into components.
                                                             (line    6)
* wrap() (in module textwrap):           textwrap --- Text wrapping and filling.
                                                             (line   19)
* wrap() (textwrap.TextWrapper method):  textwrap --- Text wrapping and filling.
                                                             (line  210)
* wrapper() (in module curses):          Functions<2>.       (line  543)
* wraps() (in module functools):         functools --- Higher-order functions and operations on callable objects.
                                                             (line  127)
* wrap_socket() (in module ssl):         Functions Constants and Exceptions.
                                                             (line   14)
* wrap_text() (in module distutils.fancy_getopt): distutils fancy_getopt --- Wrapper around the standard getopt module.
                                                             (line   32)
* writable() (asyncore.dispatcher method): asyncore --- Asynchronous socket handler.
                                                             (line  153)
* writable() (io.IOBase method):         I/O Base Classes.   (line  142)
* write() (array.array method):          array --- Efficient arrays of numeric values.
                                                             (line  236)
* write() (bz2.BZ2File method):          De compression of files.
                                                             (line   94)
* write() (code.InteractiveInterpreter method): Interactive Interpreter Objects.
                                                             (line   60)
* write() (codecs.StreamWriter method):  StreamWriter Objects.
                                                             (line   45)
* write() (ConfigParser.RawConfigParser method): RawConfigParser Objects.
                                                             (line  113)
* write() (email.generator.Generator method): email generator Generating MIME documents.
                                                             (line   80)
* write() (file method):                 File Objects.       (line  197)
* write() (in module imgfile):           imgfile --- Support for SGI imglib files.
                                                             (line   60)
* write() (in module mmap):              mmap --- Memory-mapped file support.
                                                             (line  230)
* write() (in module os):                File Descriptor Operations.
                                                             (line  243)
* write() (in module turtle):            More drawing control.
                                                             (line   29)
* write() (io.BufferedIOBase method):    I/O Base Classes.   (line  288)
* write() (io.BufferedWriter method):    Buffered Streams.   (line   99)
* write() (io.RawIOBase method):         I/O Base Classes.   (line  196)
* write() (io.TextIOBase method):        Text I/O.           (line   95)
* write() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   39)
* write() (telnetlib.Telnet method):     Telnet Objects.     (line  101)
* write() (xml.etree.ElementTree.ElementTree method): ElementTree Objects.
                                                             (line   67)
* write() (zipfile.ZipFile method):      ZipFile Objects.    (line  175)
* writeall() (ossaudiodev.oss_audio_device method): Audio Device Objects.
                                                             (line   48)
* writebufferproc (C type):              Buffer Object Structures.
                                                             (line   85)
* writeframes() (aifc.aifc method):      aifc --- Read and write AIFF and AIFC files.
                                                             (line  183)
* writeframes() (sunau.AU_write method): AU_write Objects.   (line   47)
* writeframes() (wave.Wave_write method): Wave_write Objects.
                                                             (line   52)
* writeframesraw() (aifc.aifc method):   aifc --- Read and write AIFF and AIFC files.
                                                             (line  188)
* writeframesraw() (sunau.AU_write method): AU_write Objects.
                                                             (line   43)
* writeframesraw() (wave.Wave_write method): Wave_write Objects.
                                                             (line   48)
* writeheader() (csv.DictWriter method): Writer Objects.     (line   34)
* writelines() (bz2.BZ2File method):     De compression of files.
                                                             (line  100)
* writelines() (codecs.StreamWriter method): StreamWriter Objects.
                                                             (line   49)
* writelines() (file method):            File Objects.       (line  203)
* writelines() (io.IOBase method):       I/O Base Classes.   (line  148)
* writePlist() (in module plistlib):     plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   49)
* writePlistToResource() (in module plistlib): plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   74)
* writePlistToString() (in module plistlib): plistlib --- Generate and parse Mac OS X plist files.
                                                             (line   62)
* writepy() (zipfile.PyZipFile method):  PyZipFile Objects.  (line   10)
* writer (formatter.formatter attribute): The Formatter Interface.
                                                             (line   22)
* writer() (in module csv):              Module Contents<2>. (line   48)
* writerow() (csv.csvwriter method):     Writer Objects.     (line   15)
* writerows() (csv.csvwriter method):    Writer Objects.     (line   20)
* writestr() (zipfile.ZipFile method):   ZipFile Objects.    (line  200)
* writexml() (xml.dom.minidom.Node method): DOM Objects.     (line   20)
* write_byte() (in module mmap):         mmap --- Memory-mapped file support.
                                                             (line  238)
* write_docstringdict() (in module turtle): Translation of docstrings into different languages.
                                                             (line   10)
* write_file() (in module distutils.file_util): distutils file_util --- Single file operations.
                                                             (line   44)
* write_history_file() (in module readline): readline --- GNU readline interface.
                                                             (line   46)
* WRITE_RESTRICTED:                      Generic Attribute Management.
                                                             (line  102)
* write_results() (trace.CoverageResults method): Programmatic Interface.
                                                             (line   60)
* writing; values:                       Expression statements.
                                                             (line   18)
* writing; values <1>:                   The print statement.
                                                             (line   27)
* WrongDocumentErr:                      Exceptions<6>.      (line   99)
* wsgiref (module):                      wsgiref --- WSGI Utilities and Reference Implementation.
                                                             (line    6)
* wsgiref.handlers (module):             wsgiref handlers -- server/gateway base classes.
                                                             (line    6)
* wsgiref.headers (module):              wsgiref headers -- WSGI response header tools.
                                                             (line    6)
* wsgiref.simple_server (module):        wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line    6)
* wsgiref.util (module):                 wsgiref util -- WSGI environment utilities.
                                                             (line    6)
* wsgiref.validate (module):             wsgiref validate --- WSGI conformance checker.
                                                             (line    6)
* WSGIRequestHandler (class in wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   75)
* WSGIServer (class in wsgiref.simple_server): wsgiref simple_server -- a simple WSGI HTTP server.
                                                             (line   45)
* wsgi_file_wrapper (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  234)
* wsgi_multiprocess (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  121)
* wsgi_multithread (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  114)
* wsgi_run_once (wsgiref.handlers.BaseHandler attribute): wsgiref handlers -- server/gateway base classes.
                                                             (line  128)
* wShowWindow (subprocess.STARTUPINFO attribute): Windows Popen Helpers.
                                                             (line   44)
* WSTOPSIG() (in module os):             Process Management. (line  651)
* wstring_at() (in module ctypes):       Utility functions.  (line  222)
* ws_comma (2to3 fixer):                 Fixers.             (line  254)
* WTERMSIG() (in module os):             Process Management. (line  657)
* WUNTRACED (in module os):              Process Management. (line  591)
* WWW:                                   robotparser --- Parser for robots txt.
                                                             (line    6)
* WWW <1>:                               Internet Protocols and Support.
                                                             (line    6)
* WWW <2>:                               urllib --- Open arbitrary resources by URL.
                                                             (line   14)
* WWW <3>:                               urlparse --- Parse URLs into components.
                                                             (line    6)
* WWW; server:                           cgi --- Common Gateway Interface support.
                                                             (line    6)
* WWW; server <1>:                       BaseHTTPServer --- Basic HTTP server.
                                                             (line   11)
* W_OK (in module os):                   Files and Directories.
                                                             (line   60)
* X (in module re):                      Module Contents.    (line   84)
* X509 certificate:                      SSLSocket Objects.  (line  125)
* xatom() (imaplib.IMAP4 method):        IMAP4 Objects.      (line  344)
* xcor() (in module turtle):             Tell Turtle's state.
                                                             (line   33)
* XDR:                                   Data stream format. (line    6)
* XDR <1>:                               xdrlib --- Encode and decode XDR data.
                                                             (line    6)
* xdrlib (module):                       xdrlib --- Encode and decode XDR data.
                                                             (line    6)
* xgtitle() (nntplib.NNTP method):       NNTP Objects.       (line  191)
* xhdr() (nntplib.NNTP method):          NNTP Objects.       (line  153)
* XHTML:                                 HTMLParser --- Simple HTML and XHTML parser.
                                                             (line   13)
* XHTML_NAMESPACE (in module xml.dom):   Module Contents<3>. (line   59)
* xml (module):                          XML Processing Modules.
                                                             (line    6)
* XML() (in module xml.etree.ElementTree): Functions<4>.     (line  130)
* xml.dom (module):                      xml dom --- The Document Object Model API.
                                                             (line    6)
* xml.dom.minidom (module):              xml dom minidom --- Minimal DOM implementation.
                                                             (line    6)
* xml.dom.pulldom (module):              xml dom pulldom --- Support for building partial DOM trees.
                                                             (line    6)
* xml.etree.ElementTree (module):        xml etree ElementTree --- The ElementTree XML API.
                                                             (line    6)
* xml.parsers.expat (module):            xml parsers expat --- Fast XML parsing using Expat.
                                                             (line    6)
* xml.sax (module):                      xml sax --- Support for SAX2 parsers.
                                                             (line    6)
* xml.sax.handler (module):              xml sax handler --- Base classes for SAX handlers.
                                                             (line    6)
* xml.sax.saxutils (module):             xml sax saxutils --- SAX Utilities.
                                                             (line    6)
* xml.sax.xmlreader (module):            xml sax xmlreader --- Interface for XML parsers.
                                                             (line    6)
* xmlcharrefreplace_errors() (in module codecs): codecs --- Codec registry and base classes.
                                                             (line  224)
* XmlDeclHandler() (xml.parsers.expat.xmlparser method): XMLParser Objects<2>.
                                                             (line  205)
* XMLFilterBase (class in xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   63)
* XMLGenerator (class in xml.sax.saxutils): xml sax saxutils --- SAX Utilities.
                                                             (line   54)
* XMLID() (in module xml.etree.ElementTree): Functions<4>.   (line  138)
* XMLNS_NAMESPACE (in module xml.dom):   Module Contents<3>. (line   51)
* XMLParser (class in xml.etree.ElementTree): XMLParser Objects.
                                                             (line    6)
* XMLParserType (in module xml.parsers.expat): xml parsers expat --- Fast XML parsing using Expat.
                                                             (line   35)
* XMLReader (class in xml.sax.xmlreader): xml sax xmlreader --- Interface for XML parsers.
                                                             (line   14)
* xmlrpclib (module):                    xmlrpclib --- XML-RPC client access.
                                                             (line    6)
* XML_NAMESPACE (in module xml.dom):     Module Contents<3>. (line   44)
* xor() (in module operator):            operator --- Standard operators as functions.
                                                             (line  176)
* xover() (nntplib.NNTP method):         NNTP Objects.       (line  208)
* xpath() (nntplib.NNTP method):         NNTP Objects.       (line  223)
* xrange (2to3 fixer):                   Fixers.             (line  259)
* xrange() (built-in function):          Built-in Functions. (line 1591)
* XRangeType (in module types):          types --- Names for built-in types.
                                                             (line  157)
* xreadlines (2to3 fixer):               Fixers.             (line  264)
* xreadlines() (bz2.BZ2File method):     De compression of files.
                                                             (line   65)
* xreadlines() (file method):            File Objects.       (line  143)
* xview() (ttk.Treeview method):         ttk Treeview.       (line  313)
* X_OK (in module os):                   Files and Directories.
                                                             (line   65)
* Y2K:                                   time --- Time access and conversions.
                                                             (line   27)
* ycor() (in module turtle):             Tell Turtle's state.
                                                             (line   45)
* year (datetime.date attribute):        date Objects.       (line   71)
* year (datetime.datetime attribute):    datetime Objects.   (line  152)
* Year 2000:                             time --- Time access and conversions.
                                                             (line   27)
* Year 2038:                             time --- Time access and conversions.
                                                             (line   23)
* yeardatescalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   83)
* yeardays2calendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   91)
* yeardayscalendar() (calendar.Calendar method): calendar --- General calendar-related functions.
                                                             (line   98)
* YESEXPR (in module locale):            locale --- Internationalization services.
                                                             (line  232)
* yield; expression:                     Yield expressions.  (line    6)
* YIELD_VALUE (opcode):                  Python Bytecode Instructions.
                                                             (line  306)
* yiq_to_rgb() (in module colorsys):     colorsys --- Conversions between color systems.
                                                             (line   32)
* yview() (ttk.Treeview method):         ttk Treeview.       (line  317)
* Zen of Python:                         Glossary.           (line  846)
* ZeroDivisionError:                     Built-in Exceptions.
                                                             (line  444)
* zfill() (in module string):            Deprecated string functions.
                                                             (line  220)
* zfill() (str method):                  String Methods<2>.  (line  444)
* zip (2to3 fixer):                      Fixers.             (line  268)
* zip() (built-in function):             Built-in Functions. (line 1617)
* zip() (in module future_builtins):     future_builtins --- Python 3 builtins.
                                                             (line   62)
* ZipFile (class in zipfile):            ZipFile Objects.    (line    6)
* zipfile (module):                      zipfile --- Work with ZIP archives.
                                                             (line    6)
* zipimport (module):                    zipimport --- Import modules from Zip archives.
                                                             (line    6)
* zipimporter (class in zipimport):      zipimporter Objects.
                                                             (line    8)
* ZipImportError:                        zipimport --- Import modules from Zip archives.
                                                             (line   57)
* ZipInfo (class in zipfile):            zipfile --- Work with ZIP archives.
                                                             (line   44)
* ZIP_DEFLATED (in module zipfile):      zipfile --- Work with ZIP archives.
                                                             (line   68)
* ZIP_STORED (in module zipfile):        zipfile --- Work with ZIP archives.
                                                             (line   64)
* zlib (module):                         zlib --- Compression compatible with gzip.
                                                             (line    6)

