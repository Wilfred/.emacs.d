This is python.info, produced by makeinfo version 5.2 from python.texi.

     Python 2.7.8, November 06, 2014

     Georg Brandl

     Copyright © 1990-2014, Python Software Foundation

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Python: (python.info). The Python Programming Language
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: python.info,  Node: Non-essential Built-in Functions,  Next: Built-in Constants,  Prev: Built-in Functions,  Up: The Python Standard Library

5.3 Non-essential Built-in Functions
====================================

There are several built-in functions that are no longer essential to
learn, know or use in modern Python programming.  They have been kept
here to maintain backwards compatibility with programs written for older
versions of Python.

  Python programmers, trainers, students and book writers should feel
free to bypass these functions without concerns about missing something
important.

 -- Function: apply (function, args[, keywords])

     The _function_ argument must be a callable object (a user-defined
     or built-in function or method, or a class object) and the _args_
     argument must be a sequence.  The _function_ is called with _args_
     as the argument list; the number of arguments is the length of the
     tuple.  If the optional _keywords_ argument is present, it must be
     a dictionary whose keys are strings.  It specifies keyword
     arguments to be added to the end of the argument list.  Calling
     *note apply(): 303. is different from just calling
     ‘function(args)’, since in that case there is always exactly one
     argument.  The use of *note apply(): 303. is equivalent to
     ‘function(*args, **keywords)’.

     Deprecated since version 2.3: Use ‘function(*args, **keywords)’
     instead of ‘apply(function, args, keywords)’ (see *note Unpacking
     Argument Lists: 550.).

 -- Function: buffer (object[, offset[, size]])

     The _object_ argument must be an object that supports the buffer
     call interface (such as strings, arrays, and buffers).  A new
     buffer object will be created which references the _object_
     argument.  The buffer object will be a slice from the beginning of
     _object_ (or from the specified _offset_).  The slice will extend
     to the end of _object_ (or will have a length given by the _size_
     argument).

 -- Function: coerce (x, y)

     Return a tuple consisting of the two numeric arguments converted to
     a common type, using the same rules as used by arithmetic
     operations.  If coercion is not possible, raise *note TypeError:
     218.

 -- Function: intern (string)

     Enter _string_ in the table of "interned" strings and return the
     interned string – which is _string_ itself or a copy.  Interning
     strings is useful to gain a little performance on dictionary lookup
     – if the keys in a dictionary are interned, and the lookup key is
     interned, the key comparisons (after hashing) can be done by a
     pointer compare instead of a string compare.  Normally, the names
     used in Python programs are automatically interned, and the
     dictionaries used to hold module, class or instance attributes have
     interned keys.

     Changed in version 2.3: Interned strings are not immortal (like
     they used to be in Python 2.2 and before); you must keep a
     reference to the return value of *note intern(): 87c. around to
     benefit from it.


File: python.info,  Node: Built-in Constants,  Next: Built-in Types,  Prev: Non-essential Built-in Functions,  Up: The Python Standard Library

5.4 Built-in Constants
======================

A small number of constants live in the built-in namespace.  They are:

 -- Data: False

     The false value of the *note bool: 43c. type.

     New in version 2.3.

 -- Data: True

     The true value of the *note bool: 43c. type.

     New in version 2.3.

 -- Data: None

     The sole value of *note types.NoneType: 898.  ‘None’ is frequently
     used to represent the absence of a value, as when default arguments
     are not passed to a function.

     Changed in version 2.4: Assignments to ‘None’ are illegal and raise
     a *note SyntaxError: 498.

 -- Data: NotImplemented

     Special value which can be returned by the "rich comparison"
     special methods (*note __eq__(): 21c, *note __lt__(): 21d, and
     friends), to indicate that the comparison is not implemented with
     respect to the other type.

 -- Data: Ellipsis

     Special value used in conjunction with extended slicing syntax.

 -- Data: __debug__

     This constant is true if Python was not started with an *note -O:
     453. option.  See also the *note assert: 452. statement.

     Note: The names *note None: 39a. and *note __debug__: 80b. cannot
     be reassigned (assignments to them, even as an attribute name,
     raise *note SyntaxError: 498.), so they can be considered "true"
     constants.

     Changed in version 2.7: Assignments to ‘__debug__’ as an attribute
     became illegal.

* Menu:

* Constants added by the site module:: 


File: python.info,  Node: Constants added by the site module,  Up: Built-in Constants

5.4.1 Constants added by the ‘site’ module
------------------------------------------

The *note site: 158. module (which is imported automatically during
startup, except if the *note -S: 641. command-line option is given) adds
several constants to the built-in namespace.  They are useful for the
interactive interpreter shell and should not be used in programs.

 -- Data: quit ([code=None])
 -- Data: exit ([code=None])

     Objects that when printed, print a message like "Use quit() or
     Ctrl-D (i.e.  EOF) to exit", and when called, raise *note
     SystemExit: 332. with the specified exit code.

 -- Data: copyright
 -- Data: license
 -- Data: credits

     Objects that when printed, print a message like "Type license() to
     see the full license text", and when called, display the
     corresponding text in a pager-like fashion (one screen at a time).


File: python.info,  Node: Built-in Types,  Next: Built-in Exceptions,  Prev: Built-in Constants,  Up: The Python Standard Library

5.5 Built-in Types
==================

The following sections describe the standard types that are built into
the interpreter.

     Note: Historically (until release 2.2), Python’s built-in types
     have differed from user-defined types because it was not possible
     to use the built-in types as the basis for object-oriented
     inheritance.  This limitation no longer exists.

  The principal built-in types are numerics, sequences, mappings, files,
classes, instances and exceptions.

  Some operations are supported by several object types; in particular,
practically all objects can be compared, tested for truth value, and
converted to a string (with the *note repr(): 876. function or the
slightly different *note str(): 1ea. function).  The latter function is
implicitly used when an object is written by the *note print(): 30b.
function.

* Menu:

* Truth Value Testing:: 
* Boolean Operations: Boolean Operations --- and or not. and, or, not
* Comparisons: Comparisons<2>. 
* Numeric Types: Numeric Types --- int float long complex. int, float, long, complex
* Iterator Types:: 
* Sequence Types: Sequence Types --- str unicode list tuple bytearray buffer xrange. str, unicode, list, tuple, bytearray, buffer, xrange
* Set Types: Set Types --- set frozenset. set, frozenset
* Mapping Types: Mapping Types --- dict. dict
* File Objects:: 
* memoryview type:: 
* Context Manager Types:: 
* Other Built-in Types:: 
* Special Attributes:: 


File: python.info,  Node: Truth Value Testing,  Next: Boolean Operations --- and or not,  Up: Built-in Types

5.5.1 Truth Value Testing
-------------------------

Any object can be tested for truth value, for use in an *note if: 42c.
or *note while: 52b. condition or as operand of the Boolean operations
below.  The following values are considered false:

   * ‘None’

   * ‘False’

   * zero of any numeric type, for example, ‘0’, ‘0L’, ‘0.0’, ‘0j’.

   * any empty sequence, for example, ‘''’, ‘()’, ‘[]’.

   * any empty mapping, for example, ‘{}’.

   * instances of user-defined classes, if the class defines a *note
     __nonzero__(): 70c. or *note __len__(): 40a. method, when that
     method returns the integer zero or *note bool: 43c. value ‘False’.
     (1)

  All other values are considered true — so objects of many types are
always true.

  Operations and built-in functions that have a Boolean result always
return ‘0’ or ‘False’ for false and ‘1’ or ‘True’ for true, unless
otherwise stated.  (Important exception: the Boolean operations ‘or’ and
‘and’ always return one of their operands.)

   ---------- Footnotes ----------

   (1) Additional information on these special methods may be found in
the Python Reference Manual (*note Basic customization: 708.).


File: python.info,  Node: Boolean Operations --- and or not,  Next: Comparisons<2>,  Prev: Truth Value Testing,  Up: Built-in Types

5.5.2 Boolean Operations — ‘and’, ‘or’, ‘not’
---------------------------------------------

These are the Boolean operations, ordered by ascending priority:

Operation         Result                                Notes
                                                        
--------------------------------------------------------------------
                                                        
‘x or y’          if _x_ is false, then _y_, else _x_   (1)
                                                        
                                                        
‘x and y’         if _x_ is false, then _x_, else _y_   (2)
                                                        
                                                        
‘not x’           if _x_ is false, then ‘True’, else    (3)
                  ‘False’                               
                  

  Notes:

  1. This is a short-circuit operator, so it only evaluates the second
     argument if the first one is *note False: 3b1.

  2. This is a short-circuit operator, so it only evaluates the second
     argument if the first one is *note True: 3b0.

  3. ‘not’ has a lower priority than non-Boolean operators, so ‘not a ==
     b’ is interpreted as ‘not (a == b)’, and ‘a == not b’ is a syntax
     error.


File: python.info,  Node: Comparisons<2>,  Next: Numeric Types --- int float long complex,  Prev: Boolean Operations --- and or not,  Up: Built-in Types

5.5.3 Comparisons
-----------------

Comparison operations are supported by all objects.  They all have the
same priority (which is higher than that of the Boolean operations).
Comparisons can be chained arbitrarily; for example, ‘x < y <= z’ is
equivalent to ‘x < y and y <= z’, except that _y_ is evaluated only once
(but in both cases _z_ is not evaluated at all when ‘x < y’ is found to
be false).

  This table summarizes the comparison operations:

Operation        Meaning                       Notes
                                               
-----------------------------------------------------------
                                               
‘<’              strictly less than
                 
                                               
‘<=’             less than or equal
                 
                                               
‘>’              strictly greater than
                 
                                               
‘>=’             greater than or equal
                 
                                               
‘==’             equal
                 
                                               
‘!=’             not equal                     (1)
                                               
                                               
‘is’             object identity
                 
                                               
‘is not’         negated object identity
                 

  Notes:

  1. ‘!=’ can also be written ‘<>’, but this is an obsolete usage kept
     for backwards compatibility only.  New code should always use ‘!=’.

  Objects of different types, except different numeric types and
different string types, never compare equal; such objects are ordered
consistently but arbitrarily (so that sorting a heterogeneous array
yields a consistent result).  Furthermore, some types (for example, file
objects) support only a degenerate notion of comparison where any two
objects of that type are unequal.  Again, such objects are ordered
arbitrarily but consistently.  The ‘<’, ‘<=’, ‘>’ and ‘>=’ operators
will raise a *note TypeError: 218. exception when any operand is a
complex number.

  Non-identical instances of a class normally compare as non-equal
unless the class defines the *note __eq__(): 21c. method or the *note
__cmp__(): 221. method.

  Instances of a class cannot be ordered with respect to other instances
of the same class, or other types of object, unless the class defines
either enough of the rich comparison methods (*note __lt__(): 21d, *note
__le__(): 21e, *note __gt__(): 21f, and *note __ge__(): 220.) or the
*note __cmp__(): 221. method.

*CPython implementation detail:* Objects of different types except
numbers are ordered by their type names; objects of the same types that
don’t support proper comparison are ordered by their address.

  Two more operations with the same syntactic priority, ‘in’ and ‘not
in’, are supported only by sequence types (below).


File: python.info,  Node: Numeric Types --- int float long complex,  Next: Iterator Types,  Prev: Comparisons<2>,  Up: Built-in Types

5.5.4 Numeric Types — ‘int’, ‘float’, ‘long’, ‘complex’
-------------------------------------------------------

There are four distinct numeric types: _plain integers_, _long
integers_, _floating point numbers_, and _complex numbers_.  In
addition, Booleans are a subtype of plain integers.  Plain integers
(also just called _integers_) are implemented using ‘long’ in C, which
gives them at least 32 bits of precision (‘sys.maxint’ is always set to
the maximum plain integer value for the current platform, the minimum
value is ‘-sys.maxint - 1’).  Long integers have unlimited precision.
Floating point numbers are usually implemented using ‘double’ in C;
information about the precision and internal representation of floating
point numbers for the machine on which your program is running is
available in *note sys.float_info: 8aa.  Complex numbers have a real and
imaginary part, which are each a floating point number.  To extract
these parts from a complex number _z_, use ‘z.real’ and ‘z.imag’.  (The
standard library includes additional numeric types, *note fractions: d6.
that hold rationals, and *note decimal: 80. that hold floating-point
numbers with user-definable precision.)

  Numbers are created by numeric literals or as the result of built-in
functions and operators.  Unadorned integer literals (including binary,
hex, and octal numbers) yield plain integers unless the value they
denote is too large to be represented as a plain integer, in which case
they yield a long integer.  Integer literals with an ‘'L'’ or ‘'l'’
suffix yield long integers (‘'L'’ is preferred because ‘1l’ looks too
much like eleven!).  Numeric literals containing a decimal point or an
exponent sign yield floating point numbers.  Appending ‘'j'’ or ‘'J'’ to
a numeric literal yields a complex number with a zero real part.  A
complex numeric literal is the sum of a real and an imaginary part.

  Python fully supports mixed arithmetic: when a binary arithmetic
operator has operands of different numeric types, the operand with the
"narrower" type is widened to that of the other, where plain integer is
narrower than long integer is narrower than floating point is narrower
than complex.  Comparisons between numbers of mixed type use the same
rule.  (1) The constructors *note int(): 1f2, *note long(): 1f3, *note
float(): 1eb, and *note complex(): 1ec. can be used to produce numbers
of a specific type.

  All built-in numeric types support the following operations.  See
*note The power operator: 7c9. and later sections for the operators’
priorities.

Operation                Result                                Notes
                                                               
----------------------------------------------------------------------------
                                                               
‘x + y’                  sum of _x_ and _y_
                         
                                                               
‘x - y’                  difference of _x_ and _y_
                         
                                                               
‘x * y’                  product of _x_ and _y_
                         
                                                               
‘x / y’                  quotient of _x_ and _y_               (1)
                                                               
                                                               
‘x // y’                 (floored) quotient of _x_ and _y_     (4)(5)
                                                               
                                                               
‘x % y’                  remainder of ‘x / y’                  (4)
                                                               
                                                               
‘-x’                     _x_ negated
                         
                                                               
‘+x’                     _x_ unchanged
                         
                                                               
‘abs(x)’                 absolute value or magnitude of _x_    (3)
                                                               
                                                               
‘int(x)’                 _x_ converted to integer              (2)
                                                               
                                                               
‘long(x)’                _x_ converted to long integer         (2)
                                                               
                                                               
‘float(x)’               _x_ converted to floating point       (6)
                                                               
                                                               
‘complex(re,im)’         a complex number with real part
                         _re_, imaginary part _im_.  _im_
                         defaults to zero.
                         
                                                               
‘c.conjugate()’          conjugate of the complex number
                         _c_.  (Identity on real numbers)
                         
                                                               
‘divmod(x, y)’           the pair ‘(x // y, x % y)’            (3)(4)
                                                               
                                                               
‘pow(x, y)’              _x_ to the power _y_                  (3)(7)
                                                               
                                                               
‘x ** y’                 _x_ to the power _y_                  (7)
                                                               

  Notes:

  1. 
     For (plain or long) integer division, the result is an integer.
     The result is always rounded towards minus infinity: 1/2 is 0,
     (-1)/2 is -1, 1/(-2) is -1, and (-1)/(-2) is 0.  Note that the
     result is a long integer if either operand is a long integer,
     regardless of the numeric value.

  2. 
     Conversion from floats using *note int(): 1f2. or *note long():
     1f3. truncates toward zero like the related function, *note
     math.trunc(): 32d.  Use the function *note math.floor(): 32b. to
     round downward and *note math.ceil(): 32c. to round upward.

  3. See *note Built-in Functions: 7c7. for a full description.

  4. Deprecated since version 2.3: The floor division operator, the
     modulo operator, and the *note divmod(): 73d. function are no
     longer defined for complex numbers.  Instead, convert to a floating
     point number using the *note abs(): 5bf. function if appropriate.

  5. Also referred to as integer division.  The resultant value is a
     whole integer, though the result’s type is not necessarily int.

  6. float also accepts the strings "nan" and "inf" with an optional
     prefix "+" or "-" for Not a Number (NaN) and positive or negative
     infinity.

     New in version 2.6.

  7. Python defines ‘pow(0, 0)’ and ‘0 ** 0’ to be ‘1’, as is common for
     programming languages.

  All *note numbers.Real: 6f0. types (*note int: 1f2, *note long: 1f3,
and *note float: 1eb.) also include the following operations:

Operation                Result                                   Notes
                                                                  
-------------------------------------------------------------------------------
                                                                  
‘math.trunc(x)’          _x_ truncated to Integral
                         
                                                                  
‘round(x[, n])’          _x_ rounded to n digits, rounding ties
                         away from zero.  If n is omitted, it
                         defaults to 0.
                         
                                                                  
‘math.floor(x)’          the greatest integral float <= _x_
                         
                                                                  
‘math.ceil(x)’           the least integral float >= _x_
                         

* Menu:

* Bitwise Operations on Integer Types:: 
* Additional Methods on Integer Types:: 
* Additional Methods on Float:: 

   ---------- Footnotes ----------

   (1) As a consequence, the list ‘[1, 2]’ is considered equal to ‘[1.0,
2.0]’, and similarly for tuples.


File: python.info,  Node: Bitwise Operations on Integer Types,  Next: Additional Methods on Integer Types,  Up: Numeric Types --- int float long complex

5.5.4.1 Bitwise Operations on Integer Types
...........................................

Bitwise operations only make sense for integers.  Negative numbers are
treated as their 2’s complement value (this assumes a sufficiently large
number of bits that no overflow occurs during the operation).

  The priorities of the binary bitwise operations are all lower than the
numeric operations and higher than the comparisons; the unary operation
‘~’ has the same priority as the other unary numeric operations (‘+’ and
‘-’).

  This table lists the bitwise operations sorted in ascending priority
(operations in the same box have the same priority):

Operation        Result                               Notes
                                                      
---------------------------------------------------------------------
                                                      
‘x | y’          bitwise _or_ of _x_ and _y_
                 
                                                      
‘x ^ y’          bitwise _exclusive or_ of _x_ and
                 _y_
                 
                                                      
‘x & y’          bitwise _and_ of _x_ and _y_
                 
                                                      
‘x << n’         _x_ shifted left by _n_ bits         (1)(2)
                                                      
                                                      
‘x >> n’         _x_ shifted right by _n_ bits        (1)(3)
                                                      
                                                      
‘~x’             the bits of _x_ inverted
                 

  Notes:

  1. Negative shift counts are illegal and cause a *note ValueError:
     236. to be raised.

  2. A left shift by _n_ bits is equivalent to multiplication by ‘pow(2,
     n)’.  A long integer is returned if the result exceeds the range of
     plain integers.

  3. A right shift by _n_ bits is equivalent to division by ‘pow(2, n)’.


File: python.info,  Node: Additional Methods on Integer Types,  Next: Additional Methods on Float,  Prev: Bitwise Operations on Integer Types,  Up: Numeric Types --- int float long complex

5.5.4.2 Additional Methods on Integer Types
...........................................

The integer types implement the *note numbers.Integral: 6ef. *note
abstract base class: 886.  In addition, they provide one more method:

 -- Method: int.bit_length ()

 -- Method: long.bit_length ()

     Return the number of bits necessary to represent an integer in
     binary, excluding the sign and leading zeros:

          >>> n = -37
          >>> bin(n)
          '-0b100101'
          >>> n.bit_length()
          6

     More precisely, if ‘x’ is nonzero, then ‘x.bit_length()’ is the
     unique positive integer ‘k’ such that ‘2**(k-1) <= abs(x) < 2**k’.
     Equivalently, when ‘abs(x)’ is small enough to have a correctly
     rounded logarithm, then ‘k = 1 + int(log(abs(x), 2))’.  If ‘x’ is
     zero, then ‘x.bit_length()’ returns ‘0’.

     Equivalent to:

          def bit_length(self):
              s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'
              s = s.lstrip('-0b') # remove leading zeros and minus sign
              return len(s)       # len('100101') --> 6

     New in version 2.7.


File: python.info,  Node: Additional Methods on Float,  Prev: Additional Methods on Integer Types,  Up: Numeric Types --- int float long complex

5.5.4.3 Additional Methods on Float
...................................

The float type implements the *note numbers.Real: 6f0. *note abstract
base class: 886.  float also has the following additional methods.

 -- Method: float.as_integer_ratio ()

     Return a pair of integers whose ratio is exactly equal to the
     original float and with a positive denominator.  Raises *note
     OverflowError: 2db. on infinities and a *note ValueError: 236. on
     NaNs.

     New in version 2.6.

 -- Method: float.is_integer ()

     Return ‘True’ if the float instance is finite with integral value,
     and ‘False’ otherwise:

          >>> (-2.0).is_integer()
          True
          >>> (3.2).is_integer()
          False

     New in version 2.6.

  Two methods support conversion to and from hexadecimal strings.  Since
Python’s floats are stored internally as binary numbers, converting a
float to or from a _decimal_ string usually involves a small rounding
error.  In contrast, hexadecimal strings allow exact representation and
specification of floating-point numbers.  This can be useful when
debugging, and in numerical work.

 -- Method: float.hex ()

     Return a representation of a floating-point number as a hexadecimal
     string.  For finite floating-point numbers, this representation
     will always include a leading ‘0x’ and a trailing ‘p’ and exponent.

     New in version 2.6.

 -- Method: float.fromhex (s)

     Class method to return the float represented by a hexadecimal
     string _s_.  The string _s_ may have leading and trailing
     whitespace.

     New in version 2.6.

  Note that *note float.hex(): 885. is an instance method, while *note
float.fromhex(): 8b3. is a class method.

  A hexadecimal string takes the form:

     [sign] ['0x'] integer ['.' fraction] ['p' exponent]

  where the optional ‘sign’ may by either ‘+’ or ‘-’, ‘integer’ and
‘fraction’ are strings of hexadecimal digits, and ‘exponent’ is a
decimal integer with an optional leading sign.  Case is not significant,
and there must be at least one hexadecimal digit in either the integer
or the fraction.  This syntax is similar to the syntax specified in
section 6.4.4.2 of the C99 standard, and also to the syntax used in Java
1.5 onwards.  In particular, the output of *note float.hex(): 885. is
usable as a hexadecimal floating-point literal in C or Java code, and
hexadecimal strings produced by C’s ‘%a’ format character or Java’s
‘Double.toHexString’ are accepted by *note float.fromhex(): 8b3.

  Note that the exponent is written in decimal rather than hexadecimal,
and that it gives the power of 2 by which to multiply the coefficient.
For example, the hexadecimal string ‘0x3.a7p10’ represents the
floating-point number ‘(3 + 10./16 + 7./16**2) * 2.0**10’, or ‘3740.0’:

     >>> float.fromhex('0x3.a7p10')
     3740.0

  Applying the reverse conversion to ‘3740.0’ gives a different
hexadecimal string representing the same number:

     >>> float.hex(3740.0)
     '0x1.d380000000000p+11'


File: python.info,  Node: Iterator Types,  Next: Sequence Types --- str unicode list tuple bytearray buffer xrange,  Prev: Numeric Types --- int float long complex,  Up: Built-in Types

5.5.5 Iterator Types
--------------------

New in version 2.2.

  Python supports a concept of iteration over containers.  This is
implemented using two distinct methods; these are used to allow
user-defined classes to support iteration.  Sequences, described below
in more detail, always support the iteration methods.

  One method needs to be defined for container objects to provide
iteration support:

 -- Method: container.__iter__ ()

     Return an iterator object.  The object is required to support the
     iterator protocol described below.  If a container supports
     different types of iteration, additional methods can be provided to
     specifically request iterators for those iteration types.  (An
     example of an object supporting multiple forms of iteration would
     be a tree structure which supports both breadth-first and
     depth-first traversal.)  This method corresponds to the *note
     tp_iter: 48c. slot of the type structure for Python objects in the
     Python/C API.

  The iterator objects themselves are required to support the following
two methods, which together form the _iterator protocol_:

 -- Method: iterator.__iter__ ()

     Return the iterator object itself.  This is required to allow both
     containers and iterators to be used with the *note for: 2f0. and
     *note in: 428. statements.  This method corresponds to the *note
     tp_iter: 48c. slot of the type structure for Python objects in the
     Python/C API.

 -- Method: iterator.next ()

     Return the next item from the container.  If there are no further
     items, raise the *note StopIteration: 333. exception.  This method
     corresponds to the *note tp_iternext: 48d. slot of the type
     structure for Python objects in the Python/C API.

  Python defines several iterator objects to support iteration over
general and specific sequence types, dictionaries, and other more
specialized forms.  The specific types are not important beyond their
implementation of the iterator protocol.

  The intention of the protocol is that once an iterator’s *note next():
399. method raises *note StopIteration: 333, it will continue to do so
on subsequent calls.  Implementations that do not obey this property are
deemed broken.  (This constraint was added in Python 2.3; in Python 2.2,
various iterators are broken according to this rule.)

* Menu:

* Generator Types:: 


File: python.info,  Node: Generator Types,  Up: Iterator Types

5.5.5.1 Generator Types
.......................

Python’s *note generator: 5dc.s provide a convenient way to implement
the iterator protocol.  If a container object’s *note __iter__(): 321.
method is implemented as a generator, it will automatically return an
iterator object (technically, a generator object) supplying the *note
__iter__(): 321. and *note next(): 399. methods.  More information about
generators can be found in *note the documentation for the yield
expression: 79d.


File: python.info,  Node: Sequence Types --- str unicode list tuple bytearray buffer xrange,  Next: Set Types --- set frozenset,  Prev: Iterator Types,  Up: Built-in Types

5.5.6 Sequence Types — ‘str’, ‘unicode’, ‘list’, ‘tuple’, ‘bytearray’, ‘buffer’, ‘xrange’
-----------------------------------------------------------------------------------------

There are seven sequence types: strings, Unicode strings, lists, tuples,
bytearrays, buffers, and xrange objects.

  For other containers see the built in *note dict: 305. and *note set:
36a. classes, and the *note collections: 65. module.

  String literals are written in single or double quotes: ‘'xyzzy'’,
‘"frobozz"’.  See *note String literals: 6bc. for more about string
literals.  Unicode strings are much like strings, but are specified in
the syntax using a preceding ‘'u'’ character: ‘u'abc'’, ‘u"def"’.  In
addition to the functionality described here, there are also
string-specific methods described in the *note String Methods: 522.
section.  Lists are constructed with square brackets, separating items
with commas: ‘[a, b, c]’.  Tuples are constructed by the comma operator
(not within square brackets), with or without enclosing parentheses, but
an empty tuple must have the enclosing parentheses, such as ‘a, b, c’ or
‘()’.  A single item tuple must have a trailing comma, such as ‘(d,)’.

  Bytearray objects are created with the built-in function *note
bytearray(): 1f7.

  Buffer objects are not directly supported by Python syntax, but can be
created by calling the built-in function *note buffer(): 316.  They
don’t support concatenation or repetition.

  Objects of type xrange are similar to buffers in that there is no
specific syntax to create them, but they are created using the *note
xrange(): 45b. function.  They don’t support slicing, concatenation or
repetition, and using ‘in’, ‘not in’, *note min(): 224. or *note max():
225. on them is inefficient.

  Most sequence types support the following operations.  The ‘in’ and
‘not in’ operations have the same priorities as the comparison
operations.  The ‘+’ and ‘*’ operations have the same priority as the
corresponding numeric operations.  (1) Additional methods are provided
for *note Mutable Sequence Types: 87d.

  This table lists the sequence operations sorted in ascending priority
(operations in the same box have the same priority).  In the table, _s_
and _t_ are sequences of the same type; _n_, _i_ and _j_ are integers:

Operation              Result                               Notes
                                                            
---------------------------------------------------------------------------
                                                            
‘x in s’               ‘True’ if an item of _s_ is equal    (1)
                       to _x_, else ‘False’                 
                       
                                                            
‘x not in s’           ‘False’ if an item of _s_ is equal   (1)
                       to _x_, else ‘True’                  
                       
                                                            
‘s + t’                the concatenation of _s_ and _t_     (6)
                                                            
                                                            
‘s * n, n * s’         _n_ shallow copies of _s_            (2)
                       concatenated                         
                       
                                                            
‘s[i]’                 _i_th item of _s_, origin 0          (3)
                                                            
                                                            
‘s[i:j]’               slice of _s_ from _i_ to _j_         (3)(4)
                                                            
                                                            
‘s[i:j:k]’             slice of _s_ from _i_ to _j_ with    (3)(5)
                       step _k_                             
                       
                                                            
‘len(s)’               length of _s_
                       
                                                            
‘min(s)’               smallest item of _s_
                       
                                                            
‘max(s)’               largest item of _s_
                       
                                                            
‘s.index(x)’           index of the first occurrence of
                       _x_ in _s_
                       
                                                            
‘s.count(x)’           total number of occurrences of _x_
                       in _s_
                       

  Sequence types also support comparisons.  In particular, tuples and
lists are compared lexicographically by comparing corresponding
elements.  This means that to compare equal, every element must compare
equal and the two sequences must be of the same type and have the same
length.  (For full details see *note Comparisons: 7dc. in the language
reference.)

  Notes:

  1. When _s_ is a string or Unicode string object the ‘in’ and ‘not in’
     operations act like a substring test.  In Python versions before
     2.3, _x_ had to be a string of length 1.  In Python 2.3 and beyond,
     _x_ may be a string of any length.

  2. Values of _n_ less than ‘0’ are treated as ‘0’ (which yields an
     empty sequence of the same type as _s_).  Note also that the copies
     are shallow; nested structures are not copied.  This often haunts
     new Python programmers; consider:

          >>> lists = [[]] * 3
          >>> lists
          [[], [], []]
          >>> lists[0].append(3)
          >>> lists
          [[3], [3], [3]]

     What has happened is that ‘[[]]’ is a one-element list containing
     an empty list, so all three elements of ‘[[]] * 3’ are (pointers
     to) this single empty list.  Modifying any of the elements of
     ‘lists’ modifies this single list.  You can create a list of
     different lists this way:

          >>> lists = [[] for i in range(3)]
          >>> lists[0].append(3)
          >>> lists[1].append(5)
          >>> lists[2].append(7)
          >>> lists
          [[3], [5], [7]]

  3. If _i_ or _j_ is negative, the index is relative to the end of the
     string: ‘len(s) + i’ or ‘len(s) + j’ is substituted.  But note that
     ‘-0’ is still ‘0’.

  4. The slice of _s_ from _i_ to _j_ is defined as the sequence of
     items with index _k_ such that ‘i <= k < j’.  If _i_ or _j_ is
     greater than ‘len(s)’, use ‘len(s)’.  If _i_ is omitted or ‘None’,
     use ‘0’.  If _j_ is omitted or ‘None’, use ‘len(s)’.  If _i_ is
     greater than or equal to _j_, the slice is empty.

  5. The slice of _s_ from _i_ to _j_ with step _k_ is defined as the
     sequence of items with index ‘x = i + n*k’ such that ‘0 <= n <
     (j-i)/k’.  In other words, the indices are ‘i’, ‘i+k’, ‘i+2*k’,
     ‘i+3*k’ and so on, stopping when _j_ is reached (but never
     including _j_).  If _i_ or _j_ is greater than ‘len(s)’, use
     ‘len(s)’.  If _i_ or _j_ are omitted or ‘None’, they become "end"
     values (which end depends on the sign of _k_).  Note, _k_ cannot be
     zero.  If _k_ is ‘None’, it is treated like ‘1’.

  6. *CPython implementation detail:* If _s_ and _t_ are both strings,
     some Python implementations such as CPython can usually perform an
     in-place optimization for assignments of the form ‘s = s + t’ or ‘s
     += t’.  When applicable, this optimization makes quadratic run-time
     much less likely.  This optimization is both version and
     implementation dependent.  For performance sensitive code, it is
     preferable to use the *note str.join(): 8ba. method which assures
     consistent linear concatenation performance across versions and
     implementations.

     Changed in version 2.4: Formerly, string concatenation never
     occurred in-place.

* Menu:

* String Methods: String Methods<2>. 
* String Formatting Operations:: 
* XRange Type:: 
* Mutable Sequence Types:: 

   ---------- Footnotes ----------

   (1) They must have since the parser can’t tell the type of the
operands.


File: python.info,  Node: String Methods<2>,  Next: String Formatting Operations,  Up: Sequence Types --- str unicode list tuple bytearray buffer xrange

5.5.6.1 String Methods
......................

Below are listed the string methods which both 8-bit strings and Unicode
objects support.  Some of them are also available on *note bytearray:
1f7. objects.

  In addition, Python’s strings support the sequence type methods
described in the *note Sequence Types — str, unicode, list, tuple,
bytearray, buffer, xrange: 521. section.  To output formatted strings
use template strings or the ‘%’ operator described in the *note String
Formatting Operations: 524. section.  Also, see the *note re: 143.
module for string functions based on regular expressions.

 -- Method: str.capitalize ()

     Return a copy of the string with its first character capitalized
     and the rest lowercased.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.center (width[, fillchar])

     Return centered in a string of length _width_.  Padding is done
     using the specified _fillchar_ (default is a space).

     Changed in version 2.4: Support for the _fillchar_ argument.

 -- Method: str.count (sub[, start[, end]])

     Return the number of non-overlapping occurrences of substring _sub_
     in the range [_start_, _end_].  Optional arguments _start_ and
     _end_ are interpreted as in slice notation.

 -- Method: str.decode ([encoding[, errors]])

     Decodes the string using the codec registered for _encoding_.
     _encoding_ defaults to the default string encoding.  _errors_ may
     be given to set a different error handling scheme.  The default is
     ‘'strict'’, meaning that encoding errors raise *note UnicodeError:
     433.  Other possible values are ‘'ignore'’, ‘'replace'’ and any
     other name registered via *note codecs.register_error(): 43e, see
     section *note Codec Base Classes: 8bf.

     New in version 2.2.

     Changed in version 2.3: Support for other error handling schemes
     added.

     Changed in version 2.7: Support for keyword arguments added.

 -- Method: str.encode ([encoding[, errors]])

     Return an encoded version of the string.  Default encoding is the
     current default string encoding.  _errors_ may be given to set a
     different error handling scheme.  The default for _errors_ is
     ‘'strict'’, meaning that encoding errors raise a *note
     UnicodeError: 433.  Other possible values are ‘'ignore'’,
     ‘'replace'’, ‘'xmlcharrefreplace'’, ‘'backslashreplace'’ and any
     other name registered via *note codecs.register_error(): 43e, see
     section *note Codec Base Classes: 8bf.  For a list of possible
     encodings, see section *note Standard Encodings: 8c0.

     New in version 2.0.

     Changed in version 2.3: Support for ‘'xmlcharrefreplace'’ and
     ‘'backslashreplace'’ and other error handling schemes added.

     Changed in version 2.7: Support for keyword arguments added.

 -- Method: str.endswith (suffix[, start[, end]])

     Return ‘True’ if the string ends with the specified _suffix_,
     otherwise return ‘False’.  _suffix_ can also be a tuple of suffixes
     to look for.  With optional _start_, test beginning at that
     position.  With optional _end_, stop comparing at that position.

     Changed in version 2.5: Accept tuples as _suffix_.

 -- Method: str.expandtabs ([tabsize])

     Return a copy of the string where all tab characters are replaced
     by one or more spaces, depending on the current column and the
     given tab size.  Tab positions occur every _tabsize_ characters
     (default is 8, giving tab positions at columns 0, 8, 16 and so on).
     To expand the string, the current column is set to zero and the
     string is examined character by character.  If the character is a
     tab (‘\t’), one or more space characters are inserted in the result
     until the current column is equal to the next tab position.  (The
     tab character itself is not copied.)  If the character is a newline
     (‘\n’) or return (‘\r’), it is copied and the current column is
     reset to zero.  Any other character is copied unchanged and the
     current column is incremented by one regardless of how the
     character is represented when printed.

          >>> '01\t012\t0123\t01234'.expandtabs()
          '01      012     0123    01234'
          >>> '01\t012\t0123\t01234'.expandtabs(4)
          '01  012 0123    01234'

 -- Method: str.find (sub[, start[, end]])

     Return the lowest index in the string where substring _sub_ is
     found, such that _sub_ is contained in the slice ‘s[start:end]’.
     Optional arguments _start_ and _end_ are interpreted as in slice
     notation.  Return ‘-1’ if _sub_ is not found.

          Note: The *note find(): 8c3. method should be used only if you
          need to know the position of _sub_.  To check if _sub_ is a
          substring or not, use the *note in: 428. operator:

               >>> 'Py' in 'Python'
               True

 -- Method: str.format (*args, **kwargs)

     Perform a string formatting operation.  The string on which this
     method is called can contain literal text or replacement fields
     delimited by braces ‘{}’.  Each replacement field contains either
     the numeric index of a positional argument, or the name of a
     keyword argument.  Returns a copy of the string where each
     replacement field is replaced with the string value of the
     corresponding argument.

          >>> "The sum of 1 + 2 is {0}".format(1+2)
          'The sum of 1 + 2 is 3'

     See *note Format String Syntax: 308. for a description of the
     various formatting options that can be specified in format strings.

     This method of string formatting is the new standard in Python 3,
     and should be preferred to the ‘%’ formatting described in *note
     String Formatting Operations: 524. in new code.

     New in version 2.6.

 -- Method: str.index (sub[, start[, end]])

     Like *note find(): 8c3, but raise *note ValueError: 236. when the
     substring is not found.

 -- Method: str.isalnum ()

     Return true if all characters in the string are alphanumeric and
     there is at least one character, false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.isalpha ()

     Return true if all characters in the string are alphabetic and
     there is at least one character, false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.isdigit ()

     Return true if all characters in the string are digits and there is
     at least one character, false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.islower ()

     Return true if all cased characters (1) in the string are lowercase
     and there is at least one cased character, false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.isspace ()

     Return true if there are only whitespace characters in the string
     and there is at least one character, false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.istitle ()

     Return true if the string is a titlecased string and there is at
     least one character, for example uppercase characters may only
     follow uncased characters and lowercase characters only cased ones.
     Return false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.isupper ()

     Return true if all cased characters (2) in the string are uppercase
     and there is at least one cased character, false otherwise.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.join (iterable)

     Return a string which is the concatenation of the strings in the
     *note iterable: 8cc. _iterable_.  The separator between elements is
     the string providing this method.

 -- Method: str.ljust (width[, fillchar])

     Return the string left justified in a string of length _width_.
     Padding is done using the specified _fillchar_ (default is a
     space).  The original string is returned if _width_ is less than or
     equal to ‘len(s)’.

     Changed in version 2.4: Support for the _fillchar_ argument.

 -- Method: str.lower ()

     Return a copy of the string with all the cased characters (3)
     converted to lowercase.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.lstrip ([chars])

     Return a copy of the string with leading characters removed.  The
     _chars_ argument is a string specifying the set of characters to be
     removed.  If omitted or ‘None’, the _chars_ argument defaults to
     removing whitespace.  The _chars_ argument is not a prefix; rather,
     all combinations of its values are stripped:

          >>> '   spacious   '.lstrip()
          'spacious   '
          >>> 'www.example.com'.lstrip('cmowz.')
          'example.com'

     Changed in version 2.2.2: Support for the _chars_ argument.

 -- Method: str.partition (sep)

     Split the string at the first occurrence of _sep_, and return a
     3-tuple containing the part before the separator, the separator
     itself, and the part after the separator.  If the separator is not
     found, return a 3-tuple containing the string itself, followed by
     two empty strings.

     New in version 2.5.

 -- Method: str.replace (old, new[, count])

     Return a copy of the string with all occurrences of substring _old_
     replaced by _new_.  If the optional argument _count_ is given, only
     the first _count_ occurrences are replaced.

 -- Method: str.rfind (sub[, start[, end]])

     Return the highest index in the string where substring _sub_ is
     found, such that _sub_ is contained within ‘s[start:end]’.
     Optional arguments _start_ and _end_ are interpreted as in slice
     notation.  Return ‘-1’ on failure.

 -- Method: str.rindex (sub[, start[, end]])

     Like *note rfind(): 8d1. but raises *note ValueError: 236. when the
     substring _sub_ is not found.

 -- Method: str.rjust (width[, fillchar])

     Return the string right justified in a string of length _width_.
     Padding is done using the specified _fillchar_ (default is a
     space).  The original string is returned if _width_ is less than or
     equal to ‘len(s)’.

     Changed in version 2.4: Support for the _fillchar_ argument.

 -- Method: str.rpartition (sep)

     Split the string at the last occurrence of _sep_, and return a
     3-tuple containing the part before the separator, the separator
     itself, and the part after the separator.  If the separator is not
     found, return a 3-tuple containing two empty strings, followed by
     the string itself.

     New in version 2.5.

 -- Method: str.rsplit ([sep[, maxsplit]])

     Return a list of the words in the string, using _sep_ as the
     delimiter string.  If _maxsplit_ is given, at most _maxsplit_
     splits are done, the _rightmost_ ones.  If _sep_ is not specified
     or ‘None’, any whitespace string is a separator.  Except for
     splitting from the right, *note rsplit(): 8d4. behaves like *note
     split(): 8d5. which is described in detail below.

     New in version 2.4.

 -- Method: str.rstrip ([chars])

     Return a copy of the string with trailing characters removed.  The
     _chars_ argument is a string specifying the set of characters to be
     removed.  If omitted or ‘None’, the _chars_ argument defaults to
     removing whitespace.  The _chars_ argument is not a suffix; rather,
     all combinations of its values are stripped:

          >>> '   spacious   '.rstrip()
          '   spacious'
          >>> 'mississippi'.rstrip('ipz')
          'mississ'

     Changed in version 2.2.2: Support for the _chars_ argument.

 -- Method: str.split ([sep[, maxsplit]])

     Return a list of the words in the string, using _sep_ as the
     delimiter string.  If _maxsplit_ is given, at most _maxsplit_
     splits are done (thus, the list will have at most ‘maxsplit+1’
     elements).  If _maxsplit_ is not specified or ‘-1’, then there is
     no limit on the number of splits (all possible splits are made).

     If _sep_ is given, consecutive delimiters are not grouped together
     and are deemed to delimit empty strings (for example,
     ‘'1,,2'.split(',')’ returns ‘['1', '', '2']’).  The _sep_ argument
     may consist of multiple characters (for example,
     ‘'1<>2<>3'.split('<>')’ returns ‘['1', '2', '3']’).  Splitting an
     empty string with a specified separator returns ‘['']’.

     If _sep_ is not specified or is ‘None’, a different splitting
     algorithm is applied: runs of consecutive whitespace are regarded
     as a single separator, and the result will contain no empty strings
     at the start or end if the string has leading or trailing
     whitespace.  Consequently, splitting an empty string or a string
     consisting of just whitespace with a ‘None’ separator returns ‘[]’.

     For example, ‘' 1 2 3 '.split()’ returns ‘['1', '2', '3']’, and ‘'
     1 2 3 '.split(None, 1)’ returns ‘['1', '2 3 ']’.

 -- Method: str.splitlines ([keepends])

     Return a list of the lines in the string, breaking at line
     boundaries.  This method uses the *note universal newlines: 315.
     approach to splitting lines.  Line breaks are not included in the
     resulting list unless _keepends_ is given and true.

     For example, ‘'ab c\n\nde fg\rkl\r\n'.splitlines()’ returns ‘['ab
     c', '', 'de fg', 'kl']’, while the same call with
     ‘splitlines(True)’ returns ‘['ab c\n', '\n', 'de fg\r', 'kl\r\n']’.

     Unlike *note split(): 8d5. when a delimiter string _sep_ is given,
     this method returns an empty list for the empty string, and a
     terminal line break does not result in an extra line.

 -- Method: str.startswith (prefix[, start[, end]])

     Return ‘True’ if string starts with the _prefix_, otherwise return
     ‘False’.  _prefix_ can also be a tuple of prefixes to look for.
     With optional _start_, test string beginning at that position.
     With optional _end_, stop comparing string at that position.

     Changed in version 2.5: Accept tuples as _prefix_.

 -- Method: str.strip ([chars])

     Return a copy of the string with the leading and trailing
     characters removed.  The _chars_ argument is a string specifying
     the set of characters to be removed.  If omitted or ‘None’, the
     _chars_ argument defaults to removing whitespace.  The _chars_
     argument is not a prefix or suffix; rather, all combinations of its
     values are stripped:

          >>> '   spacious   '.strip()
          'spacious'
          >>> 'www.example.com'.strip('cmowz.')
          'example'

     Changed in version 2.2.2: Support for the _chars_ argument.

 -- Method: str.swapcase ()

     Return a copy of the string with uppercase characters converted to
     lowercase and vice versa.

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.title ()

     Return a titlecased version of the string where words start with an
     uppercase character and the remaining characters are lowercase.

     The algorithm uses a simple language-independent definition of a
     word as groups of consecutive letters.  The definition works in
     many contexts but it means that apostrophes in contractions and
     possessives form word boundaries, which may not be the desired
     result:

          >>> "they're bill's friends from the UK".title()
          "They'Re Bill'S Friends From The Uk"

     A workaround for apostrophes can be constructed using regular
     expressions:

          >>> import re
          >>> def titlecase(s):
          ...     return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
          ...                   lambda mo: mo.group(0)[0].upper() +
          ...                              mo.group(0)[1:].lower(),
          ...                   s)
          ...
          >>> titlecase("they're bill's friends.")
          "They're Bill's Friends."

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.translate (table[, deletechars])

     Return a copy of the string where all characters occurring in the
     optional argument _deletechars_ are removed, and the remaining
     characters have been mapped through the given translation table,
     which must be a string of length 256.

     You can use the *note maketrans(): 8dd. helper function in the
     *note string: 163. module to create a translation table.  For
     string objects, set the _table_ argument to ‘None’ for translations
     that only delete characters:

          >>> 'read this short text'.translate(None, 'aeiou')
          'rd ths shrt txt'

     New in version 2.6: Support for a ‘None’ _table_ argument.

     For Unicode objects, the *note translate(): 8dc. method does not
     accept the optional _deletechars_ argument.  Instead, it returns a
     copy of the _s_ where all characters have been mapped through the
     given translation table which must be a mapping of Unicode ordinals
     to Unicode ordinals, Unicode strings or ‘None’.  Unmapped
     characters are left untouched.  Characters mapped to ‘None’ are
     deleted.  Note, a more flexible approach is to create a custom
     character mapping codec using the *note codecs: 63. module (see
     ‘encodings.cp1251’ for an example).

 -- Method: str.upper ()

     Return a copy of the string with all the cased characters (4)
     converted to uppercase.  Note that ‘str.upper().isupper()’ might be
     ‘False’ if ‘s’ contains uncased characters or if the Unicode
     category of the resulting character(s) is not "Lu" (Letter,
     uppercase), but e.g.  "Lt" (Letter, titlecase).

     For 8-bit strings, this method is locale-dependent.

 -- Method: str.zfill (width)

     Return the numeric string left filled with zeros in a string of
     length _width_.  A sign prefix is handled correctly.  The original
     string is returned if _width_ is less than or equal to ‘len(s)’.

     New in version 2.2.2.

  The following methods are present only on unicode objects:

 -- Method: unicode.isnumeric ()

     Return ‘True’ if there are only numeric characters in S, ‘False’
     otherwise.  Numeric characters include digit characters, and all
     characters that have the Unicode numeric value property, e.g.
     U+2155, VULGAR FRACTION ONE FIFTH.

 -- Method: unicode.isdecimal ()

     Return ‘True’ if there are only decimal characters in S, ‘False’
     otherwise.  Decimal characters include digit characters, and all
     characters that can be used to form decimal-radix numbers, e.g.
     U+0660, ARABIC-INDIC DIGIT ZERO.

   ---------- Footnotes ----------

   (1) Cased characters are those with general category property being
one of "Lu" (Letter, uppercase), "Ll" (Letter, lowercase), or "Lt"
(Letter, titlecase).

   (2) Cased characters are those with general category property being
one of "Lu" (Letter, uppercase), "Ll" (Letter, lowercase), or "Lt"
(Letter, titlecase).

   (3) Cased characters are those with general category property being
one of "Lu" (Letter, uppercase), "Ll" (Letter, lowercase), or "Lt"
(Letter, titlecase).

   (4) Cased characters are those with general category property being
one of "Lu" (Letter, uppercase), "Ll" (Letter, lowercase), or "Lt"
(Letter, titlecase).


File: python.info,  Node: String Formatting Operations,  Next: XRange Type,  Prev: String Methods<2>,  Up: Sequence Types --- str unicode list tuple bytearray buffer xrange

5.5.6.2 String Formatting Operations
....................................

String and Unicode objects have one unique built-in operation: the ‘%’
operator (modulo).  This is also known as the string _formatting_ or
_interpolation_ operator.  Given ‘format % values’ (where _format_ is a
string or Unicode object), ‘%’ conversion specifications in _format_ are
replaced with zero or more elements of _values_.  The effect is similar
to the using ‘sprintf()’ in the C language.  If _format_ is a Unicode
object, or if any of the objects being converted using the ‘%s’
conversion are Unicode objects, the result will also be a Unicode
object.

  If _format_ requires a single argument, _values_ may be a single
non-tuple object.  (1) Otherwise, _values_ must be a tuple with exactly
the number of items specified by the format string, or a single mapping
object (for example, a dictionary).

  A conversion specifier contains two or more characters and has the
following components, which must occur in this order:

  1. The ‘'%'’ character, which marks the start of the specifier.

  2. Mapping key (optional), consisting of a parenthesised sequence of
     characters (for example, ‘(somename)’).

  3. Conversion flags (optional), which affect the result of some
     conversion types.

  4. Minimum field width (optional).  If specified as an ‘'*'’
     (asterisk), the actual width is read from the next element of the
     tuple in _values_, and the object to convert comes after the
     minimum field width and optional precision.

  5. Precision (optional), given as a ‘'.'’ (dot) followed by the
     precision.  If specified as ‘'*'’ (an asterisk), the actual width
     is read from the next element of the tuple in _values_, and the
     value to convert comes after the precision.

  6. Length modifier (optional).

  7. Conversion type.

  When the right argument is a dictionary (or other mapping type), then
the formats in the string _must_ include a parenthesised mapping key
into that dictionary inserted immediately after the ‘'%'’ character.
The mapping key selects the value to be formatted from the mapping.  For
example:

     >>> print '%(language)s has %(number)03d quote types.' % \
     ...       {"language": "Python", "number": 2}
     Python has 002 quote types.

  In this case no ‘*’ specifiers may occur in a format (since they
require a sequential parameter list).

  The conversion flag characters are:

Flag          Meaning
              
----------------------------------------------------------------------------------------
              
‘'#'’         The value conversion will use the "alternate form" (where defined
              below).
              
              
‘'0'’         The conversion will be zero padded for numeric values.
              
              
‘'-'’         The converted value is left adjusted (overrides the ‘'0'’ conversion if
              both are given).
              
              
‘' '’         (a space) A blank should be left before a positive number (or empty
              string) produced by a signed conversion.
              
              
‘'+'’         A sign character (‘'+'’ or ‘'-'’) will precede the conversion
              (overrides a "space" flag).
              

  A length modifier (‘h’, ‘l’, or ‘L’) may be present, but is ignored as
it is not necessary for Python – so e.g.  ‘%ld’ is identical to ‘%d’.

  The conversion types are:

Conversion       Meaning                                                   Notes
                                                                           
---------------------------------------------------------------------------------------
                                                                           
‘'d'’            Signed integer decimal.
                 
                                                                           
‘'i'’            Signed integer decimal.
                 
                                                                           
‘'o'’            Signed octal value.                                       (1)
                                                                           
                                                                           
‘'u'’            Obsolete type – it is identical to ‘'d'’.                 (7)
                                                                           
                                                                           
‘'x'’            Signed hexadecimal (lowercase).                           (2)
                                                                           
                                                                           
‘'X'’            Signed hexadecimal (uppercase).                           (2)
                                                                           
                                                                           
‘'e'’            Floating point exponential format (lowercase).            (3)
                                                                           
                                                                           
‘'E'’            Floating point exponential format (uppercase).            (3)
                                                                           
                                                                           
‘'f'’            Floating point decimal format.                            (3)
                                                                           
                                                                           
‘'F'’            Floating point decimal format.                            (3)
                                                                           
                                                                           
‘'g'’            Floating point format.  Uses lowercase exponential        (4)
                 format if exponent is less than -4 or not less than       
                 precision, decimal format otherwise.
                 
                                                                           
‘'G'’            Floating point format.  Uses uppercase exponential        (4)
                 format if exponent is less than -4 or not less than       
                 precision, decimal format otherwise.
                 
                                                                           
‘'c'’            Single character (accepts integer or single character
                 string).
                 
                                                                           
‘'r'’            String (converts any Python object using *note repr():    (5)
                 876.).                                                    
                 
                                                                           
‘'s'’            String (converts any Python object using *note str():     (6)
                 1ea.).                                                    
                 
                                                                           
‘'%'’            No argument is converted, results in a ‘'%'’ character
                 in the result.
                 

  Notes:

  1. The alternate form causes a leading zero (‘'0'’) to be inserted
     between left-hand padding and the formatting of the number if the
     leading character of the result is not already a zero.

  2. The alternate form causes a leading ‘'0x'’ or ‘'0X'’ (depending on
     whether the ‘'x'’ or ‘'X'’ format was used) to be inserted between
     left-hand padding and the formatting of the number if the leading
     character of the result is not already a zero.

  3. The alternate form causes the result to always contain a decimal
     point, even if no digits follow it.

     The precision determines the number of digits after the decimal
     point and defaults to 6.

  4. The alternate form causes the result to always contain a decimal
     point, and trailing zeroes are not removed as they would otherwise
     be.

     The precision determines the number of significant digits before
     and after the decimal point and defaults to 6.

  5. The ‘%r’ conversion was added in Python 2.0.

     The precision determines the maximal number of characters used.

  6. If the object or format provided is a *note unicode: 1f5. string,
     the resulting string will also be *note unicode: 1f5.

     The precision determines the maximal number of characters used.

  7. See PEP 237(2).

  Since Python strings have an explicit length, ‘%s’ conversions do not
assume that ‘'\0'’ is the end of the string.

  Changed in version 2.7: ‘%f’ conversions for numbers whose absolute
value is over 1e50 are no longer replaced by ‘%g’ conversions.

  Additional string operations are defined in standard modules *note
string: 163. and *note re: 143.

   ---------- Footnotes ----------

   (1) To format only a tuple you should therefore provide a singleton
tuple whose only element is the tuple to be formatted.

   (2) http://www.python.org/dev/peps/pep-0237


File: python.info,  Node: XRange Type,  Next: Mutable Sequence Types,  Prev: String Formatting Operations,  Up: Sequence Types --- str unicode list tuple bytearray buffer xrange

5.5.6.3 XRange Type
...................

The *note xrange: 45b. type is an immutable sequence which is commonly
used for looping.  The advantage of the *note xrange: 45b. type is that
an *note xrange: 45b. object will always take the same amount of memory,
no matter the size of the range it represents.  There are no consistent
performance advantages.

  XRange objects have very little behavior: they only support indexing,
iteration, and the *note len(): 520. function.


File: python.info,  Node: Mutable Sequence Types,  Prev: XRange Type,  Up: Sequence Types --- str unicode list tuple bytearray buffer xrange

5.5.6.4 Mutable Sequence Types
..............................

List and *note bytearray: 1f7. objects support additional operations
that allow in-place modification of the object.  Other mutable sequence
types (when added to the language) should also support these operations.
Strings and tuples are immutable sequence types: such objects cannot be
modified once created.  The following operations are defined on mutable
sequence types (where _x_ is an arbitrary object):

Operation                          Result                               Notes
                                                                        
--------------------------------------------------------------------------------------------------
                                                                        
‘s[i] = x’                         item _i_ of _s_ is replaced by _x_
                                   
                                                                        
‘s[i:j] = t’                       slice of _s_ from _i_ to _j_ is
                                   replaced by the contents of the
                                   iterable _t_
                                   
                                                                        
‘del s[i:j]’                       same as ‘s[i:j] = []’
                                   
                                                                        
‘s[i:j:k] = t’                     the elements of ‘s[i:j:k]’ are       (1)
                                   replaced by those of _t_             
                                   
                                                                        
‘del s[i:j:k]’                     removes the elements of ‘s[i:j:k]’
                                   from the list
                                   
                                                                        
‘s.append(x)’                      same as ‘s[len(s):len(s)] = [x]’     (2)
                                                                        
                                                                        
‘s.extend(x)’                      same as ‘s[len(s):len(s)] = x’       (3)
                                                                        
                                                                        
‘s.count(x)’                       return number of _i_’s for which
                                   ‘s[i] == x’
                                   
                                                                        
‘s.index(x[, i[, j]])’             return smallest _k_ such that        (4)
                                   ‘s[k] == x’ and ‘i <= k < j’         
                                   
                                                                        
‘s.insert(i, x)’                   same as ‘s[i:i] = [x]’               (5)
                                                                        
                                                                        
‘s.pop([i])’                       same as ‘x = s[i]; del s[i];         (6)
                                   return x’                            
                                   
                                                                        
‘s.remove(x)’                      same as ‘del s[s.index(x)]’          (4)
                                                                        
                                                                        
‘s.reverse()’                      reverses the items of _s_ in place   (7)
                                                                        
                                                                        
‘s.sort([cmp[, key[,               sort the items of _s_ in place       (7)(8)(9)(10)
reverse]]])’                                                            

  Notes:

  1. _t_ must have the same length as the slice it is replacing.

  2. The C implementation of Python has historically accepted multiple
     parameters and implicitly joined them into a tuple; this no longer
     works in Python 2.0.  Use of this misfeature has been deprecated
     since Python 1.4.

  3. _x_ can be any iterable object.

  4. Raises *note ValueError: 236. when _x_ is not found in _s_.  When a
     negative index is passed as the second or third parameter to the
     ‘index()’ method, the list length is added, as for slice indices.
     If it is still negative, it is truncated to zero, as for slice
     indices.

     Changed in version 2.3: Previously, ‘index()’ didn’t have arguments
     for specifying start and stop positions.

  5. When a negative index is passed as the first parameter to the
     ‘insert()’ method, the list length is added, as for slice indices.
     If it is still negative, it is truncated to zero, as for slice
     indices.

     Changed in version 2.3: Previously, all negative indices were
     truncated to zero.

  6. The ‘pop()’ method’s optional argument _i_ defaults to ‘-1’, so
     that by default the last item is removed and returned.

  7. The ‘sort()’ and ‘reverse()’ methods modify the list in place for
     economy of space when sorting or reversing a large list.  To remind
     you that they operate by side effect, they don’t return the sorted
     or reversed list.

  8. The ‘sort()’ method takes optional arguments for controlling the
     comparisons.

     _cmp_ specifies a custom comparison function of two arguments (list
     items) which should return a negative, zero or positive number
     depending on whether the first argument is considered smaller than,
     equal to, or larger than the second argument: ‘cmp=lambda x,y:
     cmp(x.lower(), y.lower())’.  The default value is ‘None’.

     _key_ specifies a function of one argument that is used to extract
     a comparison key from each list element: ‘key=str.lower’.  The
     default value is ‘None’.

     _reverse_ is a boolean value.  If set to ‘True’, then the list
     elements are sorted as if each comparison were reversed.

     In general, the _key_ and _reverse_ conversion processes are much
     faster than specifying an equivalent _cmp_ function.  This is
     because _cmp_ is called multiple times for each list element while
     _key_ and _reverse_ touch each element only once.  Use *note
     functools.cmp_to_key(): 222. to convert an old-style _cmp_ function
     to a _key_ function.

     Changed in version 2.3: Support for ‘None’ as an equivalent to
     omitting _cmp_ was added.

     Changed in version 2.4: Support for _key_ and _reverse_ was added.

  9. Starting with Python 2.3, the ‘sort()’ method is guaranteed to be
     stable.  A sort is stable if it guarantees not to change the
     relative order of elements that compare equal — this is helpful for
     sorting in multiple passes (for example, sort by department, then
     by salary grade).

  10. *CPython implementation detail:* While a list is being sorted, the
     effect of attempting to mutate, or even inspect, the list is
     undefined.  The C implementation of Python 2.3 and newer makes the
     list appear empty for the duration, and raises *note ValueError:
     236. if it can detect that the list has been mutated during a sort.


File: python.info,  Node: Set Types --- set frozenset,  Next: Mapping Types --- dict,  Prev: Sequence Types --- str unicode list tuple bytearray buffer xrange,  Up: Built-in Types

5.5.7 Set Types — ‘set’, ‘frozenset’
------------------------------------

A _set_ object is an unordered collection of distinct *note hashable:
6f5. objects.  Common uses include membership testing, removing
duplicates from a sequence, and computing mathematical operations such
as intersection, union, difference, and symmetric difference.  (For
other containers see the built in *note dict: 305, *note list: 3bc, and
*note tuple: 408. classes, and the *note collections: 65. module.)

  New in version 2.4.

  Like other collections, sets support ‘x in set’, ‘len(set)’, and ‘for
x in set’.  Being an unordered collection, sets do not record element
position or order of insertion.  Accordingly, sets do not support
indexing, slicing, or other sequence-like behavior.

  There are currently two built-in set types, *note set: 36a. and *note
frozenset: 36b.  The *note set: 36a. type is mutable — the contents can
be changed using methods like *note add(): 6f4. and *note remove(): 8e5.
Since it is mutable, it has no hash value and cannot be used as either a
dictionary key or as an element of another set.  The *note frozenset:
36b. type is immutable and *note hashable: 6f5. — its contents cannot be
altered after it is created; it can therefore be used as a dictionary
key or as an element of another set.

  As of Python 2.7, non-empty sets (not frozensets) can be created by
placing a comma-separated list of elements within braces, for example:
‘{'jack', 'sjoerd'}’, in addition to the *note set: 36a. constructor.

  The constructors for both classes work the same:

 -- Class: set ([iterable])
 -- Class: frozenset ([iterable])

     Return a new set or frozenset object whose elements are taken from
     _iterable_.  The elements of a set must be *note hashable: 6f5.  To
     represent sets of sets, the inner sets must be *note frozenset:
     36b. objects.  If _iterable_ is not specified, a new empty set is
     returned.

     Instances of *note set: 36a. and *note frozenset: 36b. provide the
     following operations:

      -- Describe: len(s)

          Return the cardinality of set _s_.

      -- Describe: x in s

          Test _x_ for membership in _s_.

      -- Describe: x not in s

          Test _x_ for non-membership in _s_.

      -- Method: isdisjoint (other)

          Return ‘True’ if the set has no elements in common with
          _other_.  Sets are disjoint if and only if their intersection
          is the empty set.

          New in version 2.6.

      -- Method: issubset (other)

      -- Method: set <= other

          Test whether every element in the set is in _other_.

      -- Method: set < other

          Test whether the set is a proper subset of _other_, that is,
          ‘set <= other and set != other’.

      -- Method: issuperset (other)

      -- Method: set >= other

          Test whether every element in _other_ is in the set.

      -- Method: set > other

          Test whether the set is a proper superset of _other_, that is,
          ‘set >= other and set != other’.

      -- Method: union (other, ...)

      -- Method: set | other | ...

          Return a new set with elements from the set and all others.

          Changed in version 2.6: Accepts multiple input iterables.

      -- Method: intersection (other, ...)

      -- Method: set & other & ...

          Return a new set with elements common to the set and all
          others.

          Changed in version 2.6: Accepts multiple input iterables.

      -- Method: difference (other, ...)

      -- Method: set - other - ...

          Return a new set with elements in the set that are not in the
          others.

          Changed in version 2.6: Accepts multiple input iterables.

      -- Method: symmetric_difference (other)

      -- Method: set ^ other

          Return a new set with elements in either the set or _other_
          but not both.

      -- Method: copy ()

          Return a new set with a shallow copy of _s_.

     Note, the non-operator versions of *note union(): 8e9, *note
     intersection(): 8ea, *note difference(): 8eb, and *note
     symmetric_difference(): 8ec, *note issubset(): 8e7, and *note
     issuperset(): 8e8. methods will accept any iterable as an argument.
     In contrast, their operator based counterparts require their
     arguments to be sets.  This precludes error-prone constructions
     like ‘set('abc') & 'cbs'’ in favor of the more readable
     ‘set('abc').intersection('cbs')’.

     Both *note set: 36a. and *note frozenset: 36b. support set to set
     comparisons.  Two sets are equal if and only if every element of
     each set is contained in the other (each is a subset of the other).
     A set is less than another set if and only if the first set is a
     proper subset of the second set (is a subset, but is not equal).  A
     set is greater than another set if and only if the first set is a
     proper superset of the second set (is a superset, but is not
     equal).

     Instances of *note set: 36a. are compared to instances of *note
     frozenset: 36b. based on their members.  For example, ‘set('abc')
     == frozenset('abc')’ returns ‘True’ and so does ‘set('abc') in
     set([frozenset('abc')])’.

     The subset and equality comparisons do not generalize to a total
     ordering function.  For example, any two non-empty disjoint sets
     are not equal and are not subsets of each other, so _all_ of the
     following return ‘False’: ‘a<b’, ‘a==b’, or ‘a>b’.  Accordingly,
     sets do not implement the *note __cmp__(): 221. method.

     Since sets only define partial ordering (subset relationships), the
     output of the ‘list.sort()’ method is undefined for lists of sets.

     Set elements, like dictionary keys, must be *note hashable: 6f5.

     Binary operations that mix *note set: 36a. instances with *note
     frozenset: 36b. return the type of the first operand.  For example:
     ‘frozenset('ab') | set('bc')’ returns an instance of *note
     frozenset: 36b.

     The following table lists operations available for *note set: 36a.
     that do not apply to immutable instances of *note frozenset: 36b.:

      -- Method: update (other, ...)

      -- Method: set |= other | ...

          Update the set, adding elements from all others.

          Changed in version 2.6: Accepts multiple input iterables.

      -- Method: intersection_update (other, ...)

      -- Method: set &= other & ...

          Update the set, keeping only elements found in it and all
          others.

          Changed in version 2.6: Accepts multiple input iterables.

      -- Method: difference_update (other, ...)

      -- Method: set -= other | ...

          Update the set, removing elements found in others.

          Changed in version 2.6: Accepts multiple input iterables.

      -- Method: symmetric_difference_update (other)

      -- Method: set ^= other

          Update the set, keeping only elements found in either set, but
          not in both.

      -- Method: add (elem)

          Add element _elem_ to the set.

      -- Method: remove (elem)

          Remove element _elem_ from the set.  Raises *note KeyError:
          205. if _elem_ is not contained in the set.

      -- Method: discard (elem)

          Remove element _elem_ from the set if it is present.

      -- Method: pop ()

          Remove and return an arbitrary element from the set.  Raises
          *note KeyError: 205. if the set is empty.

      -- Method: clear ()

          Remove all elements from the set.

     Note, the non-operator versions of the *note update(): 8ee, *note
     intersection_update(): 8ef, *note difference_update(): 8f0, and
     *note symmetric_difference_update(): 8f1. methods will accept any
     iterable as an argument.

     Note, the _elem_ argument to the *note __contains__(): 322, *note
     remove(): 8e5, and *note discard(): 8f2. methods may be a set.  To
     support searching for an equivalent frozenset, the _elem_ set is
     temporarily mutated during the search and then restored.  During
     the search, the _elem_ set should not be read or mutated since it
     does not have a meaningful value.

See also
........

*note Comparison to the built-in set types: 8f5.

     Differences between the *note sets: 14f. module and the built-in
     set types.


File: python.info,  Node: Mapping Types --- dict,  Next: File Objects,  Prev: Set Types --- set frozenset,  Up: Built-in Types

5.5.8 Mapping Types — ‘dict’
----------------------------

A *note mapping: 8f7. object maps *note hashable: 6f5. values to
arbitrary objects.  Mappings are mutable objects.  There is currently
only one standard mapping type, the _dictionary_.  (For other containers
see the built in *note list: 3bc, *note set: 36a, and *note tuple: 408.
classes, and the *note collections: 65. module.)

  A dictionary’s keys are _almost_ arbitrary values.  Values that are
not *note hashable: 6f5, that is, values containing lists, dictionaries
or other mutable types (that are compared by value rather than by object
identity) may not be used as keys.  Numeric types used for keys obey the
normal rules for numeric comparison: if two numbers compare equal (such
as ‘1’ and ‘1.0’) then they can be used interchangeably to index the
same dictionary entry.  (Note however, that since computers store
floating-point numbers as approximations it is usually unwise to use
them as dictionary keys.)

  Dictionaries can be created by placing a comma-separated list of ‘key:
value’ pairs within braces, for example: ‘{'jack': 4098, 'sjoerd':
4127}’ or ‘{4098: 'jack', 4127: 'sjoerd'}’, or by the *note dict: 305.
constructor.

 -- Class: dict (**kwarg)

 -- Class: dict (mapping, **kwarg)

 -- Class: dict (iterable, **kwarg)

     Return a new dictionary initialized from an optional positional
     argument and a possibly empty set of keyword arguments.

     If no positional argument is given, an empty dictionary is created.
     If a positional argument is given and it is a mapping object, a
     dictionary is created with the same key-value pairs as the mapping
     object.  Otherwise, the positional argument must be an *note
     iterable: 8cc. object.  Each item in the iterable must itself be an
     iterable with exactly two objects.  The first object of each item
     becomes a key in the new dictionary, and the second object the
     corresponding value.  If a key occurs more than once, the last
     value for that key becomes the corresponding value in the new
     dictionary.

     If keyword arguments are given, the keyword arguments and their
     values are added to the dictionary created from the positional
     argument.  If a key being added is already present, the value from
     the keyword argument replaces the value from the positional
     argument.

     To illustrate, the following examples all return a dictionary equal
     to ‘{"one": 1, "two": 2, "three": 3}’:

          >>> a = dict(one=1, two=2, three=3)
          >>> b = {'one': 1, 'two': 2, 'three': 3}
          >>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
          >>> d = dict([('two', 2), ('one', 1), ('three', 3)])
          >>> e = dict({'three': 3, 'one': 1, 'two': 2})
          >>> a == b == c == d == e
          True

     Providing keyword arguments as in the first example only works for
     keys that are valid Python identifiers.  Otherwise, any valid keys
     can be used.

     New in version 2.2.

     Changed in version 2.3: Support for building a dictionary from
     keyword arguments added.

     These are the operations that dictionaries support (and therefore,
     custom mapping types should support too):

      -- Describe: len(d)

          Return the number of items in the dictionary _d_.

      -- Describe: d[key]

          Return the item of _d_ with key _key_.  Raises a *note
          KeyError: 205. if _key_ is not in the map.

          New in version 2.5: If a subclass of dict defines a method
          ‘__missing__()’, if the key _key_ is not present, the ‘d[key]’
          operation calls that method with the key _key_ as argument.
          The ‘d[key]’ operation then returns or raises whatever is
          returned or raised by the ‘__missing__(key)’ call if the key
          is not present.  No other operations or methods invoke
          ‘__missing__()’.  If ‘__missing__()’ is not defined, *note
          KeyError: 205. is raised.  ‘__missing__()’ must be a method;
          it cannot be an instance variable.  For an example, see *note
          collections.defaultdict: 8f8.

      -- Describe: d[key] = value

          Set ‘d[key]’ to _value_.

      -- Describe: del d[key]

          Remove ‘d[key]’ from _d_.  Raises a *note KeyError: 205. if
          _key_ is not in the map.

      -- Describe: key in d

          Return ‘True’ if _d_ has a key _key_, else ‘False’.

          New in version 2.2.

      -- Describe: key not in d

          Equivalent to ‘not key in d’.

          New in version 2.2.

      -- Describe: iter(d)

          Return an iterator over the keys of the dictionary.  This is a
          shortcut for *note iterkeys(): 8f9.

      -- Method: clear ()

          Remove all items from the dictionary.

      -- Method: copy ()

          Return a shallow copy of the dictionary.

      -- Method: fromkeys (seq[, value])

          Create a new dictionary with keys from _seq_ and values set to
          _value_.

          *note fromkeys(): 8fc. is a class method that returns a new
          dictionary.  _value_ defaults to ‘None’.

          New in version 2.3.

      -- Method: get (key[, default])

          Return the value for _key_ if _key_ is in the dictionary, else
          _default_.  If _default_ is not given, it defaults to ‘None’,
          so that this method never raises a *note KeyError: 205.

      -- Method: has_key (key)

          Test for the presence of _key_ in the dictionary.  *note
          has_key(): 8fe. is deprecated in favor of ‘key in d’.

      -- Method: items ()

          Return a copy of the dictionary’s list of ‘(key, value)’
          pairs.

          *CPython implementation detail:* Keys and values are listed in
          an arbitrary order which is non-random, varies across Python
          implementations, and depends on the dictionary’s history of
          insertions and deletions.

          If *note items(): 1e3, *note keys(): 1e1, *note values(): 1e2,
          *note iteritems(): 8ff, *note iterkeys(): 8f9, and *note
          itervalues(): 900. are called with no intervening
          modifications to the dictionary, the lists will directly
          correspond.  This allows the creation of ‘(value, key)’ pairs
          using *note zip(): 405.: ‘pairs = zip(d.values(), d.keys())’.
          The same relationship holds for the *note iterkeys(): 8f9. and
          *note itervalues(): 900. methods: ‘pairs = zip(d.itervalues(),
          d.iterkeys())’ provides the same value for ‘pairs’.  Another
          way to create the same list is ‘pairs = [(v, k) for (k, v) in
          d.iteritems()]’.

      -- Method: iteritems ()

          Return an iterator over the dictionary’s ‘(key, value)’ pairs.
          See the note for *note dict.items(): 1e3.

          Using *note iteritems(): 8ff. while adding or deleting entries
          in the dictionary may raise a *note RuntimeError: 39b. or fail
          to iterate over all entries.

          New in version 2.2.

      -- Method: iterkeys ()

          Return an iterator over the dictionary’s keys.  See the note
          for *note dict.items(): 1e3.

          Using *note iterkeys(): 8f9. while adding or deleting entries
          in the dictionary may raise a *note RuntimeError: 39b. or fail
          to iterate over all entries.

          New in version 2.2.

      -- Method: itervalues ()

          Return an iterator over the dictionary’s values.  See the note
          for *note dict.items(): 1e3.

          Using *note itervalues(): 900. while adding or deleting
          entries in the dictionary may raise a *note RuntimeError: 39b.
          or fail to iterate over all entries.

          New in version 2.2.

      -- Method: keys ()

          Return a copy of the dictionary’s list of keys.  See the note
          for *note dict.items(): 1e3.

      -- Method: pop (key[, default])

          If _key_ is in the dictionary, remove it and return its value,
          else return _default_.  If _default_ is not given and _key_ is
          not in the dictionary, a *note KeyError: 205. is raised.

          New in version 2.3.

      -- Method: popitem ()

          Remove and return an arbitrary ‘(key, value)’ pair from the
          dictionary.

          *note popitem(): 902. is useful to destructively iterate over
          a dictionary, as often used in set algorithms.  If the
          dictionary is empty, calling *note popitem(): 902. raises a
          *note KeyError: 205.

      -- Method: setdefault (key[, default])

          If _key_ is in the dictionary, return its value.  If not,
          insert _key_ with a value of _default_ and return _default_.
          _default_ defaults to ‘None’.

      -- Method: update ([other])

          Update the dictionary with the key/value pairs from _other_,
          overwriting existing keys.  Return ‘None’.

          *note update(): 402. accepts either another dictionary object
          or an iterable of key/value pairs (as tuples or other
          iterables of length two).  If keyword arguments are specified,
          the dictionary is then updated with those key/value pairs:
          ‘d.update(red=1, blue=2)’.

          Changed in version 2.4: Allowed the argument to be an iterable
          of key/value pairs and allowed keyword arguments.

      -- Method: values ()

          Return a copy of the dictionary’s list of values.  See the
          note for *note dict.items(): 1e3.

      -- Method: viewitems ()

          Return a new view of the dictionary’s items (‘(key, value)’
          pairs).  See below for documentation of view objects.

          New in version 2.7.

      -- Method: viewkeys ()

          Return a new view of the dictionary’s keys.  See below for
          documentation of view objects.

          New in version 2.7.

      -- Method: viewvalues ()

          Return a new view of the dictionary’s values.  See below for
          documentation of view objects.

          New in version 2.7.

* Menu:

* Dictionary view objects:: 


File: python.info,  Node: Dictionary view objects,  Up: Mapping Types --- dict

5.5.8.1 Dictionary view objects
...............................

The objects returned by *note dict.viewkeys(): 1e4, *note
dict.viewvalues(): 1e5. and *note dict.viewitems(): 1e6. are _view
objects_.  They provide a dynamic view on the dictionary’s entries,
which means that when the dictionary changes, the view reflects these
changes.

  Dictionary views can be iterated over to yield their respective data,
and support membership tests:

 -- Describe: len(dictview)

     Return the number of entries in the dictionary.

 -- Describe: iter(dictview)

     Return an iterator over the keys, values or items (represented as
     tuples of ‘(key, value)’) in the dictionary.

     Keys and values are iterated over in an arbitrary order which is
     non-random, varies across Python implementations, and depends on
     the dictionary’s history of insertions and deletions.  If keys,
     values and items views are iterated over with no intervening
     modifications to the dictionary, the order of items will directly
     correspond.  This allows the creation of ‘(value, key)’ pairs using
     *note zip(): 405.: ‘pairs = zip(d.values(), d.keys())’.  Another
     way to create the same list is ‘pairs = [(v, k) for (k, v) in
     d.items()]’.

     Iterating views while adding or deleting entries in the dictionary
     may raise a *note RuntimeError: 39b. or fail to iterate over all
     entries.

 -- Describe: x in dictview

     Return ‘True’ if _x_ is in the underlying dictionary’s keys, values
     or items (in the latter case, _x_ should be a ‘(key, value)’
     tuple).

  Keys views are set-like since their entries are unique and hashable.
If all values are hashable, so that (key, value) pairs are unique and
hashable, then the items view is also set-like.  (Values views are not
treated as set-like since the entries are generally not unique.)  Then
these set operations are available ("other" refers either to another
view or a set):

 -- Describe: dictview & other

     Return the intersection of the dictview and the other object as a
     new set.

 -- Describe: dictview | other

     Return the union of the dictview and the other object as a new set.

 -- Describe: dictview - other

     Return the difference between the dictview and the other object
     (all elements in _dictview_ that aren’t in _other_) as a new set.

 -- Describe: dictview ^ other

     Return the symmetric difference (all elements either in _dictview_
     or _other_, but not in both) of the dictview and the other object
     as a new set.

  An example of dictionary view usage:

     >>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
     >>> keys = dishes.viewkeys()
     >>> values = dishes.viewvalues()

     >>> # iteration
     >>> n = 0
     >>> for val in values:
     ...     n += val
     >>> print(n)
     504

     >>> # keys and values are iterated over in the same order
     >>> list(keys)
     ['eggs', 'bacon', 'sausage', 'spam']
     >>> list(values)
     [2, 1, 1, 500]

     >>> # view objects are dynamic and reflect dict changes
     >>> del dishes['eggs']
     >>> del dishes['sausage']
     >>> list(keys)
     ['spam', 'bacon']

     >>> # set operations
     >>> keys & {'eggs', 'bacon', 'salad'}
     {'bacon'}


File: python.info,  Node: File Objects,  Next: memoryview type,  Prev: Mapping Types --- dict,  Up: Built-in Types

5.5.9 File Objects
------------------

File objects are implemented using C’s ‘stdio’ package and can be
created with the built-in *note open(): 2d6. function.  File objects are
also returned by some other built-in functions and methods, such as
*note os.popen(): 700. and *note os.fdopen(): 701. and the ‘makefile()’
method of socket objects.  Temporary files can be created using the
*note tempfile: 173. module, and high-level file operations such as
copying, moving, and deleting files and directories can be achieved with
the *note shutil: 154. module.

  When a file operation fails for an I/O-related reason, the exception
*note IOError: 1fa. is raised.  This includes situations where the
operation is not defined for some reason, like ‘seek()’ on a tty device
or writing a file opened for reading.

  Files have the following methods:

 -- Method: file.close ()

     Close the file.  A closed file cannot be read or written any more.
     Any operation which requires that the file be open will raise a
     *note ValueError: 236. after the file has been closed.  Calling
     *note close(): 907. more than once is allowed.

     As of Python 2.5, you can avoid having to call this method
     explicitly if you use the *note with: 1c0. statement.  For example,
     the following code will automatically close _f_ when the *note
     with: 1c0. block is exited:

          from __future__ import with_statement # This isn't required in Python 2.6

          with open("hello.txt") as f:
              for line in f:
                  print line,

     In older versions of Python, you would have needed to do this to
     get the same effect:

          f = open("hello.txt")
          try:
              for line in f:
                  print line,
          finally:
              f.close()

          Note: Not all "file-like" types in Python support use as a
          context manager for the *note with: 1c0. statement.  If your
          code is intended to work with any file-like object, you can
          use the function *note contextlib.closing(): 908. instead of
          using the object directly.

 -- Method: file.flush ()

     Flush the internal buffer, like ‘stdio’’s ‘fflush()’.  This may be
     a no-op on some file-like objects.

          Note: *note flush(): 909. does not necessarily write the
          file’s data to disk.  Use *note flush(): 909. followed by
          *note os.fsync(): 90a. to ensure this behavior.

 -- Method: file.fileno ()

     Return the integer "file descriptor" that is used by the underlying
     implementation to request I/O operations from the operating system.
     This can be useful for other, lower level interfaces that use file
     descriptors, such as the *note fcntl: ca. module or *note
     os.read(): 90c. and friends.

          Note: File-like objects which do not have a real file
          descriptor should _not_ provide this method!

 -- Method: file.isatty ()

     Return ‘True’ if the file is connected to a tty(-like) device, else
     ‘False’.

          Note: If a file-like object is not associated with a real
          file, this method should _not_ be implemented.

 -- Method: file.next ()

     A file object is its own iterator, for example ‘iter(f)’ returns
     _f_ (unless _f_ is closed).  When a file is used as an iterator,
     typically in a *note for: 2f0. loop (for example, ‘for line in f:
     print line.strip()’), the *note next(): 90d. method is called
     repeatedly.  This method returns the next input line, or raises
     *note StopIteration: 333. when EOF is hit when the file is open for
     reading (behavior is undefined when the file is open for writing).
     In order to make a *note for: 2f0. loop the most efficient way of
     looping over the lines of a file (a very common operation), the
     *note next(): 90d. method uses a hidden read-ahead buffer.  As a
     consequence of using a read-ahead buffer, combining *note next():
     90d. with other file methods (like *note readline(): 644.) does not
     work right.  However, using *note seek(): 90e. to reposition the
     file to an absolute position will flush the read-ahead buffer.

     New in version 2.3.

 -- Method: file.read ([size])

     Read at most _size_ bytes from the file (less if the read hits EOF
     before obtaining _size_ bytes).  If the _size_ argument is negative
     or omitted, read all data until EOF is reached.  The bytes are
     returned as a string object.  An empty string is returned when EOF
     is encountered immediately.  (For certain files, like ttys, it
     makes sense to continue reading after an EOF is hit.)  Note that
     this method may call the underlying C function ‘fread()’ more than
     once in an effort to acquire as close to _size_ bytes as possible.
     Also note that when in non-blocking mode, less data than was
     requested may be returned, even if no _size_ parameter was given.

          Note: This function is simply a wrapper for the underlying
          ‘fread()’ C function, and will behave the same in corner
          cases, such as whether the EOF value is cached.

 -- Method: file.readline ([size])

     Read one entire line from the file.  A trailing newline character
     is kept in the string (but may be absent when a file ends with an
     incomplete line).  (1) If the _size_ argument is present and
     non-negative, it is a maximum byte count (including the trailing
     newline) and an incomplete line may be returned.  When _size_ is
     not 0, an empty string is returned _only_ when EOF is encountered
     immediately.

          Note: Unlike ‘stdio’’s ‘fgets()’, the returned string contains
          null characters (‘'\0'’) if they occurred in the input.

 -- Method: file.readlines ([sizehint])

     Read until EOF using *note readline(): 644. and return a list
     containing the lines thus read.  If the optional _sizehint_
     argument is present, instead of reading up to EOF, whole lines
     totalling approximately _sizehint_ bytes (possibly after rounding
     up to an internal buffer size) are read.  Objects implementing a
     file-like interface may choose to ignore _sizehint_ if it cannot be
     implemented, or cannot be implemented efficiently.

 -- Method: file.xreadlines ()

     This method returns the same thing as ‘iter(f)’.

     New in version 2.1.

     Deprecated since version 2.3: Use ‘for line in file’ instead.

 -- Method: file.seek (offset[, whence])

     Set the file’s current position, like ‘stdio’’s ‘fseek()’.  The
     _whence_ argument is optional and defaults to ‘os.SEEK_SET’ or ‘0’
     (absolute file positioning); other values are ‘os.SEEK_CUR’ or ‘1’
     (seek relative to the current position) and ‘os.SEEK_END’ or ‘2’
     (seek relative to the file’s end).  There is no return value.

     For example, ‘f.seek(2, os.SEEK_CUR)’ advances the position by two
     and ‘f.seek(-3, os.SEEK_END)’ sets the position to the third to
     last.

     Note that if the file is opened for appending (mode ‘'a'’ or
     ‘'a+'’), any *note seek(): 90e. operations will be undone at the
     next write.  If the file is only opened for writing in append mode
     (mode ‘'a'’), this method is essentially a no-op, but it remains
     useful for files opened in append mode with reading enabled (mode
     ‘'a+'’).  If the file is opened in text mode (without ‘'b'’), only
     offsets returned by *note tell(): 911. are legal.  Use of other
     offsets causes undefined behavior.

     Note that not all file objects are seekable.

     Changed in version 2.6: Passing float values as offset has been
     deprecated.

 -- Method: file.tell ()

     Return the file’s current position, like ‘stdio’’s ‘ftell()’.

          Note: On Windows, *note tell(): 911. can return illegal values
          (after an ‘fgets()’) when reading files with Unix-style
          line-endings.  Use binary mode (‘'rb'’) to circumvent this
          problem.

 -- Method: file.truncate ([size])

     Truncate the file’s size.  If the optional _size_ argument is
     present, the file is truncated to (at most) that size.  The size
     defaults to the current position.  The current file position is not
     changed.  Note that if a specified size exceeds the file’s current
     size, the result is platform-dependent: possibilities include that
     the file may remain unchanged, increase to the specified size as if
     zero-filled, or increase to the specified size with undefined new
     content.  Availability: Windows, many Unix variants.

 -- Method: file.write (str)

     Write a string to the file.  There is no return value.  Due to
     buffering, the string may not actually show up in the file until
     the *note flush(): 909. or *note close(): 907. method is called.

 -- Method: file.writelines (sequence)

     Write a sequence of strings to the file.  The sequence can be any
     iterable object producing strings, typically a list of strings.
     There is no return value.  (The name is intended to match *note
     readlines(): 642.; *note writelines(): 913. does not add line
     separators.)

  Files support the iterator protocol.  Each iteration returns the same
result as *note readline(): 644, and iteration ends when the *note
readline(): 644. method returns an empty string.

  File objects also offer a number of other interesting attributes.
These are not required for file-like objects, but should be implemented
if they make sense for the particular object.

 -- Attribute: file.closed

     bool indicating the current state of the file object.  This is a
     read-only attribute; the *note close(): 907. method changes the
     value.  It may not be available on all file-like objects.

 -- Attribute: file.encoding

     The encoding that this file uses.  When Unicode strings are written
     to a file, they will be converted to byte strings using this
     encoding.  In addition, when the file is connected to a terminal,
     the attribute gives the encoding that the terminal is likely to use
     (that information might be incorrect if the user has misconfigured
     the terminal).  The attribute is read-only and may not be present
     on all file-like objects.  It may also be ‘None’, in which case the
     file uses the system default encoding for converting Unicode
     strings.

     New in version 2.3.

 -- Attribute: file.errors

     The Unicode error handler used along with the encoding.

     New in version 2.6.

 -- Attribute: file.mode

     The I/O mode for the file.  If the file was created using the *note
     open(): 2d6. built-in function, this will be the value of the
     _mode_ parameter.  This is a read-only attribute and may not be
     present on all file-like objects.

 -- Attribute: file.name

     If the file object was created using *note open(): 2d6, the name of
     the file.  Otherwise, some string that indicates the source of the
     file object, of the form ‘<...>’.  This is a read-only attribute
     and may not be present on all file-like objects.

 -- Attribute: file.newlines

     If Python was built with *note universal newlines: 315. enabled
     (the default) this read-only attribute exists, and for files opened
     in universal newline read mode it keeps track of the types of
     newlines encountered while reading the file.  The values it can
     take are ‘'\r'’, ‘'\n'’, ‘'\r\n'’, ‘None’ (unknown, no newlines
     read yet) or a tuple containing all the newline types seen, to
     indicate that multiple newline conventions were encountered.  For
     files not opened in universal newlines read mode the value of this
     attribute will be ‘None’.

 -- Attribute: file.softspace

     Boolean that indicates whether a space character needs to be
     printed before another value when using the *note print: 4e0.
     statement.  Classes that are trying to simulate a file object
     should also have a writable *note softspace: 91a. attribute, which
     should be initialized to zero.  This will be automatic for most
     classes implemented in Python (care may be needed for objects that
     override attribute access); types implemented in C will have to
     provide a writable *note softspace: 91a. attribute.

          Note: This attribute is not used to control the *note print:
          4e0. statement, but to allow the implementation of *note
          print: 4e0. to keep track of its internal state.

   ---------- Footnotes ----------

   (1) The advantage of leaving the newline on is that returning an
empty string is then an unambiguous EOF indication.  It is also possible
(in cases where it might matter, for example, if you want to make an
exact copy of a file while scanning its lines) to tell whether the last
line of a file ended in a newline or not (yes this happens!).


File: python.info,  Node: memoryview type,  Next: Context Manager Types,  Prev: File Objects,  Up: Built-in Types

5.5.10 memoryview type
----------------------

New in version 2.7.

  *note memoryview: 1c3. objects allow Python code to access the
internal data of an object that supports the buffer protocol without
copying.  Memory is generally interpreted as simple bytes.

 -- Class: memoryview (obj)

     Create a *note memoryview: 1c3. that references _obj_.  _obj_ must
     support the buffer protocol.  Built-in objects that support the
     buffer protocol include *note str: 1ea. and *note bytearray: 1f7.
     (but not *note unicode: 1f5.).

     A *note memoryview: 1c3. has the notion of an _element_, which is
     the atomic memory unit handled by the originating object _obj_.
     For many simple types such as *note str: 1ea. and *note bytearray:
     1f7, an element is a single byte, but other third-party types may
     expose larger elements.

     ‘len(view)’ returns the total number of elements in the memoryview,
     _view_.  The *note itemsize: 91c. attribute will give you the
     number of bytes in a single element.

     A *note memoryview: 1c3. supports slicing to expose its data.
     Taking a single index will return a single element as a *note str:
     1ea. object.  Full slicing will result in a subview:

          >>> v = memoryview('abcefg')
          >>> v[1]
          'b'
          >>> v[-1]
          'g'
          >>> v[1:4]
          <memory at 0x77ab28>
          >>> v[1:4].tobytes()
          'bce'

     If the object the memoryview is over supports changing its data,
     the memoryview supports slice assignment:

          >>> data = bytearray('abcefg')
          >>> v = memoryview(data)
          >>> v.readonly
          False
          >>> v[0] = 'z'
          >>> data
          bytearray(b'zbcefg')
          >>> v[1:4] = '123'
          >>> data
          bytearray(b'z123fg')
          >>> v[2] = 'spam'
          Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
          ValueError: cannot modify size of memoryview object

     Notice how the size of the memoryview object cannot be changed.

     *note memoryview: 1c3. has two methods:

      -- Method: tobytes ()

          Return the data in the buffer as a bytestring (an object of
          class *note str: 1ea.).

               >>> m = memoryview("abc")
               >>> m.tobytes()
               'abc'

      -- Method: tolist ()

          Return the data in the buffer as a list of integers.

               >>> memoryview("abc").tolist()
               [97, 98, 99]

     There are also several readonly attributes available:

      -- Attribute: format

          A string containing the format (in *note struct: 166. module
          style) for each element in the view.  This defaults to ‘'B'’,
          a simple bytestring.

      -- Attribute: itemsize

          The size in bytes of each element of the memoryview.

      -- Attribute: shape

          A tuple of integers the length of *note ndim: 921. giving the
          shape of the memory as a N-dimensional array.

      -- Attribute: ndim

          An integer indicating how many dimensions of a
          multi-dimensional array the memory represents.

      -- Attribute: strides

          A tuple of integers the length of *note ndim: 921. giving the
          size in bytes to access each element for each dimension of the
          array.

      -- Attribute: readonly

          A bool indicating whether the memory is read only.


File: python.info,  Node: Context Manager Types,  Next: Other Built-in Types,  Prev: memoryview type,  Up: Built-in Types

5.5.11 Context Manager Types
----------------------------

New in version 2.5.

  Python’s *note with: 1c0. statement supports the concept of a runtime
context defined by a context manager.  This is implemented using two
separate methods that allow user-defined classes to define a runtime
context that is entered before the statement body is executed and exited
when the statement ends.

  The _context management protocol_ consists of a pair of methods that
need to be provided for a context manager object to define a runtime
context:

 -- Method: contextmanager.__enter__ ()

     Enter the runtime context and return either this object or another
     object related to the runtime context.  The value returned by this
     method is bound to the identifier in the *note as: 2f8. clause of
     *note with: 1c0. statements using this context manager.

     An example of a context manager that returns itself is a file
     object.  File objects return themselves from __enter__() to allow
     *note open(): 2d6. to be used as the context expression in a *note
     with: 1c0. statement.

     An example of a context manager that returns a related object is
     the one returned by *note decimal.localcontext(): 926.  These
     managers set the active decimal context to a copy of the original
     decimal context and then return the copy.  This allows changes to
     be made to the current decimal context in the body of the *note
     with: 1c0. statement without affecting code outside the *note with:
     1c0. statement.

 -- Method: contextmanager.__exit__ (exc_type, exc_val, exc_tb)

     Exit the runtime context and return a Boolean flag indicating if
     any exception that occurred should be suppressed.  If an exception
     occurred while executing the body of the *note with: 1c0.
     statement, the arguments contain the exception type, value and
     traceback information.  Otherwise, all three arguments are ‘None’.

     Returning a true value from this method will cause the *note with:
     1c0. statement to suppress the exception and continue execution
     with the statement immediately following the *note with: 1c0.
     statement.  Otherwise the exception continues propagating after
     this method has finished executing.  Exceptions that occur during
     execution of this method will replace any exception that occurred
     in the body of the *note with: 1c0. statement.

     The exception passed in should never be reraised explicitly -
     instead, this method should return a false value to indicate that
     the method completed successfully and does not want to suppress the
     raised exception.  This allows context management code (such as
     ‘contextlib.nested’) to easily detect whether or not an *note
     __exit__(): 927. method has actually failed.

  Python defines several context managers to support easy thread
synchronisation, prompt closure of files or other objects, and simpler
manipulation of the active decimal arithmetic context.  The specific
types are not treated specially beyond their implementation of the
context management protocol.  See the *note contextlib: 6e. module for
some examples.

  Python’s *note generator: 5dc.s and the ‘contextlib.contextmanager’
*note decorator: 856. provide a convenient way to implement these
protocols.  If a generator function is decorated with the
‘contextlib.contextmanager’ decorator, it will return a context manager
implementing the necessary *note __enter__(): 1ff. and *note __exit__():
200. methods, rather than the iterator produced by an undecorated
generator function.

  Note that there is no specific slot for any of these methods in the
type structure for Python objects in the Python/C API. Extension types
wanting to define these methods must provide them as a normal Python
accessible method.  Compared to the overhead of setting up the runtime
context, the overhead of a single class dictionary lookup is negligible.


File: python.info,  Node: Other Built-in Types,  Next: Special Attributes,  Prev: Context Manager Types,  Up: Built-in Types

5.5.12 Other Built-in Types
---------------------------

The interpreter supports several other kinds of objects.  Most of these
support only one or two operations.

* Menu:

* Modules: Modules<2>. 
* Classes and Class Instances:: 
* Functions:: 
* Methods:: 
* Code Objects:: 
* Type Objects:: 
* The Null Object:: 
* The Ellipsis Object:: 
* The NotImplemented Object:: 
* Boolean Values:: 
* Internal Objects:: 


File: python.info,  Node: Modules<2>,  Next: Classes and Class Instances,  Up: Other Built-in Types

5.5.12.1 Modules
................

The only special operation on a module is attribute access: ‘m.name’,
where _m_ is a module and _name_ accesses a name defined in _m_’s symbol
table.  Module attributes can be assigned to.  (Note that the *note
import: 1f4. statement is not, strictly speaking, an operation on a
module object; ‘import foo’ does not require a module object named _foo_
to exist, rather it requires an (external) _definition_ for a module
named _foo_ somewhere.)

  A special attribute of every module is *note __dict__: 6fe.  This is
the dictionary containing the module’s symbol table.  Modifying this
dictionary will actually change the module’s symbol table, but direct
assignment to the ‘__dict__’ attribute is not possible (you can write
‘m.__dict__['a'] = 1’, which defines ‘m.a’ to be ‘1’, but you can’t
write ‘m.__dict__ = {}’).  Modifying ‘__dict__’ directly is not
recommended.

  Modules built into the interpreter are written like this: ‘<module
'sys' (built-in)>’.  If loaded from a file, they are written as ‘<module
'os' from '/usr/local/lib/pythonX.Y/os.pyc'>’.


File: python.info,  Node: Classes and Class Instances,  Next: Functions,  Prev: Modules<2>,  Up: Other Built-in Types

5.5.12.2 Classes and Class Instances
....................................

See *note Objects, values and types: 6e9. and *note Class definitions:
33d. for these.


File: python.info,  Node: Functions,  Next: Methods,  Prev: Classes and Class Instances,  Up: Other Built-in Types

5.5.12.3 Functions
..................

Function objects are created by function definitions.  The only
operation on a function object is to call it: ‘func(argument-list)’.

  There are really two flavors of function objects: built-in functions
and user-defined functions.  Both support the same operation (to call
the function), but the implementation is different, hence the different
object types.

  See *note Function definitions: 6f8. for more information.


File: python.info,  Node: Methods,  Next: Code Objects,  Prev: Functions,  Up: Other Built-in Types

5.5.12.4 Methods
................

Methods are functions that are called using the attribute notation.
There are two flavors: built-in methods (such as ‘append()’ on lists)
and class instance methods.  Built-in methods are described with the
types that support them.

  The implementation adds two special read-only attributes to class
instance methods: ‘m.im_self’ is the object on which the method
operates, and ‘m.im_func’ is the function implementing the method.
Calling ‘m(arg-1, arg-2, ..., arg-n)’ is completely equivalent to
calling ‘m.im_func(m.im_self, arg-1, arg-2, ..., arg-n)’.

  Class instance methods are either _bound_ or _unbound_, referring to
whether the method was accessed through an instance or a class,
respectively.  When a method is unbound, its ‘im_self’ attribute will be
‘None’ and if called, an explicit ‘self’ object must be passed as the
first argument.  In this case, ‘self’ must be an instance of the unbound
method’s class (or a subclass of that class), otherwise a *note
TypeError: 218. is raised.

  Like function objects, methods objects support getting arbitrary
attributes.  However, since method attributes are actually stored on the
underlying function object (‘meth.im_func’), setting method attributes
on either bound or unbound methods is disallowed.  Attempting to set an
attribute on a method results in an *note AttributeError: 1f8. being
raised.  In order to set a method attribute, you need to explicitly set
it on the underlying function object:

     >>> class C:
     ...     def method(self):
     ...         pass
     ...
     >>> c = C()
     >>> c.method.whoami = 'my name is method'  # can't set on the method
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
     AttributeError: 'instancemethod' object has no attribute 'whoami'
     >>> c.method.im_func.whoami = 'my name is method'
     >>> c.method.whoami
     'my name is method'

  See *note The standard type hierarchy: 6ed. for more information.


File: python.info,  Node: Code Objects,  Next: Type Objects,  Prev: Methods,  Up: Other Built-in Types

5.5.12.5 Code Objects
.....................

Code objects are used by the implementation to represent
"pseudo-compiled" executable Python code such as a function body.  They
differ from function objects because they don’t contain a reference to
their global execution environment.  Code objects are returned by the
built-in *note compile(): 1fb. function and can be extracted from
function objects through their ‘func_code’ attribute.  See also the
*note code: 62. module.

  A code object can be executed or evaluated by passing it (instead of a
source string) to the *note exec: 404. statement or the built-in *note
eval(): 360. function.

  See *note The standard type hierarchy: 6ed. for more information.


File: python.info,  Node: Type Objects,  Next: The Null Object,  Prev: Code Objects,  Up: Other Built-in Types

5.5.12.6 Type Objects
.....................

Type objects represent the various object types.  An object’s type is
accessed by the built-in function *note type(): 490.  There are no
special operations on types.  The standard module *note types: 185.
defines names for all standard built-in types.

  Types are written like this: ‘<type 'int'>’.


File: python.info,  Node: The Null Object,  Next: The Ellipsis Object,  Prev: Type Objects,  Up: Other Built-in Types

5.5.12.7 The Null Object
........................

This object is returned by functions that don’t explicitly return a
value.  It supports no special operations.  There is exactly one null
object, named ‘None’ (a built-in name).

  It is written as ‘None’.


File: python.info,  Node: The Ellipsis Object,  Next: The NotImplemented Object,  Prev: The Null Object,  Up: Other Built-in Types

5.5.12.8 The Ellipsis Object
............................

This object is used by extended slice notation (see *note Slicings:
7b1.).  It supports no special operations.  There is exactly one
ellipsis object, named *note Ellipsis: 899. (a built-in name).

  It is written as ‘Ellipsis’.  When in a subscript, it can also be
written as ‘...’, for example ‘seq[...]’.


File: python.info,  Node: The NotImplemented Object,  Next: Boolean Values,  Prev: The Ellipsis Object,  Up: Other Built-in Types

5.5.12.9 The NotImplemented Object
..................................

This object is returned from comparisons and binary operations when they
are asked to operate on types they don’t support.  See *note
Comparisons: 7dc. for more information.

  It is written as ‘NotImplemented’.


File: python.info,  Node: Boolean Values,  Next: Internal Objects,  Prev: The NotImplemented Object,  Up: Other Built-in Types

5.5.12.10 Boolean Values
........................

Boolean values are the two constant objects ‘False’ and ‘True’.  They
are used to represent truth values (although other values can also be
considered false or true).  In numeric contexts (for example when used
as the argument to an arithmetic operator), they behave like the
integers 0 and 1, respectively.  The built-in function *note bool():
43c. can be used to convert any value to a Boolean, if the value can be
interpreted as a truth value (see section *note Truth Value Testing:
8a3. above).

  They are written as ‘False’ and ‘True’, respectively.


File: python.info,  Node: Internal Objects,  Prev: Boolean Values,  Up: Other Built-in Types

5.5.12.11 Internal Objects
..........................

See *note The standard type hierarchy: 6ed. for this information.  It
describes stack frame objects, traceback objects, and slice objects.


File: python.info,  Node: Special Attributes,  Prev: Other Built-in Types,  Up: Built-in Types

5.5.13 Special Attributes
-------------------------

The implementation adds a few special read-only attributes to several
object types, where they are relevant.  Some of these are not reported
by the *note dir(): 33a. built-in function.

 -- Attribute: object.__dict__

     A dictionary or other mapping object used to store an object’s
     (writable) attributes.

 -- Attribute: object.__methods__

     Deprecated since version 2.2: Use the built-in function *note
     dir(): 33a. to get a list of an object’s attributes.  This
     attribute is no longer available.

 -- Attribute: object.__members__

     Deprecated since version 2.2: Use the built-in function *note
     dir(): 33a. to get a list of an object’s attributes.  This
     attribute is no longer available.

 -- Attribute: instance.__class__

     The class to which a class instance belongs.

 -- Attribute: class.__bases__

     The tuple of base classes of a class object.

 -- Attribute: class.__name__

     The name of the class or type.

  The following attributes are only supported by *note new-style class:
5d1.es.

 -- Attribute: class.__mro__

     This attribute is a tuple of classes that are considered when
     looking for base classes during method resolution.

 -- Method: class.mro ()

     This method can be overridden by a metaclass to customize the
     method resolution order for its instances.  It is called at class
     instantiation, and its result is stored in *note __mro__: 88f.

 -- Method: class.__subclasses__ ()

     Each new-style class keeps a list of weak references to its
     immediate subclasses.  This method returns a list of all those
     references still alive.  Example:

          >>> int.__subclasses__()
          [<type 'bool'>]


File: python.info,  Node: Built-in Exceptions,  Next: String Services,  Prev: Built-in Types,  Up: The Python Standard Library

5.6 Built-in Exceptions
=======================

Exceptions should be class objects.  The exceptions are defined in the
module *note exceptions: c9.  This module never needs to be imported
explicitly: the exceptions are provided in the built-in namespace as
well as the *note exceptions: c9. module.

  For class exceptions, in a *note try: 395. statement with an *note
except: 397. clause that mentions a particular class, that clause also
handles any exception classes derived from that class (but not exception
classes from which _it_ is derived).  Two exception classes that are not
related via subclassing are never equivalent, even if they have the same
name.

  The built-in exceptions listed below can be generated by the
interpreter or built-in functions.  Except where mentioned, they have an
"associated value" indicating the detailed cause of the error.  This may
be a string or a tuple containing several items of information (e.g., an
error code and a string explaining the code).  The associated value is
the second argument to the *note raise: 5b1. statement.  If the
exception class is derived from the standard root class *note
BaseException: 338, the associated value is present as the exception
instance’s ‘args’ attribute.

  User code can raise built-in exceptions.  This can be used to test an
exception handler or to report an error condition "just like" the
situation in which the interpreter raises the same exception; but beware
that there is nothing to prevent user code from raising an inappropriate
error.

  The built-in exception classes can be subclassed to define new
exceptions; programmers are encouraged to derive new exceptions from the
*note Exception: 339. class or one of its subclasses, and not from *note
BaseException: 338.  More information on defining exceptions is
available in the Python Tutorial under *note User-defined Exceptions:
5b2.

  The following exceptions are only used as base classes for other
exceptions.

 -- Exception: BaseException

     The base class for all built-in exceptions.  It is not meant to be
     directly inherited by user-defined classes (for that, use *note
     Exception: 339.).  If *note str(): 1ea. or *note unicode(): 1f5. is
     called on an instance of this class, the representation of the
     argument(s) to the instance are returned, or the empty string when
     there were no arguments.

     New in version 2.5.

      -- Attribute: args

          The tuple of arguments given to the exception constructor.
          Some built-in exceptions (like *note IOError: 1fa.) expect a
          certain number of arguments and assign a special meaning to
          the elements of this tuple, while others are usually called
          only with a single string giving an error message.

 -- Exception: Exception

     All built-in, non-system-exiting exceptions are derived from this
     class.  All user-defined exceptions should also be derived from
     this class.

     Changed in version 2.5: Changed to inherit from *note
     BaseException: 338.

 -- Exception: StandardError

     The base class for all built-in exceptions except *note
     StopIteration: 333, *note GeneratorExit: 337, *note
     KeyboardInterrupt: 251. and *note SystemExit: 332.  *note
     StandardError: 382. itself is derived from *note Exception: 339.

 -- Exception: ArithmeticError

     The base class for those built-in exceptions that are raised for
     various arithmetic errors: *note OverflowError: 2db, *note
     ZeroDivisionError: 5ac, *note FloatingPointError: 948.

 -- Exception: BufferError

     Raised when a *note buffer: 94a. related operation cannot be
     performed.

 -- Exception: LookupError

     The base class for the exceptions that are raised when a key or
     index used on a mapping or sequence is invalid: *note IndexError:
     4e1, *note KeyError: 205.  This can be raised directly by *note
     codecs.lookup(): 94b.

 -- Exception: EnvironmentError

     The base class for exceptions that can occur outside the Python
     system: *note IOError: 1fa, *note OSError: 231.  When exceptions of
     this type are created with a 2-tuple, the first item is available
     on the instance’s *note errno: c8. attribute (it is assumed to be
     an error number), and the second item is available on the
     ‘strerror’ attribute (it is usually the associated error message).
     The tuple itself is also available on the ‘args’ attribute.

     New in version 1.5.2.

     When an *note EnvironmentError: 94c. exception is instantiated with
     a 3-tuple, the first two items are available as above, while the
     third item is available on the ‘filename’ attribute.  However, for
     backwards compatibility, the ‘args’ attribute contains only a
     2-tuple of the first two constructor arguments.

     The ‘filename’ attribute is ‘None’ when this exception is created
     with other than 3 arguments.  The *note errno: c8. and ‘strerror’
     attributes are also ‘None’ when the instance was created with other
     than 2 or 3 arguments.  In this last case, ‘args’ contains the
     verbatim constructor arguments as a tuple.

  The following exceptions are the exceptions that are actually raised.

 -- Exception: AssertionError

     Raised when an *note assert: 452. statement fails.

 -- Exception: AttributeError

     Raised when an attribute reference (see *note Attribute references:
     7ab.) or assignment fails.  (When an object does not support
     attribute references or attribute assignments at all, *note
     TypeError: 218. is raised.)

 -- Exception: EOFError

     Raised when one of the built-in functions (*note input(): 3bf. or
     *note raw_input(): 869.) hits an end-of-file condition (EOF)
     without reading any data.  (N.B.: the *note file.read(): 90f. and
     *note file.readline(): 644. methods return an empty string when
     they hit EOF.)

 -- Exception: FloatingPointError

     Raised when a floating point operation fails.  This exception is
     always defined, but can only be raised when Python is configured
     with the ‘--with-fpectl’ option, or the ‘WANT_SIGFPE_HANDLER’
     symbol is defined in the ‘pyconfig.h’ file.

 -- Exception: GeneratorExit

     Raised when a *note generator: 5dc.’s ‘close()’ method is called.
     It directly inherits from *note BaseException: 338. instead of
     *note StandardError: 382. since it is technically not an error.

     New in version 2.5.

     Changed in version 2.6: Changed to inherit from *note
     BaseException: 338.

 -- Exception: IOError

     Raised when an I/O operation (such as a *note print: 4e0.
     statement, the built-in *note open(): 2d6. function or a method of
     a file object) fails for an I/O-related reason, e.g., "file not
     found" or "disk full".

     This class is derived from *note EnvironmentError: 94c.  See the
     discussion above for more information on exception instance
     attributes.

     Changed in version 2.6: Changed *note socket.error: 381. to use
     this as a base class.

 -- Exception: ImportError

     Raised when an *note import: 1f4. statement fails to find the
     module definition or when a ‘from ... import’ fails to find a name
     that is to be imported.

 -- Exception: IndexError

     Raised when a sequence subscript is out of range.  (Slice indices
     are silently truncated to fall in the allowed range; if an index is
     not a plain integer, *note TypeError: 218. is raised.)

 -- Exception: KeyError

     Raised when a mapping (dictionary) key is not found in the set of
     existing keys.

 -- Exception: KeyboardInterrupt

     Raised when the user hits the interrupt key (normally ‘Control-C’
     or ‘Delete’).  During execution, a check for interrupts is made
     regularly.  Interrupts typed when a built-in function *note
     input(): 3bf. or *note raw_input(): 869. is waiting for input also
     raise this exception.  The exception inherits from *note
     BaseException: 338. so as to not be accidentally caught by code
     that catches *note Exception: 339. and thus prevent the interpreter
     from exiting.

     Changed in version 2.5: Changed to inherit from *note
     BaseException: 338.

 -- Exception: MemoryError

     Raised when an operation runs out of memory but the situation may
     still be rescued (by deleting some objects).  The associated value
     is a string indicating what kind of (internal) operation ran out of
     memory.  Note that because of the underlying memory management
     architecture (C’s ‘malloc()’ function), the interpreter may not
     always be able to completely recover from this situation; it
     nevertheless raises an exception so that a stack traceback can be
     printed, in case a run-away program was the cause.

 -- Exception: NameError

     Raised when a local or global name is not found.  This applies only
     to unqualified names.  The associated value is an error message
     that includes the name that could not be found.

 -- Exception: NotImplementedError

     This exception is derived from *note RuntimeError: 39b.  In user
     defined base classes, abstract methods should raise this exception
     when they require derived classes to override the method.

     New in version 1.5.2.

 -- Exception: OSError

     This exception is derived from *note EnvironmentError: 94c.  It is
     raised when a function returns a system-related error (not for
     illegal argument types or other incidental errors).  The *note
     errno: c8. attribute is a numeric error code from ‘errno’, and the
     ‘strerror’ attribute is the corresponding string, as would be
     printed by the C function ‘perror()’.  See the module *note errno:
     c8, which contains names for the error codes defined by the
     underlying operating system.

     For exceptions that involve a file system path (such as ‘chdir()’
     or ‘unlink()’), the exception instance will contain a third
     attribute, ‘filename’, which is the file name passed to the
     function.

     New in version 1.5.2.

 -- Exception: OverflowError

     Raised when the result of an arithmetic operation is too large to
     be represented.  This cannot occur for long integers (which would
     rather raise *note MemoryError: 94d. than give up) and for most
     operations with plain integers, which return a long integer
     instead.  Because of the lack of standardization of floating point
     exception handling in C, most floating point operations also aren’t
     checked.

 -- Exception: ReferenceError

     This exception is raised when a weak reference proxy, created by
     the *note weakref.proxy(): 94f. function, is used to access an
     attribute of the referent after it has been garbage collected.  For
     more information on weak references, see the *note weakref: 195.
     module.

     New in version 2.2: Previously known as the *note
     weakref.ReferenceError: 4c3. exception.

 -- Exception: RuntimeError

     Raised when an error is detected that doesn’t fall in any of the
     other categories.  The associated value is a string indicating what
     precisely went wrong.

 -- Exception: StopIteration

     Raised by an *note iterator: 87f.’s *note next(): 5d9. method to
     signal that there are no further values.  This is derived from
     *note Exception: 339. rather than *note StandardError: 382, since
     this is not considered an error in its normal application.

     New in version 2.2.

 -- Exception: SyntaxError

     Raised when the parser encounters a syntax error.  This may occur
     in an *note import: 1f4. statement, in an *note exec: 404.
     statement, in a call to the built-in function *note eval(): 360. or
     *note input(): 3bf, or when reading the initial script or standard
     input (also interactively).

     Instances of this class have attributes ‘filename’, ‘lineno’,
     ‘offset’ and ‘text’ for easier access to the details.  *note str():
     1ea. of the exception instance returns only the message.

 -- Exception: IndentationError

     Base class for syntax errors related to incorrect indentation.
     This is a subclass of *note SyntaxError: 498.

 -- Exception: TabError

     Raised when indentation contains an inconsistent use of tabs and
     spaces.  This is a subclass of *note IndentationError: 4e4.

 -- Exception: SystemError

     Raised when the interpreter finds an internal error, but the
     situation does not look so serious to cause it to abandon all hope.
     The associated value is a string indicating what went wrong (in
     low-level terms).

     You should report this to the author or maintainer of your Python
     interpreter.  Be sure to report the version of the Python
     interpreter (‘sys.version’; it is also printed at the start of an
     interactive Python session), the exact error message (the
     exception’s associated value) and if possible the source of the
     program that triggered the error.

 -- Exception: SystemExit

     This exception is raised by the *note sys.exit(): 2a7. function.
     When it is not handled, the Python interpreter exits; no stack
     traceback is printed.  If the associated value is a plain integer,
     it specifies the system exit status (passed to C’s ‘exit()’
     function); if it is ‘None’, the exit status is zero; if it has
     another type (such as a string), the object’s value is printed and
     the exit status is one.

     Instances have an attribute ‘code’ which is set to the proposed
     exit status or error message (defaulting to ‘None’).  Also, this
     exception derives directly from *note BaseException: 338. and not
     *note StandardError: 382, since it is not technically an error.

     A call to *note sys.exit(): 2a7. is translated into an exception so
     that clean-up handlers (*note finally: 396. clauses of *note try:
     395. statements) can be executed, and so that a debugger can
     execute a script without running the risk of losing control.  The
     *note os._exit(): 951. function can be used if it is absolutely
     positively necessary to exit immediately (for example, in the child
     process after a call to *note os.fork(): 244.).

     The exception inherits from *note BaseException: 338. instead of
     *note StandardError: 382. or *note Exception: 339. so that it is
     not accidentally caught by code that catches *note Exception: 339.
     This allows the exception to properly propagate up and cause the
     interpreter to exit.

     Changed in version 2.5: Changed to inherit from *note
     BaseException: 338.

 -- Exception: TypeError

     Raised when an operation or function is applied to an object of
     inappropriate type.  The associated value is a string giving
     details about the type mismatch.

 -- Exception: UnboundLocalError

     Raised when a reference is made to a local variable in a function
     or method, but no value has been bound to that variable.  This is a
     subclass of *note NameError: 3a3.

     New in version 2.0.

 -- Exception: UnicodeError

     Raised when a Unicode-related encoding or decoding error occurs.
     It is a subclass of *note ValueError: 236.

     *note UnicodeError: 433. has attributes that describe the encoding
     or decoding error.  For example, ‘err.object[err.start:err.end]’
     gives the particular invalid input that the codec failed on.

      -- Attribute: encoding

          The name of the encoding that raised the error.

      -- Attribute: reason

          A string describing the specific codec error.

      -- Attribute: object

          The object the codec was attempting to encode or decode.

      -- Attribute: start

          The first index of invalid data in *note object: 1f1.

      -- Attribute: end

          The index after the last invalid data in *note object: 1f1.

     New in version 2.0.

 -- Exception: UnicodeEncodeError

     Raised when a Unicode-related error occurs during encoding.  It is
     a subclass of *note UnicodeError: 433.

     New in version 2.3.

 -- Exception: UnicodeDecodeError

     Raised when a Unicode-related error occurs during decoding.  It is
     a subclass of *note UnicodeError: 433.

     New in version 2.3.

 -- Exception: UnicodeTranslateError

     Raised when a Unicode-related error occurs during translating.  It
     is a subclass of *note UnicodeError: 433.

     New in version 2.3.

 -- Exception: ValueError

     Raised when a built-in operation or function receives an argument
     that has the right type but an inappropriate value, and the
     situation is not described by a more precise exception such as
     *note IndexError: 4e1.

 -- Exception: VMSError

     Only available on VMS. Raised when a VMS-specific error occurs.

 -- Exception: WindowsError

     Raised when a Windows-specific error occurs or when the error
     number does not correspond to an ‘errno’ value.  The ‘winerror’ and
     ‘strerror’ values are created from the return values of the
     ‘GetLastError()’ and ‘FormatMessage()’ functions from the Windows
     Platform API. The *note errno: c8. value maps the ‘winerror’ value
     to corresponding ‘errno.h’ values.  This is a subclass of *note
     OSError: 231.

     New in version 2.0.

     Changed in version 2.5: Previous versions put the ‘GetLastError()’
     codes into *note errno: c8.

 -- Exception: ZeroDivisionError

     Raised when the second argument of a division or modulo operation
     is zero.  The associated value is a string indicating the type of
     the operands and the operation.

  The following exceptions are used as warning categories; see the *note
warnings: 193. module for more information.

 -- Exception: Warning

     Base class for warning categories.

 -- Exception: UserWarning

     Base class for warnings generated by user code.

 -- Exception: DeprecationWarning

     Base class for warnings about deprecated features.

 -- Exception: PendingDeprecationWarning

     Base class for warnings about features which will be deprecated in
     the future.

 -- Exception: SyntaxWarning

     Base class for warnings about dubious syntax

 -- Exception: RuntimeWarning

     Base class for warnings about dubious runtime behavior.

 -- Exception: FutureWarning

     Base class for warnings about constructs that will change
     semantically in the future.

 -- Exception: ImportWarning

     Base class for warnings about probable mistakes in module imports.

     New in version 2.5.

 -- Exception: UnicodeWarning

     Base class for warnings related to Unicode.

     New in version 2.5.

* Menu:

* Exception hierarchy:: 


File: python.info,  Node: Exception hierarchy,  Up: Built-in Exceptions

5.6.1 Exception hierarchy
-------------------------

The class hierarchy for built-in exceptions is:

     BaseException
      +-- SystemExit
      +-- KeyboardInterrupt
      +-- GeneratorExit
      +-- Exception
           +-- StopIteration
           +-- StandardError
           |    +-- BufferError
           |    +-- ArithmeticError
           |    |    +-- FloatingPointError
           |    |    +-- OverflowError
           |    |    +-- ZeroDivisionError
           |    +-- AssertionError
           |    +-- AttributeError
           |    +-- EnvironmentError
           |    |    +-- IOError
           |    |    +-- OSError
           |    |         +-- WindowsError (Windows)
           |    |         +-- VMSError (VMS)
           |    +-- EOFError
           |    +-- ImportError
           |    +-- LookupError
           |    |    +-- IndexError
           |    |    +-- KeyError
           |    +-- MemoryError
           |    +-- NameError
           |    |    +-- UnboundLocalError
           |    +-- ReferenceError
           |    +-- RuntimeError
           |    |    +-- NotImplementedError
           |    +-- SyntaxError
           |    |    +-- IndentationError
           |    |         +-- TabError
           |    +-- SystemError
           |    +-- TypeError
           |    +-- ValueError
           |         +-- UnicodeError
           |              +-- UnicodeDecodeError
           |              +-- UnicodeEncodeError
           |              +-- UnicodeTranslateError
           +-- Warning
                +-- DeprecationWarning
                +-- PendingDeprecationWarning
                +-- RuntimeWarning
                +-- SyntaxWarning
                +-- UserWarning
                +-- FutureWarning
     	   +-- ImportWarning
     	   +-- UnicodeWarning
     	   +-- BytesWarning



File: python.info,  Node: String Services,  Next: Data Types,  Prev: Built-in Exceptions,  Up: The Python Standard Library

5.7 String Services
===================

The modules described in this chapter provide a wide range of string
manipulation operations.

  In addition, Python’s built-in string classes support the sequence
type methods described in the *note Sequence Types — str, unicode, list,
tuple, bytearray, buffer, xrange: 521. section, and also the
string-specific methods described in the *note String Methods: 522.
section.  To output formatted strings use template strings or the ‘%’
operator described in the *note String Formatting Operations: 524.
section.  Also, see the *note re: 143. module for string functions based
on regular expressions.

* Menu:

* string: string --- Common string operations. Common string operations
* re: re --- Regular expression operations. Regular expression operations
* struct: struct --- Interpret strings as packed binary data. Interpret strings as packed binary data
* difflib: difflib --- Helpers for computing deltas. Helpers for computing deltas
* StringIO: StringIO --- Read and write strings as files. Read and write strings as files
* cStringIO: cStringIO --- Faster version of StringIO. Faster version of StringIO
* textwrap: textwrap --- Text wrapping and filling. Text wrapping and filling
* codecs: codecs --- Codec registry and base classes. Codec registry and base classes
* unicodedata: unicodedata --- Unicode Database. Unicode Database
* stringprep: stringprep --- Internet String Preparation. Internet String Preparation
* fpformat: fpformat --- Floating point conversions. Floating point conversions

string — Common string operations

* String constants:: 
* String Formatting:: 
* Format String Syntax:: 
* Template strings:: 
* String functions:: 
* Deprecated string functions:: 

Format String Syntax

* Format Specification Mini-Language:: 
* Format examples:: 

re — Regular expression operations

* Regular Expression Syntax:: 
* Module Contents:: 
* Regular Expression Objects:: 
* Match Objects:: 
* Examples:: 

Examples

* Checking For a Pair:: 
* Simulating scanf(): Simulating scanf. 
* search() vs. match(): search vs match. 
* Making a Phonebook:: 
* Text Munging:: 
* Finding all Adverbs:: 
* Finding all Adverbs and their Positions:: 
* Raw String Notation:: 

struct — Interpret strings as packed binary data

* Functions and Exceptions:: 
* Format Strings:: 
* Classes: Classes<2>. 

Format Strings

* Byte Order, Size, and Alignment: Byte Order Size and Alignment. 
* Format Characters:: 
* Examples: Examples<2>. 

difflib — Helpers for computing deltas

* SequenceMatcher Objects:: 
* SequenceMatcher Examples:: 
* Differ Objects:: 
* Differ Example:: 
* A command-line interface to difflib:: 

codecs — Codec registry and base classes

* Codec Base Classes:: 
* Encodings and Unicode:: 
* Standard Encodings:: 
* Python Specific Encodings:: 
* encodings.idna: encodings idna --- Internationalized Domain Names in Applications. Internationalized Domain Names in Applications
* encodings.utf_8_sig: encodings utf_8_sig --- UTF-8 codec with BOM signature. UTF-8 codec with BOM signature

Codec Base Classes

* Codec Objects:: 
* IncrementalEncoder Objects:: 
* IncrementalDecoder Objects:: 
* StreamWriter Objects:: 
* StreamReader Objects:: 
* StreamReaderWriter Objects:: 
* StreamRecoder Objects:: 


File: python.info,  Node: string --- Common string operations,  Next: re --- Regular expression operations,  Up: String Services

5.7.1 ‘string’ — Common string operations
-----------------------------------------

*Source code:* Lib/string.py(1)

    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

  The *note string: 163. module contains a number of useful constants
and classes, as well as some deprecated legacy functions that are also
available as methods on strings.  In addition, Python’s built-in string
classes support the sequence type methods described in the *note
Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange:
521. section, and also the string-specific methods described in the
*note String Methods: 522. section.  To output formatted strings use
template strings or the ‘%’ operator described in the *note String
Formatting Operations: 524. section.  Also, see the *note re: 143.
module for string functions based on regular expressions.

* Menu:

* String constants:: 
* String Formatting:: 
* Format String Syntax:: 
* Template strings:: 
* String functions:: 
* Deprecated string functions:: 

   ---------- Footnotes ----------

   (1) http://hg.python.org/cpython/file/2.7/Lib/string.py


File: python.info,  Node: String constants,  Next: String Formatting,  Up: string --- Common string operations

5.7.1.1 String constants
........................

The constants defined in this module are:

 -- Data: string.ascii_letters

     The concatenation of the *note ascii_lowercase: 967. and *note
     ascii_uppercase: 968. constants described below.  This value is not
     locale-dependent.

 -- Data: string.ascii_lowercase

     The lowercase letters ‘'abcdefghijklmnopqrstuvwxyz'’.  This value
     is not locale-dependent and will not change.

 -- Data: string.ascii_uppercase

     The uppercase letters ‘'ABCDEFGHIJKLMNOPQRSTUVWXYZ'’.  This value
     is not locale-dependent and will not change.

 -- Data: string.digits

     The string ‘'0123456789'’.

 -- Data: string.hexdigits

     The string ‘'0123456789abcdefABCDEF'’.

 -- Data: string.letters

     The concatenation of the strings *note lowercase: 96b. and *note
     uppercase: 96c. described below.  The specific value is
     locale-dependent, and will be updated when *note
     locale.setlocale(): 96d. is called.

 -- Data: string.lowercase

     A string containing all the characters that are considered
     lowercase letters.  On most systems this is the string
     ‘'abcdefghijklmnopqrstuvwxyz'’.  The specific value is
     locale-dependent, and will be updated when *note
     locale.setlocale(): 96d. is called.

 -- Data: string.octdigits

     The string ‘'01234567'’.

 -- Data: string.punctuation

     String of ASCII characters which are considered punctuation
     characters in the ‘C’ locale.

 -- Data: string.printable

     String of characters which are considered printable.  This is a
     combination of *note digits: 969, *note letters: 49b, *note
     punctuation: 96f, and *note whitespace: 971.

 -- Data: string.uppercase

     A string containing all the characters that are considered
     uppercase letters.  On most systems this is the string
     ‘'ABCDEFGHIJKLMNOPQRSTUVWXYZ'’.  The specific value is
     locale-dependent, and will be updated when *note
     locale.setlocale(): 96d. is called.

 -- Data: string.whitespace

     A string containing all characters that are considered whitespace.
     On most systems this includes the characters space, tab, linefeed,
     return, formfeed, and vertical tab.


File: python.info,  Node: String Formatting,  Next: Format String Syntax,  Prev: String constants,  Up: string --- Common string operations

5.7.1.2 String Formatting
.........................

New in version 2.6.

  The built-in str and unicode classes provide the ability to do complex
variable substitutions and value formatting via the *note str.format():
1d2. method described in PEP 3101(1).  The *note Formatter: 973. class
in the *note string: 163. module allows you to create and customize your
own string formatting behaviors using the same implementation as the
built-in *note format(): 1ef. method.

 -- Class: string.Formatter

     The *note Formatter: 973. class has the following public methods:

      -- Method: format (format_string, *args, **kwargs)

          *note format(): 1ef. is the primary API method.  It takes a
          format string and an arbitrary set of positional and keyword
          arguments.  *note format(): 1ef. is just a wrapper that calls
          *note vformat(): 975.

      -- Method: vformat (format_string, args, kwargs)

          This function does the actual work of formatting.  It is
          exposed as a separate function for cases where you want to
          pass in a predefined dictionary of arguments, rather than
          unpacking and repacking the dictionary as individual arguments
          using the ‘*args’ and ‘**kwargs’ syntax.  *note vformat():
          975. does the work of breaking up the format string into
          character data and replacement fields.  It calls the various
          methods described below.

     In addition, the *note Formatter: 973. defines a number of methods
     that are intended to be replaced by subclasses:

      -- Method: parse (format_string)

          Loop over the format_string and return an iterable of tuples
          (_literal_text_, _field_name_, _format_spec_, _conversion_).
          This is used by *note vformat(): 975. to break the string into
          either literal text, or replacement fields.

          The values in the tuple conceptually represent a span of
          literal text followed by a single replacement field.  If there
          is no literal text (which can happen if two replacement fields
          occur consecutively), then _literal_text_ will be a
          zero-length string.  If there is no replacement field, then
          the values of _field_name_, _format_spec_ and _conversion_
          will be ‘None’.

      -- Method: get_field (field_name, args, kwargs)

          Given _field_name_ as returned by *note parse(): 976. (see
          above), convert it to an object to be formatted.  Returns a
          tuple (obj, used_key).  The default version takes strings of
          the form defined in PEP 3101(2), such as "0[name]" or
          "label.title".  _args_ and _kwargs_ are as passed in to *note
          vformat(): 975.  The return value _used_key_ has the same
          meaning as the _key_ parameter to *note get_value(): 978.

      -- Method: get_value (key, args, kwargs)

          Retrieve a given field value.  The _key_ argument will be
          either an integer or a string.  If it is an integer, it
          represents the index of the positional argument in _args_; if
          it is a string, then it represents a named argument in
          _kwargs_.

          The _args_ parameter is set to the list of positional
          arguments to *note vformat(): 975, and the _kwargs_ parameter
          is set to the dictionary of keyword arguments.

          For compound field names, these functions are only called for
          the first component of the field name; Subsequent components
          are handled through normal attribute and indexing operations.

          So for example, the field expression ’0.name’ would cause
          *note get_value(): 978. to be called with a _key_ argument of
          0.  The ‘name’ attribute will be looked up after *note
          get_value(): 978. returns by calling the built-in *note
          getattr(): 875. function.

          If the index or keyword refers to an item that does not exist,
          then an *note IndexError: 4e1. or *note KeyError: 205. should
          be raised.

      -- Method: check_unused_args (used_args, args, kwargs)

          Implement checking for unused arguments if desired.  The
          arguments to this function is the set of all argument keys
          that were actually referred to in the format string (integers
          for positional arguments, and strings for named arguments),
          and a reference to the _args_ and _kwargs_ that was passed to
          vformat.  The set of unused args can be calculated from these
          parameters.  *note check_unused_args(): 979. is assumed to
          raise an exception if the check fails.

      -- Method: format_field (value, format_spec)

          *note format_field(): 97a. simply calls the global *note
          format(): 1ef. built-in.  The method is provided so that
          subclasses can override it.

      -- Method: convert_field (value, conversion)

          Converts the value (returned by *note get_field(): 977.) given
          a conversion type (as in the tuple returned by the *note
          parse(): 976. method).  The default version understands ’s’
          (str), ’r’ (repr) and ’a’ (ascii) conversion types.

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-3101

   (2) http://www.python.org/dev/peps/pep-3101


File: python.info,  Node: Format String Syntax,  Next: Template strings,  Prev: String Formatting,  Up: string --- Common string operations

5.7.1.3 Format String Syntax
............................

The *note str.format(): 1d2. method and the *note Formatter: 973. class
share the same syntax for format strings (although in the case of *note
Formatter: 973, subclasses can define their own format string syntax).

  Format strings contain "replacement fields" surrounded by curly braces
‘{}’.  Anything that is not contained in braces is considered literal
text, which is copied unchanged to the output.  If you need to include a
brace character in the literal text, it can be escaped by doubling: ‘{{’
and ‘}}’.

  The grammar for a replacement field is as follows:

          replacement_field ::= "{" [field_name] ["!" conversion] [":" format_spec] "}"
          field_name        ::= arg_name ("." attribute_name | "[" element_index "]")*
          arg_name          ::= [identifier | integer]
          attribute_name    ::= identifier
          element_index     ::= integer | index_string
          index_string      ::= <any source character except "]"> +
          conversion        ::= "r" | "s"
          format_spec       ::= <described in the next section>


  In less formal terms, the replacement field can start with a
_field_name_ that specifies the object whose value is to be formatted
and inserted into the output instead of the replacement field.  The
_field_name_ is optionally followed by a _conversion_ field, which is
preceded by an exclamation point ‘'!'’, and a _format_spec_, which is
preceded by a colon ‘':'’.  These specify a non-default format for the
replacement value.

  See also the *note Format Specification Mini-Language: 883. section.

  The _field_name_ itself begins with an _arg_name_ that is either a
number or a keyword.  If it’s a number, it refers to a positional
argument, and if it’s a keyword, it refers to a named keyword argument.
If the numerical arg_names in a format string are 0, 1, 2, ...  in
sequence, they can all be omitted (not just some) and the numbers 0, 1,
2, ...  will be automatically inserted in that order.  Because
_arg_name_ is not quote-delimited, it is not possible to specify
arbitrary dictionary keys (e.g., the strings ‘'10'’ or ‘':-]'’) within a
format string.  The _arg_name_ can be followed by any number of index or
attribute expressions.  An expression of the form ‘'.name'’ selects the
named attribute using *note getattr(): 875, while an expression of the
form ‘'[index]'’ does an index lookup using *note __getitem__(): 44f.

  Changed in version 2.7: The positional argument specifiers can be
omitted, so ‘'{} {}'’ is equivalent to ‘'{0} {1}'’.

  Some simple format string examples:

     "First, thou shalt count to {0}" # References first positional argument
     "Bring me a {}"                  # Implicitly references the first positional argument
     "From {} to {}"                  # Same as "From {0} to {1}"
     "My quest is {name}"             # References keyword argument 'name'
     "Weight in tons {0.weight}"      # 'weight' attribute of first positional arg
     "Units destroyed: {players[0]}"  # First element of keyword argument 'players'.

  The _conversion_ field causes a type coercion before formatting.
Normally, the job of formatting a value is done by the ‘__format__()’
method of the value itself.  However, in some cases it is desirable to
force a type to be formatted as a string, overriding its own definition
of formatting.  By converting the value to a string before calling
‘__format__()’, the normal formatting logic is bypassed.

  Two conversion flags are currently supported: ‘'!s'’ which calls *note
str(): 1ea. on the value, and ‘'!r'’ which calls *note repr(): 145.

  Some examples:

     "Harold's a clever {0!s}"        # Calls str() on the argument first
     "Bring out the holy {name!r}"    # Calls repr() on the argument first

  The _format_spec_ field contains a specification of how the value
should be presented, including such details as field width, alignment,
padding, decimal precision and so on.  Each value type can define its
own "formatting mini-language" or interpretation of the _format_spec_.

  Most built-in types support a common formatting mini-language, which
is described in the next section.

  A _format_spec_ field can also include nested replacement fields
within it.  These nested replacement fields can contain only a field
name; conversion flags and format specifications are not allowed.  The
replacement fields within the format_spec are substituted before the
_format_spec_ string is interpreted.  This allows the formatting of a
value to be dynamically specified.

  See the *note Format examples: 985. section for some examples.

* Menu:

* Format Specification Mini-Language:: 
* Format examples:: 


File: python.info,  Node: Format Specification Mini-Language,  Next: Format examples,  Up: Format String Syntax

5.7.1.4 Format Specification Mini-Language
..........................................

"Format specifications" are used within replacement fields contained
within a format string to define how individual values are presented
(see *note Format String Syntax: 308.).  They can also be passed
directly to the built-in *note format(): 1ef. function.  Each
formattable type may define how the format specification is to be
interpreted.

  Most built-in types implement the following options for format
specifications, although some of the formatting options are only
supported by the numeric types.

  A general convention is that an empty format string (‘""’) produces
the same result as if you had called *note str(): 1ea. on the value.  A
non-empty format string typically modifies the result.

  The general form of a _standard format specifier_ is:

     format_spec ::= [[fill]align][sign][#][0][width][,][.precision][type]
     fill        ::= <any character>
     align       ::= "<" | ">" | "=" | "^"
     sign        ::= "+" | "-" | " "
     width       ::= integer
     precision   ::= integer
     type        ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"


  If a valid _align_ value is specified, it can be preceded by a _fill_
character that can be any character and defaults to a space if omitted.
Note that it is not possible to use ‘{’ and ‘}’ as _fill_ char while
using the *note str.format(): 1d2. method; this limitation however
doesn’t affect the *note format(): 1ef. function.

  The meaning of the various alignment options is as follows:

     Option        Meaning
                   
     -----------------------------------------------------------------------------
                   
     ‘'<'’         Forces the field to be left-aligned within the available
                   space (this is the default for most objects).
                   
                   
     ‘'>'’         Forces the field to be right-aligned within the available
                   space (this is the default for numbers).
                   
                   
     ‘'='’         Forces the padding to be placed after the sign (if any) but
                   before the digits.  This is used for printing fields in the
                   form ’+000000120’.  This alignment option is only valid for
                   numeric types.
                   
                   
     ‘'^'’         Forces the field to be centered within the available space.
                   

  Note that unless a minimum field width is defined, the field width
will always be the same size as the data to fill it, so that the
alignment option has no meaning in this case.

  The _sign_ option is only valid for number types, and can be one of
the following:

     Option        Meaning
                   
     -----------------------------------------------------------------------------
                   
     ‘'+'’         indicates that a sign should be used for both positive as
                   well as negative numbers.
                   
                   
     ‘'-'’         indicates that a sign should be used only for negative
                   numbers (this is the default behavior).
                   
                   
     space         indicates that a leading space should be used on positive
                   numbers, and a minus sign on negative numbers.
                   

  The ‘'#'’ option is only valid for integers, and only for binary,
octal, or hexadecimal output.  If present, it specifies that the output
will be prefixed by ‘'0b'’, ‘'0o'’, or ‘'0x'’, respectively.

  The ‘','’ option signals the use of a comma for a thousands separator.
For a locale aware separator, use the ‘'n'’ integer presentation type
instead.

  Changed in version 2.7: Added the ‘','’ option (see also PEP 378(1)).

  _width_ is a decimal integer defining the minimum field width.  If not
specified, then the field width will be determined by the content.

  Preceding the _width_ field by a zero (‘'0'’) character enables
sign-aware zero-padding for numeric types.  This is equivalent to a
_fill_ character of ‘'0'’ with an _alignment_ type of ‘'='’.

  The _precision_ is a decimal number indicating how many digits should
be displayed after the decimal point for a floating point value
formatted with ‘'f'’ and ‘'F'’, or before and after the decimal point
for a floating point value formatted with ‘'g'’ or ‘'G'’.  For
non-number types the field indicates the maximum field size - in other
words, how many characters will be used from the field content.  The
_precision_ is not allowed for integer values.

  Finally, the _type_ determines how the data should be presented.

  The available string presentation types are:

     Type          Meaning
                   
     -----------------------------------------------------------------------------
                   
     ‘'s'’         String format.  This is the default type for strings and may
                   be omitted.
                   
                   
     None          The same as ‘'s'’.
                   

  The available integer presentation types are:

     Type          Meaning
                   
     -----------------------------------------------------------------------------
                   
     ‘'b'’         Binary format.  Outputs the number in base 2.
                   
                   
     ‘'c'’         Character.  Converts the integer to the corresponding
                   unicode character before printing.
                   
                   
     ‘'d'’         Decimal Integer.  Outputs the number in base 10.
                   
                   
     ‘'o'’         Octal format.  Outputs the number in base 8.
                   
                   
     ‘'x'’         Hex format.  Outputs the number in base 16, using lower-
                   case letters for the digits above 9.
                   
                   
     ‘'X'’         Hex format.  Outputs the number in base 16, using upper-
                   case letters for the digits above 9.
                   
                   
     ‘'n'’         Number.  This is the same as ‘'d'’, except that it uses the
                   current locale setting to insert the appropriate number
                   separator characters.
                   
                   
     None          The same as ‘'d'’.
                   

  In addition to the above presentation types, integers can be formatted
with the floating point presentation types listed below (except ‘'n'’
and None).  When doing so, *note float(): 1eb. is used to convert the
integer to a floating point number before formatting.

  The available presentation types for floating point and decimal values
are:

     Type          Meaning
                   
     -----------------------------------------------------------------------------
                   
     ‘'e'’         Exponent notation.  Prints the number in scientific notation
                   using the letter ’e’ to indicate the exponent.  The default
                   precision is ‘6’.
                   
                   
     ‘'E'’         Exponent notation.  Same as ‘'e'’ except it uses an upper
                   case ’E’ as the separator character.
                   
                   
     ‘'f'’         Fixed point.  Displays the number as a fixed-point number.
                   The default precision is ‘6’.
                   
                   
     ‘'F'’         Fixed point.  Same as ‘'f'’.
                   
                   
     ‘'g'’         General format.  For a given precision ‘p >= 1’, this rounds
                   the number to ‘p’ significant digits and then formats the
                   result in either fixed-point format or in scientific
                   notation, depending on its magnitude.
                   
                   The precise rules are as follows: suppose that the result
                   formatted with presentation type ‘'e'’ and precision ‘p-1’
                   would have exponent ‘exp’.  Then if ‘-4 <= exp < p’, the
                   number is formatted with presentation type ‘'f'’ and
                   precision ‘p-1-exp’.  Otherwise, the number is formatted
                   with presentation type ‘'e'’ and precision ‘p-1’.  In both
                   cases insignificant trailing zeros are removed from the
                   significand, and the decimal point is also removed if there
                   are no remaining digits following it.
                   
                   Positive and negative infinity, positive and negative zero,
                   and nans, are formatted as ‘inf’, ‘-inf’, ‘0’, ‘-0’ and
                   ‘nan’ respectively, regardless of the precision.
                   
                   A precision of ‘0’ is treated as equivalent to a precision
                   of ‘1’.  The default precision is ‘6’.
                   
                   
     ‘'G'’         General format.  Same as ‘'g'’ except switches to ‘'E'’ if
                   the number gets too large.  The representations of infinity
                   and NaN are uppercased, too.
                   
                   
     ‘'n'’         Number.  This is the same as ‘'g'’, except that it uses the
                   current locale setting to insert the appropriate number
                   separator characters.
                   
                   
     ‘'%'’         Percentage.  Multiplies the number by 100 and displays in
                   fixed (‘'f'’) format, followed by a percent sign.
                   
                   
     None          The same as ‘'g'’.
                   

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0378


File: python.info,  Node: Format examples,  Prev: Format Specification Mini-Language,  Up: Format String Syntax

5.7.1.5 Format examples
.......................

This section contains examples of the new format syntax and comparison
with the old ‘%’-formatting.

  In most of the cases the syntax is similar to the old ‘%’-formatting,
with the addition of the ‘{}’ and with ‘:’ used instead of ‘%’.  For
example, ‘'%03.2f'’ can be translated to ‘'{:03.2f}'’.

  The new format syntax also supports new and different options, shown
in the follow examples.

  Accessing arguments by position:

     >>> '{0}, {1}, {2}'.format('a', 'b', 'c')
     'a, b, c'
     >>> '{}, {}, {}'.format('a', 'b', 'c')  # 2.7+ only
     'a, b, c'
     >>> '{2}, {1}, {0}'.format('a', 'b', 'c')
     'c, b, a'
     >>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence
     'c, b, a'
     >>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be repeated
     'abracadabra'

  Accessing arguments by name:

     >>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')
     'Coordinates: 37.24N, -115.81W'
     >>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}
     >>> 'Coordinates: {latitude}, {longitude}'.format(**coord)
     'Coordinates: 37.24N, -115.81W'

  Accessing arguments’ attributes:

     >>> c = 3-5j
     >>> ('The complex number {0} is formed from the real part {0.real} '
     ...  'and the imaginary part {0.imag}.').format(c)
     'The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.'
     >>> class Point(object):
     ...     def __init__(self, x, y):
     ...         self.x, self.y = x, y
     ...     def __str__(self):
     ...         return 'Point({self.x}, {self.y})'.format(self=self)
     ...
     >>> str(Point(4, 2))
     'Point(4, 2)'

  Accessing arguments’ items:

     >>> coord = (3, 5)
     >>> 'X: {0[0]};  Y: {0[1]}'.format(coord)
     'X: 3;  Y: 5'

  Replacing ‘%s’ and ‘%r’:

     >>> "repr() shows quotes: {!r}; str() doesn't: {!s}".format('test1', 'test2')
     "repr() shows quotes: 'test1'; str() doesn't: test2"

  Aligning the text and specifying a width:

     >>> '{:<30}'.format('left aligned')
     'left aligned                  '
     >>> '{:>30}'.format('right aligned')
     '                 right aligned'
     >>> '{:^30}'.format('centered')
     '           centered           '
     >>> '{:*^30}'.format('centered')  # use '*' as a fill char
     '***********centered***********'

  Replacing ‘%+f’, ‘%-f’, and ‘% f’ and specifying a sign:

     >>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always
     '+3.140000; -3.140000'
     >>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers
     ' 3.140000; -3.140000'
     >>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:f}; {:f}'
     '3.140000; -3.140000'

  Replacing ‘%x’ and ‘%o’ and converting the value to different bases:

     >>> # format also supports binary numbers
     >>> "int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}".format(42)
     'int: 42;  hex: 2a;  oct: 52;  bin: 101010'
     >>> # with 0x, 0o, or 0b as prefix:
     >>> "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}".format(42)
     'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'

  Using the comma as a thousands separator:

     >>> '{:,}'.format(1234567890)
     '1,234,567,890'

  Expressing a percentage:

     >>> points = 19.5
     >>> total = 22
     >>> 'Correct answers: {:.2%}'.format(points/total)
     'Correct answers: 88.64%'

  Using type-specific formatting:

     >>> import datetime
     >>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)
     >>> '{:%Y-%m-%d %H:%M:%S}'.format(d)
     '2010-07-04 12:15:58'

  Nesting arguments and more complex examples:

     >>> for align, text in zip('<^>', ['left', 'center', 'right']):
     ...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)
     ...
     'left<<<<<<<<<<<<'
     '^^^^^center^^^^^'
     '>>>>>>>>>>>right'
     >>>
     >>> octets = [192, 168, 0, 1]
     >>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)
     'C0A80001'
     >>> int(_, 16)
     3232235521
     >>>
     >>> width = 5
     >>> for num in range(5,12):
     ...     for base in 'dXob':
     ...         print '{0:{width}{base}}'.format(num, base=base, width=width),
     ...     print
     ...
         5     5     5   101
         6     6     6   110
         7     7     7   111
         8     8    10  1000
         9     9    11  1001
        10     A    12  1010
        11     B    13  1011


File: python.info,  Node: Template strings,  Next: String functions,  Prev: Format String Syntax,  Up: string --- Common string operations

5.7.1.6 Template strings
........................

New in version 2.4.

  Templates provide simpler string substitutions as described in PEP
292(1).  Instead of the normal ‘%’-based substitutions, Templates
support ‘$’-based substitutions, using the following rules:

   * ‘$$’ is an escape; it is replaced with a single ‘$’.

   * ‘$identifier’ names a substitution placeholder matching a mapping
     key of ‘"identifier"’.  By default, ‘"identifier"’ must spell a
     Python identifier.  The first non-identifier character after the
     ‘$’ character terminates this placeholder specification.

   * ‘${identifier}’ is equivalent to ‘$identifier’.  It is required
     when valid identifier characters follow the placeholder but are not
     part of the placeholder, such as ‘"${noun}ification"’.

  Any other appearance of ‘$’ in the string will result in a *note
ValueError: 236. being raised.

  The *note string: 163. module provides a *note Template: 593. class
that implements these rules.  The methods of *note Template: 593. are:

 -- Class: string.Template (template)

     The constructor takes a single argument which is the template
     string.

      -- Method: substitute (mapping[, **kws])

          Performs the template substitution, returning a new string.
          _mapping_ is any dictionary-like object with keys that match
          the placeholders in the template.  Alternatively, you can
          provide keyword arguments, where the keywords are the
          placeholders.  When both _mapping_ and _kws_ are given and
          there are duplicates, the placeholders from _kws_ take
          precedence.

      -- Method: safe_substitute (mapping[, **kws])

          Like *note substitute(): 602, except that if placeholders are
          missing from _mapping_ and _kws_, instead of raising a *note
          KeyError: 205. exception, the original placeholder will appear
          in the resulting string intact.  Also, unlike with *note
          substitute(): 602, any other appearances of the ‘$’ will
          simply return ‘$’ instead of raising *note ValueError: 236.

          While other exceptions may still occur, this method is called
          "safe" because substitutions always tries to return a usable
          string instead of raising an exception.  In another sense,
          *note safe_substitute(): 603. may be anything other than safe,
          since it will silently ignore malformed templates containing
          dangling delimiters, unmatched braces, or placeholders that
          are not valid Python identifiers.

     *note Template: 593. instances also provide one public data
     attribute:

      -- Attribute: template

          This is the object passed to the constructor’s _template_
          argument.  In general, you shouldn’t change it, but read-only
          access is not enforced.

  Here is an example of how to use a Template:

     >>> from string import Template
     >>> s = Template('$who likes $what')
     >>> s.substitute(who='tim', what='kung pao')
     'tim likes kung pao'
     >>> d = dict(who='tim')
     >>> Template('Give $who $100').substitute(d)
     Traceback (most recent call last):
     ...
     ValueError: Invalid placeholder in string: line 1, col 11
     >>> Template('$who likes $what').substitute(d)
     Traceback (most recent call last):
     ...
     KeyError: 'what'
     >>> Template('$who likes $what').safe_substitute(d)
     'tim likes $what'

  Advanced usage: you can derive subclasses of *note Template: 593. to
customize the placeholder syntax, delimiter character, or the entire
regular expression used to parse template strings.  To do this, you can
override these class attributes:

   * _delimiter_ – This is the literal string describing a placeholder
     introducing delimiter.  The default value is ‘$’.  Note that this
     should _not_ be a regular expression, as the implementation will
     call *note re.escape(): 991. on this string as needed.

   * _idpattern_ – This is the regular expression describing the pattern
     for non-braced placeholders (the braces will be added automatically
     as appropriate).  The default value is the regular expression
     ‘[_a-z][_a-z0-9]*’.

  Alternatively, you can provide the entire regular expression pattern
by overriding the class attribute _pattern_.  If you do this, the value
must be a regular expression object with four named capturing groups.
The capturing groups correspond to the rules given above, along with the
invalid placeholder rule:

   * _escaped_ – This group matches the escape sequence, e.g.  ‘$$’, in
     the default pattern.

   * _named_ – This group matches the unbraced placeholder name; it
     should not include the delimiter in capturing group.

   * _braced_ – This group matches the brace enclosed placeholder name;
     it should not include either the delimiter or braces in the
     capturing group.

   * _invalid_ – This group matches any other delimiter pattern (usually
     a single delimiter), and it should appear last in the regular
     expression.

   ---------- Footnotes ----------

   (1) http://www.python.org/dev/peps/pep-0292


File: python.info,  Node: String functions,  Next: Deprecated string functions,  Prev: Template strings,  Up: string --- Common string operations

5.7.1.7 String functions
........................

The following functions are available to operate on string and Unicode
objects.  They are not available as string methods.

 -- Function: string.capwords (s[, sep])

     Split the argument into words using *note str.split(): 8d5,
     capitalize each word using *note str.capitalize(): 8bc, and join
     the capitalized words using *note str.join(): 8ba.  If the optional
     second argument _sep_ is absent or ‘None’, runs of whitespace
     characters are replaced by a single space and leading and trailing
     whitespace are removed, otherwise _sep_ is used to split and join
     the words.

 -- Function: string.maketrans (from, to)

     Return a translation table suitable for passing to *note
     translate(): 994, that will map each character in _from_ into the
     character at the same position in _to_; _from_ and _to_ must have
     the same length.

          Note: Don’t use strings derived from *note lowercase: 96b. and
          *note uppercase: 96c. as arguments; in some locales, these
          don’t have the same length.  For case conversions, always use
          *note str.lower(): 8cd. and *note str.upper(): 8de.


File: python.info,  Node: Deprecated string functions,  Prev: String functions,  Up: string --- Common string operations

5.7.1.8 Deprecated string functions
...................................

The following list of functions are also defined as methods of string
and Unicode objects; see section *note String Methods: 522. for more
information on those.  You should consider these functions as
deprecated, although they will not be removed until Python 3.  The
functions defined in this module are:

 -- Function: string.atof (s)

     Deprecated since version 2.0: Use the *note float(): 1eb. built-in
     function.

     Convert a string to a floating point number.  The string must have
     the standard syntax for a floating point literal in Python,
     optionally preceded by a sign (‘+’ or ‘-’).  Note that this behaves
     identical to the built-in function *note float(): 1eb. when passed
     a string.

          Note: 
          When passing in a string, values for NaN and Infinity may be
          returned, depending on the underlying C library.  The specific
          set of strings accepted which cause these values to be
          returned depends entirely on the C library and is known to
          vary.

 -- Function: string.atoi (s[, base])

     Deprecated since version 2.0: Use the *note int(): 1f2. built-in
     function.

     Convert string _s_ to an integer in the given _base_.  The string
     must consist of one or more digits, optionally preceded by a sign
     (‘+’ or ‘-’).  The _base_ defaults to 10.  If it is 0, a default
     base is chosen depending on the leading characters of the string
     (after stripping the sign): ‘0x’ or ‘0X’ means 16, ‘0’ means 8,
     anything else means 10.  If _base_ is 16, a leading ‘0x’ or ‘0X’ is
     always accepted, though not required.  This behaves identically to
     the built-in function *note int(): 1f2. when passed a string.
     (Also note: for a more flexible interpretation of numeric literals,
     use the built-in function *note eval(): 360.)

 -- Function: string.atol (s[, base])

     Deprecated since version 2.0: Use the *note long(): 1f3. built-in
     function.

     Convert string _s_ to a long integer in the given _base_.  The
     string must consist of one or more digits, optionally preceded by a
     sign (‘+’ or ‘-’).  The _base_ argument has the same meaning as for
     *note atoi(): 997.  A trailing ‘l’ or ‘L’ is not allowed, except if
     the base is 0.  Note that when invoked without _base_ or with
     _base_ set to 10, this behaves identical to the built-in function
     *note long(): 1f3. when passed a string.

 -- Function: string.capitalize (word)

     Return a copy of _word_ with only its first character capitalized.

 -- Function: string.expandtabs (s[, tabsize])

     Expand tabs in a string replacing them by one or more spaces,
     depending on the current column and the given tab size.  The column
     number is reset to zero after each newline occurring in the string.
     This doesn’t understand other non-printing characters or escape
     sequences.  The tab size defaults to 8.

 -- Function: string.find (s, sub[, start[, end]])

     Return the lowest index in _s_ where the substring _sub_ is found
     such that _sub_ is wholly contained in ‘s[start:end]’.  Return ‘-1’
     on failure.  Defaults for _start_ and _end_ and interpretation of
     negative values is the same as for slices.

 -- Function: string.rfind (s, sub[, start[, end]])

     Like *note find(): 99b. but find the highest index.

 -- Function: string.index (s, sub[, start[, end]])

     Like *note find(): 99b. but raise *note ValueError: 236. when the
     substring is not found.

 -- Function: string.rindex (s, sub[, start[, end]])

     Like *note rfind(): 99c. but raise *note ValueError: 236. when the
     substring is not found.

 -- Function: string.count (s, sub[, start[, end]])

     Return the number of (non-overlapping) occurrences of substring
     _sub_ in string ‘s[start:end]’.  Defaults for _start_ and _end_ and
     interpretation of negative values are the same as for slices.

 -- Function: string.lower (s)

     Return a copy of _s_, but with upper case letters converted to
     lower case.

 -- Function: string.split (s[, sep[, maxsplit]])

     Return a list of the words of the string _s_.  If the optional
     second argument _sep_ is absent or ‘None’, the words are separated
     by arbitrary strings of whitespace characters (space, tab, newline,
     return, formfeed).  If the second argument _sep_ is present and not
     ‘None’, it specifies a string to be used as the word separator.
     The returned list will then have one more item than the number of
     non-overlapping occurrences of the separator in the string.  If
     _maxsplit_ is given, at most _maxsplit_ number of splits occur, and
     the remainder of the string is returned as the final element of the
     list (thus, the list will have at most ‘maxsplit+1’ elements).  If
     _maxsplit_ is not specified or ‘-1’, then there is no limit on the
     number of splits (all possible splits are made).

     The behavior of split on an empty string depends on the value of
     _sep_.  If _sep_ is not specified, or specified as ‘None’, the
     result will be an empty list.  If _sep_ is specified as any string,
     the result will be a list containing one element which is an empty
     string.

 -- Function: string.rsplit (s[, sep[, maxsplit]])

     Return a list of the words of the string _s_, scanning _s_ from the
     end.  To all intents and purposes, the resulting list of words is
     the same as returned by *note split(): 9a1, except when the
     optional third argument _maxsplit_ is explicitly specified and
     nonzero.  If _maxsplit_ is given, at most _maxsplit_ number of
     splits – the _rightmost_ ones – occur, and the remainder of the
     string is returned as the first element of the list (thus, the list
     will have at most ‘maxsplit+1’ elements).

     New in version 2.4.

 -- Function: string.splitfields (s[, sep[, maxsplit]])

     This function behaves identically to *note split(): 9a1.  (In the
     past, *note split(): 9a1. was only used with one argument, while
     *note splitfields(): 9a3. was only used with two arguments.)

 -- Function: string.join (words[, sep])

     Concatenate a list or tuple of words with intervening occurrences
     of _sep_.  The default value for _sep_ is a single space character.
     It is always true that ‘string.join(string.split(s, sep), sep)’
     equals _s_.

 -- Function: string.joinfields (words[, sep])

     This function behaves identically to *note join(): 4dc.  (In the
     past, *note join(): 4dc. was only used with one argument, while
     *note joinfields(): 9a4. was only used with two arguments.)  Note
     that there is no *note joinfields(): 9a4. method on string objects;
     use the *note join(): 4dc. method instead.

 -- Function: string.lstrip (s[, chars])

     Return a copy of the string with leading characters removed.  If
     _chars_ is omitted or ‘None’, whitespace characters are removed.
     If given and not ‘None’, _chars_ must be a string; the characters
     in the string will be stripped from the beginning of the string
     this method is called on.

     Changed in version 2.2.3: The _chars_ parameter was added.  The
     _chars_ parameter cannot be passed in earlier 2.2 versions.

 -- Function: string.rstrip (s[, chars])

     Return a copy of the string with trailing characters removed.  If
     _chars_ is omitted or ‘None’, whitespace characters are removed.
     If given and not ‘None’, _chars_ must be a string; the characters
     in the string will be stripped from the end of the string this
     method is called on.

     Changed in version 2.2.3: The _chars_ parameter was added.  The
     _chars_ parameter cannot be passed in earlier 2.2 versions.

 -- Function: string.strip (s[, chars])

     Return a copy of the string with leading and trailing characters
     removed.  If _chars_ is omitted or ‘None’, whitespace characters
     are removed.  If given and not ‘None’, _chars_ must be a string;
     the characters in the string will be stripped from the both ends of
     the string this method is called on.

     Changed in version 2.2.3: The _chars_ parameter was added.  The
     _chars_ parameter cannot be passed in earlier 2.2 versions.

 -- Function: string.swapcase (s)

     Return a copy of _s_, but with lower case letters converted to
     upper case and vice versa.

 -- Function: string.translate (s, table[, deletechars])

     Delete all characters from _s_ that are in _deletechars_ (if
     present), and then translate the characters using _table_, which
     must be a 256-character string giving the translation for each
     character value, indexed by its ordinal.  If _table_ is ‘None’,
     then only the character deletion step is performed.

 -- Function: string.upper (s)

     Return a copy of _s_, but with lower case letters converted to
     upper case.

 -- Function: string.ljust (s, width[, fillchar])
 -- Function: string.rjust (s, width[, fillchar])
 -- Function: string.center (s, width[, fillchar])

     These functions respectively left-justify, right-justify and center
     a string in a field of given width.  They return a string that is
     at least _width_ characters wide, created by padding the string _s_
     with the character _fillchar_ (default is a space) until the given
     width on the right, left or both sides.  The string is never
     truncated.

 -- Function: string.zfill (s, width)

     Pad a numeric string _s_ on the left with zero digits until the
     given _width_ is reached.  Strings starting with a sign are handled
     correctly.

 -- Function: string.replace (s, old, new[, maxreplace])

     Return a copy of string _s_ with all occurrences of substring _old_
     replaced by _new_.  If the optional argument _maxreplace_ is given,
     the first _maxreplace_ occurrences are replaced.


File: python.info,  Node: re --- Regular expression operations,  Next: struct --- Interpret strings as packed binary data,  Prev: string --- Common string operations,  Up: String Services

5.7.2 ‘re’ — Regular expression operations
------------------------------------------

This module provides regular expression matching operations similar to
those found in Perl.  Both patterns and strings to be searched can be
Unicode strings as well as 8-bit strings.

  Regular expressions use the backslash character (‘'\'’) to indicate
special forms or to allow special characters to be used without invoking
their special meaning.  This collides with Python’s usage of the same
character for the same purpose in string literals; for example, to match
a literal backslash, one might have to write ‘'\\\\'’ as the pattern
string, because the regular expression must be ‘\\’, and each backslash
must be expressed as ‘\\’ inside a regular Python string literal.

  The solution is to use Python’s raw string notation for regular
expression patterns; backslashes are not handled in any special way in a
string literal prefixed with ‘'r'’.  So ‘r"\n"’ is a two-character
string containing ‘'\'’ and ‘'n'’, while ‘"\n"’ is a one-character
string containing a newline.  Usually patterns will be expressed in
Python code using this raw string notation.

  It is important to note that most regular expression operations are
available as module-level functions and *note RegexObject: 9b0. methods.
The functions are shortcuts that don’t require you to compile a regex
object first, but miss some fine-tuning parameters.

See also
........

Mastering Regular Expressions

     Book on regular expressions by Jeffrey Friedl, published by
     O’Reilly.  The second edition of the book no longer covers Python
     at all, but the first edition covered writing good regular
     expression patterns in great detail.

* Menu:

* Regular Expression Syntax:: 
* Module Contents:: 
* Regular Expression Objects:: 
* Match Objects:: 
* Examples:: 


File: python.info,  Node: Regular Expression Syntax,  Next: Module Contents,  Up: re --- Regular expression operations

5.7.2.1 Regular Expression Syntax
.................................

A regular expression (or RE) specifies a set of strings that matches it;
the functions in this module let you check if a particular string
matches a given regular expression (or if a given regular expression
matches a particular string, which comes down to the same thing).

  Regular expressions can be concatenated to form new regular
expressions; if _A_ and _B_ are both regular expressions, then _AB_ is
also a regular expression.  In general, if a string _p_ matches _A_ and
another string _q_ matches _B_, the string _pq_ will match AB. This
holds unless _A_ or _B_ contain low precedence operations; boundary
conditions between _A_ and _B_; or have numbered group references.
Thus, complex expressions can easily be constructed from simpler
primitive expressions like the ones described here.  For details of the
theory and implementation of regular expressions, consult the Friedl
book referenced above, or almost any textbook about compiler
construction.

  A brief explanation of the format of regular expressions follows.  For
further information and a gentler presentation, consult the *note
Regular Expression HOWTO: 9b3.

  Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like ‘'A'’, ‘'a'’, or ‘'0'’, are the simplest
regular expressions; they simply match themselves.  You can concatenate
ordinary characters, so ‘last’ matches the string ‘'last'’.  (In the
rest of this section, we’ll write RE’s in ‘this special style’, usually
without quotes, and strings to be matched ‘'in single quotes'’.)

  Some characters, like ‘'|'’ or ‘'('’, are special.  Special characters
either stand for classes of ordinary characters, or affect how the
regular expressions around them are interpreted.  Regular expression
pattern strings may not contain null bytes, but can specify the null
byte using the ‘\number’ notation, e.g., ‘'\x00'’.

  The special characters are:

‘'.'’

     (Dot.)  In the default mode, this matches any character except a
     newline.  If the *note DOTALL: 9b4. flag has been specified, this
     matches any character including a newline.

‘'^'’

     (Caret.)  Matches the start of the string, and in *note MULTILINE:
     9b5. mode also matches immediately after each newline.

‘'$'’

     Matches the end of the string or just before the newline at the end
     of the string, and in *note MULTILINE: 9b5. mode also matches
     before a newline.  ‘foo’ matches both ’foo’ and ’foobar’, while the
     regular expression ‘foo$’ matches only ’foo’.  More interestingly,
     searching for ‘foo.$’ in ‘'foo1\nfoo2\n'’ matches ’foo2’ normally,
     but ’foo1’ in *note MULTILINE: 9b5. mode; searching for a single
     ‘$’ in ‘'foo\n'’ will find two (empty) matches: one just before the
     newline, and one at the end of the string.

‘'*'’

     Causes the resulting RE to match 0 or more repetitions of the
     preceding RE, as many repetitions as are possible.  ‘ab*’ will
     match ’a’, ’ab’, or ’a’ followed by any number of ’b’s.

‘'+'’

     Causes the resulting RE to match 1 or more repetitions of the
     preceding RE. ‘ab+’ will match ’a’ followed by any non-zero number
     of ’b’s; it will not match just ’a’.

‘'?'’

     Causes the resulting RE to match 0 or 1 repetitions of the
     preceding RE. ‘ab?’ will match either ’a’ or ’ab’.

‘*?’, ‘+?’, ‘??’

     The ‘'*'’, ‘'+'’, and ‘'?'’ qualifiers are all _greedy_; they match
     as much text as possible.  Sometimes this behaviour isn’t desired;
     if the RE ‘<.*>’ is matched against ‘'<H1>title</H1>'’, it will
     match the entire string, and not just ‘'<H1>'’.  Adding ‘'?'’ after
     the qualifier makes it perform the match in _non-greedy_ or
     _minimal_ fashion; as _few_ characters as possible will be matched.
     Using ‘.*?’ in the previous expression will match only ‘'<H1>'’.

‘{m}’

     Specifies that exactly _m_ copies of the previous RE should be
     matched; fewer matches cause the entire RE not to match.  For
     example, ‘a{6}’ will match exactly six ‘'a'’ characters, but not
     five.

‘{m,n}’

     Causes the resulting RE to match from _m_ to _n_ repetitions of the
     preceding RE, attempting to match as many repetitions as possible.
     For example, ‘a{3,5}’ will match from 3 to 5 ‘'a'’ characters.
     Omitting _m_ specifies a lower bound of zero, and omitting _n_
     specifies an infinite upper bound.  As an example, ‘a{4,}b’ will
     match ‘aaaab’ or a thousand ‘'a'’ characters followed by a ‘b’, but
     not ‘aaab’.  The comma may not be omitted or the modifier would be
     confused with the previously described form.

‘{m,n}?’

     Causes the resulting RE to match from _m_ to _n_ repetitions of the
     preceding RE, attempting to match as _few_ repetitions as possible.
     This is the non-greedy version of the previous qualifier.  For
     example, on the 6-character string ‘'aaaaaa'’, ‘a{3,5}’ will match
     5 ‘'a'’ characters, while ‘a{3,5}?’ will only match 3 characters.

‘'\'’

     Either escapes special characters (permitting you to match
     characters like ‘'*'’, ‘'?'’, and so forth), or signals a special
     sequence; special sequences are discussed below.

     If you’re not using a raw string to express the pattern, remember
     that Python also uses the backslash as an escape sequence in string
     literals; if the escape sequence isn’t recognized by Python’s
     parser, the backslash and subsequent character are included in the
     resulting string.  However, if Python would recognize the resulting
     sequence, the backslash should be repeated twice.  This is
     complicated and hard to understand, so it’s highly recommended that
     you use raw strings for all but the simplest expressions.

‘[]’

     Used to indicate a set of characters.  In a set:

        * Characters can be listed individually, e.g.  ‘[amk]’ will
          match ‘'a'’, ‘'m'’, or ‘'k'’.

        * Ranges of characters can be indicated by giving two characters
          and separating them by a ‘'-'’, for example ‘[a-z]’ will match
          any lowercase ASCII letter, ‘[0-5][0-9]’ will match all the
          two-digits numbers from ‘00’ to ‘59’, and ‘[0-9A-Fa-f]’ will
          match any hexadecimal digit.  If ‘-’ is escaped (e.g.
          ‘[a\-z]’) or if it’s placed as the first or last character
          (e.g.  ‘[a-]’), it will match a literal ‘'-'’.

        * Special characters lose their special meaning inside sets.
          For example, ‘[(+*)]’ will match any of the literal characters
          ‘'('’, ‘'+'’, ‘'*'’, or ‘')'’.

        * Character classes such as ‘\w’ or ‘\S’ (defined below) are
          also accepted inside a set, although the characters they match
          depends on whether *note LOCALE: 9b6. or *note UNICODE: 9b7.
          mode is in force.

        * Characters that are not within a range can be matched by
          _complementing_ the set.  If the first character of the set is
          ‘'^'’, all the characters that are _not_ in the set will be
          matched.  For example, ‘[^5]’ will match any character except
          ‘'5'’, and ‘[^^]’ will match any character except ‘'^'’.  ‘^’
          has no special meaning if it’s not the first character in the
          set.

        * To match a literal ‘']'’ inside a set, precede it with a
          backslash, or place it at the beginning of the set.  For
          example, both ‘[()[\]{}]’ and ‘[]()[{}]’ will both match a
          parenthesis.

‘'|'’

     ‘A|B’, where A and B can be arbitrary REs, creates a regular
     expression that will match either A or B. An arbitrary number of
     REs can be separated by the ‘'|'’ in this way.  This can be used
     inside groups (see below) as well.  As the target string is
     scanned, REs separated by ‘'|'’ are tried from left to right.  When
     one pattern completely matches, that branch is accepted.  This
     means that once ‘A’ matches, ‘B’ will not be tested further, even
     if it would produce a longer overall match.  In other words, the
     ‘'|'’ operator is never greedy.  To match a literal ‘'|'’, use
     ‘\|’, or enclose it inside a character class, as in ‘[|]’.

‘(...)’

     Matches whatever regular expression is inside the parentheses, and
     indicates the start and end of a group; the contents of a group can
     be retrieved after a match has been performed, and can be matched
     later in the string with the ‘\number’ special sequence, described
     below.  To match the literals ‘'('’ or ‘')'’, use ‘\(’ or ‘\)’, or
     enclose them inside a character class: ‘[(] [)]’.

‘(?...)’

     This is an extension notation (a ‘'?'’ following a ‘'('’ is not
     meaningful otherwise).  The first character after the ‘'?'’
     determines what the meaning and further syntax of the construct is.
     Extensions usually do not create a new group; ‘(?P<name>...)’ is
     the only exception to this rule.  Following are the currently
     supported extensions.

‘(?iLmsux)’

     (One or more letters from the set ‘'i'’, ‘'L'’, ‘'m'’, ‘'s'’,
     ‘'u'’, ‘'x'’.)  The group matches the empty string; the letters set
     the corresponding flags: *note re.I: 9b8. (ignore case), *note
     re.L: 9b9. (locale dependent), *note re.M: 9ba. (multi-line), *note
     re.S: 9bb. (dot matches all), *note re.U: 9bc. (Unicode dependent),
     and *note re.X: 9bd. (verbose), for the entire regular expression.
     (The flags are described in *note Module Contents: 9be.)  This is
     useful if you wish to include the flags as part of the regular
     expression, instead of passing a _flag_ argument to the *note
     re.compile(): 9bf. function.

     Note that the ‘(?x)’ flag changes how the expression is parsed.  It
     should be used first in the expression string, or after one or more
     whitespace characters.  If there are non-whitespace characters
     before the flag, the results are undefined.

‘(?:...)’

     A non-capturing version of regular parentheses.  Matches whatever
     regular expression is inside the parentheses, but the substring
     matched by the group _cannot_ be retrieved after performing a match
     or referenced later in the pattern.

‘(?P<name>...)’

     Similar to regular parentheses, but the substring matched by the
     group is accessible via the symbolic group name _name_.  Group
     names must be valid Python identifiers, and each group name must be
     defined only once within a regular expression.  A symbolic group is
     also a numbered group, just as if the group were not named.

     Named groups can be referenced in three contexts.  If the pattern
     is ‘(?P<quote>['"]).*?(?P=quote)’ (i.e.  matching a string quoted
     with either single or double quotes):

     Context of reference to group "quote"       Ways to reference it
                                                 
     -----------------------------------------------------------------------------------
                                                 
     in the same pattern itself                     * ‘(?P=quote)’ (as shown)
                                                 
                                                    * ‘\1’
                                                 
                                                 
     when processing match object ‘m’               * ‘m.group('quote')’
                                                 
                                                    * ‘m.end('quote')’ (etc.)
                                                 
                                                 
     in a string passed to the ‘repl’ argument      * ‘\g<quote>’
     of ‘re.sub()’                               
                                                    * ‘\g<1>’
                                                 
                                                    * ‘\1’
                                                 

‘(?P=name)’

     A backreference to a named group; it matches whatever text was
     matched by the earlier group named _name_.

‘(?#...)’

     A comment; the contents of the parentheses are simply ignored.

‘(?=...)’

     Matches if ‘...’ matches next, but doesn’t consume any of the
     string.  This is called a lookahead assertion.  For example, ‘Isaac
     (?=Asimov)’ will match ‘'Isaac '’ only if it’s followed by
     ‘'Asimov'’.

‘(?!...)’

     Matches if ‘...’ doesn’t match next.  This is a negative lookahead
     assertion.  For example, ‘Isaac (?!Asimov)’ will match ‘'Isaac '’
     only if it’s _not_ followed by ‘'Asimov'’.

‘(?<=...)’

     Matches if the current position in the string is preceded by a
     match for ‘...’ that ends at the current position.  This is called
     a _positive lookbehind assertion_.  ‘(?<=abc)def’ will find a match
     in ‘abcdef’, since the lookbehind will back up 3 characters and
     check if the contained pattern matches.  The contained pattern must
     only match strings of some fixed length, meaning that ‘abc’ or
     ‘a|b’ are allowed, but ‘a*’ and ‘a{3,4}’ are not.  Note that
     patterns which start with positive lookbehind assertions will not
     match at the beginning of the string being searched; you will most
     likely want to use the *note search(): 9c0. function rather than
     the *note match(): 9c1. function:

          >>> import re
          >>> m = re.search('(?<=abc)def', 'abcdef')
          >>> m.group(0)
          'def'

     This example looks for a word following a hyphen:

          >>> m = re.search('(?<=-)\w+', 'spam-egg')
          >>> m.group(0)
          'egg'

‘(?<!...)’

     Matches if the current position in the string is not preceded by a
     match for ‘...’.  This is called a _negative lookbehind assertion_.
     Similar to positive lookbehind assertions, the contained pattern
     must only match strings of some fixed length.  Patterns which start
     with negative lookbehind assertions may match at the beginning of
     the string being searched.

‘(?(id/name)yes-pattern|no-pattern)’

     Will try to match with ‘yes-pattern’ if the group with given _id_
     or _name_ exists, and with ‘no-pattern’ if it doesn’t.
     ‘no-pattern’ is optional and can be omitted.  For example,
     ‘(<)?(\w+@\w+(?:\.\w+)+)(?(1)>)’ is a poor email matching pattern,
     which will match with ‘'<user@host.com>'’ as well as
     ‘'user@host.com'’, but not with ‘'<user@host.com'’.

     New in version 2.4.

  The special sequences consist of ‘'\'’ and a character from the list
below.  If the ordinary character is not on the list, then the resulting
RE will match the second character.  For example, ‘\$’ matches the
character ‘'$'’.

‘\number’

     Matches the contents of the group of the same number.  Groups are
     numbered starting from 1.  For example, ‘(.+) \1’ matches ‘'the
     the'’ or ‘'55 55'’, but not ‘'thethe'’ (note the space after the
     group).  This special sequence can only be used to match one of the
     first 99 groups.  If the first digit of _number_ is 0, or _number_
     is 3 octal digits long, it will not be interpreted as a group
     match, but as the character with octal value _number_.  Inside the
     ‘'['’ and ‘']'’ of a character class, all numeric escapes are
     treated as characters.

‘\A’

     Matches only at the start of the string.

‘\b’

     Matches the empty string, but only at the beginning or end of a
     word.  A word is defined as a sequence of alphanumeric or
     underscore characters, so the end of a word is indicated by
     whitespace or a non-alphanumeric, non-underscore character.  Note
     that formally, ‘\b’ is defined as the boundary between a ‘\w’ and a
     ‘\W’ character (or vice versa), or between ‘\w’ and the
     beginning/end of the string, so the precise set of characters
     deemed to be alphanumeric depends on the values of the ‘UNICODE’
     and ‘LOCALE’ flags.  For example, ‘r'\bfoo\b'’ matches ‘'foo'’,
     ‘'foo.'’, ‘'(foo)'’, ‘'bar foo baz'’ but not ‘'foobar'’ or
     ‘'foo3'’.  Inside a character range, ‘\b’ represents the backspace
     character, for compatibility with Python’s string literals.

‘\B’

     Matches the empty string, but only when it is _not_ at the
     beginning or end of a word.  This means that ‘r'py\B'’ matches
     ‘'python'’, ‘'py3'’, ‘'py2'’, but not ‘'py'’, ‘'py.'’, or ‘'py!'’.
     ‘\B’ is just the opposite of ‘\b’, so is also subject to the
     settings of ‘LOCALE’ and ‘UNICODE’.

‘\d’

     When the *note UNICODE: 9b7. flag is not specified, matches any
     decimal digit; this is equivalent to the set ‘[0-9]’.  With *note
     UNICODE: 9b7, it will match whatever is classified as a decimal
     digit in the Unicode character properties database.

‘\D’

     When the *note UNICODE: 9b7. flag is not specified, matches any
     non-digit character; this is equivalent to the set ‘[^0-9]’.  With
     *note UNICODE: 9b7, it will match anything other than character
     marked as digits in the Unicode character properties database.

‘\s’

     When the *note UNICODE: 9b7. flag is not specified, it matches any
     whitespace character, this is equivalent to the set ‘[
     \t\n\r\f\v]’.  The *note LOCALE: 9b6. flag has no extra effect on
     matching of the space.  If *note UNICODE: 9b7. is set, this will
     match the characters ‘[ \t\n\r\f\v]’ plus whatever is classified as
     space in the Unicode character properties database.

‘\S’

     When the *note UNICODE: 9b7. flags is not specified, matches any
     non-whitespace character; this is equivalent to the set ‘[^
     \t\n\r\f\v]’ The *note LOCALE: 9b6. flag has no extra effect on
     non-whitespace match.  If *note UNICODE: 9b7. is set, then any
     character not marked as space in the Unicode character properties
     database is matched.

‘\w’

     When the *note LOCALE: 9b6. and *note UNICODE: 9b7. flags are not
     specified, matches any alphanumeric character and the underscore;
     this is equivalent to the set ‘[a-zA-Z0-9_]’.  With *note LOCALE:
     9b6, it will match the set ‘[0-9_]’ plus whatever characters are
     defined as alphanumeric for the current locale.  If *note UNICODE:
     9b7. is set, this will match the characters ‘[0-9_]’ plus whatever
     is classified as alphanumeric in the Unicode character properties
     database.

‘\W’

     When the *note LOCALE: 9b6. and *note UNICODE: 9b7. flags are not
     specified, matches any non-alphanumeric character; this is
     equivalent to the set ‘[^a-zA-Z0-9_]’.  With *note LOCALE: 9b6, it
     will match any character not in the set ‘[0-9_]’, and not defined
     as alphanumeric for the current locale.  If *note UNICODE: 9b7. is
     set, this will match anything other than ‘[0-9_]’ plus characters
     classied as not alphanumeric in the Unicode character properties
     database.

‘\Z’

     Matches only at the end of the string.

  If both *note LOCALE: 9b6. and *note UNICODE: 9b7. flags are included
for a particular sequence, then *note LOCALE: 9b6. flag takes effect
first followed by the *note UNICODE: 9b7.

  Most of the standard escapes supported by Python string literals are
also accepted by the regular expression parser:

     \a      \b      \f      \n
     \r      \t      \v      \x
     \\

  (Note that ‘\b’ is used to represent word boundaries, and means
"backspace" only inside character classes.)

  Octal escapes are included in a limited form: If the first digit is a
0, or if there are three octal digits, it is considered an octal escape.
Otherwise, it is a group reference.  As for string literals, octal
escapes are always at most three digits in length.


File: python.info,  Node: Module Contents,  Next: Regular Expression Objects,  Prev: Regular Expression Syntax,  Up: re --- Regular expression operations

5.7.2.2 Module Contents
.......................

The module defines several functions, constants, and an exception.  Some
of the functions are simplified versions of the full featured methods
for compiled regular expressions.  Most non-trivial applications always
use the compiled form.

 -- Function: re.compile (pattern, flags=0)

     Compile a regular expression pattern into a regular expression
     object, which can be used for matching using its *note match():
     9c3. and *note search(): 9c4. methods, described below.

     The expression’s behaviour can be modified by specifying a _flags_
     value.  Values can be any of the following variables, combined
     using bitwise OR (the ‘|’ operator).

     The sequence

          prog = re.compile(pattern)
          result = prog.match(string)

     is equivalent to

          result = re.match(pattern, string)

     but using *note re.compile(): 9bf. and saving the resulting regular
     expression object for reuse is more efficient when the expression
     will be used several times in a single program.

          Note: The compiled versions of the most recent patterns passed
          to *note re.match(): 9c1, *note re.search(): 9c0. or *note
          re.compile(): 9bf. are cached, so programs that use only a few
          regular expressions at a time needn’t worry about compiling
          regular expressions.

 -- Data: re.DEBUG

     Display debug information about compiled expression.

 -- Data: re.I
 -- Data: re.IGNORECASE

     Perform case-insensitive matching; expressions like ‘[A-Z]’ will
     match lowercase letters, too.  This is not affected by the current
     locale.

 -- Data: re.L
 -- Data: re.LOCALE

     Make ‘\w’, ‘\W’, ‘\b’, ‘\B’, ‘\s’ and ‘\S’ dependent on the current
     locale.

 -- Data: re.M
 -- Data: re.MULTILINE

     When specified, the pattern character ‘'^'’ matches at the
     beginning of the string and at the beginning of each line
     (immediately following each newline); and the pattern character
     ‘'$'’ matches at the end of the string and at the end of each line
     (immediately preceding each newline).  By default, ‘'^'’ matches
     only at the beginning of the string, and ‘'$'’ only at the end of
     the string and immediately before the newline (if any) at the end
     of the string.

 -- Data: re.S
 -- Data: re.DOTALL

     Make the ‘'.'’ special character match any character at all,
     including a newline; without this flag, ‘'.'’ will match anything
     _except_ a newline.

 -- Data: re.U
 -- Data: re.UNICODE

     Make ‘\w’, ‘\W’, ‘\b’, ‘\B’, ‘\d’, ‘\D’, ‘\s’ and ‘\S’ dependent on
     the Unicode character properties database.

     New in version 2.0.

 -- Data: re.X
 -- Data: re.VERBOSE

     This flag allows you to write regular expressions that look nicer.
     Whitespace within the pattern is ignored, except when in a
     character class or preceded by an unescaped backslash, and, when a
     line contains a ‘'#'’ neither in a character class or preceded by
     an unescaped backslash, all characters from the leftmost such ‘'#'’
     through the end of the line are ignored.

     That means that the two following regular expression objects that
     match a decimal number are functionally equal:

          a = re.compile(r"""\d +  # the integral part
                             \.    # the decimal point
                             \d *  # some fractional digits""", re.X)
          b = re.compile(r"\d+\.\d*")

 -- Function: re.search (pattern, string, flags=0)

     Scan through _string_ looking for the first location where the
     regular expression _pattern_ produces a match, and return a
     corresponding *note MatchObject: 9c8. instance.  Return ‘None’ if
     no position in the string matches the pattern; note that this is
     different from finding a zero-length match at some point in the
     string.

 -- Function: re.match (pattern, string, flags=0)

     If zero or more characters at the beginning of _string_ match the
     regular expression _pattern_, return a corresponding *note
     MatchObject: 9c8. instance.  Return ‘None’ if the string does not
     match the pattern; note that this is different from a zero-length
     match.

     Note that even in *note MULTILINE: 9b5. mode, *note re.match():
     9c1. will only match at the beginning of the string and not at the
     beginning of each line.

     If you want to locate a match anywhere in _string_, use *note
     search(): 9c0. instead (see also *note search() vs.  match():
     9c9.).

 -- Function: re.split (pattern, string, maxsplit=0, flags=0)

     Split _string_ by the occurrences of _pattern_.  If capturing
     parentheses are used in _pattern_, then the text of all groups in
     the pattern are also returned as part of the resulting list.  If
     _maxsplit_ is nonzero, at most _maxsplit_ splits occur, and the
     remainder of the string is returned as the final element of the
     list.  (Incompatibility note: in the original Python 1.5 release,
     _maxsplit_ was ignored.  This has been fixed in later releases.)

          >>> re.split('\W+', 'Words, words, words.')
          ['Words', 'words', 'words', '']
          >>> re.split('(\W+)', 'Words, words, words.')
          ['Words', ', ', 'words', ', ', 'words', '.', '']
          >>> re.split('\W+', 'Words, words, words.', 1)
          ['Words', 'words, words.']
          >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
          ['0', '3', '9']

     If there are capturing groups in the separator and it matches at
     the start of the string, the result will start with an empty
     string.  The same holds for the end of the string:

          >>> re.split('(\W+)', '...words, words...')
          ['', '...', 'words', ', ', 'words', '...', '']

     That way, separator components are always found at the same
     relative indices within the result list (e.g., if there’s one
     capturing group in the separator, the 0th, the 2nd and so forth).

     Note that _split_ will never split a string on an empty pattern
     match.  For example:

          >>> re.split('x*', 'foo')
          ['foo']
          >>> re.split("(?m)^$", "foo\n\nbar\n")
          ['foo\n\nbar\n']

     Changed in version 2.7: Added the optional flags argument.

 -- Function: re.findall (pattern, string, flags=0)

     Return all non-overlapping matches of _pattern_ in _string_, as a
     list of strings.  The _string_ is scanned left-to-right, and
     matches are returned in the order found.  If one or more groups are
     present in the pattern, return a list of groups; this will be a
     list of tuples if the pattern has more than one group.  Empty
     matches are included in the result unless they touch the beginning
     of another match.

     New in version 1.5.2.

     Changed in version 2.4: Added the optional flags argument.

 -- Function: re.finditer (pattern, string, flags=0)

     Return an *note iterator: 87f. yielding *note MatchObject: 9c8.
     instances over all non-overlapping matches for the RE _pattern_ in
     _string_.  The _string_ is scanned left-to-right, and matches are
     returned in the order found.  Empty matches are included in the
     result unless they touch the beginning of another match.

     New in version 2.2.

     Changed in version 2.4: Added the optional flags argument.

 -- Function: re.sub (pattern, repl, string, count=0, flags=0)

     Return the string obtained by replacing the leftmost
     non-overlapping occurrences of _pattern_ in _string_ by the
     replacement _repl_.  If the pattern isn’t found, _string_ is
     returned unchanged.  _repl_ can be a string or a function; if it is
     a string, any backslash escapes in it are processed.  That is, ‘\n’
     is converted to a single newline character, ‘\r’ is converted to a
     carriage return, and so forth.  Unknown escapes such as ‘\j’ are
     left alone.  Backreferences, such as ‘\6’, are replaced with the
     substring matched by group 6 in the pattern.  For example:

          >>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
          ...        r'static PyObject*\npy_\1(void)\n{',
          ...        'def myfunc():')
          'static PyObject*\npy_myfunc(void)\n{'

     If _repl_ is a function, it is called for every non-overlapping
     occurrence of _pattern_.  The function takes a single match object
     argument, and returns the replacement string.  For example:

          >>> def dashrepl(matchobj):
          ...     if matchobj.group(0) == '-': return ' '
          ...     else: return '-'
          >>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
          'pro--gram files'
          >>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
          'Baked Beans & Spam'

     The pattern may be a string or an RE object.

     The optional argument _count_ is the maximum number of pattern
     occurrences to be replaced; _count_ must be a non-negative integer.
     If omitted or zero, all occurrences will be replaced.  Empty
     matches for the pattern are replaced only when not adjacent to a
     previous match, so ‘sub('x*', '-', 'abc')’ returns ‘'-a-b-c-'’.

     In string-type _repl_ arguments, in addition to the character
     escapes and backreferences described above, ‘\g<name>’ will use the
     substring matched by the group named ‘name’, as defined by the
     ‘(?P<name>...)’ syntax.  ‘\g<number>’ uses the corresponding group
     number; ‘\g<2>’ is therefore equivalent to ‘\2’, but isn’t
     ambiguous in a replacement such as ‘\g<2>0’.  ‘\20’ would be
     interpreted as a reference to group 20, not a reference to group 2
     followed by the literal character ‘'0'’.  The backreference ‘\g<0>’
     substitutes in the entire substring matched by the RE.

     Changed in version 2.7: Added the optional flags argument.

 -- Function: re.subn (pattern, repl, string, count=0, flags=0)

     Perform the same operation as *note sub(): 248, but return a tuple
     ‘(new_string, number_of_subs_made)’.

     Changed in version 2.7: Added the optional flags argument.

 -- Function: re.escape (string)

     Return _string_ with all non-alphanumerics backslashed; this is
     useful if you want to match an arbitrary literal string that may
     have regular expression metacharacters in it.

 -- Function: re.purge ()

     Clear the regular expression cache.

 -- Exception: re.error

     Exception raised when a string passed to one of the functions here
     is not a valid regular expression (for example, it might contain
     unmatched parentheses) or when some other error occurs during
     compilation or matching.  It is never an error if a string contains
     no match for a pattern.

