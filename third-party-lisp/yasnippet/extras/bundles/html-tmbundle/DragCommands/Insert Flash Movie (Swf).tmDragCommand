<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/ruby

require "zlib"

# Test for broken pack/unpack
if [1].pack('n') == "\001\000"
  class String
    alias_method :broken_unpack, :unpack
    def unpack(spec)
      broken_unpack(spec.tr("nNvV","vVnN"))
    end
  end
  class Array
    alias_method :broken_pack, :pack
    def pack(spec)
      broken_pack(spec.tr("nNvV","vVnN"))
    end
  end
end

class Swf
  @bits
  @width
  @height
  @version
  @bgcolor
  @buffer
  
  
  attr_reader :width
  attr_reader :height
  attr_reader :version
  attr_reader :bgcolor
  
  def initialize(f)
    @bits = ""
    @buffer = File.new(f,"r").read
    is_zip = ("" &lt;&lt; @buffer.slice(0)) == "C"
    @version = @buffer.slice(3).to_i
    
    @buffer.slice!(0..7)
    
    if is_zip
      @buffer = Zlib::Inflate.inflate(@buffer)
    end
    
    nbits = getBits(5)
    xmin = getBits(nbits)
    xmax = getBits(nbits)
    ymin = getBits(nbits)
    ymax = getBits(nbits)
    
    @width = (xmax - xmin) / 20
    @height = (ymax - ymin) / 20
    
    @buffer.slice!(0..3)
    
    @bits = ""
    
    while(true)
      tag = getNextTag()
      if(tag[:id] == 9)
        @bgcolor = sprintf("#%02X%02X%02X", tag[:data][0], tag[:data][1], tag[:data][2])
        break
      end
    end
    
  end
  
private

  def getNextTag()
    tag_and_size = @buffer.slice!(0..1).unpack("v")[0]
    tag = {}
    tag[:id] = tag_and_size &gt;&gt; 6
    tag[:length] = tag_and_size &amp; 0x3f
    if(tag[:length] == 63)
      tag[:length] = @buffer.slice!(0..3).unpack("V")[0]
    end
    
    tag[:data] = @buffer.slice!(0...tag[:length])
    return tag
  end
  
  def getBits(n)
    bytes = (n / 8.0).ceil
    (0...bytes).each {
      @bits &lt;&lt; sprintf("%08b", @buffer.slice!(0))
    }
    out = @bits[0...n].to_i(2);
    @bits = @bits[n..-1]
    return out
  end
  
end

file = ENV["TM_DROPPED_FILE"] || "test.swf"
name = file.match(/([^\/]+)\.swf$/)[1]
swf = Swf.new(file)

if (ENV["TM_MODIFIER_FLAGS"] == "OPTION")
print &lt;&lt;HTML
$1&lt;div id="${10:#{name}}"&gt;&lt;/div&gt;
&lt;script type="text/javascript" charset="utf-8"&gt;
    var so = new SWFObject("#{file}", "${20:#{name}_swf}", "#{swf.width}", "#{swf.height}", "#{swf.version}", "#{swf.bgcolor}");
    so.write("$10");
&lt;/script&gt;
HTML
else
xhtml = ENV['TM_XHTML']
print &lt;&lt;HTML
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=#{swf.version},0,0,0" width="#{swf.width}" height="#{swf.height}" id="#{name}" align="middle"&gt;
&lt;param name="allowScriptAccess" value="sameDomain"#{xhtml}&gt;
&lt;param name="movie" value="#{file}"#{xhtml}&gt;
&lt;param name="quality" value="high"#{xhtml}&gt;
&lt;param name="bgcolor" value="#{swf.bgcolor}"#{xhtml}&gt;
&lt;embed src="#{file}" quality="high" bgcolor="#{swf.bgcolor}" width="#{swf.width}" height="#{swf.height}" name="#{name}" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"#{xhtml}&gt;
&lt;/object&gt;
HTML
end</string>
	<key>draggedFileExtensions</key>
	<array>
		<string>swf</string>
	</array>
	<key>input</key>
	<string>selection</string>
	<key>name</key>
	<string>Insert Flash Movie (Swf)</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html</string>
	<key>uuid</key>
	<string>92F77050-74F9-4DF7-9A6E-2B42641849F7</string>
</dict>
</plist>
